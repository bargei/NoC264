
Buffer_Node.elf:     file format elf32-littlenios2
Buffer_Node.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x40000020

Program Header:
    LOAD off    0x00001000 vaddr 0x40000000 paddr 0x40000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x40000020 paddr 0x40000020 align 2**12
         filesz 0x0001aa70 memsz 0x0001aa70 flags r-x
    LOAD off    0x0001ba90 vaddr 0x4001aa90 paddr 0x4001b54c align 2**12
         filesz 0x00000abc memsz 0x00000abc flags rw-
    LOAD off    0x0001d008 vaddr 0x4001c008 paddr 0x4001c008 align 2**12
         filesz 0x00000000 memsz 0x000114d4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  40000000  40000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  40000020  40000020  0001c54c  2**0
                  CONTENTS
  2 .text         0001a398  40000020  40000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006d8  4001a3b8  4001a3b8  0001b3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000abc  4001aa90  4001b54c  0001ba90  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000114d4  4001c008  4001c008  0001d008  2**2
                  ALLOC, SMALL_DATA
  6 .DDR2_Controller_0 00000000  4002d4dc  4002d4dc  0001c54c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001c54c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f50  00000000  00000000  0001c570  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002cd6c  00000000  00000000  0001d4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a57f  00000000  00000000  0004a22c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000dc19  00000000  00000000  000547ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002918  00000000  00000000  000623c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003ede  00000000  00000000  00064cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000264f7  00000000  00000000  00068bba  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0008f0b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000032d0  00000000  00000000  0008f118  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00095b12  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00095b15  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00095b21  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00095b22  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00095b23  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00095b2e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00095b39  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00095b44  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003a  00000000  00000000  00095b4f  2**0
                  CONTENTS, READONLY
 26 .jdi          0000dd99  00000000  00000000  00095b89  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0026db6d  00000000  00000000  000a3922  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
40000000 l    d  .entry	00000000 .entry
40000020 l    d  .exceptions	00000000 .exceptions
40000020 l    d  .text	00000000 .text
4001a3b8 l    d  .rodata	00000000 .rodata
4001aa90 l    d  .rwdata	00000000 .rwdata
4001c008 l    d  .bss	00000000 .bss
4002d4dc l    d  .DDR2_Controller_0	00000000 .DDR2_Controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Buffer_Node_bsp//obj/HAL/src/crt0.o
40000068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 Buffer_Node_Sim.c
4001c010 l     O .bss	00000004 working_buf
4001c014 l     O .bss	00000004 ref_buf
4001c008 l     O .bss	00000008 decode_time_start
00000000 l    df *ABS*	00000000 block.c
00000000 l    df *ABS*	00000000 common.c
00000000 l    df *ABS*	00000000 deblocking_filter.c
4001b508 l     O .rwdata	00000004 id.3286
00000000 l    df *ABS*	00000000 hw_timer.c
4001c01c l     O .bss	00000004 last_read.1716
4001c018 l     O .bss	00000004 overflow_count.1717
4001c05c l     O .bss	00000058 counters
00000000 l    df *ABS*	00000000 intra_pred.c
40001f60 l     F .text	000001f0 rx_intra_packet.constprop.13
40002150 l     F .text	000001f0 rx_intra_packet.constprop.14
40002340 l     F .text	000004c8 send_chroma_intra_packet_2.constprop.15
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mocomp.c
4001b514 l     O .rwdata	00000004 id.3331
4001b510 l     O .rwdata	00000004 id.3368
4001b50c l     O .rwdata	00000004 id.3434
4001c020 l     O .bss	00000004 count.3553
00000000 l    df *ABS*	00000000 noc_control.c
4001c0b4 l     O .bss	00011400 the_buffer
00000000 l    df *ABS*	00000000 perf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
4001aa90 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
4001a8ee l     O .rodata	00000010 zeroes.4404
40011410 l     F .text	000000bc __sbprintf
4001a8fe l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
40011620 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
40013150 l     F .text	00000008 __fp_unlock
40013164 l     F .text	0000019c __sinit.part.1
40013300 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
4001b2dc l     O .rwdata	00000020 lc_ctype_charset
4001b2bc l     O .rwdata	00000020 lc_message_charset
4001b2fc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
4001a92c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
40015d94 l     F .text	000000fc __sprint_r.part.0
4001aa60 l     O .rodata	00000010 blanks.4348
4001aa50 l     O .rodata	00000010 zeroes.4349
40017320 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
40019468 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
4001b548 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
4001b4dc l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
4000efac g     F .text	00000018 putchar
400152c4 g     F .text	00000074 _mprec_log10
40009670 g     F .text	000003d0 send_chroma_motion_comp_packet_fast
400153b0 g     F .text	0000008c __any_on
40017950 g     F .text	00000054 _isatty_r
400041f8 g     F .text	0000004c pack_cr_x
4001a938 g     O .rodata	00000028 __mprec_tinytens
400196b4 g     F .text	00000060 alt_main
4000efc4 g     F .text	000000c0 _puts_r
400179a4 g     F .text	00000060 _lseek_r
40001940 g     F .text	00000340 rx_deblocking_packet
40005850 g     F .text	00000418 rx_intra_packet
4001b54c g       *ABS*	00000000 __flash_rwdata_start
400186fc g     F .text	00000088 .hidden __eqdf2
4000487c g     F .text	000007f8 Intra_Chroma_Plane
4002d4dc g       *ABS*	00000000 __alt_heap_start
4000ef68 g     F .text	0000003c printf
40017a64 g     F .text	0000009c _wcrtomb_r
40015c54 g     F .text	0000005c __sseek
400134a0 g     F .text	00000010 __sinit
400173dc g     F .text	00000140 __swbuf_r
40013f68 g     F .text	0000007c _setlocale_r
40013308 g     F .text	00000068 __sfmoreglue
40019718 g     F .text	00000004 __malloc_unlock
40008f54 g     F .text	000004e4 send_luma_motion_comp_fast
400142e4 g     F .text	0000015c memmove
40013488 g     F .text	00000018 _cleanup
40014440 g     F .text	000000a8 _Balloc
40004130 g     F .text	0000004c pack_luma_x
40003ea0 g     F .text	00000148 print_cr_block
40018784 g     F .text	000000dc .hidden __gtdf2
40019e78 g     F .text	00000008 altera_nios2_gen2_irq_init
40000000 g     F .entry	0000001c __reset
4000af34 g     F .text	0000098c sw_inter_luma
40000020 g       *ABS*	00000000 __flash_exceptions_start
400178f4 g     F .text	0000005c _fstat_r
4001c040 g     O .bss	00000004 errno
40015bd0 g     F .text	00000008 __seofread
4001c054 g     O .bss	00000004 alt_argv
40023508 g       *ABS*	00000000 _gp
40019854 g     F .text	00000004 usleep
4000c09c g     F .text	000000fc MotionCompensateMB_2
4000c60c g     F .text	0000005c perf_enter
40005c68 g     F .text	00001208 Intra_16x16_Dispatch
4001b334 g     O .rwdata	00000180 alt_fd_list
40002808 g     F .text	00001550 Intra_4x4_Dispatch
4000efa4 g     F .text	00000008 _putchar_r
40019e80 g     F .text	00000078 alt_find_dev
4000ecc8 g     F .text	00000148 memcpy
40013158 g     F .text	0000000c _cleanup_r
400192d0 g     F .text	000000dc .hidden __floatsidf
40019bfc g     F .text	00000104 alt_io_redirect
40018860 g     F .text	000000f4 .hidden __ltdf2
4001a3b8 g       *ABS*	00000000 __DTOR_END__
40000eac g     F .text	000005c8 rx_iqit_request_2
4000f084 g     F .text	00000014 puts
4000a61c g     F .text	000004e4 send_luma_1_motion_comp_fast
40015b08 g     F .text	00000074 __fpclassifyd
40015220 g     F .text	000000a4 __ratio
40001ca4 g     F .text	00000034 add_time
40017304 g     F .text	0000001c __vfiprintf_internal
4001996c g     F .text	0000008c altera_avalon_jtag_uart_read
4000e494 g     F .text	00000014 malloc
4000ef38 g     F .text	00000030 _printf_r
4000c944 g     F .text	00000064 .hidden __udivsi3
400194e8 g     F .text	00000084 isatty
4001a988 g     O .rodata	000000c8 __mprec_tens
40013fe4 g     F .text	0000000c __locale_charset
4000c350 g     F .text	00000158 buffers_loop
40000528 g     F .text	00000010 do_direct_write_func
40019ff4 g     F .text	00000050 alt_icache_flush
400075a0 g     F .text	00000e58 software_intra
4001c03c g     O .bss	00000004 __malloc_top_pad
40000894 g     F .text	00000038 do_display_perf_func
4001b528 g     O .rwdata	00000004 __mb_cur_max
40014014 g     F .text	0000000c _localeconv_r
4001484c g     F .text	0000003c __i2b
40013924 g     F .text	000004bc __sfvwrite_r
4000f110 g     F .text	00000054 _sbrk_r
40017a04 g     F .text	00000060 _read_r
4001b530 g     O .rwdata	00000004 alt_max_fd
400175e8 g     F .text	000000f0 _fclose_r
40013120 g     F .text	00000030 fflush
4001c038 g     O .bss	00000004 __malloc_max_sbrked_mem
4000c5e0 g     F .text	0000002c perf_enable
40004244 g     F .text	0000007c pack_cr_y
4000ca00 g     F .text	000008ac .hidden __adddf3
40014fc8 g     F .text	0000010c __b2d
400181c4 g     F .text	00000538 .hidden __umoddi3
40019638 g     F .text	0000007c lseek
4001b518 g     O .rwdata	00000004 _global_impure_ptr
4000c558 g     F .text	00000068 rx_packet_by_id_no_block
4000c4a8 g     F .text	0000008c print_rx_buffer
400155a4 g     F .text	00000564 _realloc_r
4002d4dc g       *ABS*	00000000 __bss_end
40017c4c g     F .text	00000578 .hidden __udivdi3
40017850 g     F .text	00000024 _fputwc_r
4001a960 g     O .rodata	00000028 __mprec_bigtens
40014630 g     F .text	00000104 __s2b
4000e2ac g     F .text	000000a8 .hidden __floatunsidf
40014d08 g     F .text	00000060 __mcmp
40000000 g       *ABS*	00000000 __alt_mem_DDR2_Controller_0
400134c0 g     F .text	00000018 __fp_lock_all
4001b4b4 g     O .rwdata	00000028 alt_dev_null
40019aa4 g     F .text	00000018 alt_dcache_flush_all
40014734 g     F .text	00000068 __hi0bits
40019250 g     F .text	00000080 .hidden __fixdfsi
4000e3b8 g     F .text	00000018 calloc
4000c30c g     F .text	00000034 set_cpu_read_flag
4000006c g     F .text	000000d0 do_intra_func
4001b54c g       *ABS*	00000000 __ram_rwdata_end
4001b534 g     O .rwdata	00000008 alt_dev_list
40019858 g     F .text	000000c4 write
4001543c g     F .text	000000a0 _putc_r
4001aa90 g       *ABS*	00000000 __ram_rodata_end
4000c198 g     F .text	00000068 noc_init
40019470 g     F .text	00000078 fstat
40018860 g     F .text	000000f4 .hidden __ledf2
40014a80 g     F .text	00000140 __pow5mult
400083f8 g     F .text	000000d0 set_luma_x
40015ea8 g     F .text	0000145c ___vfiprintf_internal_r
4001c04c g     O .bss	00000004 __nlocale_changed
4000c9a8 g     F .text	00000058 .hidden __umodsi3
4002d4dc g       *ABS*	00000000 end
4000c200 g     F .text	0000006c send_flit
4001a3b8 g       *ABS*	00000000 __CTOR_LIST__
80000000 g       *ABS*	00000000 __alt_stack_pointer
4000e354 g     F .text	00000064 .hidden __clzsi2
400199f8 g     F .text	00000034 altera_avalon_jtag_uart_write
400134b0 g     F .text	00000004 __sfp_lock_acquire
40014200 g     F .text	000000e4 memchr
4000f1fc g     F .text	000021f8 ___vfprintf_internal_r
40013614 g     F .text	00000310 _free_r
4000430c g     F .text	0000007c pack_cb_y
40013ff0 g     F .text	00000010 __locale_mb_cur_max
4001a224 g     F .text	00000180 __call_exitprocs
4001c048 g     O .bss	00000004 __mlocale_changed
4001b520 g     O .rwdata	00000004 __malloc_sbrk_base
40000020 g     F .text	0000004c _start
40003d58 g     F .text	00000148 print_block
4000c26c g     F .text	0000002c no_data_send
4000c7dc g     F .text	00000070 .hidden __floatundidf
4000f0b0 g     F .text	00000060 rand
40014bc0 g     F .text	00000148 __lshift
4001971c g     F .text	000000c8 read
4001993c g     F .text	00000010 alt_sys_init
4001a10c g     F .text	00000118 __register_exitproc
40014888 g     F .text	000001f8 __multiply
4001aa90 g       *ABS*	00000000 __ram_rwdata_start
4001a3b8 g       *ABS*	00000000 __ram_rodata_start
4002d4b4 g     O .bss	00000028 __malloc_current_mallinfo
400150d4 g     F .text	0000014c __d2b
4001994c g     F .text	00000010 altera_avalon_jtag_uart_read_fd
40019fa4 g     F .text	00000050 alt_get_fd
40019a2c g     F .text	00000078 alt_busy_sleep
40017594 g     F .text	00000054 _close_r
400086e4 g     F .text	00000844 send_luma_intra_packet_3
4001a090 g     F .text	0000007c memcmp
4002d4dc g       *ABS*	00000000 __alt_stack_base
40009438 g     F .text	00000238 rx_luma_motion_comp_packet
400114cc g     F .text	00000154 __swsetup_r
4000d2ac g     F .text	000008e8 .hidden __divdf3
40013370 g     F .text	00000118 __sfp
40015338 g     F .text	00000078 __copybits
4001aeb4 g     O .rwdata	00000408 __malloc_av_
400134bc g     F .text	00000004 __sinit_lock_release
4000c298 g     F .text	00000010 get_buffer_rx_state
4000c2a8 g     F .text	00000064 copy_to_buffer
4000db94 g     F .text	00000718 .hidden __muldf3
40015b7c g     F .text	00000054 __sread
40019ef8 g     F .text	000000ac alt_find_file
40019abc g     F .text	0000006c alt_dev_llist_insert
40019714 g     F .text	00000004 __malloc_lock
40019808 g     F .text	0000004c sbrk
400130c4 g     F .text	0000005c _fflush_r
4000e3d0 g     F .text	000000c4 _calloc_r
4001c008 g       *ABS*	00000000 __bss_start
40000518 g     F .text	00000010 do_iqit_func
4000ee10 g     F .text	00000128 memset
40006e70 g     F .text	00000730 Intra_Chroma_Dispatch_2
4001c028 g     O .bss	00000004 perf_data
40008f28 g     F .text	0000002c main
4001c050 g     O .bss	00000004 alt_envp
4001c034 g     O .bss	00000004 __malloc_max_total_mem
4001995c g     F .text	00000010 altera_avalon_jtag_uart_write_fd
4001751c g     F .text	00000018 __swbuf
4000f098 g     F .text	00000018 srand
40001c80 g     F .text	00000024 read_timer
40015cb0 g     F .text	00000008 __sclose
80000000 g       *ABS*	00000000 __alt_heap_limit
400176d8 g     F .text	00000014 fclose
400045f8 g     F .text	00000284 Intra_Chroma_Vertical
40011820 g     F .text	00001688 _dtoa_r
4000e4bc g     F .text	0000080c _malloc_r
40017bc0 g     F .text	00000030 __ascii_wctomb
4001b544 g     O .rwdata	00000004 alt_errno
4000ab00 g     F .text	0000004c motion_comp_send_luma
40013de0 g     F .text	000000c4 _fwalk
400154dc g     F .text	000000c8 putc
4000c84c g     F .text	00000084 .hidden __divsi3
400134f0 g     F .text	00000124 _malloc_trim_r
4001a3b8 g       *ABS*	00000000 __CTOR_END__
400085a4 g     F .text	0000007c set_luma_single
40015cb8 g     F .text	000000dc strcmp
4001a3b8 g       *ABS*	00000000 __flash_rodata_start
4001a3b8 g       *ABS*	00000000 __DTOR_LIST__
4000c5c0 g     F .text	00000020 remove_packet_with_id
400186fc g     F .text	00000088 .hidden __nedf2
4001991c g     F .text	00000020 alt_irq_init
400197e4 g     F .text	00000024 alt_release_fd
4001a7a6 g     O .rodata	00000100 .hidden __clz_tab
4001c044 g     O .bss	00000004 _PathLocale
4001a044 g     F .text	00000014 atexit
40017534 g     F .text	00000060 _write_r
40014020 g     F .text	00000018 setlocale
4000c534 g     F .text	00000024 get_packet_pointer_by_id
40004388 g     F .text	00000270 Intra_Chroma_Horizontal
4001b51c g     O .rwdata	00000004 _impure_ptr
40009a40 g     F .text	00000148 rx_chroma_motion_comp_packet
4001c058 g     O .bss	00000004 alt_argc
40012ea8 g     F .text	0000021c __sflush_r
40001560 g     F .text	00000054 free_frame
40019b8c g     F .text	00000064 _do_dtors
4001400c g     F .text	00000008 __locale_cjk_lang
400084c8 g     F .text	000000dc set_luma_y
40014f64 g     F .text	00000064 __ulp
400134d8 g     F .text	00000018 __fp_unlock_all
40001474 g     F .text	000000ec alloc_frame
4001c02c g     O .bss	00000008 perf_last_clock
4001b53c g     O .rwdata	00000008 alt_fs_list
4001c024 g     O .bss	00000004 perf_current
40000020 g       *ABS*	00000000 __ram_exceptions_start
40014038 g     F .text	0000000c localeconv
400008cc g     F .text	000005e0 simulate_buffer_node
4001b54c g       *ABS*	00000000 _edata
4002d4dc g       *ABS*	00000000 _end
40001cd8 g     F .text	00000288 print_counts
400176ec g     F .text	00000164 __fputwc
40000020 g       *ABS*	00000000 __ram_exceptions_end
40000538 g     F .text	000002c4 do_start_new_frame_func
40015bd8 g     F .text	0000007c __swrite
4001b524 g     O .rwdata	00000004 __malloc_trim_threshold
40014000 g     F .text	0000000c __locale_msgcharset
4001a058 g     F .text	00000038 exit
40013ea4 g     F .text	000000c4 _fwalk_reent
40014d68 g     F .text	000001fc __mdiff
4000bd18 g     F .text	00000384 MotionCompensateMB_7
4000c340 g     F .text	00000010 get_identifier
4000c8d0 g     F .text	00000074 .hidden __modsi3
4000013c g     F .text	000003dc do_inter_func
80000000 g       *ABS*	00000000 __alt_data_end
400134b4 g     F .text	00000004 __sfp_lock_release
4000417c g     F .text	0000007c pack_luma_y
4001a3a4 g     F .text	00000014 _exit
400042c0 g     F .text	0000004c pack_cb_x
40014044 g     F .text	000001bc __smakebuf_r
4000b8c0 g     F .text	00000458 sw_inter_chroma
4000f164 g     F .text	00000098 strlen
40019d00 g     F .text	00000178 open
40008620 g     F .text	000000c4 set_luma_all
4000ab4c g     F .text	000003e8 motion_comp_send_chroma
40018784 g     F .text	000000dc .hidden __gedf2
4001b52c g     O .rwdata	00000004 __wctomb
400007fc g     F .text	00000098 do_alloc_frame_func
40015e90 g     F .text	00000018 __sprint_r
40019bf0 g     F .text	0000000c alt_icache_flush_all
400113f4 g     F .text	0000001c __vfprintf_internal
40017bf0 g     F .text	0000005c _wctomb_r
40005074 g     F .text	000007dc send_chroma_intra_packet_2
40018954 g     F .text	000008fc .hidden __subdf3
4001479c g     F .text	000000b0 __lo0bits
4000c668 g     F .text	00000174 perf_summarize
40003fe8 g     F .text	00000148 print_cb_block
40019b28 g     F .text	00000064 _do_ctors
40017b00 g     F .text	000000c0 wcrtomb
400193ac g     F .text	000000bc close
400015b4 g     F .text	0000038c send_deblocking_packet
4001956c g     F .text	000000cc alt_load
40009b88 g     F .text	00000a94 MotionCompensateTB
40017874 g     F .text	00000080 fputwc
4000e4a8 g     F .text	00000014 free
400134b8 g     F .text	00000004 __sinit_lock_acquire
40014510 g     F .text	00000120 __multadd
400144e8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

40000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
40000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
40000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
40000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
4000000c:	00bffd16 	blt	zero,r2,40000004 <__alt_data_end+0xc0000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
40000010:	00500034 	movhi	at,16384
    ori r1, r1, %lo(_start)
40000014:	08400814 	ori	at,at,32
    jmp r1
40000018:	0800683a 	jmp	at
4000001c:	00000000 	call	40000000 <__reset>

Disassembly of section .text:

40000020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
40000020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
40000024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
40000028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
4000002c:	00bffd16 	blt	zero,r2,40000024 <__alt_data_end+0xc0000024>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
40000030:	06e00034 	movhi	sp,32768
    ori sp, sp, %lo(__alt_stack_pointer)
40000034:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
40000038:	069000b4 	movhi	gp,16386
    ori gp, gp, %lo(_gp)
4000003c:	d68d4214 	ori	gp,gp,13576
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
40000040:	00900074 	movhi	r2,16385
    ori r2, r2, %lo(__bss_start)
40000044:	10b00214 	ori	r2,r2,49160

    movhi r3, %hi(__bss_end)
40000048:	00d000b4 	movhi	r3,16386
    ori r3, r3, %lo(__bss_end)
4000004c:	18f53714 	ori	r3,r3,54492

    beq r2, r3, 1f
40000050:	10c00326 	beq	r2,r3,40000060 <_start+0x40>

0:
    stw zero, (r2)
40000054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
40000058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
4000005c:	10fffd36 	bltu	r2,r3,40000054 <__alt_data_end+0xc0000054>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
40000060:	001956c0 	call	4001956c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
40000064:	00196b40 	call	400196b4 <alt_main>

40000068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
40000068:	003fff06 	br	40000068 <__alt_data_end+0xc0000068>

4000006c <do_intra_func>:

static frame *ref_buf;
static frame *working_buf;
static uint64_t decode_time_start;

void do_intra_func(packet *the_packet){
4000006c:	defff804 	addi	sp,sp,-32
40000070:	dc400515 	stw	r17,20(sp)
40000074:	dc000415 	stw	r16,16(sp)
40000078:	dfc00715 	stw	ra,28(sp)
4000007c:	dc800615 	stw	r18,24(sp)

    //parse the packet
    uint64_t bx            = ((the_packet->data.flit[1])>>48)&0xFFFF;
40000080:	21400217 	ldw	r5,8(r4)
40000084:	21c00317 	ldw	r7,12(r4)
    uint64_t by            = ((the_packet->data.flit[1])>>32)&0xFFFF;
    uint64_t LCbCr_select  = ((the_packet->data.flit[1])>>16)&0xFFFF;
    uint64_t blk_idx_check = ((the_packet->data.flit[1])>>0 )&0xFFFF;
    uint64_t intra_cmd     = the_packet->data.flit[2];
40000088:	20c00417 	ldw	r3,16(r4)
    }
#endif



		if(LCbCr_select == 0){
4000008c:	280cd43a 	srli	r6,r5,16
static uint64_t decode_time_start;

void do_intra_func(packet *the_packet){

    //parse the packet
    uint64_t bx            = ((the_packet->data.flit[1])>>48)&0xFFFF;
40000090:	3822d43a 	srli	r17,r7,16
    uint64_t by            = ((the_packet->data.flit[1])>>32)&0xFFFF;
40000094:	3c3fffcc 	andi	r16,r7,65535
    uint64_t LCbCr_select  = ((the_packet->data.flit[1])>>16)&0xFFFF;
    uint64_t blk_idx_check = ((the_packet->data.flit[1])>>0 )&0xFFFF;
    uint64_t intra_cmd     = the_packet->data.flit[2];
40000098:	20800517 	ldw	r2,20(r4)
    }
#endif



		if(LCbCr_select == 0){
4000009c:	30001426 	beq	r6,zero,400000f0 <do_intra_func+0x84>
		}else{
			if(HW_INTRA_AVAILIBLE){
				uint64_t mode    = (intra_cmd>>16)&0xFF;
				uint32_t y_avail = (intra_cmd>>24)&0xFFFF;
				uint32_t x_avail = (intra_cmd>>40)&0xFFFF;
				Intra_Chroma_Dispatch_2(working_buf, mode, bx, by, x_avail, y_avail);
400000a0:	100c923a 	slli	r6,r2,8
400000a4:	1808d63a 	srli	r4,r3,24
400000a8:	1004d23a 	srli	r2,r2,8
400000ac:	180ad43a 	srli	r5,r3,16
400000b0:	3108b03a 	or	r4,r6,r4
400000b4:	213fffcc 	andi	r4,r4,65535
400000b8:	d9000115 	stw	r4,4(sp)
400000bc:	d122c217 	ldw	r4,-29944(gp)
400000c0:	10bfffcc 	andi	r2,r2,65535
400000c4:	d8800015 	stw	r2,0(sp)
400000c8:	800f883a 	mov	r7,r16
400000cc:	880d883a 	mov	r6,r17
400000d0:	29403fcc 	andi	r5,r5,255
400000d4:	0006e700 	call	40006e70 <Intra_Chroma_Dispatch_2>
		    			       (int)LCbCr_select,
		    			       (int)blk_idx_check);
		    }
		}

}
400000d8:	dfc00717 	ldw	ra,28(sp)
400000dc:	dc800617 	ldw	r18,24(sp)
400000e0:	dc400517 	ldw	r17,20(sp)
400000e4:	dc000417 	ldw	r16,16(sp)
400000e8:	dec00804 	addi	sp,sp,32
400000ec:	f800283a 	ret
    uint64_t bx            = ((the_packet->data.flit[1])>>48)&0xFFFF;
    uint64_t by            = ((the_packet->data.flit[1])>>32)&0xFFFF;
    uint64_t LCbCr_select  = ((the_packet->data.flit[1])>>16)&0xFFFF;
    uint64_t blk_idx_check = ((the_packet->data.flit[1])>>0 )&0xFFFF;
    uint64_t intra_cmd     = the_packet->data.flit[2];
    uint64_t identifier    = (intra_cmd>>56)&0xFF;
400000f0:	1024d63a 	srli	r18,r2,24



		if(LCbCr_select == 0){
			if(HW_INTRA_AVAILIBLE ){
				send_luma_intra_packet_3(size, working_buf, bx, by,blk_idx_check, intra_cmd, identifier);
400000f4:	1808d23a 	srli	r4,r3,8
400000f8:	2a3fffcc 	andi	r8,r5,65535
400000fc:	d162c217 	ldw	r5,-29944(gp)
40000100:	800f883a 	mov	r7,r16
40000104:	880d883a 	mov	r6,r17
40000108:	21003fcc 	andi	r4,r4,255
4000010c:	dc800315 	stw	r18,12(sp)
40000110:	d8c00115 	stw	r3,4(sp)
40000114:	d8800215 	stw	r2,8(sp)
40000118:	da000015 	stw	r8,0(sp)
4000011c:	00086e40 	call	400086e4 <send_luma_intra_packet_3>
				rx_intra_packet(identifier, working_buf, bx, by, LCbCr_select);
40000120:	d162c217 	ldw	r5,-29944(gp)
40000124:	d8000015 	stw	zero,0(sp)
40000128:	800f883a 	mov	r7,r16
4000012c:	880d883a 	mov	r6,r17
40000130:	9009883a 	mov	r4,r18
40000134:	00058500 	call	40005850 <rx_intra_packet>
40000138:	003fe706 	br	400000d8 <__alt_data_end+0xc00000d8>

4000013c <do_inter_func>:
		}

}


void do_inter_func(packet *the_packet){
4000013c:	deffc904 	addi	sp,sp,-220
40000140:	dfc03615 	stw	ra,216(sp)
40000144:	dd803315 	stw	r22,204(sp)
40000148:	dd403215 	stw	r21,200(sp)
4000014c:	dd003115 	stw	r20,196(sp)
40000150:	dcc03015 	stw	r19,192(sp)
40000154:	dc802f15 	stw	r18,188(sp)
40000158:	df003515 	stw	fp,212(sp)
4000015c:	ddc03415 	stw	r23,208(sp)
40000160:	dc402e15 	stw	r17,184(sp)
40000164:	dc002d15 	stw	r16,180(sp)
	int32_t  mvx[16];
	int32_t  mvy[16];
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
40000168:	24400217 	ldw	r17,8(r4)
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
4000016c:	22c00417 	ldw	r11,16(r4)
40000170:	27000517 	ldw	fp,20(r4)


void do_inter_func(packet *the_packet){
	int32_t  mvx[16];
	int32_t  mvy[16];
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
40000174:	dc402b15 	stw	r17,172(sp)
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
40000178:	23001017 	ldw	r12,64(r4)
4000017c:	22400617 	ldw	r9,24(r4)
40000180:	22800717 	ldw	r10,28(r4)
40000184:	25c00817 	ldw	r23,32(r4)
40000188:	22000917 	ldw	r8,36(r4)
4000018c:	23c00a17 	ldw	r15,40(r4)
40000190:	24000b17 	ldw	r16,44(r4)
40000194:	23400c17 	ldw	r13,48(r4)
40000198:	23800d17 	ldw	r14,52(r4)
4000019c:	21800e17 	ldw	r6,56(r4)
400001a0:	21c00f17 	ldw	r7,60(r4)
400001a4:	21401117 	ldw	r5,68(r4)
400001a8:	20801217 	ldw	r2,72(r4)
400001ac:	20c01317 	ldw	r3,76(r4)


void do_inter_func(packet *the_packet){
	int32_t  mvx[16];
	int32_t  mvy[16];
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
400001b0:	21000317 	ldw	r4,12(r4)

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
400001b4:	b822d43a 	srli	r17,r23,16
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
400001b8:	bdffffcc 	andi	r23,r23,65535


void do_inter_func(packet *the_packet){
	int32_t  mvx[16];
	int32_t  mvy[16];
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
400001bc:	d9002c15 	stw	r4,176(sp)
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
400001c0:	8008d43a 	srli	r4,r16,16
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
400001c4:	ddc02215 	stw	r23,136(sp)
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
400001c8:	843fffcc 	andi	r16,r16,65535
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
400001cc:	d9002915 	stw	r4,164(sp)
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
400001d0:	7808d43a 	srli	r4,r15,16
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
400001d4:	dc002315 	stw	r16,140(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
400001d8:	7bffffcc 	andi	r15,r15,65535

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
400001dc:	d9002415 	stw	r4,144(sp)
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
400001e0:	7008d43a 	srli	r4,r14,16
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
400001e4:	73bfffcc 	andi	r14,r14,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
400001e8:	dbc02515 	stw	r15,148(sp)
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
400001ec:	d9002a15 	stw	r4,168(sp)
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
400001f0:	6808d43a 	srli	r4,r13,16
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
400001f4:	6b7fffcc 	andi	r13,r13,65535
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
400001f8:	db802615 	stw	r14,152(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
400001fc:	d9002715 	stw	r4,156(sp)
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
40000200:	db402815 	stw	r13,160(sp)

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
40000204:	582ad43a 	srli	r21,r11,16
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
40000208:	5028d43a 	srli	r20,r10,16
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
4000020c:	4826d43a 	srli	r19,r9,16
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
40000210:	4024d43a 	srli	r18,r8,16
40000214:	3820d43a 	srli	r16,r7,16
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
40000218:	303ed43a 	srli	ra,r6,16
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
4000021c:	281ed43a 	srli	r15,r5,16
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
40000220:	601cd43a 	srli	r14,r12,16
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
40000224:	613fffcc 	andi	r4,r12,65535
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
40000228:	181ad43a 	srli	r13,r3,16
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
4000022c:	1018d43a 	srli	r12,r2,16
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
40000230:	e5bfffcc 	andi	r22,fp,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
40000234:	5affffcc 	andi	r11,r11,65535
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
40000238:	52bfffcc 	andi	r10,r10,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
4000023c:	4a7fffcc 	andi	r9,r9,65535
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
40000240:	423fffcc 	andi	r8,r8,65535
40000244:	39ffffcc 	andi	r7,r7,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
40000248:	31bfffcc 	andi	r6,r6,65535
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
4000024c:	297fffcc 	andi	r5,r5,65535
40000250:	18ffffcc 	andi	r3,r3,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
40000254:	10bfffcc 	andi	r2,r2,65535
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000258:	e02ed43a 	srli	r23,fp,16
4000025c:	e000010e 	bge	fp,zero,40000264 <do_inter_func+0x128>
40000260:	bdfffff4 	orhi	r23,r23,65535
40000264:	ddc01215 	stw	r23,72(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000268:	05dfffc4 	movi	r23,32767
4000026c:	bd80010e 	bge	r23,r22,40000274 <do_inter_func+0x138>
40000270:	b5bffff4 	orhi	r22,r22,65535
40000274:	dd800215 	stw	r22,8(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000278:	059fffc4 	movi	r22,32767
4000027c:	b540010e 	bge	r22,r21,40000284 <do_inter_func+0x148>
40000280:	ad7ffff4 	orhi	r21,r21,65535
40000284:	dd401315 	stw	r21,76(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000288:	055fffc4 	movi	r21,32767
4000028c:	aac0010e 	bge	r21,r11,40000294 <do_inter_func+0x158>
40000290:	5afffff4 	orhi	r11,r11,65535
40000294:	dac00315 	stw	r11,12(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000298:	02dfffc4 	movi	r11,32767
4000029c:	5d00010e 	bge	r11,r20,400002a4 <do_inter_func+0x168>
400002a0:	a53ffff4 	orhi	r20,r20,65535
400002a4:	dd001415 	stw	r20,80(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
400002a8:	02dfffc4 	movi	r11,32767
400002ac:	5a80010e 	bge	r11,r10,400002b4 <do_inter_func+0x178>
400002b0:	52bffff4 	orhi	r10,r10,65535
400002b4:	da800415 	stw	r10,16(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
400002b8:	029fffc4 	movi	r10,32767
400002bc:	54c0010e 	bge	r10,r19,400002c4 <do_inter_func+0x188>
400002c0:	9cfffff4 	orhi	r19,r19,65535
400002c4:	dcc01515 	stw	r19,84(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
400002c8:	029fffc4 	movi	r10,32767
400002cc:	5240010e 	bge	r10,r9,400002d4 <do_inter_func+0x198>
400002d0:	4a7ffff4 	orhi	r9,r9,65535
400002d4:	da400515 	stw	r9,20(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
400002d8:	025fffc4 	movi	r9,32767
400002dc:	4c80010e 	bge	r9,r18,400002e4 <do_inter_func+0x1a8>
400002e0:	94bffff4 	orhi	r18,r18,65535
400002e4:	dc801615 	stw	r18,88(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
400002e8:	025fffc4 	movi	r9,32767
400002ec:	4a00010e 	bge	r9,r8,400002f4 <do_inter_func+0x1b8>
400002f0:	423ffff4 	orhi	r8,r8,65535
400002f4:	da000615 	stw	r8,24(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
400002f8:	021fffc4 	movi	r8,32767
400002fc:	4440010e 	bge	r8,r17,40000304 <do_inter_func+0x1c8>
40000300:	8c7ffff4 	orhi	r17,r17,65535
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000304:	da402217 	ldw	r9,136(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000308:	dc401715 	stw	r17,92(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
4000030c:	021fffc4 	movi	r8,32767
40000310:	42407f0e 	bge	r8,r9,40000510 <do_inter_func+0x3d4>
40000314:	4a3ffff4 	orhi	r8,r9,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000318:	dc402917 	ldw	r17,164(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
4000031c:	da000715 	stw	r8,28(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000320:	021fffc4 	movi	r8,32767
40000324:	4440780e 	bge	r8,r17,40000508 <do_inter_func+0x3cc>
40000328:	8a3ffff4 	orhi	r8,r17,65535
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
4000032c:	da402317 	ldw	r9,140(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000330:	da001815 	stw	r8,96(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000334:	021fffc4 	movi	r8,32767
40000338:	4240710e 	bge	r8,r9,40000500 <do_inter_func+0x3c4>
4000033c:	4a3ffff4 	orhi	r8,r9,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000340:	dc402417 	ldw	r17,144(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000344:	da000815 	stw	r8,32(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000348:	021fffc4 	movi	r8,32767
4000034c:	44406a0e 	bge	r8,r17,400004f8 <do_inter_func+0x3bc>
40000350:	8a3ffff4 	orhi	r8,r17,65535
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000354:	da402517 	ldw	r9,148(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000358:	da001915 	stw	r8,100(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
4000035c:	021fffc4 	movi	r8,32767
40000360:	4240630e 	bge	r8,r9,400004f0 <do_inter_func+0x3b4>
40000364:	4a3ffff4 	orhi	r8,r9,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000368:	dc402a17 	ldw	r17,168(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
4000036c:	da000915 	stw	r8,36(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000370:	021fffc4 	movi	r8,32767
40000374:	44405c0e 	bge	r8,r17,400004e8 <do_inter_func+0x3ac>
40000378:	8a3ffff4 	orhi	r8,r17,65535
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
4000037c:	da402617 	ldw	r9,152(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000380:	da001a15 	stw	r8,104(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000384:	021fffc4 	movi	r8,32767
40000388:	4240550e 	bge	r8,r9,400004e0 <do_inter_func+0x3a4>
4000038c:	4a3ffff4 	orhi	r8,r9,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000390:	dc402717 	ldw	r17,156(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000394:	da000a15 	stw	r8,40(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000398:	021fffc4 	movi	r8,32767
4000039c:	44404e0e 	bge	r8,r17,400004d8 <do_inter_func+0x39c>
400003a0:	8a3ffff4 	orhi	r8,r17,65535
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
400003a4:	da402817 	ldw	r9,160(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
400003a8:	da001b15 	stw	r8,108(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
400003ac:	021fffc4 	movi	r8,32767
400003b0:	4240470e 	bge	r8,r9,400004d0 <do_inter_func+0x394>
400003b4:	4a3ffff4 	orhi	r8,r9,65535
400003b8:	da000b15 	stw	r8,44(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
400003bc:	021fffc4 	movi	r8,32767
400003c0:	4400010e 	bge	r8,r16,400003c8 <do_inter_func+0x28c>
400003c4:	843ffff4 	orhi	r16,r16,65535
400003c8:	dc001c15 	stw	r16,112(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
400003cc:	021fffc4 	movi	r8,32767
400003d0:	41c0010e 	bge	r8,r7,400003d8 <do_inter_func+0x29c>
400003d4:	39fffff4 	orhi	r7,r7,65535
400003d8:	d9c00c15 	stw	r7,48(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
400003dc:	01dfffc4 	movi	r7,32767
400003e0:	3fc0010e 	bge	r7,ra,400003e8 <do_inter_func+0x2ac>
400003e4:	fffffff4 	orhi	ra,ra,65535
400003e8:	dfc01d15 	stw	ra,116(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
400003ec:	01dfffc4 	movi	r7,32767
400003f0:	3980010e 	bge	r7,r6,400003f8 <do_inter_func+0x2bc>
400003f4:	31bffff4 	orhi	r6,r6,65535
400003f8:	d9800d15 	stw	r6,52(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
400003fc:	019fffc4 	movi	r6,32767
40000400:	33c0010e 	bge	r6,r15,40000408 <do_inter_func+0x2cc>
40000404:	7bfffff4 	orhi	r15,r15,65535
40000408:	dbc01e15 	stw	r15,120(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
4000040c:	019fffc4 	movi	r6,32767
40000410:	3140010e 	bge	r6,r5,40000418 <do_inter_func+0x2dc>
40000414:	297ffff4 	orhi	r5,r5,65535
40000418:	d9400e15 	stw	r5,56(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
4000041c:	015fffc4 	movi	r5,32767
40000420:	2b80010e 	bge	r5,r14,40000428 <do_inter_func+0x2ec>
40000424:	73bffff4 	orhi	r14,r14,65535
40000428:	db801f15 	stw	r14,124(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
4000042c:	015fffc4 	movi	r5,32767
40000430:	2900010e 	bge	r5,r4,40000438 <do_inter_func+0x2fc>
40000434:	213ffff4 	orhi	r4,r4,65535
40000438:	d9000f15 	stw	r4,60(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
4000043c:	011fffc4 	movi	r4,32767
40000440:	2340010e 	bge	r4,r13,40000448 <do_inter_func+0x30c>
40000444:	6b7ffff4 	orhi	r13,r13,65535
40000448:	db402015 	stw	r13,128(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
4000044c:	011fffc4 	movi	r4,32767
40000450:	20c0010e 	bge	r4,r3,40000458 <do_inter_func+0x31c>
40000454:	18fffff4 	orhi	r3,r3,65535
40000458:	d8c01015 	stw	r3,64(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
4000045c:	00dfffc4 	movi	r3,32767
40000460:	1b00010e 	bge	r3,r12,40000468 <do_inter_func+0x32c>
40000464:	633ffff4 	orhi	r12,r12,65535
40000468:	db002115 	stw	r12,132(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
4000046c:	00dfffc4 	movi	r3,32767
40000470:	1880010e 	bge	r3,r2,40000478 <do_inter_func+0x33c>
40000474:	10bffff4 	orhi	r2,r2,65535
	for(int i = 0; i<16; i++){
		printf("mv(rx'd)[%d] = (%d, %d)\n",i, mvx[i], mvy[i]);
	}
#endif

	MotionCompensateMB_2( working_buf,
40000478:	dc402b17 	ldw	r17,172(sp)
4000047c:	d8c02c17 	ldw	r3,176(sp)
40000480:	d162c317 	ldw	r5,-29940(gp)
40000484:	d122c217 	ldw	r4,-29944(gp)
40000488:	dc400115 	stw	r17,4(sp)
4000048c:	d8c00015 	stw	r3,0(sp)
40000490:	d9c00204 	addi	r7,sp,8
40000494:	d9801204 	addi	r6,sp,72
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000498:	d8801115 	stw	r2,68(sp)
	for(int i = 0; i<16; i++){
		printf("mv(rx'd)[%d] = (%d, %d)\n",i, mvx[i], mvy[i]);
	}
#endif

	MotionCompensateMB_2( working_buf,
4000049c:	000c09c0 	call	4000c09c <MotionCompensateMB_2>
						  (int *)mvx,
						  (int *)mvy,
						  org_x,
						  org_y
						  );
}
400004a0:	dfc03617 	ldw	ra,216(sp)
400004a4:	df003517 	ldw	fp,212(sp)
400004a8:	ddc03417 	ldw	r23,208(sp)
400004ac:	dd803317 	ldw	r22,204(sp)
400004b0:	dd403217 	ldw	r21,200(sp)
400004b4:	dd003117 	ldw	r20,196(sp)
400004b8:	dcc03017 	ldw	r19,192(sp)
400004bc:	dc802f17 	ldw	r18,188(sp)
400004c0:	dc402e17 	ldw	r17,184(sp)
400004c4:	dc002d17 	ldw	r16,180(sp)
400004c8:	dec03704 	addi	sp,sp,220
400004cc:	f800283a 	ret
400004d0:	4811883a 	mov	r8,r9
400004d4:	003fb806 	br	400003b8 <__alt_data_end+0xc00003b8>
400004d8:	8811883a 	mov	r8,r17
400004dc:	003fb106 	br	400003a4 <__alt_data_end+0xc00003a4>
400004e0:	4811883a 	mov	r8,r9
400004e4:	003faa06 	br	40000390 <__alt_data_end+0xc0000390>
400004e8:	8811883a 	mov	r8,r17
400004ec:	003fa306 	br	4000037c <__alt_data_end+0xc000037c>
400004f0:	4811883a 	mov	r8,r9
400004f4:	003f9c06 	br	40000368 <__alt_data_end+0xc0000368>
400004f8:	8811883a 	mov	r8,r17
400004fc:	003f9506 	br	40000354 <__alt_data_end+0xc0000354>
40000500:	4811883a 	mov	r8,r9
40000504:	003f8e06 	br	40000340 <__alt_data_end+0xc0000340>
40000508:	8811883a 	mov	r8,r17
4000050c:	003f8706 	br	4000032c <__alt_data_end+0xc000032c>
40000510:	4811883a 	mov	r8,r9
40000514:	003f8006 	br	40000318 <__alt_data_end+0xc0000318>

40000518 <do_iqit_func>:


void do_iqit_func(packet *the_packet){
	rx_iqit_request_2(working_buf, the_packet, 0);
40000518:	200b883a 	mov	r5,r4
4000051c:	d122c217 	ldw	r4,-29944(gp)
40000520:	000d883a 	mov	r6,zero
40000524:	0000eac1 	jmpi	40000eac <rx_iqit_request_2>

40000528 <do_direct_write_func>:


}

void do_direct_write_func( packet *the_packet){
	rx_iqit_request_2(working_buf, the_packet, 1);
40000528:	200b883a 	mov	r5,r4
4000052c:	d122c217 	ldw	r4,-29944(gp)
40000530:	01800044 	movi	r6,1
40000534:	0000eac1 	jmpi	40000eac <rx_iqit_request_2>

40000538 <do_start_new_frame_func>:
}

void do_start_new_frame_func(packet *the_packet){
40000538:	defff104 	addi	sp,sp,-60
4000053c:	dc000515 	stw	r16,20(sp)
	frame *f = working_buf;
40000540:	d422c217 	ldw	r16,-29944(gp)

void do_direct_write_func( packet *the_packet){
	rx_iqit_request_2(working_buf, the_packet, 1);
}

void do_start_new_frame_func(packet *the_packet){
40000544:	df000d15 	stw	fp,52(sp)
40000548:	dc800715 	stw	r18,28(sp)
4000054c:	dc400615 	stw	r17,24(sp)
40000550:	dfc00e15 	stw	ra,56(sp)
40000554:	2023883a 	mov	r17,r4
40000558:	ddc00c15 	stw	r23,48(sp)
4000055c:	dd800b15 	stw	r22,44(sp)
40000560:	dd400a15 	stw	r21,40(sp)
40000564:	dd000915 	stw	r20,36(sp)
40000568:	dcc00815 	stw	r19,32(sp)
	frame *f = working_buf;

	uint64_t start_time = read_timer();
4000056c:	0001c800 	call	40001c80 <read_timer>
40000570:	d8800415 	stw	r2,16(sp)
	int QPy = the_packet->data.flit[0]>>16 & 0xFF;
	int bS  = 3;

	//run deblocking filter vertically
	int b_width = 16;
	int num_vertical_edges   = ((f->Lwidth)/b_width)-1;
40000574:	80800017 	ldw	r2,0(r16)
}

void do_start_new_frame_func(packet *the_packet){
	frame *f = working_buf;

	uint64_t start_time = read_timer();
40000578:	1839883a 	mov	fp,r3

	int QPy = the_packet->data.flit[0]>>16 & 0xFF;
4000057c:	8c800083 	ldbu	r18,2(r17)
	int bS  = 3;

	//run deblocking filter vertically
	int b_width = 16;
	int num_vertical_edges   = ((f->Lwidth)/b_width)-1;
40000580:	10009a16 	blt	r2,zero,400007ec <do_start_new_frame_func+0x2b4>
40000584:	1005d13a 	srai	r2,r2,4
40000588:	15bfffc4 	addi	r22,r2,-1
4000058c:	80800117 	ldw	r2,4(r16)
	for(int i = 0; i < num_vertical_edges; i++){
40000590:	05801c0e 	bge	zero,r22,40000604 <do_start_new_frame_func+0xcc>
40000594:	05000044 	movi	r20,1
		for(int j = 0; j < f->Lheight; j++){
			int x = (i + 1)*b_width;
			int LCbCr = 0;
			int id0 = send_deblocking_packet(f, 1, 0, x, j, QPy, bS, LCbCr);
40000598:	04c000c4 	movi	r19,3
4000059c:	a02b883a 	mov	r21,r20

	//run deblocking filter vertically
	int b_width = 16;
	int num_vertical_edges   = ((f->Lwidth)/b_width)-1;
	for(int i = 0; i < num_vertical_edges; i++){
		for(int j = 0; j < f->Lheight; j++){
400005a0:	0080160e 	bge	zero,r2,400005fc <do_start_new_frame_func+0xc4>
400005a4:	a022913a 	slli	r17,r20,4
400005a8:	002f883a 	mov	r23,zero
			int x = (i + 1)*b_width;
			int LCbCr = 0;
			int id0 = send_deblocking_packet(f, 1, 0, x, j, QPy, bS, LCbCr);
400005ac:	ddc00015 	stw	r23,0(sp)
400005b0:	880f883a 	mov	r7,r17
400005b4:	000d883a 	mov	r6,zero
400005b8:	01400044 	movi	r5,1
400005bc:	8009883a 	mov	r4,r16
400005c0:	d8000315 	stw	zero,12(sp)
400005c4:	dcc00215 	stw	r19,8(sp)
400005c8:	dc800115 	stw	r18,4(sp)
400005cc:	00015b40 	call	400015b4 <send_deblocking_packet>
			rx_deblocking_packet(id0, f, 1,0, x, j, LCbCr);
400005d0:	000f883a 	mov	r7,zero
400005d4:	ddc00115 	stw	r23,4(sp)
400005d8:	d8000215 	stw	zero,8(sp)
400005dc:	dc400015 	stw	r17,0(sp)
400005e0:	01800044 	movi	r6,1
400005e4:	800b883a 	mov	r5,r16
400005e8:	1009883a 	mov	r4,r2
400005ec:	00019400 	call	40001940 <rx_deblocking_packet>

	//run deblocking filter vertically
	int b_width = 16;
	int num_vertical_edges   = ((f->Lwidth)/b_width)-1;
	for(int i = 0; i < num_vertical_edges; i++){
		for(int j = 0; j < f->Lheight; j++){
400005f0:	80800117 	ldw	r2,4(r16)
400005f4:	bdc00044 	addi	r23,r23,1
400005f8:	b8bfec16 	blt	r23,r2,400005ac <__alt_data_end+0xc00005ac>
400005fc:	a5000044 	addi	r20,r20,1
	int bS  = 3;

	//run deblocking filter vertically
	int b_width = 16;
	int num_vertical_edges   = ((f->Lwidth)/b_width)-1;
	for(int i = 0; i < num_vertical_edges; i++){
40000600:	adbfe616 	blt	r21,r22,4000059c <__alt_data_end+0xc000059c>
			int id0 = send_deblocking_packet(f, 1, 0, x, j, QPy, bS, LCbCr);
			rx_deblocking_packet(id0, f, 1,0, x, j, LCbCr);
		}
	}
	//run deblocking filter horizontally
	int num_horizontal_edges = ((f->Lheight)/b_width)-1;
40000604:	1007883a 	mov	r3,r2
40000608:	10007a16 	blt	r2,zero,400007f4 <do_start_new_frame_func+0x2bc>
4000060c:	1807d13a 	srai	r3,r3,4
40000610:	1dbfffc4 	addi	r22,r3,-1
	for(int i = 0; i < num_horizontal_edges; i++){
40000614:	05801c0e 	bge	zero,r22,40000688 <do_start_new_frame_func+0x150>
40000618:	05000044 	movi	r20,1
		for(int j = 0; j < f->Lheight; j++){
			int y = (i + 1)*b_width;
			int LCbCr = 0;
			int id0 = send_deblocking_packet(f, 0, 1, j, y, QPy, bS, LCbCr);
4000061c:	04c000c4 	movi	r19,3
40000620:	a02b883a 	mov	r21,r20
		}
	}
	//run deblocking filter horizontally
	int num_horizontal_edges = ((f->Lheight)/b_width)-1;
	for(int i = 0; i < num_horizontal_edges; i++){
		for(int j = 0; j < f->Lheight; j++){
40000624:	0080160e 	bge	zero,r2,40000680 <do_start_new_frame_func+0x148>
40000628:	a022913a 	slli	r17,r20,4
4000062c:	002f883a 	mov	r23,zero
			int y = (i + 1)*b_width;
			int LCbCr = 0;
			int id0 = send_deblocking_packet(f, 0, 1, j, y, QPy, bS, LCbCr);
40000630:	b80f883a 	mov	r7,r23
40000634:	01800044 	movi	r6,1
40000638:	000b883a 	mov	r5,zero
4000063c:	8009883a 	mov	r4,r16
40000640:	d8000315 	stw	zero,12(sp)
40000644:	dcc00215 	stw	r19,8(sp)
40000648:	dc800115 	stw	r18,4(sp)
4000064c:	dc400015 	stw	r17,0(sp)
40000650:	00015b40 	call	400015b4 <send_deblocking_packet>
			rx_deblocking_packet(id0, f, 0,1, j, y, LCbCr);
40000654:	01c00044 	movi	r7,1
40000658:	ddc00015 	stw	r23,0(sp)
4000065c:	d8000215 	stw	zero,8(sp)
40000660:	dc400115 	stw	r17,4(sp)
40000664:	000d883a 	mov	r6,zero
40000668:	800b883a 	mov	r5,r16
4000066c:	1009883a 	mov	r4,r2
40000670:	00019400 	call	40001940 <rx_deblocking_packet>
		}
	}
	//run deblocking filter horizontally
	int num_horizontal_edges = ((f->Lheight)/b_width)-1;
	for(int i = 0; i < num_horizontal_edges; i++){
		for(int j = 0; j < f->Lheight; j++){
40000674:	80800117 	ldw	r2,4(r16)
40000678:	bdc00044 	addi	r23,r23,1
4000067c:	b8bfec16 	blt	r23,r2,40000630 <__alt_data_end+0xc0000630>
40000680:	a5000044 	addi	r20,r20,1
			rx_deblocking_packet(id0, f, 1,0, x, j, LCbCr);
		}
	}
	//run deblocking filter horizontally
	int num_horizontal_edges = ((f->Lheight)/b_width)-1;
	for(int i = 0; i < num_horizontal_edges; i++){
40000684:	adbfe616 	blt	r21,r22,40000620 <__alt_data_end+0xc0000620>
			int id0 = send_deblocking_packet(f, 0, 1, j, y, QPy, bS, LCbCr);
			rx_deblocking_packet(id0, f, 0,1, j, y, LCbCr);
		}
	}

	add_time(TOTAL_DB_COUNTS, read_timer() - start_time);
40000688:	0001c800 	call	40001c80 <read_timer>
4000068c:	d9000417 	ldw	r4,16(sp)
40000690:	1f07c83a 	sub	r3,r3,fp
40000694:	110bc83a 	sub	r5,r2,r4
40000698:	114d803a 	cmpltu	r6,r2,r5
4000069c:	198dc83a 	sub	r6,r3,r6
400006a0:	010000c4 	movi	r4,3
400006a4:	0001ca40 	call	40001ca4 <add_time>
	start_time = read_timer();
400006a8:	0001c800 	call	40001c80 <read_timer>

	//display current frame
    for(int i = 0; (i < f->Lwidth) && (i < 320); i+=2){
400006ac:	80c00017 	ldw	r3,0(r16)
400006b0:	00c03e0e 	bge	zero,r3,400007ac <do_start_new_frame_func+0x274>
400006b4:	80800117 	ldw	r2,4(r16)
400006b8:	0023883a 	mov	r17,zero
    		uint32_t luma_addr     = i + f->Lwidth * j;
    		int i_chroma           = i/2;
    		int j_chroma           = j/2;
    		int chroma_addr        = i_chroma + j_chroma * f->Cwidth;

			WR_PIO(TX_0_BASE, f->L[luma_addr     ]  );
400006bc:	07044404 	movi	fp,4368
			WR_PIO(TX_1_BASE, f->C[0][chroma_addr]  );
400006c0:	05c44004 	movi	r23,4352
			WR_PIO(TX_2_BASE, f->C[1][chroma_addr]  );
400006c4:	05842c04 	movi	r22,4272
			WR_PIO(TX_3_BASE, f->L[luma_addr +1  ]  );
400006c8:	05442804 	movi	r21,4256
	add_time(TOTAL_DB_COUNTS, read_timer() - start_time);
	start_time = read_timer();

	//display current frame
    for(int i = 0; (i < f->Lwidth) && (i < 320); i+=2){
    	for(int j = 0; (j < f->Lheight)&&(j < 200); j++){
400006cc:	0080330e 	bge	zero,r2,4000079c <do_start_new_frame_func+0x264>
400006d0:	8824d7fa 	srli	r18,r17,31
400006d4:	8829883a 	mov	r20,r17
400006d8:	0027883a 	mov	r19,zero
400006dc:	9465883a 	add	r18,r18,r17
400006e0:	9025d07a 	srai	r18,r18,1
400006e4:	00000306 	br	400006f4 <do_start_new_frame_func+0x1bc>
400006e8:	00c03204 	movi	r3,200
400006ec:	98c02a26 	beq	r19,r3,40000798 <do_start_new_frame_func+0x260>
400006f0:	80c00017 	ldw	r3,0(r16)
    		uint32_t buffer_addr   = i + 320 * j;
    		uint32_t luma_addr     = i + f->Lwidth * j;
400006f4:	98c7383a 	mul	r3,r19,r3
    		int i_chroma           = i/2;
    		int j_chroma           = j/2;
    		int chroma_addr        = i_chroma + j_chroma * f->Cwidth;
400006f8:	980fd07a 	srai	r7,r19,1
400006fc:	80800317 	ldw	r2,12(r16)

			WR_PIO(TX_0_BASE, f->L[luma_addr     ]  );
40000700:	81000617 	ldw	r4,24(r16)

	//display current frame
    for(int i = 0; (i < f->Lwidth) && (i < 320); i+=2){
    	for(int j = 0; (j < f->Lheight)&&(j < 200); j++){
    		uint32_t buffer_addr   = i + 320 * j;
    		uint32_t luma_addr     = i + f->Lwidth * j;
40000704:	1c47883a 	add	r3,r3,r17
    		int i_chroma           = i/2;
    		int j_chroma           = j/2;
    		int chroma_addr        = i_chroma + j_chroma * f->Cwidth;
40000708:	3885383a 	mul	r2,r7,r2

			WR_PIO(TX_0_BASE, f->L[luma_addr     ]  );
4000070c:	20c9883a 	add	r4,r4,r3
40000710:	21000003 	ldbu	r4,0(r4)
    	for(int j = 0; (j < f->Lheight)&&(j < 200); j++){
    		uint32_t buffer_addr   = i + 320 * j;
    		uint32_t luma_addr     = i + f->Lwidth * j;
    		int i_chroma           = i/2;
    		int j_chroma           = j/2;
    		int chroma_addr        = i_chroma + j_chroma * f->Cwidth;
40000714:	1485883a 	add	r2,r2,r18

			WR_PIO(TX_0_BASE, f->L[luma_addr     ]  );
40000718:	e1000035 	stwio	r4,0(fp)
			WR_PIO(TX_1_BASE, f->C[0][chroma_addr]  );
4000071c:	81000717 	ldw	r4,28(r16)
40000720:	2089883a 	add	r4,r4,r2
40000724:	21000003 	ldbu	r4,0(r4)
40000728:	b9000035 	stwio	r4,0(r23)
			WR_PIO(TX_2_BASE, f->C[1][chroma_addr]  );
4000072c:	81000817 	ldw	r4,32(r16)
40000730:	2089883a 	add	r4,r4,r2
40000734:	21000003 	ldbu	r4,0(r4)
40000738:	b1000035 	stwio	r4,0(r22)
			WR_PIO(TX_3_BASE, f->L[luma_addr +1  ]  );
4000073c:	81000617 	ldw	r4,24(r16)
40000740:	20c7883a 	add	r3,r4,r3
40000744:	18c00043 	ldbu	r3,1(r3)
40000748:	a8c00035 	stwio	r3,0(r21)
			WR_PIO(TX_4_BASE, f->C[0][chroma_addr]  );
4000074c:	80c00717 	ldw	r3,28(r16)
40000750:	01042404 	movi	r4,4240
40000754:	1887883a 	add	r3,r3,r2
40000758:	18c00003 	ldbu	r3,0(r3)
4000075c:	20c00035 	stwio	r3,0(r4)
			WR_PIO(TX_5_BASE, f->C[1][chroma_addr]  );
40000760:	80c00817 	ldw	r3,32(r16)
40000764:	1885883a 	add	r2,r3,r2
40000768:	10800003 	ldbu	r2,0(r2)
4000076c:	00c42004 	movi	r3,4224
40000770:	18800035 	stwio	r2,0(r3)
			WR_PIO(TX_6_BASE, buffer_addr );
40000774:	00841c04 	movi	r2,4208
40000778:	15000035 	stwio	r20,0(r2)
			no_data_send(FORMAT_7 | IN_PLACE_VGA_0_ADDR | CPU_TX_REQ);
4000077c:	01100234 	movhi	r4,16392
40000780:	210001c4 	addi	r4,r4,7
40000784:	000c26c0 	call	4000c26c <no_data_send>
	add_time(TOTAL_DB_COUNTS, read_timer() - start_time);
	start_time = read_timer();

	//display current frame
    for(int i = 0; (i < f->Lwidth) && (i < 320); i+=2){
    	for(int j = 0; (j < f->Lheight)&&(j < 200); j++){
40000788:	80800117 	ldw	r2,4(r16)
4000078c:	9cc00044 	addi	r19,r19,1
40000790:	a5005004 	addi	r20,r20,320
40000794:	98bfd416 	blt	r19,r2,400006e8 <__alt_data_end+0xc00006e8>
40000798:	80c00017 	ldw	r3,0(r16)

	add_time(TOTAL_DB_COUNTS, read_timer() - start_time);
	start_time = read_timer();

	//display current frame
    for(int i = 0; (i < f->Lwidth) && (i < 320); i+=2){
4000079c:	8c400084 	addi	r17,r17,2
400007a0:	88c0020e 	bge	r17,r3,400007ac <do_start_new_frame_func+0x274>
400007a4:	01005004 	movi	r4,320
400007a8:	893fc81e 	bne	r17,r4,400006cc <__alt_data_end+0xc00006cc>

//    memset(ref_buf->L,0,     ref_buf->Lheight*ref_buf->Lpitch);
//    memset(ref_buf->C[0],128,ref_buf->Cheight*ref_buf->Cpitch);
//    memset(ref_buf->C[1],128,ref_buf->Cheight*ref_buf->Cpitch);

    f=working_buf; working_buf=ref_buf; ref_buf=f;
400007ac:	d0a2c317 	ldw	r2,-29940(gp)
400007b0:	d0e2c217 	ldw	r3,-29944(gp)
400007b4:	d0a2c215 	stw	r2,-29944(gp)
400007b8:	d0e2c315 	stw	r3,-29940(gp)



    //printf("TOTAL FLITS: %d\n", get_total_flits());

}
400007bc:	dfc00e17 	ldw	ra,56(sp)
400007c0:	df000d17 	ldw	fp,52(sp)
400007c4:	ddc00c17 	ldw	r23,48(sp)
400007c8:	dd800b17 	ldw	r22,44(sp)
400007cc:	dd400a17 	ldw	r21,40(sp)
400007d0:	dd000917 	ldw	r20,36(sp)
400007d4:	dcc00817 	ldw	r19,32(sp)
400007d8:	dc800717 	ldw	r18,28(sp)
400007dc:	dc400617 	ldw	r17,24(sp)
400007e0:	dc000517 	ldw	r16,20(sp)
400007e4:	dec00f04 	addi	sp,sp,60
400007e8:	f800283a 	ret
	int QPy = the_packet->data.flit[0]>>16 & 0xFF;
	int bS  = 3;

	//run deblocking filter vertically
	int b_width = 16;
	int num_vertical_edges   = ((f->Lwidth)/b_width)-1;
400007ec:	108003c4 	addi	r2,r2,15
400007f0:	003f6406 	br	40000584 <__alt_data_end+0xc0000584>
			int id0 = send_deblocking_packet(f, 1, 0, x, j, QPy, bS, LCbCr);
			rx_deblocking_packet(id0, f, 1,0, x, j, LCbCr);
		}
	}
	//run deblocking filter horizontally
	int num_horizontal_edges = ((f->Lheight)/b_width)-1;
400007f4:	10c003c4 	addi	r3,r2,15
400007f8:	003f8406 	br	4000060c <__alt_data_end+0xc000060c>

400007fc <do_alloc_frame_func>:

    //printf("TOTAL FLITS: %d\n", get_total_flits());

}

void do_alloc_frame_func(packet *the_packet){
400007fc:	defffd04 	addi	sp,sp,-12
40000800:	dc000015 	stw	r16,0(sp)
40000804:	2021883a 	mov	r16,r4
	printf("I'm about to alloc a frame!\n");
40000808:	011000b4 	movhi	r4,16386
4000080c:	2128ee04 	addi	r4,r4,-23624

    //printf("TOTAL FLITS: %d\n", get_total_flits());

}

void do_alloc_frame_func(packet *the_packet){
40000810:	dfc00215 	stw	ra,8(sp)
40000814:	dc400115 	stw	r17,4(sp)
	printf("I'm about to alloc a frame!\n");
40000818:	000f0840 	call	4000f084 <puts>
	int width; int height;
	width  = (the_packet->data.flit[0]>>48) & 0xFFFF;
4000081c:	84000117 	ldw	r16,4(r16)
	height = (the_packet->data.flit[0]>>32) & 0xFFFF;

	printf("width:  %d\n", width);
40000820:	011000b4 	movhi	r4,16386
40000824:	2128f504 	addi	r4,r4,-23596
}

void do_alloc_frame_func(packet *the_packet){
	printf("I'm about to alloc a frame!\n");
	int width; int height;
	width  = (the_packet->data.flit[0]>>48) & 0xFFFF;
40000828:	8022d43a 	srli	r17,r16,16
	height = (the_packet->data.flit[0]>>32) & 0xFFFF;
4000082c:	843fffcc 	andi	r16,r16,65535

	printf("width:  %d\n", width);
40000830:	880b883a 	mov	r5,r17
40000834:	000ef680 	call	4000ef68 <printf>
	printf("height: %d\n", height);
40000838:	011000b4 	movhi	r4,16386
4000083c:	800b883a 	mov	r5,r16
40000840:	2128f804 	addi	r4,r4,-23584
40000844:	000ef680 	call	4000ef68 <printf>

	working_buf = alloc_frame(width, height);
40000848:	800b883a 	mov	r5,r16
4000084c:	8809883a 	mov	r4,r17
40000850:	00014740 	call	40001474 <alloc_frame>
	ref_buf  = alloc_frame(width, height);
40000854:	800b883a 	mov	r5,r16
40000858:	8809883a 	mov	r4,r17
	height = (the_packet->data.flit[0]>>32) & 0xFFFF;

	printf("width:  %d\n", width);
	printf("height: %d\n", height);

	working_buf = alloc_frame(width, height);
4000085c:	d0a2c215 	stw	r2,-29944(gp)
	ref_buf  = alloc_frame(width, height);
40000860:	00014740 	call	40001474 <alloc_frame>
	printf("I did it!\n");
40000864:	011000b4 	movhi	r4,16386
40000868:	2128fb04 	addi	r4,r4,-23572

	printf("width:  %d\n", width);
	printf("height: %d\n", height);

	working_buf = alloc_frame(width, height);
	ref_buf  = alloc_frame(width, height);
4000086c:	d0a2c315 	stw	r2,-29940(gp)
	printf("I did it!\n");
40000870:	000f0840 	call	4000f084 <puts>

	decode_time_start = read_timer();
40000874:	0001c800 	call	40001c80 <read_timer>
40000878:	d0a2c015 	stw	r2,-29952(gp)
4000087c:	d0e2c115 	stw	r3,-29948(gp)
}
40000880:	dfc00217 	ldw	ra,8(sp)
40000884:	dc400117 	ldw	r17,4(sp)
40000888:	dc000017 	ldw	r16,0(sp)
4000088c:	dec00304 	addi	sp,sp,12
40000890:	f800283a 	ret

40000894 <do_display_perf_func>:

void do_display_perf_func(){
40000894:	deffff04 	addi	sp,sp,-4
40000898:	dfc00015 	stw	ra,0(sp)
	add_time(TOTAL_DECODE_COUNTS, read_timer() - decode_time_start);
4000089c:	0001c800 	call	40001c80 <read_timer>
400008a0:	d162c017 	ldw	r5,-29952(gp)
400008a4:	0009883a 	mov	r4,zero
400008a8:	114bc83a 	sub	r5,r2,r5
400008ac:	114d803a 	cmpltu	r6,r2,r5
400008b0:	d0a2c117 	ldw	r2,-29948(gp)
400008b4:	1887c83a 	sub	r3,r3,r2
400008b8:	198dc83a 	sub	r6,r3,r6
400008bc:	0001ca40 	call	40001ca4 <add_time>
	print_counts();
}
400008c0:	dfc00017 	ldw	ra,0(sp)
400008c4:	dec00104 	addi	sp,sp,4
	decode_time_start = read_timer();
}

void do_display_perf_func(){
	add_time(TOTAL_DECODE_COUNTS, read_timer() - decode_time_start);
	print_counts();
400008c8:	0001cd81 	jmpi	40001cd8 <print_counts>

400008cc <simulate_buffer_node>:
}

void simulate_buffer_node(){
400008cc:	deffc604 	addi	sp,sp,-232
400008d0:	dfc03915 	stw	ra,228(sp)
400008d4:	df003815 	stw	fp,224(sp)
400008d8:	ddc03715 	stw	r23,220(sp)
400008dc:	dd803615 	stw	r22,216(sp)
400008e0:	dd403515 	stw	r21,212(sp)
400008e4:	dd003415 	stw	r20,208(sp)
400008e8:	dcc03315 	stw	r19,204(sp)
400008ec:	dc803215 	stw	r18,200(sp)
400008f0:	dc403115 	stw	r17,196(sp)
400008f4:	dc003015 	stw	r16,192(sp)
	uint64_t start_time = read_timer();
400008f8:	0001c800 	call	40001c80 <read_timer>

	packet *rx_packet = (void *)0;
	while(rx_packet == (void *)0){
		rx_packet = get_packet_pointer_by_id(0xFF);
400008fc:	01003fc4 	movi	r4,255
40000900:	000c5340 	call	4000c534 <get_packet_pointer_by_id>
		if(rx_packet == (void *)0){
40000904:	10001426 	beq	r2,zero,40000958 <simulate_buffer_node+0x8c>
			buffers_loop(1);
		}
	}

	int command = (rx_packet->data.flit[0]>>8)&0xFF;
40000908:	14000043 	ldbu	r16,1(r2)
4000090c:	1025883a 	mov	r18,r2
//	if(command != DO_ALLOC_FRAME){
//		add_time(PARSER_COUNTS, read_timer() - start_time);
//	}

	//read the timer to keep track of overflows...
	read_timer();
40000910:	0001c800 	call	40001c80 <read_timer>

	switch(command){
40000914:	00800204 	movi	r2,8
40000918:	14014c36 	bltu	r2,r16,40000e4c <simulate_buffer_node+0x580>
4000091c:	802090ba 	slli	r16,r16,2
40000920:	00900034 	movhi	r2,16384
40000924:	10824d04 	addi	r2,r2,2356
40000928:	80a1883a 	add	r16,r16,r2
4000092c:	80800017 	ldw	r2,0(r16)
40000930:	1000683a 	jmp	r2
40000934:	40000e4c 	andi	zero,r8,57
40000938:	40000df8 	rdprs	zero,r8,55
4000093c:	40000964 	muli	zero,r8,37
40000940:	40000d2c 	andhi	zero,r8,52
40000944:	40000e2c 	andhi	zero,r8,56
40000948:	40000e40 	call	440000e4 <__alt_heap_start+0x3fd2c08>
4000094c:	40000d40 	call	440000d4 <__alt_heap_start+0x3fd2bf8>
40000950:	40000db4 	orhi	zero,r8,54
40000954:	40000dcc 	andi	zero,r8,55

	packet *rx_packet = (void *)0;
	while(rx_packet == (void *)0){
		rx_packet = get_packet_pointer_by_id(0xFF);
		if(rx_packet == (void *)0){
			buffers_loop(1);
40000958:	01000044 	movi	r4,1
4000095c:	000c3500 	call	4000c350 <buffers_loop>
40000960:	003fe606 	br	400008fc <__alt_data_end+0xc00008fc>
            do_intra_func(rx_packet);
            add_time(TOTAL_INTRA_COUNTS, read_timer() - start_time);
            break;

        case DO_INTER:
        	start_time = read_timer();
40000964:	0001c800 	call	40001c80 <read_timer>
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
40000968:	91401317 	ldw	r5,76(r18)
            do_intra_func(rx_packet);
            add_time(TOTAL_INTRA_COUNTS, read_timer() - start_time);
            break;

        case DO_INTER:
        	start_time = read_timer();
4000096c:	d8802b15 	stw	r2,172(sp)
40000970:	d8c02c15 	stw	r3,176(sp)
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
40000974:	92000417 	ldw	r8,16(r18)
40000978:	94000517 	ldw	r16,20(r18)
4000097c:	d9402215 	stw	r5,136(sp)


void do_inter_func(packet *the_packet){
	int32_t  mvx[16];
	int32_t  mvy[16];
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
40000980:	92800217 	ldw	r10,8(r18)
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
40000984:	97000d17 	ldw	fp,52(r18)
40000988:	92400917 	ldw	r9,36(r18)


void do_inter_func(packet *the_packet){
	int32_t  mvx[16];
	int32_t  mvy[16];
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
4000098c:	da802d15 	stw	r10,180(sp)
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
40000990:	91800617 	ldw	r6,24(r18)
40000994:	91c00717 	ldw	r7,28(r18)
40000998:	91000817 	ldw	r4,32(r18)
4000099c:	90800a17 	ldw	r2,40(r18)
400009a0:	90c00b17 	ldw	r3,44(r18)
400009a4:	95c00c17 	ldw	r23,48(r18)
400009a8:	95400e17 	ldw	r21,56(r18)
400009ac:	95800f17 	ldw	r22,60(r18)
400009b0:	94c01017 	ldw	r19,64(r18)
400009b4:	95001117 	ldw	r20,68(r18)
400009b8:	94401217 	ldw	r17,72(r18)
400009bc:	e014d43a 	srli	r10,fp,16


void do_inter_func(packet *the_packet){
	int32_t  mvx[16];
	int32_t  mvy[16];
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
400009c0:	94800317 	ldw	r18,12(r18)

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
400009c4:	401ed43a 	srli	r15,r8,16
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
400009c8:	da802815 	stw	r10,160(sp)


void do_inter_func(packet *the_packet){
	int32_t  mvx[16];
	int32_t  mvy[16];
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
400009cc:	dc802e15 	stw	r18,184(sp)
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
400009d0:	b014d43a 	srli	r10,r22,16
400009d4:	1824d43a 	srli	r18,r3,16
400009d8:	381cd43a 	srli	r14,r7,16
400009dc:	da802915 	stw	r10,164(sp)
400009e0:	dc802f15 	stw	r18,188(sp)
400009e4:	a014d43a 	srli	r10,r20,16
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
400009e8:	b824d43a 	srli	r18,r23,16
400009ec:	301ad43a 	srli	r13,r6,16
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
400009f0:	da802a15 	stw	r10,168(sp)
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
400009f4:	dc802415 	stw	r18,144(sp)
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
400009f8:	da802217 	ldw	r10,136(sp)
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
400009fc:	a824d43a 	srli	r18,r21,16
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
40000a00:	4818d43a 	srli	r12,r9,16
40000a04:	5014d43a 	srli	r10,r10,16
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
40000a08:	dc802515 	stw	r18,148(sp)
40000a0c:	9824d43a 	srli	r18,r19,16
	uint32_t org_x   = (the_packet->data.flit[1]>>32)&0xFFFFFFFF;
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
40000a10:	da802715 	stw	r10,156(sp)
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
40000a14:	497fffcc 	andi	r5,r9,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
40000a18:	dc802615 	stw	r18,152(sp)
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
40000a1c:	da802217 	ldw	r10,136(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
40000a20:	2016d43a 	srli	r11,r4,16
40000a24:	1012d43a 	srli	r9,r2,16
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
40000a28:	54bfffcc 	andi	r18,r10,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
40000a2c:	8814d43a 	srli	r10,r17,16
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
40000a30:	8c7fffcc 	andi	r17,r17,65535
40000a34:	dc402315 	stw	r17,140(sp)

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
40000a38:	da802215 	stw	r10,136(sp)
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
40000a3c:	87ffffcc 	andi	ra,r16,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
40000a40:	423fffcc 	andi	r8,r8,65535
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
40000a44:	39ffffcc 	andi	r7,r7,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
40000a48:	31bfffcc 	andi	r6,r6,65535
40000a4c:	213fffcc 	andi	r4,r4,65535
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
40000a50:	18ffffcc 	andi	r3,r3,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
40000a54:	10bfffcc 	andi	r2,r2,65535
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
40000a58:	e73fffcc 	andi	fp,fp,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
40000a5c:	bdffffcc 	andi	r23,r23,65535
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
40000a60:	b5bfffcc 	andi	r22,r22,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
40000a64:	ad7fffcc 	andi	r21,r21,65535
	uint32_t org_y   = (the_packet->data.flit[1]    )&0xFFFFFFFF;

	for(int i = 0; i<8; i++){
		int j = 2*i;
		mvx[j]   = (the_packet->data.flit[2+i]>>48)&0xFFFF ;
		mvy[j]   = (the_packet->data.flit[2+i]>>32)&0xFFFF ;
40000a68:	a53fffcc 	andi	r20,r20,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
40000a6c:	9cffffcc 	andi	r19,r19,65535
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000a70:	8022d43a 	srli	r17,r16,16
40000a74:	8000010e 	bge	r16,zero,40000a7c <simulate_buffer_node+0x1b0>
40000a78:	8c7ffff4 	orhi	r17,r17,65535
40000a7c:	dc401215 	stw	r17,72(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000a80:	041fffc4 	movi	r16,32767
40000a84:	87c0010e 	bge	r16,ra,40000a8c <simulate_buffer_node+0x1c0>
40000a88:	fffffff4 	orhi	ra,ra,65535
40000a8c:	dfc00215 	stw	ra,8(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000a90:	041fffc4 	movi	r16,32767
40000a94:	83c0010e 	bge	r16,r15,40000a9c <simulate_buffer_node+0x1d0>
40000a98:	7bfffff4 	orhi	r15,r15,65535
40000a9c:	dbc01315 	stw	r15,76(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000aa0:	03dfffc4 	movi	r15,32767
40000aa4:	7a00010e 	bge	r15,r8,40000aac <simulate_buffer_node+0x1e0>
40000aa8:	423ffff4 	orhi	r8,r8,65535
40000aac:	da000315 	stw	r8,12(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000ab0:	021fffc4 	movi	r8,32767
40000ab4:	4380010e 	bge	r8,r14,40000abc <simulate_buffer_node+0x1f0>
40000ab8:	73bffff4 	orhi	r14,r14,65535
40000abc:	db801415 	stw	r14,80(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000ac0:	021fffc4 	movi	r8,32767
40000ac4:	41c0010e 	bge	r8,r7,40000acc <simulate_buffer_node+0x200>
40000ac8:	39fffff4 	orhi	r7,r7,65535
40000acc:	d9c00415 	stw	r7,16(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000ad0:	01dfffc4 	movi	r7,32767
40000ad4:	3b40010e 	bge	r7,r13,40000adc <simulate_buffer_node+0x210>
40000ad8:	6b7ffff4 	orhi	r13,r13,65535
40000adc:	db401515 	stw	r13,84(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000ae0:	01dfffc4 	movi	r7,32767
40000ae4:	3980010e 	bge	r7,r6,40000aec <simulate_buffer_node+0x220>
40000ae8:	31bffff4 	orhi	r6,r6,65535
40000aec:	d9800515 	stw	r6,20(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000af0:	019fffc4 	movi	r6,32767
40000af4:	3300010e 	bge	r6,r12,40000afc <simulate_buffer_node+0x230>
40000af8:	633ffff4 	orhi	r12,r12,65535
40000afc:	db001615 	stw	r12,88(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000b00:	019fffc4 	movi	r6,32767
40000b04:	3140010e 	bge	r6,r5,40000b0c <simulate_buffer_node+0x240>
40000b08:	297ffff4 	orhi	r5,r5,65535
40000b0c:	d9400615 	stw	r5,24(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000b10:	015fffc4 	movi	r5,32767
40000b14:	2ac0010e 	bge	r5,r11,40000b1c <simulate_buffer_node+0x250>
40000b18:	5afffff4 	orhi	r11,r11,65535
40000b1c:	dac01715 	stw	r11,92(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000b20:	015fffc4 	movi	r5,32767
40000b24:	2900010e 	bge	r5,r4,40000b2c <simulate_buffer_node+0x260>
40000b28:	213ffff4 	orhi	r4,r4,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000b2c:	d9402f17 	ldw	r5,188(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000b30:	d9000715 	stw	r4,28(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000b34:	011fffc4 	movi	r4,32767
40000b38:	2140da0e 	bge	r4,r5,40000ea4 <simulate_buffer_node+0x5d8>
40000b3c:	2abffff4 	orhi	r10,r5,65535
40000b40:	da801815 	stw	r10,96(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000b44:	011fffc4 	movi	r4,32767
40000b48:	20c0010e 	bge	r4,r3,40000b50 <simulate_buffer_node+0x284>
40000b4c:	18fffff4 	orhi	r3,r3,65535
40000b50:	d8c00815 	stw	r3,32(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000b54:	00dfffc4 	movi	r3,32767
40000b58:	1a40010e 	bge	r3,r9,40000b60 <simulate_buffer_node+0x294>
40000b5c:	4a7ffff4 	orhi	r9,r9,65535
40000b60:	da401915 	stw	r9,100(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000b64:	00dfffc4 	movi	r3,32767
40000b68:	1880010e 	bge	r3,r2,40000b70 <simulate_buffer_node+0x2a4>
40000b6c:	10bffff4 	orhi	r2,r2,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000b70:	da402817 	ldw	r9,160(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000b74:	d8800915 	stw	r2,36(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000b78:	009fffc4 	movi	r2,32767
40000b7c:	1240c70e 	bge	r2,r9,40000e9c <simulate_buffer_node+0x5d0>
40000b80:	48bffff4 	orhi	r2,r9,65535
40000b84:	d8801a15 	stw	r2,104(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000b88:	009fffc4 	movi	r2,32767
40000b8c:	1700010e 	bge	r2,fp,40000b94 <simulate_buffer_node+0x2c8>
40000b90:	e73ffff4 	orhi	fp,fp,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000b94:	da802417 	ldw	r10,144(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000b98:	df000a15 	stw	fp,40(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000b9c:	009fffc4 	movi	r2,32767
40000ba0:	1280bc0e 	bge	r2,r10,40000e94 <simulate_buffer_node+0x5c8>
40000ba4:	50bffff4 	orhi	r2,r10,65535
40000ba8:	d8801b15 	stw	r2,108(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000bac:	009fffc4 	movi	r2,32767
40000bb0:	15c0010e 	bge	r2,r23,40000bb8 <simulate_buffer_node+0x2ec>
40000bb4:	bdfffff4 	orhi	r23,r23,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000bb8:	d8c02917 	ldw	r3,164(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000bbc:	ddc00b15 	stw	r23,44(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000bc0:	009fffc4 	movi	r2,32767
40000bc4:	10c0b10e 	bge	r2,r3,40000e8c <simulate_buffer_node+0x5c0>
40000bc8:	18bffff4 	orhi	r2,r3,65535
40000bcc:	d8801c15 	stw	r2,112(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000bd0:	009fffc4 	movi	r2,32767
40000bd4:	1580010e 	bge	r2,r22,40000bdc <simulate_buffer_node+0x310>
40000bd8:	b5bffff4 	orhi	r22,r22,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000bdc:	d9002517 	ldw	r4,148(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000be0:	dd800c15 	stw	r22,48(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000be4:	009fffc4 	movi	r2,32767
40000be8:	1100a60e 	bge	r2,r4,40000e84 <simulate_buffer_node+0x5b8>
40000bec:	20bffff4 	orhi	r2,r4,65535
40000bf0:	d8801d15 	stw	r2,116(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000bf4:	009fffc4 	movi	r2,32767
40000bf8:	1540010e 	bge	r2,r21,40000c00 <simulate_buffer_node+0x334>
40000bfc:	ad7ffff4 	orhi	r21,r21,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000c00:	d9402a17 	ldw	r5,168(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000c04:	dd400d15 	stw	r21,52(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000c08:	009fffc4 	movi	r2,32767
40000c0c:	11409b0e 	bge	r2,r5,40000e7c <simulate_buffer_node+0x5b0>
40000c10:	28bffff4 	orhi	r2,r5,65535
40000c14:	d8801e15 	stw	r2,120(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000c18:	009fffc4 	movi	r2,32767
40000c1c:	1500010e 	bge	r2,r20,40000c24 <simulate_buffer_node+0x358>
40000c20:	a53ffff4 	orhi	r20,r20,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000c24:	da402617 	ldw	r9,152(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000c28:	dd000e15 	stw	r20,56(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000c2c:	009fffc4 	movi	r2,32767
40000c30:	1240900e 	bge	r2,r9,40000e74 <simulate_buffer_node+0x5a8>
40000c34:	48bffff4 	orhi	r2,r9,65535
40000c38:	d8801f15 	stw	r2,124(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000c3c:	009fffc4 	movi	r2,32767
40000c40:	14c0010e 	bge	r2,r19,40000c48 <simulate_buffer_node+0x37c>
40000c44:	9cfffff4 	orhi	r19,r19,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000c48:	da802717 	ldw	r10,156(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000c4c:	dcc00f15 	stw	r19,60(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000c50:	009fffc4 	movi	r2,32767
40000c54:	12808516 	blt	r2,r10,40000e6c <simulate_buffer_node+0x5a0>
40000c58:	5005883a 	mov	r2,r10
40000c5c:	d8802015 	stw	r2,128(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000c60:	009fffc4 	movi	r2,32767
40000c64:	1480010e 	bge	r2,r18,40000c6c <simulate_buffer_node+0x3a0>
40000c68:	94bffff4 	orhi	r18,r18,65535
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000c6c:	d9002217 	ldw	r4,136(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000c70:	dc801015 	stw	r18,64(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000c74:	009fffc4 	movi	r2,32767
40000c78:	11007a16 	blt	r2,r4,40000e64 <simulate_buffer_node+0x598>
40000c7c:	2005883a 	mov	r2,r4
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000c80:	da402317 	ldw	r9,140(sp)
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000c84:	d8802115 	stw	r2,132(sp)
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000c88:	009fffc4 	movi	r2,32767
40000c8c:	12407316 	blt	r2,r9,40000e5c <simulate_buffer_node+0x590>
40000c90:	4823883a 	mov	r17,r9
	for(int i = 0; i<16; i++){
		printf("mv(rx'd)[%d] = (%d, %d)\n",i, mvx[i], mvy[i]);
	}
#endif

	MotionCompensateMB_2( working_buf,
40000c94:	dc802d17 	ldw	r18,180(sp)
40000c98:	d8802e17 	ldw	r2,184(sp)
40000c9c:	d162c317 	ldw	r5,-29940(gp)
40000ca0:	d122c217 	ldw	r4,-29944(gp)
40000ca4:	d9801204 	addi	r6,sp,72
40000ca8:	d9c00204 	addi	r7,sp,8
40000cac:	dc800115 	stw	r18,4(sp)
40000cb0:	d8800015 	stw	r2,0(sp)
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000cb4:	dc401115 	stw	r17,68(sp)
	for(int i = 0; i<16; i++){
		printf("mv(rx'd)[%d] = (%d, %d)\n",i, mvx[i], mvy[i]);
	}
#endif

	MotionCompensateMB_2( working_buf,
40000cb8:	000c09c0 	call	4000c09c <MotionCompensateMB_2>
            break;

        case DO_INTER:
        	start_time = read_timer();
        	do_inter_func(rx_packet);
        	add_time(TOTAL_INTER_COUNTS, read_timer() - start_time);
40000cbc:	0001c800 	call	40001c80 <read_timer>
40000cc0:	da402b17 	ldw	r9,172(sp)
40000cc4:	da802c17 	ldw	r10,176(sp)
40000cc8:	01000084 	movi	r4,2
40000ccc:	124bc83a 	sub	r5,r2,r9
40000cd0:	114d803a 	cmpltu	r6,r2,r5
40000cd4:	1a87c83a 	sub	r3,r3,r10
40000cd8:	198dc83a 	sub	r6,r3,r6
40000cdc:	0001ca40 	call	40001ca4 <add_time>
        	printf("simulate_buffer_node: I don't know what this command is.\n");


	}

	remove_packet_with_id(0xFF);
40000ce0:	01003fc4 	movi	r4,255
40000ce4:	000c5c00 	call	4000c5c0 <remove_packet_with_id>
	//send ack
	send_flit(0, 0, 0xFE, 1);
40000ce8:	01c00044 	movi	r7,1
40000cec:	01803f84 	movi	r6,254
40000cf0:	000b883a 	mov	r5,zero
40000cf4:	0009883a 	mov	r4,zero
40000cf8:	000c2000 	call	4000c200 <send_flit>
}
40000cfc:	dfc03917 	ldw	ra,228(sp)
40000d00:	df003817 	ldw	fp,224(sp)
40000d04:	ddc03717 	ldw	r23,220(sp)
40000d08:	dd803617 	ldw	r22,216(sp)
40000d0c:	dd403517 	ldw	r21,212(sp)
40000d10:	dd003417 	ldw	r20,208(sp)
40000d14:	dcc03317 	ldw	r19,204(sp)
40000d18:	dc803217 	ldw	r18,200(sp)
40000d1c:	dc403117 	ldw	r17,196(sp)
40000d20:	dc003017 	ldw	r16,192(sp)
40000d24:	dec03a04 	addi	sp,sp,232
40000d28:	f800283a 	ret
						  );
}


void do_iqit_func(packet *the_packet){
	rx_iqit_request_2(working_buf, the_packet, 0);
40000d2c:	d122c217 	ldw	r4,-29944(gp)
40000d30:	000d883a 	mov	r6,zero
40000d34:	900b883a 	mov	r5,r18
40000d38:	0000eac0 	call	40000eac <rx_iqit_request_2>
40000d3c:	003fe806 	br	40000ce0 <__alt_data_end+0xc0000ce0>
    //printf("TOTAL FLITS: %d\n", get_total_flits());

}

void do_alloc_frame_func(packet *the_packet){
	printf("I'm about to alloc a frame!\n");
40000d40:	011000b4 	movhi	r4,16386
40000d44:	2128ee04 	addi	r4,r4,-23624
40000d48:	000f0840 	call	4000f084 <puts>
	int width; int height;
	width  = (the_packet->data.flit[0]>>48) & 0xFFFF;
40000d4c:	94000117 	ldw	r16,4(r18)
	height = (the_packet->data.flit[0]>>32) & 0xFFFF;

	printf("width:  %d\n", width);
40000d50:	011000b4 	movhi	r4,16386
40000d54:	2128f504 	addi	r4,r4,-23596
}

void do_alloc_frame_func(packet *the_packet){
	printf("I'm about to alloc a frame!\n");
	int width; int height;
	width  = (the_packet->data.flit[0]>>48) & 0xFFFF;
40000d58:	8022d43a 	srli	r17,r16,16
	height = (the_packet->data.flit[0]>>32) & 0xFFFF;
40000d5c:	843fffcc 	andi	r16,r16,65535

	printf("width:  %d\n", width);
40000d60:	880b883a 	mov	r5,r17
40000d64:	000ef680 	call	4000ef68 <printf>
	printf("height: %d\n", height);
40000d68:	011000b4 	movhi	r4,16386
40000d6c:	800b883a 	mov	r5,r16
40000d70:	2128f804 	addi	r4,r4,-23584
40000d74:	000ef680 	call	4000ef68 <printf>

	working_buf = alloc_frame(width, height);
40000d78:	800b883a 	mov	r5,r16
40000d7c:	8809883a 	mov	r4,r17
40000d80:	00014740 	call	40001474 <alloc_frame>
	ref_buf  = alloc_frame(width, height);
40000d84:	800b883a 	mov	r5,r16
40000d88:	8809883a 	mov	r4,r17
	height = (the_packet->data.flit[0]>>32) & 0xFFFF;

	printf("width:  %d\n", width);
	printf("height: %d\n", height);

	working_buf = alloc_frame(width, height);
40000d8c:	d0a2c215 	stw	r2,-29944(gp)
	ref_buf  = alloc_frame(width, height);
40000d90:	00014740 	call	40001474 <alloc_frame>
	printf("I did it!\n");
40000d94:	011000b4 	movhi	r4,16386
40000d98:	2128fb04 	addi	r4,r4,-23572

	printf("width:  %d\n", width);
	printf("height: %d\n", height);

	working_buf = alloc_frame(width, height);
	ref_buf  = alloc_frame(width, height);
40000d9c:	d0a2c315 	stw	r2,-29940(gp)
	printf("I did it!\n");
40000da0:	000f0840 	call	4000f084 <puts>

	decode_time_start = read_timer();
40000da4:	0001c800 	call	40001c80 <read_timer>
40000da8:	d0a2c015 	stw	r2,-29952(gp)
40000dac:	d0e2c115 	stw	r3,-29948(gp)
40000db0:	003fcb06 	br	40000ce0 <__alt_data_end+0xc0000ce0>
        case DO_ALLOC_FRAME:
        	do_alloc_frame_func(rx_packet);
        	break;

        case DO_LOOP_TEST:
        	send_flit(0, 0, 0xFE, 0);
40000db4:	000f883a 	mov	r7,zero
40000db8:	01803f84 	movi	r6,254
40000dbc:	000b883a 	mov	r5,zero
40000dc0:	0009883a 	mov	r4,zero
40000dc4:	000c2000 	call	4000c200 <send_flit>
        	break;
40000dc8:	003fc506 	br	40000ce0 <__alt_data_end+0xc0000ce0>

	decode_time_start = read_timer();
}

void do_display_perf_func(){
	add_time(TOTAL_DECODE_COUNTS, read_timer() - decode_time_start);
40000dcc:	0001c800 	call	40001c80 <read_timer>
40000dd0:	d162c017 	ldw	r5,-29952(gp)
40000dd4:	d1a2c117 	ldw	r6,-29948(gp)
40000dd8:	0009883a 	mov	r4,zero
40000ddc:	114bc83a 	sub	r5,r2,r5
40000de0:	1987c83a 	sub	r3,r3,r6
40000de4:	114d803a 	cmpltu	r6,r2,r5
40000de8:	198dc83a 	sub	r6,r3,r6
40000dec:	0001ca40 	call	40001ca4 <add_time>
	print_counts();
40000df0:	0001cd80 	call	40001cd8 <print_counts>
40000df4:	003fba06 	br	40000ce0 <__alt_data_end+0xc0000ce0>
	//read the timer to keep track of overflows...
	read_timer();

	switch(command){
        case DO_INTRA:
        	start_time = read_timer();
40000df8:	0001c800 	call	40001c80 <read_timer>
            do_intra_func(rx_packet);
40000dfc:	9009883a 	mov	r4,r18
	//read the timer to keep track of overflows...
	read_timer();

	switch(command){
        case DO_INTRA:
        	start_time = read_timer();
40000e00:	1021883a 	mov	r16,r2
40000e04:	1823883a 	mov	r17,r3
            do_intra_func(rx_packet);
40000e08:	000006c0 	call	4000006c <do_intra_func>
            add_time(TOTAL_INTRA_COUNTS, read_timer() - start_time);
40000e0c:	0001c800 	call	40001c80 <read_timer>
40000e10:	140bc83a 	sub	r5,r2,r16
40000e14:	114d803a 	cmpltu	r6,r2,r5
40000e18:	1c47c83a 	sub	r3,r3,r17
40000e1c:	198dc83a 	sub	r6,r3,r6
40000e20:	01000044 	movi	r4,1
40000e24:	0001ca40 	call	40001ca4 <add_time>
            break;
40000e28:	003fad06 	br	40000ce0 <__alt_data_end+0xc0000ce0>


}

void do_direct_write_func( packet *the_packet){
	rx_iqit_request_2(working_buf, the_packet, 1);
40000e2c:	d122c217 	ldw	r4,-29944(gp)
40000e30:	01800044 	movi	r6,1
40000e34:	900b883a 	mov	r5,r18
40000e38:	0000eac0 	call	40000eac <rx_iqit_request_2>
40000e3c:	003fa806 	br	40000ce0 <__alt_data_end+0xc0000ce0>
        case DO_DIRECT_WRITE:
        	do_direct_write_func(rx_packet);
        	break;

        case DO_START_NEW_FRAME:
        	do_start_new_frame_func(rx_packet);
40000e40:	9009883a 	mov	r4,r18
40000e44:	00005380 	call	40000538 <do_start_new_frame_func>
        	break;
40000e48:	003fa506 	br	40000ce0 <__alt_data_end+0xc0000ce0>
        case DO_DISPLAY_PERF:
        	do_display_perf_func();
			break;

        default:
        	printf("simulate_buffer_node: I don't know what this command is.\n");
40000e4c:	011000b4 	movhi	r4,16386
40000e50:	2128fe04 	addi	r4,r4,-23560
40000e54:	000f0840 	call	4000f084 <puts>
40000e58:	003fa106 	br	40000ce0 <__alt_data_end+0xc0000ce0>
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
		mvy[i] = mvy[i]<(65536/2)?mvy[i]:mvy[i] | 0xFFFF0000;
40000e5c:	4c7ffff4 	orhi	r17,r9,65535
40000e60:	003f8c06 	br	40000c94 <__alt_data_end+0xc0000c94>
		mvx[j+1] = (the_packet->data.flit[2+i]>>16)&0xFFFF ;
		mvy[j+1] = (the_packet->data.flit[2+i]    )&0xFFFF ;
	}

	for(int i = 0; i < 16; i++){
		mvx[i] = mvx[i]<(65536/2)?mvx[i]:mvx[i] | 0xFFFF0000;
40000e64:	20bffff4 	orhi	r2,r4,65535
40000e68:	003f8506 	br	40000c80 <__alt_data_end+0xc0000c80>
40000e6c:	50bffff4 	orhi	r2,r10,65535
40000e70:	003f7a06 	br	40000c5c <__alt_data_end+0xc0000c5c>
40000e74:	4805883a 	mov	r2,r9
40000e78:	003f6f06 	br	40000c38 <__alt_data_end+0xc0000c38>
40000e7c:	2805883a 	mov	r2,r5
40000e80:	003f6406 	br	40000c14 <__alt_data_end+0xc0000c14>
40000e84:	2005883a 	mov	r2,r4
40000e88:	003f5906 	br	40000bf0 <__alt_data_end+0xc0000bf0>
40000e8c:	1805883a 	mov	r2,r3
40000e90:	003f4e06 	br	40000bcc <__alt_data_end+0xc0000bcc>
40000e94:	5005883a 	mov	r2,r10
40000e98:	003f4306 	br	40000ba8 <__alt_data_end+0xc0000ba8>
40000e9c:	4805883a 	mov	r2,r9
40000ea0:	003f3806 	br	40000b84 <__alt_data_end+0xc0000b84>
40000ea4:	2815883a 	mov	r10,r5
40000ea8:	003f2506 	br	40000b40 <__alt_data_end+0xc0000b40>

40000eac <rx_iqit_request_2>:
#include "common.h"
#include "block.h"
#include "noc_control.h"

void rx_iqit_request_2(frame *f, packet *the_packet, int clear){
40000eac:	defff104 	addi	sp,sp,-60
40000eb0:	dfc00e15 	stw	ra,56(sp)
40000eb4:	df000d15 	stw	fp,52(sp)
40000eb8:	ddc00c15 	stw	r23,48(sp)
40000ebc:	dd800b15 	stw	r22,44(sp)
40000ec0:	dd400a15 	stw	r21,40(sp)
40000ec4:	dd000915 	stw	r20,36(sp)
40000ec8:	dcc00815 	stw	r19,32(sp)
40000ecc:	dc800715 	stw	r18,28(sp)
40000ed0:	dc400615 	stw	r17,24(sp)
40000ed4:	dc000515 	stw	r16,20(sp)

	packet *iqit_packet = the_packet;

	int LCbCr = ((iqit_packet->data.flit[0]>>27)&0x3);
40000ed8:	28c00017 	ldw	r3,0(r5)
40000edc:	28800117 	ldw	r2,4(r5)
40000ee0:	1810d6fa 	srli	r8,r3,27
	int x     = ((iqit_packet->data.flit[0]>>53)&0x7FF);
	int y     = ((iqit_packet->data.flit[0]>>16)&0x7FF);
40000ee4:	1806d43a 	srli	r3,r3,16
void rx_iqit_request_2(frame *f, packet *the_packet, int clear){

	packet *iqit_packet = the_packet;

	int LCbCr = ((iqit_packet->data.flit[0]>>27)&0x3);
	int x     = ((iqit_packet->data.flit[0]>>53)&0x7FF);
40000ee8:	1012d57a 	srli	r9,r2,21

void rx_iqit_request_2(frame *f, packet *the_packet, int clear){

	packet *iqit_packet = the_packet;

	int LCbCr = ((iqit_packet->data.flit[0]>>27)&0x3);
40000eec:	420000cc 	andi	r8,r8,3
	int x     = ((iqit_packet->data.flit[0]>>53)&0x7FF);
	int y     = ((iqit_packet->data.flit[0]>>16)&0x7FF);
40000ef0:	18c1ffcc 	andi	r3,r3,2047

	int pitch = LCbCr?f->Cpitch:f->Lpitch;
40000ef4:	4000e926 	beq	r8,zero,4000129c <rx_iqit_request_2+0x3f0>
40000ef8:	21c00517 	ldw	r7,20(r4)
	uint8_t *img  = LCbCr?&(C_pixel(f,LCbCr-1,x,y)):&(L_pixel(f,x,y));
40000efc:	42000184 	addi	r8,r8,6
40000f00:	4211883a 	add	r8,r8,r8
40000f04:	4211883a 	add	r8,r8,r8
40000f08:	2209883a 	add	r4,r4,r8
40000f0c:	19c7383a 	mul	r3,r3,r7
40000f10:	21000017 	ldw	r4,0(r4)
40000f14:	1a47883a 	add	r3,r3,r9
40000f18:	20c7883a 	add	r3,r4,r3

	int residuals[16];
	uint16_t sign_mask = (uint16_t)((iqit_packet->data.flit[0]>>32)&0xFFFF);

	//memcpy( &(residuals[0]), &(iqit_packet.flit[1]), 16);
	residuals[15] = (int)((iqit_packet->data.flit[1]&0xFF00000000000000ull)>>56);
40000f1c:	2a000217 	ldw	r8,8(r5)
	residuals[12] = (int)((iqit_packet->data.flit[1]&0x000000FF00000000ull)>>32);
	residuals[11] = (int)((iqit_packet->data.flit[1]&0x00000000FF000000ull)>>24);
	residuals[10] = (int)((iqit_packet->data.flit[1]&0x0000000000FF0000ull)>>16);
	residuals[9 ] = (int)((iqit_packet->data.flit[1]&0x000000000000FF00ull)>>8 );
	residuals[8 ] = (int)((iqit_packet->data.flit[1]&0x00000000000000FFull)>>0 );
	residuals[7 ] = (int)((iqit_packet->data.flit[2]&0xFF00000000000000ull)>>56);
40000f20:	2a400417 	ldw	r9,16(r5)

	int residuals[16];
	uint16_t sign_mask = (uint16_t)((iqit_packet->data.flit[0]>>32)&0xFFFF);

	//memcpy( &(residuals[0]), &(iqit_packet.flit[1]), 16);
	residuals[15] = (int)((iqit_packet->data.flit[1]&0xFF00000000000000ull)>>56);
40000f24:	29000317 	ldw	r4,12(r5)
	residuals[14] = (int)((iqit_packet->data.flit[1]&0x00FF000000000000ull)>>48);
	residuals[13] = (int)((iqit_packet->data.flit[1]&0x0000FF0000000000ull)>>40);
	residuals[12] = (int)((iqit_packet->data.flit[1]&0x000000FF00000000ull)>>32);
	residuals[11] = (int)((iqit_packet->data.flit[1]&0x00000000FF000000ull)>>24);
	residuals[10] = (int)((iqit_packet->data.flit[1]&0x0000000000FF0000ull)>>16);
40000f28:	43803fec 	andhi	r14,r8,255
	residuals[9 ] = (int)((iqit_packet->data.flit[1]&0x000000000000FF00ull)>>8 );
	residuals[8 ] = (int)((iqit_packet->data.flit[1]&0x00000000000000FFull)>>0 );
	residuals[7 ] = (int)((iqit_packet->data.flit[2]&0xFF00000000000000ull)>>56);
40000f2c:	29400517 	ldw	r5,20(r5)
	residuals[14] = (int)((iqit_packet->data.flit[1]&0x00FF000000000000ull)>>48);
	residuals[13] = (int)((iqit_packet->data.flit[1]&0x0000FF0000000000ull)>>40);
	residuals[12] = (int)((iqit_packet->data.flit[1]&0x000000FF00000000ull)>>32);
	residuals[11] = (int)((iqit_packet->data.flit[1]&0x00000000FF000000ull)>>24);
	residuals[10] = (int)((iqit_packet->data.flit[1]&0x0000000000FF0000ull)>>16);
	residuals[9 ] = (int)((iqit_packet->data.flit[1]&0x000000000000FF00ull)>>8 );
40000f30:	43ffc00c 	andi	r15,r8,65280
	residuals[7 ] = (int)((iqit_packet->data.flit[2]&0xFF00000000000000ull)>>56);
	residuals[6 ] = (int)((iqit_packet->data.flit[2]&0x00FF000000000000ull)>>48);
	residuals[5 ] = (int)((iqit_packet->data.flit[2]&0x0000FF0000000000ull)>>40);
	residuals[4 ] = (int)((iqit_packet->data.flit[2]&0x000000FF00000000ull)>>32);
	residuals[3 ] = (int)((iqit_packet->data.flit[2]&0x00000000FF000000ull)>>24);
	residuals[2 ] = (int)((iqit_packet->data.flit[2]&0x0000000000FF0000ull)>>16);
40000f34:	4fc03fec 	andhi	ra,r9,255
	residuals[1 ] = (int)((iqit_packet->data.flit[2]&0x000000000000FF00ull)>>8 );
40000f38:	4c3fc00c 	andi	r16,r9,65280
	//memcpy( &(residuals[0]), &(iqit_packet.flit[1]), 16);
	residuals[15] = (int)((iqit_packet->data.flit[1]&0xFF00000000000000ull)>>56);
	residuals[14] = (int)((iqit_packet->data.flit[1]&0x00FF000000000000ull)>>48);
	residuals[13] = (int)((iqit_packet->data.flit[1]&0x0000FF0000000000ull)>>40);
	residuals[12] = (int)((iqit_packet->data.flit[1]&0x000000FF00000000ull)>>32);
	residuals[11] = (int)((iqit_packet->data.flit[1]&0x00000000FF000000ull)>>24);
40000f3c:	4024d63a 	srli	r18,r8,24
	residuals[10] = (int)((iqit_packet->data.flit[1]&0x0000000000FF0000ull)>>16);
40000f40:	701cd43a 	srli	r14,r14,16
	residuals[9 ] = (int)((iqit_packet->data.flit[1]&0x000000000000FF00ull)>>8 );
40000f44:	781ed23a 	srli	r15,r15,8
	residuals[8 ] = (int)((iqit_packet->data.flit[1]&0x00000000000000FFull)>>0 );
	residuals[7 ] = (int)((iqit_packet->data.flit[2]&0xFF00000000000000ull)>>56);
	residuals[6 ] = (int)((iqit_packet->data.flit[2]&0x00FF000000000000ull)>>48);
	residuals[5 ] = (int)((iqit_packet->data.flit[2]&0x0000FF0000000000ull)>>40);
	residuals[4 ] = (int)((iqit_packet->data.flit[2]&0x000000FF00000000ull)>>32);
	residuals[3 ] = (int)((iqit_packet->data.flit[2]&0x00000000FF000000ull)>>24);
40000f48:	4828d63a 	srli	r20,r9,24
	residuals[2 ] = (int)((iqit_packet->data.flit[2]&0x0000000000FF0000ull)>>16);
40000f4c:	f83ed43a 	srli	ra,ra,16
	residuals[1 ] = (int)((iqit_packet->data.flit[2]&0x000000000000FF00ull)>>8 );
40000f50:	8020d23a 	srli	r16,r16,8

	//memcpy( &(residuals[0]), &(iqit_packet.flit[1]), 16);
	residuals[15] = (int)((iqit_packet->data.flit[1]&0xFF00000000000000ull)>>56);
	residuals[14] = (int)((iqit_packet->data.flit[1]&0x00FF000000000000ull)>>48);
	residuals[13] = (int)((iqit_packet->data.flit[1]&0x0000FF0000000000ull)>>40);
	residuals[12] = (int)((iqit_packet->data.flit[1]&0x000000FF00000000ull)>>32);
40000f54:	24403fcc 	andi	r17,r4,255
	residuals[9 ] = (int)((iqit_packet->data.flit[1]&0x000000000000FF00ull)>>8 );
	residuals[8 ] = (int)((iqit_packet->data.flit[1]&0x00000000000000FFull)>>0 );
	residuals[7 ] = (int)((iqit_packet->data.flit[2]&0xFF00000000000000ull)>>56);
	residuals[6 ] = (int)((iqit_packet->data.flit[2]&0x00FF000000000000ull)>>48);
	residuals[5 ] = (int)((iqit_packet->data.flit[2]&0x0000FF0000000000ull)>>40);
	residuals[4 ] = (int)((iqit_packet->data.flit[2]&0x000000FF00000000ull)>>32);
40000f58:	2cc03fcc 	andi	r19,r5,255
	int residuals[16];
	uint16_t sign_mask = (uint16_t)((iqit_packet->data.flit[0]>>32)&0xFFFF);

	//memcpy( &(residuals[0]), &(iqit_packet.flit[1]), 16);
	residuals[15] = (int)((iqit_packet->data.flit[1]&0xFF00000000000000ull)>>56);
	residuals[14] = (int)((iqit_packet->data.flit[1]&0x00FF000000000000ull)>>48);
40000f5c:	22803fec 	andhi	r10,r4,255
	residuals[13] = (int)((iqit_packet->data.flit[1]&0x0000FF0000000000ull)>>40);
40000f60:	233fc00c 	andi	r12,r4,65280
	residuals[11] = (int)((iqit_packet->data.flit[1]&0x00000000FF000000ull)>>24);
	residuals[10] = (int)((iqit_packet->data.flit[1]&0x0000000000FF0000ull)>>16);
	residuals[9 ] = (int)((iqit_packet->data.flit[1]&0x000000000000FF00ull)>>8 );
	residuals[8 ] = (int)((iqit_packet->data.flit[1]&0x00000000000000FFull)>>0 );
	residuals[7 ] = (int)((iqit_packet->data.flit[2]&0xFF00000000000000ull)>>56);
	residuals[6 ] = (int)((iqit_packet->data.flit[2]&0x00FF000000000000ull)>>48);
40000f64:	2ac03fec 	andhi	r11,r5,255
	residuals[5 ] = (int)((iqit_packet->data.flit[2]&0x0000FF0000000000ull)>>40);
40000f68:	2b7fc00c 	andi	r13,r5,65280
	residuals[2 ] = (int)((iqit_packet->data.flit[2]&0x0000000000FF0000ull)>>16);
	residuals[1 ] = (int)((iqit_packet->data.flit[2]&0x000000000000FF00ull)>>8 );
	residuals[0 ] = (int)((iqit_packet->data.flit[2]&0x00000000000000FFull)>>0 );
	for(int i = 0; i < 16; i++)
	{
		residuals[i] = (sign_mask&(1<<i))?-1*residuals[i]:residuals[i];
40000f6c:	1700004c 	andi	fp,r2,1

	//memcpy( &(residuals[0]), &(iqit_packet.flit[1]), 16);
	residuals[15] = (int)((iqit_packet->data.flit[1]&0xFF00000000000000ull)>>56);
	residuals[14] = (int)((iqit_packet->data.flit[1]&0x00FF000000000000ull)>>48);
	residuals[13] = (int)((iqit_packet->data.flit[1]&0x0000FF0000000000ull)>>40);
	residuals[12] = (int)((iqit_packet->data.flit[1]&0x000000FF00000000ull)>>32);
40000f70:	dc400015 	stw	r17,0(sp)
	residuals[11] = (int)((iqit_packet->data.flit[1]&0x00000000FF000000ull)>>24);
40000f74:	dc800115 	stw	r18,4(sp)
	residuals[10] = (int)((iqit_packet->data.flit[1]&0x0000000000FF0000ull)>>16);
40000f78:	db800215 	stw	r14,8(sp)
	residuals[9 ] = (int)((iqit_packet->data.flit[1]&0x000000000000FF00ull)>>8 );
40000f7c:	dbc00315 	stw	r15,12(sp)
	residuals[8 ] = (int)((iqit_packet->data.flit[1]&0x00000000000000FFull)>>0 );
	residuals[7 ] = (int)((iqit_packet->data.flit[2]&0xFF00000000000000ull)>>56);
	residuals[6 ] = (int)((iqit_packet->data.flit[2]&0x00FF000000000000ull)>>48);
	residuals[5 ] = (int)((iqit_packet->data.flit[2]&0x0000FF0000000000ull)>>40);
	residuals[4 ] = (int)((iqit_packet->data.flit[2]&0x000000FF00000000ull)>>32);
40000f80:	dcc00415 	stw	r19,16(sp)

	int residuals[16];
	uint16_t sign_mask = (uint16_t)((iqit_packet->data.flit[0]>>32)&0xFFFF);

	//memcpy( &(residuals[0]), &(iqit_packet.flit[1]), 16);
	residuals[15] = (int)((iqit_packet->data.flit[1]&0xFF00000000000000ull)>>56);
40000f84:	2008d63a 	srli	r4,r4,24
	residuals[14] = (int)((iqit_packet->data.flit[1]&0x00FF000000000000ull)>>48);
40000f88:	5014d43a 	srli	r10,r10,16
	residuals[13] = (int)((iqit_packet->data.flit[1]&0x0000FF0000000000ull)>>40);
40000f8c:	6018d23a 	srli	r12,r12,8
	residuals[12] = (int)((iqit_packet->data.flit[1]&0x000000FF00000000ull)>>32);
	residuals[11] = (int)((iqit_packet->data.flit[1]&0x00000000FF000000ull)>>24);
	residuals[10] = (int)((iqit_packet->data.flit[1]&0x0000000000FF0000ull)>>16);
	residuals[9 ] = (int)((iqit_packet->data.flit[1]&0x000000000000FF00ull)>>8 );
	residuals[8 ] = (int)((iqit_packet->data.flit[1]&0x00000000000000FFull)>>0 );
40000f90:	42003fcc 	andi	r8,r8,255
	residuals[7 ] = (int)((iqit_packet->data.flit[2]&0xFF00000000000000ull)>>56);
40000f94:	280ad63a 	srli	r5,r5,24
	residuals[6 ] = (int)((iqit_packet->data.flit[2]&0x00FF000000000000ull)>>48);
40000f98:	5816d43a 	srli	r11,r11,16
	residuals[5 ] = (int)((iqit_packet->data.flit[2]&0x0000FF0000000000ull)>>40);
40000f9c:	681ad23a 	srli	r13,r13,8
	residuals[4 ] = (int)((iqit_packet->data.flit[2]&0x000000FF00000000ull)>>32);
	residuals[3 ] = (int)((iqit_packet->data.flit[2]&0x00000000FF000000ull)>>24);
40000fa0:	a02b883a 	mov	r21,r20
	residuals[2 ] = (int)((iqit_packet->data.flit[2]&0x0000000000FF0000ull)>>16);
40000fa4:	f82d883a 	mov	r22,ra
	residuals[1 ] = (int)((iqit_packet->data.flit[2]&0x000000000000FF00ull)>>8 );
40000fa8:	802f883a 	mov	r23,r16
	residuals[0 ] = (int)((iqit_packet->data.flit[2]&0x00000000000000FFull)>>0 );
40000fac:	4a403fcc 	andi	r9,r9,255
40000fb0:	10bfffcc 	andi	r2,r2,65535
	for(int i = 0; i < 16; i++)
	{
		residuals[i] = (sign_mask&(1<<i))?-1*residuals[i]:residuals[i];
40000fb4:	e0000126 	beq	fp,zero,40000fbc <rx_iqit_request_2+0x110>
40000fb8:	0253c83a 	sub	r9,zero,r9
40000fbc:	1039d07a 	srai	fp,r2,1
40000fc0:	e700004c 	andi	fp,fp,1
40000fc4:	e0000126 	beq	fp,zero,40000fcc <rx_iqit_request_2+0x120>
40000fc8:	042fc83a 	sub	r23,zero,r16
40000fcc:	1021d0ba 	srai	r16,r2,2
40000fd0:	8400004c 	andi	r16,r16,1
40000fd4:	80000126 	beq	r16,zero,40000fdc <rx_iqit_request_2+0x130>
40000fd8:	07edc83a 	sub	r22,zero,ra
40000fdc:	1021d0fa 	srai	r16,r2,3
40000fe0:	8400004c 	andi	r16,r16,1
40000fe4:	80000126 	beq	r16,zero,40000fec <rx_iqit_request_2+0x140>
40000fe8:	052bc83a 	sub	r21,zero,r20
40000fec:	1021d13a 	srai	r16,r2,4
40000ff0:	8400004c 	andi	r16,r16,1
40000ff4:	80000226 	beq	r16,zero,40001000 <rx_iqit_request_2+0x154>
40000ff8:	04e7c83a 	sub	r19,zero,r19
40000ffc:	dcc00415 	stw	r19,16(sp)
40001000:	1021d17a 	srai	r16,r2,5
40001004:	8400004c 	andi	r16,r16,1
40001008:	80000126 	beq	r16,zero,40001010 <rx_iqit_request_2+0x164>
4000100c:	035bc83a 	sub	r13,zero,r13
40001010:	1021d1ba 	srai	r16,r2,6
40001014:	8400004c 	andi	r16,r16,1
40001018:	80000126 	beq	r16,zero,40001020 <rx_iqit_request_2+0x174>
4000101c:	02d7c83a 	sub	r11,zero,r11
40001020:	1021d1fa 	srai	r16,r2,7
40001024:	8400004c 	andi	r16,r16,1
40001028:	80000126 	beq	r16,zero,40001030 <rx_iqit_request_2+0x184>
4000102c:	014bc83a 	sub	r5,zero,r5
40001030:	1021d23a 	srai	r16,r2,8
40001034:	8400004c 	andi	r16,r16,1
40001038:	80000126 	beq	r16,zero,40001040 <rx_iqit_request_2+0x194>
4000103c:	0211c83a 	sub	r8,zero,r8
40001040:	1021d27a 	srai	r16,r2,9
40001044:	8400004c 	andi	r16,r16,1
40001048:	80000226 	beq	r16,zero,40001054 <rx_iqit_request_2+0x1a8>
4000104c:	03dfc83a 	sub	r15,zero,r15
40001050:	dbc00315 	stw	r15,12(sp)
40001054:	101fd2ba 	srai	r15,r2,10
40001058:	7bc0004c 	andi	r15,r15,1
4000105c:	78000226 	beq	r15,zero,40001068 <rx_iqit_request_2+0x1bc>
40001060:	039dc83a 	sub	r14,zero,r14
40001064:	db800215 	stw	r14,8(sp)
40001068:	101dd2fa 	srai	r14,r2,11
4000106c:	7380004c 	andi	r14,r14,1
40001070:	70000226 	beq	r14,zero,4000107c <rx_iqit_request_2+0x1d0>
40001074:	04a5c83a 	sub	r18,zero,r18
40001078:	dc800115 	stw	r18,4(sp)
4000107c:	101dd33a 	srai	r14,r2,12
40001080:	7380004c 	andi	r14,r14,1
40001084:	70000226 	beq	r14,zero,40001090 <rx_iqit_request_2+0x1e4>
40001088:	0463c83a 	sub	r17,zero,r17
4000108c:	dc400015 	stw	r17,0(sp)
40001090:	101dd37a 	srai	r14,r2,13
40001094:	7380004c 	andi	r14,r14,1
40001098:	70000126 	beq	r14,zero,400010a0 <rx_iqit_request_2+0x1f4>
4000109c:	0319c83a 	sub	r12,zero,r12
400010a0:	101dd3ba 	srai	r14,r2,14
400010a4:	7380004c 	andi	r14,r14,1
400010a8:	70000126 	beq	r14,zero,400010b0 <rx_iqit_request_2+0x204>
400010ac:	0295c83a 	sub	r10,zero,r10
400010b0:	1005d3fa 	srai	r2,r2,15
400010b4:	10000126 	beq	r2,zero,400010bc <rx_iqit_request_2+0x210>
400010b8:	0109c83a 	sub	r4,zero,r4
	}

	if(clear == 0){
400010bc:	30007d1e 	bne	r6,zero,400012b4 <rx_iqit_request_2+0x408>
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
400010c0:	18800003 	ldbu	r2,0(r3)
400010c4:	39dd883a 	add	r14,r7,r7
400010c8:	71cd883a 	add	r6,r14,r7
400010cc:	1253883a 	add	r9,r2,r9
			  img[0] = Clip(tmp);
400010d0:	4800c816 	blt	r9,zero,400013f4 <rx_iqit_request_2+0x548>
400010d4:	00803fc4 	movi	r2,255
400010d8:	1240c416 	blt	r2,r9,400013ec <rx_iqit_request_2+0x540>
400010dc:	1a400005 	stb	r9,0(r3)
			  tmp = img[pitch   ] + (int)residuals[i+4];
400010e0:	19d3883a 	add	r9,r3,r7
400010e4:	48800003 	ldbu	r2,0(r9)
400010e8:	dbc00417 	ldw	r15,16(sp)
400010ec:	13c5883a 	add	r2,r2,r15
			  img[pitch] = Clip(tmp);
400010f0:	1000c216 	blt	r2,zero,400013fc <rx_iqit_request_2+0x550>
400010f4:	03c03fc4 	movi	r15,255
400010f8:	7880ba16 	blt	r15,r2,400013e4 <rx_iqit_request_2+0x538>
400010fc:	48800005 	stb	r2,0(r9)
			  tmp = img[pitch<<1] + (int)residuals[i+8];
40001100:	1b93883a 	add	r9,r3,r14
40001104:	48800003 	ldbu	r2,0(r9)
40001108:	1211883a 	add	r8,r2,r8
			  img[pitch<<1] = Clip(tmp);
4000110c:	4000bf16 	blt	r8,zero,4000140c <rx_iqit_request_2+0x560>
40001110:	00803fc4 	movi	r2,255
40001114:	1200b116 	blt	r2,r8,400013dc <rx_iqit_request_2+0x530>
40001118:	4a000005 	stb	r8,0(r9)
			  tmp = img[pitch*3] + (int)residuals[i+12];
4000111c:	1991883a 	add	r8,r3,r6
40001120:	40800003 	ldbu	r2,0(r8)
40001124:	da400017 	ldw	r9,0(sp)
40001128:	1245883a 	add	r2,r2,r9
			  img[pitch*3] = Clip(tmp);
4000112c:	1000b516 	blt	r2,zero,40001404 <rx_iqit_request_2+0x558>
40001130:	02403fc4 	movi	r9,255
40001134:	4880a716 	blt	r9,r2,400013d4 <rx_iqit_request_2+0x528>
40001138:	40800005 	stb	r2,0(r8)
		residuals[i] = (sign_mask&(1<<i))?-1*residuals[i]:residuals[i];
	}

	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
4000113c:	18800043 	ldbu	r2,1(r3)
			  img[pitch] = Clip(tmp);
			  tmp = img[pitch<<1] + (int)residuals[i+8];
			  img[pitch<<1] = Clip(tmp);
			  tmp = img[pitch*3] + (int)residuals[i+12];
			  img[pitch*3] = Clip(tmp);
			  img++;
40001140:	1a000044 	addi	r8,r3,1
		residuals[i] = (sign_mask&(1<<i))?-1*residuals[i]:residuals[i];
	}

	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
40001144:	15ef883a 	add	r23,r2,r23
			  img[0] = Clip(tmp);
40001148:	b800b416 	blt	r23,zero,4000141c <rx_iqit_request_2+0x570>
4000114c:	00803fc4 	movi	r2,255
40001150:	15c09e16 	blt	r2,r23,400013cc <rx_iqit_request_2+0x520>
40001154:	1dc00045 	stb	r23,1(r3)
			  tmp = img[pitch   ] + (int)residuals[i+4];
40001158:	41d3883a 	add	r9,r8,r7
4000115c:	48800003 	ldbu	r2,0(r9)
40001160:	135b883a 	add	r13,r2,r13
			  img[pitch] = Clip(tmp);
40001164:	6800ab16 	blt	r13,zero,40001414 <rx_iqit_request_2+0x568>
40001168:	00803fc4 	movi	r2,255
4000116c:	13409516 	blt	r2,r13,400013c4 <rx_iqit_request_2+0x518>
40001170:	4b400005 	stb	r13,0(r9)
			  tmp = img[pitch<<1] + (int)residuals[i+8];
40001174:	4393883a 	add	r9,r8,r14
40001178:	48800003 	ldbu	r2,0(r9)
4000117c:	db400317 	ldw	r13,12(sp)
40001180:	1345883a 	add	r2,r2,r13
			  img[pitch<<1] = Clip(tmp);
40001184:	1000a916 	blt	r2,zero,4000142c <rx_iqit_request_2+0x580>
40001188:	03403fc4 	movi	r13,255
4000118c:	68808b16 	blt	r13,r2,400013bc <rx_iqit_request_2+0x510>
40001190:	48800005 	stb	r2,0(r9)
			  tmp = img[pitch*3] + (int)residuals[i+12];
40001194:	4191883a 	add	r8,r8,r6
40001198:	40800003 	ldbu	r2,0(r8)
4000119c:	1319883a 	add	r12,r2,r12
			  img[pitch*3] = Clip(tmp);
400011a0:	6000a016 	blt	r12,zero,40001424 <rx_iqit_request_2+0x578>
400011a4:	00803fc4 	movi	r2,255
400011a8:	13008216 	blt	r2,r12,400013b4 <rx_iqit_request_2+0x508>
400011ac:	43000005 	stb	r12,0(r8)
		residuals[i] = (sign_mask&(1<<i))?-1*residuals[i]:residuals[i];
	}

	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
400011b0:	18800083 	ldbu	r2,2(r3)
			  img[pitch] = Clip(tmp);
			  tmp = img[pitch<<1] + (int)residuals[i+8];
			  img[pitch<<1] = Clip(tmp);
			  tmp = img[pitch*3] + (int)residuals[i+12];
			  img[pitch*3] = Clip(tmp);
			  img++;
400011b4:	1a000084 	addi	r8,r3,2
		residuals[i] = (sign_mask&(1<<i))?-1*residuals[i]:residuals[i];
	}

	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
400011b8:	15ad883a 	add	r22,r2,r22
			  img[0] = Clip(tmp);
400011bc:	b0009f16 	blt	r22,zero,4000143c <rx_iqit_request_2+0x590>
400011c0:	00803fc4 	movi	r2,255
400011c4:	15807916 	blt	r2,r22,400013ac <rx_iqit_request_2+0x500>
400011c8:	1d800085 	stb	r22,2(r3)
			  tmp = img[pitch   ] + (int)residuals[i+4];
400011cc:	41d3883a 	add	r9,r8,r7
400011d0:	48800003 	ldbu	r2,0(r9)
400011d4:	12d7883a 	add	r11,r2,r11
			  img[pitch] = Clip(tmp);
400011d8:	58009616 	blt	r11,zero,40001434 <rx_iqit_request_2+0x588>
400011dc:	00803fc4 	movi	r2,255
400011e0:	12c07016 	blt	r2,r11,400013a4 <rx_iqit_request_2+0x4f8>
400011e4:	4ac00005 	stb	r11,0(r9)
			  tmp = img[pitch<<1] + (int)residuals[i+8];
400011e8:	4393883a 	add	r9,r8,r14
400011ec:	48800003 	ldbu	r2,0(r9)
400011f0:	dbc00217 	ldw	r15,8(sp)
400011f4:	13c5883a 	add	r2,r2,r15
			  img[pitch<<1] = Clip(tmp);
400011f8:	10009416 	blt	r2,zero,4000144c <rx_iqit_request_2+0x5a0>
400011fc:	02c03fc4 	movi	r11,255
40001200:	58806616 	blt	r11,r2,4000139c <rx_iqit_request_2+0x4f0>
40001204:	48800005 	stb	r2,0(r9)
			  tmp = img[pitch*3] + (int)residuals[i+12];
40001208:	4191883a 	add	r8,r8,r6
4000120c:	40800003 	ldbu	r2,0(r8)
40001210:	1295883a 	add	r10,r2,r10
			  img[pitch*3] = Clip(tmp);
40001214:	50008b16 	blt	r10,zero,40001444 <rx_iqit_request_2+0x598>
40001218:	00803fc4 	movi	r2,255
4000121c:	12805d16 	blt	r2,r10,40001394 <rx_iqit_request_2+0x4e8>
40001220:	42800005 	stb	r10,0(r8)
		residuals[i] = (sign_mask&(1<<i))?-1*residuals[i]:residuals[i];
	}

	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
40001224:	188000c3 	ldbu	r2,3(r3)
			  img[pitch] = Clip(tmp);
			  tmp = img[pitch<<1] + (int)residuals[i+8];
			  img[pitch<<1] = Clip(tmp);
			  tmp = img[pitch*3] + (int)residuals[i+12];
			  img[pitch*3] = Clip(tmp);
			  img++;
40001228:	1a0000c4 	addi	r8,r3,3
		residuals[i] = (sign_mask&(1<<i))?-1*residuals[i]:residuals[i];
	}

	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
4000122c:	156b883a 	add	r21,r2,r21
			  img[0] = Clip(tmp);
40001230:	a8008a16 	blt	r21,zero,4000145c <rx_iqit_request_2+0x5b0>
40001234:	00803fc4 	movi	r2,255
40001238:	15405416 	blt	r2,r21,4000138c <rx_iqit_request_2+0x4e0>
4000123c:	1d4000c5 	stb	r21,3(r3)
			  tmp = img[pitch   ] + (int)residuals[i+4];
40001240:	41cf883a 	add	r7,r8,r7
40001244:	38800003 	ldbu	r2,0(r7)
40001248:	114b883a 	add	r5,r2,r5
			  img[pitch] = Clip(tmp);
4000124c:	28008116 	blt	r5,zero,40001454 <rx_iqit_request_2+0x5a8>
40001250:	00803fc4 	movi	r2,255
40001254:	11404b16 	blt	r2,r5,40001384 <rx_iqit_request_2+0x4d8>
40001258:	39400005 	stb	r5,0(r7)
			  tmp = img[pitch<<1] + (int)residuals[i+8];
4000125c:	439d883a 	add	r14,r8,r14
40001260:	70800003 	ldbu	r2,0(r14)
40001264:	d8c00117 	ldw	r3,4(sp)
40001268:	10c5883a 	add	r2,r2,r3
			  img[pitch<<1] = Clip(tmp);
4000126c:	10007f16 	blt	r2,zero,4000146c <rx_iqit_request_2+0x5c0>
40001270:	00c03fc4 	movi	r3,255
40001274:	18804116 	blt	r3,r2,4000137c <rx_iqit_request_2+0x4d0>
40001278:	70800005 	stb	r2,0(r14)
			  tmp = img[pitch*3] + (int)residuals[i+12];
4000127c:	418d883a 	add	r6,r8,r6
40001280:	30800003 	ldbu	r2,0(r6)
40001284:	1109883a 	add	r4,r2,r4
			  img[pitch*3] = Clip(tmp);
40001288:	20007616 	blt	r4,zero,40001464 <rx_iqit_request_2+0x5b8>
4000128c:	00803fc4 	movi	r2,255
40001290:	11002d0e 	bge	r2,r4,40001348 <rx_iqit_request_2+0x49c>
40001294:	1009883a 	mov	r4,r2
40001298:	00002b06 	br	40001348 <rx_iqit_request_2+0x49c>

	int LCbCr = ((iqit_packet->data.flit[0]>>27)&0x3);
	int x     = ((iqit_packet->data.flit[0]>>53)&0x7FF);
	int y     = ((iqit_packet->data.flit[0]>>16)&0x7FF);

	int pitch = LCbCr?f->Cpitch:f->Lpitch;
4000129c:	21c00217 	ldw	r7,8(r4)
	uint8_t *img  = LCbCr?&(C_pixel(f,LCbCr-1,x,y)):&(L_pixel(f,x,y));
400012a0:	21000617 	ldw	r4,24(r4)
400012a4:	19c7383a 	mul	r3,r3,r7
400012a8:	1a47883a 	add	r3,r3,r9
400012ac:	20c7883a 	add	r3,r4,r3
400012b0:	003f1a06 	br	40000f1c <__alt_data_end+0xc0000f1c>
			  img++;
		 }
	}else
	{
		for(int i=0; i < 4; i++){
			  img[0]        = residuals[i];
400012b4:	1a400005 	stb	r9,0(r3)
			  img[pitch]    = residuals[i+4];
400012b8:	da400417 	ldw	r9,16(sp)
400012bc:	39c5883a 	add	r2,r7,r7
400012c0:	19cd883a 	add	r6,r3,r7
			  img[pitch<<1] = residuals[i+8];
			  img[pitch*3]  = residuals[i+12];
400012c4:	dbc00017 	ldw	r15,0(sp)
		 }
	}else
	{
		for(int i=0; i < 4; i++){
			  img[0]        = residuals[i];
			  img[pitch]    = residuals[i+4];
400012c8:	32400005 	stb	r9,0(r6)
400012cc:	11cd883a 	add	r6,r2,r7
			  img[pitch<<1] = residuals[i+8];
400012d0:	1893883a 	add	r9,r3,r2
400012d4:	4a000005 	stb	r8,0(r9)
			  img[pitch*3]  = residuals[i+12];
400012d8:	1991883a 	add	r8,r3,r6
400012dc:	43c00005 	stb	r15,0(r8)
			  img++;
400012e0:	1a000044 	addi	r8,r3,1
			  img++;
		 }
	}else
	{
		for(int i=0; i < 4; i++){
			  img[0]        = residuals[i];
400012e4:	1dc00045 	stb	r23,1(r3)
			  img[pitch]    = residuals[i+4];
400012e8:	41d3883a 	add	r9,r8,r7
400012ec:	4b400005 	stb	r13,0(r9)
			  img[pitch<<1] = residuals[i+8];
400012f0:	db400317 	ldw	r13,12(sp)
400012f4:	4093883a 	add	r9,r8,r2
			  img[pitch*3]  = residuals[i+12];
400012f8:	4191883a 	add	r8,r8,r6
	}else
	{
		for(int i=0; i < 4; i++){
			  img[0]        = residuals[i];
			  img[pitch]    = residuals[i+4];
			  img[pitch<<1] = residuals[i+8];
400012fc:	4b400005 	stb	r13,0(r9)
			  img[pitch*3]  = residuals[i+12];
40001300:	43000005 	stb	r12,0(r8)
	}else
	{
		for(int i=0; i < 4; i++){
			  img[0]        = residuals[i];
			  img[pitch]    = residuals[i+4];
			  img[pitch<<1] = residuals[i+8];
40001304:	dbc00217 	ldw	r15,8(sp)
			  img[pitch*3]  = residuals[i+12];
			  img++;
40001308:	1a000084 	addi	r8,r3,2
			  img++;
		 }
	}else
	{
		for(int i=0; i < 4; i++){
			  img[0]        = residuals[i];
4000130c:	1d800085 	stb	r22,2(r3)
			  img[pitch]    = residuals[i+4];
40001310:	41d3883a 	add	r9,r8,r7
40001314:	4ac00005 	stb	r11,0(r9)
			  img[pitch<<1] = residuals[i+8];
40001318:	4093883a 	add	r9,r8,r2
4000131c:	4bc00005 	stb	r15,0(r9)
			  img[pitch*3]  = residuals[i+12];
40001320:	4191883a 	add	r8,r8,r6
40001324:	42800005 	stb	r10,0(r8)
			  img++;
		 }
	}else
	{
		for(int i=0; i < 4; i++){
			  img[0]        = residuals[i];
40001328:	1d4000c5 	stb	r21,3(r3)
			  img[pitch]    = residuals[i+4];
			  img[pitch<<1] = residuals[i+8];
			  img[pitch*3]  = residuals[i+12];
			  img++;
4000132c:	1a0000c4 	addi	r8,r3,3
	}else
	{
		for(int i=0; i < 4; i++){
			  img[0]        = residuals[i];
			  img[pitch]    = residuals[i+4];
			  img[pitch<<1] = residuals[i+8];
40001330:	d8c00117 	ldw	r3,4(sp)
		 }
	}else
	{
		for(int i=0; i < 4; i++){
			  img[0]        = residuals[i];
			  img[pitch]    = residuals[i+4];
40001334:	41cf883a 	add	r7,r8,r7
40001338:	39400005 	stb	r5,0(r7)
			  img[pitch<<1] = residuals[i+8];
4000133c:	4085883a 	add	r2,r8,r2
40001340:	10c00005 	stb	r3,0(r2)
			  img[pitch*3]  = residuals[i+12];
40001344:	418d883a 	add	r6,r8,r6
40001348:	31000005 	stb	r4,0(r6)
			  img++;
		 }
	}

}
4000134c:	dfc00e17 	ldw	ra,56(sp)
40001350:	df000d17 	ldw	fp,52(sp)
40001354:	ddc00c17 	ldw	r23,48(sp)
40001358:	dd800b17 	ldw	r22,44(sp)
4000135c:	dd400a17 	ldw	r21,40(sp)
40001360:	dd000917 	ldw	r20,36(sp)
40001364:	dcc00817 	ldw	r19,32(sp)
40001368:	dc800717 	ldw	r18,28(sp)
4000136c:	dc400617 	ldw	r17,24(sp)
40001370:	dc000517 	ldw	r16,20(sp)
40001374:	dec00f04 	addi	sp,sp,60
40001378:	f800283a 	ret
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
			  tmp = img[pitch<<1] + (int)residuals[i+8];
			  img[pitch<<1] = Clip(tmp);
4000137c:	1805883a 	mov	r2,r3
40001380:	003fbd06 	br	40001278 <__alt_data_end+0xc0001278>
	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
40001384:	100b883a 	mov	r5,r2
40001388:	003fb306 	br	40001258 <__alt_data_end+0xc0001258>
	}

	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
4000138c:	102b883a 	mov	r21,r2
40001390:	003faa06 	br	4000123c <__alt_data_end+0xc000123c>
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
			  tmp = img[pitch<<1] + (int)residuals[i+8];
			  img[pitch<<1] = Clip(tmp);
			  tmp = img[pitch*3] + (int)residuals[i+12];
			  img[pitch*3] = Clip(tmp);
40001394:	1015883a 	mov	r10,r2
40001398:	003fa106 	br	40001220 <__alt_data_end+0xc0001220>
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
			  tmp = img[pitch<<1] + (int)residuals[i+8];
			  img[pitch<<1] = Clip(tmp);
4000139c:	5805883a 	mov	r2,r11
400013a0:	003f9806 	br	40001204 <__alt_data_end+0xc0001204>
	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
400013a4:	1017883a 	mov	r11,r2
400013a8:	003f8e06 	br	400011e4 <__alt_data_end+0xc00011e4>
	}

	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
400013ac:	102d883a 	mov	r22,r2
400013b0:	003f8506 	br	400011c8 <__alt_data_end+0xc00011c8>
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
			  tmp = img[pitch<<1] + (int)residuals[i+8];
			  img[pitch<<1] = Clip(tmp);
			  tmp = img[pitch*3] + (int)residuals[i+12];
			  img[pitch*3] = Clip(tmp);
400013b4:	1019883a 	mov	r12,r2
400013b8:	003f7c06 	br	400011ac <__alt_data_end+0xc00011ac>
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
			  tmp = img[pitch<<1] + (int)residuals[i+8];
			  img[pitch<<1] = Clip(tmp);
400013bc:	6805883a 	mov	r2,r13
400013c0:	003f7306 	br	40001190 <__alt_data_end+0xc0001190>
	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
400013c4:	101b883a 	mov	r13,r2
400013c8:	003f6906 	br	40001170 <__alt_data_end+0xc0001170>
	}

	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
400013cc:	102f883a 	mov	r23,r2
400013d0:	003f6006 	br	40001154 <__alt_data_end+0xc0001154>
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
			  tmp = img[pitch<<1] + (int)residuals[i+8];
			  img[pitch<<1] = Clip(tmp);
			  tmp = img[pitch*3] + (int)residuals[i+12];
			  img[pitch*3] = Clip(tmp);
400013d4:	4805883a 	mov	r2,r9
400013d8:	003f5706 	br	40001138 <__alt_data_end+0xc0001138>
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
			  tmp = img[pitch<<1] + (int)residuals[i+8];
			  img[pitch<<1] = Clip(tmp);
400013dc:	1011883a 	mov	r8,r2
400013e0:	003f4d06 	br	40001118 <__alt_data_end+0xc0001118>
	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
400013e4:	7805883a 	mov	r2,r15
400013e8:	003f4406 	br	400010fc <__alt_data_end+0xc00010fc>
	}

	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
400013ec:	1013883a 	mov	r9,r2
400013f0:	003f3a06 	br	400010dc <__alt_data_end+0xc00010dc>
400013f4:	0013883a 	mov	r9,zero
400013f8:	003f3806 	br	400010dc <__alt_data_end+0xc00010dc>
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
400013fc:	0005883a 	mov	r2,zero
40001400:	003f3e06 	br	400010fc <__alt_data_end+0xc00010fc>
			  tmp = img[pitch<<1] + (int)residuals[i+8];
			  img[pitch<<1] = Clip(tmp);
			  tmp = img[pitch*3] + (int)residuals[i+12];
			  img[pitch*3] = Clip(tmp);
40001404:	0005883a 	mov	r2,zero
40001408:	003f4b06 	br	40001138 <__alt_data_end+0xc0001138>
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
			  tmp = img[pitch<<1] + (int)residuals[i+8];
			  img[pitch<<1] = Clip(tmp);
4000140c:	0011883a 	mov	r8,zero
40001410:	003f4106 	br	40001118 <__alt_data_end+0xc0001118>
	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
40001414:	001b883a 	mov	r13,zero
40001418:	003f5506 	br	40001170 <__alt_data_end+0xc0001170>
	}

	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
4000141c:	002f883a 	mov	r23,zero
40001420:	003f4c06 	br	40001154 <__alt_data_end+0xc0001154>
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
			  tmp = img[pitch<<1] + (int)residuals[i+8];
			  img[pitch<<1] = Clip(tmp);
			  tmp = img[pitch*3] + (int)residuals[i+12];
			  img[pitch*3] = Clip(tmp);
40001424:	0019883a 	mov	r12,zero
40001428:	003f6006 	br	400011ac <__alt_data_end+0xc00011ac>
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
			  tmp = img[pitch<<1] + (int)residuals[i+8];
			  img[pitch<<1] = Clip(tmp);
4000142c:	0005883a 	mov	r2,zero
40001430:	003f5706 	br	40001190 <__alt_data_end+0xc0001190>
	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
40001434:	0017883a 	mov	r11,zero
40001438:	003f6a06 	br	400011e4 <__alt_data_end+0xc00011e4>
	}

	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
4000143c:	002d883a 	mov	r22,zero
40001440:	003f6106 	br	400011c8 <__alt_data_end+0xc00011c8>
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
			  tmp = img[pitch<<1] + (int)residuals[i+8];
			  img[pitch<<1] = Clip(tmp);
			  tmp = img[pitch*3] + (int)residuals[i+12];
			  img[pitch*3] = Clip(tmp);
40001444:	0015883a 	mov	r10,zero
40001448:	003f7506 	br	40001220 <__alt_data_end+0xc0001220>
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
			  tmp = img[pitch<<1] + (int)residuals[i+8];
			  img[pitch<<1] = Clip(tmp);
4000144c:	0005883a 	mov	r2,zero
40001450:	003f6c06 	br	40001204 <__alt_data_end+0xc0001204>
	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
40001454:	000b883a 	mov	r5,zero
40001458:	003f7f06 	br	40001258 <__alt_data_end+0xc0001258>
	}

	if(clear == 0){
		for(int i=0; i < 4; i++){
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
4000145c:	002b883a 	mov	r21,zero
40001460:	003f7606 	br	4000123c <__alt_data_end+0xc000123c>
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
			  tmp = img[pitch<<1] + (int)residuals[i+8];
			  img[pitch<<1] = Clip(tmp);
			  tmp = img[pitch*3] + (int)residuals[i+12];
			  img[pitch*3] = Clip(tmp);
40001464:	0009883a 	mov	r4,zero
40001468:	003fb706 	br	40001348 <__alt_data_end+0xc0001348>
			  int tmp = img[0] + (int)residuals[i];
			  img[0] = Clip(tmp);
			  tmp = img[pitch   ] + (int)residuals[i+4];
			  img[pitch] = Clip(tmp);
			  tmp = img[pitch<<1] + (int)residuals[i+8];
			  img[pitch<<1] = Clip(tmp);
4000146c:	0005883a 	mov	r2,zero
40001470:	003f8106 	br	40001278 <__alt_data_end+0xc0001278>

40001474 <alloc_frame>:
#include "common.h"
#include "main.h"

frame *alloc_frame(int width, int height) {
40001474:	defff904 	addi	sp,sp,-28
40001478:	dc400115 	stw	r17,4(sp)
  frame *f=calloc(1,sizeof(frame));
  f->Lwidth=f->Lpitch=width;
  f->Lheight=height;
  f->L=malloc(width*height);
4000147c:	2163383a 	mul	r17,r4,r5
#include "common.h"
#include "main.h"

frame *alloc_frame(int width, int height) {
40001480:	dd400515 	stw	r21,20(sp)
40001484:	dcc00315 	stw	r19,12(sp)
40001488:	282b883a 	mov	r21,r5
4000148c:	2027883a 	mov	r19,r4
  frame *f=calloc(1,sizeof(frame));
40001490:	01400904 	movi	r5,36
40001494:	01000044 	movi	r4,1
#include "common.h"
#include "main.h"

frame *alloc_frame(int width, int height) {
40001498:	dfc00615 	stw	ra,24(sp)
4000149c:	dd000415 	stw	r20,16(sp)
400014a0:	dc800215 	stw	r18,8(sp)
400014a4:	dc000015 	stw	r16,0(sp)
  frame *f=calloc(1,sizeof(frame));
  f->Lwidth=f->Lpitch=width;
  f->Lheight=height;
  f->L=malloc(width*height);
  f->Cwidth=f->Cpitch=width>>1;
400014a8:	9829d07a 	srai	r20,r19,1
#include "common.h"
#include "main.h"

frame *alloc_frame(int width, int height) {
  frame *f=calloc(1,sizeof(frame));
400014ac:	000e3b80 	call	4000e3b8 <calloc>
  f->Lwidth=f->Lpitch=width;
  f->Lheight=height;
  f->L=malloc(width*height);
  f->Cwidth=f->Cpitch=width>>1;
  f->Cheight=height>>1;
400014b0:	a825d07a 	srai	r18,r21,1

frame *alloc_frame(int width, int height) {
  frame *f=calloc(1,sizeof(frame));
  f->Lwidth=f->Lpitch=width;
  f->Lheight=height;
  f->L=malloc(width*height);
400014b4:	8809883a 	mov	r4,r17
400014b8:	01400044 	movi	r5,1
#include "common.h"
#include "main.h"

frame *alloc_frame(int width, int height) {
  frame *f=calloc(1,sizeof(frame));
  f->Lwidth=f->Lpitch=width;
400014bc:	14c00215 	stw	r19,8(r2)
400014c0:	14c00015 	stw	r19,0(r2)
  f->Lheight=height;
400014c4:	15400115 	stw	r21,4(r2)
#include "common.h"
#include "main.h"

frame *alloc_frame(int width, int height) {
  frame *f=calloc(1,sizeof(frame));
400014c8:	1021883a 	mov	r16,r2
  f->Lwidth=f->Lpitch=width;
  f->Lheight=height;
  f->L=malloc(width*height);
400014cc:	000e3b80 	call	4000e3b8 <calloc>
400014d0:	80800615 	stw	r2,24(r16)
  f->Cwidth=f->Cpitch=width>>1;
400014d4:	85000515 	stw	r20,20(r16)
400014d8:	85000315 	stw	r20,12(r16)
  f->Cheight=height>>1;
400014dc:	84800415 	stw	r18,16(r16)
  f->C[0]=malloc(width*height/4);
400014e0:	8809883a 	mov	r4,r17
400014e4:	88001c16 	blt	r17,zero,40001558 <alloc_frame+0xe4>
400014e8:	2023d0ba 	srai	r17,r4,2
  f->C[1]=malloc(width*height/4);

  memset(f->L,     0,f->Lheight*f->Lpitch);
  memset(f->C[0],128,f->Cheight*f->Cpitch);
400014ec:	a4a5383a 	mul	r18,r20,r18
  f->Lwidth=f->Lpitch=width;
  f->Lheight=height;
  f->L=malloc(width*height);
  f->Cwidth=f->Cpitch=width>>1;
  f->Cheight=height>>1;
  f->C[0]=malloc(width*height/4);
400014f0:	8809883a 	mov	r4,r17
400014f4:	000e4940 	call	4000e494 <malloc>
  f->C[1]=malloc(width*height/4);
400014f8:	8809883a 	mov	r4,r17
  f->Lwidth=f->Lpitch=width;
  f->Lheight=height;
  f->L=malloc(width*height);
  f->Cwidth=f->Cpitch=width>>1;
  f->Cheight=height>>1;
  f->C[0]=malloc(width*height/4);
400014fc:	1027883a 	mov	r19,r2
40001500:	80800715 	stw	r2,28(r16)
  f->C[1]=malloc(width*height/4);
40001504:	000e4940 	call	4000e494 <malloc>

  memset(f->L,     0,f->Lheight*f->Lpitch);
  memset(f->C[0],128,f->Cheight*f->Cpitch);
40001508:	9809883a 	mov	r4,r19
4000150c:	900d883a 	mov	r6,r18
40001510:	01402004 	movi	r5,128
  f->Lheight=height;
  f->L=malloc(width*height);
  f->Cwidth=f->Cpitch=width>>1;
  f->Cheight=height>>1;
  f->C[0]=malloc(width*height/4);
  f->C[1]=malloc(width*height/4);
40001514:	1023883a 	mov	r17,r2
40001518:	80800815 	stw	r2,32(r16)

  memset(f->L,     0,f->Lheight*f->Lpitch);
  memset(f->C[0],128,f->Cheight*f->Cpitch);
4000151c:	000ee100 	call	4000ee10 <memset>
  memset(f->C[1],128,f->Cheight*f->Cpitch);
40001520:	900d883a 	mov	r6,r18
40001524:	01402004 	movi	r5,128
40001528:	8809883a 	mov	r4,r17
4000152c:	000ee100 	call	4000ee10 <memset>

  return f;
}
40001530:	8005883a 	mov	r2,r16
40001534:	dfc00617 	ldw	ra,24(sp)
40001538:	dd400517 	ldw	r21,20(sp)
4000153c:	dd000417 	ldw	r20,16(sp)
40001540:	dcc00317 	ldw	r19,12(sp)
40001544:	dc800217 	ldw	r18,8(sp)
40001548:	dc400117 	ldw	r17,4(sp)
4000154c:	dc000017 	ldw	r16,0(sp)
40001550:	dec00704 	addi	sp,sp,28
40001554:	f800283a 	ret
  f->Lwidth=f->Lpitch=width;
  f->Lheight=height;
  f->L=malloc(width*height);
  f->Cwidth=f->Cpitch=width>>1;
  f->Cheight=height>>1;
  f->C[0]=malloc(width*height/4);
40001558:	890000c4 	addi	r4,r17,3
4000155c:	003fe206 	br	400014e8 <__alt_data_end+0xc00014e8>

40001560 <free_frame>:

  return f;
}

void free_frame(frame *f) {
  if(!f) return;
40001560:	20001326 	beq	r4,zero,400015b0 <free_frame+0x50>
  memset(f->C[1],128,f->Cheight*f->Cpitch);

  return f;
}

void free_frame(frame *f) {
40001564:	defffe04 	addi	sp,sp,-8
40001568:	dc000015 	stw	r16,0(sp)
4000156c:	2021883a 	mov	r16,r4
  if(!f) return;
  if(f->L) free(f->L);
40001570:	21000617 	ldw	r4,24(r4)
  memset(f->C[1],128,f->Cheight*f->Cpitch);

  return f;
}

void free_frame(frame *f) {
40001574:	dfc00115 	stw	ra,4(sp)
  if(!f) return;
  if(f->L) free(f->L);
40001578:	20000126 	beq	r4,zero,40001580 <free_frame+0x20>
4000157c:	000e4a80 	call	4000e4a8 <free>
  if(f->C[0]) free(f->C[0]);
40001580:	81000717 	ldw	r4,28(r16)
40001584:	20000526 	beq	r4,zero,4000159c <free_frame+0x3c>
40001588:	000e4a80 	call	4000e4a8 <free>
  if(f->C[0]) free(f->C[1]);
4000158c:	80800717 	ldw	r2,28(r16)
40001590:	10000226 	beq	r2,zero,4000159c <free_frame+0x3c>
40001594:	81000817 	ldw	r4,32(r16)
40001598:	000e4a80 	call	4000e4a8 <free>
  free(f);
4000159c:	8009883a 	mov	r4,r16
}
400015a0:	dfc00117 	ldw	ra,4(sp)
400015a4:	dc000017 	ldw	r16,0(sp)
400015a8:	dec00204 	addi	sp,sp,8
void free_frame(frame *f) {
  if(!f) return;
  if(f->L) free(f->L);
  if(f->C[0]) free(f->C[0]);
  if(f->C[0]) free(f->C[1]);
  free(f);
400015ac:	000e4a81 	jmpi	4000e4a8 <free>
400015b0:	f800283a 	ret

400015b4 <send_deblocking_packet>:
#include "deblocking_filter.h"
#include "hw_timer.h"



int send_deblocking_packet(frame *this, int x_inc, int y_inc, int x_pos, int y_pos, uint8_t qp, uint8_t bS, uint8_t LCrCb){
400015b4:	deffb504 	addi	sp,sp,-300
400015b8:	dc004115 	stw	r16,260(sp)

    static int id = 37;
    id = rand()%32 + 97;
400015bc:	04200034 	movhi	r16,32768
#include "deblocking_filter.h"
#include "hw_timer.h"



int send_deblocking_packet(frame *this, int x_inc, int y_inc, int x_pos, int y_pos, uint8_t qp, uint8_t bS, uint8_t LCrCb){
400015c0:	ddc04815 	stw	r23,288(sp)
400015c4:	dd804715 	stw	r22,284(sp)
400015c8:	dd404615 	stw	r21,280(sp)
400015cc:	dd004515 	stw	r20,276(sp)
400015d0:	dcc04415 	stw	r19,272(sp)
400015d4:	dc804315 	stw	r18,268(sp)
400015d8:	dc404215 	stw	r17,264(sp)
400015dc:	dfc04a15 	stw	ra,296(sp)
400015e0:	df004915 	stw	fp,292(sp)
400015e4:	2029883a 	mov	r20,r4
400015e8:	2823883a 	mov	r17,r5
400015ec:	3025883a 	mov	r18,r6
400015f0:	3827883a 	mov	r19,r7
400015f4:	ddc04c17 	ldw	r23,304(sp)
400015f8:	dd804d17 	ldw	r22,308(sp)
400015fc:	dd404e17 	ldw	r21,312(sp)

    static int id = 37;
    id = rand()%32 + 97;
40001600:	840007c4 	addi	r16,r16,31
40001604:	000f0b00 	call	4000f0b0 <rand>
40001608:	1404703a 	and	r2,r2,r16
4000160c:	1000c716 	blt	r2,zero,4000192c <send_deblocking_packet+0x378>
    
    //tables used are from broadway decoder project
    //https://github.com/mbebenita/Broadway
    const uint8_t alpha_table[52] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,6,7,8,9,10,
40001610:	015000b4 	movhi	r5,16386
40001614:	29690c44 	addi	r5,r5,-23503


int send_deblocking_packet(frame *this, int x_inc, int y_inc, int x_pos, int y_pos, uint8_t qp, uint8_t bS, uint8_t LCrCb){

    static int id = 37;
    id = rand()%32 + 97;
40001618:	14001844 	addi	r16,r2,97
    
    //tables used are from broadway decoder project
    //https://github.com/mbebenita/Broadway
    const uint8_t alpha_table[52] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,6,7,8,9,10,
4000161c:	01800d04 	movi	r6,52
40001620:	d9003404 	addi	r4,sp,208


int send_deblocking_packet(frame *this, int x_inc, int y_inc, int x_pos, int y_pos, uint8_t qp, uint8_t bS, uint8_t LCrCb){

    static int id = 37;
    id = rand()%32 + 97;
40001624:	d4200015 	stw	r16,-32768(gp)
    
    //tables used are from broadway decoder project
    //https://github.com/mbebenita/Broadway
    const uint8_t alpha_table[52] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,6,7,8,9,10,
40001628:	000ecc80 	call	4000ecc8 <memcpy>
    12,13,15,17,20,22,25,28,32,36,40,45,50,56,63,71,80,90,101,113,127,144,162,
    182,203,226,255,255};
    
    const uint8_t beta_table[52] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,3,3,3,4,4,
4000162c:	015000b4 	movhi	r5,16386
40001630:	29691944 	addi	r5,r5,-23451
40001634:	01800d04 	movi	r6,52
40001638:	d9002704 	addi	r4,sp,156
4000163c:	000ecc80 	call	4000ecc8 <memcpy>
    4,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18};
    
    const uint8_t tc0_table[52][3] = {
40001640:	015000b4 	movhi	r5,16386
40001644:	29692644 	addi	r5,r5,-23399
40001648:	01802704 	movi	r6,156
4000164c:	d809883a 	mov	r4,sp
40001650:	000ecc80 	call	4000ecc8 <memcpy>
        {4,5,7},{4,5,8},{4,6,9},{5,7,10},{6,8,11},{6,8,13},{7,10,14},{8,11,16},
        {9,12,18},{10,13,20},{11,15,23},{13,17,25}
    };
    
    uint8_t chroma = LCrCb?1:0;
    uint8_t tc0    = tc0_table[qp][bS-1];
40001654:	b9003fcc 	andi	r4,r23,255
    uint8_t alpha  = alpha_table[qp];
40001658:	d9c03404 	addi	r7,sp,208
4000165c:	390d883a 	add	r6,r7,r4
        {4,5,7},{4,5,8},{4,6,9},{5,7,10},{6,8,11},{6,8,13},{7,10,14},{8,11,16},
        {9,12,18},{10,13,20},{11,15,23},{13,17,25}
    };
    
    uint8_t chroma = LCrCb?1:0;
    uint8_t tc0    = tc0_table[qp][bS-1];
40001660:	210b883a 	add	r5,r4,r4
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
40001664:	d9c04b17 	ldw	r7,300(sp)
        {4,5,7},{4,5,8},{4,6,9},{5,7,10},{6,8,11},{6,8,13},{7,10,14},{8,11,16},
        {9,12,18},{10,13,20},{11,15,23},{13,17,25}
    };
    
    uint8_t chroma = LCrCb?1:0;
    uint8_t tc0    = tc0_table[qp][bS-1];
40001668:	290b883a 	add	r5,r5,r4
4000166c:	b0c03fcc 	andi	r3,r22,255
        {1,2,3},{2,2,3},{2,2,4},{2,3,4},{2,3,4},{3,3,5},{3,4,6},{3,4,6},
        {4,5,7},{4,5,8},{4,6,9},{5,7,10},{6,8,11},{6,8,13},{7,10,14},{8,11,16},
        {9,12,18},{10,13,20},{11,15,23},{13,17,25}
    };
    
    uint8_t chroma = LCrCb?1:0;
40001670:	a8803fcc 	andi	r2,r21,255
    uint8_t tc0    = tc0_table[qp][bS-1];
40001674:	d94b883a 	add	r5,sp,r5
    uint8_t alpha  = alpha_table[qp];
    uint8_t beta   = beta_table[qp];
40001678:	dd402704 	addi	r21,sp,156
4000167c:	a909883a 	add	r4,r21,r4
        {4,5,7},{4,5,8},{4,6,9},{5,7,10},{6,8,11},{6,8,13},{7,10,14},{8,11,16},
        {9,12,18},{10,13,20},{11,15,23},{13,17,25}
    };
    
    uint8_t chroma = LCrCb?1:0;
    uint8_t tc0    = tc0_table[qp][bS-1];
40001680:	28cb883a 	add	r5,r5,r3
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
40001684:	3cad883a 	add	r22,r7,r18
        {1,2,3},{2,2,3},{2,2,4},{2,3,4},{2,3,4},{3,3,5},{3,4,6},{3,4,6},
        {4,5,7},{4,5,8},{4,6,9},{5,7,10},{6,8,11},{6,8,13},{7,10,14},{8,11,16},
        {9,12,18},{10,13,20},{11,15,23},{13,17,25}
    };
    
    uint8_t chroma = LCrCb?1:0;
40001688:	103ec03a 	cmpne	ra,r2,zero
    uint8_t tc0    = tc0_table[qp][bS-1];
4000168c:	2abfffc3 	ldbu	r10,-1(r5)
    uint8_t alpha  = alpha_table[qp];
40001690:	32400003 	ldbu	r9,0(r6)
    uint8_t beta   = beta_table[qp];
40001694:	22000003 	ldbu	r8,0(r4)
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
40001698:	95ab883a 	add	r21,r18,r22
    uint8_t tc0    = tc0_table[qp][bS-1];
    uint8_t alpha  = alpha_table[qp];
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
4000169c:	10006326 	beq	r2,zero,4000182c <send_deblocking_packet+0x278>
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
400016a0:	110001c4 	addi	r4,r2,7
400016a4:	2109883a 	add	r4,r4,r4
400016a8:	a1400517 	ldw	r5,20(r20)
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
400016ac:	9485883a 	add	r2,r18,r18
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
400016b0:	2109883a 	add	r4,r4,r4
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
400016b4:	9c5f883a 	add	r15,r19,r17
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
400016b8:	954f883a 	add	r7,r18,r21
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
400016bc:	8c57883a 	add	r11,r17,r17
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
400016c0:	a129883a 	add	r20,r20,r4
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
400016c4:	1085883a 	add	r2,r2,r2
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
400016c8:	8bdd883a 	add	r14,r17,r15
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
400016cc:	3885c83a 	sub	r2,r7,r2
400016d0:	5ac9883a 	add	r4,r11,r11
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
400016d4:	a2c00017 	ldw	r11,0(r20)
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
                    (C_pixel(this,LCrCb,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
400016d8:	14afc83a 	sub	r23,r2,r18
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
400016dc:	8b8d883a 	add	r6,r17,r14
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
400016e0:	2d6b383a 	mul	r21,r5,r21
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
400016e4:	3109c83a 	sub	r4,r6,r4
                    (C_pixel(this,LCrCb,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (C_pixel(this,LCrCb,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
400016e8:	bc99c83a 	sub	r12,r23,r18
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
                    (C_pixel(this,LCrCb,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
400016ec:	245bc83a 	sub	r13,r4,r17
400016f0:	2de9383a 	mul	r20,r5,r23
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
400016f4:	2dad383a 	mul	r22,r5,r22
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
                    (C_pixel(this,LCrCb,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (C_pixel(this,LCrCb,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
400016f8:	2b2f383a 	mul	r23,r5,r12
                    (C_pixel(this,LCrCb,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
400016fc:	64a5c83a 	sub	r18,r12,r18
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
40001700:	5b9d883a 	add	r14,r11,r14
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
                    (C_pixel(this,LCrCb,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (C_pixel(this,LCrCb,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
40001704:	6c59c83a 	sub	r12,r13,r17
                    (C_pixel(this,LCrCb,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
40001708:	9165383a 	mul	r18,r18,r5
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
4000170c:	755d883a 	add	r14,r14,r21
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
40001710:	dd404b17 	ldw	r21,300(sp)
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
40001714:	5bdf883a 	add	r15,r11,r15
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
40001718:	29cf383a 	mul	r7,r5,r7
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
                    (C_pixel(this,LCrCb,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
4000171c:	5b5b883a 	add	r13,r11,r13
                    (C_pixel(this,LCrCb,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
40001720:	5b39883a 	add	fp,r11,r12
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
                    (C_pixel(this,LCrCb,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
40001724:	6d1b883a 	add	r13,r13,r20
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
40001728:	7d9f883a 	add	r15,r15,r22
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
                    (C_pixel(this,LCrCb,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (C_pixel(this,LCrCb,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
4000172c:	e5ef883a 	add	r23,fp,r23
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
40001730:	a969383a 	mul	r20,r21,r5
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
40001734:	598d883a 	add	r6,r11,r6
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
40001738:	2885383a 	mul	r2,r5,r2
                    (C_pixel(this,LCrCb,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (C_pixel(this,LCrCb,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
4000173c:	6463c83a 	sub	r17,r12,r17
40001740:	5ca5883a 	add	r18,r11,r18
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
40001744:	7bc00003 	ldbu	r15,0(r15)
40001748:	73800003 	ldbu	r14,0(r14)
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
4000174c:	6b400003 	ldbu	r13,0(r13)
40001750:	bd400003 	ldbu	r21,0(r23)
                    (C_pixel(this,LCrCb,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (C_pixel(this,LCrCb,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
40001754:	9465883a 	add	r18,r18,r17
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
40001758:	31cf883a 	add	r7,r6,r7
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
4000175c:	5ce7883a 	add	r19,r11,r19
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
40001760:	94800003 	ldbu	r18,0(r18)
40001764:	5917883a 	add	r11,r11,r4
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
40001768:	39800003 	ldbu	r6,0(r7)
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
4000176c:	5885883a 	add	r2,r11,r2
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
40001770:	781e923a 	slli	r15,r15,8
40001774:	701c943a 	slli	r14,r14,16
40001778:	9d27883a 	add	r19,r19,r20
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
4000177c:	681a923a 	slli	r13,r13,8
40001780:	a82a943a 	slli	r21,r21,16
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
40001784:	9c400003 	ldbu	r17,0(r19)
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
40001788:	11400003 	ldbu	r5,0(r2)
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
4000178c:	300c963a 	slli	r6,r6,24
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
40001790:	9004963a 	slli	r2,r18,24
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
40001794:	7b9cb03a 	or	r14,r15,r14
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
40001798:	6d48b03a 	or	r4,r13,r21
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
4000179c:	745cb03a 	or	r14,r14,r17
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
400017a0:	2164b03a 	or	r18,r4,r5
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
    }else{
    	samples[0] = (C_pixel(this,LCrCb,x_pos,y_pos))                     |\
400017a4:	71a2b03a 	or	r17,r14,r6
                    (C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc))         |\
400017a8:	90a4b03a 	or	r18,r18,r2

    uint32_t parameters[2];
    parameters[0] = (alpha<<24)  | (beta<<16) | (bS<<8)   | tc0;
    parameters[1] = (chroma<<16) | (id <<8);
    
    send_flit(DB_0_ADDR, parameters[0], parameters[1], 0);
400017ac:	180a923a 	slli	r5,r3,8
400017b0:	4812963a 	slli	r9,r9,24
400017b4:	42003fcc 	andi	r8,r8,255
400017b8:	f80c943a 	slli	r6,ra,16
400017bc:	52803fcc 	andi	r10,r10,255
400017c0:	4010943a 	slli	r8,r8,16
400017c4:	8020923a 	slli	r16,r16,8
400017c8:	2a8ab03a 	or	r5,r5,r10
400017cc:	2a4ab03a 	or	r5,r5,r9
400017d0:	2a0ab03a 	or	r5,r5,r8
400017d4:	340cb03a 	or	r6,r6,r16
400017d8:	000f883a 	mov	r7,zero
400017dc:	01000084 	movi	r4,2
400017e0:	000c2000 	call	4000c200 <send_flit>
    send_flit(DB_0_ADDR, samples[0], samples[1], 1);
400017e4:	01c00044 	movi	r7,1
400017e8:	900d883a 	mov	r6,r18
400017ec:	880b883a 	mov	r5,r17
400017f0:	01000084 	movi	r4,2
400017f4:	000c2000 	call	4000c200 <send_flit>



    return id;
}
400017f8:	d0a00017 	ldw	r2,-32768(gp)
400017fc:	dfc04a17 	ldw	ra,296(sp)
40001800:	df004917 	ldw	fp,292(sp)
40001804:	ddc04817 	ldw	r23,288(sp)
40001808:	dd804717 	ldw	r22,284(sp)
4000180c:	dd404617 	ldw	r21,280(sp)
40001810:	dd004517 	ldw	r20,276(sp)
40001814:	dcc04417 	ldw	r19,272(sp)
40001818:	dc804317 	ldw	r18,268(sp)
4000181c:	dc404217 	ldw	r17,264(sp)
40001820:	dc004117 	ldw	r16,260(sp)
40001824:	dec04b04 	addi	sp,sp,300
40001828:	f800283a 	ret
    uint8_t alpha  = alpha_table[qp];
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
4000182c:	a1400217 	ldw	r5,8(r20)
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
40001830:	9485883a 	add	r2,r18,r18
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
40001834:	9c5d883a 	add	r14,r19,r17
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
40001838:	954f883a 	add	r7,r18,r21
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
4000183c:	1085883a 	add	r2,r2,r2
    uint8_t alpha  = alpha_table[qp];
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
40001840:	a1800617 	ldw	r6,24(r20)
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
40001844:	8b9b883a 	add	r13,r17,r14
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
40001848:	3885c83a 	sub	r2,r7,r2
4000184c:	8c49883a 	add	r4,r17,r17
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
40001850:	14afc83a 	sub	r23,r2,r18
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
40001854:	8b5f883a 	add	r15,r17,r13
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
40001858:	2d6b383a 	mul	r21,r5,r21
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
4000185c:	2109883a 	add	r4,r4,r4
40001860:	7909c83a 	sub	r4,r15,r4
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
40001864:	bc97c83a 	sub	r11,r23,r18
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
40001868:	2459c83a 	sub	r12,r4,r17
4000186c:	2de9383a 	mul	r20,r5,r23
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
40001870:	2dad383a 	mul	r22,r5,r22
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
40001874:	2aef383a 	mul	r23,r5,r11
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
40001878:	5ca5c83a 	sub	r18,r11,r18
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
4000187c:	335b883a 	add	r13,r6,r13
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
40001880:	6457c83a 	sub	r11,r12,r17
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
40001884:	9165383a 	mul	r18,r18,r5
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
40001888:	6d5b883a 	add	r13,r13,r21
    uint8_t alpha  = alpha_table[qp];
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
4000188c:	dd404b17 	ldw	r21,300(sp)
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
40001890:	29cf383a 	mul	r7,r5,r7
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
40001894:	32f9883a 	add	fp,r6,r11
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
40001898:	339d883a 	add	r14,r6,r14
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
4000189c:	3319883a 	add	r12,r6,r12
400018a0:	6519883a 	add	r12,r12,r20
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
400018a4:	759d883a 	add	r14,r14,r22
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
400018a8:	e5ef883a 	add	r23,fp,r23
    uint8_t alpha  = alpha_table[qp];
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
400018ac:	2d69383a 	mul	r20,r5,r21
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
400018b0:	5c63c83a 	sub	r17,r11,r17
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
400018b4:	33df883a 	add	r15,r6,r15
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
400018b8:	65400003 	ldbu	r21,0(r12)
400018bc:	2885383a 	mul	r2,r5,r2
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
400018c0:	34a5883a 	add	r18,r6,r18
    uint8_t alpha  = alpha_table[qp];
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
400018c4:	73800003 	ldbu	r14,0(r14)
400018c8:	6b400003 	ldbu	r13,0(r13)
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
400018cc:	bb000003 	ldbu	r12,0(r23)
                    (L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc))<<8  |\
                    (L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc))<<16 |\
                    (L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc))<<24;
400018d0:	9465883a 	add	r18,r18,r17
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
400018d4:	79df883a 	add	r15,r15,r7
    uint8_t alpha  = alpha_table[qp];
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
400018d8:	34e7883a 	add	r19,r6,r19
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
400018dc:	94800003 	ldbu	r18,0(r18)
400018e0:	310d883a 	add	r6,r6,r4
    uint8_t alpha  = alpha_table[qp];
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
400018e4:	79c00003 	ldbu	r7,0(r15)
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
400018e8:	3085883a 	add	r2,r6,r2
    uint8_t alpha  = alpha_table[qp];
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
400018ec:	700a923a 	slli	r5,r14,8
400018f0:	681a943a 	slli	r13,r13,16
400018f4:	9d29883a 	add	r20,r19,r20
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
400018f8:	a82a923a 	slli	r21,r21,8
400018fc:	6016943a 	slli	r11,r12,16
40001900:	11800003 	ldbu	r6,0(r2)
    uint8_t alpha  = alpha_table[qp];
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
40001904:	a4400003 	ldbu	r17,0(r20)
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
40001908:	9004963a 	slli	r2,r18,24
    uint8_t alpha  = alpha_table[qp];
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
4000190c:	380e963a 	slli	r7,r7,24
40001910:	2b4ab03a 	or	r5,r5,r13
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
40001914:	aac8b03a 	or	r4,r21,r11
    uint8_t alpha  = alpha_table[qp];
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
40001918:	2c62b03a 	or	r17,r5,r17
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
4000191c:	21a4b03a 	or	r18,r4,r6
    uint8_t alpha  = alpha_table[qp];
    uint8_t beta   = beta_table[qp];
    
    uint32_t samples[2];
    if(LCrCb == 0){
    	samples[0] = (L_pixel(this,x_pos,y_pos))                     |\
40001920:	89e2b03a 	or	r17,r17,r7
                    (L_pixel(this,x_pos+x_inc,y_pos+y_inc))<<8      |\
                    (L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc))<<16 |\
                    (L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc))<<24;
    	samples[1] = (L_pixel(this,x_pos-x_inc,y_pos-y_inc))         |\
40001924:	90a4b03a 	or	r18,r18,r2
40001928:	003fa006 	br	400017ac <__alt_data_end+0xc00017ac>


int send_deblocking_packet(frame *this, int x_inc, int y_inc, int x_pos, int y_pos, uint8_t qp, uint8_t bS, uint8_t LCrCb){

    static int id = 37;
    id = rand()%32 + 97;
4000192c:	10bfffc4 	addi	r2,r2,-1
40001930:	00fff804 	movi	r3,-32
40001934:	10c4b03a 	or	r2,r2,r3
40001938:	10800044 	addi	r2,r2,1
4000193c:	003f3406 	br	40001610 <__alt_data_end+0xc0001610>

40001940 <rx_deblocking_packet>:

    return id;
}

void rx_deblocking_packet(int id, frame *this, int x_inc, int y_inc, int x_pos, int y_pos, int LCrCb)
{
40001940:	defff504 	addi	sp,sp,-44
40001944:	dd800715 	stw	r22,28(sp)
40001948:	382d883a 	mov	r22,r7
4000194c:	d9c00c17 	ldw	r7,48(sp)
40001950:	ddc00815 	stw	r23,32(sp)
40001954:	dd400615 	stw	r21,24(sp)
40001958:	dd000515 	stw	r20,20(sp)
4000195c:	dcc00415 	stw	r19,16(sp)
40001960:	dc800315 	stw	r18,12(sp)
40001964:	dc400215 	stw	r17,8(sp)
40001968:	dc000115 	stw	r16,4(sp)
4000196c:	dfc00a15 	stw	ra,40(sp)
40001970:	df000915 	stw	fp,36(sp)
40001974:	2029883a 	mov	r20,r4
40001978:	2827883a 	mov	r19,r5
4000197c:	302b883a 	mov	r21,r6
40001980:	ddc00b17 	ldw	r23,44(sp)
40001984:	d9c00015 	stw	r7,0(sp)
40001988:	dc800d17 	ldw	r18,52(sp)
    uint64_t start = read_timer();
4000198c:	0001c800 	call	40001c80 <read_timer>
40001990:	1021883a 	mov	r16,r2
40001994:	1823883a 	mov	r17,r3
	packet *db_packet = (void *)0;
	while(db_packet == (void *)0){
		db_packet = get_packet_pointer_by_id(id);
40001998:	a009883a 	mov	r4,r20
4000199c:	000c5340 	call	4000c534 <get_packet_pointer_by_id>
400019a0:	1039883a 	mov	fp,r2
		if(db_packet == (void *)0){
400019a4:	10006526 	beq	r2,zero,40001b3c <rx_deblocking_packet+0x1fc>
			buffers_loop(1);
		}
	}
	add_time(HW_DB_COUNTS, read_timer() - start);
400019a8:	0001c800 	call	40001c80 <read_timer>
400019ac:	140bc83a 	sub	r5,r2,r16
400019b0:	114d803a 	cmpltu	r6,r2,r5
400019b4:	1c47c83a 	sub	r3,r3,r17
400019b8:	198dc83a 	sub	r6,r3,r6
400019bc:	010001c4 	movi	r4,7
400019c0:	0001ca40 	call	40001ca4 <add_time>
	if(LCrCb == 0){
400019c4:	90006026 	beq	r18,zero,40001b48 <rx_deblocking_packet+0x208>
        L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc) = (uint8_t)((db_packet->data.flit[1]&0x00000000FF000000ull)>>24);
        L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc) = (uint8_t)((db_packet->data.flit[1]&0x0000000000FF0000ull)>>16);
        L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc) = (uint8_t)((db_packet->data.flit[1]&0x000000000000FF00ull)>>8 );
        L_pixel(this,x_pos-x_inc,y_pos-y_inc)     = (uint8_t)((db_packet->data.flit[1]&0x00000000000000FFull)>>0 );
    }else{
        C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc) = (uint8_t)((db_packet->data.flit[1]&0xFF00000000000000ull)>>56);
400019c8:	d9c00017 	ldw	r7,0(sp)
400019cc:	94a5883a 	add	r18,r18,r18
400019d0:	99400517 	ldw	r5,20(r19)
400019d4:	b587883a 	add	r3,r22,r22
400019d8:	94a5883a 	add	r18,r18,r18
400019dc:	9c89883a 	add	r4,r19,r18
400019e0:	1d87883a 	add	r3,r3,r22
400019e4:	22000717 	ldw	r8,28(r4)
400019e8:	19c7883a 	add	r3,r3,r7
400019ec:	ad45883a 	add	r2,r21,r21
400019f0:	194d383a 	mul	r6,r3,r5
400019f4:	1545883a 	add	r2,r2,r21
400019f8:	e24003c3 	ldbu	r9,15(fp)
400019fc:	15c5883a 	add	r2,r2,r23
40001a00:	408b883a 	add	r5,r8,r2
40001a04:	298b883a 	add	r5,r5,r6
40001a08:	2a400005 	stb	r9,0(r5)
        C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc) = (uint8_t)((db_packet->data.flit[1]&0x00FF000000000000ull)>>48);
40001a0c:	99400517 	ldw	r5,20(r19)
40001a10:	22000717 	ldw	r8,28(r4)
40001a14:	1d87c83a 	sub	r3,r3,r22
40001a18:	194d383a 	mul	r6,r3,r5
40001a1c:	e2400383 	ldbu	r9,14(fp)
40001a20:	1545c83a 	sub	r2,r2,r21
40001a24:	408b883a 	add	r5,r8,r2
40001a28:	298b883a 	add	r5,r5,r6
40001a2c:	2a400005 	stb	r9,0(r5)
        C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc)     = (uint8_t)((db_packet->data.flit[1]&0x0000FF0000000000ull)>>40);
40001a30:	99400517 	ldw	r5,20(r19)
40001a34:	22000717 	ldw	r8,28(r4)
40001a38:	1d87c83a 	sub	r3,r3,r22
40001a3c:	194d383a 	mul	r6,r3,r5
40001a40:	e2400343 	ldbu	r9,13(fp)
40001a44:	1545c83a 	sub	r2,r2,r21
40001a48:	408b883a 	add	r5,r8,r2
40001a4c:	298b883a 	add	r5,r5,r6
40001a50:	2a400005 	stb	r9,0(r5)
        C_pixel(this,LCrCb,x_pos,y_pos)                 = (uint8_t)((db_packet->data.flit[1]&0x000000FF00000000ull)>>32);
40001a54:	99400517 	ldw	r5,20(r19)
40001a58:	21800717 	ldw	r6,28(r4)
40001a5c:	e2000303 	ldbu	r8,12(fp)
40001a60:	394b383a 	mul	r5,r7,r5
40001a64:	35ef883a 	add	r23,r6,r23
        C_pixel(this,LCrCb,x_pos-4*x_inc,y_pos-4*y_inc) = (uint8_t)((db_packet->data.flit[1]&0x00000000FF000000ull)>>24);
40001a68:	b1800164 	muli	r6,r22,5
        L_pixel(this,x_pos-x_inc,y_pos-y_inc)     = (uint8_t)((db_packet->data.flit[1]&0x00000000000000FFull)>>0 );
    }else{
        C_pixel(this,LCrCb,x_pos+3*x_inc,y_pos+3*y_inc) = (uint8_t)((db_packet->data.flit[1]&0xFF00000000000000ull)>>56);
        C_pixel(this,LCrCb,x_pos+2*x_inc,y_pos+2*y_inc) = (uint8_t)((db_packet->data.flit[1]&0x00FF000000000000ull)>>48);
        C_pixel(this,LCrCb,x_pos+x_inc,y_pos+y_inc)     = (uint8_t)((db_packet->data.flit[1]&0x0000FF0000000000ull)>>40);
        C_pixel(this,LCrCb,x_pos,y_pos)                 = (uint8_t)((db_packet->data.flit[1]&0x000000FF00000000ull)>>32);
40001a6c:	b96f883a 	add	r23,r23,r5
40001a70:	ba000005 	stb	r8,0(r23)
        C_pixel(this,LCrCb,x_pos-4*x_inc,y_pos-4*y_inc) = (uint8_t)((db_packet->data.flit[1]&0x00000000FF000000ull)>>24);
40001a74:	99400517 	ldw	r5,20(r19)
40001a78:	aa800164 	muli	r10,r21,5
40001a7c:	22000717 	ldw	r8,28(r4)
40001a80:	1987c83a 	sub	r3,r3,r6
40001a84:	194d383a 	mul	r6,r3,r5
40001a88:	e24002c3 	ldbu	r9,11(fp)
40001a8c:	1285c83a 	sub	r2,r2,r10
40001a90:	408b883a 	add	r5,r8,r2
40001a94:	298b883a 	add	r5,r5,r6
40001a98:	2a400005 	stb	r9,0(r5)
        C_pixel(this,LCrCb,x_pos-3*x_inc,y_pos-3*y_inc) = (uint8_t)((db_packet->data.flit[1]&0x0000000000FF0000ull)>>16);
40001a9c:	99400517 	ldw	r5,20(r19)
40001aa0:	22000717 	ldw	r8,28(r4)
40001aa4:	b0c7883a 	add	r3,r22,r3
40001aa8:	194d383a 	mul	r6,r3,r5
40001aac:	e2400283 	ldbu	r9,10(fp)
40001ab0:	a885883a 	add	r2,r21,r2
40001ab4:	408b883a 	add	r5,r8,r2
40001ab8:	298b883a 	add	r5,r5,r6
40001abc:	2a400005 	stb	r9,0(r5)
        C_pixel(this,LCrCb,x_pos-2*x_inc,y_pos-2*y_inc) = (uint8_t)((db_packet->data.flit[1]&0x000000000000FF00ull)>>8 );
40001ac0:	99400517 	ldw	r5,20(r19)
40001ac4:	22000717 	ldw	r8,28(r4)
40001ac8:	b0c7883a 	add	r3,r22,r3
40001acc:	194d383a 	mul	r6,r3,r5
40001ad0:	a885883a 	add	r2,r21,r2
40001ad4:	e2400243 	ldbu	r9,9(fp)
40001ad8:	408b883a 	add	r5,r8,r2
40001adc:	298b883a 	add	r5,r5,r6
40001ae0:	2a400005 	stb	r9,0(r5)
        C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc)     = (uint8_t)((db_packet->data.flit[1]&0x00000000000000FFull)>>0 );
40001ae4:	99400517 	ldw	r5,20(r19)
40001ae8:	21000717 	ldw	r4,28(r4)
40001aec:	b0ed883a 	add	r22,r22,r3
40001af0:	b16d383a 	mul	r22,r22,r5
40001af4:	2085883a 	add	r2,r4,r2
40001af8:	e0c00217 	ldw	r3,8(fp)
40001afc:	156b883a 	add	r21,r2,r21
40001b00:	adab883a 	add	r21,r21,r22
40001b04:	a8c00005 	stb	r3,0(r21)
    }
	remove_packet_with_id(id);
40001b08:	a009883a 	mov	r4,r20
}
40001b0c:	dfc00a17 	ldw	ra,40(sp)
40001b10:	df000917 	ldw	fp,36(sp)
40001b14:	ddc00817 	ldw	r23,32(sp)
40001b18:	dd800717 	ldw	r22,28(sp)
40001b1c:	dd400617 	ldw	r21,24(sp)
40001b20:	dd000517 	ldw	r20,20(sp)
40001b24:	dcc00417 	ldw	r19,16(sp)
40001b28:	dc800317 	ldw	r18,12(sp)
40001b2c:	dc400217 	ldw	r17,8(sp)
40001b30:	dc000117 	ldw	r16,4(sp)
40001b34:	dec00b04 	addi	sp,sp,44
        C_pixel(this,LCrCb,x_pos-4*x_inc,y_pos-4*y_inc) = (uint8_t)((db_packet->data.flit[1]&0x00000000FF000000ull)>>24);
        C_pixel(this,LCrCb,x_pos-3*x_inc,y_pos-3*y_inc) = (uint8_t)((db_packet->data.flit[1]&0x0000000000FF0000ull)>>16);
        C_pixel(this,LCrCb,x_pos-2*x_inc,y_pos-2*y_inc) = (uint8_t)((db_packet->data.flit[1]&0x000000000000FF00ull)>>8 );
        C_pixel(this,LCrCb,x_pos-x_inc,y_pos-y_inc)     = (uint8_t)((db_packet->data.flit[1]&0x00000000000000FFull)>>0 );
    }
	remove_packet_with_id(id);
40001b38:	000c5c01 	jmpi	4000c5c0 <remove_packet_with_id>
    uint64_t start = read_timer();
	packet *db_packet = (void *)0;
	while(db_packet == (void *)0){
		db_packet = get_packet_pointer_by_id(id);
		if(db_packet == (void *)0){
			buffers_loop(1);
40001b3c:	01000044 	movi	r4,1
40001b40:	000c3500 	call	4000c350 <buffers_loop>
40001b44:	003f9406 	br	40001998 <__alt_data_end+0xc0001998>
		}
	}
	add_time(HW_DB_COUNTS, read_timer() - start);
	if(LCrCb == 0){
        L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc) = (uint8_t)((db_packet->data.flit[1]&0xFF00000000000000ull)>>56);
40001b48:	d9c00017 	ldw	r7,0(sp)
40001b4c:	99000217 	ldw	r4,8(r19)
40001b50:	b587883a 	add	r3,r22,r22
40001b54:	1d87883a 	add	r3,r3,r22
40001b58:	99800617 	ldw	r6,24(r19)
40001b5c:	19c7883a 	add	r3,r3,r7
40001b60:	ad45883a 	add	r2,r21,r21
40001b64:	190b383a 	mul	r5,r3,r4
40001b68:	1545883a 	add	r2,r2,r21
40001b6c:	e20003c3 	ldbu	r8,15(fp)
40001b70:	15c5883a 	add	r2,r2,r23
40001b74:	3089883a 	add	r4,r6,r2
40001b78:	2149883a 	add	r4,r4,r5
40001b7c:	22000005 	stb	r8,0(r4)
        L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc) = (uint8_t)((db_packet->data.flit[1]&0x00FF000000000000ull)>>48);
40001b80:	99000217 	ldw	r4,8(r19)
40001b84:	99800617 	ldw	r6,24(r19)
40001b88:	1d87c83a 	sub	r3,r3,r22
40001b8c:	190b383a 	mul	r5,r3,r4
40001b90:	e2000383 	ldbu	r8,14(fp)
40001b94:	1545c83a 	sub	r2,r2,r21
40001b98:	3089883a 	add	r4,r6,r2
40001b9c:	2149883a 	add	r4,r4,r5
40001ba0:	22000005 	stb	r8,0(r4)
        L_pixel(this,x_pos+x_inc,y_pos+y_inc)     = (uint8_t)((db_packet->data.flit[1]&0x0000FF0000000000ull)>>40);
40001ba4:	99000217 	ldw	r4,8(r19)
40001ba8:	99800617 	ldw	r6,24(r19)
40001bac:	1d87c83a 	sub	r3,r3,r22
40001bb0:	190b383a 	mul	r5,r3,r4
40001bb4:	e2000343 	ldbu	r8,13(fp)
40001bb8:	1545c83a 	sub	r2,r2,r21
40001bbc:	3089883a 	add	r4,r6,r2
40001bc0:	2149883a 	add	r4,r4,r5
40001bc4:	22000005 	stb	r8,0(r4)
        L_pixel(this,x_pos,y_pos)                 = (uint8_t)((db_packet->data.flit[1]&0x000000FF00000000ull)>>32);
40001bc8:	99000217 	ldw	r4,8(r19)
40001bcc:	99400617 	ldw	r5,24(r19)
40001bd0:	e1800303 	ldbu	r6,12(fp)
40001bd4:	3909383a 	mul	r4,r7,r4
40001bd8:	2def883a 	add	r23,r5,r23
        L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc) = (uint8_t)((db_packet->data.flit[1]&0x00000000FF000000ull)>>24);
40001bdc:	b1400164 	muli	r5,r22,5
	add_time(HW_DB_COUNTS, read_timer() - start);
	if(LCrCb == 0){
        L_pixel(this,x_pos+3*x_inc,y_pos+3*y_inc) = (uint8_t)((db_packet->data.flit[1]&0xFF00000000000000ull)>>56);
        L_pixel(this,x_pos+2*x_inc,y_pos+2*y_inc) = (uint8_t)((db_packet->data.flit[1]&0x00FF000000000000ull)>>48);
        L_pixel(this,x_pos+x_inc,y_pos+y_inc)     = (uint8_t)((db_packet->data.flit[1]&0x0000FF0000000000ull)>>40);
        L_pixel(this,x_pos,y_pos)                 = (uint8_t)((db_packet->data.flit[1]&0x000000FF00000000ull)>>32);
40001be0:	b92f883a 	add	r23,r23,r4
40001be4:	b9800005 	stb	r6,0(r23)
        L_pixel(this,x_pos-4*x_inc,y_pos-4*y_inc) = (uint8_t)((db_packet->data.flit[1]&0x00000000FF000000ull)>>24);
40001be8:	99000217 	ldw	r4,8(r19)
40001bec:	aa400164 	muli	r9,r21,5
40001bf0:	99800617 	ldw	r6,24(r19)
40001bf4:	1947c83a 	sub	r3,r3,r5
40001bf8:	190b383a 	mul	r5,r3,r4
40001bfc:	e20002c3 	ldbu	r8,11(fp)
40001c00:	1245c83a 	sub	r2,r2,r9
40001c04:	3089883a 	add	r4,r6,r2
40001c08:	2149883a 	add	r4,r4,r5
40001c0c:	22000005 	stb	r8,0(r4)
        L_pixel(this,x_pos-3*x_inc,y_pos-3*y_inc) = (uint8_t)((db_packet->data.flit[1]&0x0000000000FF0000ull)>>16);
40001c10:	99000217 	ldw	r4,8(r19)
40001c14:	99800617 	ldw	r6,24(r19)
40001c18:	b0c7883a 	add	r3,r22,r3
40001c1c:	190b383a 	mul	r5,r3,r4
40001c20:	e2000283 	ldbu	r8,10(fp)
40001c24:	a885883a 	add	r2,r21,r2
40001c28:	3089883a 	add	r4,r6,r2
40001c2c:	2149883a 	add	r4,r4,r5
40001c30:	22000005 	stb	r8,0(r4)
        L_pixel(this,x_pos-2*x_inc,y_pos-2*y_inc) = (uint8_t)((db_packet->data.flit[1]&0x000000000000FF00ull)>>8 );
40001c34:	99000217 	ldw	r4,8(r19)
40001c38:	99800617 	ldw	r6,24(r19)
40001c3c:	b0c7883a 	add	r3,r22,r3
40001c40:	190b383a 	mul	r5,r3,r4
40001c44:	a885883a 	add	r2,r21,r2
40001c48:	e2000243 	ldbu	r8,9(fp)
40001c4c:	3089883a 	add	r4,r6,r2
40001c50:	2149883a 	add	r4,r4,r5
40001c54:	22000005 	stb	r8,0(r4)
        L_pixel(this,x_pos-x_inc,y_pos-y_inc)     = (uint8_t)((db_packet->data.flit[1]&0x00000000000000FFull)>>0 );
40001c58:	99000217 	ldw	r4,8(r19)
40001c5c:	99400617 	ldw	r5,24(r19)
40001c60:	b0ed883a 	add	r22,r22,r3
40001c64:	b12d383a 	mul	r22,r22,r4
40001c68:	2885883a 	add	r2,r5,r2
40001c6c:	e0c00217 	ldw	r3,8(fp)
40001c70:	156b883a 	add	r21,r2,r21
40001c74:	adab883a 	add	r21,r21,r22
40001c78:	a8c00005 	stb	r3,0(r21)
40001c7c:	003fa206 	br	40001b08 <__alt_data_end+0xc0001b08>

40001c80 <read_timer>:
uint64_t read_timer(){

	static uint32_t last_read = 0;
	static uint32_t overflow_count = 0;

	uint32_t timer_read = RD_PIO(TIMER_REG);
40001c80:	00841404 	movi	r2,4176
40001c84:	10800037 	ldwio	r2,0(r2)
	int is_overflow = (last_read > timer_read)?1:0;
	overflow_count += is_overflow;
40001c88:	d0e2c517 	ldw	r3,-29932(gp)
40001c8c:	d122c417 	ldw	r4,-29936(gp)

	last_read = timer_read;
40001c90:	d0a2c515 	stw	r2,-29932(gp)
	static uint32_t last_read = 0;
	static uint32_t overflow_count = 0;

	uint32_t timer_read = RD_PIO(TIMER_REG);
	int is_overflow = (last_read > timer_read)?1:0;
	overflow_count += is_overflow;
40001c94:	10c7803a 	cmpltu	r3,r2,r3
40001c98:	1907883a 	add	r3,r3,r4
40001c9c:	d0e2c415 	stw	r3,-29936(gp)

	last_read = timer_read;

	return (uint64_t)timer_read + (((uint64_t)overflow_count)<<32);
}
40001ca0:	f800283a 	ret

40001ca4 <add_time>:

void add_time(int counter_select, uint64_t counts){
	counters[counter_select] += counts;
40001ca4:	200890fa 	slli	r4,r4,3
40001ca8:	009000b4 	movhi	r2,16386
40001cac:	10b01704 	addi	r2,r2,-16292
40001cb0:	1109883a 	add	r4,r2,r4
40001cb4:	20c00017 	ldw	r3,0(r4)
40001cb8:	20800117 	ldw	r2,4(r4)
40001cbc:	28c7883a 	add	r3,r5,r3
40001cc0:	194b803a 	cmpltu	r5,r3,r5
40001cc4:	308d883a 	add	r6,r6,r2
40001cc8:	298d883a 	add	r6,r5,r6
40001ccc:	20c00015 	stw	r3,0(r4)
40001cd0:	21800115 	stw	r6,4(r4)
40001cd4:	f800283a 	ret

40001cd8 <print_counts>:
}

void print_counts(){
40001cd8:	defffe04 	addi	sp,sp,-8
40001cdc:	dc000015 	stw	r16,0(sp)
	printf("TOTAL_DECODE_COUNTS    %f\n", 1.0 * counters[TOTAL_DECODE_COUNTS] / 50000000.0);
40001ce0:	041000b4 	movhi	r16,16386
40001ce4:	84301704 	addi	r16,r16,-16292
40001ce8:	81000017 	ldw	r4,0(r16)
40001cec:	81400117 	ldw	r5,4(r16)

void add_time(int counter_select, uint64_t counts){
	counters[counter_select] += counts;
}

void print_counts(){
40001cf0:	dfc00115 	stw	ra,4(sp)
	printf("TOTAL_DECODE_COUNTS    %f\n", 1.0 * counters[TOTAL_DECODE_COUNTS] / 50000000.0);
40001cf4:	000c7dc0 	call	4000c7dc <__floatundidf>
40001cf8:	01d06234 	movhi	r7,16776
40001cfc:	39f5e104 	addi	r7,r7,-10364
40001d00:	1009883a 	mov	r4,r2
40001d04:	000d883a 	mov	r6,zero
40001d08:	180b883a 	mov	r5,r3
40001d0c:	000d2ac0 	call	4000d2ac <__divdf3>
40001d10:	011000b4 	movhi	r4,16386
40001d14:	180d883a 	mov	r6,r3
40001d18:	100b883a 	mov	r5,r2
40001d1c:	21294e04 	addi	r4,r4,-23240
40001d20:	000ef680 	call	4000ef68 <printf>
	printf("TOTAL_INTRA_COUNTS     %f\n", 1.0 * counters[TOTAL_INTRA_COUNTS ] / 50000000.0);
40001d24:	81000217 	ldw	r4,8(r16)
40001d28:	81400317 	ldw	r5,12(r16)
40001d2c:	000c7dc0 	call	4000c7dc <__floatundidf>
40001d30:	01d06234 	movhi	r7,16776
40001d34:	39f5e104 	addi	r7,r7,-10364
40001d38:	1009883a 	mov	r4,r2
40001d3c:	000d883a 	mov	r6,zero
40001d40:	180b883a 	mov	r5,r3
40001d44:	000d2ac0 	call	4000d2ac <__divdf3>
40001d48:	011000b4 	movhi	r4,16386
40001d4c:	180d883a 	mov	r6,r3
40001d50:	100b883a 	mov	r5,r2
40001d54:	21295504 	addi	r4,r4,-23212
40001d58:	000ef680 	call	4000ef68 <printf>
	printf("TOTAL_INTER_COUNTS     %f\n", 1.0 * counters[TOTAL_INTER_COUNTS ] / 50000000.0);
40001d5c:	81000417 	ldw	r4,16(r16)
40001d60:	81400517 	ldw	r5,20(r16)
40001d64:	000c7dc0 	call	4000c7dc <__floatundidf>
40001d68:	01d06234 	movhi	r7,16776
40001d6c:	39f5e104 	addi	r7,r7,-10364
40001d70:	1009883a 	mov	r4,r2
40001d74:	000d883a 	mov	r6,zero
40001d78:	180b883a 	mov	r5,r3
40001d7c:	000d2ac0 	call	4000d2ac <__divdf3>
40001d80:	011000b4 	movhi	r4,16386
40001d84:	180d883a 	mov	r6,r3
40001d88:	100b883a 	mov	r5,r2
40001d8c:	21295c04 	addi	r4,r4,-23184
40001d90:	000ef680 	call	4000ef68 <printf>
	printf("TOTAL_DB_COUNTS        %f\n", 1.0 * counters[TOTAL_DB_COUNTS    ] / 50000000.0);
40001d94:	81000617 	ldw	r4,24(r16)
40001d98:	81400717 	ldw	r5,28(r16)
40001d9c:	000c7dc0 	call	4000c7dc <__floatundidf>
40001da0:	01d06234 	movhi	r7,16776
40001da4:	39f5e104 	addi	r7,r7,-10364
40001da8:	1009883a 	mov	r4,r2
40001dac:	000d883a 	mov	r6,zero
40001db0:	180b883a 	mov	r5,r3
40001db4:	000d2ac0 	call	4000d2ac <__divdf3>
40001db8:	011000b4 	movhi	r4,16386
40001dbc:	180d883a 	mov	r6,r3
40001dc0:	100b883a 	mov	r5,r2
40001dc4:	21296304 	addi	r4,r4,-23156
40001dc8:	000ef680 	call	4000ef68 <printf>
	printf("TOTAL_VGA_COUNTS       %f\n", 1.0 * counters[TOTAL_VGA_COUNTS   ] / 50000000.0);
40001dcc:	81000817 	ldw	r4,32(r16)
40001dd0:	81400917 	ldw	r5,36(r16)
40001dd4:	000c7dc0 	call	4000c7dc <__floatundidf>
40001dd8:	01d06234 	movhi	r7,16776
40001ddc:	39f5e104 	addi	r7,r7,-10364
40001de0:	1009883a 	mov	r4,r2
40001de4:	000d883a 	mov	r6,zero
40001de8:	180b883a 	mov	r5,r3
40001dec:	000d2ac0 	call	4000d2ac <__divdf3>
40001df0:	011000b4 	movhi	r4,16386
40001df4:	180d883a 	mov	r6,r3
40001df8:	100b883a 	mov	r5,r2
40001dfc:	21296a04 	addi	r4,r4,-23128
40001e00:	000ef680 	call	4000ef68 <printf>
	printf("HW_INTRA_COUNTS        %f\n", 1.0 * counters[HW_INTRA_COUNTS    ] / 50000000.0);
40001e04:	81000a17 	ldw	r4,40(r16)
40001e08:	81400b17 	ldw	r5,44(r16)
40001e0c:	000c7dc0 	call	4000c7dc <__floatundidf>
40001e10:	01d06234 	movhi	r7,16776
40001e14:	39f5e104 	addi	r7,r7,-10364
40001e18:	1009883a 	mov	r4,r2
40001e1c:	000d883a 	mov	r6,zero
40001e20:	180b883a 	mov	r5,r3
40001e24:	000d2ac0 	call	4000d2ac <__divdf3>
40001e28:	011000b4 	movhi	r4,16386
40001e2c:	180d883a 	mov	r6,r3
40001e30:	100b883a 	mov	r5,r2
40001e34:	21297104 	addi	r4,r4,-23100
40001e38:	000ef680 	call	4000ef68 <printf>
	printf("HW_INTER_COUNTS        %f\n", 1.0 * counters[HW_INTER_COUNTS    ] / 50000000.0);
40001e3c:	81000c17 	ldw	r4,48(r16)
40001e40:	81400d17 	ldw	r5,52(r16)
40001e44:	000c7dc0 	call	4000c7dc <__floatundidf>
40001e48:	01d06234 	movhi	r7,16776
40001e4c:	39f5e104 	addi	r7,r7,-10364
40001e50:	1009883a 	mov	r4,r2
40001e54:	000d883a 	mov	r6,zero
40001e58:	180b883a 	mov	r5,r3
40001e5c:	000d2ac0 	call	4000d2ac <__divdf3>
40001e60:	011000b4 	movhi	r4,16386
40001e64:	180d883a 	mov	r6,r3
40001e68:	100b883a 	mov	r5,r2
40001e6c:	21297804 	addi	r4,r4,-23072
40001e70:	000ef680 	call	4000ef68 <printf>
	printf("HW_DB_COUNTS           %f\n", 1.0 * counters[HW_DB_COUNTS       ] / 50000000.0);
40001e74:	81000e17 	ldw	r4,56(r16)
40001e78:	81400f17 	ldw	r5,60(r16)
40001e7c:	000c7dc0 	call	4000c7dc <__floatundidf>
40001e80:	01d06234 	movhi	r7,16776
40001e84:	39f5e104 	addi	r7,r7,-10364
40001e88:	1009883a 	mov	r4,r2
40001e8c:	000d883a 	mov	r6,zero
40001e90:	180b883a 	mov	r5,r3
40001e94:	000d2ac0 	call	4000d2ac <__divdf3>
40001e98:	011000b4 	movhi	r4,16386
40001e9c:	180d883a 	mov	r6,r3
40001ea0:	100b883a 	mov	r5,r2
40001ea4:	21297f04 	addi	r4,r4,-23044
40001ea8:	000ef680 	call	4000ef68 <printf>
	printf("PARSER_COUNTS          %f\n", 1.0 * counters[PARSER_COUNTS      ] / 50000000.0);
40001eac:	81001017 	ldw	r4,64(r16)
40001eb0:	81401117 	ldw	r5,68(r16)
40001eb4:	000c7dc0 	call	4000c7dc <__floatundidf>
40001eb8:	01d06234 	movhi	r7,16776
40001ebc:	39f5e104 	addi	r7,r7,-10364
40001ec0:	1009883a 	mov	r4,r2
40001ec4:	000d883a 	mov	r6,zero
40001ec8:	180b883a 	mov	r5,r3
40001ecc:	000d2ac0 	call	4000d2ac <__divdf3>
40001ed0:	011000b4 	movhi	r4,16386
40001ed4:	180d883a 	mov	r6,r3
40001ed8:	100b883a 	mov	r5,r2
40001edc:	21298604 	addi	r4,r4,-23016
40001ee0:	000ef680 	call	4000ef68 <printf>
	printf("NOC_SEND_COUNTS        %f\n", 1.0 * counters[NOC_SEND_COUNTS    ] / 50000000.0);
40001ee4:	81001217 	ldw	r4,72(r16)
40001ee8:	81401317 	ldw	r5,76(r16)
40001eec:	000c7dc0 	call	4000c7dc <__floatundidf>
40001ef0:	01d06234 	movhi	r7,16776
40001ef4:	39f5e104 	addi	r7,r7,-10364
40001ef8:	1009883a 	mov	r4,r2
40001efc:	000d883a 	mov	r6,zero
40001f00:	180b883a 	mov	r5,r3
40001f04:	000d2ac0 	call	4000d2ac <__divdf3>
40001f08:	011000b4 	movhi	r4,16386
40001f0c:	180d883a 	mov	r6,r3
40001f10:	100b883a 	mov	r5,r2
40001f14:	21298d04 	addi	r4,r4,-22988
40001f18:	000ef680 	call	4000ef68 <printf>
	printf("NOC_RECEIVE_COUNTS     %f\n", 1.0 * counters[NOC_RECEIVE_COUNTS ] / 50000000.0);
40001f1c:	81001417 	ldw	r4,80(r16)
40001f20:	81401517 	ldw	r5,84(r16)
40001f24:	000c7dc0 	call	4000c7dc <__floatundidf>
40001f28:	01d06234 	movhi	r7,16776
40001f2c:	39f5e104 	addi	r7,r7,-10364
40001f30:	1009883a 	mov	r4,r2
40001f34:	000d883a 	mov	r6,zero
40001f38:	180b883a 	mov	r5,r3
40001f3c:	000d2ac0 	call	4000d2ac <__divdf3>
40001f40:	011000b4 	movhi	r4,16386
40001f44:	100b883a 	mov	r5,r2
40001f48:	180d883a 	mov	r6,r3
40001f4c:	21299404 	addi	r4,r4,-22960
}
40001f50:	dfc00117 	ldw	ra,4(sp)
40001f54:	dc000017 	ldw	r16,0(sp)
40001f58:	dec00204 	addi	sp,sp,8
	printf("HW_INTRA_COUNTS        %f\n", 1.0 * counters[HW_INTRA_COUNTS    ] / 50000000.0);
	printf("HW_INTER_COUNTS        %f\n", 1.0 * counters[HW_INTER_COUNTS    ] / 50000000.0);
	printf("HW_DB_COUNTS           %f\n", 1.0 * counters[HW_DB_COUNTS       ] / 50000000.0);
	printf("PARSER_COUNTS          %f\n", 1.0 * counters[PARSER_COUNTS      ] / 50000000.0);
	printf("NOC_SEND_COUNTS        %f\n", 1.0 * counters[NOC_SEND_COUNTS    ] / 50000000.0);
	printf("NOC_RECEIVE_COUNTS     %f\n", 1.0 * counters[NOC_RECEIVE_COUNTS ] / 50000000.0);
40001f5c:	000ef681 	jmpi	4000ef68 <printf>

40001f60 <rx_intra_packet.constprop.13>:

    return identifier;
}


void rx_intra_packet(uint32_t identifier, frame *f, int bx, int by, int type){
40001f60:	defff704 	addi	sp,sp,-36
40001f64:	dd800615 	stw	r22,24(sp)
40001f68:	dc800215 	stw	r18,8(sp)
40001f6c:	dc400115 	stw	r17,4(sp)
40001f70:	dc000015 	stw	r16,0(sp)
40001f74:	dfc00815 	stw	ra,32(sp)
40001f78:	ddc00715 	stw	r23,28(sp)
40001f7c:	dd400515 	stw	r21,20(sp)
40001f80:	dd000415 	stw	r20,16(sp)
40001f84:	dcc00315 	stw	r19,12(sp)
40001f88:	2023883a 	mov	r17,r4
40001f8c:	2821883a 	mov	r16,r5
40001f90:	302d883a 	mov	r22,r6
40001f94:	3825883a 	mov	r18,r7

	//start = read_timer();
	packet *intra_packet = (void *)0;
	while(intra_packet == (void *)0){
		intra_packet = get_packet_pointer_by_id(identifier);
40001f98:	8809883a 	mov	r4,r17
40001f9c:	000c5340 	call	4000c534 <get_packet_pointer_by_id>
40001fa0:	102b883a 	mov	r21,r2
		if(intra_packet == (void *)0){
40001fa4:	10005e26 	beq	r2,zero,40002120 <rx_intra_packet.constprop.13+0x1c0>
			buffers_loop(1);
		}
	}
	//add_time(HW_INTRA_COUNTS, read_timer() - start);

    uint32_t block_size  = (uint32_t)(intra_packet->data.flit[0]>>32);
40001fa8:	14c00117 	ldw	r19,4(r2)

    if(block_size == 0){
40001fac:	98005f26 	beq	r19,zero,4000212c <rx_intra_packet.constprop.13+0x1cc>
        block_size = 4;
    }

    uint64_t *data_flits = &intra_packet->data.flit[1];
    uint32_t data_len    = intra_packet->num_flits - 1;
    uint32_t row_len     = data_len/block_size;
40001fb0:	a9004217 	ldw	r4,264(r21)
40001fb4:	980b883a 	mov	r5,r19
    if(block_size == 0){
        printf("block size was 0 setting to 4\n");
        block_size = 4;
    }

    uint64_t *data_flits = &intra_packet->data.flit[1];
40001fb8:	ad000204 	addi	r20,r21,8
    uint32_t data_len    = intra_packet->num_flits - 1;
    uint32_t row_len     = data_len/block_size;
40001fbc:	213fffc4 	addi	r4,r4,-1
40001fc0:	000c9440 	call	4000c944 <__udivsi3>
40001fc4:	101e90fa 	slli	r15,r2,3
40001fc8:	b00d883a 	mov	r6,r22
40001fcc:	9cab883a 	add	r21,r19,r18

    uint32_t block_size  = (uint32_t)(intra_packet->data.flit[0]>>32);

    if(block_size == 0){
        printf("block size was 0 setting to 4\n");
        block_size = 4;
40001fd0:	002d883a 	mov	r22,zero
            {
                r(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
                r(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
                r(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
                r(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
                if(block_size > 4){
40001fd4:	07c00104 	movi	ra,4
40001fd8:	b00fd0fa 	srai	r7,r22,3
40001fdc:	33800044 	addi	r14,r6,1
40001fe0:	33400084 	addi	r13,r6,2
40001fe4:	380e90fa 	slli	r7,r7,3
40001fe8:	330000c4 	addi	r12,r6,3
40001fec:	9005883a 	mov	r2,r18
40001ff0:	a1cf883a 	add	r7,r20,r7
                    p(x+7,y) = (uint8_t)((the_data & 0x00000000000000FFULL));
                }
            }
            if(type == TYPE_CR)
            {
                r(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
40001ff4:	81000517 	ldw	r4,20(r16)
    int x, y;
    const int samples_per_flit = 8;
    for(x = 0; x < block_size; x += 8){
        for( y = 0; y < block_size; y++){
            int flit_index = x/samples_per_flit + y * row_len;
            uint64_t the_data = data_flits[flit_index];
40001ff8:	39400117 	ldw	r5,4(r7)
                    p(x+7,y) = (uint8_t)((the_data & 0x00000000000000FFULL));
                }
            }
            if(type == TYPE_CR)
            {
                r(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
40001ffc:	80c00817 	ldw	r3,32(r16)
40002000:	1109383a 	mul	r4,r2,r4
40002004:	2812d63a 	srli	r9,r5,24
40002008:	1987883a 	add	r3,r3,r6
4000200c:	1907883a 	add	r3,r3,r4
    int x, y;
    const int samples_per_flit = 8;
    for(x = 0; x < block_size; x += 8){
        for( y = 0; y < block_size; y++){
            int flit_index = x/samples_per_flit + y * row_len;
            uint64_t the_data = data_flits[flit_index];
40002010:	3a000017 	ldw	r8,0(r7)
                    p(x+7,y) = (uint8_t)((the_data & 0x00000000000000FFULL));
                }
            }
            if(type == TYPE_CR)
            {
                r(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
40002014:	1a400005 	stb	r9,0(r3)
                r(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
40002018:	81000517 	ldw	r4,20(r16)
4000201c:	80c00817 	ldw	r3,32(r16)
40002020:	2812d43a 	srli	r9,r5,16
40002024:	1109383a 	mul	r4,r2,r4
40002028:	1b87883a 	add	r3,r3,r14
                r(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
4000202c:	282ed23a 	srli	r23,r5,8
                }
            }
            if(type == TYPE_CR)
            {
                r(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
                r(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
40002030:	1907883a 	add	r3,r3,r4
40002034:	1a400005 	stb	r9,0(r3)
                r(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
40002038:	81000517 	ldw	r4,20(r16)
4000203c:	80c00817 	ldw	r3,32(r16)
                r(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
                if(block_size > 4){
                    r(x+4,y) = (uint8_t)((the_data & 0x00000000FF000000ULL)>>24);
40002040:	4016d63a 	srli	r11,r8,24
            }
            if(type == TYPE_CR)
            {
                r(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
                r(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
                r(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
40002044:	1109383a 	mul	r4,r2,r4
40002048:	1b47883a 	add	r3,r3,r13
                r(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
                if(block_size > 4){
                    r(x+4,y) = (uint8_t)((the_data & 0x00000000FF000000ULL)>>24);
                    r(x+5,y) = (uint8_t)((the_data & 0x0000000000FF0000ULL)>>16);
4000204c:	4014d43a 	srli	r10,r8,16
            }
            if(type == TYPE_CR)
            {
                r(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
                r(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
                r(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
40002050:	1907883a 	add	r3,r3,r4
40002054:	1dc00005 	stb	r23,0(r3)
                r(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
40002058:	81000517 	ldw	r4,20(r16)
4000205c:	80c00817 	ldw	r3,32(r16)
                if(block_size > 4){
                    r(x+4,y) = (uint8_t)((the_data & 0x00000000FF000000ULL)>>24);
                    r(x+5,y) = (uint8_t)((the_data & 0x0000000000FF0000ULL)>>16);
                    r(x+6,y) = (uint8_t)((the_data & 0x000000000000FF00ULL)>>8);
40002060:	4012d23a 	srli	r9,r8,8
            if(type == TYPE_CR)
            {
                r(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
                r(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
                r(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
                r(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
40002064:	1109383a 	mul	r4,r2,r4
40002068:	1b07883a 	add	r3,r3,r12
4000206c:	3bcf883a 	add	r7,r7,r15
40002070:	1907883a 	add	r3,r3,r4
40002074:	19400005 	stb	r5,0(r3)
                if(block_size > 4){
40002078:	fcc0182e 	bgeu	ra,r19,400020dc <rx_intra_packet.constprop.13+0x17c>
                    r(x+4,y) = (uint8_t)((the_data & 0x00000000FF000000ULL)>>24);
4000207c:	80c00517 	ldw	r3,20(r16)
40002080:	81400817 	ldw	r5,32(r16)
40002084:	10c9383a 	mul	r4,r2,r3
40002088:	2987883a 	add	r3,r5,r6
4000208c:	1907883a 	add	r3,r3,r4
40002090:	1ac00105 	stb	r11,4(r3)
                    r(x+5,y) = (uint8_t)((the_data & 0x0000000000FF0000ULL)>>16);
40002094:	80c00517 	ldw	r3,20(r16)
40002098:	81400817 	ldw	r5,32(r16)
4000209c:	10c9383a 	mul	r4,r2,r3
400020a0:	2987883a 	add	r3,r5,r6
400020a4:	1907883a 	add	r3,r3,r4
400020a8:	1a800145 	stb	r10,5(r3)
                    r(x+6,y) = (uint8_t)((the_data & 0x000000000000FF00ULL)>>8);
400020ac:	80c00517 	ldw	r3,20(r16)
400020b0:	81400817 	ldw	r5,32(r16)
400020b4:	10c9383a 	mul	r4,r2,r3
400020b8:	2987883a 	add	r3,r5,r6
400020bc:	1907883a 	add	r3,r3,r4
400020c0:	1a400185 	stb	r9,6(r3)
                    r(x+7,y) = (uint8_t)((the_data & 0x00000000000000FFULL));
400020c4:	80c00517 	ldw	r3,20(r16)
400020c8:	81400817 	ldw	r5,32(r16)
400020cc:	10c9383a 	mul	r4,r2,r3
400020d0:	2987883a 	add	r3,r5,r6
400020d4:	1907883a 	add	r3,r3,r4
400020d8:	1a0001c5 	stb	r8,7(r3)
400020dc:	10800044 	addi	r2,r2,1
    uint32_t row_len     = data_len/block_size;

    int x, y;
    const int samples_per_flit = 8;
    for(x = 0; x < block_size; x += 8){
        for( y = 0; y < block_size; y++){
400020e0:	a8bfc41e 	bne	r21,r2,40001ff4 <__alt_data_end+0xc0001ff4>
    uint32_t data_len    = intra_packet->num_flits - 1;
    uint32_t row_len     = data_len/block_size;

    int x, y;
    const int samples_per_flit = 8;
    for(x = 0; x < block_size; x += 8){
400020e4:	b5800204 	addi	r22,r22,8
400020e8:	31800204 	addi	r6,r6,8
400020ec:	b4ffba36 	bltu	r22,r19,40001fd8 <__alt_data_end+0xc0001fd8>
        }
    }



    remove_packet_with_id(identifier);
400020f0:	8809883a 	mov	r4,r17
}
400020f4:	dfc00817 	ldw	ra,32(sp)
400020f8:	ddc00717 	ldw	r23,28(sp)
400020fc:	dd800617 	ldw	r22,24(sp)
40002100:	dd400517 	ldw	r21,20(sp)
40002104:	dd000417 	ldw	r20,16(sp)
40002108:	dcc00317 	ldw	r19,12(sp)
4000210c:	dc800217 	ldw	r18,8(sp)
40002110:	dc400117 	ldw	r17,4(sp)
40002114:	dc000017 	ldw	r16,0(sp)
40002118:	dec00904 	addi	sp,sp,36
        }
    }



    remove_packet_with_id(identifier);
4000211c:	000c5c01 	jmpi	4000c5c0 <remove_packet_with_id>
	//start = read_timer();
	packet *intra_packet = (void *)0;
	while(intra_packet == (void *)0){
		intra_packet = get_packet_pointer_by_id(identifier);
		if(intra_packet == (void *)0){
			buffers_loop(1);
40002120:	01000044 	movi	r4,1
40002124:	000c3500 	call	4000c350 <buffers_loop>
40002128:	003f9b06 	br	40001f98 <__alt_data_end+0xc0001f98>
	//add_time(HW_INTRA_COUNTS, read_timer() - start);

    uint32_t block_size  = (uint32_t)(intra_packet->data.flit[0]>>32);

    if(block_size == 0){
        printf("block size was 0 setting to 4\n");
4000212c:	011000b4 	movhi	r4,16386
40002130:	21299b04 	addi	r4,r4,-22932
40002134:	000f0840 	call	4000f084 <puts>
        block_size = 4;
    }

    uint64_t *data_flits = &intra_packet->data.flit[1];
    uint32_t data_len    = intra_packet->num_flits - 1;
    uint32_t row_len     = data_len/block_size;
40002138:	a8804217 	ldw	r2,264(r21)
    if(block_size == 0){
        printf("block size was 0 setting to 4\n");
        block_size = 4;
    }

    uint64_t *data_flits = &intra_packet->data.flit[1];
4000213c:	ad000204 	addi	r20,r21,8

    uint32_t block_size  = (uint32_t)(intra_packet->data.flit[0]>>32);

    if(block_size == 0){
        printf("block size was 0 setting to 4\n");
        block_size = 4;
40002140:	04c00104 	movi	r19,4
    }

    uint64_t *data_flits = &intra_packet->data.flit[1];
    uint32_t data_len    = intra_packet->num_flits - 1;
    uint32_t row_len     = data_len/block_size;
40002144:	10bfffc4 	addi	r2,r2,-1
40002148:	1004d0ba 	srli	r2,r2,2
4000214c:	003f9d06 	br	40001fc4 <__alt_data_end+0xc0001fc4>

40002150 <rx_intra_packet.constprop.14>:

    return identifier;
}


void rx_intra_packet(uint32_t identifier, frame *f, int bx, int by, int type){
40002150:	defff704 	addi	sp,sp,-36
40002154:	dd800615 	stw	r22,24(sp)
40002158:	dc800215 	stw	r18,8(sp)
4000215c:	dc400115 	stw	r17,4(sp)
40002160:	dc000015 	stw	r16,0(sp)
40002164:	dfc00815 	stw	ra,32(sp)
40002168:	ddc00715 	stw	r23,28(sp)
4000216c:	dd400515 	stw	r21,20(sp)
40002170:	dd000415 	stw	r20,16(sp)
40002174:	dcc00315 	stw	r19,12(sp)
40002178:	2023883a 	mov	r17,r4
4000217c:	2821883a 	mov	r16,r5
40002180:	302d883a 	mov	r22,r6
40002184:	3825883a 	mov	r18,r7

	//start = read_timer();
	packet *intra_packet = (void *)0;
	while(intra_packet == (void *)0){
		intra_packet = get_packet_pointer_by_id(identifier);
40002188:	8809883a 	mov	r4,r17
4000218c:	000c5340 	call	4000c534 <get_packet_pointer_by_id>
40002190:	102b883a 	mov	r21,r2
		if(intra_packet == (void *)0){
40002194:	10005e26 	beq	r2,zero,40002310 <rx_intra_packet.constprop.14+0x1c0>
			buffers_loop(1);
		}
	}
	//add_time(HW_INTRA_COUNTS, read_timer() - start);

    uint32_t block_size  = (uint32_t)(intra_packet->data.flit[0]>>32);
40002198:	14c00117 	ldw	r19,4(r2)

    if(block_size == 0){
4000219c:	98005f26 	beq	r19,zero,4000231c <rx_intra_packet.constprop.14+0x1cc>
        block_size = 4;
    }

    uint64_t *data_flits = &intra_packet->data.flit[1];
    uint32_t data_len    = intra_packet->num_flits - 1;
    uint32_t row_len     = data_len/block_size;
400021a0:	a9004217 	ldw	r4,264(r21)
400021a4:	980b883a 	mov	r5,r19
    if(block_size == 0){
        printf("block size was 0 setting to 4\n");
        block_size = 4;
    }

    uint64_t *data_flits = &intra_packet->data.flit[1];
400021a8:	ad000204 	addi	r20,r21,8
    uint32_t data_len    = intra_packet->num_flits - 1;
    uint32_t row_len     = data_len/block_size;
400021ac:	213fffc4 	addi	r4,r4,-1
400021b0:	000c9440 	call	4000c944 <__udivsi3>
400021b4:	101e90fa 	slli	r15,r2,3
400021b8:	b00d883a 	mov	r6,r22
400021bc:	9cab883a 	add	r21,r19,r18

    uint32_t block_size  = (uint32_t)(intra_packet->data.flit[0]>>32);

    if(block_size == 0){
        printf("block size was 0 setting to 4\n");
        block_size = 4;
400021c0:	002d883a 	mov	r22,zero
            {
                b(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
                b(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
                b(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
                b(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
                if(block_size > 4){
400021c4:	07c00104 	movi	ra,4
400021c8:	b00fd0fa 	srai	r7,r22,3
400021cc:	33800044 	addi	r14,r6,1
400021d0:	33400084 	addi	r13,r6,2
400021d4:	380e90fa 	slli	r7,r7,3
400021d8:	330000c4 	addi	r12,r6,3
400021dc:	9005883a 	mov	r2,r18
400021e0:	a1cf883a 	add	r7,r20,r7
                }
                //printf(".");
            }
            if(type == TYPE_CB)
            {
                b(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
400021e4:	81000517 	ldw	r4,20(r16)
    int x, y;
    const int samples_per_flit = 8;
    for(x = 0; x < block_size; x += 8){
        for( y = 0; y < block_size; y++){
            int flit_index = x/samples_per_flit + y * row_len;
            uint64_t the_data = data_flits[flit_index];
400021e8:	39400117 	ldw	r5,4(r7)
                }
                //printf(".");
            }
            if(type == TYPE_CB)
            {
                b(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
400021ec:	80c00717 	ldw	r3,28(r16)
400021f0:	1109383a 	mul	r4,r2,r4
400021f4:	2812d63a 	srli	r9,r5,24
400021f8:	1987883a 	add	r3,r3,r6
400021fc:	1907883a 	add	r3,r3,r4
    int x, y;
    const int samples_per_flit = 8;
    for(x = 0; x < block_size; x += 8){
        for( y = 0; y < block_size; y++){
            int flit_index = x/samples_per_flit + y * row_len;
            uint64_t the_data = data_flits[flit_index];
40002200:	3a000017 	ldw	r8,0(r7)
                }
                //printf(".");
            }
            if(type == TYPE_CB)
            {
                b(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
40002204:	1a400005 	stb	r9,0(r3)
                b(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
40002208:	81000517 	ldw	r4,20(r16)
4000220c:	80c00717 	ldw	r3,28(r16)
40002210:	2812d43a 	srli	r9,r5,16
40002214:	1109383a 	mul	r4,r2,r4
40002218:	1b87883a 	add	r3,r3,r14
                b(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
4000221c:	282ed23a 	srli	r23,r5,8
                //printf(".");
            }
            if(type == TYPE_CB)
            {
                b(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
                b(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
40002220:	1907883a 	add	r3,r3,r4
40002224:	1a400005 	stb	r9,0(r3)
                b(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
40002228:	81000517 	ldw	r4,20(r16)
4000222c:	80c00717 	ldw	r3,28(r16)
                b(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
                if(block_size > 4){
                    b(x+4,y) = (uint8_t)((the_data & 0x00000000FF000000ULL)>>24);
40002230:	4016d63a 	srli	r11,r8,24
            }
            if(type == TYPE_CB)
            {
                b(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
                b(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
                b(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
40002234:	1109383a 	mul	r4,r2,r4
40002238:	1b47883a 	add	r3,r3,r13
                b(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
                if(block_size > 4){
                    b(x+4,y) = (uint8_t)((the_data & 0x00000000FF000000ULL)>>24);
                    b(x+5,y) = (uint8_t)((the_data & 0x0000000000FF0000ULL)>>16);
4000223c:	4014d43a 	srli	r10,r8,16
            }
            if(type == TYPE_CB)
            {
                b(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
                b(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
                b(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
40002240:	1907883a 	add	r3,r3,r4
40002244:	1dc00005 	stb	r23,0(r3)
                b(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
40002248:	81000517 	ldw	r4,20(r16)
4000224c:	80c00717 	ldw	r3,28(r16)
                if(block_size > 4){
                    b(x+4,y) = (uint8_t)((the_data & 0x00000000FF000000ULL)>>24);
                    b(x+5,y) = (uint8_t)((the_data & 0x0000000000FF0000ULL)>>16);
                    b(x+6,y) = (uint8_t)((the_data & 0x000000000000FF00ULL)>>8);
40002250:	4012d23a 	srli	r9,r8,8
            if(type == TYPE_CB)
            {
                b(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
                b(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
                b(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
                b(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
40002254:	1109383a 	mul	r4,r2,r4
40002258:	1b07883a 	add	r3,r3,r12
4000225c:	3bcf883a 	add	r7,r7,r15
40002260:	1907883a 	add	r3,r3,r4
40002264:	19400005 	stb	r5,0(r3)
                if(block_size > 4){
40002268:	fcc0182e 	bgeu	ra,r19,400022cc <rx_intra_packet.constprop.14+0x17c>
                    b(x+4,y) = (uint8_t)((the_data & 0x00000000FF000000ULL)>>24);
4000226c:	80c00517 	ldw	r3,20(r16)
40002270:	81400717 	ldw	r5,28(r16)
40002274:	10c9383a 	mul	r4,r2,r3
40002278:	2987883a 	add	r3,r5,r6
4000227c:	1907883a 	add	r3,r3,r4
40002280:	1ac00105 	stb	r11,4(r3)
                    b(x+5,y) = (uint8_t)((the_data & 0x0000000000FF0000ULL)>>16);
40002284:	80c00517 	ldw	r3,20(r16)
40002288:	81400717 	ldw	r5,28(r16)
4000228c:	10c9383a 	mul	r4,r2,r3
40002290:	2987883a 	add	r3,r5,r6
40002294:	1907883a 	add	r3,r3,r4
40002298:	1a800145 	stb	r10,5(r3)
                    b(x+6,y) = (uint8_t)((the_data & 0x000000000000FF00ULL)>>8);
4000229c:	80c00517 	ldw	r3,20(r16)
400022a0:	81400717 	ldw	r5,28(r16)
400022a4:	10c9383a 	mul	r4,r2,r3
400022a8:	2987883a 	add	r3,r5,r6
400022ac:	1907883a 	add	r3,r3,r4
400022b0:	1a400185 	stb	r9,6(r3)
                    b(x+7,y) = (uint8_t)((the_data & 0x00000000000000FFULL));
400022b4:	80c00517 	ldw	r3,20(r16)
400022b8:	81400717 	ldw	r5,28(r16)
400022bc:	10c9383a 	mul	r4,r2,r3
400022c0:	2987883a 	add	r3,r5,r6
400022c4:	1907883a 	add	r3,r3,r4
400022c8:	1a0001c5 	stb	r8,7(r3)
400022cc:	10800044 	addi	r2,r2,1
    uint32_t row_len     = data_len/block_size;

    int x, y;
    const int samples_per_flit = 8;
    for(x = 0; x < block_size; x += 8){
        for( y = 0; y < block_size; y++){
400022d0:	a8bfc41e 	bne	r21,r2,400021e4 <__alt_data_end+0xc00021e4>
    uint32_t data_len    = intra_packet->num_flits - 1;
    uint32_t row_len     = data_len/block_size;

    int x, y;
    const int samples_per_flit = 8;
    for(x = 0; x < block_size; x += 8){
400022d4:	b5800204 	addi	r22,r22,8
400022d8:	31800204 	addi	r6,r6,8
400022dc:	b4ffba36 	bltu	r22,r19,400021c8 <__alt_data_end+0xc00021c8>
        }
    }



    remove_packet_with_id(identifier);
400022e0:	8809883a 	mov	r4,r17
}
400022e4:	dfc00817 	ldw	ra,32(sp)
400022e8:	ddc00717 	ldw	r23,28(sp)
400022ec:	dd800617 	ldw	r22,24(sp)
400022f0:	dd400517 	ldw	r21,20(sp)
400022f4:	dd000417 	ldw	r20,16(sp)
400022f8:	dcc00317 	ldw	r19,12(sp)
400022fc:	dc800217 	ldw	r18,8(sp)
40002300:	dc400117 	ldw	r17,4(sp)
40002304:	dc000017 	ldw	r16,0(sp)
40002308:	dec00904 	addi	sp,sp,36
        }
    }



    remove_packet_with_id(identifier);
4000230c:	000c5c01 	jmpi	4000c5c0 <remove_packet_with_id>
	//start = read_timer();
	packet *intra_packet = (void *)0;
	while(intra_packet == (void *)0){
		intra_packet = get_packet_pointer_by_id(identifier);
		if(intra_packet == (void *)0){
			buffers_loop(1);
40002310:	01000044 	movi	r4,1
40002314:	000c3500 	call	4000c350 <buffers_loop>
40002318:	003f9b06 	br	40002188 <__alt_data_end+0xc0002188>
	//add_time(HW_INTRA_COUNTS, read_timer() - start);

    uint32_t block_size  = (uint32_t)(intra_packet->data.flit[0]>>32);

    if(block_size == 0){
        printf("block size was 0 setting to 4\n");
4000231c:	011000b4 	movhi	r4,16386
40002320:	21299b04 	addi	r4,r4,-22932
40002324:	000f0840 	call	4000f084 <puts>
        block_size = 4;
    }

    uint64_t *data_flits = &intra_packet->data.flit[1];
    uint32_t data_len    = intra_packet->num_flits - 1;
    uint32_t row_len     = data_len/block_size;
40002328:	a8804217 	ldw	r2,264(r21)
    if(block_size == 0){
        printf("block size was 0 setting to 4\n");
        block_size = 4;
    }

    uint64_t *data_flits = &intra_packet->data.flit[1];
4000232c:	ad000204 	addi	r20,r21,8

    uint32_t block_size  = (uint32_t)(intra_packet->data.flit[0]>>32);

    if(block_size == 0){
        printf("block size was 0 setting to 4\n");
        block_size = 4;
40002330:	04c00104 	movi	r19,4
    }

    uint64_t *data_flits = &intra_packet->data.flit[1];
    uint32_t data_len    = intra_packet->num_flits - 1;
    uint32_t row_len     = data_len/block_size;
40002334:	10bfffc4 	addi	r2,r2,-1
40002338:	1004d0ba 	srli	r2,r2,2
4000233c:	003f9d06 	br	400021b4 <__alt_data_end+0xc00021b4>

40002340 <send_chroma_intra_packet_2.constprop.15>:
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    b(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
}

uint32_t send_chroma_intra_packet_2(int size, frame *f, int mode, int bx, int by, int x_avail, int y_avail, int select_cb)
40002340:	deffe104 	addi	sp,sp,-124
    uint32_t data_5     = 0xFFFFFFFF;
    uint32_t data_6     = 0xFFFFFFFF;
    uint32_t data_7     = 0xFFFFFFFF;
    uint32_t data_8     = 0xFFFFFFFF;

    uint32_t availible_mask_x = x_avail?0xFFFF0000:0;
40002344:	d8802017 	ldw	r2,128(sp)
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    b(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
}

uint32_t send_chroma_intra_packet_2(int size, frame *f, int mode, int bx, int by, int x_avail, int y_avail, int select_cb)
40002348:	dfc01e15 	stw	ra,120(sp)
4000234c:	df001d15 	stw	fp,116(sp)
40002350:	ddc01c15 	stw	r23,112(sp)
40002354:	dd801b15 	stw	r22,108(sp)
40002358:	dd401a15 	stw	r21,104(sp)
4000235c:	dd001915 	stw	r20,100(sp)
40002360:	dcc01815 	stw	r19,96(sp)
40002364:	dc801715 	stw	r18,92(sp)
40002368:	dc401615 	stw	r17,88(sp)
4000236c:	dc001515 	stw	r16,84(sp)
40002370:	d9000315 	stw	r4,12(sp)
40002374:	d9800415 	stw	r6,16(sp)
    uint32_t data_5     = 0xFFFFFFFF;
    uint32_t data_6     = 0xFFFFFFFF;
    uint32_t data_7     = 0xFFFFFFFF;
    uint32_t data_8     = 0xFFFFFFFF;

    uint32_t availible_mask_x = x_avail?0xFFFF0000:0;
40002378:	10011826 	beq	r2,zero,400027dc <send_chroma_intra_packet_2.constprop.15+0x49c>
4000237c:	00804034 	movhi	r2,256
40002380:	10bfc004 	addi	r2,r2,-256
40002384:	d8800015 	stw	r2,0(sp)
    uint32_t availible_mask_y = y_avail?0x0000FFFF:0;
40002388:	d8802117 	ldw	r2,132(sp)
    uint32_t data_5     = 0xFFFFFFFF;
    uint32_t data_6     = 0xFFFFFFFF;
    uint32_t data_7     = 0xFFFFFFFF;
    uint32_t data_8     = 0xFFFFFFFF;

    uint32_t availible_mask_x = x_avail?0xFFFF0000:0;
4000238c:	00c04034 	movhi	r3,256
40002390:	18ffffc4 	addi	r3,r3,-1
    uint32_t availible_mask_y = y_avail?0x0000FFFF:0;
40002394:	10011526 	beq	r2,zero,400027ec <send_chroma_intra_packet_2.constprop.15+0x4ac>
40002398:	d8c00015 	stw	r3,0(sp)
4000239c:	00ffc034 	movhi	r3,65280
400023a0:	d8c00215 	stw	r3,8(sp)
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400023a4:	dac01f17 	ldw	r11,124(sp)
400023a8:	2d400517 	ldw	r21,20(r5)
400023ac:	29800717 	ldw	r6,28(r5)
400023b0:	5affffc4 	addi	r11,r11,-1
400023b4:	5d57383a 	mul	r11,r11,r21
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400023b8:	ad49883a 	add	r4,r21,r21
400023bc:	2109883a 	add	r4,r4,r4
400023c0:	22c9883a 	add	r4,r4,r11
400023c4:	a8c001e4 	muli	r3,r21,7
           ((uint32_t)b(x,y+2)) <<8  |\
400023c8:	2565c83a 	sub	r18,r4,r21
           ((uint32_t)b(x,y+1)) <<16 |\
400023cc:	9553c83a 	sub	r9,r18,r21
           ((uint32_t)b(x,y+0)) <<24;
400023d0:	4d5dc83a 	sub	r14,r9,r21
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400023d4:	70ff883a 	add	ra,r14,r3
           ((uint32_t)b(x,y+2)) <<8  |\
400023d8:	fd63c83a 	sub	r17,ra,r21
           ((uint32_t)b(x,y+1)) <<16 |\
400023dc:	8d51c83a 	sub	r8,r17,r21
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
           ((uint32_t)b(x+2,y)) <<8  |\
400023e0:	32d7883a 	add	r11,r6,r11
400023e4:	59c5883a 	add	r2,r11,r7
uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
           ((uint32_t)b(x,y+0)) <<24;
400023e8:	455bc83a 	sub	r13,r8,r21
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400023ec:	68ed883a 	add	r22,r13,r3
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400023f0:	11400003 	ldbu	r5,0(r2)
           ((uint32_t)b(x+2,y)) <<8  |\
           ((uint32_t)b(x+1,y)) <<16 |\
           ((uint32_t)b(x+0,y)) <<24;
400023f4:	39ffffc4 	addi	r7,r7,-1
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
400023f8:	b561c83a 	sub	r16,r22,r21
           ((uint32_t)b(x,y+1)) <<16 |\
400023fc:	8579c83a 	sub	fp,r16,r21
uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
           ((uint32_t)b(x+2,y)) <<8  |\
           ((uint32_t)b(x+1,y)) <<16 |\
           ((uint32_t)b(x+0,y)) <<24;
40002400:	59d7883a 	add	r11,r11,r7
uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
           ((uint32_t)b(x,y+0)) <<24;
40002404:	e559c83a 	sub	r12,fp,r21
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40002408:	5ac00003 	ldbu	r11,0(r11)
4000240c:	280a943a 	slli	r5,r5,16
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40002410:	60df883a 	add	r15,r12,r3
           ((uint32_t)b(x,y+2)) <<8  |\
40002414:	7d47c83a 	sub	r3,r15,r21
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40002418:	12800043 	ldbu	r10,1(r2)
4000241c:	dac00815 	stw	r11,32(sp)
40002420:	d9400615 	stw	r5,24(sp)

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
40002424:	1d57c83a 	sub	r11,r3,r21
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
40002428:	30cb883a 	add	r5,r6,r3
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
4000242c:	10c00143 	ldbu	r3,5(r2)
40002430:	5014923a 	slli	r10,r10,8
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40002434:	3109883a 	add	r4,r6,r4
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40002438:	d8c00915 	stw	r3,36(sp)
4000243c:	10c00183 	ldbu	r3,6(r2)
40002440:	da800515 	stw	r10,20(sp)
40002444:	12800083 	ldbu	r10,2(r2)
40002448:	d8c00b15 	stw	r3,44(sp)
4000244c:	10c00203 	ldbu	r3,8(r2)
40002450:	da800715 	stw	r10,28(sp)
40002454:	12800103 	ldbu	r10,4(r2)
40002458:	d8c01415 	stw	r3,80(sp)
4000245c:	10c001c3 	ldbu	r3,7(r2)
40002460:	da800a15 	stw	r10,40(sp)
40002464:	128000c3 	ldbu	r10,3(r2)
40002468:	d8c00e15 	stw	r3,56(sp)
4000246c:	10c00383 	ldbu	r3,14(r2)
40002470:	da800c15 	stw	r10,48(sp)
40002474:	12800283 	ldbu	r10,10(r2)
40002478:	d8c00f15 	stw	r3,60(sp)
4000247c:	10c002c3 	ldbu	r3,11(r2)
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40002480:	21c9883a 	add	r4,r4,r7
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40002484:	15000243 	ldbu	r20,9(r2)
40002488:	da800d15 	stw	r10,52(sp)
4000248c:	14c00343 	ldbu	r19,13(r2)
40002490:	12800303 	ldbu	r10,12(r2)
40002494:	d8c01015 	stw	r3,64(sp)
    if (select_cb){
        data_0 = pack_cb_x(f, bx, by, -1, -1);
        data_1 = pack_cb_x(f, bx, by, 3, -1);
        data_2 = pack_cb_x(f, bx, by, 7,  -1);
        data_3 = pack_cb_x(f, bx, by, 11, -1);
        data_4 = (uint32_t) b(15, -1);
40002498:	108003c3 	ldbu	r2,15(r2)
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
4000249c:	21000003 	ldbu	r4,0(r4)
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
400024a0:	32ef883a 	add	r23,r6,r11
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400024a4:	37ff883a 	add	ra,r6,ra
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
400024a8:	3739883a 	add	fp,r6,fp
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400024ac:	35ad883a 	add	r22,r6,r22
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
400024b0:	e1f9883a 	add	fp,fp,r7
400024b4:	b9ef883a 	add	r23,r23,r7
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400024b8:	f9ff883a 	add	ra,ra,r7
400024bc:	b1ed883a 	add	r22,r22,r7
400024c0:	ffc00003 	ldbu	ra,0(ra)
400024c4:	b5800003 	ldbu	r22,0(r22)
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400024c8:	d8c00517 	ldw	r3,20(sp)
    if (select_cb){
        data_0 = pack_cb_x(f, bx, by, -1, -1);
        data_1 = pack_cb_x(f, bx, by, 3, -1);
        data_2 = pack_cb_x(f, bx, by, 7,  -1);
        data_3 = pack_cb_x(f, bx, by, 11, -1);
        data_4 = (uint32_t) b(15, -1);
400024cc:	d8800115 	stw	r2,4(sp)
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400024d0:	d9001115 	stw	r4,68(sp)
400024d4:	b8800003 	ldbu	r2,0(r23)
400024d8:	e1000003 	ldbu	r4,0(fp)
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400024dc:	ddc00617 	ldw	r23,24(sp)
400024e0:	df000817 	ldw	fp,32(sp)
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
400024e4:	29cb883a 	add	r5,r5,r7
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400024e8:	dfc01215 	stw	ra,72(sp)
400024ec:	dd801315 	stw	r22,76(sp)
400024f0:	2fc00003 	ldbu	ra,0(r5)
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400024f4:	e02c963a 	slli	r22,fp,24
400024f8:	1dcab03a 	or	r5,r3,r23
400024fc:	df000717 	ldw	fp,28(sp)
40002500:	d8c00917 	ldw	r3,36(sp)
40002504:	ddc00a17 	ldw	r23,40(sp)
uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
           ((uint32_t)b(x,y+0)) <<24;
40002508:	5d6bc83a 	sub	r21,r11,r21
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
4000250c:	34a5883a 	add	r18,r6,r18
           ((uint32_t)b(x,y+1)) <<16 |\
           ((uint32_t)b(x,y+0)) <<24;
40002510:	31d7883a 	add	r11,r6,r7

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
40002514:	3253883a 	add	r9,r6,r9
           ((uint32_t)b(x,y+0)) <<24;
40002518:	339d883a 	add	r14,r6,r14
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
4000251c:	3463883a 	add	r17,r6,r17
           ((uint32_t)b(x,y+1)) <<16 |\
40002520:	3211883a 	add	r8,r6,r8
           ((uint32_t)b(x,y+0)) <<24;
40002524:	335b883a 	add	r13,r6,r13
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
40002528:	3421883a 	add	r16,r6,r16
           ((uint32_t)b(x,y+1)) <<16 |\
           ((uint32_t)b(x,y+0)) <<24;
4000252c:	3319883a 	add	r12,r6,r12
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40002530:	33cd883a 	add	r6,r6,r15
40002534:	31cd883a 	add	r6,r6,r7
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40002538:	dbc01417 	ldw	r15,80(sp)
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
4000253c:	91e5883a 	add	r18,r18,r7
           ((uint32_t)b(x,y+1)) <<16 |\
40002540:	49d3883a 	add	r9,r9,r7
           ((uint32_t)b(x,y+0)) <<24;
40002544:	71dd883a 	add	r14,r14,r7
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
40002548:	89e3883a 	add	r17,r17,r7
           ((uint32_t)b(x,y+1)) <<16 |\
4000254c:	41d1883a 	add	r8,r8,r7
           ((uint32_t)b(x,y+0)) <<24;
40002550:	69db883a 	add	r13,r13,r7
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
40002554:	81e1883a 	add	r16,r16,r7
           ((uint32_t)b(x,y+1)) <<16 |\
           ((uint32_t)b(x,y+0)) <<24;
40002558:	61d9883a 	add	r12,r12,r7
4000255c:	5d57883a 	add	r11,r11,r21
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40002560:	d9c00c17 	ldw	r7,48(sp)
40002564:	b82a943a 	slli	r21,r23,16
40002568:	2f0ab03a 	or	r5,r5,fp
4000256c:	1838923a 	slli	fp,r3,8
40002570:	382e963a 	slli	r23,r7,24
40002574:	7806943a 	slli	r3,r15,16
40002578:	e54eb03a 	or	r7,fp,r21
4000257c:	dbc00e17 	ldw	r15,56(sp)
40002580:	df001017 	ldw	fp,64(sp)
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40002584:	94800003 	ldbu	r18,0(r18)
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40002588:	782a963a 	slli	r21,r15,24
4000258c:	e01e963a 	slli	r15,fp,24
40002590:	df000b17 	ldw	fp,44(sp)
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40002594:	4a400003 	ldbu	r9,0(r9)
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40002598:	a028923a 	slli	r20,r20,8
4000259c:	3f0eb03a 	or	r7,r7,fp
400025a0:	2d8ab03a 	or	r5,r5,r22
400025a4:	3deeb03a 	or	r23,r7,r23
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400025a8:	35800003 	ldbu	r22,0(r6)
400025ac:	73800003 	ldbu	r14,0(r14)
400025b0:	8c400003 	ldbu	r17,0(r17)
400025b4:	42000003 	ldbu	r8,0(r8)
400025b8:	6b400003 	ldbu	r13,0(r13)
400025bc:	84000003 	ldbu	r16,0(r16)
400025c0:	63000003 	ldbu	r12,0(r12)
400025c4:	5ac00003 	ldbu	r11,0(r11)
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400025c8:	d9c00d17 	ldw	r7,52(sp)
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400025cc:	9024923a 	slli	r18,r18,8
400025d0:	4812943a 	slli	r9,r9,16
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400025d4:	a0c6b03a 	or	r3,r20,r3
400025d8:	19c6b03a 	or	r3,r3,r7
400025dc:	9826923a 	slli	r19,r19,8
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400025e0:	d9c01117 	ldw	r7,68(sp)
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400025e4:	5014943a 	slli	r10,r10,16
400025e8:	df000f17 	ldw	fp,60(sp)
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400025ec:	8020923a 	slli	r16,r16,8
400025f0:	9252b03a 	or	r9,r18,r9
400025f4:	2008943a 	slli	r4,r4,16
400025f8:	49d2b03a 	or	r9,r9,r7
400025fc:	f83e923a 	slli	ra,ra,8
40002600:	d9c01317 	ldw	r7,76(sp)
40002604:	8822923a 	slli	r17,r17,8
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40002608:	9a94b03a 	or	r10,r19,r10
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
4000260c:	4010943a 	slli	r8,r8,16
40002610:	1004943a 	slli	r2,r2,16
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40002614:	5714b03a 	or	r10,r10,fp
    uint8_t wr_addr   = 0x00;

    // write data 0
    uint32_t word1    = data_0<<16 | wr_addr<<8 | cmd;
    uint32_t word0    = 0xFFFF0000 | data_0>>16;
    send_flit(3, word0, word1, 1);
40002618:	280c943a 	slli	r6,r5,16
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
4000261c:	df001217 	ldw	fp,72(sp)
    uint8_t wr_addr   = 0x00;

    // write data 0
    uint32_t word1    = data_0<<16 | wr_addr<<8 | cmd;
    uint32_t word0    = 0xFFFF0000 | data_0>>16;
    send_flit(3, word0, word1, 1);
40002620:	280ad43a 	srli	r5,r5,16
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40002624:	701c963a 	slli	r14,r14,24
40002628:	681a963a 	slli	r13,r13,24
4000262c:	6018963a 	slli	r12,r12,24
40002630:	5816963a 	slli	r11,r11,24
40002634:	8108b03a 	or	r4,r16,r4
40002638:	f884b03a 	or	r2,ra,r2
4000263c:	21e0b03a 	or	r16,r4,r7
40002640:	8a10b03a 	or	r8,r17,r8
    uint8_t wr_addr   = 0x00;

    // write data 0
    uint32_t word1    = data_0<<16 | wr_addr<<8 | cmd;
    uint32_t word0    = 0xFFFF0000 | data_0>>16;
    send_flit(3, word0, word1, 1);
40002644:	01c00044 	movi	r7,1
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40002648:	4710b03a 	or	r8,r8,fp
4000264c:	1584b03a 	or	r2,r2,r22
    uint8_t wr_addr   = 0x00;

    // write data 0
    uint32_t word1    = data_0<<16 | wr_addr<<8 | cmd;
    uint32_t word0    = 0xFFFF0000 | data_0>>16;
    send_flit(3, word0, word1, 1);
40002650:	31ccb03a 	or	r6,r6,r7
40002654:	297ffff4 	orhi	r5,r5,65535
40002658:	010000c4 	movi	r4,3
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
4000265c:	1d6ab03a 	or	r21,r3,r21
40002660:	53e6b03a 	or	r19,r10,r15
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40002664:	4ba4b03a 	or	r18,r9,r14
40002668:	4362b03a 	or	r17,r8,r13
4000266c:	8320b03a 	or	r16,r16,r12
40002670:	12ecb03a 	or	r22,r2,r11
    uint8_t wr_addr   = 0x00;

    // write data 0
    uint32_t word1    = data_0<<16 | wr_addr<<8 | cmd;
    uint32_t word0    = 0xFFFF0000 | data_0>>16;
    send_flit(3, word0, word1, 1);
40002674:	000c2000 	call	4000c200 <send_flit>

    // write data 1
    wr_addr  = 1;
    word1    = data_1<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_1>>16;
    send_flit(3, word0, word1, 1);
40002678:	b80c943a 	slli	r6,r23,16
4000267c:	b80ad43a 	srli	r5,r23,16
40002680:	01c00044 	movi	r7,1
40002684:	31804054 	ori	r6,r6,257
40002688:	297ffff4 	orhi	r5,r5,65535
4000268c:	010000c4 	movi	r4,3
40002690:	000c2000 	call	4000c200 <send_flit>

    // write data 2
    wr_addr  = 2;
    word1    = data_2<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_2>>16;
    send_flit(3, word0, word1, 1);
40002694:	a80c943a 	slli	r6,r21,16
40002698:	a80ad43a 	srli	r5,r21,16
4000269c:	01c00044 	movi	r7,1
400026a0:	31808054 	ori	r6,r6,513
400026a4:	297ffff4 	orhi	r5,r5,65535
400026a8:	010000c4 	movi	r4,3
400026ac:	000c2000 	call	4000c200 <send_flit>

    // write   data 5
    wr_addr  = 5;
    word1    = data_5<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_5>>16;
    send_flit(3, word0, word1, 1);
400026b0:	900c943a 	slli	r6,r18,16
400026b4:	900ad43a 	srli	r5,r18,16
400026b8:	01c00044 	movi	r7,1
400026bc:	31814054 	ori	r6,r6,1281
400026c0:	297ffff4 	orhi	r5,r5,65535
400026c4:	010000c4 	movi	r4,3
400026c8:	000c2000 	call	4000c200 <send_flit>

    // write   data 6
    wr_addr  = 6;
    word1    = data_6<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_6>>16;
    send_flit(3, word0, word1, 1);
400026cc:	880c943a 	slli	r6,r17,16
400026d0:	880ad43a 	srli	r5,r17,16
400026d4:	01c00044 	movi	r7,1
400026d8:	31818054 	ori	r6,r6,1537
400026dc:	297ffff4 	orhi	r5,r5,65535
400026e0:	010000c4 	movi	r4,3
400026e4:	000c2000 	call	4000c200 <send_flit>

    // write data 3
    wr_addr  = 3;
    word1    = data_3<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_3>>16;
    send_flit(3, word0, word1, 1);
400026e8:	980c943a 	slli	r6,r19,16
400026ec:	980ad43a 	srli	r5,r19,16
400026f0:	01c00044 	movi	r7,1
400026f4:	3180c054 	ori	r6,r6,769
400026f8:	297ffff4 	orhi	r5,r5,65535
400026fc:	010000c4 	movi	r4,3
40002700:	000c2000 	call	4000c200 <send_flit>

    // write   data 4
    wr_addr  = 4;
    word1    = data_4<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_4>>16;
    send_flit(3, word0, word1, 1);
40002704:	da800117 	ldw	r10,4(sp)
40002708:	01c00044 	movi	r7,1
4000270c:	017ffff4 	movhi	r5,65535
40002710:	500c943a 	slli	r6,r10,16
40002714:	010000c4 	movi	r4,3
40002718:	31810054 	ori	r6,r6,1025
4000271c:	000c2000 	call	4000c200 <send_flit>

    // write   data 7
    wr_addr  = 7;
    word1    = data_7<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_7>>16;
    send_flit(3, word0, word1, 1);
40002720:	800c943a 	slli	r6,r16,16
40002724:	800ad43a 	srli	r5,r16,16
40002728:	01c00044 	movi	r7,1
4000272c:	3181c054 	ori	r6,r6,1793
40002730:	297ffff4 	orhi	r5,r5,65535
40002734:	010000c4 	movi	r4,3
40002738:	000c2000 	call	4000c200 <send_flit>

    // write   data 8
    wr_addr  = 8;
    word1    = data_8<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_8>>16;
    send_flit(3, word0, word1, 1);
4000273c:	b00c943a 	slli	r6,r22,16
40002740:	b00ad43a 	srli	r5,r22,16
40002744:	01c00044 	movi	r7,1
40002748:	31820054 	ori	r6,r6,2049
4000274c:	297ffff4 	orhi	r5,r5,65535
40002750:	010000c4 	movi	r4,3
40002754:	000c2000 	call	4000c200 <send_flit>

    //send a intra prediction request
    cmd                      = 2;
    uint32_t  availible_mask = availible_mask_x | availible_mask_y;
    identifier     = rand()%32 + 129;
40002758:	000f0b00 	call	4000f0b0 <rand>
4000275c:	00e00034 	movhi	r3,32768
40002760:	18c007c4 	addi	r3,r3,31
40002764:	10c4703a 	and	r2,r2,r3
40002768:	10002216 	blt	r2,zero,400027f4 <send_chroma_intra_packet_2.constprop.15+0x4b4>

    word1 = availible_mask<<24 | mode<<16 | size<<8 | cmd;
    word0 = identifier<<24     | availible_mask>>8;

    send_flit(3, word0, word1, 1);
4000276c:	dbc00317 	ldw	r15,12(sp)
40002770:	ddc00417 	ldw	r23,16(sp)
    send_flit(3, word0, word1, 1);

    //send a intra prediction request
    cmd                      = 2;
    uint32_t  availible_mask = availible_mask_x | availible_mask_y;
    identifier     = rand()%32 + 129;
40002774:	14002044 	addi	r16,r2,129

    word1 = availible_mask<<24 | mode<<16 | size<<8 | cmd;
    word0 = identifier<<24     | availible_mask>>8;

    send_flit(3, word0, word1, 1);
40002778:	780c923a 	slli	r6,r15,8
4000277c:	b804943a 	slli	r2,r23,16
40002780:	df000217 	ldw	fp,8(sp)
40002784:	d8c00017 	ldw	r3,0(sp)
40002788:	800a963a 	slli	r5,r16,24
4000278c:	31800094 	ori	r6,r6,2
40002790:	308cb03a 	or	r6,r6,r2
40002794:	01c00044 	movi	r7,1
40002798:	370cb03a 	or	r6,r6,fp
4000279c:	28cab03a 	or	r5,r5,r3
400027a0:	010000c4 	movi	r4,3
400027a4:	000c2000 	call	4000c200 <send_flit>

    return identifier;
}
400027a8:	8005883a 	mov	r2,r16
400027ac:	dfc01e17 	ldw	ra,120(sp)
400027b0:	df001d17 	ldw	fp,116(sp)
400027b4:	ddc01c17 	ldw	r23,112(sp)
400027b8:	dd801b17 	ldw	r22,108(sp)
400027bc:	dd401a17 	ldw	r21,104(sp)
400027c0:	dd001917 	ldw	r20,100(sp)
400027c4:	dcc01817 	ldw	r19,96(sp)
400027c8:	dc801717 	ldw	r18,92(sp)
400027cc:	dc401617 	ldw	r17,88(sp)
400027d0:	dc001517 	ldw	r16,84(sp)
400027d4:	dec01f04 	addi	sp,sp,124
400027d8:	f800283a 	ret
    uint32_t data_6     = 0xFFFFFFFF;
    uint32_t data_7     = 0xFFFFFFFF;
    uint32_t data_8     = 0xFFFFFFFF;

    uint32_t availible_mask_x = x_avail?0xFFFF0000:0;
    uint32_t availible_mask_y = y_avail?0x0000FFFF:0;
400027dc:	d8802117 	ldw	r2,132(sp)
    uint32_t data_5     = 0xFFFFFFFF;
    uint32_t data_6     = 0xFFFFFFFF;
    uint32_t data_7     = 0xFFFFFFFF;
    uint32_t data_8     = 0xFFFFFFFF;

    uint32_t availible_mask_x = x_avail?0xFFFF0000:0;
400027e0:	d8000015 	stw	zero,0(sp)
400027e4:	00c03fc4 	movi	r3,255
    uint32_t availible_mask_y = y_avail?0x0000FFFF:0;
400027e8:	103eeb1e 	bne	r2,zero,40002398 <__alt_data_end+0xc0002398>
400027ec:	d8000215 	stw	zero,8(sp)
400027f0:	003eec06 	br	400023a4 <__alt_data_end+0xc00023a4>
    send_flit(3, word0, word1, 1);

    //send a intra prediction request
    cmd                      = 2;
    uint32_t  availible_mask = availible_mask_x | availible_mask_y;
    identifier     = rand()%32 + 129;
400027f4:	10bfffc4 	addi	r2,r2,-1
400027f8:	00fff804 	movi	r3,-32
400027fc:	10c4b03a 	or	r2,r2,r3
40002800:	10800044 	addi	r2,r2,1
40002804:	003fd906 	br	4000276c <__alt_data_end+0xc000276c>

40002808 <Intra_4x4_Dispatch>:





void Intra_4x4_Dispatch(frame *f, int mode, int x_avail, int y_avail, int x, int y, int luma4x4BlkIdx_check) {
40002808:	deffe904 	addi	sp,sp,-92
4000280c:	dfc01615 	stw	ra,88(sp)
40002810:	df001515 	stw	fp,84(sp)
40002814:	ddc01415 	stw	r23,80(sp)
40002818:	dd801315 	stw	r22,76(sp)
4000281c:	dd401215 	stw	r21,72(sp)
40002820:	dd001115 	stw	r20,68(sp)
40002824:	dcc01015 	stw	r19,64(sp)
40002828:	dc800f15 	stw	r18,60(sp)
4000282c:	dc400e15 	stw	r17,56(sp)
40002830:	dc000d15 	stw	r16,52(sp)
        int ref[13];
        if(mode!=2) {
40002834:	02000084 	movi	r8,2





void Intra_4x4_Dispatch(frame *f, int mode, int x_avail, int y_avail, int x, int y, int luma4x4BlkIdx_check) {
40002838:	d8c01717 	ldw	r3,92(sp)
4000283c:	d8801817 	ldw	r2,96(sp)
        int ref[13];
        if(mode!=2) {
40002840:	2a04b026 	beq	r5,r8,40003b04 <Intra_4x4_Dispatch+0x12fc>
          int i;
          if(x>0) {
40002844:	00c4650e 	bge	zero,r3,400039dc <Intra_4x4_Dispatch+0x11d4>
40002848:	21c00217 	ldw	r7,8(r4)
4000284c:	21800617 	ldw	r6,24(r4)
40002850:	1b3fffc4 	addi	r12,r3,-1
            for(i=0; i<4; ++i) left(i)=L_pixel(f,x-1,y+i);
40002854:	11d1383a 	mul	r8,r2,r7
40002858:	3317883a 	add	r11,r6,r12
4000285c:	12800044 	addi	r10,r2,1
40002860:	5a11883a 	add	r8,r11,r8
40002864:	42000003 	ldbu	r8,0(r8)
40002868:	51d5383a 	mul	r10,r10,r7
4000286c:	12400084 	addi	r9,r2,2
40002870:	da000315 	stw	r8,12(sp)
40002874:	5a95883a 	add	r10,r11,r10
40002878:	52800003 	ldbu	r10,0(r10)
4000287c:	49d3383a 	mul	r9,r9,r7
40002880:	120000c4 	addi	r8,r2,3
40002884:	da800215 	stw	r10,8(sp)
40002888:	5a53883a 	add	r9,r11,r9
4000288c:	4a400003 	ldbu	r9,0(r9)
40002890:	41d1383a 	mul	r8,r8,r7
40002894:	da400115 	stw	r9,4(sp)
40002898:	5a11883a 	add	r8,r11,r8
4000289c:	42000003 	ldbu	r8,0(r8)
400028a0:	da000015 	stw	r8,0(sp)
            if(y>0) left(-1)=L_pixel(f,x-1,y-1);
400028a4:	0080150e 	bge	zero,r2,400028fc <Intra_4x4_Dispatch+0xf4>
400028a8:	123fffc4 	addi	r8,r2,-1
400028ac:	41cf383a 	mul	r7,r8,r7
400028b0:	31cd883a 	add	r6,r6,r7
400028b4:	330f883a 	add	r7,r6,r12
400028b8:	39c00003 	ldbu	r7,0(r7)
400028bc:	d9c00415 	stw	r7,16(sp)
          }
          if(y>0) {
            for(i=0; i<4; ++i) top(i)=L_pixel(f,x+i,y-1);
400028c0:	30cd883a 	add	r6,r6,r3
400028c4:	31c00003 	ldbu	r7,0(r6)
            if(luma4x4BlkIdx_check)
400028c8:	da001917 	ldw	r8,100(sp)
          if(x>0) {
            for(i=0; i<4; ++i) left(i)=L_pixel(f,x-1,y+i);
            if(y>0) left(-1)=L_pixel(f,x-1,y-1);
          }
          if(y>0) {
            for(i=0; i<4; ++i) top(i)=L_pixel(f,x+i,y-1);
400028cc:	d9c00515 	stw	r7,20(sp)
400028d0:	31c00043 	ldbu	r7,1(r6)
400028d4:	d9c00615 	stw	r7,24(sp)
400028d8:	31c00083 	ldbu	r7,2(r6)
400028dc:	d9c00715 	stw	r7,28(sp)
400028e0:	31c000c3 	ldbu	r7,3(r6)
400028e4:	d9c00815 	stw	r7,32(sp)
            if(luma4x4BlkIdx_check)
400028e8:	40001526 	beq	r8,zero,40002940 <Intra_4x4_Dispatch+0x138>
              for(i=4; i<8; ++i) top(i)=top(3);
400028ec:	d9c00915 	stw	r7,36(sp)
400028f0:	d9c00a15 	stw	r7,40(sp)
400028f4:	d9c00b15 	stw	r7,44(sp)
400028f8:	d9c00c15 	stw	r7,48(sp)
            else
              for(i=4; i<8; ++i) top(i)=L_pixel(f,x+i,y-1);
          }
        }

        switch(mode) {
400028fc:	01800204 	movi	r6,8
40002900:	31440a36 	bltu	r6,r5,4000392c <Intra_4x4_Dispatch+0x1124>
40002904:	280e90ba 	slli	r7,r5,2
40002908:	01900034 	movhi	r6,16384
4000290c:	318a4704 	addi	r6,r6,10524
40002910:	398d883a 	add	r6,r7,r6
40002914:	31800017 	ldw	r6,0(r6)
40002918:	3000683a 	jmp	r6
4000291c:	4000309c 	xori	zero,r8,194
40002920:	40003278 	rdprs	zero,r8,201
40002924:	4000392c 	andhi	zero,r8,228
40002928:	40002964 	muli	zero,r8,165
4000292c:	40002d28 	cmpgeui	zero,r8,180
40002930:	40002ec0 	call	440002ec <__alt_heap_start+0x3fd2e10>
40002934:	40003454 	ori	zero,r8,209
40002938:	40003704 	addi	zero,r8,220
4000293c:	40003584 	addi	zero,r8,214
          if(y>0) {
            for(i=0; i<4; ++i) top(i)=L_pixel(f,x+i,y-1);
            if(luma4x4BlkIdx_check)
              for(i=4; i<8; ++i) top(i)=top(3);
            else
              for(i=4; i<8; ++i) top(i)=L_pixel(f,x+i,y-1);
40002940:	31c00103 	ldbu	r7,4(r6)
40002944:	d9c00915 	stw	r7,36(sp)
40002948:	31c00143 	ldbu	r7,5(r6)
4000294c:	d9c00a15 	stw	r7,40(sp)
40002950:	31c00183 	ldbu	r7,6(r6)
40002954:	d9c00b15 	stw	r7,44(sp)
40002958:	318001c3 	ldbu	r6,7(r6)
4000295c:	d9800c15 	stw	r6,48(sp)
40002960:	003fe606 	br	400028fc <__alt_data_end+0xc00028fc>
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      if((x&y)==3) i=top(6)+3*top(7)+2;
      else         i=top(x+y)+2*top(x+y+1)+top(x+y+2)+2;
      p(x,y)=i>>2;
40002964:	d9400617 	ldw	r5,24(sp)
40002968:	d9c00517 	ldw	r7,20(sp)
4000296c:	21800217 	ldw	r6,8(r4)
40002970:	294b883a 	add	r5,r5,r5
40002974:	29cf883a 	add	r7,r5,r7
40002978:	d9400717 	ldw	r5,28(sp)
4000297c:	22000617 	ldw	r8,24(r4)
40002980:	1a800044 	addi	r10,r3,1
40002984:	394b883a 	add	r5,r7,r5
40002988:	29400084 	addi	r5,r5,2
4000298c:	118f383a 	mul	r7,r2,r6
40002990:	280bd0ba 	srai	r5,r5,2
40002994:	40cd883a 	add	r6,r8,r3
40002998:	31cd883a 	add	r6,r6,r7
4000299c:	31400005 	stb	r5,0(r6)
400029a0:	d9400717 	ldw	r5,28(sp)
400029a4:	d9c00617 	ldw	r7,24(sp)
400029a8:	21800217 	ldw	r6,8(r4)
400029ac:	294b883a 	add	r5,r5,r5
400029b0:	29cf883a 	add	r7,r5,r7
400029b4:	d9400817 	ldw	r5,32(sp)
400029b8:	22000617 	ldw	r8,24(r4)
400029bc:	1a400084 	addi	r9,r3,2
400029c0:	394b883a 	add	r5,r7,r5
400029c4:	29400084 	addi	r5,r5,2
400029c8:	118f383a 	mul	r7,r2,r6
400029cc:	280bd0ba 	srai	r5,r5,2
400029d0:	428d883a 	add	r6,r8,r10
400029d4:	31cd883a 	add	r6,r6,r7
400029d8:	31400005 	stb	r5,0(r6)
400029dc:	d9400817 	ldw	r5,32(sp)
400029e0:	d9c00717 	ldw	r7,28(sp)
400029e4:	21800217 	ldw	r6,8(r4)
400029e8:	294b883a 	add	r5,r5,r5
400029ec:	29cf883a 	add	r7,r5,r7
400029f0:	d9400917 	ldw	r5,36(sp)
400029f4:	22000617 	ldw	r8,24(r4)
400029f8:	394b883a 	add	r5,r7,r5
400029fc:	29400084 	addi	r5,r5,2
40002a00:	118f383a 	mul	r7,r2,r6
40002a04:	280bd0ba 	srai	r5,r5,2
40002a08:	424d883a 	add	r6,r8,r9
40002a0c:	31cd883a 	add	r6,r6,r7
40002a10:	31400005 	stb	r5,0(r6)
40002a14:	d9400917 	ldw	r5,36(sp)
40002a18:	d9c00817 	ldw	r7,32(sp)
40002a1c:	21800217 	ldw	r6,8(r4)
40002a20:	294b883a 	add	r5,r5,r5
40002a24:	29cf883a 	add	r7,r5,r7
40002a28:	d9400a17 	ldw	r5,40(sp)
40002a2c:	22c00617 	ldw	r11,24(r4)
40002a30:	1a0000c4 	addi	r8,r3,3
40002a34:	394b883a 	add	r5,r7,r5
40002a38:	29400084 	addi	r5,r5,2
40002a3c:	118f383a 	mul	r7,r2,r6
40002a40:	280bd0ba 	srai	r5,r5,2
40002a44:	5a0d883a 	add	r6,r11,r8
40002a48:	31cd883a 	add	r6,r6,r7
40002a4c:	31400005 	stb	r5,0(r6)
40002a50:	d9400717 	ldw	r5,28(sp)
40002a54:	dac00617 	ldw	r11,24(sp)
40002a58:	21c00217 	ldw	r7,8(r4)
40002a5c:	294b883a 	add	r5,r5,r5
40002a60:	2ad7883a 	add	r11,r5,r11
40002a64:	d9400817 	ldw	r5,32(sp)
40002a68:	11800044 	addi	r6,r2,1
40002a6c:	23000617 	ldw	r12,24(r4)
40002a70:	594b883a 	add	r5,r11,r5
40002a74:	29400084 	addi	r5,r5,2
40002a78:	31d7383a 	mul	r11,r6,r7
40002a7c:	280bd0ba 	srai	r5,r5,2
40002a80:	60cf883a 	add	r7,r12,r3
40002a84:	3acf883a 	add	r7,r7,r11
40002a88:	39400005 	stb	r5,0(r7)
40002a8c:	21c00217 	ldw	r7,8(r4)
40002a90:	23000617 	ldw	r12,24(r4)
40002a94:	d9400817 	ldw	r5,32(sp)
40002a98:	dac00717 	ldw	r11,28(sp)
40002a9c:	294b883a 	add	r5,r5,r5
40002aa0:	2ad7883a 	add	r11,r5,r11
40002aa4:	d9400917 	ldw	r5,36(sp)
40002aa8:	594b883a 	add	r5,r11,r5
40002aac:	29400084 	addi	r5,r5,2
40002ab0:	31d7383a 	mul	r11,r6,r7
40002ab4:	280bd0ba 	srai	r5,r5,2
40002ab8:	628f883a 	add	r7,r12,r10
40002abc:	3acf883a 	add	r7,r7,r11
40002ac0:	39400005 	stb	r5,0(r7)
40002ac4:	d9400917 	ldw	r5,36(sp)
40002ac8:	db000817 	ldw	r12,32(sp)
40002acc:	22c00217 	ldw	r11,8(r4)
40002ad0:	294b883a 	add	r5,r5,r5
40002ad4:	2b19883a 	add	r12,r5,r12
40002ad8:	d9400a17 	ldw	r5,40(sp)
40002adc:	21c00617 	ldw	r7,24(r4)
40002ae0:	614b883a 	add	r5,r12,r5
40002ae4:	29400084 	addi	r5,r5,2
40002ae8:	32d9383a 	mul	r12,r6,r11
40002aec:	280bd0ba 	srai	r5,r5,2
40002af0:	3a57883a 	add	r11,r7,r9
40002af4:	5b17883a 	add	r11,r11,r12
40002af8:	59400005 	stb	r5,0(r11)
40002afc:	d9400a17 	ldw	r5,40(sp)
40002b00:	db000917 	ldw	r12,36(sp)
40002b04:	21c00217 	ldw	r7,8(r4)
40002b08:	294b883a 	add	r5,r5,r5
40002b0c:	2b19883a 	add	r12,r5,r12
40002b10:	d9400b17 	ldw	r5,44(sp)
40002b14:	22c00617 	ldw	r11,24(r4)
40002b18:	31cf383a 	mul	r7,r6,r7
40002b1c:	614b883a 	add	r5,r12,r5
40002b20:	29400084 	addi	r5,r5,2
40002b24:	280bd0ba 	srai	r5,r5,2
40002b28:	5a0d883a 	add	r6,r11,r8
40002b2c:	31cd883a 	add	r6,r6,r7
40002b30:	31400005 	stb	r5,0(r6)
40002b34:	d9400817 	ldw	r5,32(sp)
40002b38:	dac00717 	ldw	r11,28(sp)
40002b3c:	21c00217 	ldw	r7,8(r4)
40002b40:	294b883a 	add	r5,r5,r5
40002b44:	2ad7883a 	add	r11,r5,r11
40002b48:	d9400917 	ldw	r5,36(sp)
40002b4c:	11800084 	addi	r6,r2,2
40002b50:	23000617 	ldw	r12,24(r4)
40002b54:	594b883a 	add	r5,r11,r5
40002b58:	29400084 	addi	r5,r5,2
40002b5c:	31d7383a 	mul	r11,r6,r7
40002b60:	280bd0ba 	srai	r5,r5,2
40002b64:	60cf883a 	add	r7,r12,r3
40002b68:	3acf883a 	add	r7,r7,r11
40002b6c:	39400005 	stb	r5,0(r7)
40002b70:	d9400917 	ldw	r5,36(sp)
40002b74:	dac00817 	ldw	r11,32(sp)
40002b78:	21c00217 	ldw	r7,8(r4)
40002b7c:	294b883a 	add	r5,r5,r5
40002b80:	2ad7883a 	add	r11,r5,r11
40002b84:	d9400a17 	ldw	r5,40(sp)
40002b88:	23000617 	ldw	r12,24(r4)
40002b8c:	108000c4 	addi	r2,r2,3
40002b90:	594b883a 	add	r5,r11,r5
40002b94:	29400084 	addi	r5,r5,2
40002b98:	31d7383a 	mul	r11,r6,r7
40002b9c:	280bd0ba 	srai	r5,r5,2
40002ba0:	628f883a 	add	r7,r12,r10
40002ba4:	3acf883a 	add	r7,r7,r11
40002ba8:	39400005 	stb	r5,0(r7)
40002bac:	d9400a17 	ldw	r5,40(sp)
40002bb0:	db000917 	ldw	r12,36(sp)
40002bb4:	22c00217 	ldw	r11,8(r4)
40002bb8:	294b883a 	add	r5,r5,r5
40002bbc:	21c00617 	ldw	r7,24(r4)
40002bc0:	2b19883a 	add	r12,r5,r12
40002bc4:	d9400b17 	ldw	r5,44(sp)
40002bc8:	614b883a 	add	r5,r12,r5
40002bcc:	29400084 	addi	r5,r5,2
40002bd0:	32d9383a 	mul	r12,r6,r11
40002bd4:	280bd0ba 	srai	r5,r5,2
40002bd8:	3a57883a 	add	r11,r7,r9
40002bdc:	5b17883a 	add	r11,r11,r12
40002be0:	59400005 	stb	r5,0(r11)
40002be4:	d9400b17 	ldw	r5,44(sp)
40002be8:	db000a17 	ldw	r12,40(sp)
40002bec:	21c00217 	ldw	r7,8(r4)
40002bf0:	294b883a 	add	r5,r5,r5
40002bf4:	2b19883a 	add	r12,r5,r12
40002bf8:	d9400c17 	ldw	r5,48(sp)
40002bfc:	22c00617 	ldw	r11,24(r4)
40002c00:	31cf383a 	mul	r7,r6,r7
40002c04:	614b883a 	add	r5,r12,r5
40002c08:	29400084 	addi	r5,r5,2
40002c0c:	280bd0ba 	srai	r5,r5,2
40002c10:	5a0d883a 	add	r6,r11,r8
40002c14:	31cd883a 	add	r6,r6,r7
40002c18:	31400005 	stb	r5,0(r6)
40002c1c:	d9400917 	ldw	r5,36(sp)
40002c20:	dac00817 	ldw	r11,32(sp)
40002c24:	21c00217 	ldw	r7,8(r4)
40002c28:	294b883a 	add	r5,r5,r5
40002c2c:	2ad7883a 	add	r11,r5,r11
40002c30:	d9400a17 	ldw	r5,40(sp)
40002c34:	21800617 	ldw	r6,24(r4)
40002c38:	11cf383a 	mul	r7,r2,r7
40002c3c:	594b883a 	add	r5,r11,r5
40002c40:	29400084 	addi	r5,r5,2
40002c44:	280bd0ba 	srai	r5,r5,2
40002c48:	30c7883a 	add	r3,r6,r3
40002c4c:	19c7883a 	add	r3,r3,r7
40002c50:	19400005 	stb	r5,0(r3)
40002c54:	d8c00a17 	ldw	r3,40(sp)
40002c58:	d9800917 	ldw	r6,36(sp)
40002c5c:	21400217 	ldw	r5,8(r4)
40002c60:	18c7883a 	add	r3,r3,r3
40002c64:	198d883a 	add	r6,r3,r6
40002c68:	d8c00b17 	ldw	r3,44(sp)
40002c6c:	21c00617 	ldw	r7,24(r4)
40002c70:	114b383a 	mul	r5,r2,r5
40002c74:	30c7883a 	add	r3,r6,r3
40002c78:	18c00084 	addi	r3,r3,2
40002c7c:	1807d0ba 	srai	r3,r3,2
40002c80:	3a95883a 	add	r10,r7,r10
40002c84:	5155883a 	add	r10,r10,r5
40002c88:	50c00005 	stb	r3,0(r10)
40002c8c:	d8c00b17 	ldw	r3,44(sp)
40002c90:	d9800a17 	ldw	r6,40(sp)
40002c94:	21400217 	ldw	r5,8(r4)
40002c98:	18c7883a 	add	r3,r3,r3
40002c9c:	198d883a 	add	r6,r3,r6
40002ca0:	d8c00c17 	ldw	r3,48(sp)
40002ca4:	21c00617 	ldw	r7,24(r4)
40002ca8:	114b383a 	mul	r5,r2,r5
40002cac:	30c7883a 	add	r3,r6,r3
40002cb0:	18c00084 	addi	r3,r3,2
40002cb4:	1807d0ba 	srai	r3,r3,2
40002cb8:	3a53883a 	add	r9,r7,r9
40002cbc:	4953883a 	add	r9,r9,r5
40002cc0:	48c00005 	stb	r3,0(r9)
40002cc4:	d8c00c17 	ldw	r3,48(sp)
40002cc8:	21400217 	ldw	r5,8(r4)
40002ccc:	21000617 	ldw	r4,24(r4)
40002cd0:	18cd883a 	add	r6,r3,r3
40002cd4:	30cd883a 	add	r6,r6,r3
40002cd8:	d8c00b17 	ldw	r3,44(sp)
40002cdc:	1145383a 	mul	r2,r2,r5
40002ce0:	2211883a 	add	r8,r4,r8
40002ce4:	30c7883a 	add	r3,r6,r3
40002ce8:	18c00084 	addi	r3,r3,2
40002cec:	1807d0ba 	srai	r3,r3,2
40002cf0:	4091883a 	add	r8,r8,r2
40002cf4:	40c00005 	stb	r3,0(r8)
            case 6: Intra_4x4_Horizontal_Down(f,&ref[0],x,y); break;
            case 7: Intra_4x4_Vertical_Left(f,&ref[0],x,y); break;
            case 8: Intra_4x4_Horizontal_Up(f,&ref[0],x,y); break;
            default: printf("unsupported Intra4x4PredMode %d at %d,%d!\n",mode,x,y);
        }
}
40002cf8:	dfc01617 	ldw	ra,88(sp)
40002cfc:	df001517 	ldw	fp,84(sp)
40002d00:	ddc01417 	ldw	r23,80(sp)
40002d04:	dd801317 	ldw	r22,76(sp)
40002d08:	dd401217 	ldw	r21,72(sp)
40002d0c:	dd001117 	ldw	r20,68(sp)
40002d10:	dcc01017 	ldw	r19,64(sp)
40002d14:	dc800f17 	ldw	r18,60(sp)
40002d18:	dc400e17 	ldw	r17,56(sp)
40002d1c:	dc000d17 	ldw	r16,52(sp)
40002d20:	dec01704 	addi	sp,sp,92
40002d24:	f800283a 	ret
            else
              for(i=4; i<8; ++i) top(i)=L_pixel(f,x+i,y-1);
          }
        }

        switch(mode) {
40002d28:	000f883a 	mov	r7,zero
40002d2c:	1bc000c4 	addi	r15,r3,3
40002d30:	1c000084 	addi	r16,r3,2
40002d34:	da400604 	addi	r9,sp,24
40002d38:	dac00704 	addi	r11,sp,28
40002d3c:	db400804 	addi	r13,sp,32
40002d40:	da800504 	addi	r10,sp,20
40002d44:	db000404 	addi	r12,sp,16
40002d48:	db800304 	addi	r14,sp,12
static inline void Intra_4x4_Diagonal_Down_Right(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
           if(x>y) i=top(x-y-2)+2*top(x-y-1)+top(x-y)+2;
      else if(x<y) i=left(y-x-2)+2*left(y-x-1)+left(y-x)+2;
40002d4c:	04c00044 	movi	r19,1
40002d50:	048000c4 	movi	r18,3
    }
}

static inline void Intra_4x4_Diagonal_Down_Right(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
40002d54:	04400104 	movi	r17,4
    for(x=0; x<4; ++x) {
           if(x>y) i=top(x-y-2)+2*top(x-y-1)+top(x-y)+2;
      else if(x<y) i=left(y-x-2)+2*left(y-x-1)+left(y-x)+2;
40002d58:	3800421e 	bne	r7,zero,40002e64 <Intra_4x4_Dispatch+0x65c>
      else         i=top(0)+2*top(-1)+left(0)+2;
      p(x,y)=i>>2;
40002d5c:	d9400417 	ldw	r5,16(sp)
40002d60:	da000517 	ldw	r8,20(sp)
40002d64:	21800217 	ldw	r6,8(r4)
40002d68:	294b883a 	add	r5,r5,r5
40002d6c:	2a11883a 	add	r8,r5,r8
40002d70:	d9400317 	ldw	r5,12(sp)
40002d74:	25000617 	ldw	r20,24(r4)
40002d78:	414b883a 	add	r5,r8,r5
40002d7c:	29400084 	addi	r5,r5,2
40002d80:	1191383a 	mul	r8,r2,r6
40002d84:	280bd0ba 	srai	r5,r5,2
40002d88:	a0cd883a 	add	r6,r20,r3
40002d8c:	320d883a 	add	r6,r6,r8
40002d90:	31400005 	stb	r5,0(r6)
40002d94:	d9400517 	ldw	r5,20(sp)
40002d98:	da000417 	ldw	r8,16(sp)
40002d9c:	21800217 	ldw	r6,8(r4)
40002da0:	294b883a 	add	r5,r5,r5
40002da4:	2a11883a 	add	r8,r5,r8
40002da8:	25000617 	ldw	r20,24(r4)
40002dac:	d9400617 	ldw	r5,24(sp)
40002db0:	414b883a 	add	r5,r8,r5
40002db4:	29400084 	addi	r5,r5,2
40002db8:	1191383a 	mul	r8,r2,r6
40002dbc:	280bd0ba 	srai	r5,r5,2
40002dc0:	a0cd883a 	add	r6,r20,r3
40002dc4:	320d883a 	add	r6,r6,r8
40002dc8:	31400045 	stb	r5,1(r6)
40002dcc:	4d000017 	ldw	r20,0(r9)
40002dd0:	51400017 	ldw	r5,0(r10)
40002dd4:	59800017 	ldw	r6,0(r11)
40002dd8:	22000217 	ldw	r8,8(r4)
40002ddc:	a529883a 	add	r20,r20,r20
40002de0:	a14b883a 	add	r5,r20,r5
40002de4:	25400617 	ldw	r21,24(r4)
40002de8:	298b883a 	add	r5,r5,r6
40002dec:	1211383a 	mul	r8,r2,r8
40002df0:	29400084 	addi	r5,r5,2
40002df4:	280bd0ba 	srai	r5,r5,2
40002df8:	ac0d883a 	add	r6,r21,r16
40002dfc:	320d883a 	add	r6,r6,r8
40002e00:	31400005 	stb	r5,0(r6)
40002e04:	5d000017 	ldw	r20,0(r11)
40002e08:	49400017 	ldw	r5,0(r9)
40002e0c:	69800017 	ldw	r6,0(r13)
40002e10:	22000217 	ldw	r8,8(r4)
40002e14:	a529883a 	add	r20,r20,r20
40002e18:	a14b883a 	add	r5,r20,r5
40002e1c:	25400617 	ldw	r21,24(r4)
40002e20:	298b883a 	add	r5,r5,r6
40002e24:	1211383a 	mul	r8,r2,r8
40002e28:	29400084 	addi	r5,r5,2
40002e2c:	280bd0ba 	srai	r5,r5,2
40002e30:	abcd883a 	add	r6,r21,r15
40002e34:	320d883a 	add	r6,r6,r8
40002e38:	31400005 	stb	r5,0(r6)
    }
}

static inline void Intra_4x4_Diagonal_Down_Right(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
40002e3c:	39c00044 	addi	r7,r7,1
40002e40:	10800044 	addi	r2,r2,1
40002e44:	4a7fff04 	addi	r9,r9,-4
40002e48:	5affff04 	addi	r11,r11,-4
40002e4c:	6b7fff04 	addi	r13,r13,-4
40002e50:	52bfff04 	addi	r10,r10,-4
40002e54:	633fff04 	addi	r12,r12,-4
40002e58:	73bfff04 	addi	r14,r14,-4
40002e5c:	3c7fa626 	beq	r7,r17,40002cf8 <__alt_data_end+0xc0002cf8>
    for(x=0; x<4; ++x) {
           if(x>y) i=top(x-y-2)+2*top(x-y-1)+top(x-y)+2;
      else if(x<y) i=left(y-x-2)+2*left(y-x-1)+left(y-x)+2;
40002e60:	383fbe26 	beq	r7,zero,40002d5c <__alt_data_end+0xc0002d5c>
      else         i=top(0)+2*top(-1)+left(0)+2;
      p(x,y)=i>>2;
40002e64:	65000017 	ldw	r20,0(r12)
40002e68:	51400017 	ldw	r5,0(r10)
40002e6c:	71800017 	ldw	r6,0(r14)
40002e70:	22000217 	ldw	r8,8(r4)
40002e74:	a529883a 	add	r20,r20,r20
40002e78:	a14b883a 	add	r5,r20,r5
40002e7c:	25400617 	ldw	r21,24(r4)
40002e80:	298b883a 	add	r5,r5,r6
40002e84:	1211383a 	mul	r8,r2,r8
40002e88:	29400084 	addi	r5,r5,2
40002e8c:	280bd0ba 	srai	r5,r5,2
40002e90:	a8cd883a 	add	r6,r21,r3
40002e94:	320d883a 	add	r6,r6,r8
40002e98:	31400005 	stb	r5,0(r6)
static inline void Intra_4x4_Diagonal_Down_Right(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
           if(x>y) i=top(x-y-2)+2*top(x-y-1)+top(x-y)+2;
      else if(x<y) i=left(y-x-2)+2*left(y-x-1)+left(y-x)+2;
40002e9c:	3cc2b11e 	bne	r7,r19,40003964 <Intra_4x4_Dispatch+0x115c>
      else         i=top(0)+2*top(-1)+left(0)+2;
      p(x,y)=i>>2;
40002ea0:	d9400417 	ldw	r5,16(sp)
40002ea4:	da000517 	ldw	r8,20(sp)
40002ea8:	21800217 	ldw	r6,8(r4)
40002eac:	294b883a 	add	r5,r5,r5
40002eb0:	2a11883a 	add	r8,r5,r8
40002eb4:	25000617 	ldw	r20,24(r4)
40002eb8:	d9400317 	ldw	r5,12(sp)
40002ebc:	003fbc06 	br	40002db0 <__alt_data_end+0xc0002db0>
            else
              for(i=4; i<8; ++i) top(i)=L_pixel(f,x+i,y-1);
          }
        }

        switch(mode) {
40002ec0:	03400104 	movi	r13,4
40002ec4:	0019883a 	mov	r12,zero
static inline void Intra_4x4_Vertical_Right(frame *f, int *ref, int bx, int by) {
  int x,y,i,zVR;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zVR=2*x-y;
           if(zVR<-1) i=left(y-1)+2*left(y-2)+left(y-3)+2;
40002ec8:	043fffc4 	movi	r16,-1
            else
              for(i=4; i<8; ++i) top(i)=L_pixel(f,x+i,y-1);
          }
        }

        switch(mode) {
40002ecc:	07c00184 	movi	ra,6
40002ed0:	1dc00044 	addi	r23,r3,1
40002ed4:	1d8000c4 	addi	r22,r3,3
40002ed8:	1d400084 	addi	r21,r3,2
40002edc:	dcc00404 	addi	r19,sp,16
40002ee0:	dc800504 	addi	r18,sp,20
40002ee4:	dc400604 	addi	r17,sp,24
40002ee8:	03c00084 	movi	r15,2
    for(x=0; x<4; ++x) {
      zVR=2*x-y;
           if(zVR<-1) i=left(y-1)+2*left(y-2)+left(y-3)+2;
      else if(zVR<0)  i=left(0)+2*left(-1)+top(-1)+2;
      else if(zVR&1)  i=top(x-(y>>1)-2)+2*top(x-(y>>1)-1)+top(x-(y>>1))+2;
      else            i=2*top(x-(y>>1)-1)+2*top(x-(y>>1))+2;
40002eec:	6839883a 	mov	fp,r13
40002ef0:	05000144 	movi	r20,5
40002ef4:	030bc83a 	sub	r5,zero,r12
static inline void Intra_4x4_Vertical_Right(frame *f, int *ref, int bx, int by) {
  int x,y,i,zVR;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zVR=2*x-y;
           if(zVR<-1) i=left(y-1)+2*left(y-2)+left(y-3)+2;
40002ef8:	64005f16 	blt	r12,r16,40003078 <Intra_4x4_Dispatch+0x870>
      else if(zVR<0)  i=left(0)+2*left(-1)+top(-1)+2;
40002efc:	64034c26 	beq	r12,r16,40003c30 <Intra_4x4_Dispatch+0x1428>
      else if(zVR&1)  i=top(x-(y>>1)-2)+2*top(x-(y>>1)-1)+top(x-(y>>1))+2;
      else            i=2*top(x-(y>>1)-1)+2*top(x-(y>>1))+2;
40002f00:	280bd07a 	srai	r5,r5,1
40002f04:	e14fc83a 	sub	r7,fp,r5
40002f08:	a14dc83a 	sub	r6,r20,r5
40002f0c:	39cf883a 	add	r7,r7,r7
40002f10:	318d883a 	add	r6,r6,r6
40002f14:	39cf883a 	add	r7,r7,r7
40002f18:	318d883a 	add	r6,r6,r6
40002f1c:	d9d1883a 	add	r8,sp,r7
40002f20:	d98f883a 	add	r7,sp,r6
40002f24:	42000017 	ldw	r8,0(r8)
40002f28:	39800017 	ldw	r6,0(r7)
40002f2c:	418d883a 	add	r6,r8,r6
40002f30:	31800044 	addi	r6,r6,1
40002f34:	318d883a 	add	r6,r6,r6
      p(x,y)=i>>2;
40002f38:	21c00217 	ldw	r7,8(r4)
40002f3c:	22800617 	ldw	r10,24(r4)
40002f40:	1311c83a 	sub	r8,r2,r12
40002f44:	41d3383a 	mul	r9,r8,r7
40002f48:	300dd0ba 	srai	r6,r6,2
40002f4c:	50cf883a 	add	r7,r10,r3
40002f50:	3a4f883a 	add	r7,r7,r9
40002f54:	39800005 	stb	r6,0(r7)
  int x,y,i,zVR;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zVR=2*x-y;
           if(zVR<-1) i=left(y-1)+2*left(y-2)+left(y-3)+2;
      else if(zVR<0)  i=left(0)+2*left(-1)+top(-1)+2;
40002f58:	7c032926 	beq	r15,r16,40003c00 <Intra_4x4_Dispatch+0x13f8>
      else if(zVR&1)  i=top(x-(y>>1)-2)+2*top(x-(y>>1)-1)+top(x-(y>>1))+2;
40002f5c:	7980004c 	andi	r6,r15,1
40002f60:	3002b51e 	bne	r6,zero,40003a38 <Intra_4x4_Dispatch+0x1230>
      else            i=2*top(x-(y>>1)-1)+2*top(x-(y>>1))+2;
40002f64:	01c00184 	movi	r7,6
40002f68:	394dc83a 	sub	r6,r7,r5
40002f6c:	a14fc83a 	sub	r7,r20,r5
40002f70:	318d883a 	add	r6,r6,r6
40002f74:	39cf883a 	add	r7,r7,r7
40002f78:	318d883a 	add	r6,r6,r6
40002f7c:	39cf883a 	add	r7,r7,r7
40002f80:	d9cf883a 	add	r7,sp,r7
40002f84:	d98d883a 	add	r6,sp,r6
40002f88:	3a400017 	ldw	r9,0(r7)
40002f8c:	31c00017 	ldw	r7,0(r6)
40002f90:	49cf883a 	add	r7,r9,r7
40002f94:	39c00044 	addi	r7,r7,1
40002f98:	39cf883a 	add	r7,r7,r7
      p(x,y)=i>>2;
40002f9c:	22400217 	ldw	r9,8(r4)
40002fa0:	22c00617 	ldw	r11,24(r4)
40002fa4:	380fd0ba 	srai	r7,r7,2
40002fa8:	4255383a 	mul	r10,r8,r9
40002fac:	5dd3883a 	add	r9,r11,r23
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zVR=2*x-y;
           if(zVR<-1) i=left(y-1)+2*left(y-2)+left(y-3)+2;
      else if(zVR<0)  i=left(0)+2*left(-1)+top(-1)+2;
      else if(zVR&1)  i=top(x-(y>>1)-2)+2*top(x-(y>>1)-1)+top(x-(y>>1))+2;
40002fb0:	6ac0004c 	andi	r11,r13,1
      else            i=2*top(x-(y>>1)-1)+2*top(x-(y>>1))+2;
      p(x,y)=i>>2;
40002fb4:	4a93883a 	add	r9,r9,r10
40002fb8:	49c00005 	stb	r7,0(r9)
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zVR=2*x-y;
           if(zVR<-1) i=left(y-1)+2*left(y-2)+left(y-3)+2;
      else if(zVR<0)  i=left(0)+2*left(-1)+top(-1)+2;
      else if(zVR&1)  i=top(x-(y>>1)-2)+2*top(x-(y>>1)-1)+top(x-(y>>1))+2;
40002fbc:	5802c01e 	bne	r11,zero,40003ac0 <Intra_4x4_Dispatch+0x12b8>
      else            i=2*top(x-(y>>1)-1)+2*top(x-(y>>1))+2;
40002fc0:	028001c4 	movi	r10,7
40002fc4:	5153c83a 	sub	r9,r10,r5
40002fc8:	4a53883a 	add	r9,r9,r9
40002fcc:	4a53883a 	add	r9,r9,r9
40002fd0:	da53883a 	add	r9,sp,r9
40002fd4:	32800017 	ldw	r10,0(r6)
40002fd8:	49c00017 	ldw	r7,0(r9)
40002fdc:	51cf883a 	add	r7,r10,r7
40002fe0:	39c00044 	addi	r7,r7,1
40002fe4:	39cf883a 	add	r7,r7,r7
      p(x,y)=i>>2;
40002fe8:	22c00217 	ldw	r11,8(r4)
40002fec:	22800617 	ldw	r10,24(r4)
40002ff0:	380fd0ba 	srai	r7,r7,2
40002ff4:	42d7383a 	mul	r11,r8,r11
40002ff8:	5555883a 	add	r10,r10,r21
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zVR=2*x-y;
           if(zVR<-1) i=left(y-1)+2*left(y-2)+left(y-3)+2;
      else if(zVR<0)  i=left(0)+2*left(-1)+top(-1)+2;
      else if(zVR&1)  i=top(x-(y>>1)-2)+2*top(x-(y>>1)-1)+top(x-(y>>1))+2;
40002ffc:	fb80004c 	andi	r14,ra,1
      else            i=2*top(x-(y>>1)-1)+2*top(x-(y>>1))+2;
      p(x,y)=i>>2;
40003000:	52d5883a 	add	r10,r10,r11
40003004:	51c00005 	stb	r7,0(r10)
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zVR=2*x-y;
           if(zVR<-1) i=left(y-1)+2*left(y-2)+left(y-3)+2;
      else if(zVR<0)  i=left(0)+2*left(-1)+top(-1)+2;
      else if(zVR&1)  i=top(x-(y>>1)-2)+2*top(x-(y>>1)-1)+top(x-(y>>1))+2;
40003008:	7002a01e 	bne	r14,zero,40003a8c <Intra_4x4_Dispatch+0x1284>
      else            i=2*top(x-(y>>1)-1)+2*top(x-(y>>1))+2;
4000300c:	01800204 	movi	r6,8
40003010:	314bc83a 	sub	r5,r6,r5
40003014:	294b883a 	add	r5,r5,r5
40003018:	294b883a 	add	r5,r5,r5
4000301c:	d94b883a 	add	r5,sp,r5
40003020:	29800017 	ldw	r6,0(r5)
40003024:	49400017 	ldw	r5,0(r9)
40003028:	314b883a 	add	r5,r6,r5
4000302c:	29400044 	addi	r5,r5,1
40003030:	294b883a 	add	r5,r5,r5
      p(x,y)=i>>2;
40003034:	21800217 	ldw	r6,8(r4)
40003038:	21c00617 	ldw	r7,24(r4)
4000303c:	280bd0ba 	srai	r5,r5,2
40003040:	4191383a 	mul	r8,r8,r6
40003044:	3d8d883a 	add	r6,r7,r22
40003048:	6b7fffc4 	addi	r13,r13,-1
4000304c:	3211883a 	add	r8,r6,r8
40003050:	41400005 	stb	r5,0(r8)
40003054:	633fffc4 	addi	r12,r12,-1
40003058:	ffffffc4 	addi	ra,ra,-1
4000305c:	7bffffc4 	addi	r15,r15,-1
40003060:	9cffff04 	addi	r19,r19,-4
40003064:	94bfff04 	addi	r18,r18,-4
40003068:	8c7fff04 	addi	r17,r17,-4
    }
}

static inline void Intra_4x4_Vertical_Right(frame *f, int *ref, int bx, int by) {
  int x,y,i,zVR;
  for(y=0; y<4; ++y)
4000306c:	683f2226 	beq	r13,zero,40002cf8 <__alt_data_end+0xc0002cf8>
40003070:	030bc83a 	sub	r5,zero,r12
    for(x=0; x<4; ++x) {
      zVR=2*x-y;
           if(zVR<-1) i=left(y-1)+2*left(y-2)+left(y-3)+2;
40003074:	643fa10e 	bge	r12,r16,40002efc <__alt_data_end+0xc0002efc>
40003078:	92000017 	ldw	r8,0(r18)
4000307c:	99800017 	ldw	r6,0(r19)
40003080:	89c00017 	ldw	r7,0(r17)
40003084:	4211883a 	add	r8,r8,r8
40003088:	418d883a 	add	r6,r8,r6
4000308c:	31cd883a 	add	r6,r6,r7
40003090:	280bd07a 	srai	r5,r5,1
40003094:	31800084 	addi	r6,r6,2
40003098:	003fa706 	br	40002f38 <__alt_data_end+0xc0002f38>

static inline void Intra_4x4_Vertical(frame *f, int *ref, int bx, int by) {
  int x,y;
  for(y=0; y<4; ++y){
    for(x=0; x<4; ++x){
      p(x,y)=top(x);
4000309c:	21400217 	ldw	r5,8(r4)
400030a0:	21c00617 	ldw	r7,24(r4)
400030a4:	1a400044 	addi	r9,r3,1
400030a8:	114d383a 	mul	r6,r2,r5
400030ac:	38cb883a 	add	r5,r7,r3
400030b0:	1a000084 	addi	r8,r3,2
400030b4:	298b883a 	add	r5,r5,r6
400030b8:	d9800517 	ldw	r6,20(sp)
400030bc:	29800005 	stb	r6,0(r5)
400030c0:	21400217 	ldw	r5,8(r4)
400030c4:	21c00617 	ldw	r7,24(r4)
400030c8:	114d383a 	mul	r6,r2,r5
400030cc:	3a4b883a 	add	r5,r7,r9
400030d0:	298b883a 	add	r5,r5,r6
400030d4:	d9800617 	ldw	r6,24(sp)
400030d8:	29800005 	stb	r6,0(r5)
400030dc:	21800217 	ldw	r6,8(r4)
400030e0:	21400617 	ldw	r5,24(r4)
400030e4:	118f383a 	mul	r7,r2,r6
400030e8:	2a0d883a 	add	r6,r5,r8
400030ec:	194000c4 	addi	r5,r3,3
400030f0:	31cd883a 	add	r6,r6,r7
400030f4:	d9c00717 	ldw	r7,28(sp)
400030f8:	31c00005 	stb	r7,0(r6)
400030fc:	21800217 	ldw	r6,8(r4)
40003100:	21c00617 	ldw	r7,24(r4)
40003104:	1195383a 	mul	r10,r2,r6
40003108:	394d883a 	add	r6,r7,r5
4000310c:	11c00044 	addi	r7,r2,1
40003110:	328d883a 	add	r6,r6,r10
40003114:	da800817 	ldw	r10,32(sp)
40003118:	32800005 	stb	r10,0(r6)
4000311c:	22800217 	ldw	r10,8(r4)
40003120:	21800617 	ldw	r6,24(r4)
40003124:	dac00517 	ldw	r11,20(sp)
40003128:	3a99383a 	mul	r12,r7,r10
4000312c:	30d5883a 	add	r10,r6,r3
40003130:	11800084 	addi	r6,r2,2
40003134:	5315883a 	add	r10,r10,r12
40003138:	52c00005 	stb	r11,0(r10)
4000313c:	22800217 	ldw	r10,8(r4)
40003140:	22c00617 	ldw	r11,24(r4)
40003144:	108000c4 	addi	r2,r2,3
40003148:	3a99383a 	mul	r12,r7,r10
4000314c:	5a55883a 	add	r10,r11,r9
40003150:	dac00617 	ldw	r11,24(sp)
40003154:	5315883a 	add	r10,r10,r12
40003158:	52c00005 	stb	r11,0(r10)
4000315c:	23000217 	ldw	r12,8(r4)
40003160:	22800617 	ldw	r10,24(r4)
40003164:	3b1b383a 	mul	r13,r7,r12
40003168:	5219883a 	add	r12,r10,r8
4000316c:	da800717 	ldw	r10,28(sp)
40003170:	6359883a 	add	r12,r12,r13
40003174:	62800005 	stb	r10,0(r12)
40003178:	22c00217 	ldw	r11,8(r4)
4000317c:	22800617 	ldw	r10,24(r4)
40003180:	3ad7383a 	mul	r11,r7,r11
40003184:	514f883a 	add	r7,r10,r5
40003188:	da800817 	ldw	r10,32(sp)
4000318c:	3acf883a 	add	r7,r7,r11
40003190:	3a800005 	stb	r10,0(r7)
40003194:	21c00217 	ldw	r7,8(r4)
40003198:	22800617 	ldw	r10,24(r4)
4000319c:	31d7383a 	mul	r11,r6,r7
400031a0:	50cf883a 	add	r7,r10,r3
400031a4:	da800517 	ldw	r10,20(sp)
400031a8:	3acf883a 	add	r7,r7,r11
400031ac:	3a800005 	stb	r10,0(r7)
400031b0:	21c00217 	ldw	r7,8(r4)
400031b4:	22800617 	ldw	r10,24(r4)
400031b8:	31d7383a 	mul	r11,r6,r7
400031bc:	524f883a 	add	r7,r10,r9
400031c0:	da800617 	ldw	r10,24(sp)
400031c4:	3acf883a 	add	r7,r7,r11
400031c8:	3a800005 	stb	r10,0(r7)
400031cc:	22c00217 	ldw	r11,8(r4)
400031d0:	21c00617 	ldw	r7,24(r4)
400031d4:	32d9383a 	mul	r12,r6,r11
400031d8:	3a17883a 	add	r11,r7,r8
400031dc:	d9c00717 	ldw	r7,28(sp)
400031e0:	5b17883a 	add	r11,r11,r12
400031e4:	59c00005 	stb	r7,0(r11)
400031e8:	22800217 	ldw	r10,8(r4)
400031ec:	21c00617 	ldw	r7,24(r4)
400031f0:	3295383a 	mul	r10,r6,r10
400031f4:	394d883a 	add	r6,r7,r5
400031f8:	d9c00817 	ldw	r7,32(sp)
400031fc:	328d883a 	add	r6,r6,r10
40003200:	31c00005 	stb	r7,0(r6)
40003204:	22800217 	ldw	r10,8(r4)
40003208:	21800617 	ldw	r6,24(r4)
4000320c:	1295383a 	mul	r10,r2,r10
40003210:	30c7883a 	add	r3,r6,r3
40003214:	d9800517 	ldw	r6,20(sp)
40003218:	1a87883a 	add	r3,r3,r10
4000321c:	19800005 	stb	r6,0(r3)
40003220:	20c00217 	ldw	r3,8(r4)
40003224:	21800617 	ldw	r6,24(r4)
40003228:	10c7383a 	mul	r3,r2,r3
4000322c:	3253883a 	add	r9,r6,r9
40003230:	48d3883a 	add	r9,r9,r3
40003234:	d8c00617 	ldw	r3,24(sp)
40003238:	48c00005 	stb	r3,0(r9)
4000323c:	20c00217 	ldw	r3,8(r4)
40003240:	21800617 	ldw	r6,24(r4)
40003244:	10c7383a 	mul	r3,r2,r3
40003248:	3211883a 	add	r8,r6,r8
4000324c:	40d1883a 	add	r8,r8,r3
40003250:	d8c00717 	ldw	r3,28(sp)
40003254:	40c00005 	stb	r3,0(r8)
40003258:	20c00217 	ldw	r3,8(r4)
4000325c:	21000617 	ldw	r4,24(r4)
40003260:	10c5383a 	mul	r2,r2,r3
40003264:	214b883a 	add	r5,r4,r5
40003268:	288b883a 	add	r5,r5,r2
4000326c:	d8800817 	ldw	r2,32(sp)
40003270:	28800005 	stb	r2,0(r5)
40003274:	003ea006 	br	40002cf8 <__alt_data_end+0xc0002cf8>

static inline void Intra_4x4_Horizontal(frame *f, int *ref, int bx, int by) {
  int x,y;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x)
      p(x,y)=left(y);
40003278:	21400217 	ldw	r5,8(r4)
4000327c:	21c00617 	ldw	r7,24(r4)
40003280:	1a400044 	addi	r9,r3,1
40003284:	114d383a 	mul	r6,r2,r5
40003288:	38cb883a 	add	r5,r7,r3
4000328c:	1a000084 	addi	r8,r3,2
40003290:	298b883a 	add	r5,r5,r6
40003294:	d9800317 	ldw	r6,12(sp)
40003298:	29800005 	stb	r6,0(r5)
4000329c:	21400217 	ldw	r5,8(r4)
400032a0:	21c00617 	ldw	r7,24(r4)
400032a4:	114d383a 	mul	r6,r2,r5
400032a8:	3a4b883a 	add	r5,r7,r9
400032ac:	298b883a 	add	r5,r5,r6
400032b0:	d9800317 	ldw	r6,12(sp)
400032b4:	29800005 	stb	r6,0(r5)
400032b8:	21800217 	ldw	r6,8(r4)
400032bc:	21400617 	ldw	r5,24(r4)
400032c0:	118f383a 	mul	r7,r2,r6
400032c4:	2a0d883a 	add	r6,r5,r8
400032c8:	194000c4 	addi	r5,r3,3
400032cc:	31cd883a 	add	r6,r6,r7
400032d0:	d9c00317 	ldw	r7,12(sp)
400032d4:	31c00005 	stb	r7,0(r6)
400032d8:	21800217 	ldw	r6,8(r4)
400032dc:	21c00617 	ldw	r7,24(r4)
400032e0:	1195383a 	mul	r10,r2,r6
400032e4:	394d883a 	add	r6,r7,r5
400032e8:	11c00044 	addi	r7,r2,1
400032ec:	328d883a 	add	r6,r6,r10
400032f0:	da800317 	ldw	r10,12(sp)
400032f4:	32800005 	stb	r10,0(r6)
400032f8:	22800217 	ldw	r10,8(r4)
400032fc:	21800617 	ldw	r6,24(r4)
40003300:	dac00217 	ldw	r11,8(sp)
40003304:	3a99383a 	mul	r12,r7,r10
40003308:	30d5883a 	add	r10,r6,r3
4000330c:	11800084 	addi	r6,r2,2
40003310:	5315883a 	add	r10,r10,r12
40003314:	52c00005 	stb	r11,0(r10)
40003318:	22800217 	ldw	r10,8(r4)
4000331c:	22c00617 	ldw	r11,24(r4)
40003320:	108000c4 	addi	r2,r2,3
40003324:	3a99383a 	mul	r12,r7,r10
40003328:	5a55883a 	add	r10,r11,r9
4000332c:	dac00217 	ldw	r11,8(sp)
40003330:	5315883a 	add	r10,r10,r12
40003334:	52c00005 	stb	r11,0(r10)
40003338:	23000217 	ldw	r12,8(r4)
4000333c:	22800617 	ldw	r10,24(r4)
40003340:	3b1b383a 	mul	r13,r7,r12
40003344:	5219883a 	add	r12,r10,r8
40003348:	da800217 	ldw	r10,8(sp)
4000334c:	6359883a 	add	r12,r12,r13
40003350:	62800005 	stb	r10,0(r12)
40003354:	22c00217 	ldw	r11,8(r4)
40003358:	22800617 	ldw	r10,24(r4)
4000335c:	3ad7383a 	mul	r11,r7,r11
40003360:	514f883a 	add	r7,r10,r5
40003364:	da800217 	ldw	r10,8(sp)
40003368:	3acf883a 	add	r7,r7,r11
4000336c:	3a800005 	stb	r10,0(r7)
40003370:	21c00217 	ldw	r7,8(r4)
40003374:	22800617 	ldw	r10,24(r4)
40003378:	31d7383a 	mul	r11,r6,r7
4000337c:	50cf883a 	add	r7,r10,r3
40003380:	da800117 	ldw	r10,4(sp)
40003384:	3acf883a 	add	r7,r7,r11
40003388:	3a800005 	stb	r10,0(r7)
4000338c:	21c00217 	ldw	r7,8(r4)
40003390:	22800617 	ldw	r10,24(r4)
40003394:	31d7383a 	mul	r11,r6,r7
40003398:	524f883a 	add	r7,r10,r9
4000339c:	da800117 	ldw	r10,4(sp)
400033a0:	3acf883a 	add	r7,r7,r11
400033a4:	3a800005 	stb	r10,0(r7)
400033a8:	22c00217 	ldw	r11,8(r4)
400033ac:	21c00617 	ldw	r7,24(r4)
400033b0:	32d9383a 	mul	r12,r6,r11
400033b4:	3a17883a 	add	r11,r7,r8
400033b8:	d9c00117 	ldw	r7,4(sp)
400033bc:	5b17883a 	add	r11,r11,r12
400033c0:	59c00005 	stb	r7,0(r11)
400033c4:	22800217 	ldw	r10,8(r4)
400033c8:	21c00617 	ldw	r7,24(r4)
400033cc:	3295383a 	mul	r10,r6,r10
400033d0:	394d883a 	add	r6,r7,r5
400033d4:	d9c00117 	ldw	r7,4(sp)
400033d8:	328d883a 	add	r6,r6,r10
400033dc:	31c00005 	stb	r7,0(r6)
400033e0:	22800217 	ldw	r10,8(r4)
400033e4:	21800617 	ldw	r6,24(r4)
400033e8:	1295383a 	mul	r10,r2,r10
400033ec:	30c7883a 	add	r3,r6,r3
400033f0:	d9800017 	ldw	r6,0(sp)
400033f4:	1a87883a 	add	r3,r3,r10
400033f8:	19800005 	stb	r6,0(r3)
400033fc:	20c00217 	ldw	r3,8(r4)
40003400:	21800617 	ldw	r6,24(r4)
40003404:	10c7383a 	mul	r3,r2,r3
40003408:	3253883a 	add	r9,r6,r9
4000340c:	48d3883a 	add	r9,r9,r3
40003410:	d8c00017 	ldw	r3,0(sp)
40003414:	48c00005 	stb	r3,0(r9)
40003418:	20c00217 	ldw	r3,8(r4)
4000341c:	21800617 	ldw	r6,24(r4)
40003420:	10c7383a 	mul	r3,r2,r3
40003424:	3211883a 	add	r8,r6,r8
40003428:	40d1883a 	add	r8,r8,r3
4000342c:	d8c00017 	ldw	r3,0(sp)
40003430:	40c00005 	stb	r3,0(r8)
40003434:	20c00217 	ldw	r3,8(r4)
40003438:	21000617 	ldw	r4,24(r4)
4000343c:	10c5383a 	mul	r2,r2,r3
40003440:	214b883a 	add	r5,r4,r5
40003444:	288b883a 	add	r5,r5,r2
40003448:	d8800017 	ldw	r2,0(sp)
4000344c:	28800005 	stb	r2,0(r5)
40003450:	003e2906 	br	40002cf8 <__alt_data_end+0xc0002cf8>
            else
              for(i=4; i<8; ++i) top(i)=L_pixel(f,x+i,y-1);
          }
        }

        switch(mode) {
40003454:	04bfff44 	movi	r18,-3
40003458:	1c000044 	addi	r16,r3,1
4000345c:	1bc000c4 	addi	r15,r3,3
40003460:	1b800084 	addi	r14,r3,2
40003464:	d9c00404 	addi	r7,sp,16
40003468:	da000304 	addi	r8,sp,12
4000346c:	db000604 	addi	r12,sp,24
40003470:	da800504 	addi	r10,sp,20
  int x,y,i,zHD;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zHD=2*y-x;
           if(zHD<-1) i=top(x-1)+2*top(x-2)+top(x-3)+2;
      else if(zHD<0)  i=left(0)+2*left(-1)+top(0)+2;
40003474:	02ffffc4 	movi	r11,-1
static inline void Intra_4x4_Horizontal_Down(frame *f, int *ref, int bx, int by) {
  int x,y,i,zHD;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zHD=2*y-x;
           if(zHD<-1) i=top(x-1)+2*top(x-2)+top(x-3)+2;
40003478:	9023883a 	mov	r17,r18
    }
}

static inline void Intra_4x4_Horizontal_Down(frame *f, int *ref, int bx, int by) {
  int x,y,i,zHD;
  for(y=0; y<4; ++y)
4000347c:	03400144 	movi	r13,5
      zHD=2*y-x;
           if(zHD<-1) i=top(x-1)+2*top(x-2)+top(x-3)+2;
      else if(zHD<0)  i=left(0)+2*left(-1)+top(0)+2;
      else if(zHD&1)  i=left(y-(x>>1)-2)+2*left(y-(x>>1)-1)+left(y-(x>>1))+2;
      else            i=2*left(y-(x>>1)-1)+2*left(y-(x>>1))+2;
      p(x,y)=i>>2;
40003480:	3a400017 	ldw	r9,0(r7)
40003484:	41400017 	ldw	r5,0(r8)
40003488:	21800217 	ldw	r6,8(r4)
4000348c:	24c00617 	ldw	r19,24(r4)
40003490:	494b883a 	add	r5,r9,r5
40003494:	29400044 	addi	r5,r5,1
40003498:	1193383a 	mul	r9,r2,r6
4000349c:	294b883a 	add	r5,r5,r5
400034a0:	280bd0ba 	srai	r5,r5,2
400034a4:	98cd883a 	add	r6,r19,r3
400034a8:	324d883a 	add	r6,r6,r9
400034ac:	31400005 	stb	r5,0(r6)
400034b0:	92400084 	addi	r9,r18,2
  int x,y,i,zHD;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zHD=2*y-x;
           if(zHD<-1) i=top(x-1)+2*top(x-2)+top(x-3)+2;
      else if(zHD<0)  i=left(0)+2*left(-1)+top(0)+2;
400034b4:	4ac1ca26 	beq	r9,r11,40003be0 <Intra_4x4_Dispatch+0x13d8>
      else if(zHD&1)  i=left(y-(x>>1)-2)+2*left(y-(x>>1)-1)+left(y-(x>>1))+2;
400034b8:	39800017 	ldw	r6,0(r7)
400034bc:	54c00017 	ldw	r19,0(r10)
400034c0:	41400017 	ldw	r5,0(r8)
400034c4:	318d883a 	add	r6,r6,r6
400034c8:	34e7883a 	add	r19,r6,r19
400034cc:	9967883a 	add	r19,r19,r5
400034d0:	9cc00084 	addi	r19,r19,2
      else            i=2*left(y-(x>>1)-1)+2*left(y-(x>>1))+2;
      p(x,y)=i>>2;
400034d4:	21400217 	ldw	r5,8(r4)
400034d8:	25000617 	ldw	r20,24(r4)
400034dc:	9827d0ba 	srai	r19,r19,2
400034e0:	114d383a 	mul	r6,r2,r5
400034e4:	a40b883a 	add	r5,r20,r16
400034e8:	298b883a 	add	r5,r5,r6
400034ec:	2cc00005 	stb	r19,0(r5)
static inline void Intra_4x4_Horizontal_Down(frame *f, int *ref, int bx, int by) {
  int x,y,i,zHD;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zHD=2*y-x;
           if(zHD<-1) i=top(x-1)+2*top(x-2)+top(x-3)+2;
400034f0:	94414926 	beq	r18,r17,40003a18 <Intra_4x4_Dispatch+0x1210>
      else if(zHD<0)  i=left(0)+2*left(-1)+top(0)+2;
      else if(zHD&1)  i=left(y-(x>>1)-2)+2*left(y-(x>>1)-1)+left(y-(x>>1))+2;
      else            i=2*left(y-(x>>1)-1)+2*left(y-(x>>1))+2;
400034f4:	51800017 	ldw	r6,0(r10)
400034f8:	39400017 	ldw	r5,0(r7)
400034fc:	314b883a 	add	r5,r6,r5
40003500:	29400044 	addi	r5,r5,1
40003504:	294b883a 	add	r5,r5,r5
      p(x,y)=i>>2;
40003508:	21800217 	ldw	r6,8(r4)
4000350c:	25000617 	ldw	r20,24(r4)
40003510:	280bd0ba 	srai	r5,r5,2
40003514:	11a7383a 	mul	r19,r2,r6
40003518:	a38d883a 	add	r6,r20,r14
4000351c:	34cd883a 	add	r6,r6,r19
40003520:	31400005 	stb	r5,0(r6)
static inline void Intra_4x4_Horizontal_Down(frame *f, int *ref, int bx, int by) {
  int x,y,i,zHD;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zHD=2*y-x;
           if(zHD<-1) i=top(x-1)+2*top(x-2)+top(x-3)+2;
40003524:	92c13416 	blt	r18,r11,400039f8 <Intra_4x4_Dispatch+0x11f0>
      else if(zHD<0)  i=left(0)+2*left(-1)+top(0)+2;
40003528:	92c1c926 	beq	r18,r11,40003c50 <Intra_4x4_Dispatch+0x1448>
      else if(zHD&1)  i=left(y-(x>>1)-2)+2*left(y-(x>>1)-1)+left(y-(x>>1))+2;
4000352c:	54800017 	ldw	r18,0(r10)
40003530:	61400017 	ldw	r5,0(r12)
40003534:	39800017 	ldw	r6,0(r7)
40003538:	94a5883a 	add	r18,r18,r18
4000353c:	914b883a 	add	r5,r18,r5
40003540:	298b883a 	add	r5,r5,r6
40003544:	29400084 	addi	r5,r5,2
      else            i=2*left(y-(x>>1)-1)+2*left(y-(x>>1))+2;
      p(x,y)=i>>2;
40003548:	21800217 	ldw	r6,8(r4)
4000354c:	24800617 	ldw	r18,24(r4)
40003550:	280bd0ba 	srai	r5,r5,2
40003554:	11a7383a 	mul	r19,r2,r6
40003558:	93cd883a 	add	r6,r18,r15
4000355c:	39ffff04 	addi	r7,r7,-4
40003560:	34cd883a 	add	r6,r6,r19
40003564:	31400005 	stb	r5,0(r6)
40003568:	4825883a 	mov	r18,r9
4000356c:	423fff04 	addi	r8,r8,-4
40003570:	10800044 	addi	r2,r2,1
40003574:	633fff04 	addi	r12,r12,-4
40003578:	52bfff04 	addi	r10,r10,-4
    }
}

static inline void Intra_4x4_Horizontal_Down(frame *f, int *ref, int bx, int by) {
  int x,y,i,zHD;
  for(y=0; y<4; ++y)
4000357c:	4b7fc01e 	bne	r9,r13,40003480 <__alt_data_end+0xc0003480>
40003580:	003ddd06 	br	40002cf8 <__alt_data_end+0xc0002cf8>
            else
              for(i=4; i<8; ++i) top(i)=L_pixel(f,x+i,y-1);
          }
        }

        switch(mode) {
40003584:	03000044 	movi	r12,1
40003588:	01c000c4 	movi	r7,3
static inline void Intra_4x4_Horizontal_Up(frame *f, int *ref, int bx, int by) {
  int x,y,i,zHU;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zHU=x+2*y;
           if(zHU>5)  i=4*left(3);
4000358c:	05000244 	movi	r20,9
40003590:	1b27883a 	add	r19,r3,r12
40003594:	1c8000c4 	addi	r18,r3,3
40003598:	1c400084 	addi	r17,r3,2
4000359c:	dac00204 	addi	r11,sp,8
400035a0:	d81f883a 	mov	r15,sp
400035a4:	db800104 	addi	r14,sp,4
400035a8:	db400304 	addi	r13,sp,12
            else
              for(i=4; i<8; ++i) top(i)=L_pixel(f,x+i,y-1);
          }
        }

        switch(mode) {
400035ac:	6013883a 	mov	r9,r12
static inline void Intra_4x4_Horizontal_Up(frame *f, int *ref, int bx, int by) {
  int x,y,i,zHU;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zHU=x+2*y;
           if(zHU>5)  i=4*left(3);
400035b0:	02800144 	movi	r10,5
    }
}

static inline void Intra_4x4_Horizontal_Up(frame *f, int *ref, int bx, int by) {
  int x,y,i,zHU;
  for(y=0; y<4; ++y)
400035b4:	040002c4 	movi	r16,11
    for(x=0; x<4; ++x) {
      zHU=x+2*y;
           if(zHU>5)  i=4*left(3);
400035b8:	3d004426 	beq	r7,r20,400036cc <Intra_4x4_Dispatch+0xec4>
      else if(zHU==5) i=left(2)+3*left(3)+2;
      else if(zHU&1)  i=left(y+(x>>1))+2*left(y+(x>>1)+1)+left(y+(x>>1)+2)+2;
      else            i=2*left(y+(x>>1))+2*left(y+(x>>1)+1)+2;
      p(x,y)=i>>2;
400035bc:	6a000017 	ldw	r8,0(r13)
400035c0:	59400017 	ldw	r5,0(r11)
400035c4:	21800217 	ldw	r6,8(r4)
400035c8:	25400617 	ldw	r21,24(r4)
400035cc:	414b883a 	add	r5,r8,r5
400035d0:	29400044 	addi	r5,r5,1
400035d4:	1191383a 	mul	r8,r2,r6
400035d8:	294b883a 	add	r5,r5,r5
400035dc:	280bd0ba 	srai	r5,r5,2
400035e0:	a8cd883a 	add	r6,r21,r3
400035e4:	320d883a 	add	r6,r6,r8
400035e8:	31400005 	stb	r5,0(r6)
static inline void Intra_4x4_Horizontal_Up(frame *f, int *ref, int bx, int by) {
  int x,y,i,zHU;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zHU=x+2*y;
           if(zHU>5)  i=4*left(3);
400035ec:	53004136 	bltu	r10,r12,400036f4 <Intra_4x4_Dispatch+0xeec>
      else if(zHU==5) i=left(2)+3*left(3)+2;
400035f0:	6281d226 	beq	r12,r10,40003d3c <Intra_4x4_Dispatch+0x1534>
      else if(zHU&1)  i=left(y+(x>>1))+2*left(y+(x>>1)+1)+left(y+(x>>1)+2)+2;
400035f4:	5a000017 	ldw	r8,0(r11)
400035f8:	69400017 	ldw	r5,0(r13)
400035fc:	71800017 	ldw	r6,0(r14)
40003600:	4211883a 	add	r8,r8,r8
40003604:	414b883a 	add	r5,r8,r5
40003608:	298b883a 	add	r5,r5,r6
4000360c:	29400084 	addi	r5,r5,2
      else            i=2*left(y+(x>>1))+2*left(y+(x>>1)+1)+2;
      p(x,y)=i>>2;
40003610:	21800217 	ldw	r6,8(r4)
40003614:	25400617 	ldw	r21,24(r4)
40003618:	280bd0ba 	srai	r5,r5,2
4000361c:	1191383a 	mul	r8,r2,r6
40003620:	accd883a 	add	r6,r21,r19
static inline void Intra_4x4_Horizontal_Up(frame *f, int *ref, int bx, int by) {
  int x,y,i,zHU;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zHU=x+2*y;
           if(zHU>5)  i=4*left(3);
40003624:	4a6b883a 	add	r21,r9,r9
      else if(zHU==5) i=left(2)+3*left(3)+2;
      else if(zHU&1)  i=left(y+(x>>1))+2*left(y+(x>>1)+1)+left(y+(x>>1)+2)+2;
      else            i=2*left(y+(x>>1))+2*left(y+(x>>1)+1)+2;
      p(x,y)=i>>2;
40003628:	320d883a 	add	r6,r6,r8
4000362c:	31400005 	stb	r5,0(r6)
static inline void Intra_4x4_Horizontal_Up(frame *f, int *ref, int bx, int by) {
  int x,y,i,zHU;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zHU=x+2*y;
           if(zHU>5)  i=4*left(3);
40003630:	5540c836 	bltu	r10,r21,40003954 <Intra_4x4_Dispatch+0x114c>
      else if(zHU==5) i=left(2)+3*left(3)+2;
      else if(zHU&1)  i=left(y+(x>>1))+2*left(y+(x>>1)+1)+left(y+(x>>1)+2)+2;
      else            i=2*left(y+(x>>1))+2*left(y+(x>>1)+1)+2;
40003634:	59800017 	ldw	r6,0(r11)
40003638:	71400017 	ldw	r5,0(r14)
4000363c:	314b883a 	add	r5,r6,r5
40003640:	29400044 	addi	r5,r5,1
40003644:	294b883a 	add	r5,r5,r5
      p(x,y)=i>>2;
40003648:	21800217 	ldw	r6,8(r4)
4000364c:	25400617 	ldw	r21,24(r4)
40003650:	280bd0ba 	srai	r5,r5,2
40003654:	1191383a 	mul	r8,r2,r6
40003658:	ac4d883a 	add	r6,r21,r17
4000365c:	320d883a 	add	r6,r6,r8
40003660:	31400005 	stb	r5,0(r6)
static inline void Intra_4x4_Horizontal_Up(frame *f, int *ref, int bx, int by) {
  int x,y,i,zHU;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zHU=x+2*y;
           if(zHU>5)  i=4*left(3);
40003664:	51c0b736 	bltu	r10,r7,40003944 <Intra_4x4_Dispatch+0x113c>
      else if(zHU==5) i=left(2)+3*left(3)+2;
40003668:	3a81ad26 	beq	r7,r10,40003d20 <Intra_4x4_Dispatch+0x1518>
      else if(zHU&1)  i=left(y+(x>>1))+2*left(y+(x>>1)+1)+left(y+(x>>1)+2)+2;
4000366c:	72000017 	ldw	r8,0(r14)
40003670:	59400017 	ldw	r5,0(r11)
40003674:	79800017 	ldw	r6,0(r15)
40003678:	4211883a 	add	r8,r8,r8
4000367c:	414b883a 	add	r5,r8,r5
40003680:	298b883a 	add	r5,r5,r6
40003684:	29400084 	addi	r5,r5,2
      else            i=2*left(y+(x>>1))+2*left(y+(x>>1)+1)+2;
      p(x,y)=i>>2;
40003688:	21800217 	ldw	r6,8(r4)
4000368c:	25400617 	ldw	r21,24(r4)
40003690:	280bd0ba 	srai	r5,r5,2
40003694:	1191383a 	mul	r8,r2,r6
40003698:	ac8d883a 	add	r6,r21,r18
4000369c:	39c00084 	addi	r7,r7,2
400036a0:	320d883a 	add	r6,r6,r8
400036a4:	31400005 	stb	r5,0(r6)
400036a8:	5affff04 	addi	r11,r11,-4
400036ac:	7bffff04 	addi	r15,r15,-4
400036b0:	73bfff04 	addi	r14,r14,-4
400036b4:	4a400044 	addi	r9,r9,1
400036b8:	10800044 	addi	r2,r2,1
400036bc:	6b7fff04 	addi	r13,r13,-4
400036c0:	63000084 	addi	r12,r12,2
    }
}

static inline void Intra_4x4_Horizontal_Up(frame *f, int *ref, int bx, int by) {
  int x,y,i,zHU;
  for(y=0; y<4; ++y)
400036c4:	3c3d8c26 	beq	r7,r16,40002cf8 <__alt_data_end+0xc0002cf8>
    for(x=0; x<4; ++x) {
      zHU=x+2*y;
           if(zHU>5)  i=4*left(3);
400036c8:	3d3fbc1e 	bne	r7,r20,400035bc <__alt_data_end+0xc00035bc>
      else if(zHU==5) i=left(2)+3*left(3)+2;
      else if(zHU&1)  i=left(y+(x>>1))+2*left(y+(x>>1)+1)+left(y+(x>>1)+2)+2;
      else            i=2*left(y+(x>>1))+2*left(y+(x>>1)+1)+2;
      p(x,y)=i>>2;
400036cc:	d9400017 	ldw	r5,0(sp)
400036d0:	21800217 	ldw	r6,8(r4)
400036d4:	25400617 	ldw	r21,24(r4)
400036d8:	294b883a 	add	r5,r5,r5
400036dc:	1191383a 	mul	r8,r2,r6
400036e0:	294b883a 	add	r5,r5,r5
400036e4:	280bd0ba 	srai	r5,r5,2
400036e8:	a8cd883a 	add	r6,r21,r3
400036ec:	320d883a 	add	r6,r6,r8
400036f0:	31400005 	stb	r5,0(r6)
static inline void Intra_4x4_Horizontal_Up(frame *f, int *ref, int bx, int by) {
  int x,y,i,zHU;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zHU=x+2*y;
           if(zHU>5)  i=4*left(3);
400036f4:	d9400017 	ldw	r5,0(sp)
400036f8:	294b883a 	add	r5,r5,r5
400036fc:	294b883a 	add	r5,r5,r5
40003700:	003fc306 	br	40003610 <__alt_data_end+0xc0003610>
            else
              for(i=4; i<8; ++i) top(i)=L_pixel(f,x+i,y-1);
          }
        }

        switch(mode) {
40003704:	000f883a 	mov	r7,zero

static inline void Intra_4x4_Vertical_Left(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      if(y&1) i=top(x+(y>>1))+2*top(x+(y>>1)+1)+top(x+(y>>1)+2)+2;
40003708:	3940004c 	andi	r5,r7,1
4000370c:	1ac000c4 	addi	r11,r3,3
40003710:	1a800044 	addi	r10,r3,1
40003714:	1a400084 	addi	r9,r3,2
    }
}

static inline void Intra_4x4_Vertical_Left(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
40003718:	03000104 	movi	r12,4
    for(x=0; x<4; ++x) {
      if(y&1) i=top(x+(y>>1))+2*top(x+(y>>1)+1)+top(x+(y>>1)+2)+2;
4000371c:	2800421e 	bne	r5,zero,40003828 <Intra_4x4_Dispatch+0x1020>
      else    i=2*top(x+(y>>1))+2*top(x+(y>>1)+1)+2;
40003720:	380bd07a 	srai	r5,r7,1
      p(x,y)=i>>2;
40003724:	22000217 	ldw	r8,8(r4)
40003728:	23c00617 	ldw	r15,24(r4)
static inline void Intra_4x4_Vertical_Left(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      if(y&1) i=top(x+(y>>1))+2*top(x+(y>>1)+1)+top(x+(y>>1)+2)+2;
      else    i=2*top(x+(y>>1))+2*top(x+(y>>1)+1)+2;
4000372c:	29400144 	addi	r5,r5,5
40003730:	294b883a 	add	r5,r5,r5
40003734:	294b883a 	add	r5,r5,r5
40003738:	2b800104 	addi	r14,r5,4
4000373c:	db9d883a 	add	r14,sp,r14
40003740:	d94d883a 	add	r6,sp,r5
      p(x,y)=i>>2;
40003744:	34000017 	ldw	r16,0(r6)
40003748:	71800017 	ldw	r6,0(r14)
4000374c:	121b383a 	mul	r13,r2,r8
40003750:	78d1883a 	add	r8,r15,r3
40003754:	818d883a 	add	r6,r16,r6
40003758:	31800044 	addi	r6,r6,1
4000375c:	318d883a 	add	r6,r6,r6
40003760:	300dd0ba 	srai	r6,r6,2
40003764:	4351883a 	add	r8,r8,r13
static inline void Intra_4x4_Vertical_Left(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      if(y&1) i=top(x+(y>>1))+2*top(x+(y>>1)+1)+top(x+(y>>1)+2)+2;
      else    i=2*top(x+(y>>1))+2*top(x+(y>>1)+1)+2;
40003768:	2bc00204 	addi	r15,r5,8
      p(x,y)=i>>2;
4000376c:	41800005 	stb	r6,0(r8)
static inline void Intra_4x4_Vertical_Left(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      if(y&1) i=top(x+(y>>1))+2*top(x+(y>>1)+1)+top(x+(y>>1)+2)+2;
      else    i=2*top(x+(y>>1))+2*top(x+(y>>1)+1)+2;
40003770:	dbdf883a 	add	r15,sp,r15
      p(x,y)=i>>2;
40003774:	73400017 	ldw	r13,0(r14)
40003778:	79800017 	ldw	r6,0(r15)
4000377c:	22000217 	ldw	r8,8(r4)
40003780:	23800617 	ldw	r14,24(r4)
40003784:	698d883a 	add	r6,r13,r6
40003788:	31800044 	addi	r6,r6,1
4000378c:	121b383a 	mul	r13,r2,r8
40003790:	318d883a 	add	r6,r6,r6
40003794:	300dd0ba 	srai	r6,r6,2
40003798:	7291883a 	add	r8,r14,r10
4000379c:	4351883a 	add	r8,r8,r13
static inline void Intra_4x4_Vertical_Left(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      if(y&1) i=top(x+(y>>1))+2*top(x+(y>>1)+1)+top(x+(y>>1)+2)+2;
      else    i=2*top(x+(y>>1))+2*top(x+(y>>1)+1)+2;
400037a0:	2b800304 	addi	r14,r5,12
      p(x,y)=i>>2;
400037a4:	41800005 	stb	r6,0(r8)
static inline void Intra_4x4_Vertical_Left(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      if(y&1) i=top(x+(y>>1))+2*top(x+(y>>1)+1)+top(x+(y>>1)+2)+2;
      else    i=2*top(x+(y>>1))+2*top(x+(y>>1)+1)+2;
400037a8:	db9d883a 	add	r14,sp,r14
      p(x,y)=i>>2;
400037ac:	7b400017 	ldw	r13,0(r15)
400037b0:	71800017 	ldw	r6,0(r14)
400037b4:	22000217 	ldw	r8,8(r4)
400037b8:	23c00617 	ldw	r15,24(r4)
400037bc:	698d883a 	add	r6,r13,r6
400037c0:	31800044 	addi	r6,r6,1
400037c4:	121b383a 	mul	r13,r2,r8
400037c8:	318d883a 	add	r6,r6,r6
400037cc:	300dd0ba 	srai	r6,r6,2
400037d0:	7a51883a 	add	r8,r15,r9
400037d4:	4351883a 	add	r8,r8,r13
static inline void Intra_4x4_Vertical_Left(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      if(y&1) i=top(x+(y>>1))+2*top(x+(y>>1)+1)+top(x+(y>>1)+2)+2;
      else    i=2*top(x+(y>>1))+2*top(x+(y>>1)+1)+2;
400037d8:	db400404 	addi	r13,sp,16
      p(x,y)=i>>2;
400037dc:	41800005 	stb	r6,0(r8)
static inline void Intra_4x4_Vertical_Left(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      if(y&1) i=top(x+(y>>1))+2*top(x+(y>>1)+1)+top(x+(y>>1)+2)+2;
      else    i=2*top(x+(y>>1))+2*top(x+(y>>1)+1)+2;
400037e0:	694b883a 	add	r5,r13,r5
400037e4:	29800017 	ldw	r6,0(r5)
400037e8:	71400017 	ldw	r5,0(r14)
400037ec:	314b883a 	add	r5,r6,r5
400037f0:	29400044 	addi	r5,r5,1
400037f4:	294b883a 	add	r5,r5,r5
      p(x,y)=i>>2;
400037f8:	21800217 	ldw	r6,8(r4)
400037fc:	23400617 	ldw	r13,24(r4)
40003800:	280bd0ba 	srai	r5,r5,2
40003804:	1191383a 	mul	r8,r2,r6
40003808:	6acd883a 	add	r6,r13,r11
    }
}

static inline void Intra_4x4_Vertical_Left(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
4000380c:	39c00044 	addi	r7,r7,1
    for(x=0; x<4; ++x) {
      if(y&1) i=top(x+(y>>1))+2*top(x+(y>>1)+1)+top(x+(y>>1)+2)+2;
      else    i=2*top(x+(y>>1))+2*top(x+(y>>1)+1)+2;
      p(x,y)=i>>2;
40003810:	320d883a 	add	r6,r6,r8
40003814:	31400005 	stb	r5,0(r6)
40003818:	10800044 	addi	r2,r2,1
    }
}

static inline void Intra_4x4_Vertical_Left(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
4000381c:	3b3d3626 	beq	r7,r12,40002cf8 <__alt_data_end+0xc0002cf8>
    for(x=0; x<4; ++x) {
      if(y&1) i=top(x+(y>>1))+2*top(x+(y>>1)+1)+top(x+(y>>1)+2)+2;
40003820:	3940004c 	andi	r5,r7,1
40003824:	283fbe26 	beq	r5,zero,40003720 <__alt_data_end+0xc0003720>
40003828:	380dd07a 	srai	r6,r7,1
      else    i=2*top(x+(y>>1))+2*top(x+(y>>1)+1)+2;
      p(x,y)=i>>2;
4000382c:	23400217 	ldw	r13,8(r4)
40003830:	24400617 	ldw	r17,24(r4)

static inline void Intra_4x4_Vertical_Left(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      if(y&1) i=top(x+(y>>1))+2*top(x+(y>>1)+1)+top(x+(y>>1)+2)+2;
40003834:	31800144 	addi	r6,r6,5
40003838:	318d883a 	add	r6,r6,r6
4000383c:	318d883a 	add	r6,r6,r6
40003840:	33c00104 	addi	r15,r6,4
40003844:	dbdf883a 	add	r15,sp,r15
      else    i=2*top(x+(y>>1))+2*top(x+(y>>1)+1)+2;
      p(x,y)=i>>2;
40003848:	7c000017 	ldw	r16,0(r15)

static inline void Intra_4x4_Vertical_Left(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      if(y&1) i=top(x+(y>>1))+2*top(x+(y>>1)+1)+top(x+(y>>1)+2)+2;
4000384c:	33800204 	addi	r14,r6,8
40003850:	d98b883a 	add	r5,sp,r6
      else    i=2*top(x+(y>>1))+2*top(x+(y>>1)+1)+2;
      p(x,y)=i>>2;
40003854:	29400017 	ldw	r5,0(r5)

static inline void Intra_4x4_Vertical_Left(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      if(y&1) i=top(x+(y>>1))+2*top(x+(y>>1)+1)+top(x+(y>>1)+2)+2;
40003858:	db9d883a 	add	r14,sp,r14
      else    i=2*top(x+(y>>1))+2*top(x+(y>>1)+1)+2;
      p(x,y)=i>>2;
4000385c:	72000017 	ldw	r8,0(r14)
40003860:	8421883a 	add	r16,r16,r16
40003864:	814b883a 	add	r5,r16,r5
40003868:	2a0b883a 	add	r5,r5,r8
4000386c:	135b383a 	mul	r13,r2,r13
40003870:	29400084 	addi	r5,r5,2
40003874:	280bd0ba 	srai	r5,r5,2
40003878:	88d1883a 	add	r8,r17,r3
4000387c:	4351883a 	add	r8,r8,r13
40003880:	41400005 	stb	r5,0(r8)
40003884:	74000017 	ldw	r16,0(r14)

static inline void Intra_4x4_Vertical_Left(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      if(y&1) i=top(x+(y>>1))+2*top(x+(y>>1)+1)+top(x+(y>>1)+2)+2;
40003888:	33400304 	addi	r13,r6,12
4000388c:	db5b883a 	add	r13,sp,r13
      else    i=2*top(x+(y>>1))+2*top(x+(y>>1)+1)+2;
      p(x,y)=i>>2;
40003890:	79400017 	ldw	r5,0(r15)
40003894:	6a000017 	ldw	r8,0(r13)
40003898:	23c00217 	ldw	r15,8(r4)
4000389c:	8421883a 	add	r16,r16,r16
400038a0:	814b883a 	add	r5,r16,r5
400038a4:	24400617 	ldw	r17,24(r4)
400038a8:	2a0b883a 	add	r5,r5,r8
400038ac:	13df383a 	mul	r15,r2,r15
400038b0:	29400084 	addi	r5,r5,2
400038b4:	280bd0ba 	srai	r5,r5,2
400038b8:	8a91883a 	add	r8,r17,r10
400038bc:	43d1883a 	add	r8,r8,r15
400038c0:	41400005 	stb	r5,0(r8)
400038c4:	6c000017 	ldw	r16,0(r13)

static inline void Intra_4x4_Vertical_Left(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      if(y&1) i=top(x+(y>>1))+2*top(x+(y>>1)+1)+top(x+(y>>1)+2)+2;
400038c8:	33c00404 	addi	r15,r6,16
      else    i=2*top(x+(y>>1))+2*top(x+(y>>1)+1)+2;
      p(x,y)=i>>2;
400038cc:	71400017 	ldw	r5,0(r14)

static inline void Intra_4x4_Vertical_Left(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      if(y&1) i=top(x+(y>>1))+2*top(x+(y>>1)+1)+top(x+(y>>1)+2)+2;
400038d0:	dbdf883a 	add	r15,sp,r15
      else    i=2*top(x+(y>>1))+2*top(x+(y>>1)+1)+2;
      p(x,y)=i>>2;
400038d4:	7a000017 	ldw	r8,0(r15)
400038d8:	23800217 	ldw	r14,8(r4)
400038dc:	8421883a 	add	r16,r16,r16
400038e0:	814b883a 	add	r5,r16,r5
400038e4:	24400617 	ldw	r17,24(r4)
400038e8:	2a0b883a 	add	r5,r5,r8
400038ec:	139d383a 	mul	r14,r2,r14
400038f0:	29400084 	addi	r5,r5,2
400038f4:	280bd0ba 	srai	r5,r5,2
400038f8:	8a51883a 	add	r8,r17,r9
400038fc:	4391883a 	add	r8,r8,r14
40003900:	41400005 	stb	r5,0(r8)

static inline void Intra_4x4_Vertical_Left(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      if(y&1) i=top(x+(y>>1))+2*top(x+(y>>1)+1)+top(x+(y>>1)+2)+2;
40003904:	69400017 	ldw	r5,0(r13)
40003908:	7a000017 	ldw	r8,0(r15)
4000390c:	db400504 	addi	r13,sp,20
40003910:	698d883a 	add	r6,r13,r6
40003914:	31800017 	ldw	r6,0(r6)
40003918:	4211883a 	add	r8,r8,r8
4000391c:	414b883a 	add	r5,r8,r5
40003920:	298b883a 	add	r5,r5,r6
40003924:	29400084 	addi	r5,r5,2
40003928:	003fb306 	br	400037f8 <__alt_data_end+0xc00037f8>
            case 4: Intra_4x4_Diagonal_Down_Right(f,&ref[0],x,y); break;
            case 5: Intra_4x4_Vertical_Right(f,&ref[0],x,y); break;
            case 6: Intra_4x4_Horizontal_Down(f,&ref[0],x,y); break;
            case 7: Intra_4x4_Vertical_Left(f,&ref[0],x,y); break;
            case 8: Intra_4x4_Horizontal_Up(f,&ref[0],x,y); break;
            default: printf("unsupported Intra4x4PredMode %d at %d,%d!\n",mode,x,y);
4000392c:	011000b4 	movhi	r4,16386
40003930:	2129a304 	addi	r4,r4,-22900
40003934:	100f883a 	mov	r7,r2
40003938:	180d883a 	mov	r6,r3
4000393c:	000ef680 	call	4000ef68 <printf>
        }
}
40003940:	003ced06 	br	40002cf8 <__alt_data_end+0xc0002cf8>
static inline void Intra_4x4_Horizontal_Up(frame *f, int *ref, int bx, int by) {
  int x,y,i,zHU;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zHU=x+2*y;
           if(zHU>5)  i=4*left(3);
40003944:	d9400017 	ldw	r5,0(sp)
40003948:	294b883a 	add	r5,r5,r5
4000394c:	294b883a 	add	r5,r5,r5
40003950:	003f4d06 	br	40003688 <__alt_data_end+0xc0003688>
40003954:	d9400017 	ldw	r5,0(sp)
40003958:	294b883a 	add	r5,r5,r5
4000395c:	294b883a 	add	r5,r5,r5
40003960:	003f3906 	br	40003648 <__alt_data_end+0xc0003648>
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
           if(x>y) i=top(x-y-2)+2*top(x-y-1)+top(x-y)+2;
      else if(x<y) i=left(y-x-2)+2*left(y-x-1)+left(y-x)+2;
      else         i=top(0)+2*top(-1)+left(0)+2;
      p(x,y)=i>>2;
40003964:	55000017 	ldw	r20,0(r10)
40003968:	49400017 	ldw	r5,0(r9)
4000396c:	61800017 	ldw	r6,0(r12)
40003970:	22000217 	ldw	r8,8(r4)
40003974:	a529883a 	add	r20,r20,r20
40003978:	a14b883a 	add	r5,r20,r5
4000397c:	25400617 	ldw	r21,24(r4)
40003980:	298b883a 	add	r5,r5,r6
40003984:	1211383a 	mul	r8,r2,r8
40003988:	29400084 	addi	r5,r5,2
4000398c:	280bd0ba 	srai	r5,r5,2
40003990:	a8cd883a 	add	r6,r21,r3
40003994:	320d883a 	add	r6,r6,r8
40003998:	31400045 	stb	r5,1(r6)
static inline void Intra_4x4_Diagonal_Down_Right(frame *f, int *ref, int bx, int by) {
  int x,y,i;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
           if(x>y) i=top(x-y-2)+2*top(x-y-1)+top(x-y)+2;
      else if(x<y) i=left(y-x-2)+2*left(y-x-1)+left(y-x)+2;
4000399c:	3c807326 	beq	r7,r18,40003b6c <Intra_4x4_Dispatch+0x1364>
      else         i=top(0)+2*top(-1)+left(0)+2;
      p(x,y)=i>>2;
400039a0:	d9400417 	ldw	r5,16(sp)
400039a4:	da000517 	ldw	r8,20(sp)
400039a8:	21800217 	ldw	r6,8(r4)
400039ac:	294b883a 	add	r5,r5,r5
400039b0:	2a11883a 	add	r8,r5,r8
400039b4:	d9400317 	ldw	r5,12(sp)
400039b8:	25000617 	ldw	r20,24(r4)
400039bc:	414b883a 	add	r5,r8,r5
400039c0:	29400084 	addi	r5,r5,2
400039c4:	1191383a 	mul	r8,r2,r6
400039c8:	280bd0ba 	srai	r5,r5,2
400039cc:	a40d883a 	add	r6,r20,r16
400039d0:	320d883a 	add	r6,r6,r8
400039d4:	31400005 	stb	r5,0(r6)
400039d8:	003d0a06 	br	40002e04 <__alt_data_end+0xc0002e04>
          int i;
          if(x>0) {
            for(i=0; i<4; ++i) left(i)=L_pixel(f,x-1,y+i);
            if(y>0) left(-1)=L_pixel(f,x-1,y-1);
          }
          if(y>0) {
400039dc:	00bbc70e 	bge	zero,r2,400028fc <__alt_data_end+0xc00028fc>
400039e0:	22000217 	ldw	r8,8(r4)
400039e4:	11ffffc4 	addi	r7,r2,-1
400039e8:	21800617 	ldw	r6,24(r4)
400039ec:	3a0f383a 	mul	r7,r7,r8
400039f0:	31cd883a 	add	r6,r6,r7
400039f4:	003bb206 	br	400028c0 <__alt_data_end+0xc00028c0>
static inline void Intra_4x4_Horizontal_Down(frame *f, int *ref, int bx, int by) {
  int x,y,i,zHD;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zHD=2*y-x;
           if(zHD<-1) i=top(x-1)+2*top(x-2)+top(x-3)+2;
400039f8:	d9400617 	ldw	r5,24(sp)
400039fc:	d9800717 	ldw	r6,28(sp)
40003a00:	294b883a 	add	r5,r5,r5
40003a04:	298d883a 	add	r6,r5,r6
40003a08:	d9400517 	ldw	r5,20(sp)
40003a0c:	314b883a 	add	r5,r6,r5
40003a10:	29400084 	addi	r5,r5,2
40003a14:	003ecc06 	br	40003548 <__alt_data_end+0xc0003548>
40003a18:	d9400517 	ldw	r5,20(sp)
40003a1c:	d9800617 	ldw	r6,24(sp)
40003a20:	294b883a 	add	r5,r5,r5
40003a24:	298d883a 	add	r6,r5,r6
40003a28:	d9400417 	ldw	r5,16(sp)
40003a2c:	314b883a 	add	r5,r6,r5
40003a30:	29400084 	addi	r5,r5,2
40003a34:	003eb406 	br	40003508 <__alt_data_end+0xc0003508>
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zVR=2*x-y;
           if(zVR<-1) i=left(y-1)+2*left(y-2)+left(y-3)+2;
      else if(zVR<0)  i=left(0)+2*left(-1)+top(-1)+2;
      else if(zVR&1)  i=top(x-(y>>1)-2)+2*top(x-(y>>1)-1)+top(x-(y>>1))+2;
40003a38:	a153c83a 	sub	r9,r20,r5
40003a3c:	02800184 	movi	r10,6
40003a40:	4a53883a 	add	r9,r9,r9
40003a44:	e14fc83a 	sub	r7,fp,r5
40003a48:	514dc83a 	sub	r6,r10,r5
40003a4c:	4a53883a 	add	r9,r9,r9
40003a50:	39cf883a 	add	r7,r7,r7
40003a54:	da53883a 	add	r9,sp,r9
40003a58:	318d883a 	add	r6,r6,r6
40003a5c:	39cf883a 	add	r7,r7,r7
40003a60:	4a800017 	ldw	r10,0(r9)
40003a64:	318d883a 	add	r6,r6,r6
40003a68:	d9cf883a 	add	r7,sp,r7
40003a6c:	d98d883a 	add	r6,sp,r6
40003a70:	39c00017 	ldw	r7,0(r7)
40003a74:	32400017 	ldw	r9,0(r6)
40003a78:	5295883a 	add	r10,r10,r10
40003a7c:	51cf883a 	add	r7,r10,r7
40003a80:	3a4f883a 	add	r7,r7,r9
40003a84:	39c00084 	addi	r7,r7,2
40003a88:	003d4406 	br	40002f9c <__alt_data_end+0xc0002f9c>
40003a8c:	01c00204 	movi	r7,8
40003a90:	394bc83a 	sub	r5,r7,r5
40003a94:	294b883a 	add	r5,r5,r5
40003a98:	49c00017 	ldw	r7,0(r9)
40003a9c:	294b883a 	add	r5,r5,r5
40003aa0:	32400017 	ldw	r9,0(r6)
40003aa4:	d94b883a 	add	r5,sp,r5
40003aa8:	29800017 	ldw	r6,0(r5)
40003aac:	39cf883a 	add	r7,r7,r7
40003ab0:	3a4b883a 	add	r5,r7,r9
40003ab4:	298b883a 	add	r5,r5,r6
40003ab8:	29400084 	addi	r5,r5,2
40003abc:	003d5d06 	br	40003034 <__alt_data_end+0xc0003034>
40003ac0:	028001c4 	movi	r10,7
40003ac4:	a14fc83a 	sub	r7,r20,r5
40003ac8:	5153c83a 	sub	r9,r10,r5
40003acc:	39cf883a 	add	r7,r7,r7
40003ad0:	4a53883a 	add	r9,r9,r9
40003ad4:	39cf883a 	add	r7,r7,r7
40003ad8:	4a53883a 	add	r9,r9,r9
40003adc:	d9cf883a 	add	r7,sp,r7
40003ae0:	32c00017 	ldw	r11,0(r6)
40003ae4:	da53883a 	add	r9,sp,r9
40003ae8:	39c00017 	ldw	r7,0(r7)
40003aec:	4a800017 	ldw	r10,0(r9)
40003af0:	5ad7883a 	add	r11,r11,r11
40003af4:	59cf883a 	add	r7,r11,r7
40003af8:	3a8f883a 	add	r7,r7,r10
40003afc:	39c00084 	addi	r7,r7,2
40003b00:	003d3906 	br	40002fe8 <__alt_data_end+0xc0002fe8>
      p(x,y)=left(y);
}

static inline void Intra_4x4_DC(frame *f, int x_avail, int y_avail, int x, int y) {
  int i, sum=0, count=0;
  if(x_avail)
40003b04:	30005a26 	beq	r6,zero,40003c70 <Intra_4x4_Dispatch+0x1468>
40003b08:	21800217 	ldw	r6,8(r4)
40003b0c:	21400617 	ldw	r5,24(r4)
    for(i=0; i<4; ++i, ++count)
      sum+=L_pixel(f,x-1,y+i);
40003b10:	12000044 	addi	r8,r2,1
40003b14:	4191383a 	mul	r8,r8,r6
40003b18:	119b383a 	mul	r13,r2,r6
40003b1c:	13000084 	addi	r12,r2,2
40003b20:	1abfffc4 	addi	r10,r3,-1
40003b24:	6199383a 	mul	r12,r12,r6
40003b28:	12c000c4 	addi	r11,r2,3
40003b2c:	2a95883a 	add	r10,r5,r10
40003b30:	5997383a 	mul	r11,r11,r6
40003b34:	5211883a 	add	r8,r10,r8
40003b38:	535b883a 	add	r13,r10,r13
40003b3c:	43800003 	ldbu	r14,0(r8)
40003b40:	5319883a 	add	r12,r10,r12
40003b44:	6a400003 	ldbu	r9,0(r13)
40003b48:	62000003 	ldbu	r8,0(r12)
40003b4c:	52d5883a 	add	r10,r10,r11
40003b50:	52800003 	ldbu	r10,0(r10)
40003b54:	7253883a 	add	r9,r14,r9
40003b58:	4251883a 	add	r8,r8,r9
40003b5c:	5211883a 	add	r8,r10,r8
  if(y_avail)
40003b60:	38006c26 	beq	r7,zero,40003d14 <Intra_4x4_Dispatch+0x150c>
}

static inline void Intra_4x4_DC(frame *f, int x_avail, int y_avail, int x, int y) {
  int i, sum=0, count=0;
  if(x_avail)
    for(i=0; i<4; ++i, ++count)
40003b64:	02c00104 	movi	r11,4
40003b68:	00004606 	br	40003c84 <Intra_4x4_Dispatch+0x147c>
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
           if(x>y) i=top(x-y-2)+2*top(x-y-1)+top(x-y)+2;
      else if(x<y) i=left(y-x-2)+2*left(y-x-1)+left(y-x)+2;
      else         i=top(0)+2*top(-1)+left(0)+2;
      p(x,y)=i>>2;
40003b6c:	d8c00317 	ldw	r3,12(sp)
40003b70:	d9800417 	ldw	r6,16(sp)
40003b74:	21400217 	ldw	r5,8(r4)
40003b78:	18c7883a 	add	r3,r3,r3
40003b7c:	198d883a 	add	r6,r3,r6
40003b80:	d8c00217 	ldw	r3,8(sp)
40003b84:	21c00617 	ldw	r7,24(r4)
40003b88:	114b383a 	mul	r5,r2,r5
40003b8c:	30c7883a 	add	r3,r6,r3
40003b90:	18c00084 	addi	r3,r3,2
40003b94:	1807d0ba 	srai	r3,r3,2
40003b98:	3c21883a 	add	r16,r7,r16
40003b9c:	8161883a 	add	r16,r16,r5
40003ba0:	80c00005 	stb	r3,0(r16)
40003ba4:	d8c00417 	ldw	r3,16(sp)
40003ba8:	d9800517 	ldw	r6,20(sp)
40003bac:	21400217 	ldw	r5,8(r4)
40003bb0:	18c7883a 	add	r3,r3,r3
40003bb4:	198d883a 	add	r6,r3,r6
40003bb8:	d8c00317 	ldw	r3,12(sp)
40003bbc:	21000617 	ldw	r4,24(r4)
40003bc0:	1145383a 	mul	r2,r2,r5
40003bc4:	30c7883a 	add	r3,r6,r3
40003bc8:	18c00084 	addi	r3,r3,2
40003bcc:	1807d0ba 	srai	r3,r3,2
40003bd0:	23df883a 	add	r15,r4,r15
40003bd4:	789f883a 	add	r15,r15,r2
40003bd8:	78c00005 	stb	r3,0(r15)
40003bdc:	003c4606 	br	40002cf8 <__alt_data_end+0xc0002cf8>
  int x,y,i,zHD;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zHD=2*y-x;
           if(zHD<-1) i=top(x-1)+2*top(x-2)+top(x-3)+2;
      else if(zHD<0)  i=left(0)+2*left(-1)+top(0)+2;
40003be0:	d9400417 	ldw	r5,16(sp)
40003be4:	dcc00317 	ldw	r19,12(sp)
40003be8:	294b883a 	add	r5,r5,r5
40003bec:	2ce7883a 	add	r19,r5,r19
40003bf0:	d9400517 	ldw	r5,20(sp)
40003bf4:	9967883a 	add	r19,r19,r5
40003bf8:	9cc00084 	addi	r19,r19,2
40003bfc:	003e3506 	br	400034d4 <__alt_data_end+0xc00034d4>
  int x,y,i,zVR;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zVR=2*x-y;
           if(zVR<-1) i=left(y-1)+2*left(y-2)+left(y-3)+2;
      else if(zVR<0)  i=left(0)+2*left(-1)+top(-1)+2;
40003c00:	d9c00417 	ldw	r7,16(sp)
40003c04:	02400184 	movi	r9,6
40003c08:	494dc83a 	sub	r6,r9,r5
40003c0c:	da400317 	ldw	r9,12(sp)
40003c10:	39d5883a 	add	r10,r7,r7
40003c14:	318d883a 	add	r6,r6,r6
40003c18:	5253883a 	add	r9,r10,r9
40003c1c:	49cf883a 	add	r7,r9,r7
40003c20:	318d883a 	add	r6,r6,r6
40003c24:	39c00084 	addi	r7,r7,2
40003c28:	d98d883a 	add	r6,sp,r6
40003c2c:	003cdb06 	br	40002f9c <__alt_data_end+0xc0002f9c>
40003c30:	d9800417 	ldw	r6,16(sp)
40003c34:	d9c00317 	ldw	r7,12(sp)
40003c38:	280bd07a 	srai	r5,r5,1
40003c3c:	3191883a 	add	r8,r6,r6
40003c40:	41cf883a 	add	r7,r8,r7
40003c44:	398d883a 	add	r6,r7,r6
40003c48:	31800084 	addi	r6,r6,2
40003c4c:	003cba06 	br	40002f38 <__alt_data_end+0xc0002f38>
  int x,y,i,zHD;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zHD=2*y-x;
           if(zHD<-1) i=top(x-1)+2*top(x-2)+top(x-3)+2;
      else if(zHD<0)  i=left(0)+2*left(-1)+top(0)+2;
40003c50:	d9400417 	ldw	r5,16(sp)
40003c54:	d9800317 	ldw	r6,12(sp)
40003c58:	294b883a 	add	r5,r5,r5
40003c5c:	298d883a 	add	r6,r5,r6
40003c60:	d9400517 	ldw	r5,20(sp)
40003c64:	314b883a 	add	r5,r6,r5
40003c68:	29400084 	addi	r5,r5,2
40003c6c:	003e3606 	br	40003548 <__alt_data_end+0xc0003548>
40003c70:	21400617 	ldw	r5,24(r4)
40003c74:	21800217 	ldw	r6,8(r4)
static inline void Intra_4x4_DC(frame *f, int x_avail, int y_avail, int x, int y) {
  int i, sum=0, count=0;
  if(x_avail)
    for(i=0; i<4; ++i, ++count)
      sum+=L_pixel(f,x-1,y+i);
  if(y_avail)
40003c78:	38001826 	beq	r7,zero,40003cdc <Intra_4x4_Dispatch+0x14d4>
    for(x=0; x<4; ++x)
      p(x,y)=left(y);
}

static inline void Intra_4x4_DC(frame *f, int x_avail, int y_avail, int x, int y) {
  int i, sum=0, count=0;
40003c7c:	0017883a 	mov	r11,zero
40003c80:	0011883a 	mov	r8,zero
40003c84:	12bfffc4 	addi	r10,r2,-1
40003c88:	5195383a 	mul	r10,r10,r6
    for(i=0; i<4; ++i, ++count)
      sum+=L_pixel(f,x-1,y+i);
  if(y_avail)
    for(i=0; i<4; ++i, ++count)
      sum+=L_pixel(f,x+i,y-1);
  if(count==8) sum=(sum+4)>>3; else
40003c8c:	5b400104 	addi	r13,r11,4
  if(x_avail)
    for(i=0; i<4; ++i, ++count)
      sum+=L_pixel(f,x-1,y+i);
  if(y_avail)
    for(i=0; i<4; ++i, ++count)
      sum+=L_pixel(f,x+i,y-1);
40003c90:	2a95883a 	add	r10,r5,r10
40003c94:	50d5883a 	add	r10,r10,r3
40003c98:	52400003 	ldbu	r9,0(r10)
40003c9c:	51c00043 	ldbu	r7,1(r10)
40003ca0:	53000083 	ldbu	r12,2(r10)
40003ca4:	4a13883a 	add	r9,r9,r8
40003ca8:	528000c3 	ldbu	r10,3(r10)
40003cac:	3a4f883a 	add	r7,r7,r9
40003cb0:	61cf883a 	add	r7,r12,r7
40003cb4:	51d1883a 	add	r8,r10,r7
  if(count==8) sum=(sum+4)>>3; else
40003cb8:	58000626 	beq	r11,zero,40003cd4 <Intra_4x4_Dispatch+0x14cc>
40003cbc:	42000104 	addi	r8,r8,4
40003cc0:	4011d0fa 	srai	r8,r8,3
40003cc4:	01c03fc4 	movi	r7,255
40003cc8:	3a00050e 	bge	r7,r8,40003ce0 <Intra_4x4_Dispatch+0x14d8>
40003ccc:	3811883a 	mov	r8,r7
40003cd0:	00000306 	br	40003ce0 <Intra_4x4_Dispatch+0x14d8>
  if(count==4) sum=(sum+2)>>2; else
40003cd4:	01c00104 	movi	r7,4
40003cd8:	69c00e26 	beq	r13,r7,40003d14 <Intra_4x4_Dispatch+0x150c>
40003cdc:	02002004 	movi	r8,128
40003ce0:	11c00104 	addi	r7,r2,4
               sum=128;
  sum=Clip(sum);
  for(i=0; i<4; ++i)
    memset(&L_pixel(f,x,y+i),sum,4);
40003ce4:	118d383a 	mul	r6,r2,r6
40003ce8:	10800044 	addi	r2,r2,1
40003cec:	30cd883a 	add	r6,r6,r3
40003cf0:	298b883a 	add	r5,r5,r6
40003cf4:	2a000005 	stb	r8,0(r5)
40003cf8:	2a000045 	stb	r8,1(r5)
40003cfc:	2a000085 	stb	r8,2(r5)
40003d00:	2a0000c5 	stb	r8,3(r5)
      sum+=L_pixel(f,x+i,y-1);
  if(count==8) sum=(sum+4)>>3; else
  if(count==4) sum=(sum+2)>>2; else
               sum=128;
  sum=Clip(sum);
  for(i=0; i<4; ++i)
40003d04:	38bbfc26 	beq	r7,r2,40002cf8 <__alt_data_end+0xc0002cf8>
40003d08:	21400617 	ldw	r5,24(r4)
40003d0c:	21800217 	ldw	r6,8(r4)
40003d10:	003ff406 	br	40003ce4 <__alt_data_end+0xc0003ce4>
      sum+=L_pixel(f,x-1,y+i);
  if(y_avail)
    for(i=0; i<4; ++i, ++count)
      sum+=L_pixel(f,x+i,y-1);
  if(count==8) sum=(sum+4)>>3; else
  if(count==4) sum=(sum+2)>>2; else
40003d14:	42000084 	addi	r8,r8,2
40003d18:	4011d0ba 	srai	r8,r8,2
40003d1c:	003fe906 	br	40003cc4 <__alt_data_end+0xc0003cc4>
  int x,y,i,zHU;
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x) {
      zHU=x+2*y;
           if(zHU>5)  i=4*left(3);
      else if(zHU==5) i=left(2)+3*left(3)+2;
40003d20:	d9400017 	ldw	r5,0(sp)
40003d24:	294d883a 	add	r6,r5,r5
40003d28:	314d883a 	add	r6,r6,r5
40003d2c:	d9400117 	ldw	r5,4(sp)
40003d30:	314b883a 	add	r5,r6,r5
40003d34:	29400084 	addi	r5,r5,2
40003d38:	003e5306 	br	40003688 <__alt_data_end+0xc0003688>
40003d3c:	d9400017 	ldw	r5,0(sp)
40003d40:	294d883a 	add	r6,r5,r5
40003d44:	314d883a 	add	r6,r6,r5
40003d48:	d9400117 	ldw	r5,4(sp)
40003d4c:	314b883a 	add	r5,r6,r5
40003d50:	29400084 	addi	r5,r5,2
40003d54:	003e2e06 	br	40003610 <__alt_data_end+0xc0003610>

40003d58 <print_block>:
#define p(x,y)  L_pixel(f,bx+(x),by+(y))


void print_block(frame *f, int bx, int by, int size){
    int x,y;
    for(y=-1; y<size; y++)
40003d58:	38003716 	blt	r7,zero,40003e38 <print_block+0xe0>
////////////////////////////////////////////////// INTRA_16X16 PREDICTION /////

#define p(x,y)  L_pixel(f,bx+(x),by+(y))


void print_block(frame *f, int bx, int by, int size){
40003d5c:	defff304 	addi	sp,sp,-52
        for (x=-1; x<size; x++)
        {
            printf("%02X ", p(x,y));
        }
        if(y==-1 &&( size == 4 || size == 8)){
            for(;x < 2*size; x++){
40003d60:	39c5883a 	add	r2,r7,r7
////////////////////////////////////////////////// INTRA_16X16 PREDICTION /////

#define p(x,y)  L_pixel(f,bx+(x),by+(y))


void print_block(frame *f, int bx, int by, int size){
40003d64:	dc800515 	stw	r18,20(sp)
        for (x=-1; x<size; x++)
        {
            printf("%02X ", p(x,y));
        }
        if(y==-1 &&( size == 4 || size == 8)){
            for(;x < 2*size; x++){
40003d68:	04bfffc4 	movi	r18,-1
40003d6c:	d8800015 	stw	r2,0(sp)
40003d70:	3485883a 	add	r2,r6,r18
40003d74:	d8800115 	stw	r2,4(sp)
40003d78:	d8800017 	ldw	r2,0(sp)
////////////////////////////////////////////////// INTRA_16X16 PREDICTION /////

#define p(x,y)  L_pixel(f,bx+(x),by+(y))


void print_block(frame *f, int bx, int by, int size){
40003d7c:	dd800915 	stw	r22,36(sp)
40003d80:	dc400415 	stw	r17,16(sp)
40003d84:	2cad883a 	add	r22,r5,r18
40003d88:	3963883a 	add	r17,r7,r5
40003d8c:	288b883a 	add	r5,r5,r2
40003d90:	df000b15 	stw	fp,44(sp)
40003d94:	dd400815 	stw	r21,32(sp)
40003d98:	dd000715 	stw	r20,28(sp)
40003d9c:	dcc00615 	stw	r19,24(sp)
40003da0:	dfc00c15 	stw	ra,48(sp)
40003da4:	ddc00a15 	stw	r23,40(sp)
40003da8:	dc000315 	stw	r16,12(sp)
40003dac:	3029883a 	mov	r20,r6
40003db0:	2039883a 	mov	fp,r4
40003db4:	3827883a 	mov	r19,r7
    {
        for (x=-1; x<size; x++)
        {
            printf("%02X ", p(x,y));
        }
        if(y==-1 &&( size == 4 || size == 8)){
40003db8:	902b883a 	mov	r21,r18
40003dbc:	d9400215 	stw	r5,8(sp)
40003dc0:	9521883a 	add	r16,r18,r20
40003dc4:	b02f883a 	mov	r23,r22
    int x,y;
    for(y=-1; y<size; y++)
    {
        for (x=-1; x<size; x++)
        {
            printf("%02X ", p(x,y));
40003dc8:	e0c00217 	ldw	r3,8(fp)
40003dcc:	e0800617 	ldw	r2,24(fp)
40003dd0:	011000b4 	movhi	r4,16386
40003dd4:	80c7383a 	mul	r3,r16,r3
40003dd8:	15c5883a 	add	r2,r2,r23
40003ddc:	2129ae04 	addi	r4,r4,-22856
40003de0:	10c5883a 	add	r2,r2,r3
40003de4:	11400003 	ldbu	r5,0(r2)
40003de8:	bdc00044 	addi	r23,r23,1
40003dec:	000ef680 	call	4000ef68 <printf>

void print_block(frame *f, int bx, int by, int size){
    int x,y;
    for(y=-1; y<size; y++)
    {
        for (x=-1; x<size; x++)
40003df0:	bc7ff51e 	bne	r23,r17,40003dc8 <__alt_data_end+0xc0003dc8>
        {
            printf("%02X ", p(x,y));
        }
        if(y==-1 &&( size == 4 || size == 8)){
40003df4:	95401126 	beq	r18,r21,40003e3c <print_block+0xe4>
#define p(x,y)  L_pixel(f,bx+(x),by+(y))


void print_block(frame *f, int bx, int by, int size){
    int x,y;
    for(y=-1; y<size; y++)
40003df8:	94800044 	addi	r18,r18,1
        if(y==-1 &&( size == 4 || size == 8)){
            for(;x < 2*size; x++){
                printf("%02X ", p(x,y));
            }
        }
        printf("\n");
40003dfc:	01000284 	movi	r4,10
40003e00:	000efac0 	call	4000efac <putchar>
#define p(x,y)  L_pixel(f,bx+(x),by+(y))


void print_block(frame *f, int bx, int by, int size){
    int x,y;
    for(y=-1; y<size; y++)
40003e04:	9cbfee1e 	bne	r19,r18,40003dc0 <__alt_data_end+0xc0003dc0>
                printf("%02X ", p(x,y));
            }
        }
        printf("\n");
    }
}
40003e08:	dfc00c17 	ldw	ra,48(sp)
40003e0c:	df000b17 	ldw	fp,44(sp)
40003e10:	ddc00a17 	ldw	r23,40(sp)
40003e14:	dd800917 	ldw	r22,36(sp)
40003e18:	dd400817 	ldw	r21,32(sp)
40003e1c:	dd000717 	ldw	r20,28(sp)
40003e20:	dcc00617 	ldw	r19,24(sp)
40003e24:	dc800517 	ldw	r18,20(sp)
40003e28:	dc400417 	ldw	r17,16(sp)
40003e2c:	dc000317 	ldw	r16,12(sp)
40003e30:	dec00d04 	addi	sp,sp,52
40003e34:	f800283a 	ret
40003e38:	f800283a 	ret
    {
        for (x=-1; x<size; x++)
        {
            printf("%02X ", p(x,y));
        }
        if(y==-1 &&( size == 4 || size == 8)){
40003e3c:	00800104 	movi	r2,4
40003e40:	98800226 	beq	r19,r2,40003e4c <print_block+0xf4>
40003e44:	01400204 	movi	r5,8
40003e48:	997feb1e 	bne	r19,r5,40003df8 <__alt_data_end+0xc0003df8>
            for(;x < 2*size; x++){
40003e4c:	d9400017 	ldw	r5,0(sp)
40003e50:	8821883a 	mov	r16,r17
40003e54:	99400e0e 	bge	r19,r5,40003e90 <print_block+0x138>
                printf("%02X ", p(x,y));
40003e58:	d9400117 	ldw	r5,4(sp)
40003e5c:	e0800217 	ldw	r2,8(fp)
40003e60:	e0c00617 	ldw	r3,24(fp)
40003e64:	011000b4 	movhi	r4,16386
40003e68:	2885383a 	mul	r2,r5,r2
40003e6c:	1c07883a 	add	r3,r3,r16
40003e70:	2129ae04 	addi	r4,r4,-22856
40003e74:	1885883a 	add	r2,r3,r2
40003e78:	11400003 	ldbu	r5,0(r2)
40003e7c:	84000044 	addi	r16,r16,1
40003e80:	000ef680 	call	4000ef68 <printf>
        for (x=-1; x<size; x++)
        {
            printf("%02X ", p(x,y));
        }
        if(y==-1 &&( size == 4 || size == 8)){
            for(;x < 2*size; x++){
40003e84:	d8800217 	ldw	r2,8(sp)
40003e88:	80bff31e 	bne	r16,r2,40003e58 <__alt_data_end+0xc0003e58>
40003e8c:	003fda06 	br	40003df8 <__alt_data_end+0xc0003df8>
                printf("%02X ", p(x,y));
            }
        }
        printf("\n");
40003e90:	01000284 	movi	r4,10
40003e94:	000efac0 	call	4000efac <putchar>
#define p(x,y)  L_pixel(f,bx+(x),by+(y))


void print_block(frame *f, int bx, int by, int size){
    int x,y;
    for(y=-1; y<size; y++)
40003e98:	0025883a 	mov	r18,zero
40003e9c:	003fc806 	br	40003dc0 <__alt_data_end+0xc0003dc0>

40003ea0 <print_cr_block>:
    }
}

void print_cr_block(frame *f, int bx, int by, int size){
    int x,y;
    for(y=-1; y<size; y++)
40003ea0:	38003716 	blt	r7,zero,40003f80 <print_cr_block+0xe0>
        }
        printf("\n");
    }
}

void print_cr_block(frame *f, int bx, int by, int size){
40003ea4:	defff304 	addi	sp,sp,-52
        for (x=-1; x<size; x++)
        {
            printf("%02X ", r(x,y));
        }
        if(y==-1 &&( size == 4 || size == 8)){
            for(;x < 2*size; x++){
40003ea8:	39c5883a 	add	r2,r7,r7
        }
        printf("\n");
    }
}

void print_cr_block(frame *f, int bx, int by, int size){
40003eac:	dc800515 	stw	r18,20(sp)
        for (x=-1; x<size; x++)
        {
            printf("%02X ", r(x,y));
        }
        if(y==-1 &&( size == 4 || size == 8)){
            for(;x < 2*size; x++){
40003eb0:	04bfffc4 	movi	r18,-1
40003eb4:	d8800015 	stw	r2,0(sp)
40003eb8:	3485883a 	add	r2,r6,r18
40003ebc:	d8800115 	stw	r2,4(sp)
40003ec0:	d8800017 	ldw	r2,0(sp)
        }
        printf("\n");
    }
}

void print_cr_block(frame *f, int bx, int by, int size){
40003ec4:	dd800915 	stw	r22,36(sp)
40003ec8:	dc400415 	stw	r17,16(sp)
40003ecc:	2cad883a 	add	r22,r5,r18
40003ed0:	3963883a 	add	r17,r7,r5
40003ed4:	288b883a 	add	r5,r5,r2
40003ed8:	df000b15 	stw	fp,44(sp)
40003edc:	dd400815 	stw	r21,32(sp)
40003ee0:	dd000715 	stw	r20,28(sp)
40003ee4:	dcc00615 	stw	r19,24(sp)
40003ee8:	dfc00c15 	stw	ra,48(sp)
40003eec:	ddc00a15 	stw	r23,40(sp)
40003ef0:	dc000315 	stw	r16,12(sp)
40003ef4:	3029883a 	mov	r20,r6
40003ef8:	2039883a 	mov	fp,r4
40003efc:	3827883a 	mov	r19,r7
    {
        for (x=-1; x<size; x++)
        {
            printf("%02X ", r(x,y));
        }
        if(y==-1 &&( size == 4 || size == 8)){
40003f00:	902b883a 	mov	r21,r18
40003f04:	d9400215 	stw	r5,8(sp)
40003f08:	9521883a 	add	r16,r18,r20
40003f0c:	b02f883a 	mov	r23,r22
    int x,y;
    for(y=-1; y<size; y++)
    {
        for (x=-1; x<size; x++)
        {
            printf("%02X ", r(x,y));
40003f10:	e0c00517 	ldw	r3,20(fp)
40003f14:	e0800817 	ldw	r2,32(fp)
40003f18:	011000b4 	movhi	r4,16386
40003f1c:	80c7383a 	mul	r3,r16,r3
40003f20:	15c5883a 	add	r2,r2,r23
40003f24:	2129ae04 	addi	r4,r4,-22856
40003f28:	10c5883a 	add	r2,r2,r3
40003f2c:	11400003 	ldbu	r5,0(r2)
40003f30:	bdc00044 	addi	r23,r23,1
40003f34:	000ef680 	call	4000ef68 <printf>

void print_cr_block(frame *f, int bx, int by, int size){
    int x,y;
    for(y=-1; y<size; y++)
    {
        for (x=-1; x<size; x++)
40003f38:	bc7ff51e 	bne	r23,r17,40003f10 <__alt_data_end+0xc0003f10>
        {
            printf("%02X ", r(x,y));
        }
        if(y==-1 &&( size == 4 || size == 8)){
40003f3c:	95401126 	beq	r18,r21,40003f84 <print_cr_block+0xe4>
    }
}

void print_cr_block(frame *f, int bx, int by, int size){
    int x,y;
    for(y=-1; y<size; y++)
40003f40:	94800044 	addi	r18,r18,1
        if(y==-1 &&( size == 4 || size == 8)){
            for(;x < 2*size; x++){
                printf("%02X ", r(x,y));
            }
        }
        printf("\n");
40003f44:	01000284 	movi	r4,10
40003f48:	000efac0 	call	4000efac <putchar>
    }
}

void print_cr_block(frame *f, int bx, int by, int size){
    int x,y;
    for(y=-1; y<size; y++)
40003f4c:	9cbfee1e 	bne	r19,r18,40003f08 <__alt_data_end+0xc0003f08>
                printf("%02X ", r(x,y));
            }
        }
        printf("\n");
    }
}
40003f50:	dfc00c17 	ldw	ra,48(sp)
40003f54:	df000b17 	ldw	fp,44(sp)
40003f58:	ddc00a17 	ldw	r23,40(sp)
40003f5c:	dd800917 	ldw	r22,36(sp)
40003f60:	dd400817 	ldw	r21,32(sp)
40003f64:	dd000717 	ldw	r20,28(sp)
40003f68:	dcc00617 	ldw	r19,24(sp)
40003f6c:	dc800517 	ldw	r18,20(sp)
40003f70:	dc400417 	ldw	r17,16(sp)
40003f74:	dc000317 	ldw	r16,12(sp)
40003f78:	dec00d04 	addi	sp,sp,52
40003f7c:	f800283a 	ret
40003f80:	f800283a 	ret
    {
        for (x=-1; x<size; x++)
        {
            printf("%02X ", r(x,y));
        }
        if(y==-1 &&( size == 4 || size == 8)){
40003f84:	00800104 	movi	r2,4
40003f88:	98800226 	beq	r19,r2,40003f94 <print_cr_block+0xf4>
40003f8c:	01400204 	movi	r5,8
40003f90:	997feb1e 	bne	r19,r5,40003f40 <__alt_data_end+0xc0003f40>
            for(;x < 2*size; x++){
40003f94:	d9400017 	ldw	r5,0(sp)
40003f98:	8821883a 	mov	r16,r17
40003f9c:	99400e0e 	bge	r19,r5,40003fd8 <print_cr_block+0x138>
                printf("%02X ", r(x,y));
40003fa0:	d9400117 	ldw	r5,4(sp)
40003fa4:	e0800517 	ldw	r2,20(fp)
40003fa8:	e0c00817 	ldw	r3,32(fp)
40003fac:	011000b4 	movhi	r4,16386
40003fb0:	2885383a 	mul	r2,r5,r2
40003fb4:	1c07883a 	add	r3,r3,r16
40003fb8:	2129ae04 	addi	r4,r4,-22856
40003fbc:	1885883a 	add	r2,r3,r2
40003fc0:	11400003 	ldbu	r5,0(r2)
40003fc4:	84000044 	addi	r16,r16,1
40003fc8:	000ef680 	call	4000ef68 <printf>
        for (x=-1; x<size; x++)
        {
            printf("%02X ", r(x,y));
        }
        if(y==-1 &&( size == 4 || size == 8)){
            for(;x < 2*size; x++){
40003fcc:	d8800217 	ldw	r2,8(sp)
40003fd0:	80bff31e 	bne	r16,r2,40003fa0 <__alt_data_end+0xc0003fa0>
40003fd4:	003fda06 	br	40003f40 <__alt_data_end+0xc0003f40>
                printf("%02X ", r(x,y));
            }
        }
        printf("\n");
40003fd8:	01000284 	movi	r4,10
40003fdc:	000efac0 	call	4000efac <putchar>
    }
}

void print_cr_block(frame *f, int bx, int by, int size){
    int x,y;
    for(y=-1; y<size; y++)
40003fe0:	0025883a 	mov	r18,zero
40003fe4:	003fc806 	br	40003f08 <__alt_data_end+0xc0003f08>

40003fe8 <print_cb_block>:
    }
}

void print_cb_block(frame *f, int bx, int by, int size){
    int x,y;
    for(y=-1; y<size; y++)
40003fe8:	38003716 	blt	r7,zero,400040c8 <print_cb_block+0xe0>
        }
        printf("\n");
    }
}

void print_cb_block(frame *f, int bx, int by, int size){
40003fec:	defff304 	addi	sp,sp,-52
        for (x=-1; x<size; x++)
        {
            printf("%02X ", b(x,y));
        }
        if(y==-1 &&( size == 4 || size == 8)){
            for(;x < 2*size; x++){
40003ff0:	39c5883a 	add	r2,r7,r7
        }
        printf("\n");
    }
}

void print_cb_block(frame *f, int bx, int by, int size){
40003ff4:	dc800515 	stw	r18,20(sp)
        for (x=-1; x<size; x++)
        {
            printf("%02X ", b(x,y));
        }
        if(y==-1 &&( size == 4 || size == 8)){
            for(;x < 2*size; x++){
40003ff8:	04bfffc4 	movi	r18,-1
40003ffc:	d8800015 	stw	r2,0(sp)
40004000:	3485883a 	add	r2,r6,r18
40004004:	d8800115 	stw	r2,4(sp)
40004008:	d8800017 	ldw	r2,0(sp)
        }
        printf("\n");
    }
}

void print_cb_block(frame *f, int bx, int by, int size){
4000400c:	dd800915 	stw	r22,36(sp)
40004010:	dc400415 	stw	r17,16(sp)
40004014:	2cad883a 	add	r22,r5,r18
40004018:	3963883a 	add	r17,r7,r5
4000401c:	288b883a 	add	r5,r5,r2
40004020:	df000b15 	stw	fp,44(sp)
40004024:	dd400815 	stw	r21,32(sp)
40004028:	dd000715 	stw	r20,28(sp)
4000402c:	dcc00615 	stw	r19,24(sp)
40004030:	dfc00c15 	stw	ra,48(sp)
40004034:	ddc00a15 	stw	r23,40(sp)
40004038:	dc000315 	stw	r16,12(sp)
4000403c:	3029883a 	mov	r20,r6
40004040:	2039883a 	mov	fp,r4
40004044:	3827883a 	mov	r19,r7
    {
        for (x=-1; x<size; x++)
        {
            printf("%02X ", b(x,y));
        }
        if(y==-1 &&( size == 4 || size == 8)){
40004048:	902b883a 	mov	r21,r18
4000404c:	d9400215 	stw	r5,8(sp)
40004050:	9521883a 	add	r16,r18,r20
40004054:	b02f883a 	mov	r23,r22
    int x,y;
    for(y=-1; y<size; y++)
    {
        for (x=-1; x<size; x++)
        {
            printf("%02X ", b(x,y));
40004058:	e0c00517 	ldw	r3,20(fp)
4000405c:	e0800717 	ldw	r2,28(fp)
40004060:	011000b4 	movhi	r4,16386
40004064:	80c7383a 	mul	r3,r16,r3
40004068:	15c5883a 	add	r2,r2,r23
4000406c:	2129ae04 	addi	r4,r4,-22856
40004070:	10c5883a 	add	r2,r2,r3
40004074:	11400003 	ldbu	r5,0(r2)
40004078:	bdc00044 	addi	r23,r23,1
4000407c:	000ef680 	call	4000ef68 <printf>

void print_cb_block(frame *f, int bx, int by, int size){
    int x,y;
    for(y=-1; y<size; y++)
    {
        for (x=-1; x<size; x++)
40004080:	bc7ff51e 	bne	r23,r17,40004058 <__alt_data_end+0xc0004058>
        {
            printf("%02X ", b(x,y));
        }
        if(y==-1 &&( size == 4 || size == 8)){
40004084:	95401126 	beq	r18,r21,400040cc <print_cb_block+0xe4>
    }
}

void print_cb_block(frame *f, int bx, int by, int size){
    int x,y;
    for(y=-1; y<size; y++)
40004088:	94800044 	addi	r18,r18,1
        if(y==-1 &&( size == 4 || size == 8)){
            for(;x < 2*size; x++){
                printf("%02X ", b(x,y));
            }
        }
        printf("\n");
4000408c:	01000284 	movi	r4,10
40004090:	000efac0 	call	4000efac <putchar>
    }
}

void print_cb_block(frame *f, int bx, int by, int size){
    int x,y;
    for(y=-1; y<size; y++)
40004094:	9cbfee1e 	bne	r19,r18,40004050 <__alt_data_end+0xc0004050>
                printf("%02X ", b(x,y));
            }
        }
        printf("\n");
    }
}
40004098:	dfc00c17 	ldw	ra,48(sp)
4000409c:	df000b17 	ldw	fp,44(sp)
400040a0:	ddc00a17 	ldw	r23,40(sp)
400040a4:	dd800917 	ldw	r22,36(sp)
400040a8:	dd400817 	ldw	r21,32(sp)
400040ac:	dd000717 	ldw	r20,28(sp)
400040b0:	dcc00617 	ldw	r19,24(sp)
400040b4:	dc800517 	ldw	r18,20(sp)
400040b8:	dc400417 	ldw	r17,16(sp)
400040bc:	dc000317 	ldw	r16,12(sp)
400040c0:	dec00d04 	addi	sp,sp,52
400040c4:	f800283a 	ret
400040c8:	f800283a 	ret
    {
        for (x=-1; x<size; x++)
        {
            printf("%02X ", b(x,y));
        }
        if(y==-1 &&( size == 4 || size == 8)){
400040cc:	00800104 	movi	r2,4
400040d0:	98800226 	beq	r19,r2,400040dc <print_cb_block+0xf4>
400040d4:	01400204 	movi	r5,8
400040d8:	997feb1e 	bne	r19,r5,40004088 <__alt_data_end+0xc0004088>
            for(;x < 2*size; x++){
400040dc:	d9400017 	ldw	r5,0(sp)
400040e0:	8821883a 	mov	r16,r17
400040e4:	99400e0e 	bge	r19,r5,40004120 <print_cb_block+0x138>
                printf("%02X ", b(x,y));
400040e8:	d9400117 	ldw	r5,4(sp)
400040ec:	e0800517 	ldw	r2,20(fp)
400040f0:	e0c00717 	ldw	r3,28(fp)
400040f4:	011000b4 	movhi	r4,16386
400040f8:	2885383a 	mul	r2,r5,r2
400040fc:	1c07883a 	add	r3,r3,r16
40004100:	2129ae04 	addi	r4,r4,-22856
40004104:	1885883a 	add	r2,r3,r2
40004108:	11400003 	ldbu	r5,0(r2)
4000410c:	84000044 	addi	r16,r16,1
40004110:	000ef680 	call	4000ef68 <printf>
        for (x=-1; x<size; x++)
        {
            printf("%02X ", b(x,y));
        }
        if(y==-1 &&( size == 4 || size == 8)){
            for(;x < 2*size; x++){
40004114:	d8800217 	ldw	r2,8(sp)
40004118:	80bff31e 	bne	r16,r2,400040e8 <__alt_data_end+0xc00040e8>
4000411c:	003fda06 	br	40004088 <__alt_data_end+0xc0004088>
                printf("%02X ", b(x,y));
            }
        }
        printf("\n");
40004120:	01000284 	movi	r4,10
40004124:	000efac0 	call	4000efac <putchar>
    }
}

void print_cb_block(frame *f, int bx, int by, int size){
    int x,y;
    for(y=-1; y<size; y++)
40004128:	0025883a 	mov	r18,zero
4000412c:	003fc806 	br	40004050 <__alt_data_end+0xc0004050>

40004130 <pack_luma_x>:


#endif
uint32_t pack_luma_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)p(x+3,y))      |\
40004130:	d8c00017 	ldw	r3,0(sp)
40004134:	20800217 	ldw	r2,8(r4)
40004138:	21000617 	ldw	r4,24(r4)
4000413c:	30cd883a 	add	r6,r6,r3
40004140:	3085383a 	mul	r2,r6,r2
           ((uint32_t)p(x+2,y)) <<8  |\
40004144:	2085883a 	add	r2,r4,r2
40004148:	114b883a 	add	r5,r2,r5
4000414c:	29cf883a 	add	r7,r5,r7


#endif
uint32_t pack_luma_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)p(x+3,y))      |\
40004150:	38c00083 	ldbu	r3,2(r7)
40004154:	39000043 	ldbu	r4,1(r7)
40004158:	39400003 	ldbu	r5,0(r7)
4000415c:	1806923a 	slli	r3,r3,8
40004160:	2008943a 	slli	r4,r4,16
40004164:	388000c3 	ldbu	r2,3(r7)
40004168:	280a963a 	slli	r5,r5,24
4000416c:	1906b03a 	or	r3,r3,r4
40004170:	1884b03a 	or	r2,r3,r2
           ((uint32_t)p(x+2,y)) <<8  |\
           ((uint32_t)p(x+1,y)) <<16 |\
           ((uint32_t)p(x+0,y)) <<24;
}
40004174:	1144b03a 	or	r2,r2,r5
40004178:	f800283a 	ret

4000417c <pack_luma_y>:

uint32_t pack_luma_y(frame *f, int bx, int by, int x, int y){
4000417c:	da000017 	ldw	r8,0(sp)

    return ((uint32_t)p(x,y+3))      |\
40004180:	20800217 	ldw	r2,8(r4)
40004184:	22800617 	ldw	r10,24(r4)
           ((uint32_t)p(x,y+2)) <<8  |\
           ((uint32_t)p(x,y+1)) <<16 |\
           ((uint32_t)p(x,y+0)) <<24;
40004188:	4193883a 	add	r9,r8,r6
}

uint32_t pack_luma_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)p(x,y+3))      |\
           ((uint32_t)p(x,y+2)) <<8  |\
4000418c:	41000084 	addi	r4,r8,2
           ((uint32_t)p(x,y+1)) <<16 |\
           ((uint32_t)p(x,y+0)) <<24;
40004190:	4893383a 	mul	r9,r9,r2
}

uint32_t pack_luma_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)p(x,y+3))      |\
           ((uint32_t)p(x,y+2)) <<8  |\
40004194:	2189883a 	add	r4,r4,r6
           ((uint32_t)p(x,y+1)) <<16 |\
40004198:	40c00044 	addi	r3,r8,1
           ((uint32_t)p(x+0,y)) <<24;
}

uint32_t pack_luma_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)p(x,y+3))      |\
4000419c:	29cf883a 	add	r7,r5,r7
           ((uint32_t)p(x,y+2)) <<8  |\
400041a0:	2089383a 	mul	r4,r4,r2
           ((uint32_t)p(x+0,y)) <<24;
}

uint32_t pack_luma_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)p(x,y+3))      |\
400041a4:	414000c4 	addi	r5,r8,3
           ((uint32_t)p(x,y+2)) <<8  |\
           ((uint32_t)p(x,y+1)) <<16 |\
400041a8:	1987883a 	add	r3,r3,r6
           ((uint32_t)p(x+0,y)) <<24;
}

uint32_t pack_luma_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)p(x,y+3))      |\
400041ac:	51cf883a 	add	r7,r10,r7
400041b0:	298b883a 	add	r5,r5,r6
           ((uint32_t)p(x,y+2)) <<8  |\
           ((uint32_t)p(x,y+1)) <<16 |\
400041b4:	1887383a 	mul	r3,r3,r2
           ((uint32_t)p(x,y+0)) <<24;
400041b8:	3a53883a 	add	r9,r7,r9
           ((uint32_t)p(x+0,y)) <<24;
}

uint32_t pack_luma_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)p(x,y+3))      |\
400041bc:	2885383a 	mul	r2,r5,r2
400041c0:	49800003 	ldbu	r6,0(r9)
           ((uint32_t)p(x,y+2)) <<8  |\
400041c4:	3909883a 	add	r4,r7,r4
           ((uint32_t)p(x+0,y)) <<24;
}

uint32_t pack_luma_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)p(x,y+3))      |\
400041c8:	21000003 	ldbu	r4,0(r4)
           ((uint32_t)p(x,y+2)) <<8  |\
           ((uint32_t)p(x,y+1)) <<16 |\
400041cc:	38c7883a 	add	r3,r7,r3
           ((uint32_t)p(x+0,y)) <<24;
}

uint32_t pack_luma_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)p(x,y+3))      |\
400041d0:	388b883a 	add	r5,r7,r2
400041d4:	19c00003 	ldbu	r7,0(r3)
400041d8:	28800003 	ldbu	r2,0(r5)
400041dc:	300a963a 	slli	r5,r6,24
400041e0:	2006923a 	slli	r3,r4,8
400041e4:	3808943a 	slli	r4,r7,16
400041e8:	1144b03a 	or	r2,r2,r5
400041ec:	10c4b03a 	or	r2,r2,r3
           ((uint32_t)p(x,y+2)) <<8  |\
           ((uint32_t)p(x,y+1)) <<16 |\
           ((uint32_t)p(x,y+0)) <<24;
}
400041f0:	1104b03a 	or	r2,r2,r4
400041f4:	f800283a 	ret

400041f8 <pack_cr_x>:

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400041f8:	d8c00017 	ldw	r3,0(sp)
400041fc:	20800517 	ldw	r2,20(r4)
40004200:	21000817 	ldw	r4,32(r4)
40004204:	30cd883a 	add	r6,r6,r3
40004208:	3085383a 	mul	r2,r6,r2
           ((uint32_t)r(x+2,y)) <<8  |\
4000420c:	2085883a 	add	r2,r4,r2
40004210:	114b883a 	add	r5,r2,r5
40004214:	29cf883a 	add	r7,r5,r7
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40004218:	38c00083 	ldbu	r3,2(r7)
4000421c:	39000043 	ldbu	r4,1(r7)
40004220:	39400003 	ldbu	r5,0(r7)
40004224:	1806923a 	slli	r3,r3,8
40004228:	2008943a 	slli	r4,r4,16
4000422c:	388000c3 	ldbu	r2,3(r7)
40004230:	280a963a 	slli	r5,r5,24
40004234:	1906b03a 	or	r3,r3,r4
40004238:	1884b03a 	or	r2,r3,r2
           ((uint32_t)r(x+2,y)) <<8  |\
           ((uint32_t)r(x+1,y)) <<16 |\
           ((uint32_t)r(x+0,y)) <<24;
}
4000423c:	1144b03a 	or	r2,r2,r5
40004240:	f800283a 	ret

40004244 <pack_cr_y>:

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){
40004244:	da000017 	ldw	r8,0(sp)

    return ((uint32_t)r(x,y+3))      |\
40004248:	20800517 	ldw	r2,20(r4)
4000424c:	22800817 	ldw	r10,32(r4)
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
40004250:	4193883a 	add	r9,r8,r6
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
40004254:	41000084 	addi	r4,r8,2
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
40004258:	4893383a 	mul	r9,r9,r2
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
4000425c:	2189883a 	add	r4,r4,r6
           ((uint32_t)r(x,y+1)) <<16 |\
40004260:	40c00044 	addi	r3,r8,1
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40004264:	29cf883a 	add	r7,r5,r7
           ((uint32_t)r(x,y+2)) <<8  |\
40004268:	2089383a 	mul	r4,r4,r2
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
4000426c:	414000c4 	addi	r5,r8,3
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
40004270:	1987883a 	add	r3,r3,r6
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40004274:	51cf883a 	add	r7,r10,r7
40004278:	298b883a 	add	r5,r5,r6
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
4000427c:	1887383a 	mul	r3,r3,r2
           ((uint32_t)r(x,y+0)) <<24;
40004280:	3a53883a 	add	r9,r7,r9
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40004284:	2885383a 	mul	r2,r5,r2
40004288:	49800003 	ldbu	r6,0(r9)
           ((uint32_t)r(x,y+2)) <<8  |\
4000428c:	3909883a 	add	r4,r7,r4
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40004290:	21000003 	ldbu	r4,0(r4)
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
40004294:	38c7883a 	add	r3,r7,r3
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40004298:	388b883a 	add	r5,r7,r2
4000429c:	19c00003 	ldbu	r7,0(r3)
400042a0:	28800003 	ldbu	r2,0(r5)
400042a4:	300a963a 	slli	r5,r6,24
400042a8:	2006923a 	slli	r3,r4,8
400042ac:	3808943a 	slli	r4,r7,16
400042b0:	1144b03a 	or	r2,r2,r5
400042b4:	10c4b03a 	or	r2,r2,r3
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
}
400042b8:	1104b03a 	or	r2,r2,r4
400042bc:	f800283a 	ret

400042c0 <pack_cb_x>:

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400042c0:	d8c00017 	ldw	r3,0(sp)
400042c4:	20800517 	ldw	r2,20(r4)
400042c8:	21000717 	ldw	r4,28(r4)
400042cc:	30cd883a 	add	r6,r6,r3
400042d0:	3085383a 	mul	r2,r6,r2
           ((uint32_t)b(x+2,y)) <<8  |\
400042d4:	2085883a 	add	r2,r4,r2
400042d8:	114b883a 	add	r5,r2,r5
400042dc:	29cf883a 	add	r7,r5,r7
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400042e0:	38c00083 	ldbu	r3,2(r7)
400042e4:	39000043 	ldbu	r4,1(r7)
400042e8:	39400003 	ldbu	r5,0(r7)
400042ec:	1806923a 	slli	r3,r3,8
400042f0:	2008943a 	slli	r4,r4,16
400042f4:	388000c3 	ldbu	r2,3(r7)
400042f8:	280a963a 	slli	r5,r5,24
400042fc:	1906b03a 	or	r3,r3,r4
40004300:	1884b03a 	or	r2,r3,r2
           ((uint32_t)b(x+2,y)) <<8  |\
           ((uint32_t)b(x+1,y)) <<16 |\
           ((uint32_t)b(x+0,y)) <<24;
}
40004304:	1144b03a 	or	r2,r2,r5
40004308:	f800283a 	ret

4000430c <pack_cb_y>:

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){
4000430c:	da000017 	ldw	r8,0(sp)

    return ((uint32_t)b(x,y+3))      |\
40004310:	20800517 	ldw	r2,20(r4)
40004314:	22800717 	ldw	r10,28(r4)
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
           ((uint32_t)b(x,y+0)) <<24;
40004318:	4193883a 	add	r9,r8,r6
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
4000431c:	41000084 	addi	r4,r8,2
           ((uint32_t)b(x,y+1)) <<16 |\
           ((uint32_t)b(x,y+0)) <<24;
40004320:	4893383a 	mul	r9,r9,r2
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
40004324:	2189883a 	add	r4,r4,r6
           ((uint32_t)b(x,y+1)) <<16 |\
40004328:	40c00044 	addi	r3,r8,1
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
4000432c:	29cf883a 	add	r7,r5,r7
           ((uint32_t)b(x,y+2)) <<8  |\
40004330:	2089383a 	mul	r4,r4,r2
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40004334:	414000c4 	addi	r5,r8,3
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
40004338:	1987883a 	add	r3,r3,r6
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
4000433c:	51cf883a 	add	r7,r10,r7
40004340:	298b883a 	add	r5,r5,r6
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
40004344:	1887383a 	mul	r3,r3,r2
           ((uint32_t)b(x,y+0)) <<24;
40004348:	3a53883a 	add	r9,r7,r9
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
4000434c:	2885383a 	mul	r2,r5,r2
40004350:	49800003 	ldbu	r6,0(r9)
           ((uint32_t)b(x,y+2)) <<8  |\
40004354:	3909883a 	add	r4,r7,r4
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40004358:	21000003 	ldbu	r4,0(r4)
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
4000435c:	38c7883a 	add	r3,r7,r3
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40004360:	388b883a 	add	r5,r7,r2
40004364:	19c00003 	ldbu	r7,0(r3)
40004368:	28800003 	ldbu	r2,0(r5)
4000436c:	300a963a 	slli	r5,r6,24
40004370:	2006923a 	slli	r3,r4,8
40004374:	3808943a 	slli	r4,r7,16
40004378:	1144b03a 	or	r2,r2,r5
4000437c:	10c4b03a 	or	r2,r2,r3
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
           ((uint32_t)b(x,y+0)) <<24;
}
40004380:	1104b03a 	or	r2,r2,r4
40004384:	f800283a 	ret

40004388 <Intra_Chroma_Horizontal>:
    if(left)    ICDCfill(4,4,(l4r+2)>>2,(l4b+2)>>2);
        else    ICDCfill(4,4,128,128);
  }
}

void Intra_Chroma_Horizontal(frame *f, int bx, int by) {
40004388:	defffe04 	addi	sp,sp,-8
4000438c:	dfc00115 	stw	ra,4(sp)
40004390:	dc000015 	stw	r16,0(sp)
40004394:	28bfffc4 	addi	r2,r5,-1
40004398:	2b400044 	addi	r13,r5,1
4000439c:	2b000084 	addi	r12,r5,2
400043a0:	2ac000c4 	addi	r11,r5,3
400043a4:	2a800104 	addi	r10,r5,4
400043a8:	2a400144 	addi	r9,r5,5
400043ac:	2a000184 	addi	r8,r5,6
400043b0:	29c001c4 	addi	r7,r5,7
400043b4:	33800204 	addi	r14,r6,8
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(-1,y);
400043b8:	20c00517 	ldw	r3,20(r4)
400043bc:	23c00817 	ldw	r15,32(r4)
400043c0:	30c7383a 	mul	r3,r6,r3
400043c4:	78c7883a 	add	r3,r15,r3
400043c8:	189f883a 	add	r15,r3,r2
400043cc:	7bc00003 	ldbu	r15,0(r15)
400043d0:	1947883a 	add	r3,r3,r5
400043d4:	1bc00005 	stb	r15,0(r3)
      b(x,y)=b(-1,y);
400043d8:	20c00517 	ldw	r3,20(r4)
400043dc:	23c00717 	ldw	r15,28(r4)
400043e0:	30c7383a 	mul	r3,r6,r3
400043e4:	78c7883a 	add	r3,r15,r3
400043e8:	189f883a 	add	r15,r3,r2
400043ec:	7bc00003 	ldbu	r15,0(r15)
400043f0:	1947883a 	add	r3,r3,r5
400043f4:	1bc00005 	stb	r15,0(r3)

void Intra_Chroma_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(-1,y);
400043f8:	20c00517 	ldw	r3,20(r4)
400043fc:	23c00817 	ldw	r15,32(r4)
40004400:	30c7383a 	mul	r3,r6,r3
40004404:	78c7883a 	add	r3,r15,r3
40004408:	189f883a 	add	r15,r3,r2
4000440c:	7bc00003 	ldbu	r15,0(r15)
40004410:	1b47883a 	add	r3,r3,r13
40004414:	1bc00005 	stb	r15,0(r3)
      b(x,y)=b(-1,y);
40004418:	20c00517 	ldw	r3,20(r4)
4000441c:	23c00717 	ldw	r15,28(r4)
40004420:	30c7383a 	mul	r3,r6,r3
40004424:	78c7883a 	add	r3,r15,r3
40004428:	189f883a 	add	r15,r3,r2
4000442c:	7bc00003 	ldbu	r15,0(r15)
40004430:	1b47883a 	add	r3,r3,r13
40004434:	1bc00005 	stb	r15,0(r3)

void Intra_Chroma_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(-1,y);
40004438:	20c00517 	ldw	r3,20(r4)
4000443c:	23c00817 	ldw	r15,32(r4)
40004440:	30c7383a 	mul	r3,r6,r3
40004444:	78c7883a 	add	r3,r15,r3
40004448:	189f883a 	add	r15,r3,r2
4000444c:	7bc00003 	ldbu	r15,0(r15)
40004450:	1b07883a 	add	r3,r3,r12
40004454:	1bc00005 	stb	r15,0(r3)
      b(x,y)=b(-1,y);
40004458:	20c00517 	ldw	r3,20(r4)
4000445c:	23c00717 	ldw	r15,28(r4)
40004460:	30c7383a 	mul	r3,r6,r3
40004464:	78c7883a 	add	r3,r15,r3
40004468:	189f883a 	add	r15,r3,r2
4000446c:	7bc00003 	ldbu	r15,0(r15)
40004470:	1b07883a 	add	r3,r3,r12
40004474:	1bc00005 	stb	r15,0(r3)

void Intra_Chroma_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(-1,y);
40004478:	20c00517 	ldw	r3,20(r4)
4000447c:	23c00817 	ldw	r15,32(r4)
40004480:	30c7383a 	mul	r3,r6,r3
40004484:	7ae1883a 	add	r16,r15,r11
40004488:	78df883a 	add	r15,r15,r3
4000448c:	789f883a 	add	r15,r15,r2
40004490:	7bc00003 	ldbu	r15,0(r15)
40004494:	80c7883a 	add	r3,r16,r3
40004498:	1bc00005 	stb	r15,0(r3)
      b(x,y)=b(-1,y);
4000449c:	20c00517 	ldw	r3,20(r4)
400044a0:	23c00717 	ldw	r15,28(r4)
400044a4:	30c7383a 	mul	r3,r6,r3
400044a8:	7ae1883a 	add	r16,r15,r11
400044ac:	78df883a 	add	r15,r15,r3
400044b0:	789f883a 	add	r15,r15,r2
400044b4:	7bc00003 	ldbu	r15,0(r15)
400044b8:	80c7883a 	add	r3,r16,r3
400044bc:	1bc00005 	stb	r15,0(r3)

void Intra_Chroma_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(-1,y);
400044c0:	27c00817 	ldw	ra,32(r4)
400044c4:	23c00517 	ldw	r15,20(r4)
400044c8:	faa1883a 	add	r16,ra,r10
400044cc:	33c7383a 	mul	r3,r6,r15
400044d0:	f8ff883a 	add	ra,ra,r3
400044d4:	f8bf883a 	add	ra,ra,r2
400044d8:	fbc00003 	ldbu	r15,0(ra)
400044dc:	80c7883a 	add	r3,r16,r3
400044e0:	1bc00005 	stb	r15,0(r3)
      b(x,y)=b(-1,y);
400044e4:	20c00517 	ldw	r3,20(r4)
400044e8:	23c00717 	ldw	r15,28(r4)
400044ec:	30c7383a 	mul	r3,r6,r3
400044f0:	7abf883a 	add	ra,r15,r10
400044f4:	78df883a 	add	r15,r15,r3
400044f8:	789f883a 	add	r15,r15,r2
400044fc:	7bc00003 	ldbu	r15,0(r15)
40004500:	f8c7883a 	add	r3,ra,r3
40004504:	1bc00005 	stb	r15,0(r3)

void Intra_Chroma_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(-1,y);
40004508:	20c00517 	ldw	r3,20(r4)
4000450c:	23c00817 	ldw	r15,32(r4)
40004510:	30c7383a 	mul	r3,r6,r3
40004514:	78bf883a 	add	ra,r15,r2
40004518:	7a5f883a 	add	r15,r15,r9
4000451c:	f8ff883a 	add	ra,ra,r3
40004520:	ffc00003 	ldbu	ra,0(ra)
40004524:	78c7883a 	add	r3,r15,r3
40004528:	1fc00005 	stb	ra,0(r3)
      b(x,y)=b(-1,y);
4000452c:	20c00517 	ldw	r3,20(r4)
40004530:	23c00717 	ldw	r15,28(r4)
40004534:	30c7383a 	mul	r3,r6,r3
40004538:	78bf883a 	add	ra,r15,r2
4000453c:	7a5f883a 	add	r15,r15,r9
40004540:	f8ff883a 	add	ra,ra,r3
40004544:	ffc00003 	ldbu	ra,0(ra)
40004548:	78c7883a 	add	r3,r15,r3
4000454c:	1fc00005 	stb	ra,0(r3)

void Intra_Chroma_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(-1,y);
40004550:	20c00517 	ldw	r3,20(r4)
40004554:	23c00817 	ldw	r15,32(r4)
40004558:	30c7383a 	mul	r3,r6,r3
4000455c:	78bf883a 	add	ra,r15,r2
40004560:	7a1f883a 	add	r15,r15,r8
40004564:	f8ff883a 	add	ra,ra,r3
40004568:	ffc00003 	ldbu	ra,0(ra)
4000456c:	78c7883a 	add	r3,r15,r3
40004570:	1fc00005 	stb	ra,0(r3)
      b(x,y)=b(-1,y);
40004574:	20c00517 	ldw	r3,20(r4)
40004578:	23c00717 	ldw	r15,28(r4)
4000457c:	30c7383a 	mul	r3,r6,r3
40004580:	78bf883a 	add	ra,r15,r2
40004584:	7a1f883a 	add	r15,r15,r8
40004588:	f8ff883a 	add	ra,ra,r3
4000458c:	ffc00003 	ldbu	ra,0(ra)
40004590:	78c7883a 	add	r3,r15,r3
40004594:	1fc00005 	stb	ra,0(r3)

void Intra_Chroma_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(-1,y);
40004598:	20c00517 	ldw	r3,20(r4)
4000459c:	23c00817 	ldw	r15,32(r4)
400045a0:	30c7383a 	mul	r3,r6,r3
400045a4:	78bf883a 	add	ra,r15,r2
400045a8:	79df883a 	add	r15,r15,r7
400045ac:	f8ff883a 	add	ra,ra,r3
400045b0:	ffc00003 	ldbu	ra,0(ra)
400045b4:	78c7883a 	add	r3,r15,r3
400045b8:	1fc00005 	stb	ra,0(r3)
      b(x,y)=b(-1,y);
400045bc:	20c00517 	ldw	r3,20(r4)
400045c0:	23c00717 	ldw	r15,28(r4)
400045c4:	30c7383a 	mul	r3,r6,r3
400045c8:	78bf883a 	add	ra,r15,r2
400045cc:	79df883a 	add	r15,r15,r7
400045d0:	f8ff883a 	add	ra,ra,r3
400045d4:	ffc00003 	ldbu	ra,0(ra)
400045d8:	78c7883a 	add	r3,r15,r3
400045dc:	31800044 	addi	r6,r6,1
400045e0:	1fc00005 	stb	ra,0(r3)
  }
}

void Intra_Chroma_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
400045e4:	71bf741e 	bne	r14,r6,400043b8 <__alt_data_end+0xc00043b8>
    for(x=0; x<8; ++x) {
      r(x,y)=r(-1,y);
      b(x,y)=b(-1,y);
    }
}
400045e8:	dfc00117 	ldw	ra,4(sp)
400045ec:	dc000017 	ldw	r16,0(sp)
400045f0:	dec00204 	addi	sp,sp,8
400045f4:	f800283a 	ret

400045f8 <Intra_Chroma_Vertical>:

void Intra_Chroma_Vertical(frame *f, int bx, int by) {
400045f8:	deffff04 	addi	sp,sp,-4
400045fc:	dfc00015 	stw	ra,0(sp)
40004600:	3005883a 	mov	r2,r6
40004604:	30ffffc4 	addi	r3,r6,-1
40004608:	2b400044 	addi	r13,r5,1
4000460c:	2b000084 	addi	r12,r5,2
40004610:	2ac000c4 	addi	r11,r5,3
40004614:	2a800104 	addi	r10,r5,4
40004618:	2a400144 	addi	r9,r5,5
4000461c:	2a000184 	addi	r8,r5,6
40004620:	29c001c4 	addi	r7,r5,7
40004624:	33800204 	addi	r14,r6,8
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(x,-1);
40004628:	21800517 	ldw	r6,20(r4)
4000462c:	23c00817 	ldw	r15,32(r4)
40004630:	30ff383a 	mul	ra,r6,r3
40004634:	795f883a 	add	r15,r15,r5
40004638:	118d383a 	mul	r6,r2,r6
4000463c:	7fff883a 	add	ra,r15,ra
40004640:	ffc00003 	ldbu	ra,0(ra)
40004644:	798d883a 	add	r6,r15,r6
40004648:	37c00005 	stb	ra,0(r6)
      b(x,y)=b(x,-1);
4000464c:	21800517 	ldw	r6,20(r4)
40004650:	23c00717 	ldw	r15,28(r4)
40004654:	30ff383a 	mul	ra,r6,r3
40004658:	795f883a 	add	r15,r15,r5
4000465c:	118d383a 	mul	r6,r2,r6
40004660:	7fff883a 	add	ra,r15,ra
40004664:	ffc00003 	ldbu	ra,0(ra)
40004668:	798d883a 	add	r6,r15,r6
4000466c:	37c00005 	stb	ra,0(r6)

void Intra_Chroma_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(x,-1);
40004670:	21800517 	ldw	r6,20(r4)
40004674:	23c00817 	ldw	r15,32(r4)
40004678:	30ff383a 	mul	ra,r6,r3
4000467c:	7b5f883a 	add	r15,r15,r13
40004680:	118d383a 	mul	r6,r2,r6
40004684:	7fff883a 	add	ra,r15,ra
40004688:	ffc00003 	ldbu	ra,0(ra)
4000468c:	798d883a 	add	r6,r15,r6
40004690:	37c00005 	stb	ra,0(r6)
      b(x,y)=b(x,-1);
40004694:	21800517 	ldw	r6,20(r4)
40004698:	23c00717 	ldw	r15,28(r4)
4000469c:	30ff383a 	mul	ra,r6,r3
400046a0:	7b5f883a 	add	r15,r15,r13
400046a4:	118d383a 	mul	r6,r2,r6
400046a8:	7fff883a 	add	ra,r15,ra
400046ac:	ffc00003 	ldbu	ra,0(ra)
400046b0:	798d883a 	add	r6,r15,r6
400046b4:	37c00005 	stb	ra,0(r6)

void Intra_Chroma_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(x,-1);
400046b8:	21800517 	ldw	r6,20(r4)
400046bc:	23c00817 	ldw	r15,32(r4)
400046c0:	30ff383a 	mul	ra,r6,r3
400046c4:	7b1f883a 	add	r15,r15,r12
400046c8:	118d383a 	mul	r6,r2,r6
400046cc:	7fff883a 	add	ra,r15,ra
400046d0:	ffc00003 	ldbu	ra,0(ra)
400046d4:	798d883a 	add	r6,r15,r6
400046d8:	37c00005 	stb	ra,0(r6)
      b(x,y)=b(x,-1);
400046dc:	21800517 	ldw	r6,20(r4)
400046e0:	23c00717 	ldw	r15,28(r4)
400046e4:	30ff383a 	mul	ra,r6,r3
400046e8:	7b1f883a 	add	r15,r15,r12
400046ec:	118d383a 	mul	r6,r2,r6
400046f0:	7fff883a 	add	ra,r15,ra
400046f4:	ffc00003 	ldbu	ra,0(ra)
400046f8:	798d883a 	add	r6,r15,r6
400046fc:	37c00005 	stb	ra,0(r6)

void Intra_Chroma_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(x,-1);
40004700:	21800517 	ldw	r6,20(r4)
40004704:	23c00817 	ldw	r15,32(r4)
40004708:	19bf383a 	mul	ra,r3,r6
4000470c:	7adf883a 	add	r15,r15,r11
40004710:	118d383a 	mul	r6,r2,r6
40004714:	7fff883a 	add	ra,r15,ra
40004718:	ffc00003 	ldbu	ra,0(ra)
4000471c:	798d883a 	add	r6,r15,r6
40004720:	37c00005 	stb	ra,0(r6)
      b(x,y)=b(x,-1);
40004724:	21800517 	ldw	r6,20(r4)
40004728:	23c00717 	ldw	r15,28(r4)
4000472c:	19bf383a 	mul	ra,r3,r6
40004730:	7adf883a 	add	r15,r15,r11
40004734:	118d383a 	mul	r6,r2,r6
40004738:	7fff883a 	add	ra,r15,ra
4000473c:	ffc00003 	ldbu	ra,0(ra)
40004740:	798d883a 	add	r6,r15,r6
40004744:	37c00005 	stb	ra,0(r6)

void Intra_Chroma_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(x,-1);
40004748:	23c00817 	ldw	r15,32(r4)
4000474c:	21800517 	ldw	r6,20(r4)
40004750:	7a9f883a 	add	r15,r15,r10
40004754:	19bf383a 	mul	ra,r3,r6
40004758:	118d383a 	mul	r6,r2,r6
4000475c:	7fff883a 	add	ra,r15,ra
40004760:	ffc00003 	ldbu	ra,0(ra)
40004764:	798d883a 	add	r6,r15,r6
40004768:	37c00005 	stb	ra,0(r6)
      b(x,y)=b(x,-1);
4000476c:	21800517 	ldw	r6,20(r4)
40004770:	23c00717 	ldw	r15,28(r4)
40004774:	19bf383a 	mul	ra,r3,r6
40004778:	7a9f883a 	add	r15,r15,r10
4000477c:	118d383a 	mul	r6,r2,r6
40004780:	7fff883a 	add	ra,r15,ra
40004784:	ffc00003 	ldbu	ra,0(ra)
40004788:	798d883a 	add	r6,r15,r6
4000478c:	37c00005 	stb	ra,0(r6)

void Intra_Chroma_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(x,-1);
40004790:	21800517 	ldw	r6,20(r4)
40004794:	23c00817 	ldw	r15,32(r4)
40004798:	19bf383a 	mul	ra,r3,r6
4000479c:	7a5f883a 	add	r15,r15,r9
400047a0:	118d383a 	mul	r6,r2,r6
400047a4:	7fff883a 	add	ra,r15,ra
400047a8:	ffc00003 	ldbu	ra,0(ra)
400047ac:	798d883a 	add	r6,r15,r6
400047b0:	37c00005 	stb	ra,0(r6)
      b(x,y)=b(x,-1);
400047b4:	21800517 	ldw	r6,20(r4)
400047b8:	23c00717 	ldw	r15,28(r4)
400047bc:	19bf383a 	mul	ra,r3,r6
400047c0:	7a5f883a 	add	r15,r15,r9
400047c4:	118d383a 	mul	r6,r2,r6
400047c8:	7fff883a 	add	ra,r15,ra
400047cc:	ffc00003 	ldbu	ra,0(ra)
400047d0:	798d883a 	add	r6,r15,r6
400047d4:	37c00005 	stb	ra,0(r6)

void Intra_Chroma_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(x,-1);
400047d8:	21800517 	ldw	r6,20(r4)
400047dc:	23c00817 	ldw	r15,32(r4)
400047e0:	19bf383a 	mul	ra,r3,r6
400047e4:	7a1f883a 	add	r15,r15,r8
400047e8:	118d383a 	mul	r6,r2,r6
400047ec:	7fff883a 	add	ra,r15,ra
400047f0:	ffc00003 	ldbu	ra,0(ra)
400047f4:	798d883a 	add	r6,r15,r6
400047f8:	37c00005 	stb	ra,0(r6)
      b(x,y)=b(x,-1);
400047fc:	21800517 	ldw	r6,20(r4)
40004800:	23c00717 	ldw	r15,28(r4)
40004804:	19bf383a 	mul	ra,r3,r6
40004808:	7a1f883a 	add	r15,r15,r8
4000480c:	118d383a 	mul	r6,r2,r6
40004810:	7fff883a 	add	ra,r15,ra
40004814:	ffc00003 	ldbu	ra,0(ra)
40004818:	798d883a 	add	r6,r15,r6
4000481c:	37c00005 	stb	ra,0(r6)

void Intra_Chroma_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(x,-1);
40004820:	21800517 	ldw	r6,20(r4)
40004824:	23c00817 	ldw	r15,32(r4)
40004828:	19bf383a 	mul	ra,r3,r6
4000482c:	79df883a 	add	r15,r15,r7
40004830:	118d383a 	mul	r6,r2,r6
40004834:	7fff883a 	add	ra,r15,ra
40004838:	ffc00003 	ldbu	ra,0(ra)
4000483c:	798d883a 	add	r6,r15,r6
40004840:	37c00005 	stb	ra,0(r6)
      b(x,y)=b(x,-1);
40004844:	21800517 	ldw	r6,20(r4)
40004848:	23c00717 	ldw	r15,28(r4)
4000484c:	19bf383a 	mul	ra,r3,r6
40004850:	79df883a 	add	r15,r15,r7
40004854:	118d383a 	mul	r6,r2,r6
40004858:	7fff883a 	add	ra,r15,ra
4000485c:	ffc00003 	ldbu	ra,0(ra)
40004860:	798d883a 	add	r6,r15,r6
40004864:	10800044 	addi	r2,r2,1
40004868:	37c00005 	stb	ra,0(r6)
    }
}

void Intra_Chroma_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
4000486c:	70bf6e1e 	bne	r14,r2,40004628 <__alt_data_end+0xc0004628>
    for(x=0; x<8; ++x) {
      r(x,y)=r(x,-1);
      b(x,y)=b(x,-1);
    }
}
40004870:	dfc00017 	ldw	ra,0(sp)
40004874:	dec00104 	addi	sp,sp,4
40004878:	f800283a 	ret

4000487c <Intra_Chroma_Plane>:

void Intra_Chroma_Plane(frame *f, int bx, int by) {
4000487c:	21c00517 	ldw	r7,20(r4)
40004880:	deffeb04 	addi	sp,sp,-84
40004884:	dd401015 	stw	r21,64(sp)
40004888:	30bfffc4 	addi	r2,r6,-1
4000488c:	25400817 	ldw	r21,32(r4)
  int A,B,C,H,V,x,y;
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
40004890:	28c00104 	addi	r3,r5,4
40004894:	d8c00015 	stw	r3,0(sp)
40004898:	d8800915 	stw	r2,36(sp)
4000489c:	11c5383a 	mul	r2,r2,r7
      r(x,y)=r(x,-1);
      b(x,y)=b(x,-1);
    }
}

void Intra_Chroma_Plane(frame *f, int bx, int by) {
400048a0:	dc000b15 	stw	r16,44(sp)
  int A,B,C,H,V,x,y;
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
400048a4:	2ac00144 	addi	r11,r5,5
400048a8:	dc000017 	ldw	r16,0(sp)
400048ac:	2a800044 	addi	r10,r5,1
400048b0:	aad9883a 	add	r12,r21,r11
400048b4:	aa91883a 	add	r8,r21,r10
      r(x,y)=r(x,-1);
      b(x,y)=b(x,-1);
    }
}

void Intra_Chroma_Plane(frame *f, int bx, int by) {
400048b8:	dfc01415 	stw	ra,80(sp)
400048bc:	df001315 	stw	fp,76(sp)
400048c0:	dd801115 	stw	r22,68(sp)
400048c4:	dd000f15 	stw	r20,60(sp)
400048c8:	dcc00e15 	stw	r19,56(sp)
400048cc:	dc800d15 	stw	r18,52(sp)
400048d0:	dc400c15 	stw	r17,48(sp)
400048d4:	ddc01215 	stw	r23,72(sp)
  int A,B,C,H,V,x,y;
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
400048d8:	2b7fffc4 	addi	r13,r5,-1
400048dc:	6099883a 	add	r12,r12,r2
400048e0:	4091883a 	add	r8,r8,r2
400048e4:	2a400184 	addi	r9,r5,6
400048e8:	2fc00084 	addi	ra,r5,2
400048ec:	2f0001c4 	addi	fp,r5,7
400048f0:	ab47883a 	add	r3,r21,r13
400048f4:	42000003 	ldbu	r8,0(r8)
400048f8:	db400215 	stw	r13,8(sp)
400048fc:	63000003 	ldbu	r12,0(r12)
40004900:	ac1b883a 	add	r13,r21,r16
40004904:	aa5f883a 	add	r15,r21,r9
40004908:	afe1883a 	add	r16,r21,ra
4000490c:	af23883a 	add	r17,r21,fp
40004910:	80a1883a 	add	r16,r16,r2
40004914:	a89d883a 	add	r14,r21,r2
40004918:	789f883a 	add	r15,r15,r2
4000491c:	689b883a 	add	r13,r13,r2
40004920:	88a3883a 	add	r17,r17,r2
40004924:	1885883a 	add	r2,r3,r2
40004928:	15c00003 	ldbu	r23,0(r2)
4000492c:	80800003 	ldbu	r2,0(r16)
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(r(-1,4+y)-r(-1,2-y));
40004930:	34000144 	addi	r16,r6,5
40004934:	dc000615 	stw	r16,24(sp)
}

void Intra_Chroma_Plane(frame *f, int bx, int by) {
  int A,B,C,H,V,x,y;
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
40004938:	6219c83a 	sub	r12,r12,r8
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(r(-1,4+y)-r(-1,2-y));
4000493c:	34000044 	addi	r16,r6,1
40004940:	32000104 	addi	r8,r6,4
40004944:	dc000515 	stw	r16,20(sp)
40004948:	da000815 	stw	r8,32(sp)
4000494c:	34000184 	addi	r16,r6,6
40004950:	da000617 	ldw	r8,24(sp)
40004954:	dc000415 	stw	r16,16(sp)
40004958:	34000084 	addi	r16,r6,2
4000495c:	dc000715 	stw	r16,28(sp)
40004960:	dc000517 	ldw	r16,20(sp)
40004964:	41ed383a 	mul	r22,r8,r7
40004968:	da000417 	ldw	r8,16(sp)
4000496c:	81e9383a 	mul	r20,r16,r7
}

void Intra_Chroma_Plane(frame *f, int bx, int by) {
  int A,B,C,H,V,x,y;
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
40004970:	715d883a 	add	r14,r14,r5
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(r(-1,4+y)-r(-1,2-y));
40004974:	340001c4 	addi	r16,r6,7
}

void Intra_Chroma_Plane(frame *f, int bx, int by) {
  int A,B,C,H,V,x,y;
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
40004978:	8c400003 	ldbu	r17,0(r17)
4000497c:	7bc00003 	ldbu	r15,0(r15)
40004980:	73800003 	ldbu	r14,0(r14)
40004984:	6b400003 	ldbu	r13,0(r13)
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(r(-1,4+y)-r(-1,2-y));
40004988:	41e7383a 	mul	r19,r8,r7
4000498c:	dc000315 	stw	r16,12(sp)
40004990:	da000817 	ldw	r8,32(sp)
}

void Intra_Chroma_Plane(frame *f, int bx, int by) {
  int A,B,C,H,V,x,y;
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
40004994:	7b9dc83a 	sub	r14,r15,r14
40004998:	689bc83a 	sub	r13,r13,r2
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(r(-1,4+y)-r(-1,2-y));
4000499c:	41e1383a 	mul	r16,r8,r7
400049a0:	da000717 	ldw	r8,28(sp)
}

void Intra_Chroma_Plane(frame *f, int bx, int by) {
  int A,B,C,H,V,x,y;
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
400049a4:	7385883a 	add	r2,r14,r14
400049a8:	6319883a 	add	r12,r12,r12
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(r(-1,4+y)-r(-1,2-y));
400049ac:	41df383a 	mul	r15,r8,r7
400049b0:	da000317 	ldw	r8,12(sp)
}

void Intra_Chroma_Plane(frame *f, int bx, int by) {
  int A,B,C,H,V,x,y;
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
400049b4:	6359883a 	add	r12,r12,r13
400049b8:	1385883a 	add	r2,r2,r14
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(r(-1,4+y)-r(-1,2-y));
400049bc:	41d1383a 	mul	r8,r8,r7
400049c0:	31e5383a 	mul	r18,r6,r7
}

void Intra_Chroma_Plane(frame *f, int bx, int by) {
  int A,B,C,H,V,x,y;
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
400049c4:	1305883a 	add	r2,r2,r12
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(r(-1,4+y)-r(-1,2-y));
400049c8:	da000115 	stw	r8,4(sp)
400049cc:	db000117 	ldw	r12,4(sp)
  A=16*(r(-1,7)+r(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
400049d0:	8dd1c83a 	sub	r8,r17,r23
400049d4:	4211883a 	add	r8,r8,r8

void Intra_Chroma_Plane(frame *f, int bx, int by) {
  int A,B,C,H,V,x,y;
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(r(-1,4+y)-r(-1,2-y));
400049d8:	1dad883a 	add	r22,r3,r22
400049dc:	1d29883a 	add	r20,r3,r20
400049e0:	1ce7883a 	add	r19,r3,r19
400049e4:	1ca5883a 	add	r18,r3,r18
  A=16*(r(-1,7)+r(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
400049e8:	4211883a 	add	r8,r8,r8

void Intra_Chroma_Plane(frame *f, int bx, int by) {
  int A,B,C,H,V,x,y;
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(r(-1,4+y)-r(-1,2-y));
400049ec:	a3800003 	ldbu	r14,0(r20)
400049f0:	1c21883a 	add	r16,r3,r16
400049f4:	b3400003 	ldbu	r13,0(r22)
400049f8:	1bdf883a 	add	r15,r3,r15
400049fc:	9cc00003 	ldbu	r19,0(r19)
40004a00:	1b07883a 	add	r3,r3,r12
  A=16*(r(-1,7)+r(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004a04:	4085883a 	add	r2,r8,r2

void Intra_Chroma_Plane(frame *f, int bx, int by) {
  int A,B,C,H,V,x,y;
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(r(-1,4+y)-r(-1,2-y));
40004a08:	94800003 	ldbu	r18,0(r18)
40004a0c:	18c00003 	ldbu	r3,0(r3)
40004a10:	83000003 	ldbu	r12,0(r16)
40004a14:	7bc00003 	ldbu	r15,0(r15)
  A=16*(r(-1,7)+r(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004a18:	10800464 	muli	r2,r2,17

void Intra_Chroma_Plane(frame *f, int bx, int by) {
  int A,B,C,H,V,x,y;
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(r(-1,4+y)-r(-1,2-y));
40004a1c:	9ca5c83a 	sub	r18,r19,r18
40004a20:	6b9bc83a 	sub	r13,r13,r14
40004a24:	6b5b883a 	add	r13,r13,r13
40004a28:	63d9c83a 	sub	r12,r12,r15
40004a2c:	9491883a 	add	r8,r18,r18
  A=16*(r(-1,7)+r(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004a30:	1defc83a 	sub	r23,r3,r23
40004a34:	10800404 	addi	r2,r2,16
40004a38:	1005d17a 	srai	r2,r2,5

void Intra_Chroma_Plane(frame *f, int bx, int by) {
  int A,B,C,H,V,x,y;
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(r(-1,4+y)-r(-1,2-y));
40004a3c:	44a5883a 	add	r18,r8,r18
40004a40:	6b19883a 	add	r12,r13,r12
  A=16*(r(-1,7)+r(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004a44:	bdef883a 	add	r23,r23,r23

void Intra_Chroma_Plane(frame *f, int bx, int by) {
  int A,B,C,H,V,x,y;
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(r(-1,4+y)-r(-1,2-y));
40004a48:	9319883a 	add	r12,r18,r12
  A=16*(r(-1,7)+r(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004a4c:	bdef883a 	add	r23,r23,r23
void Intra_Chroma_Plane(frame *f, int bx, int by) {
  int A,B,C,H,V,x,y;
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(r(-1,4+y)-r(-1,2-y));
  A=16*(r(-1,7)+r(7,-1));
40004a50:	88dd883a 	add	r14,r17,r3
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004a54:	bb07883a 	add	r3,r23,r12
void Intra_Chroma_Plane(frame *f, int bx, int by) {
  int A,B,C,H,V,x,y;
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(r(-1,4+y)-r(-1,2-y));
  A=16*(r(-1,7)+r(7,-1));
40004a58:	701c913a 	slli	r14,r14,4
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004a5c:	18c00464 	muli	r3,r3,17
40004a60:	147fff64 	muli	r17,r2,-3
40004a64:	10a1883a 	add	r16,r2,r2
40004a68:	18c00404 	addi	r3,r3,16
40004a6c:	8ba3883a 	add	r17,r17,r14
40004a70:	1465883a 	add	r18,r2,r17
40004a74:	1807d17a 	srai	r3,r3,5
40004a78:	14a7883a 	add	r19,r2,r18
40004a7c:	84e1883a 	add	r16,r16,r19
40004a80:	1a3fff64 	muli	r8,r3,-3
40004a84:	1429883a 	add	r20,r2,r16
40004a88:	152d883a 	add	r22,r2,r20
40004a8c:	1599883a 	add	r12,r2,r22
40004a90:	2b4000c4 	addi	r13,r5,3
40004a94:	4463883a 	add	r17,r8,r17
40004a98:	6219883a 	add	r12,r12,r8
40004a9c:	45ad883a 	add	r22,r8,r22
40004aa0:	4529883a 	add	r20,r8,r20
40004aa4:	4421883a 	add	r16,r8,r16
40004aa8:	721d883a 	add	r14,r14,r8
40004aac:	44e7883a 	add	r19,r8,r19
40004ab0:	44a5883a 	add	r18,r8,r18
40004ab4:	db400115 	stw	r13,4(sp)
40004ab8:	8c400404 	addi	r17,r17,16
40004abc:	63000404 	addi	r12,r12,16
40004ac0:	b5800404 	addi	r22,r22,16
40004ac4:	a5000404 	addi	r20,r20,16
40004ac8:	84000404 	addi	r16,r16,16
40004acc:	73800404 	addi	r14,r14,16
40004ad0:	9cc00404 	addi	r19,r19,16
40004ad4:	94800404 	addi	r18,r18,16
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
40004ad8:	001f883a 	mov	r15,zero
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
40004adc:	03403fc4 	movi	r13,255
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(r(-1,4+y)-r(-1,2-y));
  A=16*(r(-1,7)+r(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
40004ae0:	05c00204 	movi	r23,8
40004ae4:	00005706 	br	40004c44 <Intra_Chroma_Plane+0x3c8>
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
40004ae8:	6a00010e 	bge	r13,r8,40004af0 <Intra_Chroma_Plane+0x274>
40004aec:	02003fc4 	movi	r8,255
40004af0:	3a000005 	stb	r8,0(r7)
40004af4:	21c00517 	ldw	r7,20(r4)
40004af8:	25400817 	ldw	r21,32(r4)
40004afc:	9011d17a 	srai	r8,r18,5
40004b00:	11cf383a 	mul	r7,r2,r7
40004b04:	3a8f883a 	add	r7,r7,r10
40004b08:	a9cf883a 	add	r7,r21,r7
40004b0c:	40005f16 	blt	r8,zero,40004c8c <Intra_Chroma_Plane+0x410>
40004b10:	6a00010e 	bge	r13,r8,40004b18 <Intra_Chroma_Plane+0x29c>
40004b14:	02003fc4 	movi	r8,255
40004b18:	3a000005 	stb	r8,0(r7)
40004b1c:	21c00517 	ldw	r7,20(r4)
40004b20:	25400817 	ldw	r21,32(r4)
40004b24:	9811d17a 	srai	r8,r19,5
40004b28:	11cf383a 	mul	r7,r2,r7
40004b2c:	3fcf883a 	add	r7,r7,ra
40004b30:	a9cf883a 	add	r7,r21,r7
40004b34:	40005716 	blt	r8,zero,40004c94 <Intra_Chroma_Plane+0x418>
40004b38:	6a00010e 	bge	r13,r8,40004b40 <Intra_Chroma_Plane+0x2c4>
40004b3c:	02003fc4 	movi	r8,255
40004b40:	3a000005 	stb	r8,0(r7)
40004b44:	21c00517 	ldw	r7,20(r4)
40004b48:	dd400117 	ldw	r21,4(sp)
40004b4c:	7011d17a 	srai	r8,r14,5
40004b50:	11cf383a 	mul	r7,r2,r7
40004b54:	3d4f883a 	add	r7,r7,r21
40004b58:	25400817 	ldw	r21,32(r4)
40004b5c:	a9cf883a 	add	r7,r21,r7
40004b60:	40004816 	blt	r8,zero,40004c84 <Intra_Chroma_Plane+0x408>
40004b64:	6a00010e 	bge	r13,r8,40004b6c <Intra_Chroma_Plane+0x2f0>
40004b68:	02003fc4 	movi	r8,255
40004b6c:	3a000005 	stb	r8,0(r7)
40004b70:	21c00517 	ldw	r7,20(r4)
40004b74:	dd400017 	ldw	r21,0(sp)
40004b78:	8011d17a 	srai	r8,r16,5
40004b7c:	11cf383a 	mul	r7,r2,r7
40004b80:	3d4f883a 	add	r7,r7,r21
40004b84:	25400817 	ldw	r21,32(r4)
40004b88:	a9cf883a 	add	r7,r21,r7
40004b8c:	40003b16 	blt	r8,zero,40004c7c <Intra_Chroma_Plane+0x400>
40004b90:	6a00010e 	bge	r13,r8,40004b98 <Intra_Chroma_Plane+0x31c>
40004b94:	02003fc4 	movi	r8,255
40004b98:	3a000005 	stb	r8,0(r7)
40004b9c:	21c00517 	ldw	r7,20(r4)
40004ba0:	25400817 	ldw	r21,32(r4)
40004ba4:	a011d17a 	srai	r8,r20,5
40004ba8:	11cf383a 	mul	r7,r2,r7
40004bac:	3acf883a 	add	r7,r7,r11
40004bb0:	a9cf883a 	add	r7,r21,r7
40004bb4:	40002f16 	blt	r8,zero,40004c74 <Intra_Chroma_Plane+0x3f8>
40004bb8:	6a00010e 	bge	r13,r8,40004bc0 <Intra_Chroma_Plane+0x344>
40004bbc:	02003fc4 	movi	r8,255
40004bc0:	3a000005 	stb	r8,0(r7)
40004bc4:	21c00517 	ldw	r7,20(r4)
40004bc8:	25400817 	ldw	r21,32(r4)
40004bcc:	b011d17a 	srai	r8,r22,5
40004bd0:	11cf383a 	mul	r7,r2,r7
40004bd4:	3a4f883a 	add	r7,r7,r9
40004bd8:	a9cf883a 	add	r7,r21,r7
40004bdc:	40002316 	blt	r8,zero,40004c6c <Intra_Chroma_Plane+0x3f0>
40004be0:	6a00010e 	bge	r13,r8,40004be8 <Intra_Chroma_Plane+0x36c>
40004be4:	02003fc4 	movi	r8,255
40004be8:	3a000005 	stb	r8,0(r7)
40004bec:	21c00517 	ldw	r7,20(r4)
40004bf0:	25400817 	ldw	r21,32(r4)
40004bf4:	6011d17a 	srai	r8,r12,5
40004bf8:	11c5383a 	mul	r2,r2,r7
40004bfc:	1705883a 	add	r2,r2,fp
40004c00:	a885883a 	add	r2,r21,r2
40004c04:	40001716 	blt	r8,zero,40004c64 <Intra_Chroma_Plane+0x3e8>
40004c08:	6a00010e 	bge	r13,r8,40004c10 <Intra_Chroma_Plane+0x394>
40004c0c:	02003fc4 	movi	r8,255
40004c10:	12000005 	stb	r8,0(r2)
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(r(4+x,-1)-r(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(r(-1,4+y)-r(-1,2-y));
  A=16*(r(-1,7)+r(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
40004c14:	7bc00044 	addi	r15,r15,1
40004c18:	88e3883a 	add	r17,r17,r3
40004c1c:	60d9883a 	add	r12,r12,r3
40004c20:	b0ed883a 	add	r22,r22,r3
40004c24:	a0e9883a 	add	r20,r20,r3
40004c28:	80e1883a 	add	r16,r16,r3
40004c2c:	70dd883a 	add	r14,r14,r3
40004c30:	98e7883a 	add	r19,r19,r3
40004c34:	90e5883a 	add	r18,r18,r3
40004c38:	7dc01826 	beq	r15,r23,40004c9c <Intra_Chroma_Plane+0x420>
40004c3c:	25400817 	ldw	r21,32(r4)
40004c40:	21c00517 	ldw	r7,20(r4)
40004c44:	7985883a 	add	r2,r15,r6
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
40004c48:	11cf383a 	mul	r7,r2,r7
40004c4c:	8811d17a 	srai	r8,r17,5
40004c50:	394f883a 	add	r7,r7,r5
40004c54:	a9cf883a 	add	r7,r21,r7
40004c58:	403fa30e 	bge	r8,zero,40004ae8 <__alt_data_end+0xc0004ae8>
40004c5c:	0011883a 	mov	r8,zero
40004c60:	003fa306 	br	40004af0 <__alt_data_end+0xc0004af0>
40004c64:	0011883a 	mov	r8,zero
40004c68:	003fe906 	br	40004c10 <__alt_data_end+0xc0004c10>
40004c6c:	0011883a 	mov	r8,zero
40004c70:	003fdd06 	br	40004be8 <__alt_data_end+0xc0004be8>
40004c74:	0011883a 	mov	r8,zero
40004c78:	003fd106 	br	40004bc0 <__alt_data_end+0xc0004bc0>
40004c7c:	0011883a 	mov	r8,zero
40004c80:	003fc506 	br	40004b98 <__alt_data_end+0xc0004b98>
40004c84:	0011883a 	mov	r8,zero
40004c88:	003fb806 	br	40004b6c <__alt_data_end+0xc0004b6c>
40004c8c:	0011883a 	mov	r8,zero
40004c90:	003fa106 	br	40004b18 <__alt_data_end+0xc0004b18>
40004c94:	0011883a 	mov	r8,zero
40004c98:	003fa906 	br	40004b40 <__alt_data_end+0xc0004b40>
40004c9c:	20800517 	ldw	r2,20(r4)
40004ca0:	d8c00917 	ldw	r3,36(sp)
40004ca4:	22000717 	ldw	r8,28(r4)
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
40004ca8:	db400017 	ldw	r13,0(sp)
40004cac:	18a9383a 	mul	r20,r3,r2
40004cb0:	d9c00217 	ldw	r7,8(sp)
40004cb4:	4361883a 	add	r16,r8,r13
40004cb8:	471b883a 	add	r13,r8,fp
40004cbc:	8521883a 	add	r16,r16,r20
40004cc0:	6d1b883a 	add	r13,r13,r20
40004cc4:	41d9883a 	add	r12,r8,r7
40004cc8:	6b400003 	ldbu	r13,0(r13)
40004ccc:	85400003 	ldbu	r21,0(r16)
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
40004cd0:	d9c00417 	ldw	r7,16(sp)
40004cd4:	dc000517 	ldw	r16,20(sp)
  A=16*(r(-1,7)+r(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
40004cd8:	4263883a 	add	r17,r8,r9
40004cdc:	8d23883a 	add	r17,r17,r20
40004ce0:	42e5883a 	add	r18,r8,r11
40004ce4:	429d883a 	add	r14,r8,r10
40004ce8:	9525883a 	add	r18,r18,r20
40004cec:	751d883a 	add	r14,r14,r20
40004cf0:	8d800003 	ldbu	r22,0(r17)
40004cf4:	6523883a 	add	r17,r12,r20
40004cf8:	db400215 	stw	r13,8(sp)
40004cfc:	94c00003 	ldbu	r19,0(r18)
40004d00:	8b400003 	ldbu	r13,0(r17)
40004d04:	73800003 	ldbu	r14,0(r14)
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
40004d08:	80a3383a 	mul	r17,r16,r2
40004d0c:	38a1383a 	mul	r16,r7,r2
40004d10:	d9c00317 	ldw	r7,12(sp)
  A=16*(r(-1,7)+r(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
40004d14:	47c7883a 	add	r3,r8,ra
40004d18:	1d07883a 	add	r3,r3,r20
40004d1c:	18c00003 	ldbu	r3,0(r3)
40004d20:	9ba7c83a 	sub	r19,r19,r14
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
40004d24:	388f383a 	mul	r7,r7,r2
40004d28:	db800617 	ldw	r14,24(sp)
  A=16*(r(-1,7)+r(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
40004d2c:	451f883a 	add	r15,r8,r20
40004d30:	795f883a 	add	r15,r15,r5
40004d34:	a8ebc83a 	sub	r21,r21,r3
40004d38:	7bc00003 	ldbu	r15,0(r15)
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
40004d3c:	70a5383a 	mul	r18,r14,r2
40004d40:	d8c00717 	ldw	r3,28(sp)
40004d44:	db800817 	ldw	r14,32(sp)
40004d48:	d9c00315 	stw	r7,12(sp)
  A=16*(b(-1,7)+b(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004d4c:	d9c00217 	ldw	r7,8(sp)
  A=16*(r(-1,7)+r(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
40004d50:	b3edc83a 	sub	r22,r22,r15
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
40004d54:	30af383a 	mul	r23,r6,r2
40004d58:	709f383a 	mul	r15,r14,r2
40004d5c:	189d383a 	mul	r14,r3,r2
  A=16*(b(-1,7)+b(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004d60:	3b47c83a 	sub	r3,r7,r13
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
40004d64:	d9c00317 	ldw	r7,12(sp)
  A=16*(r(-1,7)+r(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
40004d68:	b5a9883a 	add	r20,r22,r22
40004d6c:	9ce7883a 	add	r19,r19,r19
40004d70:	a5a9883a 	add	r20,r20,r22
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
40004d74:	65ef883a 	add	r23,r12,r23
40004d78:	63df883a 	add	r15,r12,r15
40004d7c:	639d883a 	add	r14,r12,r14
  A=16*(r(-1,7)+r(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
40004d80:	9d67883a 	add	r19,r19,r21
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
40004d84:	64a5883a 	add	r18,r12,r18
40004d88:	6463883a 	add	r17,r12,r17
40004d8c:	6421883a 	add	r16,r12,r16
  A=16*(b(-1,7)+b(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004d90:	18c7883a 	add	r3,r3,r3
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
40004d94:	61d9883a 	add	r12,r12,r7
40004d98:	65800003 	ldbu	r22,0(r12)
  A=16*(r(-1,7)+r(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
40004d9c:	a4e7883a 	add	r19,r20,r19
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
40004da0:	94800003 	ldbu	r18,0(r18)
40004da4:	8c400003 	ldbu	r17,0(r17)
  A=16*(b(-1,7)+b(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004da8:	18c7883a 	add	r3,r3,r3
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
40004dac:	bd400003 	ldbu	r21,0(r23)
  A=16*(b(-1,7)+b(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004db0:	1cc7883a 	add	r3,r3,r19
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
40004db4:	7b000003 	ldbu	r12,0(r15)
40004db8:	84000003 	ldbu	r16,0(r16)
40004dbc:	73c00003 	ldbu	r15,0(r14)
  A=16*(b(-1,7)+b(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004dc0:	18c00464 	muli	r3,r3,17
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
40004dc4:	945dc83a 	sub	r14,r18,r17
  A=16*(b(-1,7)+b(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004dc8:	b35bc83a 	sub	r13,r22,r13
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
40004dcc:	8561c83a 	sub	r16,r16,r21
40004dd0:	63d9c83a 	sub	r12,r12,r15
  A=16*(b(-1,7)+b(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004dd4:	6b5b883a 	add	r13,r13,r13
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
40004dd8:	739d883a 	add	r14,r14,r14
40004ddc:	841f883a 	add	r15,r16,r16
40004de0:	731d883a 	add	r14,r14,r12
  A=16*(b(-1,7)+b(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004de4:	18c00404 	addi	r3,r3,16
40004de8:	6b59883a 	add	r12,r13,r13
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
  A=16*(b(-1,7)+b(7,-1));
40004dec:	db400217 	ldw	r13,8(sp)
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004df0:	1807d17a 	srai	r3,r3,5
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
40004df4:	7c21883a 	add	r16,r15,r16
40004df8:	839d883a 	add	r14,r16,r14
  A=16*(b(-1,7)+b(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004dfc:	6399883a 	add	r12,r12,r14
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    r(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
  A=16*(b(-1,7)+b(7,-1));
40004e00:	6da1883a 	add	r16,r13,r22
40004e04:	8020913a 	slli	r16,r16,4
  B=(17*H+16)>>5; C=(17*V+16)>>5;
40004e08:	63000464 	muli	r12,r12,17
40004e0c:	1cbfff64 	muli	r18,r3,-3
40004e10:	18e3883a 	add	r17,r3,r3
40004e14:	63000404 	addi	r12,r12,16
40004e18:	9425883a 	add	r18,r18,r16
40004e1c:	1ca7883a 	add	r19,r3,r18
40004e20:	6019d17a 	srai	r12,r12,5
40004e24:	1ce9883a 	add	r20,r3,r19
40004e28:	8d23883a 	add	r17,r17,r20
40004e2c:	637fff64 	muli	r13,r12,-3
40004e30:	1c6b883a 	add	r21,r3,r17
40004e34:	1d6d883a 	add	r22,r3,r21
40004e38:	1d9d883a 	add	r14,r3,r22
40004e3c:	6ca5883a 	add	r18,r13,r18
40004e40:	735d883a 	add	r14,r14,r13
40004e44:	6dad883a 	add	r22,r13,r22
40004e48:	6d6b883a 	add	r21,r13,r21
40004e4c:	6c63883a 	add	r17,r13,r17
40004e50:	8361883a 	add	r16,r16,r13
40004e54:	6d29883a 	add	r20,r13,r20
40004e58:	6ce7883a 	add	r19,r13,r19
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
40004e5c:	d8000a15 	stw	zero,40(sp)
40004e60:	94800404 	addi	r18,r18,16
40004e64:	73800404 	addi	r14,r14,16
40004e68:	b5800404 	addi	r22,r22,16
40004e6c:	ad400404 	addi	r21,r21,16
40004e70:	8c400404 	addi	r17,r17,16
40004e74:	84000404 	addi	r16,r16,16
40004e78:	a5000404 	addi	r20,r20,16
40004e7c:	9cc00404 	addi	r19,r19,16
    b(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
40004e80:	03c03fc4 	movi	r15,255
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
  A=16*(b(-1,7)+b(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
40004e84:	05c00204 	movi	r23,8
40004e88:	000f883a 	mov	r7,zero
40004e8c:	00005706 	br	40004fec <Intra_Chroma_Plane+0x770>
    b(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
40004e90:	7b40010e 	bge	r15,r13,40004e98 <Intra_Chroma_Plane+0x61c>
40004e94:	03403fc4 	movi	r13,255
40004e98:	13400005 	stb	r13,0(r2)
40004e9c:	20800517 	ldw	r2,20(r4)
40004ea0:	23400717 	ldw	r13,28(r4)
40004ea4:	9811d17a 	srai	r8,r19,5
40004ea8:	1885383a 	mul	r2,r3,r2
40004eac:	1285883a 	add	r2,r2,r10
40004eb0:	6885883a 	add	r2,r13,r2
40004eb4:	40005f16 	blt	r8,zero,40005034 <Intra_Chroma_Plane+0x7b8>
40004eb8:	7a00010e 	bge	r15,r8,40004ec0 <Intra_Chroma_Plane+0x644>
40004ebc:	02003fc4 	movi	r8,255
40004ec0:	12000005 	stb	r8,0(r2)
40004ec4:	20800517 	ldw	r2,20(r4)
40004ec8:	23400717 	ldw	r13,28(r4)
40004ecc:	a011d17a 	srai	r8,r20,5
40004ed0:	1885383a 	mul	r2,r3,r2
40004ed4:	17c5883a 	add	r2,r2,ra
40004ed8:	6885883a 	add	r2,r13,r2
40004edc:	40005716 	blt	r8,zero,4000503c <Intra_Chroma_Plane+0x7c0>
40004ee0:	7a00010e 	bge	r15,r8,40004ee8 <Intra_Chroma_Plane+0x66c>
40004ee4:	02003fc4 	movi	r8,255
40004ee8:	12000005 	stb	r8,0(r2)
40004eec:	20800517 	ldw	r2,20(r4)
40004ef0:	db400117 	ldw	r13,4(sp)
40004ef4:	8011d17a 	srai	r8,r16,5
40004ef8:	1885383a 	mul	r2,r3,r2
40004efc:	1345883a 	add	r2,r2,r13
40004f00:	23400717 	ldw	r13,28(r4)
40004f04:	6885883a 	add	r2,r13,r2
40004f08:	40004816 	blt	r8,zero,4000502c <Intra_Chroma_Plane+0x7b0>
40004f0c:	7a00010e 	bge	r15,r8,40004f14 <Intra_Chroma_Plane+0x698>
40004f10:	02003fc4 	movi	r8,255
40004f14:	12000005 	stb	r8,0(r2)
40004f18:	20800517 	ldw	r2,20(r4)
40004f1c:	db400017 	ldw	r13,0(sp)
40004f20:	8811d17a 	srai	r8,r17,5
40004f24:	1885383a 	mul	r2,r3,r2
40004f28:	1345883a 	add	r2,r2,r13
40004f2c:	23400717 	ldw	r13,28(r4)
40004f30:	6885883a 	add	r2,r13,r2
40004f34:	40003b16 	blt	r8,zero,40005024 <Intra_Chroma_Plane+0x7a8>
40004f38:	7a00010e 	bge	r15,r8,40004f40 <Intra_Chroma_Plane+0x6c4>
40004f3c:	02003fc4 	movi	r8,255
40004f40:	12000005 	stb	r8,0(r2)
40004f44:	20800517 	ldw	r2,20(r4)
40004f48:	23400717 	ldw	r13,28(r4)
40004f4c:	a811d17a 	srai	r8,r21,5
40004f50:	1885383a 	mul	r2,r3,r2
40004f54:	12c5883a 	add	r2,r2,r11
40004f58:	6885883a 	add	r2,r13,r2
40004f5c:	40002f16 	blt	r8,zero,4000501c <Intra_Chroma_Plane+0x7a0>
40004f60:	7a00010e 	bge	r15,r8,40004f68 <Intra_Chroma_Plane+0x6ec>
40004f64:	02003fc4 	movi	r8,255
40004f68:	12000005 	stb	r8,0(r2)
40004f6c:	20800517 	ldw	r2,20(r4)
40004f70:	23400717 	ldw	r13,28(r4)
40004f74:	b011d17a 	srai	r8,r22,5
40004f78:	1885383a 	mul	r2,r3,r2
40004f7c:	1245883a 	add	r2,r2,r9
40004f80:	6885883a 	add	r2,r13,r2
40004f84:	40002316 	blt	r8,zero,40005014 <Intra_Chroma_Plane+0x798>
40004f88:	7a00010e 	bge	r15,r8,40004f90 <Intra_Chroma_Plane+0x714>
40004f8c:	02003fc4 	movi	r8,255
40004f90:	12000005 	stb	r8,0(r2)
40004f94:	20800517 	ldw	r2,20(r4)
40004f98:	23400717 	ldw	r13,28(r4)
40004f9c:	7011d17a 	srai	r8,r14,5
40004fa0:	1887383a 	mul	r3,r3,r2
40004fa4:	1f07883a 	add	r3,r3,fp
40004fa8:	68c7883a 	add	r3,r13,r3
40004fac:	40001716 	blt	r8,zero,4000500c <Intra_Chroma_Plane+0x790>
40004fb0:	7a00010e 	bge	r15,r8,40004fb8 <Intra_Chroma_Plane+0x73c>
40004fb4:	02003fc4 	movi	r8,255
40004fb8:	1a000005 	stb	r8,0(r3)
  // Intra_Chroma_Plane prediction for Cr channel
  for(x=0, H=0; x<4; ++x) H+=(x+1)*(b(4+x,-1)-b(2-x,-1));
  for(y=0, V=0; y<4; ++y) V+=(y+1)*(b(-1,4+y)-b(-1,2-y));
  A=16*(b(-1,7)+b(7,-1));
  B=(17*H+16)>>5; C=(17*V+16)>>5;
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
40004fbc:	39c00044 	addi	r7,r7,1
40004fc0:	9325883a 	add	r18,r18,r12
40004fc4:	731d883a 	add	r14,r14,r12
40004fc8:	b32d883a 	add	r22,r22,r12
40004fcc:	ab2b883a 	add	r21,r21,r12
40004fd0:	8b23883a 	add	r17,r17,r12
40004fd4:	8321883a 	add	r16,r16,r12
40004fd8:	a329883a 	add	r20,r20,r12
40004fdc:	9b27883a 	add	r19,r19,r12
40004fe0:	3dc01826 	beq	r7,r23,40005044 <Intra_Chroma_Plane+0x7c8>
40004fe4:	22000717 	ldw	r8,28(r4)
40004fe8:	20800517 	ldw	r2,20(r4)
40004fec:	3987883a 	add	r3,r7,r6
    b(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
40004ff0:	1885383a 	mul	r2,r3,r2
40004ff4:	901bd17a 	srai	r13,r18,5
40004ff8:	1145883a 	add	r2,r2,r5
40004ffc:	4085883a 	add	r2,r8,r2
40005000:	683fa30e 	bge	r13,zero,40004e90 <__alt_data_end+0xc0004e90>
40005004:	001b883a 	mov	r13,zero
40005008:	003fa306 	br	40004e98 <__alt_data_end+0xc0004e98>
4000500c:	0011883a 	mov	r8,zero
40005010:	003fe906 	br	40004fb8 <__alt_data_end+0xc0004fb8>
40005014:	0011883a 	mov	r8,zero
40005018:	003fdd06 	br	40004f90 <__alt_data_end+0xc0004f90>
4000501c:	0011883a 	mov	r8,zero
40005020:	003fd106 	br	40004f68 <__alt_data_end+0xc0004f68>
40005024:	0011883a 	mov	r8,zero
40005028:	003fc506 	br	40004f40 <__alt_data_end+0xc0004f40>
4000502c:	0011883a 	mov	r8,zero
40005030:	003fb806 	br	40004f14 <__alt_data_end+0xc0004f14>
40005034:	0011883a 	mov	r8,zero
40005038:	003fa106 	br	40004ec0 <__alt_data_end+0xc0004ec0>
4000503c:	0011883a 	mov	r8,zero
40005040:	003fa906 	br	40004ee8 <__alt_data_end+0xc0004ee8>
}
40005044:	dfc01417 	ldw	ra,80(sp)
40005048:	df001317 	ldw	fp,76(sp)
4000504c:	ddc01217 	ldw	r23,72(sp)
40005050:	dd801117 	ldw	r22,68(sp)
40005054:	dd401017 	ldw	r21,64(sp)
40005058:	dd000f17 	ldw	r20,60(sp)
4000505c:	dcc00e17 	ldw	r19,56(sp)
40005060:	dc800d17 	ldw	r18,52(sp)
40005064:	dc400c17 	ldw	r17,48(sp)
40005068:	dc000b17 	ldw	r16,44(sp)
4000506c:	dec01504 	addi	sp,sp,84
40005070:	f800283a 	ret

40005074 <send_chroma_intra_packet_2>:

uint32_t send_chroma_intra_packet_2(int size, frame *f, int mode, int bx, int by, int x_avail, int y_avail, int select_cb)
{
40005074:	deffde04 	addi	sp,sp,-136
    uint32_t data_5     = 0xFFFFFFFF;
    uint32_t data_6     = 0xFFFFFFFF;
    uint32_t data_7     = 0xFFFFFFFF;
    uint32_t data_8     = 0xFFFFFFFF;

    uint32_t availible_mask_x = x_avail?0xFFFF0000:0;
40005078:	d8802317 	ldw	r2,140(sp)
  for(y=0; y<8; ++y) for(x=0; x<8; ++x)
    b(x,y)=Clip((A+B*(x-3)+C*(y-3)+16)>>5);
}

uint32_t send_chroma_intra_packet_2(int size, frame *f, int mode, int bx, int by, int x_avail, int y_avail, int select_cb)
{
4000507c:	dfc02115 	stw	ra,132(sp)
40005080:	df002015 	stw	fp,128(sp)
40005084:	ddc01f15 	stw	r23,124(sp)
40005088:	dd801e15 	stw	r22,120(sp)
4000508c:	dd401d15 	stw	r21,116(sp)
40005090:	dd001c15 	stw	r20,112(sp)
40005094:	dcc01b15 	stw	r19,108(sp)
40005098:	dc801a15 	stw	r18,104(sp)
4000509c:	dc401915 	stw	r17,100(sp)
400050a0:	dc001815 	stw	r16,96(sp)
400050a4:	d9000415 	stw	r4,16(sp)
400050a8:	d9800515 	stw	r6,20(sp)
400050ac:	d8c02217 	ldw	r3,136(sp)
    uint32_t data_5     = 0xFFFFFFFF;
    uint32_t data_6     = 0xFFFFFFFF;
    uint32_t data_7     = 0xFFFFFFFF;
    uint32_t data_8     = 0xFFFFFFFF;

    uint32_t availible_mask_x = x_avail?0xFFFF0000:0;
400050b0:	10012326 	beq	r2,zero,40005540 <send_chroma_intra_packet_2+0x4cc>
400050b4:	00804034 	movhi	r2,256
400050b8:	10bfc004 	addi	r2,r2,-256
400050bc:	d8800115 	stw	r2,4(sp)
    uint32_t availible_mask_y = y_avail?0x0000FFFF:0;
400050c0:	d8802417 	ldw	r2,144(sp)
    uint32_t data_5     = 0xFFFFFFFF;
    uint32_t data_6     = 0xFFFFFFFF;
    uint32_t data_7     = 0xFFFFFFFF;
    uint32_t data_8     = 0xFFFFFFFF;

    uint32_t availible_mask_x = x_avail?0xFFFF0000:0;
400050c4:	01004034 	movhi	r4,256
400050c8:	213fffc4 	addi	r4,r4,-1
    uint32_t availible_mask_y = y_avail?0x0000FFFF:0;
400050cc:	10012026 	beq	r2,zero,40005550 <send_chroma_intra_packet_2+0x4dc>


    if (select_cb){
400050d0:	d8802517 	ldw	r2,148(sp)
    uint32_t data_6     = 0xFFFFFFFF;
    uint32_t data_7     = 0xFFFFFFFF;
    uint32_t data_8     = 0xFFFFFFFF;

    uint32_t availible_mask_x = x_avail?0xFFFF0000:0;
    uint32_t availible_mask_y = y_avail?0x0000FFFF:0;
400050d4:	02bfc034 	movhi	r10,65280
400050d8:	d9000115 	stw	r4,4(sp)
400050dc:	da800315 	stw	r10,12(sp)


    if (select_cb){
400050e0:	10011e1e 	bne	r2,zero,4000555c <send_chroma_intra_packet_2+0x4e8>
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400050e4:	2b000517 	ldw	r12,20(r5)
400050e8:	18ffffc4 	addi	r3,r3,-1
400050ec:	2ac00817 	ldw	r11,32(r5)
400050f0:	1b07383a 	mul	r3,r3,r12
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400050f4:	6305883a 	add	r2,r12,r12
400050f8:	1085883a 	add	r2,r2,r2
400050fc:	10c5883a 	add	r2,r2,r3
           ((uint32_t)r(x,y+2)) <<8  |\
40005100:	133fc83a 	sub	ra,r2,r12
           ((uint32_t)r(x,y+1)) <<16 |\
40005104:	fb0dc83a 	sub	r6,ra,r12
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
           ((uint32_t)r(x+2,y)) <<8  |\
40005108:	58c7883a 	add	r3,r11,r3
4000510c:	19cb883a 	add	r5,r3,r7
           ((uint32_t)r(x+1,y)) <<16 |\
           ((uint32_t)r(x+0,y)) <<24;
40005110:	3cffffc4 	addi	r19,r7,-1
uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
40005114:	3339c83a 	sub	fp,r6,r12

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
40005118:	598d883a 	add	r6,r11,r6
4000511c:	34cf883a 	add	r7,r6,r19
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40005120:	29800043 	ldbu	r6,1(r5)
           ((uint32_t)r(x+2,y)) <<8  |\
           ((uint32_t)r(x+1,y)) <<16 |\
           ((uint32_t)r(x+0,y)) <<24;
40005124:	1cc7883a 	add	r3,r3,r19
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40005128:	18c00003 	ldbu	r3,0(r3)
4000512c:	d9800015 	stw	r6,0(sp)
40005130:	29800003 	ldbu	r6,0(r5)
40005134:	d8c00815 	stw	r3,32(sp)
40005138:	28c00143 	ldbu	r3,5(r5)
4000513c:	d9800615 	stw	r6,24(sp)
40005140:	29800083 	ldbu	r6,2(r5)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40005144:	650001e4 	muli	r20,r12,7
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40005148:	d8c00915 	stw	r3,36(sp)
4000514c:	d9800715 	stw	r6,28(sp)
40005150:	29800103 	ldbu	r6,4(r5)
40005154:	28c00183 	ldbu	r3,6(r5)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40005158:	e52f883a 	add	r23,fp,r20
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
4000515c:	d9800a15 	stw	r6,40(sp)
40005160:	298000c3 	ldbu	r6,3(r5)
40005164:	d8c00b15 	stw	r3,44(sp)
40005168:	28c00203 	ldbu	r3,8(r5)
4000516c:	d9800c15 	stw	r6,48(sp)
40005170:	29800283 	ldbu	r6,10(r5)
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
40005174:	bb1fc83a 	sub	r15,r23,r12
           ((uint32_t)r(x,y+1)) <<16 |\
40005178:	7b09c83a 	sub	r4,r15,r12
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
4000517c:	d9800d15 	stw	r6,52(sp)
40005180:	29800383 	ldbu	r6,14(r5)
uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
40005184:	2325c83a 	sub	r18,r4,r12
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40005188:	d8c01615 	stw	r3,88(sp)
4000518c:	d9800f15 	stw	r6,60(sp)
40005190:	28c001c3 	ldbu	r3,7(r5)
40005194:	298002c3 	ldbu	r6,11(r5)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40005198:	9515883a 	add	r10,r18,r20
           ((uint32_t)r(x,y+2)) <<8  |\
4000519c:	5fff883a 	add	ra,r11,ra
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
400051a0:	5ca5883a 	add	r18,r11,r18
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
400051a4:	fcff883a 	add	ra,ra,r19
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
400051a8:	94e5883a 	add	r18,r18,r19
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400051ac:	2c400243 	ldbu	r17,9(r5)
400051b0:	2c000343 	ldbu	r16,13(r5)
400051b4:	d8c00e15 	stw	r3,56(sp)
400051b8:	d9801015 	stw	r6,64(sp)
400051bc:	28c00303 	ldbu	r3,12(r5)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400051c0:	ffc00003 	ldbu	ra,0(ra)
400051c4:	39c00003 	ldbu	r7,0(r7)
400051c8:	94800003 	ldbu	r18,0(r18)
           ((uint32_t)r(x,y+2)) <<8  |\
400051cc:	531dc83a 	sub	r14,r10,r12
           ((uint32_t)r(x,y+1)) <<16 |\
400051d0:	731bc83a 	sub	r13,r14,r12
           ((uint32_t)r(x,y+0)) <<24;
400051d4:	6b13c83a 	sub	r9,r13,r12
    else{
        data_0 = pack_cr_x(f, bx, by, -1, -1);
        data_1 = pack_cr_x(f, bx, by, 3, -1);
        data_2 = pack_cr_x(f, bx, by, 7,  -1);
        data_3 = pack_cr_x(f, bx, by, 11, -1);
        data_4 = (uint32_t) r(15, -1);
400051d8:	294003c3 	ldbu	r5,15(r5)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400051dc:	dc801415 	stw	r18,80(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400051e0:	dc800017 	ldw	r18,0(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400051e4:	4d29883a 	add	r20,r9,r20
400051e8:	5a95883a 	add	r10,r11,r10
           ((uint32_t)r(x,y+2)) <<8  |\
400051ec:	a311c83a 	sub	r8,r20,r12
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400051f0:	54d5883a 	add	r10,r10,r19
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
400051f4:	432bc83a 	sub	r21,r8,r12
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400051f8:	52800003 	ldbu	r10,0(r10)
    else{
        data_0 = pack_cr_x(f, bx, by, -1, -1);
        data_1 = pack_cr_x(f, bx, by, 3, -1);
        data_2 = pack_cr_x(f, bx, by, 7,  -1);
        data_3 = pack_cr_x(f, bx, by, 11, -1);
        data_4 = (uint32_t) r(15, -1);
400051fc:	d9400215 	stw	r5,8(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40005200:	9024923a 	slli	r18,r18,8
40005204:	d9400617 	ldw	r5,24(sp)
40005208:	d9800917 	ldw	r6,36(sp)

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
4000520c:	5d6d883a 	add	r22,r11,r21
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40005210:	5885883a 	add	r2,r11,r2
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
40005214:	5f39883a 	add	fp,r11,fp
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40005218:	5def883a 	add	r23,r11,r23
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
4000521c:	5a53883a 	add	r9,r11,r9
40005220:	ab19c83a 	sub	r12,r21,r12
40005224:	5ceb883a 	add	r21,r11,r19
40005228:	ab19883a 	add	r12,r21,r12
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
4000522c:	14c5883a 	add	r2,r2,r19
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
40005230:	e4f9883a 	add	fp,fp,r19
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40005234:	bcef883a 	add	r23,r23,r19
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
40005238:	4cd3883a 	add	r9,r9,r19
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
4000523c:	10800003 	ldbu	r2,0(r2)
40005240:	e7000003 	ldbu	fp,0(fp)
40005244:	bdc00003 	ldbu	r23,0(r23)
40005248:	4a400003 	ldbu	r9,0(r9)
4000524c:	da801515 	stw	r10,84(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40005250:	dc800015 	stw	r18,0(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40005254:	62800003 	ldbu	r10,0(r12)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40005258:	dc800a17 	ldw	r18,40(sp)
4000525c:	2818943a 	slli	r12,r5,16
40005260:	300c923a 	slli	r6,r6,8
40005264:	d9401617 	ldw	r5,88(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40005268:	5d29883a 	add	r20,r11,r20
           ((uint32_t)r(x,y+2)) <<8  |\
4000526c:	5bdf883a 	add	r15,r11,r15
           ((uint32_t)r(x,y+1)) <<16 |\
40005270:	5909883a 	add	r4,r11,r4
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
40005274:	5b9d883a 	add	r14,r11,r14
           ((uint32_t)r(x,y+1)) <<16 |\
40005278:	5b5b883a 	add	r13,r11,r13
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
4000527c:	5a11883a 	add	r8,r11,r8
           ((uint32_t)r(x,y+1)) <<16 |\
40005280:	6cdb883a 	add	r13,r13,r19
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
40005284:	44d1883a 	add	r8,r8,r19
           ((uint32_t)r(x,y+1)) <<16 |\
40005288:	b4ed883a 	add	r22,r22,r19
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
4000528c:	7cdf883a 	add	r15,r15,r19
           ((uint32_t)r(x,y+1)) <<16 |\
40005290:	24c9883a 	add	r4,r4,r19
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
40005294:	74dd883a 	add	r14,r14,r19
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40005298:	a4e7883a 	add	r19,r20,r19
4000529c:	d8801115 	stw	r2,68(sp)
400052a0:	df001215 	stw	fp,72(sp)
400052a4:	68800003 	ldbu	r2,0(r13)
400052a8:	7bc00003 	ldbu	r15,0(r15)
400052ac:	43400003 	ldbu	r13,0(r8)
400052b0:	21000003 	ldbu	r4,0(r4)
400052b4:	9a000003 	ldbu	r8,0(r19)
400052b8:	ddc01315 	stw	r23,76(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400052bc:	dcc00c17 	ldw	r19,48(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400052c0:	73800003 	ldbu	r14,0(r14)
400052c4:	da401715 	stw	r9,92(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400052c8:	d9800615 	stw	r6,24(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400052cc:	b2400003 	ldbu	r9,0(r22)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400052d0:	9016943a 	slli	r11,r18,16
400052d4:	280c943a 	slli	r6,r5,16
400052d8:	dc800817 	ldw	r18,32(sp)
400052dc:	d9400e17 	ldw	r5,56(sp)
400052e0:	982e963a 	slli	r23,r19,24
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400052e4:	dcc01217 	ldw	r19,72(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400052e8:	282c963a 	slli	r22,r5,24
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400052ec:	d9401417 	ldw	r5,80(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400052f0:	9038963a 	slli	fp,r18,24
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400052f4:	9828963a 	slli	r20,r19,24
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400052f8:	dc801017 	ldw	r18,64(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400052fc:	2826963a 	slli	r19,r5,24
40005300:	d9401717 	ldw	r5,92(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40005304:	902a963a 	slli	r21,r18,24
40005308:	8822923a 	slli	r17,r17,8
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
4000530c:	2824963a 	slli	r18,r5,24
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40005310:	d9400017 	ldw	r5,0(sp)
40005314:	8020923a 	slli	r16,r16,8
40005318:	1806943a 	slli	r3,r3,16
4000531c:	2b18b03a 	or	r12,r5,r12
40005320:	d9400617 	ldw	r5,24(sp)
40005324:	898cb03a 	or	r6,r17,r6
40005328:	80c6b03a 	or	r3,r16,r3
4000532c:	2ad6b03a 	or	r11,r5,r11
40005330:	d9400717 	ldw	r5,28(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40005334:	f83e923a 	slli	ra,ra,8
40005338:	380e943a 	slli	r7,r7,16
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
4000533c:	6158b03a 	or	r12,r12,r5
40005340:	d9400b17 	ldw	r5,44(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40005344:	781e923a 	slli	r15,r15,8
40005348:	2008943a 	slli	r4,r4,16
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
4000534c:	5956b03a 	or	r11,r11,r5
40005350:	d9400d17 	ldw	r5,52(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40005354:	f9ceb03a 	or	r7,ra,r7
40005358:	701c923a 	slli	r14,r14,8
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
4000535c:	314cb03a 	or	r6,r6,r5
40005360:	d9400f17 	ldw	r5,60(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40005364:	1004943a 	slli	r2,r2,16
40005368:	681a923a 	slli	r13,r13,8
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
4000536c:	1946b03a 	or	r3,r3,r5
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40005370:	d9401117 	ldw	r5,68(sp)
40005374:	4812943a 	slli	r9,r9,16
40005378:	7908b03a 	or	r4,r15,r4
4000537c:	394eb03a 	or	r7,r7,r5
40005380:	d9401317 	ldw	r5,76(sp)
40005384:	5014963a 	slli	r10,r10,24
40005388:	7084b03a 	or	r2,r14,r2
4000538c:	2148b03a 	or	r4,r4,r5
40005390:	d9401517 	ldw	r5,84(sp)
40005394:	6a52b03a 	or	r9,r13,r9
40005398:	4a12b03a 	or	r9,r9,r8
4000539c:	1144b03a 	or	r2,r2,r5
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400053a0:	6738b03a 	or	fp,r12,fp
400053a4:	5deeb03a 	or	r23,r11,r23
400053a8:	35acb03a 	or	r22,r6,r22
400053ac:	1d6ab03a 	or	r21,r3,r21
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400053b0:	3d28b03a 	or	r20,r7,r20
400053b4:	24e6b03a 	or	r19,r4,r19
400053b8:	14a4b03a 	or	r18,r2,r18
400053bc:	4aa0b03a 	or	r16,r9,r10
    uint8_t wr_addr   = 0x00;

    // write data 0
    uint32_t word1    = data_0<<16 | wr_addr<<8 | cmd;
    uint32_t word0    = 0xFFFF0000 | data_0>>16;
    send_flit(3, word0, word1, 1);
400053c0:	e00c943a 	slli	r6,fp,16
400053c4:	e00ad43a 	srli	r5,fp,16
400053c8:	01c00044 	movi	r7,1
400053cc:	31ccb03a 	or	r6,r6,r7
400053d0:	297ffff4 	orhi	r5,r5,65535
400053d4:	010000c4 	movi	r4,3
400053d8:	000c2000 	call	4000c200 <send_flit>

    // write data 1
    wr_addr  = 1;
    word1    = data_1<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_1>>16;
    send_flit(3, word0, word1, 1);
400053dc:	b80c943a 	slli	r6,r23,16
400053e0:	b80ad43a 	srli	r5,r23,16
400053e4:	01c00044 	movi	r7,1
400053e8:	31804054 	ori	r6,r6,257
400053ec:	297ffff4 	orhi	r5,r5,65535
400053f0:	010000c4 	movi	r4,3
400053f4:	000c2000 	call	4000c200 <send_flit>

    // write data 2
    wr_addr  = 2;
    word1    = data_2<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_2>>16;
    send_flit(3, word0, word1, 1);
400053f8:	b00c943a 	slli	r6,r22,16
400053fc:	b00ad43a 	srli	r5,r22,16
40005400:	01c00044 	movi	r7,1
40005404:	31808054 	ori	r6,r6,513
40005408:	297ffff4 	orhi	r5,r5,65535
4000540c:	010000c4 	movi	r4,3
40005410:	000c2000 	call	4000c200 <send_flit>

    // write   data 5
    wr_addr  = 5;
    word1    = data_5<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_5>>16;
    send_flit(3, word0, word1, 1);
40005414:	a00c943a 	slli	r6,r20,16
40005418:	a00ad43a 	srli	r5,r20,16
4000541c:	01c00044 	movi	r7,1
40005420:	31814054 	ori	r6,r6,1281
40005424:	297ffff4 	orhi	r5,r5,65535
40005428:	010000c4 	movi	r4,3
4000542c:	000c2000 	call	4000c200 <send_flit>

    // write   data 6
    wr_addr  = 6;
    word1    = data_6<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_6>>16;
    send_flit(3, word0, word1, 1);
40005430:	980c943a 	slli	r6,r19,16
40005434:	980ad43a 	srli	r5,r19,16
40005438:	01c00044 	movi	r7,1
4000543c:	31818054 	ori	r6,r6,1537
40005440:	297ffff4 	orhi	r5,r5,65535
40005444:	010000c4 	movi	r4,3
40005448:	000c2000 	call	4000c200 <send_flit>

    // write data 3
    wr_addr  = 3;
    word1    = data_3<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_3>>16;
    send_flit(3, word0, word1, 1);
4000544c:	a80c943a 	slli	r6,r21,16
40005450:	a80ad43a 	srli	r5,r21,16
40005454:	01c00044 	movi	r7,1
40005458:	3180c054 	ori	r6,r6,769
4000545c:	297ffff4 	orhi	r5,r5,65535
40005460:	010000c4 	movi	r4,3
40005464:	000c2000 	call	4000c200 <send_flit>

    // write   data 4
    wr_addr  = 4;
    word1    = data_4<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_4>>16;
    send_flit(3, word0, word1, 1);
40005468:	da800217 	ldw	r10,8(sp)
4000546c:	01c00044 	movi	r7,1
40005470:	017ffff4 	movhi	r5,65535
40005474:	500c943a 	slli	r6,r10,16
40005478:	010000c4 	movi	r4,3
4000547c:	31810054 	ori	r6,r6,1025
40005480:	000c2000 	call	4000c200 <send_flit>

    // write   data 7
    wr_addr  = 7;
    word1    = data_7<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_7>>16;
    send_flit(3, word0, word1, 1);
40005484:	900c943a 	slli	r6,r18,16
40005488:	900ad43a 	srli	r5,r18,16
4000548c:	01c00044 	movi	r7,1
40005490:	3181c054 	ori	r6,r6,1793
40005494:	297ffff4 	orhi	r5,r5,65535
40005498:	010000c4 	movi	r4,3
4000549c:	000c2000 	call	4000c200 <send_flit>

    // write   data 8
    wr_addr  = 8;
    word1    = data_8<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_8>>16;
    send_flit(3, word0, word1, 1);
400054a0:	800c943a 	slli	r6,r16,16
400054a4:	800ad43a 	srli	r5,r16,16
400054a8:	01c00044 	movi	r7,1
400054ac:	31820054 	ori	r6,r6,2049
400054b0:	297ffff4 	orhi	r5,r5,65535
400054b4:	010000c4 	movi	r4,3
400054b8:	000c2000 	call	4000c200 <send_flit>

    //send a intra prediction request
    cmd                      = 2;
    uint32_t  availible_mask = availible_mask_x | availible_mask_y;
    identifier     = rand()%32 + 129;
400054bc:	000f0b00 	call	4000f0b0 <rand>
400054c0:	00e00034 	movhi	r3,32768
400054c4:	18c007c4 	addi	r3,r3,31
400054c8:	10c4703a 	and	r2,r2,r3
400054cc:	1000db16 	blt	r2,zero,4000583c <send_chroma_intra_packet_2+0x7c8>

    word1 = availible_mask<<24 | mode<<16 | size<<8 | cmd;
    word0 = identifier<<24     | availible_mask>>8;

    send_flit(3, word0, word1, 1);
400054d0:	dc800417 	ldw	r18,16(sp)
400054d4:	dcc00517 	ldw	r19,20(sp)
    send_flit(3, word0, word1, 1);

    //send a intra prediction request
    cmd                      = 2;
    uint32_t  availible_mask = availible_mask_x | availible_mask_y;
    identifier     = rand()%32 + 129;
400054d8:	14002044 	addi	r16,r2,129

    word1 = availible_mask<<24 | mode<<16 | size<<8 | cmd;
    word0 = identifier<<24     | availible_mask>>8;

    send_flit(3, word0, word1, 1);
400054dc:	900c923a 	slli	r6,r18,8
400054e0:	9804943a 	slli	r2,r19,16
400054e4:	d8c00317 	ldw	r3,12(sp)
400054e8:	da800117 	ldw	r10,4(sp)
400054ec:	800a963a 	slli	r5,r16,24
400054f0:	31800094 	ori	r6,r6,2
400054f4:	308cb03a 	or	r6,r6,r2
400054f8:	01c00044 	movi	r7,1
400054fc:	30ccb03a 	or	r6,r6,r3
40005500:	2a8ab03a 	or	r5,r5,r10
40005504:	010000c4 	movi	r4,3
40005508:	000c2000 	call	4000c200 <send_flit>

    return identifier;
}
4000550c:	8005883a 	mov	r2,r16
40005510:	dfc02117 	ldw	ra,132(sp)
40005514:	df002017 	ldw	fp,128(sp)
40005518:	ddc01f17 	ldw	r23,124(sp)
4000551c:	dd801e17 	ldw	r22,120(sp)
40005520:	dd401d17 	ldw	r21,116(sp)
40005524:	dd001c17 	ldw	r20,112(sp)
40005528:	dcc01b17 	ldw	r19,108(sp)
4000552c:	dc801a17 	ldw	r18,104(sp)
40005530:	dc401917 	ldw	r17,100(sp)
40005534:	dc001817 	ldw	r16,96(sp)
40005538:	dec02204 	addi	sp,sp,136
4000553c:	f800283a 	ret
    uint32_t data_6     = 0xFFFFFFFF;
    uint32_t data_7     = 0xFFFFFFFF;
    uint32_t data_8     = 0xFFFFFFFF;

    uint32_t availible_mask_x = x_avail?0xFFFF0000:0;
    uint32_t availible_mask_y = y_avail?0x0000FFFF:0;
40005540:	d8802417 	ldw	r2,144(sp)
40005544:	d8000115 	stw	zero,4(sp)
40005548:	01003fc4 	movi	r4,255
4000554c:	103ee01e 	bne	r2,zero,400050d0 <__alt_data_end+0xc00050d0>


    if (select_cb){
40005550:	d8802517 	ldw	r2,148(sp)
40005554:	d8000315 	stw	zero,12(sp)
40005558:	103ee226 	beq	r2,zero,400050e4 <__alt_data_end+0xc00050e4>
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
4000555c:	2f000517 	ldw	fp,20(r5)
40005560:	18ffffc4 	addi	r3,r3,-1
40005564:	2a400717 	ldw	r9,28(r5)
40005568:	1f07383a 	mul	r3,r3,fp
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
4000556c:	e705883a 	add	r2,fp,fp
40005570:	1085883a 	add	r2,r2,r2
40005574:	10c5883a 	add	r2,r2,r3
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
           ((uint32_t)b(x+2,y)) <<8  |\
40005578:	48c7883a 	add	r3,r9,r3
           ((uint32_t)b(x+1,y)) <<16 |\
           ((uint32_t)b(x+0,y)) <<24;
4000557c:	3dffffc4 	addi	r23,r7,-1
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
           ((uint32_t)b(x+2,y)) <<8  |\
40005580:	19cf883a 	add	r7,r3,r7
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40005584:	39800043 	ldbu	r6,1(r7)
           ((uint32_t)b(x+2,y)) <<8  |\
           ((uint32_t)b(x+1,y)) <<16 |\
           ((uint32_t)b(x+0,y)) <<24;
40005588:	1dc7883a 	add	r3,r3,r23
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
4000558c:	18c00003 	ldbu	r3,0(r3)
40005590:	d9800015 	stw	r6,0(sp)
40005594:	39800003 	ldbu	r6,0(r7)
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40005598:	e28001e4 	muli	r10,fp,7
           ((uint32_t)b(x,y+2)) <<8  |\
4000559c:	1723c83a 	sub	r17,r2,fp
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400055a0:	d9800615 	stw	r6,24(sp)
400055a4:	39800083 	ldbu	r6,2(r7)
400055a8:	d8c00815 	stw	r3,32(sp)
400055ac:	38c00143 	ldbu	r3,5(r7)
400055b0:	d9800715 	stw	r6,28(sp)
400055b4:	39800103 	ldbu	r6,4(r7)

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
400055b8:	8f19c83a 	sub	r12,r17,fp
           ((uint32_t)b(x,y+0)) <<24;
400055bc:	672bc83a 	sub	r21,r12,fp
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400055c0:	d9800a15 	stw	r6,40(sp)
400055c4:	398000c3 	ldbu	r6,3(r7)
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400055c8:	aaa5883a 	add	r18,r21,r10
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400055cc:	d8c00915 	stw	r3,36(sp)
400055d0:	d9800c15 	stw	r6,48(sp)
400055d4:	38c00183 	ldbu	r3,6(r7)
400055d8:	39800283 	ldbu	r6,10(r7)
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
400055dc:	9721c83a 	sub	r16,r18,fp
           ((uint32_t)b(x,y+1)) <<16 |\
400055e0:	8709c83a 	sub	r4,r16,fp
           ((uint32_t)b(x,y+0)) <<24;
400055e4:	271fc83a 	sub	r15,r4,fp
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400055e8:	d8c00b15 	stw	r3,44(sp)
400055ec:	d9800d15 	stw	r6,52(sp)
400055f0:	38c00203 	ldbu	r3,8(r7)
400055f4:	39800383 	ldbu	r6,14(r7)
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400055f8:	7a97883a 	add	r11,r15,r10
           ((uint32_t)b(x,y+2)) <<8  |\
400055fc:	5f1dc83a 	sub	r14,r11,fp
           ((uint32_t)b(x,y+1)) <<16 |\
40005600:	771bc83a 	sub	r13,r14,fp
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40005604:	d8c01615 	stw	r3,88(sp)
40005608:	d9800f15 	stw	r6,60(sp)
4000560c:	38c001c3 	ldbu	r3,7(r7)
40005610:	398002c3 	ldbu	r6,11(r7)
uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
           ((uint32_t)b(x,y+0)) <<24;
40005614:	6f11c83a 	sub	r8,r13,fp
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
40005618:	4c63883a 	add	r17,r9,r17
           ((uint32_t)b(x,y+1)) <<16 |\
4000561c:	4b19883a 	add	r12,r9,r12
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40005620:	4ca5883a 	add	r18,r9,r18
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
           ((uint32_t)b(x,y+0)) <<24;
40005624:	4bdf883a 	add	r15,r9,r15
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40005628:	4295883a 	add	r10,r8,r10
           ((uint32_t)b(x,y+2)) <<8  |\
4000562c:	8de3883a 	add	r17,r17,r23
           ((uint32_t)b(x,y+1)) <<16 |\
40005630:	65d9883a 	add	r12,r12,r23
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40005634:	95e5883a 	add	r18,r18,r23
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
           ((uint32_t)b(x,y+0)) <<24;
40005638:	7ddf883a 	add	r15,r15,r23
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
4000563c:	570bc83a 	sub	r5,r10,fp
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40005640:	3d800243 	ldbu	r22,9(r7)
40005644:	3fc00343 	ldbu	ra,13(r7)
40005648:	d8c00e15 	stw	r3,56(sp)
4000564c:	d9801015 	stw	r6,64(sp)
40005650:	38c00303 	ldbu	r3,12(r7)
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40005654:	8c400003 	ldbu	r17,0(r17)
40005658:	63000003 	ldbu	r12,0(r12)
4000565c:	94800003 	ldbu	r18,0(r18)
40005660:	7bc00003 	ldbu	r15,0(r15)
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
40005664:	2f27c83a 	sub	r19,r5,fp
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
40005668:	4b9d883a 	add	r14,r9,r14
4000566c:	494b883a 	add	r5,r9,r5
40005670:	75dd883a 	add	r14,r14,r23
40005674:	2dcb883a 	add	r5,r5,r23
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40005678:	dc801315 	stw	r18,76(sp)
4000567c:	dbc01415 	stw	r15,80(sp)
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40005680:	dc800017 	ldw	r18,0(sp)
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40005684:	73c00003 	ldbu	r15,0(r14)
40005688:	2b800003 	ldbu	r14,0(r5)
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
4000568c:	d9400917 	ldw	r5,36(sp)
40005690:	9024923a 	slli	r18,r18,8
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40005694:	4885883a 	add	r2,r9,r2
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40005698:	280a923a 	slli	r5,r5,8
uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
           ((uint32_t)b(x,y+0)) <<24;
4000569c:	4d6b883a 	add	r21,r9,r21
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400056a0:	4ad7883a 	add	r11,r9,r11
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
           ((uint32_t)b(x,y+0)) <<24;
400056a4:	4a11883a 	add	r8,r9,r8

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
400056a8:	4ce9883a 	add	r20,r9,r19
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400056ac:	15c5883a 	add	r2,r2,r23
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
           ((uint32_t)b(x,y+0)) <<24;
400056b0:	adeb883a 	add	r21,r21,r23
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400056b4:	5dd7883a 	add	r11,r11,r23
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
           ((uint32_t)b(x,y+0)) <<24;
400056b8:	45d1883a 	add	r8,r8,r23
400056bc:	9f39c83a 	sub	fp,r19,fp
400056c0:	4de7883a 	add	r19,r9,r23
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400056c4:	10800003 	ldbu	r2,0(r2)
400056c8:	ad400003 	ldbu	r21,0(r21)
400056cc:	5ac00003 	ldbu	r11,0(r11)
400056d0:	42000003 	ldbu	r8,0(r8)
    if (select_cb){
        data_0 = pack_cb_x(f, bx, by, -1, -1);
        data_1 = pack_cb_x(f, bx, by, 3, -1);
        data_2 = pack_cb_x(f, bx, by, 7,  -1);
        data_3 = pack_cb_x(f, bx, by, 11, -1);
        data_4 = (uint32_t) b(15, -1);
400056d4:	39c003c3 	ldbu	r7,15(r7)
uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
           ((uint32_t)b(x,y+1)) <<16 |\
           ((uint32_t)b(x,y+0)) <<24;
400056d8:	9f39883a 	add	fp,r19,fp
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400056dc:	d9800a17 	ldw	r6,40(sp)
400056e0:	dcc00617 	ldw	r19,24(sp)
400056e4:	dc800015 	stw	r18,0(sp)
400056e8:	d9400615 	stw	r5,24(sp)
400056ec:	dc801617 	ldw	r18,88(sp)
400056f0:	d9400c17 	ldw	r5,48(sp)
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400056f4:	4a95883a 	add	r10,r9,r10
           ((uint32_t)b(x,y+2)) <<8  |\
400056f8:	4c21883a 	add	r16,r9,r16
           ((uint32_t)b(x,y+1)) <<16 |\
400056fc:	4909883a 	add	r4,r9,r4
40005700:	4b5b883a 	add	r13,r9,r13
40005704:	6ddb883a 	add	r13,r13,r23
40005708:	a5e9883a 	add	r20,r20,r23
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
           ((uint32_t)b(x,y+2)) <<8  |\
4000570c:	85e1883a 	add	r16,r16,r23
           ((uint32_t)b(x,y+1)) <<16 |\
40005710:	25c9883a 	add	r4,r4,r23
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40005714:	55ef883a 	add	r23,r10,r23
40005718:	d8801115 	stw	r2,68(sp)
4000571c:	dd401215 	stw	r21,72(sp)
40005720:	68800003 	ldbu	r2,0(r13)
40005724:	84000003 	ldbu	r16,0(r16)
40005728:	bb400003 	ldbu	r13,0(r23)
4000572c:	21000003 	ldbu	r4,0(r4)
40005730:	dac01515 	stw	r11,84(sp)
40005734:	da001715 	stw	r8,92(sp)
40005738:	a2c00003 	ldbu	r11,0(r20)
4000573c:	e2000003 	ldbu	r8,0(fp)
    if (select_cb){
        data_0 = pack_cb_x(f, bx, by, -1, -1);
        data_1 = pack_cb_x(f, bx, by, 3, -1);
        data_2 = pack_cb_x(f, bx, by, 7,  -1);
        data_3 = pack_cb_x(f, bx, by, 11, -1);
        data_4 = (uint32_t) b(15, -1);
40005740:	d9c00215 	stw	r7,8(sp)
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40005744:	9812943a 	slli	r9,r19,16
40005748:	300e943a 	slli	r7,r6,16
4000574c:	dcc00817 	ldw	r19,32(sp)
40005750:	900c943a 	slli	r6,r18,16
40005754:	282e963a 	slli	r23,r5,24
40005758:	dc800e17 	ldw	r18,56(sp)
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
4000575c:	d9401217 	ldw	r5,72(sp)
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40005760:	9838963a 	slli	fp,r19,24
40005764:	9014963a 	slli	r10,r18,24
40005768:	dcc01017 	ldw	r19,64(sp)
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
4000576c:	2828963a 	slli	r20,r5,24
40005770:	dc801417 	ldw	r18,80(sp)
40005774:	d9401717 	ldw	r5,92(sp)
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40005778:	982a963a 	slli	r21,r19,24
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
4000577c:	9026963a 	slli	r19,r18,24
40005780:	2824963a 	slli	r18,r5,24
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40005784:	d9400017 	ldw	r5,0(sp)
40005788:	b02c923a 	slli	r22,r22,8
4000578c:	f83e923a 	slli	ra,ra,8
40005790:	2a52b03a 	or	r9,r5,r9
40005794:	d9400617 	ldw	r5,24(sp)
40005798:	b18cb03a 	or	r6,r22,r6
4000579c:	1806943a 	slli	r3,r3,16
400057a0:	29ceb03a 	or	r7,r5,r7
400057a4:	d9400717 	ldw	r5,28(sp)
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400057a8:	8822923a 	slli	r17,r17,8
400057ac:	6018943a 	slli	r12,r12,16
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400057b0:	4952b03a 	or	r9,r9,r5
400057b4:	d9400b17 	ldw	r5,44(sp)
400057b8:	f8c6b03a 	or	r3,ra,r3
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400057bc:	8020923a 	slli	r16,r16,8
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400057c0:	394eb03a 	or	r7,r7,r5
400057c4:	d9400d17 	ldw	r5,52(sp)
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400057c8:	2008943a 	slli	r4,r4,16
400057cc:	8b22b03a 	or	r17,r17,r12
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400057d0:	314cb03a 	or	r6,r6,r5
400057d4:	d9400f17 	ldw	r5,60(sp)
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400057d8:	8108b03a 	or	r4,r16,r4
400057dc:	781e923a 	slli	r15,r15,8
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
400057e0:	1946b03a 	or	r3,r3,r5
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
400057e4:	d9401117 	ldw	r5,68(sp)
400057e8:	1004943a 	slli	r2,r2,16
400057ec:	701c923a 	slli	r14,r14,8
400057f0:	8962b03a 	or	r17,r17,r5
400057f4:	d9401317 	ldw	r5,76(sp)
400057f8:	5816943a 	slli	r11,r11,16
400057fc:	4010963a 	slli	r8,r8,24
40005800:	2148b03a 	or	r4,r4,r5
40005804:	d9401517 	ldw	r5,84(sp)
40005808:	7884b03a 	or	r2,r15,r2
4000580c:	72d6b03a 	or	r11,r14,r11
40005810:	1144b03a 	or	r2,r2,r5
40005814:	5b56b03a 	or	r11,r11,r13
           ((uint32_t)r(x,y+0)) <<24;
}

uint32_t pack_cb_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x+3,y))      |\
40005818:	4f38b03a 	or	fp,r9,fp
4000581c:	3deeb03a 	or	r23,r7,r23
40005820:	32acb03a 	or	r22,r6,r10
40005824:	1d6ab03a 	or	r21,r3,r21
           ((uint32_t)b(x+0,y)) <<24;
}

uint32_t pack_cb_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)b(x,y+3))      |\
40005828:	8d28b03a 	or	r20,r17,r20
4000582c:	24e6b03a 	or	r19,r4,r19
40005830:	14a4b03a 	or	r18,r2,r18
40005834:	5a20b03a 	or	r16,r11,r8
40005838:	003ee106 	br	400053c0 <__alt_data_end+0xc00053c0>
    send_flit(3, word0, word1, 1);

    //send a intra prediction request
    cmd                      = 2;
    uint32_t  availible_mask = availible_mask_x | availible_mask_y;
    identifier     = rand()%32 + 129;
4000583c:	10bfffc4 	addi	r2,r2,-1
40005840:	00fff804 	movi	r3,-32
40005844:	10c4b03a 	or	r2,r2,r3
40005848:	10800044 	addi	r2,r2,1
4000584c:	003f2006 	br	400054d0 <__alt_data_end+0xc00054d0>

40005850 <rx_intra_packet>:

    return identifier;
}


void rx_intra_packet(uint32_t identifier, frame *f, int bx, int by, int type){
40005850:	defff304 	addi	sp,sp,-52
40005854:	dc400415 	stw	r17,16(sp)
40005858:	dc400d17 	ldw	r17,52(sp)
4000585c:	dcc00615 	stw	r19,24(sp)
40005860:	dc000315 	stw	r16,12(sp)
40005864:	dfc00c15 	stw	ra,48(sp)
40005868:	df000b15 	stw	fp,44(sp)
4000586c:	ddc00a15 	stw	r23,40(sp)
40005870:	dd800915 	stw	r22,36(sp)
40005874:	dd400815 	stw	r21,32(sp)
40005878:	dd000715 	stw	r20,28(sp)
4000587c:	dc800515 	stw	r18,20(sp)
40005880:	d9000015 	stw	r4,0(sp)
40005884:	2821883a 	mov	r16,r5
40005888:	3027883a 	mov	r19,r6
4000588c:	d9c00115 	stw	r7,4(sp)

	//start = read_timer();
	packet *intra_packet = (void *)0;
	while(intra_packet == (void *)0){
		intra_packet = get_packet_pointer_by_id(identifier);
40005890:	000c5340 	call	4000c534 <get_packet_pointer_by_id>
		if(intra_packet == (void *)0){
40005894:	1000e626 	beq	r2,zero,40005c30 <rx_intra_packet+0x3e0>
			buffers_loop(1);
		}
	}
	//add_time(HW_INTRA_COUNTS, read_timer() - start);

    uint32_t block_size  = (uint32_t)(intra_packet->data.flit[0]>>32);
40005898:	14800117 	ldw	r18,4(r2)
4000589c:	1029883a 	mov	r20,r2

    if(block_size == 0){
400058a0:	9000e726 	beq	r18,zero,40005c40 <rx_intra_packet+0x3f0>
        block_size = 4;
    }

    uint64_t *data_flits = &intra_packet->data.flit[1];
    uint32_t data_len    = intra_packet->num_flits - 1;
    uint32_t row_len     = data_len/block_size;
400058a4:	a1004217 	ldw	r4,264(r20)
400058a8:	900b883a 	mov	r5,r18
    if(block_size == 0){
        printf("block size was 0 setting to 4\n");
        block_size = 4;
    }

    uint64_t *data_flits = &intra_packet->data.flit[1];
400058ac:	a5000204 	addi	r20,r20,8
    uint32_t data_len    = intra_packet->num_flits - 1;
    uint32_t row_len     = data_len/block_size;
400058b0:	213fffc4 	addi	r4,r4,-1
400058b4:	000c9440 	call	4000c944 <__udivsi3>
    if(block_size == 0){
        printf("block size was 0 setting to 4\n");
        block_size = 4;
    }

    uint64_t *data_flits = &intra_packet->data.flit[1];
400058b8:	dd000215 	stw	r20,8(sp)
400058bc:	d8c00117 	ldw	r3,4(sp)
400058c0:	101a90fa 	slli	r13,r2,3
400058c4:	9811883a 	mov	r8,r19
400058c8:	9fc00104 	addi	ra,r19,4
400058cc:	9d400144 	addi	r21,r19,5
400058d0:	9d000184 	addi	r20,r19,6
400058d4:	42c00044 	addi	r11,r8,1
400058d8:	9cc001c4 	addi	r19,r19,7
400058dc:	42800084 	addi	r10,r8,2
400058e0:	424000c4 	addi	r9,r8,3

    uint32_t block_size  = (uint32_t)(intra_packet->data.flit[0]>>32);

    if(block_size == 0){
        printf("block size was 0 setting to 4\n");
        block_size = 4;
400058e4:	002f883a 	mov	r23,zero
400058e8:	90dd883a 	add	r14,r18,r3
                    p(x+5,y) = (uint8_t)((the_data & 0x0000000000FF0000ULL)>>16);
                    p(x+6,y) = (uint8_t)((the_data & 0x000000000000FF00ULL)>>8);
                    p(x+7,y) = (uint8_t)((the_data & 0x00000000000000FFULL));
                }
            }
            if(type == TYPE_CR)
400058ec:	05800084 	movi	r22,2
            {
                b(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
                b(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
                b(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
                b(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
                if(block_size > 4){
400058f0:	03000104 	movi	r12,4
400058f4:	b80dd0fa 	srai	r6,r23,3
400058f8:	d9400217 	ldw	r5,8(sp)
400058fc:	d8800117 	ldw	r2,4(sp)
40005900:	300c90fa 	slli	r6,r6,3
40005904:	298d883a 	add	r6,r5,r6
40005908:	00003a06 	br	400059f4 <rx_intra_packet+0x1a4>
            int flit_index = x/samples_per_flit + y * row_len;
            uint64_t the_data = data_flits[flit_index];

            if(type == TYPE_LUMA)
            {
                p(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
4000590c:	81c00217 	ldw	r7,8(r16)
40005910:	81400617 	ldw	r5,24(r16)
40005914:	181ed63a 	srli	r15,r3,24
40005918:	11cf383a 	mul	r7,r2,r7
4000591c:	2a0b883a 	add	r5,r5,r8
                p(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
40005920:	1838d43a 	srli	fp,r3,16
            int flit_index = x/samples_per_flit + y * row_len;
            uint64_t the_data = data_flits[flit_index];

            if(type == TYPE_LUMA)
            {
                p(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
40005924:	29cb883a 	add	r5,r5,r7
40005928:	2bc00005 	stb	r15,0(r5)
                p(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
4000592c:	81c00217 	ldw	r7,8(r16)
40005930:	81400617 	ldw	r5,24(r16)
                p(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
40005934:	181ed23a 	srli	r15,r3,8
            uint64_t the_data = data_flits[flit_index];

            if(type == TYPE_LUMA)
            {
                p(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
                p(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
40005938:	11cf383a 	mul	r7,r2,r7
4000593c:	2acb883a 	add	r5,r5,r11
40005940:	29cb883a 	add	r5,r5,r7
40005944:	2f000005 	stb	fp,0(r5)
                p(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
40005948:	81c00217 	ldw	r7,8(r16)
4000594c:	81400617 	ldw	r5,24(r16)
40005950:	11cf383a 	mul	r7,r2,r7
40005954:	2a8b883a 	add	r5,r5,r10
40005958:	29cb883a 	add	r5,r5,r7
4000595c:	2bc00005 	stb	r15,0(r5)
                p(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
40005960:	81c00217 	ldw	r7,8(r16)
40005964:	81400617 	ldw	r5,24(r16)
40005968:	11cf383a 	mul	r7,r2,r7
4000596c:	2a4b883a 	add	r5,r5,r9
40005970:	29cb883a 	add	r5,r5,r7
40005974:	28c00005 	stb	r3,0(r5)
                if(block_size > 4){
40005978:	64801b2e 	bgeu	r12,r18,400059e8 <rx_intra_packet+0x198>
                    p(x+4,y) = (uint8_t)((the_data & 0x00000000FF000000ULL)>>24);
4000597c:	80c00217 	ldw	r3,8(r16)
40005980:	83c00617 	ldw	r15,24(r16)
40005984:	200ed63a 	srli	r7,r4,24
40005988:	10cb383a 	mul	r5,r2,r3
4000598c:	7fc7883a 	add	r3,r15,ra
                    p(x+5,y) = (uint8_t)((the_data & 0x0000000000FF0000ULL)>>16);
40005990:	201ed43a 	srli	r15,r4,16
                p(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
                p(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
                p(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
                p(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
                if(block_size > 4){
                    p(x+4,y) = (uint8_t)((the_data & 0x00000000FF000000ULL)>>24);
40005994:	1947883a 	add	r3,r3,r5
40005998:	19c00005 	stb	r7,0(r3)
                    p(x+5,y) = (uint8_t)((the_data & 0x0000000000FF0000ULL)>>16);
4000599c:	80c00217 	ldw	r3,8(r16)
400059a0:	87000617 	ldw	fp,24(r16)
                    p(x+6,y) = (uint8_t)((the_data & 0x000000000000FF00ULL)>>8);
400059a4:	200ed23a 	srli	r7,r4,8
                p(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
                p(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
                p(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
                if(block_size > 4){
                    p(x+4,y) = (uint8_t)((the_data & 0x00000000FF000000ULL)>>24);
                    p(x+5,y) = (uint8_t)((the_data & 0x0000000000FF0000ULL)>>16);
400059a8:	10cb383a 	mul	r5,r2,r3
400059ac:	e547883a 	add	r3,fp,r21
400059b0:	1947883a 	add	r3,r3,r5
400059b4:	1bc00005 	stb	r15,0(r3)
                    p(x+6,y) = (uint8_t)((the_data & 0x000000000000FF00ULL)>>8);
400059b8:	80c00217 	ldw	r3,8(r16)
400059bc:	83c00617 	ldw	r15,24(r16)
400059c0:	10cb383a 	mul	r5,r2,r3
400059c4:	7d07883a 	add	r3,r15,r20
400059c8:	1947883a 	add	r3,r3,r5
400059cc:	19c00005 	stb	r7,0(r3)
                    p(x+7,y) = (uint8_t)((the_data & 0x00000000000000FFULL));
400059d0:	80c00217 	ldw	r3,8(r16)
400059d4:	81c00617 	ldw	r7,24(r16)
400059d8:	10cb383a 	mul	r5,r2,r3
400059dc:	3cc7883a 	add	r3,r7,r19
400059e0:	1947883a 	add	r3,r3,r5
400059e4:	19000005 	stb	r4,0(r3)
400059e8:	10800044 	addi	r2,r2,1
400059ec:	334d883a 	add	r6,r6,r13
    uint32_t row_len     = data_len/block_size;

    int x, y;
    const int samples_per_flit = 8;
    for(x = 0; x < block_size; x += 8){
        for( y = 0; y < block_size; y++){
400059f0:	70803e26 	beq	r14,r2,40005aec <rx_intra_packet+0x29c>
            int flit_index = x/samples_per_flit + y * row_len;
            uint64_t the_data = data_flits[flit_index];
400059f4:	31000017 	ldw	r4,0(r6)
400059f8:	30c00117 	ldw	r3,4(r6)

            if(type == TYPE_LUMA)
400059fc:	883fc326 	beq	r17,zero,4000590c <__alt_data_end+0xc000590c>
                    p(x+5,y) = (uint8_t)((the_data & 0x0000000000FF0000ULL)>>16);
                    p(x+6,y) = (uint8_t)((the_data & 0x000000000000FF00ULL)>>8);
                    p(x+7,y) = (uint8_t)((the_data & 0x00000000000000FFULL));
                }
            }
            if(type == TYPE_CR)
40005a00:	8d80511e 	bne	r17,r22,40005b48 <rx_intra_packet+0x2f8>
            {
                r(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
40005a04:	81c00517 	ldw	r7,20(r16)
40005a08:	81400817 	ldw	r5,32(r16)
40005a0c:	181ed63a 	srli	r15,r3,24
40005a10:	11cf383a 	mul	r7,r2,r7
40005a14:	2a0b883a 	add	r5,r5,r8
                r(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
40005a18:	1838d43a 	srli	fp,r3,16
                    p(x+7,y) = (uint8_t)((the_data & 0x00000000000000FFULL));
                }
            }
            if(type == TYPE_CR)
            {
                r(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
40005a1c:	29cb883a 	add	r5,r5,r7
40005a20:	2bc00005 	stb	r15,0(r5)
                r(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
40005a24:	81c00517 	ldw	r7,20(r16)
40005a28:	81400817 	ldw	r5,32(r16)
                r(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
40005a2c:	181ed23a 	srli	r15,r3,8
                }
            }
            if(type == TYPE_CR)
            {
                r(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
                r(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
40005a30:	11cf383a 	mul	r7,r2,r7
40005a34:	2acb883a 	add	r5,r5,r11
40005a38:	29cb883a 	add	r5,r5,r7
40005a3c:	2f000005 	stb	fp,0(r5)
                r(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
40005a40:	81400517 	ldw	r5,20(r16)
40005a44:	87000817 	ldw	fp,32(r16)
40005a48:	114f383a 	mul	r7,r2,r5
40005a4c:	e28b883a 	add	r5,fp,r10
40005a50:	29cb883a 	add	r5,r5,r7
40005a54:	2bc00005 	stb	r15,0(r5)
                r(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
40005a58:	81400517 	ldw	r5,20(r16)
40005a5c:	83c00817 	ldw	r15,32(r16)
40005a60:	114f383a 	mul	r7,r2,r5
40005a64:	7a4b883a 	add	r5,r15,r9
40005a68:	29cb883a 	add	r5,r5,r7
40005a6c:	28c00005 	stb	r3,0(r5)
                if(block_size > 4){
40005a70:	64bfdd2e 	bgeu	r12,r18,400059e8 <__alt_data_end+0xc00059e8>
                    r(x+4,y) = (uint8_t)((the_data & 0x00000000FF000000ULL)>>24);
40005a74:	80c00517 	ldw	r3,20(r16)
40005a78:	83c00817 	ldw	r15,32(r16)
40005a7c:	200ed63a 	srli	r7,r4,24
40005a80:	10cb383a 	mul	r5,r2,r3
40005a84:	7fc7883a 	add	r3,r15,ra
                    r(x+5,y) = (uint8_t)((the_data & 0x0000000000FF0000ULL)>>16);
40005a88:	201ed43a 	srli	r15,r4,16
                r(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
                r(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
                r(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
                r(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
                if(block_size > 4){
                    r(x+4,y) = (uint8_t)((the_data & 0x00000000FF000000ULL)>>24);
40005a8c:	1947883a 	add	r3,r3,r5
40005a90:	19c00005 	stb	r7,0(r3)
                    r(x+5,y) = (uint8_t)((the_data & 0x0000000000FF0000ULL)>>16);
40005a94:	80c00517 	ldw	r3,20(r16)
40005a98:	87000817 	ldw	fp,32(r16)
                    r(x+6,y) = (uint8_t)((the_data & 0x000000000000FF00ULL)>>8);
40005a9c:	200ed23a 	srli	r7,r4,8
                r(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
                r(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
                r(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
                if(block_size > 4){
                    r(x+4,y) = (uint8_t)((the_data & 0x00000000FF000000ULL)>>24);
                    r(x+5,y) = (uint8_t)((the_data & 0x0000000000FF0000ULL)>>16);
40005aa0:	10cb383a 	mul	r5,r2,r3
40005aa4:	e547883a 	add	r3,fp,r21
40005aa8:	334d883a 	add	r6,r6,r13
40005aac:	1947883a 	add	r3,r3,r5
40005ab0:	1bc00005 	stb	r15,0(r3)
                    r(x+6,y) = (uint8_t)((the_data & 0x000000000000FF00ULL)>>8);
40005ab4:	80c00517 	ldw	r3,20(r16)
40005ab8:	83c00817 	ldw	r15,32(r16)
40005abc:	10cb383a 	mul	r5,r2,r3
40005ac0:	7d07883a 	add	r3,r15,r20
40005ac4:	1947883a 	add	r3,r3,r5
40005ac8:	19c00005 	stb	r7,0(r3)
                    r(x+7,y) = (uint8_t)((the_data & 0x00000000000000FFULL));
40005acc:	80c00517 	ldw	r3,20(r16)
40005ad0:	81c00817 	ldw	r7,32(r16)
40005ad4:	10cb383a 	mul	r5,r2,r3
40005ad8:	3cc7883a 	add	r3,r7,r19
40005adc:	10800044 	addi	r2,r2,1
40005ae0:	1947883a 	add	r3,r3,r5
40005ae4:	19000005 	stb	r4,0(r3)
    uint32_t row_len     = data_len/block_size;

    int x, y;
    const int samples_per_flit = 8;
    for(x = 0; x < block_size; x += 8){
        for( y = 0; y < block_size; y++){
40005ae8:	70bfc21e 	bne	r14,r2,400059f4 <__alt_data_end+0xc00059f4>
    uint32_t data_len    = intra_packet->num_flits - 1;
    uint32_t row_len     = data_len/block_size;

    int x, y;
    const int samples_per_flit = 8;
    for(x = 0; x < block_size; x += 8){
40005aec:	bdc00204 	addi	r23,r23,8
40005af0:	ffc00204 	addi	ra,ra,8
40005af4:	42000204 	addi	r8,r8,8
40005af8:	ad400204 	addi	r21,r21,8
40005afc:	a5000204 	addi	r20,r20,8
40005b00:	9cc00204 	addi	r19,r19,8
40005b04:	5ac00204 	addi	r11,r11,8
40005b08:	52800204 	addi	r10,r10,8
40005b0c:	4a400204 	addi	r9,r9,8
40005b10:	bcbf7836 	bltu	r23,r18,400058f4 <__alt_data_end+0xc00058f4>
        }
    }



    remove_packet_with_id(identifier);
40005b14:	d9000017 	ldw	r4,0(sp)
}
40005b18:	dfc00c17 	ldw	ra,48(sp)
40005b1c:	df000b17 	ldw	fp,44(sp)
40005b20:	ddc00a17 	ldw	r23,40(sp)
40005b24:	dd800917 	ldw	r22,36(sp)
40005b28:	dd400817 	ldw	r21,32(sp)
40005b2c:	dd000717 	ldw	r20,28(sp)
40005b30:	dcc00617 	ldw	r19,24(sp)
40005b34:	dc800517 	ldw	r18,20(sp)
40005b38:	dc400417 	ldw	r17,16(sp)
40005b3c:	dc000317 	ldw	r16,12(sp)
40005b40:	dec00d04 	addi	sp,sp,52
        }
    }



    remove_packet_with_id(identifier);
40005b44:	000c5c01 	jmpi	4000c5c0 <remove_packet_with_id>
                    r(x+6,y) = (uint8_t)((the_data & 0x000000000000FF00ULL)>>8);
                    r(x+7,y) = (uint8_t)((the_data & 0x00000000000000FFULL));
                }
                //printf(".");
            }
            if(type == TYPE_CB)
40005b48:	01400044 	movi	r5,1
40005b4c:	897fa61e 	bne	r17,r5,400059e8 <__alt_data_end+0xc00059e8>
            {
                b(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
40005b50:	81c00517 	ldw	r7,20(r16)
40005b54:	81400717 	ldw	r5,28(r16)
40005b58:	181ed63a 	srli	r15,r3,24
40005b5c:	11cf383a 	mul	r7,r2,r7
40005b60:	2a0b883a 	add	r5,r5,r8
                b(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
40005b64:	1838d43a 	srli	fp,r3,16
                }
                //printf(".");
            }
            if(type == TYPE_CB)
            {
                b(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
40005b68:	29cb883a 	add	r5,r5,r7
40005b6c:	2bc00005 	stb	r15,0(r5)
                b(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
40005b70:	81c00517 	ldw	r7,20(r16)
40005b74:	81400717 	ldw	r5,28(r16)
                b(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
40005b78:	181ed23a 	srli	r15,r3,8
                //printf(".");
            }
            if(type == TYPE_CB)
            {
                b(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
                b(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
40005b7c:	11cf383a 	mul	r7,r2,r7
40005b80:	2acb883a 	add	r5,r5,r11
40005b84:	29cb883a 	add	r5,r5,r7
40005b88:	2f000005 	stb	fp,0(r5)
                b(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
40005b8c:	81400517 	ldw	r5,20(r16)
40005b90:	87000717 	ldw	fp,28(r16)
40005b94:	114f383a 	mul	r7,r2,r5
40005b98:	e28b883a 	add	r5,fp,r10
40005b9c:	29cb883a 	add	r5,r5,r7
40005ba0:	2bc00005 	stb	r15,0(r5)
                b(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
40005ba4:	81400517 	ldw	r5,20(r16)
40005ba8:	83c00717 	ldw	r15,28(r16)
40005bac:	114f383a 	mul	r7,r2,r5
40005bb0:	7a4b883a 	add	r5,r15,r9
40005bb4:	29cb883a 	add	r5,r5,r7
40005bb8:	28c00005 	stb	r3,0(r5)
                if(block_size > 4){
40005bbc:	64bf8a2e 	bgeu	r12,r18,400059e8 <__alt_data_end+0xc00059e8>
                    b(x+4,y) = (uint8_t)((the_data & 0x00000000FF000000ULL)>>24);
40005bc0:	80c00517 	ldw	r3,20(r16)
40005bc4:	83c00717 	ldw	r15,28(r16)
40005bc8:	200ed63a 	srli	r7,r4,24
40005bcc:	10cb383a 	mul	r5,r2,r3
40005bd0:	7fc7883a 	add	r3,r15,ra
                    b(x+5,y) = (uint8_t)((the_data & 0x0000000000FF0000ULL)>>16);
40005bd4:	201ed43a 	srli	r15,r4,16
                b(x,y)   = (uint8_t)((the_data & 0xFF00000000000000ULL)>>56);
                b(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
                b(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
                b(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
                if(block_size > 4){
                    b(x+4,y) = (uint8_t)((the_data & 0x00000000FF000000ULL)>>24);
40005bd8:	1947883a 	add	r3,r3,r5
40005bdc:	19c00005 	stb	r7,0(r3)
                    b(x+5,y) = (uint8_t)((the_data & 0x0000000000FF0000ULL)>>16);
40005be0:	80c00517 	ldw	r3,20(r16)
40005be4:	87000717 	ldw	fp,28(r16)
                    b(x+6,y) = (uint8_t)((the_data & 0x000000000000FF00ULL)>>8);
40005be8:	200ed23a 	srli	r7,r4,8
                b(x+1,y) = (uint8_t)((the_data & 0x00FF000000000000ULL)>>48);
                b(x+2,y) = (uint8_t)((the_data & 0x0000FF0000000000ULL)>>40);
                b(x+3,y) = (uint8_t)((the_data & 0x000000FF00000000ULL)>>32);
                if(block_size > 4){
                    b(x+4,y) = (uint8_t)((the_data & 0x00000000FF000000ULL)>>24);
                    b(x+5,y) = (uint8_t)((the_data & 0x0000000000FF0000ULL)>>16);
40005bec:	10cb383a 	mul	r5,r2,r3
40005bf0:	e547883a 	add	r3,fp,r21
40005bf4:	1947883a 	add	r3,r3,r5
40005bf8:	1bc00005 	stb	r15,0(r3)
                    b(x+6,y) = (uint8_t)((the_data & 0x000000000000FF00ULL)>>8);
40005bfc:	80c00517 	ldw	r3,20(r16)
40005c00:	83c00717 	ldw	r15,28(r16)
40005c04:	10cb383a 	mul	r5,r2,r3
40005c08:	7d07883a 	add	r3,r15,r20
40005c0c:	1947883a 	add	r3,r3,r5
40005c10:	19c00005 	stb	r7,0(r3)
                    b(x+7,y) = (uint8_t)((the_data & 0x00000000000000FFULL));
40005c14:	80c00517 	ldw	r3,20(r16)
40005c18:	81c00717 	ldw	r7,28(r16)
40005c1c:	10cb383a 	mul	r5,r2,r3
40005c20:	3cc7883a 	add	r3,r7,r19
40005c24:	1947883a 	add	r3,r3,r5
40005c28:	19000005 	stb	r4,0(r3)
40005c2c:	003f6e06 	br	400059e8 <__alt_data_end+0xc00059e8>
	//start = read_timer();
	packet *intra_packet = (void *)0;
	while(intra_packet == (void *)0){
		intra_packet = get_packet_pointer_by_id(identifier);
		if(intra_packet == (void *)0){
			buffers_loop(1);
40005c30:	01000044 	movi	r4,1
40005c34:	000c3500 	call	4000c350 <buffers_loop>
40005c38:	d9000017 	ldw	r4,0(sp)
40005c3c:	003f1406 	br	40005890 <__alt_data_end+0xc0005890>
	//add_time(HW_INTRA_COUNTS, read_timer() - start);

    uint32_t block_size  = (uint32_t)(intra_packet->data.flit[0]>>32);

    if(block_size == 0){
        printf("block size was 0 setting to 4\n");
40005c40:	011000b4 	movhi	r4,16386
        block_size = 4;
    }

    uint64_t *data_flits = &intra_packet->data.flit[1];
40005c44:	a0c00204 	addi	r3,r20,8
	//add_time(HW_INTRA_COUNTS, read_timer() - start);

    uint32_t block_size  = (uint32_t)(intra_packet->data.flit[0]>>32);

    if(block_size == 0){
        printf("block size was 0 setting to 4\n");
40005c48:	21299b04 	addi	r4,r4,-22932
        block_size = 4;
    }

    uint64_t *data_flits = &intra_packet->data.flit[1];
40005c4c:	d8c00215 	stw	r3,8(sp)
	//add_time(HW_INTRA_COUNTS, read_timer() - start);

    uint32_t block_size  = (uint32_t)(intra_packet->data.flit[0]>>32);

    if(block_size == 0){
        printf("block size was 0 setting to 4\n");
40005c50:	000f0840 	call	4000f084 <puts>
        block_size = 4;
    }

    uint64_t *data_flits = &intra_packet->data.flit[1];
    uint32_t data_len    = intra_packet->num_flits - 1;
    uint32_t row_len     = data_len/block_size;
40005c54:	a0804217 	ldw	r2,264(r20)

    uint32_t block_size  = (uint32_t)(intra_packet->data.flit[0]>>32);

    if(block_size == 0){
        printf("block size was 0 setting to 4\n");
        block_size = 4;
40005c58:	04800104 	movi	r18,4
    }

    uint64_t *data_flits = &intra_packet->data.flit[1];
    uint32_t data_len    = intra_packet->num_flits - 1;
    uint32_t row_len     = data_len/block_size;
40005c5c:	10bfffc4 	addi	r2,r2,-1
40005c60:	1004d0ba 	srli	r2,r2,2
40005c64:	003f1506 	br	400058bc <__alt_data_end+0xc00058bc>

40005c68 <Intra_16x16_Dispatch>:


    remove_packet_with_id(identifier);
}

void Intra_16x16_Dispatch(frame *f, int x_avail, int y_avail, int mode, int x, int y) {
40005c68:	deffe004 	addi	sp,sp,-128
40005c6c:	dc001615 	stw	r16,88(sp)
40005c70:	3805883a 	mov	r2,r7
40005c74:	dfc01f15 	stw	ra,124(sp)
40005c78:	df001e15 	stw	fp,120(sp)
40005c7c:	ddc01d15 	stw	r23,116(sp)
40005c80:	dd801c15 	stw	r22,112(sp)
40005c84:	dd401b15 	stw	r21,108(sp)
40005c88:	dd001a15 	stw	r20,104(sp)
40005c8c:	dcc01915 	stw	r19,100(sp)
40005c90:	dc801815 	stw	r18,96(sp)
40005c94:	dc401715 	stw	r17,92(sp)
  static int mode_2    = 0;
  static int mode_3    = 0;
  int        last_mode = 0;
  int        nocd      = 0;

        switch(mode) {
40005c98:	00c00044 	movi	r3,1


    remove_packet_with_id(identifier);
}

void Intra_16x16_Dispatch(frame *f, int x_avail, int y_avail, int mode, int x, int y) {
40005c9c:	dc002017 	ldw	r16,128(sp)
40005ca0:	d9c02117 	ldw	r7,132(sp)
  static int mode_2    = 0;
  static int mode_3    = 0;
  int        last_mode = 0;
  int        nocd      = 0;

        switch(mode) {
40005ca4:	10c38226 	beq	r2,r3,40006ab0 <Intra_16x16_Dispatch+0xe48>
40005ca8:	1882cb0e 	bge	r3,r2,400067d8 <Intra_16x16_Dispatch+0xb70>
40005cac:	00c00084 	movi	r3,2
40005cb0:	10c25f26 	beq	r2,r3,40006630 <Intra_16x16_Dispatch+0x9c8>
40005cb4:	00c000c4 	movi	r3,3
40005cb8:	10c36d1e 	bne	r2,r3,40006a70 <Intra_16x16_Dispatch+0xe08>
40005cbc:	20800217 	ldw	r2,8(r4)
40005cc0:	3dffffc4 	addi	r23,r7,-1
40005cc4:	20c00617 	ldw	r3,24(r4)
40005cc8:	b8af383a 	mul	r23,r23,r2
    memset(&p(0,i),sum,16);
}

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
40005ccc:	83400104 	addi	r13,r16,4
40005cd0:	83800284 	addi	r14,r16,10
40005cd4:	1dcb883a 	add	r5,r3,r23
40005cd8:	2b63883a 	add	r17,r5,r13
40005cdc:	8c400003 	ldbu	r17,0(r17)
40005ce0:	2ba5883a 	add	r18,r5,r14
40005ce4:	81800084 	addi	r6,r16,2
40005ce8:	94800003 	ldbu	r18,0(r18)
40005cec:	dc400215 	stw	r17,8(sp)
40005cf0:	29a3883a 	add	r17,r5,r6
40005cf4:	8c400003 	ldbu	r17,0(r17)
40005cf8:	87c00244 	addi	ra,r16,9
40005cfc:	2fe9883a 	add	r20,r5,ra
40005d00:	87000344 	addi	fp,r16,13
40005d04:	83c00144 	addi	r15,r16,5
40005d08:	82000304 	addi	r8,r16,12
40005d0c:	a5000003 	ldbu	r20,0(r20)
40005d10:	dc800115 	stw	r18,4(sp)
40005d14:	df000f15 	stw	fp,60(sp)
40005d18:	2be7883a 	add	r19,r5,r15
40005d1c:	2a25883a 	add	r18,r5,r8
40005d20:	9cc00003 	ldbu	r19,0(r19)
40005d24:	94800003 	ldbu	r18,0(r18)
40005d28:	dc400615 	stw	r17,24(sp)
40005d2c:	dc400f17 	ldw	r17,60(sp)
40005d30:	828002c4 	addi	r10,r16,11
40005d34:	87000044 	addi	fp,r16,1
40005d38:	dd000a15 	stw	r20,40(sp)
40005d3c:	82c00184 	addi	r11,r16,6
40005d40:	2aa9883a 	add	r20,r5,r10
40005d44:	824000c4 	addi	r9,r16,3
40005d48:	a5000003 	ldbu	r20,0(r20)
40005d4c:	dcc00b15 	stw	r19,44(sp)
40005d50:	2aeb883a 	add	r21,r5,r11
40005d54:	2a67883a 	add	r19,r5,r9
40005d58:	dc800415 	stw	r18,16(sp)
40005d5c:	2c65883a 	add	r18,r5,r17
40005d60:	2f23883a 	add	r17,r5,fp
40005d64:	ad400003 	ldbu	r21,0(r21)
40005d68:	9cc00003 	ldbu	r19,0(r19)
40005d6c:	8c400003 	ldbu	r17,0(r17)
40005d70:	94800003 	ldbu	r18,0(r18)
40005d74:	dd000915 	stw	r20,36(sp)
40005d78:	83000204 	addi	r12,r16,8
40005d7c:	85000384 	addi	r20,r16,14
40005d80:	2b2d883a 	add	r22,r5,r12
40005d84:	dd400015 	stw	r21,0(sp)
40005d88:	dcc00315 	stw	r19,12(sp)
40005d8c:	854003c4 	addi	r21,r16,15
40005d90:	84ffffc4 	addi	r19,r16,-1
40005d94:	dc400815 	stw	r17,32(sp)
40005d98:	2d23883a 	add	r17,r5,r20
40005d9c:	2c0b883a 	add	r5,r5,r16
40005da0:	b5800003 	ldbu	r22,0(r22)
40005da4:	df001015 	stw	fp,64(sp)
40005da8:	dd001115 	stw	r20,68(sp)
40005dac:	1cf9883a 	add	fp,r3,r19
40005db0:	dcc00515 	stw	r19,20(sp)
40005db4:	dc800715 	stw	r18,28(sp)
40005db8:	dcc00117 	ldw	r19,4(sp)
40005dbc:	1d65883a 	add	r18,r3,r21
40005dc0:	dd400e15 	stw	r21,56(sp)
40005dc4:	dd400217 	ldw	r21,8(sp)
40005dc8:	8c400003 	ldbu	r17,0(r17)
40005dcc:	29400003 	ldbu	r5,0(r5)
40005dd0:	9d69c83a 	sub	r20,r19,r21
40005dd4:	dc400115 	stw	r17,4(sp)
40005dd8:	d9400215 	stw	r5,8(sp)
40005ddc:	dc400b17 	ldw	r17,44(sp)
40005de0:	d9400a17 	ldw	r5,40(sp)
40005de4:	2c6bc83a 	sub	r21,r5,r17
40005de8:	95cb883a 	add	r5,r18,r23
40005dec:	dc800017 	ldw	r18,0(sp)
40005df0:	ad6b883a 	add	r21,r21,r21
40005df4:	29400003 	ldbu	r5,0(r5)
40005df8:	dd400c15 	stw	r21,48(sp)
40005dfc:	b4a7c83a 	sub	r19,r22,r18
40005e00:	dd400917 	ldw	r21,36(sp)
40005e04:	dd800317 	ldw	r22,12(sp)
40005e08:	e5e3883a 	add	r17,fp,r23
40005e0c:	d9400a15 	stw	r5,40(sp)
40005e10:	8c400003 	ldbu	r17,0(r17)
40005e14:	ad8bc83a 	sub	r5,r21,r22
40005e18:	dd400417 	ldw	r21,16(sp)
40005e1c:	dd800617 	ldw	r22,24(sp)
40005e20:	dc400b15 	stw	r17,44(sp)
40005e24:	a525883a 	add	r18,r20,r20
40005e28:	ada3c83a 	sub	r17,r21,r22
40005e2c:	dd400c17 	ldw	r21,48(sp)
40005e30:	9525883a 	add	r18,r18,r20
40005e34:	dd000717 	ldw	r20,28(sp)
40005e38:	ace7883a 	add	r19,r21,r19
40005e3c:	dd400817 	ldw	r21,32(sp)
40005e40:	94e5883a 	add	r18,r18,r19
40005e44:	dcc00117 	ldw	r19,4(sp)
40005e48:	a56dc83a 	sub	r22,r20,r21
40005e4c:	dd400217 	ldw	r21,8(sp)
40005e50:	8c400164 	muli	r17,r17,5
40005e54:	294b883a 	add	r5,r5,r5
40005e58:	9d69c83a 	sub	r20,r19,r21
40005e5c:	b58001a4 	muli	r22,r22,6
40005e60:	294b883a 	add	r5,r5,r5
40005e64:	2c8b883a 	add	r5,r5,r18
40005e68:	a50001e4 	muli	r20,r20,7
40005e6c:	894b883a 	add	r5,r17,r5
40005e70:	b14b883a 	add	r5,r22,r5
40005e74:	a169883a 	add	r20,r20,r5
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
40005e78:	39400244 	addi	r5,r7,9
40005e7c:	288b383a 	mul	r5,r5,r2
  a=16*(p(-1,15)+p(15,-1));
  b=(5*H+32)>>6; c=(5*V+32)>>6;
40005e80:	dc800a17 	ldw	r18,40(sp)
40005e84:	dd400b17 	ldw	r21,44(sp)
}

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
40005e88:	3c400144 	addi	r17,r7,5
40005e8c:	d9400115 	stw	r5,4(sp)
40005e90:	888b383a 	mul	r5,r17,r2
  a=16*(p(-1,15)+p(15,-1));
  b=(5*H+32)>>6; c=(5*V+32)>>6;
40005e94:	9567c83a 	sub	r19,r18,r21
}

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
40005e98:	3c800204 	addi	r18,r7,8
40005e9c:	d9400215 	stw	r5,8(sp)
40005ea0:	908b383a 	mul	r5,r18,r2
  a=16*(p(-1,15)+p(15,-1));
  b=(5*H+32)>>6; c=(5*V+32)>>6;
40005ea4:	982690fa 	slli	r19,r19,3

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
  a=16*(p(-1,15)+p(15,-1));
40005ea8:	102c913a 	slli	r22,r2,4
}

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
40005eac:	d9401315 	stw	r5,76(sp)
40005eb0:	394000c4 	addi	r5,r7,3
40005eb4:	288b383a 	mul	r5,r5,r2
  a=16*(p(-1,15)+p(15,-1));
  b=(5*H+32)>>6; c=(5*V+32)>>6;
40005eb8:	dcc01215 	stw	r19,72(sp)

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
  a=16*(p(-1,15)+p(15,-1));
40005ebc:	dd800315 	stw	r22,12(sp)
}

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
40005ec0:	d9400915 	stw	r5,36(sp)
40005ec4:	39400304 	addi	r5,r7,12
40005ec8:	288b383a 	mul	r5,r5,r2
    memset(&p(0,i),sum,16);
}

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
40005ecc:	dd000015 	stw	r20,0(sp)
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
40005ed0:	3cc00184 	addi	r19,r7,6
40005ed4:	d9400415 	stw	r5,16(sp)
40005ed8:	39400084 	addi	r5,r7,2
40005edc:	288b383a 	mul	r5,r5,r2
40005ee0:	3d8002c4 	addi	r22,r7,11
40005ee4:	98a7383a 	mul	r19,r19,r2
40005ee8:	d9400615 	stw	r5,24(sp)
40005eec:	39400344 	addi	r5,r7,13
40005ef0:	288b383a 	mul	r5,r5,r2
  a=16*(p(-1,15)+p(15,-1));
  b=(5*H+32)>>6; c=(5*V+32)>>6;
40005ef4:	dc801217 	ldw	r18,72(sp)
}

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
40005ef8:	b0ad383a 	mul	r22,r22,r2
40005efc:	d9400715 	stw	r5,28(sp)
40005f00:	39400044 	addi	r5,r7,1
40005f04:	288b383a 	mul	r5,r5,r2
40005f08:	3d000284 	addi	r20,r7,10
40005f0c:	3d400104 	addi	r21,r7,4
40005f10:	d9400815 	stw	r5,32(sp)
40005f14:	39400384 	addi	r5,r7,14
40005f18:	288b383a 	mul	r5,r5,r2
40005f1c:	e4e7883a 	add	r19,fp,r19
40005f20:	e5ad883a 	add	r22,fp,r22
40005f24:	d9400c15 	stw	r5,48(sp)
40005f28:	388b383a 	mul	r5,r7,r2
40005f2c:	a0a9383a 	mul	r20,r20,r2
40005f30:	a8ab383a 	mul	r21,r21,r2
40005f34:	d9400d15 	stw	r5,52(sp)
  a=16*(p(-1,15)+p(15,-1));
  b=(5*H+32)>>6; c=(5*V+32)>>6;
40005f38:	d9400017 	ldw	r5,0(sp)
}

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
40005f3c:	e529883a 	add	r20,fp,r20
40005f40:	e56b883a 	add	r21,fp,r21
  a=16*(p(-1,15)+p(15,-1));
  b=(5*H+32)>>6; c=(5*V+32)>>6;
40005f44:	9163883a 	add	r17,r18,r5
40005f48:	8c400164 	muli	r17,r17,5

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
  a=16*(p(-1,15)+p(15,-1));
40005f4c:	dc800317 	ldw	r18,12(sp)
  b=(5*H+32)>>6; c=(5*V+32)>>6;
40005f50:	dc401215 	stw	r17,72(sp)

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
  a=16*(p(-1,15)+p(15,-1));
40005f54:	dc400517 	ldw	r17,20(sp)
40005f58:	1c8b883a 	add	r5,r3,r18
}

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
40005f5c:	dc800117 	ldw	r18,4(sp)
  a=16*(p(-1,15)+p(15,-1));
40005f60:	2c4b883a 	add	r5,r5,r17
}

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
40005f64:	dc400217 	ldw	r17,8(sp)
40005f68:	e4a5883a 	add	r18,fp,r18
40005f6c:	dc800115 	stw	r18,4(sp)
40005f70:	e463883a 	add	r17,fp,r17
40005f74:	dc400015 	stw	r17,0(sp)
40005f78:	dc401317 	ldw	r17,76(sp)
  a=16*(p(-1,15)+p(15,-1));
40005f7c:	2dcb883a 	add	r5,r5,r23
}

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
40005f80:	3dc003c4 	addi	r23,r7,15
40005f84:	e465883a 	add	r18,fp,r17
40005f88:	dc400917 	ldw	r17,36(sp)
40005f8c:	e463883a 	add	r17,fp,r17
40005f90:	dc400315 	stw	r17,12(sp)
40005f94:	dc400417 	ldw	r17,16(sp)
40005f98:	e463883a 	add	r17,fp,r17
40005f9c:	dc400415 	stw	r17,16(sp)
40005fa0:	dc400617 	ldw	r17,24(sp)
40005fa4:	e463883a 	add	r17,fp,r17
40005fa8:	dc400615 	stw	r17,24(sp)
40005fac:	dc400717 	ldw	r17,28(sp)
40005fb0:	e463883a 	add	r17,fp,r17
40005fb4:	dc400715 	stw	r17,28(sp)
40005fb8:	dc400817 	ldw	r17,32(sp)
40005fbc:	e463883a 	add	r17,fp,r17
40005fc0:	dc400815 	stw	r17,32(sp)
40005fc4:	dc400c17 	ldw	r17,48(sp)
40005fc8:	e463883a 	add	r17,fp,r17
40005fcc:	dc400c15 	stw	r17,48(sp)
40005fd0:	dc400d17 	ldw	r17,52(sp)
40005fd4:	e463883a 	add	r17,fp,r17
40005fd8:	dc400d15 	stw	r17,52(sp)
40005fdc:	dc400117 	ldw	r17,4(sp)
40005fe0:	8c400003 	ldbu	r17,0(r17)
40005fe4:	dc400515 	stw	r17,20(sp)
40005fe8:	dc400017 	ldw	r17,0(sp)
40005fec:	8c400003 	ldbu	r17,0(r17)
40005ff0:	94800003 	ldbu	r18,0(r18)
40005ff4:	9cc00003 	ldbu	r19,0(r19)
40005ff8:	b5800003 	ldbu	r22,0(r22)
40005ffc:	dc800115 	stw	r18,4(sp)
40006000:	dcc00215 	stw	r19,8(sp)
40006004:	dc800317 	ldw	r18,12(sp)
40006008:	a4c00003 	ldbu	r19,0(r20)
4000600c:	dd800915 	stw	r22,36(sp)
40006010:	ad000003 	ldbu	r20,0(r21)
40006014:	dd800617 	ldw	r22,24(sp)
40006018:	dd400417 	ldw	r21,16(sp)
4000601c:	94800003 	ldbu	r18,0(r18)
40006020:	b5800003 	ldbu	r22,0(r22)
40006024:	ad400003 	ldbu	r21,0(r21)
40006028:	dc400015 	stw	r17,0(sp)
4000602c:	dc800315 	stw	r18,12(sp)
40006030:	dc400717 	ldw	r17,28(sp)
40006034:	dc800817 	ldw	r18,32(sp)
40006038:	dd400415 	stw	r21,16(sp)
4000603c:	dd800615 	stw	r22,24(sp)
40006040:	dd400c17 	ldw	r21,48(sp)
40006044:	dd800d17 	ldw	r22,52(sp)
40006048:	8c400003 	ldbu	r17,0(r17)
4000604c:	94800003 	ldbu	r18,0(r18)
40006050:	ad400003 	ldbu	r21,0(r21)
40006054:	b5800003 	ldbu	r22,0(r22)
40006058:	dc400715 	stw	r17,28(sp)
4000605c:	dc800815 	stw	r18,32(sp)
40006060:	dd400c15 	stw	r21,48(sp)
  a=16*(p(-1,15)+p(15,-1));
  b=(5*H+32)>>6; c=(5*V+32)>>6;
40006064:	dc801217 	ldw	r18,72(sp)
}

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
40006068:	dd800d15 	stw	r22,52(sp)
  a=16*(p(-1,15)+p(15,-1));
4000606c:	29400003 	ldbu	r5,0(r5)
40006070:	dd400a17 	ldw	r21,40(sp)
  b=(5*H+32)>>6; c=(5*V+32)>>6;
40006074:	94400804 	addi	r17,r18,32
}

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
40006078:	b8a5383a 	mul	r18,r23,r2
  a=16*(p(-1,15)+p(15,-1));
4000607c:	2d4b883a 	add	r5,r5,r21
}

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
40006080:	9d2dc83a 	sub	r22,r19,r20
  a=16*(p(-1,15)+p(15,-1));
40006084:	280a913a 	slli	r5,r5,4
}

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
40006088:	dcc00517 	ldw	r19,20(sp)
4000608c:	dd000017 	ldw	r20,0(sp)
40006090:	e4a5883a 	add	r18,fp,r18
40006094:	dc800015 	stw	r18,0(sp)
40006098:	df000117 	ldw	fp,4(sp)
4000609c:	dc800917 	ldw	r18,36(sp)
400060a0:	9d2fc83a 	sub	r23,r19,r20
  a=16*(p(-1,15)+p(15,-1));
400060a4:	d9400a15 	stw	r5,40(sp)
}

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
400060a8:	dcc00317 	ldw	r19,12(sp)
400060ac:	d9400217 	ldw	r5,8(sp)
400060b0:	bdef883a 	add	r23,r23,r23
400060b4:	b5a9883a 	add	r20,r22,r22
400060b8:	e16bc83a 	sub	r21,fp,r5
400060bc:	df000417 	ldw	fp,16(sp)
400060c0:	94cbc83a 	sub	r5,r18,r19
400060c4:	dc800617 	ldw	r18,24(sp)
400060c8:	bd6b883a 	add	r21,r23,r21
400060cc:	a5a9883a 	add	r20,r20,r22
400060d0:	e4a7c83a 	sub	r19,fp,r18
400060d4:	dc800017 	ldw	r18,0(sp)
400060d8:	ddc00817 	ldw	r23,32(sp)
400060dc:	dd800717 	ldw	r22,28(sp)
400060e0:	94800003 	ldbu	r18,0(r18)
  a=16*(p(-1,15)+p(15,-1));
  b=(5*H+32)>>6; c=(5*V+32)>>6;
400060e4:	8823d1ba 	srai	r17,r17,6
}

static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
400060e8:	a569883a 	add	r20,r20,r21
400060ec:	dc800515 	stw	r18,20(sp)
400060f0:	dd400c17 	ldw	r21,48(sp)
400060f4:	b5e5c83a 	sub	r18,r22,r23
400060f8:	ddc00d17 	ldw	r23,52(sp)
400060fc:	294b883a 	add	r5,r5,r5
40006100:	294b883a 	add	r5,r5,r5
40006104:	adedc83a 	sub	r22,r21,r23
40006108:	8f3ffe64 	muli	fp,r17,-7
4000610c:	ddc00517 	ldw	r23,20(sp)
40006110:	dd400a17 	ldw	r21,40(sp)
40006114:	2d0b883a 	add	r5,r5,r20
40006118:	dd000b17 	ldw	r20,44(sp)
4000611c:	9cc00164 	muli	r19,r19,5
40006120:	948001a4 	muli	r18,r18,6
40006124:	e579883a 	add	fp,fp,r21
40006128:	b58001e4 	muli	r22,r22,7
4000612c:	bd2bc83a 	sub	r21,r23,r20
40006130:	994b883a 	add	r5,r19,r5
40006134:	a82a90fa 	slli	r21,r21,3
40006138:	914b883a 	add	r5,r18,r5
4000613c:	b14b883a 	add	r5,r22,r5
40006140:	a94b883a 	add	r5,r21,r5
40006144:	8f2f883a 	add	r23,r17,fp
40006148:	29400164 	muli	r5,r5,5
4000614c:	8de7883a 	add	r19,r17,r23
40006150:	8ce9883a 	add	r20,r17,r19
40006154:	8d2d883a 	add	r22,r17,r20
40006158:	29400804 	addi	r5,r5,32
4000615c:	8da5883a 	add	r18,r17,r22
40006160:	dd800015 	stw	r22,0(sp)
40006164:	282dd1ba 	srai	r22,r5,6
40006168:	dcc00515 	stw	r19,20(sp)
4000616c:	dc800115 	stw	r18,4(sp)
40006170:	b17ffe64 	muli	r5,r22,-7
40006174:	8ca7883a 	add	r19,r17,r18
40006178:	8c65883a 	add	r18,r17,r17
4000617c:	b96f883a 	add	r23,r23,r5
40006180:	94e5883a 	add	r18,r18,r19
40006184:	ddc00815 	stw	r23,32(sp)
40006188:	ddc00517 	ldw	r23,20(sp)
4000618c:	dd000b15 	stw	r20,44(sp)
40006190:	8ca9883a 	add	r20,r17,r18
40006194:	8d2b883a 	add	r21,r17,r20
40006198:	b96f883a 	add	r23,r23,r5
4000619c:	dcc00215 	stw	r19,8(sp)
400061a0:	dc800915 	stw	r18,36(sp)
400061a4:	dd000315 	stw	r20,12(sp)
400061a8:	dd400415 	stw	r21,16(sp)
400061ac:	ddc00715 	stw	r23,28(sp)
400061b0:	ddc00b17 	ldw	r23,44(sp)
400061b4:	8d6b883a 	add	r21,r17,r21
400061b8:	8d69883a 	add	r20,r17,r21
400061bc:	b96f883a 	add	r23,r23,r5
400061c0:	ddc00615 	stw	r23,24(sp)
400061c4:	ddc00017 	ldw	r23,0(sp)
400061c8:	a96b883a 	add	r21,r21,r5
400061cc:	dd401315 	stw	r21,76(sp)
400061d0:	b96f883a 	add	r23,r23,r5
400061d4:	ddc00515 	stw	r23,20(sp)
400061d8:	ddc00117 	ldw	r23,4(sp)
400061dc:	dd400817 	ldw	r21,32(sp)
400061e0:	e179883a 	add	fp,fp,r5
400061e4:	b96f883a 	add	r23,r23,r5
400061e8:	ddc01215 	stw	r23,72(sp)
400061ec:	ddc00217 	ldw	r23,8(sp)
400061f0:	8d27883a 	add	r19,r17,r20
400061f4:	8ce5883a 	add	r18,r17,r19
400061f8:	b96f883a 	add	r23,r23,r5
400061fc:	ddc00215 	stw	r23,8(sp)
40006200:	ddc00a17 	ldw	r23,40(sp)
40006204:	8ca3883a 	add	r17,r17,r18
40006208:	a169883a 	add	r20,r20,r5
4000620c:	b96f883a 	add	r23,r23,r5
40006210:	ddc00015 	stw	r23,0(sp)
40006214:	ddc00917 	ldw	r23,36(sp)
40006218:	9967883a 	add	r19,r19,r5
4000621c:	9165883a 	add	r18,r18,r5
40006220:	b96f883a 	add	r23,r23,r5
40006224:	ddc00d15 	stw	r23,52(sp)
40006228:	ddc00317 	ldw	r23,12(sp)
4000622c:	dd001415 	stw	r20,80(sp)
40006230:	9cc00404 	addi	r19,r19,16
40006234:	b96f883a 	add	r23,r23,r5
40006238:	ddc00315 	stw	r23,12(sp)
4000623c:	ddc00417 	ldw	r23,16(sp)
40006240:	94800404 	addi	r18,r18,16
  a=16*(p(-1,15)+p(15,-1));
  b=(5*H+32)>>6; c=(5*V+32)>>6;
  for(y=0; y<16; ++y) for(x=0; x<16; ++x)
40006244:	0029883a 	mov	r20,zero
40006248:	b96f883a 	add	r23,r23,r5
4000624c:	ddc00115 	stw	r23,4(sp)
40006250:	e5c00404 	addi	r23,fp,16
40006254:	af000404 	addi	fp,r21,16
40006258:	dd400717 	ldw	r21,28(sp)
4000625c:	894b883a 	add	r5,r17,r5
40006260:	844001c4 	addi	r17,r16,7
40006264:	ad400404 	addi	r21,r21,16
40006268:	dd400b15 	stw	r21,44(sp)
4000626c:	dd400617 	ldw	r21,24(sp)
40006270:	dc401515 	stw	r17,84(sp)
40006274:	29400404 	addi	r5,r5,16
40006278:	ad400404 	addi	r21,r21,16
4000627c:	dd400a15 	stw	r21,40(sp)
40006280:	dd400517 	ldw	r21,20(sp)
static inline void Intra_16x16_Plane(frame *f, int bx, int by) {
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
  a=16*(p(-1,15)+p(15,-1));
  b=(5*H+32)>>6; c=(5*V+32)>>6;
40006284:	0023883a 	mov	r17,zero
40006288:	ad400404 	addi	r21,r21,16
4000628c:	dd400c15 	stw	r21,48(sp)
40006290:	dd401217 	ldw	r21,72(sp)
40006294:	ad400404 	addi	r21,r21,16
40006298:	dd400915 	stw	r21,36(sp)
4000629c:	dd400217 	ldw	r21,8(sp)
400062a0:	ad400404 	addi	r21,r21,16
400062a4:	dd400215 	stw	r21,8(sp)
400062a8:	dd400017 	ldw	r21,0(sp)
400062ac:	ad400404 	addi	r21,r21,16
400062b0:	dd400015 	stw	r21,0(sp)
400062b4:	dd400d17 	ldw	r21,52(sp)
400062b8:	dcc00d15 	stw	r19,52(sp)
400062bc:	d9400615 	stw	r5,24(sp)
400062c0:	ad400404 	addi	r21,r21,16
400062c4:	dd400515 	stw	r21,20(sp)
400062c8:	dd400317 	ldw	r21,12(sp)
  for(y=0; y<16; ++y) for(x=0; x<16; ++x)
400062cc:	1027883a 	mov	r19,r2
400062d0:	ad400404 	addi	r21,r21,16
400062d4:	dd400815 	stw	r21,32(sp)
400062d8:	dd400117 	ldw	r21,4(sp)
400062dc:	dc800115 	stw	r18,4(sp)
    p(x,y)=Clip((a+b*(x-7)+c*(y-7)+16)>>5);
400062e0:	04803fc4 	movi	r18,255
400062e4:	ad400404 	addi	r21,r21,16
400062e8:	dd400415 	stw	r21,16(sp)
400062ec:	dd401317 	ldw	r21,76(sp)
400062f0:	ad400404 	addi	r21,r21,16
400062f4:	dd400315 	stw	r21,12(sp)
400062f8:	dd401417 	ldw	r21,80(sp)
400062fc:	ad400404 	addi	r21,r21,16
40006300:	dd400715 	stw	r21,28(sp)
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
  a=16*(p(-1,15)+p(15,-1));
  b=(5*H+32)>>6; c=(5*V+32)>>6;
  for(y=0; y<16; ++y) for(x=0; x<16; ++x)
40006304:	dd401517 	ldw	r21,84(sp)
40006308:	0000c006 	br	4000660c <Intra_16x16_Dispatch+0x9a4>
    p(x,y)=Clip((a+b*(x-7)+c*(y-7)+16)>>5);
4000630c:	9080010e 	bge	r18,r2,40006314 <Intra_16x16_Dispatch+0x6ac>
40006310:	00803fc4 	movi	r2,255
40006314:	98800005 	stb	r2,0(r19)
40006318:	20c00217 	ldw	r3,8(r4)
4000631c:	dcc01017 	ldw	r19,64(sp)
40006320:	e445883a 	add	r2,fp,r17
40006324:	28c7383a 	mul	r3,r5,r3
40006328:	1005d17a 	srai	r2,r2,5
4000632c:	1cc7883a 	add	r3,r3,r19
40006330:	24c00617 	ldw	r19,24(r4)
40006334:	98c7883a 	add	r3,r19,r3
40006338:	10011316 	blt	r2,zero,40006788 <Intra_16x16_Dispatch+0xb20>
4000633c:	9080010e 	bge	r18,r2,40006344 <Intra_16x16_Dispatch+0x6dc>
40006340:	00803fc4 	movi	r2,255
40006344:	18800005 	stb	r2,0(r3)
40006348:	dcc00b17 	ldw	r19,44(sp)
4000634c:	20c00217 	ldw	r3,8(r4)
40006350:	9c45883a 	add	r2,r19,r17
40006354:	28c7383a 	mul	r3,r5,r3
40006358:	24c00617 	ldw	r19,24(r4)
4000635c:	1005d17a 	srai	r2,r2,5
40006360:	1987883a 	add	r3,r3,r6
40006364:	98c7883a 	add	r3,r19,r3
40006368:	10010916 	blt	r2,zero,40006790 <Intra_16x16_Dispatch+0xb28>
4000636c:	9080010e 	bge	r18,r2,40006374 <Intra_16x16_Dispatch+0x70c>
40006370:	00803fc4 	movi	r2,255
40006374:	18800005 	stb	r2,0(r3)
40006378:	dcc00a17 	ldw	r19,40(sp)
4000637c:	20c00217 	ldw	r3,8(r4)
40006380:	9c45883a 	add	r2,r19,r17
40006384:	28c7383a 	mul	r3,r5,r3
40006388:	24c00617 	ldw	r19,24(r4)
4000638c:	1005d17a 	srai	r2,r2,5
40006390:	1a47883a 	add	r3,r3,r9
40006394:	98c7883a 	add	r3,r19,r3
40006398:	1000f916 	blt	r2,zero,40006780 <Intra_16x16_Dispatch+0xb18>
4000639c:	9080010e 	bge	r18,r2,400063a4 <Intra_16x16_Dispatch+0x73c>
400063a0:	00803fc4 	movi	r2,255
400063a4:	18800005 	stb	r2,0(r3)
400063a8:	dcc00c17 	ldw	r19,48(sp)
400063ac:	20c00217 	ldw	r3,8(r4)
400063b0:	9c45883a 	add	r2,r19,r17
400063b4:	28c7383a 	mul	r3,r5,r3
400063b8:	24c00617 	ldw	r19,24(r4)
400063bc:	1005d17a 	srai	r2,r2,5
400063c0:	1b47883a 	add	r3,r3,r13
400063c4:	98c7883a 	add	r3,r19,r3
400063c8:	10010116 	blt	r2,zero,400067d0 <Intra_16x16_Dispatch+0xb68>
400063cc:	9080010e 	bge	r18,r2,400063d4 <Intra_16x16_Dispatch+0x76c>
400063d0:	00803fc4 	movi	r2,255
400063d4:	18800005 	stb	r2,0(r3)
400063d8:	dcc00917 	ldw	r19,36(sp)
400063dc:	20c00217 	ldw	r3,8(r4)
400063e0:	9c45883a 	add	r2,r19,r17
400063e4:	28c7383a 	mul	r3,r5,r3
400063e8:	24c00617 	ldw	r19,24(r4)
400063ec:	1005d17a 	srai	r2,r2,5
400063f0:	1bc7883a 	add	r3,r3,r15
400063f4:	98c7883a 	add	r3,r19,r3
400063f8:	1000f316 	blt	r2,zero,400067c8 <Intra_16x16_Dispatch+0xb60>
400063fc:	9080010e 	bge	r18,r2,40006404 <Intra_16x16_Dispatch+0x79c>
40006400:	00803fc4 	movi	r2,255
40006404:	18800005 	stb	r2,0(r3)
40006408:	dcc00217 	ldw	r19,8(sp)
4000640c:	20c00217 	ldw	r3,8(r4)
40006410:	9c45883a 	add	r2,r19,r17
40006414:	28c7383a 	mul	r3,r5,r3
40006418:	24c00617 	ldw	r19,24(r4)
4000641c:	1005d17a 	srai	r2,r2,5
40006420:	1ac7883a 	add	r3,r3,r11
40006424:	98c7883a 	add	r3,r19,r3
40006428:	1000e516 	blt	r2,zero,400067c0 <Intra_16x16_Dispatch+0xb58>
4000642c:	9080010e 	bge	r18,r2,40006434 <Intra_16x16_Dispatch+0x7cc>
40006430:	00803fc4 	movi	r2,255
40006434:	18800005 	stb	r2,0(r3)
40006438:	dcc00017 	ldw	r19,0(sp)
4000643c:	20c00217 	ldw	r3,8(r4)
40006440:	9c45883a 	add	r2,r19,r17
40006444:	28c7383a 	mul	r3,r5,r3
40006448:	24c00617 	ldw	r19,24(r4)
4000644c:	1005d17a 	srai	r2,r2,5
40006450:	1d47883a 	add	r3,r3,r21
40006454:	98c7883a 	add	r3,r19,r3
40006458:	1000d716 	blt	r2,zero,400067b8 <Intra_16x16_Dispatch+0xb50>
4000645c:	9080010e 	bge	r18,r2,40006464 <Intra_16x16_Dispatch+0x7fc>
40006460:	00803fc4 	movi	r2,255
40006464:	18800005 	stb	r2,0(r3)
40006468:	dcc00517 	ldw	r19,20(sp)
4000646c:	20c00217 	ldw	r3,8(r4)
40006470:	9c45883a 	add	r2,r19,r17
40006474:	28c7383a 	mul	r3,r5,r3
40006478:	24c00617 	ldw	r19,24(r4)
4000647c:	1005d17a 	srai	r2,r2,5
40006480:	1b07883a 	add	r3,r3,r12
40006484:	98c7883a 	add	r3,r19,r3
40006488:	1000c916 	blt	r2,zero,400067b0 <Intra_16x16_Dispatch+0xb48>
4000648c:	9080010e 	bge	r18,r2,40006494 <Intra_16x16_Dispatch+0x82c>
40006490:	00803fc4 	movi	r2,255
40006494:	18800005 	stb	r2,0(r3)
40006498:	dcc00817 	ldw	r19,32(sp)
4000649c:	20c00217 	ldw	r3,8(r4)
400064a0:	9c45883a 	add	r2,r19,r17
400064a4:	28c7383a 	mul	r3,r5,r3
400064a8:	24c00617 	ldw	r19,24(r4)
400064ac:	1005d17a 	srai	r2,r2,5
400064b0:	1fc7883a 	add	r3,r3,ra
400064b4:	98c7883a 	add	r3,r19,r3
400064b8:	1000bb16 	blt	r2,zero,400067a8 <Intra_16x16_Dispatch+0xb40>
400064bc:	9080010e 	bge	r18,r2,400064c4 <Intra_16x16_Dispatch+0x85c>
400064c0:	00803fc4 	movi	r2,255
400064c4:	18800005 	stb	r2,0(r3)
400064c8:	dcc00417 	ldw	r19,16(sp)
400064cc:	20c00217 	ldw	r3,8(r4)
400064d0:	9c45883a 	add	r2,r19,r17
400064d4:	28c7383a 	mul	r3,r5,r3
400064d8:	24c00617 	ldw	r19,24(r4)
400064dc:	1005d17a 	srai	r2,r2,5
400064e0:	1b87883a 	add	r3,r3,r14
400064e4:	98c7883a 	add	r3,r19,r3
400064e8:	1000ad16 	blt	r2,zero,400067a0 <Intra_16x16_Dispatch+0xb38>
400064ec:	9080010e 	bge	r18,r2,400064f4 <Intra_16x16_Dispatch+0x88c>
400064f0:	00803fc4 	movi	r2,255
400064f4:	18800005 	stb	r2,0(r3)
400064f8:	dcc00317 	ldw	r19,12(sp)
400064fc:	20c00217 	ldw	r3,8(r4)
40006500:	9c45883a 	add	r2,r19,r17
40006504:	28c7383a 	mul	r3,r5,r3
40006508:	24c00617 	ldw	r19,24(r4)
4000650c:	1005d17a 	srai	r2,r2,5
40006510:	1a87883a 	add	r3,r3,r10
40006514:	98c7883a 	add	r3,r19,r3
40006518:	10009f16 	blt	r2,zero,40006798 <Intra_16x16_Dispatch+0xb30>
4000651c:	9080010e 	bge	r18,r2,40006524 <Intra_16x16_Dispatch+0x8bc>
40006520:	00803fc4 	movi	r2,255
40006524:	18800005 	stb	r2,0(r3)
40006528:	dcc00717 	ldw	r19,28(sp)
4000652c:	20c00217 	ldw	r3,8(r4)
40006530:	9c45883a 	add	r2,r19,r17
40006534:	28c7383a 	mul	r3,r5,r3
40006538:	24c00617 	ldw	r19,24(r4)
4000653c:	1005d17a 	srai	r2,r2,5
40006540:	1a07883a 	add	r3,r3,r8
40006544:	98c7883a 	add	r3,r19,r3
40006548:	10008b16 	blt	r2,zero,40006778 <Intra_16x16_Dispatch+0xb10>
4000654c:	9080010e 	bge	r18,r2,40006554 <Intra_16x16_Dispatch+0x8ec>
40006550:	00803fc4 	movi	r2,255
40006554:	18800005 	stb	r2,0(r3)
40006558:	dcc00d17 	ldw	r19,52(sp)
4000655c:	20c00217 	ldw	r3,8(r4)
40006560:	9c45883a 	add	r2,r19,r17
40006564:	28c7383a 	mul	r3,r5,r3
40006568:	dcc00f17 	ldw	r19,60(sp)
4000656c:	1005d17a 	srai	r2,r2,5
40006570:	1cc7883a 	add	r3,r3,r19
40006574:	24c00617 	ldw	r19,24(r4)
40006578:	98c7883a 	add	r3,r19,r3
4000657c:	10007c16 	blt	r2,zero,40006770 <Intra_16x16_Dispatch+0xb08>
40006580:	9080010e 	bge	r18,r2,40006588 <Intra_16x16_Dispatch+0x920>
40006584:	00803fc4 	movi	r2,255
40006588:	18800005 	stb	r2,0(r3)
4000658c:	dcc00117 	ldw	r19,4(sp)
40006590:	20c00217 	ldw	r3,8(r4)
40006594:	9c45883a 	add	r2,r19,r17
40006598:	28c7383a 	mul	r3,r5,r3
4000659c:	dcc01117 	ldw	r19,68(sp)
400065a0:	1005d17a 	srai	r2,r2,5
400065a4:	1cc7883a 	add	r3,r3,r19
400065a8:	24c00617 	ldw	r19,24(r4)
400065ac:	98c7883a 	add	r3,r19,r3
400065b0:	10006d16 	blt	r2,zero,40006768 <Intra_16x16_Dispatch+0xb00>
400065b4:	9080010e 	bge	r18,r2,400065bc <Intra_16x16_Dispatch+0x954>
400065b8:	00803fc4 	movi	r2,255
400065bc:	18800005 	stb	r2,0(r3)
400065c0:	20c00217 	ldw	r3,8(r4)
400065c4:	dcc00617 	ldw	r19,24(sp)
400065c8:	28cb383a 	mul	r5,r5,r3
400065cc:	9c45883a 	add	r2,r19,r17
400065d0:	d8c00e17 	ldw	r3,56(sp)
400065d4:	24c00617 	ldw	r19,24(r4)
400065d8:	1005d17a 	srai	r2,r2,5
400065dc:	28cb883a 	add	r5,r5,r3
400065e0:	9947883a 	add	r3,r19,r5
400065e4:	10005e16 	blt	r2,zero,40006760 <Intra_16x16_Dispatch+0xaf8>
400065e8:	9080010e 	bge	r18,r2,400065f0 <Intra_16x16_Dispatch+0x988>
400065ec:	00803fc4 	movi	r2,255
400065f0:	18800005 	stb	r2,0(r3)
  int a,b,c,H,V,x,y;
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
  a=16*(p(-1,15)+p(15,-1));
  b=(5*H+32)>>6; c=(5*V+32)>>6;
  for(y=0; y<16; ++y) for(x=0; x<16; ++x)
400065f4:	a5000044 	addi	r20,r20,1
400065f8:	01400404 	movi	r5,16
400065fc:	8da3883a 	add	r17,r17,r22
40006600:	a1404b26 	beq	r20,r5,40006730 <Intra_16x16_Dispatch+0xac8>
40006604:	20c00617 	ldw	r3,24(r4)
40006608:	24c00217 	ldw	r19,8(r4)
4000660c:	3d0b883a 	add	r5,r7,r20
    p(x,y)=Clip((a+b*(x-7)+c*(y-7)+16)>>5);
40006610:	2ce7383a 	mul	r19,r5,r19
40006614:	bc45883a 	add	r2,r23,r17
40006618:	1005d17a 	srai	r2,r2,5
4000661c:	9c27883a 	add	r19,r19,r16
40006620:	1ce7883a 	add	r19,r3,r19
40006624:	103f390e 	bge	r2,zero,4000630c <__alt_data_end+0xc000630c>
40006628:	0005883a 	mov	r2,zero
4000662c:	003f3906 	br	40006314 <__alt_data_end+0xc0006314>
      p(x,y)=p(-1,y);
}

static inline void Intra_16x16_DC(frame *f, int x_avail, int y_avail, int bx, int by) {
  int i, sum=0, count=0;
  if(x_avail)
40006630:	2801b31e 	bne	r5,zero,40006d00 <Intra_16x16_Dispatch+0x1098>
40006634:	20c00617 	ldw	r3,24(r4)
40006638:	20800217 	ldw	r2,8(r4)
    for(i=0; i<16; ++i, ++count)
      sum+=p(-1,i);
  if(y_avail)
4000663c:	30020826 	beq	r6,zero,40006e60 <Intra_16x16_Dispatch+0x11f8>
    for(x=0; x<16; ++x)
      p(x,y)=p(-1,y);
}

static inline void Intra_16x16_DC(frame *f, int x_avail, int y_avail, int bx, int by) {
  int i, sum=0, count=0;
40006640:	0015883a 	mov	r10,zero
40006644:	000b883a 	mov	r5,zero
40006648:	3a7fffc4 	addi	r9,r7,-1
4000664c:	4893383a 	mul	r9,r9,r2
    for(i=0; i<16; ++i, ++count)
      sum+=p(-1,i);
  if(y_avail)
    for(i=0; i<16; ++i, ++count)
      sum+=p(i,-1);
  if(count==32) sum=(sum+16)>>5; else
40006650:	52c00404 	addi	r11,r10,16
  if(x_avail)
    for(i=0; i<16; ++i, ++count)
      sum+=p(-1,i);
  if(y_avail)
    for(i=0; i<16; ++i, ++count)
      sum+=p(i,-1);
40006654:	1a53883a 	add	r9,r3,r9
40006658:	4c13883a 	add	r9,r9,r16
4000665c:	49800003 	ldbu	r6,0(r9)
40006660:	4a000043 	ldbu	r8,1(r9)
40006664:	4b000083 	ldbu	r12,2(r9)
40006668:	314d883a 	add	r6,r6,r5
4000666c:	4b4000c3 	ldbu	r13,3(r9)
40006670:	418d883a 	add	r6,r8,r6
40006674:	4a000103 	ldbu	r8,4(r9)
40006678:	618b883a 	add	r5,r12,r6
4000667c:	4b000143 	ldbu	r12,5(r9)
40006680:	694b883a 	add	r5,r13,r5
40006684:	49800183 	ldbu	r6,6(r9)
40006688:	4151883a 	add	r8,r8,r5
4000668c:	4b4001c3 	ldbu	r13,7(r9)
40006690:	6211883a 	add	r8,r12,r8
40006694:	49400203 	ldbu	r5,8(r9)
40006698:	320d883a 	add	r6,r6,r8
4000669c:	4b000243 	ldbu	r12,9(r9)
400066a0:	698d883a 	add	r6,r13,r6
400066a4:	4a000283 	ldbu	r8,10(r9)
400066a8:	298b883a 	add	r5,r5,r6
400066ac:	4b4002c3 	ldbu	r13,11(r9)
400066b0:	614b883a 	add	r5,r12,r5
400066b4:	49800303 	ldbu	r6,12(r9)
400066b8:	4151883a 	add	r8,r8,r5
400066bc:	4b000343 	ldbu	r12,13(r9)
400066c0:	6a11883a 	add	r8,r13,r8
400066c4:	49400383 	ldbu	r5,14(r9)
400066c8:	320d883a 	add	r6,r6,r8
400066cc:	4a0003c3 	ldbu	r8,15(r9)
400066d0:	618d883a 	add	r6,r12,r6
400066d4:	298b883a 	add	r5,r5,r6
400066d8:	414b883a 	add	r5,r8,r5
  if(count==32) sum=(sum+16)>>5; else
400066dc:	5001de26 	beq	r10,zero,40006e58 <Intra_16x16_Dispatch+0x11f0>
400066e0:	2c800404 	addi	r18,r5,16
400066e4:	9025d17a 	srai	r18,r18,5
400066e8:	01403fc4 	movi	r5,255
400066ec:	2c80010e 	bge	r5,r18,400066f4 <Intra_16x16_Dispatch+0xa8c>
400066f0:	2825883a 	mov	r18,r5
400066f4:	2027883a 	mov	r19,r4
400066f8:	3823883a 	mov	r17,r7
400066fc:	3d000404 	addi	r20,r7,16
40006700:	1809883a 	mov	r4,r3
40006704:	00000206 	br	40006710 <Intra_16x16_Dispatch+0xaa8>
40006708:	99000617 	ldw	r4,24(r19)
4000670c:	98800217 	ldw	r2,8(r19)
  if(count==16) sum=(sum+8)>>4;  else
                sum=128;
  sum=Clip(sum);
  for(i=0; i<16; ++i)
    memset(&p(0,i),sum,16);
40006710:	8885383a 	mul	r2,r17,r2
40006714:	01800404 	movi	r6,16
40006718:	8c400044 	addi	r17,r17,1
4000671c:	1405883a 	add	r2,r2,r16
40006720:	900b883a 	mov	r5,r18
40006724:	2089883a 	add	r4,r4,r2
40006728:	000ee100 	call	4000ee10 <memset>
      sum+=p(i,-1);
  if(count==32) sum=(sum+16)>>5; else
  if(count==16) sum=(sum+8)>>4;  else
                sum=128;
  sum=Clip(sum);
  for(i=0; i<16; ++i)
4000672c:	a47ff61e 	bne	r20,r17,40006708 <__alt_data_end+0xc0006708>
            case 1: Intra_16x16_Horizontal(f,x,y); break;
            case 2: Intra_16x16_DC(f,x_avail,y_avail,x,y); break;
            case 3: Intra_16x16_Plane(f,x,y); break;
            default: printf("unsupported Intra16x16PredMode %d at %d,%d!\n",mode,x,y);
        }
}
40006730:	dfc01f17 	ldw	ra,124(sp)
40006734:	df001e17 	ldw	fp,120(sp)
40006738:	ddc01d17 	ldw	r23,116(sp)
4000673c:	dd801c17 	ldw	r22,112(sp)
40006740:	dd401b17 	ldw	r21,108(sp)
40006744:	dd001a17 	ldw	r20,104(sp)
40006748:	dcc01917 	ldw	r19,100(sp)
4000674c:	dc801817 	ldw	r18,96(sp)
40006750:	dc401717 	ldw	r17,92(sp)
40006754:	dc001617 	ldw	r16,88(sp)
40006758:	dec02004 	addi	sp,sp,128
4000675c:	f800283a 	ret
  for(x=0, H=0; x<8; ++x) H+=(x+1)*(p(8+x,-1)-p(6-x,-1));
  for(y=0, V=0; y<8; ++y) V+=(y+1)*(p(-1,8+y)-p(-1,6-y));
  a=16*(p(-1,15)+p(15,-1));
  b=(5*H+32)>>6; c=(5*V+32)>>6;
  for(y=0; y<16; ++y) for(x=0; x<16; ++x)
    p(x,y)=Clip((a+b*(x-7)+c*(y-7)+16)>>5);
40006760:	0005883a 	mov	r2,zero
40006764:	003fa206 	br	400065f0 <__alt_data_end+0xc00065f0>
40006768:	0005883a 	mov	r2,zero
4000676c:	003f9306 	br	400065bc <__alt_data_end+0xc00065bc>
40006770:	0005883a 	mov	r2,zero
40006774:	003f8406 	br	40006588 <__alt_data_end+0xc0006588>
40006778:	0005883a 	mov	r2,zero
4000677c:	003f7506 	br	40006554 <__alt_data_end+0xc0006554>
40006780:	0005883a 	mov	r2,zero
40006784:	003f0706 	br	400063a4 <__alt_data_end+0xc00063a4>
40006788:	0005883a 	mov	r2,zero
4000678c:	003eed06 	br	40006344 <__alt_data_end+0xc0006344>
40006790:	0005883a 	mov	r2,zero
40006794:	003ef706 	br	40006374 <__alt_data_end+0xc0006374>
40006798:	0005883a 	mov	r2,zero
4000679c:	003f6106 	br	40006524 <__alt_data_end+0xc0006524>
400067a0:	0005883a 	mov	r2,zero
400067a4:	003f5306 	br	400064f4 <__alt_data_end+0xc00064f4>
400067a8:	0005883a 	mov	r2,zero
400067ac:	003f4506 	br	400064c4 <__alt_data_end+0xc00064c4>
400067b0:	0005883a 	mov	r2,zero
400067b4:	003f3706 	br	40006494 <__alt_data_end+0xc0006494>
400067b8:	0005883a 	mov	r2,zero
400067bc:	003f2906 	br	40006464 <__alt_data_end+0xc0006464>
400067c0:	0005883a 	mov	r2,zero
400067c4:	003f1b06 	br	40006434 <__alt_data_end+0xc0006434>
400067c8:	0005883a 	mov	r2,zero
400067cc:	003f0d06 	br	40006404 <__alt_data_end+0xc0006404>
400067d0:	0005883a 	mov	r2,zero
400067d4:	003eff06 	br	400063d4 <__alt_data_end+0xc00063d4>
  static int mode_2    = 0;
  static int mode_3    = 0;
  int        last_mode = 0;
  int        nocd      = 0;

        switch(mode) {
400067d8:	1000a51e 	bne	r2,zero,40006a70 <Intra_16x16_Dispatch+0xe08>
400067dc:	3805883a 	mov	r2,r7
400067e0:	858003c4 	addi	r22,r16,15
400067e4:	39ffffc4 	addi	r7,r7,-1
400067e8:	85400044 	addi	r21,r16,1
400067ec:	85000084 	addi	r20,r16,2
400067f0:	84c000c4 	addi	r19,r16,3
400067f4:	84800104 	addi	r18,r16,4
400067f8:	84400144 	addi	r17,r16,5
400067fc:	83c00184 	addi	r15,r16,6
40006800:	838001c4 	addi	r14,r16,7
40006804:	83400204 	addi	r13,r16,8
40006808:	83000244 	addi	r12,r16,9
4000680c:	82c00284 	addi	r11,r16,10
40006810:	828002c4 	addi	r10,r16,11
40006814:	82400304 	addi	r9,r16,12
40006818:	82000344 	addi	r8,r16,13
4000681c:	81800384 	addi	r6,r16,14
40006820:	11400404 	addi	r5,r2,16

static inline void Intra_16x16_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<16; ++y)
    for(x=0; x<16; ++x)
      p(x,y)=p(x,-1);
40006824:	27000217 	ldw	fp,8(r4)
40006828:	20c00617 	ldw	r3,24(r4)
4000682c:	e1ef383a 	mul	r23,fp,r7
40006830:	1c3f883a 	add	ra,r3,r16
40006834:	1707383a 	mul	r3,r2,fp
40006838:	fdef883a 	add	r23,ra,r23
4000683c:	bdc00003 	ldbu	r23,0(r23)
40006840:	f8c7883a 	add	r3,ra,r3
40006844:	1dc00005 	stb	r23,0(r3)
40006848:	27000217 	ldw	fp,8(r4)
4000684c:	20c00617 	ldw	r3,24(r4)
40006850:	e1ef383a 	mul	r23,fp,r7
40006854:	1d47883a 	add	r3,r3,r21
40006858:	1739383a 	mul	fp,r2,fp
4000685c:	1def883a 	add	r23,r3,r23
40006860:	bdc00003 	ldbu	r23,0(r23)
40006864:	1f07883a 	add	r3,r3,fp
40006868:	1dc00005 	stb	r23,0(r3)
4000686c:	27000217 	ldw	fp,8(r4)
40006870:	20c00617 	ldw	r3,24(r4)
40006874:	e1ef383a 	mul	r23,fp,r7
40006878:	1d07883a 	add	r3,r3,r20
4000687c:	1739383a 	mul	fp,r2,fp
40006880:	1def883a 	add	r23,r3,r23
40006884:	bdc00003 	ldbu	r23,0(r23)
40006888:	1f07883a 	add	r3,r3,fp
4000688c:	1dc00005 	stb	r23,0(r3)
40006890:	27000217 	ldw	fp,8(r4)
40006894:	20c00617 	ldw	r3,24(r4)
40006898:	e1ef383a 	mul	r23,fp,r7
4000689c:	1cc7883a 	add	r3,r3,r19
400068a0:	1739383a 	mul	fp,r2,fp
400068a4:	1def883a 	add	r23,r3,r23
400068a8:	bdc00003 	ldbu	r23,0(r23)
400068ac:	1f07883a 	add	r3,r3,fp
400068b0:	1dc00005 	stb	r23,0(r3)
400068b4:	27000217 	ldw	fp,8(r4)
400068b8:	20c00617 	ldw	r3,24(r4)
400068bc:	e1ef383a 	mul	r23,fp,r7
400068c0:	1c87883a 	add	r3,r3,r18
400068c4:	1739383a 	mul	fp,r2,fp
400068c8:	1def883a 	add	r23,r3,r23
400068cc:	bdc00003 	ldbu	r23,0(r23)
400068d0:	1f07883a 	add	r3,r3,fp
400068d4:	1dc00005 	stb	r23,0(r3)
400068d8:	27000217 	ldw	fp,8(r4)
400068dc:	20c00617 	ldw	r3,24(r4)
400068e0:	e1ef383a 	mul	r23,fp,r7
400068e4:	1c47883a 	add	r3,r3,r17
400068e8:	1739383a 	mul	fp,r2,fp
400068ec:	1def883a 	add	r23,r3,r23
400068f0:	bdc00003 	ldbu	r23,0(r23)
400068f4:	1f07883a 	add	r3,r3,fp
400068f8:	1dc00005 	stb	r23,0(r3)
400068fc:	27000217 	ldw	fp,8(r4)
40006900:	20c00617 	ldw	r3,24(r4)
40006904:	e1ef383a 	mul	r23,fp,r7
40006908:	1bc7883a 	add	r3,r3,r15
4000690c:	1739383a 	mul	fp,r2,fp
40006910:	1def883a 	add	r23,r3,r23
40006914:	bdc00003 	ldbu	r23,0(r23)
40006918:	1f07883a 	add	r3,r3,fp
4000691c:	1dc00005 	stb	r23,0(r3)
40006920:	27000217 	ldw	fp,8(r4)
40006924:	20c00617 	ldw	r3,24(r4)
40006928:	e1ef383a 	mul	r23,fp,r7
4000692c:	1b87883a 	add	r3,r3,r14
40006930:	1739383a 	mul	fp,r2,fp
40006934:	1def883a 	add	r23,r3,r23
40006938:	bdc00003 	ldbu	r23,0(r23)
4000693c:	1f07883a 	add	r3,r3,fp
40006940:	1dc00005 	stb	r23,0(r3)
40006944:	20c00617 	ldw	r3,24(r4)
40006948:	27000217 	ldw	fp,8(r4)
4000694c:	1b7f883a 	add	ra,r3,r13
40006950:	e1ef383a 	mul	r23,fp,r7
40006954:	1707383a 	mul	r3,r2,fp
40006958:	fdef883a 	add	r23,ra,r23
4000695c:	bdc00003 	ldbu	r23,0(r23)
40006960:	f8c7883a 	add	r3,ra,r3
40006964:	1dc00005 	stb	r23,0(r3)
40006968:	27000217 	ldw	fp,8(r4)
4000696c:	20c00617 	ldw	r3,24(r4)
40006970:	e1ef383a 	mul	r23,fp,r7
40006974:	1b07883a 	add	r3,r3,r12
40006978:	1739383a 	mul	fp,r2,fp
4000697c:	1def883a 	add	r23,r3,r23
40006980:	bdc00003 	ldbu	r23,0(r23)
40006984:	1f07883a 	add	r3,r3,fp
40006988:	1dc00005 	stb	r23,0(r3)
4000698c:	27000217 	ldw	fp,8(r4)
40006990:	20c00617 	ldw	r3,24(r4)
40006994:	e1ef383a 	mul	r23,fp,r7
40006998:	1ac7883a 	add	r3,r3,r11
4000699c:	1739383a 	mul	fp,r2,fp
400069a0:	1def883a 	add	r23,r3,r23
400069a4:	bdc00003 	ldbu	r23,0(r23)
400069a8:	1f07883a 	add	r3,r3,fp
400069ac:	1dc00005 	stb	r23,0(r3)
400069b0:	27000217 	ldw	fp,8(r4)
400069b4:	20c00617 	ldw	r3,24(r4)
400069b8:	e1ef383a 	mul	r23,fp,r7
400069bc:	1a87883a 	add	r3,r3,r10
400069c0:	1739383a 	mul	fp,r2,fp
400069c4:	1def883a 	add	r23,r3,r23
400069c8:	bdc00003 	ldbu	r23,0(r23)
400069cc:	1f07883a 	add	r3,r3,fp
400069d0:	1dc00005 	stb	r23,0(r3)
400069d4:	27000217 	ldw	fp,8(r4)
400069d8:	20c00617 	ldw	r3,24(r4)
400069dc:	e1ef383a 	mul	r23,fp,r7
400069e0:	1a47883a 	add	r3,r3,r9
400069e4:	1739383a 	mul	fp,r2,fp
400069e8:	1def883a 	add	r23,r3,r23
400069ec:	bdc00003 	ldbu	r23,0(r23)
400069f0:	1f07883a 	add	r3,r3,fp
400069f4:	1dc00005 	stb	r23,0(r3)
400069f8:	27000217 	ldw	fp,8(r4)
400069fc:	20c00617 	ldw	r3,24(r4)
40006a00:	e1ef383a 	mul	r23,fp,r7
40006a04:	1a07883a 	add	r3,r3,r8
40006a08:	1739383a 	mul	fp,r2,fp
40006a0c:	1def883a 	add	r23,r3,r23
40006a10:	bdc00003 	ldbu	r23,0(r23)
40006a14:	1f07883a 	add	r3,r3,fp
40006a18:	1dc00005 	stb	r23,0(r3)
40006a1c:	27000217 	ldw	fp,8(r4)
40006a20:	20c00617 	ldw	r3,24(r4)
40006a24:	e1ef383a 	mul	r23,fp,r7
40006a28:	1987883a 	add	r3,r3,r6
40006a2c:	1739383a 	mul	fp,r2,fp
40006a30:	1def883a 	add	r23,r3,r23
40006a34:	bdc00003 	ldbu	r23,0(r23)
40006a38:	1f07883a 	add	r3,r3,fp
40006a3c:	1dc00005 	stb	r23,0(r3)
40006a40:	27000217 	ldw	fp,8(r4)
40006a44:	20c00617 	ldw	r3,24(r4)
40006a48:	e1ef383a 	mul	r23,fp,r7
40006a4c:	1d87883a 	add	r3,r3,r22
40006a50:	1739383a 	mul	fp,r2,fp
40006a54:	1def883a 	add	r23,r3,r23
40006a58:	bdc00003 	ldbu	r23,0(r23)
40006a5c:	1f07883a 	add	r3,r3,fp
40006a60:	10800044 	addi	r2,r2,1
40006a64:	1dc00005 	stb	r23,0(r3)
    }
}

static inline void Intra_16x16_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<16; ++y)
40006a68:	28bf6e1e 	bne	r5,r2,40006824 <__alt_data_end+0xc0006824>
40006a6c:	003f3006 	br	40006730 <__alt_data_end+0xc0006730>
        switch(mode) {
            case 0: Intra_16x16_Vertical(f,x,y); break;
            case 1: Intra_16x16_Horizontal(f,x,y); break;
            case 2: Intra_16x16_DC(f,x_avail,y_avail,x,y); break;
            case 3: Intra_16x16_Plane(f,x,y); break;
            default: printf("unsupported Intra16x16PredMode %d at %d,%d!\n",mode,x,y);
40006a70:	011000b4 	movhi	r4,16386
40006a74:	2129b004 	addi	r4,r4,-22848
40006a78:	800d883a 	mov	r6,r16
40006a7c:	100b883a 	mov	r5,r2
        }
}
40006a80:	dfc01f17 	ldw	ra,124(sp)
40006a84:	df001e17 	ldw	fp,120(sp)
40006a88:	ddc01d17 	ldw	r23,116(sp)
40006a8c:	dd801c17 	ldw	r22,112(sp)
40006a90:	dd401b17 	ldw	r21,108(sp)
40006a94:	dd001a17 	ldw	r20,104(sp)
40006a98:	dcc01917 	ldw	r19,100(sp)
40006a9c:	dc801817 	ldw	r18,96(sp)
40006aa0:	dc401717 	ldw	r17,92(sp)
40006aa4:	dc001617 	ldw	r16,88(sp)
40006aa8:	dec02004 	addi	sp,sp,128
        switch(mode) {
            case 0: Intra_16x16_Vertical(f,x,y); break;
            case 1: Intra_16x16_Horizontal(f,x,y); break;
            case 2: Intra_16x16_DC(f,x_avail,y_avail,x,y); break;
            case 3: Intra_16x16_Plane(f,x,y); break;
            default: printf("unsupported Intra16x16PredMode %d at %d,%d!\n",mode,x,y);
40006aac:	000ef681 	jmpi	4000ef68 <printf>
40006ab0:	80bfffc4 	addi	r2,r16,-1
40006ab4:	85c003c4 	addi	r23,r16,15
40006ab8:	85800044 	addi	r22,r16,1
40006abc:	85400084 	addi	r21,r16,2
40006ac0:	850000c4 	addi	r20,r16,3
40006ac4:	84c00104 	addi	r19,r16,4
40006ac8:	84800144 	addi	r18,r16,5
40006acc:	84400184 	addi	r17,r16,6
40006ad0:	83c001c4 	addi	r15,r16,7
40006ad4:	83800204 	addi	r14,r16,8
40006ad8:	83400244 	addi	r13,r16,9
40006adc:	83000284 	addi	r12,r16,10
40006ae0:	82c002c4 	addi	r11,r16,11
40006ae4:	82800304 	addi	r10,r16,12
40006ae8:	82400344 	addi	r9,r16,13
40006aec:	82000384 	addi	r8,r16,14
40006af0:	39800404 	addi	r6,r7,16

static inline void Intra_16x16_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<16; ++y)
    for(x=0; x<16; ++x)
      p(x,y)=p(-1,y);
40006af4:	20c00217 	ldw	r3,8(r4)
40006af8:	21400617 	ldw	r5,24(r4)
40006afc:	38c7383a 	mul	r3,r7,r3
40006b00:	28c7883a 	add	r3,r5,r3
40006b04:	188b883a 	add	r5,r3,r2
40006b08:	29400003 	ldbu	r5,0(r5)
40006b0c:	1c07883a 	add	r3,r3,r16
40006b10:	19400005 	stb	r5,0(r3)
40006b14:	20c00217 	ldw	r3,8(r4)
40006b18:	21400617 	ldw	r5,24(r4)
40006b1c:	38c7383a 	mul	r3,r7,r3
40006b20:	28c7883a 	add	r3,r5,r3
40006b24:	188b883a 	add	r5,r3,r2
40006b28:	29400003 	ldbu	r5,0(r5)
40006b2c:	1d87883a 	add	r3,r3,r22
40006b30:	19400005 	stb	r5,0(r3)
40006b34:	20c00217 	ldw	r3,8(r4)
40006b38:	21400617 	ldw	r5,24(r4)
40006b3c:	38c7383a 	mul	r3,r7,r3
40006b40:	28c7883a 	add	r3,r5,r3
40006b44:	188b883a 	add	r5,r3,r2
40006b48:	29400003 	ldbu	r5,0(r5)
40006b4c:	1d47883a 	add	r3,r3,r21
40006b50:	19400005 	stb	r5,0(r3)
40006b54:	20c00217 	ldw	r3,8(r4)
40006b58:	21400617 	ldw	r5,24(r4)
40006b5c:	38c7383a 	mul	r3,r7,r3
40006b60:	28c7883a 	add	r3,r5,r3
40006b64:	188b883a 	add	r5,r3,r2
40006b68:	29400003 	ldbu	r5,0(r5)
40006b6c:	1d07883a 	add	r3,r3,r20
40006b70:	19400005 	stb	r5,0(r3)
40006b74:	20c00217 	ldw	r3,8(r4)
40006b78:	21400617 	ldw	r5,24(r4)
40006b7c:	38c7383a 	mul	r3,r7,r3
40006b80:	28c7883a 	add	r3,r5,r3
40006b84:	188b883a 	add	r5,r3,r2
40006b88:	29400003 	ldbu	r5,0(r5)
40006b8c:	1cc7883a 	add	r3,r3,r19
40006b90:	19400005 	stb	r5,0(r3)
40006b94:	20c00217 	ldw	r3,8(r4)
40006b98:	21400617 	ldw	r5,24(r4)
40006b9c:	38c7383a 	mul	r3,r7,r3
40006ba0:	28c7883a 	add	r3,r5,r3
40006ba4:	188b883a 	add	r5,r3,r2
40006ba8:	29400003 	ldbu	r5,0(r5)
40006bac:	1c87883a 	add	r3,r3,r18
40006bb0:	19400005 	stb	r5,0(r3)
40006bb4:	20c00217 	ldw	r3,8(r4)
40006bb8:	21400617 	ldw	r5,24(r4)
40006bbc:	38c7383a 	mul	r3,r7,r3
40006bc0:	28c7883a 	add	r3,r5,r3
40006bc4:	188b883a 	add	r5,r3,r2
40006bc8:	29400003 	ldbu	r5,0(r5)
40006bcc:	1c47883a 	add	r3,r3,r17
40006bd0:	19400005 	stb	r5,0(r3)
40006bd4:	20c00217 	ldw	r3,8(r4)
40006bd8:	21400617 	ldw	r5,24(r4)
40006bdc:	38c7383a 	mul	r3,r7,r3
40006be0:	28c7883a 	add	r3,r5,r3
40006be4:	188b883a 	add	r5,r3,r2
40006be8:	29400003 	ldbu	r5,0(r5)
40006bec:	1bc7883a 	add	r3,r3,r15
40006bf0:	19400005 	stb	r5,0(r3)
40006bf4:	21400617 	ldw	r5,24(r4)
40006bf8:	20c00217 	ldw	r3,8(r4)
40006bfc:	38c7383a 	mul	r3,r7,r3
40006c00:	28c7883a 	add	r3,r5,r3
40006c04:	188b883a 	add	r5,r3,r2
40006c08:	29400003 	ldbu	r5,0(r5)
40006c0c:	1b87883a 	add	r3,r3,r14
40006c10:	19400005 	stb	r5,0(r3)
40006c14:	20c00217 	ldw	r3,8(r4)
40006c18:	21400617 	ldw	r5,24(r4)
40006c1c:	38c7383a 	mul	r3,r7,r3
40006c20:	28c7883a 	add	r3,r5,r3
40006c24:	188b883a 	add	r5,r3,r2
40006c28:	29400003 	ldbu	r5,0(r5)
40006c2c:	1b47883a 	add	r3,r3,r13
40006c30:	19400005 	stb	r5,0(r3)
40006c34:	20c00217 	ldw	r3,8(r4)
40006c38:	21400617 	ldw	r5,24(r4)
40006c3c:	38c7383a 	mul	r3,r7,r3
40006c40:	28c7883a 	add	r3,r5,r3
40006c44:	188b883a 	add	r5,r3,r2
40006c48:	29400003 	ldbu	r5,0(r5)
40006c4c:	1b07883a 	add	r3,r3,r12
40006c50:	19400005 	stb	r5,0(r3)
40006c54:	20c00217 	ldw	r3,8(r4)
40006c58:	21400617 	ldw	r5,24(r4)
40006c5c:	38c7383a 	mul	r3,r7,r3
40006c60:	28c7883a 	add	r3,r5,r3
40006c64:	188b883a 	add	r5,r3,r2
40006c68:	29400003 	ldbu	r5,0(r5)
40006c6c:	1ac7883a 	add	r3,r3,r11
40006c70:	19400005 	stb	r5,0(r3)
40006c74:	20c00217 	ldw	r3,8(r4)
40006c78:	21400617 	ldw	r5,24(r4)
40006c7c:	38c7383a 	mul	r3,r7,r3
40006c80:	28c7883a 	add	r3,r5,r3
40006c84:	188b883a 	add	r5,r3,r2
40006c88:	29400003 	ldbu	r5,0(r5)
40006c8c:	1a87883a 	add	r3,r3,r10
40006c90:	19400005 	stb	r5,0(r3)
40006c94:	20c00217 	ldw	r3,8(r4)
40006c98:	21400617 	ldw	r5,24(r4)
40006c9c:	38c7383a 	mul	r3,r7,r3
40006ca0:	28c7883a 	add	r3,r5,r3
40006ca4:	188b883a 	add	r5,r3,r2
40006ca8:	29400003 	ldbu	r5,0(r5)
40006cac:	1a47883a 	add	r3,r3,r9
40006cb0:	19400005 	stb	r5,0(r3)
40006cb4:	20c00217 	ldw	r3,8(r4)
40006cb8:	21400617 	ldw	r5,24(r4)
40006cbc:	38c7383a 	mul	r3,r7,r3
40006cc0:	28c7883a 	add	r3,r5,r3
40006cc4:	188b883a 	add	r5,r3,r2
40006cc8:	29400003 	ldbu	r5,0(r5)
40006ccc:	1a07883a 	add	r3,r3,r8
40006cd0:	19400005 	stb	r5,0(r3)
40006cd4:	20c00217 	ldw	r3,8(r4)
40006cd8:	21400617 	ldw	r5,24(r4)
40006cdc:	38c7383a 	mul	r3,r7,r3
40006ce0:	39c00044 	addi	r7,r7,1
40006ce4:	28c7883a 	add	r3,r5,r3
40006ce8:	188b883a 	add	r5,r3,r2
40006cec:	29400003 	ldbu	r5,0(r5)
40006cf0:	1dc7883a 	add	r3,r3,r23
40006cf4:	19400005 	stb	r5,0(r3)
      p(x,y)=p(x,-1);
}

static inline void Intra_16x16_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<16; ++y)
40006cf8:	31ff7e1e 	bne	r6,r7,40006af4 <__alt_data_end+0xc0006af4>
40006cfc:	003e8c06 	br	40006730 <__alt_data_end+0xc0006730>
40006d00:	20800217 	ldw	r2,8(r4)
40006d04:	20c00617 	ldw	r3,24(r4)

static inline void Intra_16x16_DC(frame *f, int x_avail, int y_avail, int bx, int by) {
  int i, sum=0, count=0;
  if(x_avail)
    for(i=0; i<16; ++i, ++count)
      sum+=p(-1,i);
40006d08:	39400044 	addi	r5,r7,1
40006d0c:	288b383a 	mul	r5,r5,r2
40006d10:	3891383a 	mul	r8,r7,r2
40006d14:	3ac00084 	addi	r11,r7,2
40006d18:	82bfffc4 	addi	r10,r16,-1
40006d1c:	5897383a 	mul	r11,r11,r2
40006d20:	3a4000c4 	addi	r9,r7,3
40006d24:	1a95883a 	add	r10,r3,r10
40006d28:	4893383a 	mul	r9,r9,r2
40006d2c:	3b000104 	addi	r12,r7,4
40006d30:	514b883a 	add	r5,r10,r5
40006d34:	5211883a 	add	r8,r10,r8
40006d38:	6099383a 	mul	r12,r12,r2
40006d3c:	3bc00144 	addi	r15,r7,5
40006d40:	2c400003 	ldbu	r17,0(r5)
40006d44:	52d7883a 	add	r11,r10,r11
40006d48:	3b400184 	addi	r13,r7,6
40006d4c:	42000003 	ldbu	r8,0(r8)
40006d50:	789f383a 	mul	r15,r15,r2
40006d54:	5253883a 	add	r9,r10,r9
40006d58:	59400003 	ldbu	r5,0(r11)
40006d5c:	3b8001c4 	addi	r14,r7,7
40006d60:	6897383a 	mul	r11,r13,r2
40006d64:	4c800003 	ldbu	r18,0(r9)
40006d68:	709d383a 	mul	r14,r14,r2
40006d6c:	5313883a 	add	r9,r10,r12
40006d70:	3b400204 	addi	r13,r7,8
40006d74:	8a11883a 	add	r8,r17,r8
40006d78:	53df883a 	add	r15,r10,r15
40006d7c:	689b383a 	mul	r13,r13,r2
40006d80:	4a400003 	ldbu	r9,0(r9)
40006d84:	3b000244 	addi	r12,r7,9
40006d88:	7c400003 	ldbu	r17,0(r15)
40006d8c:	2a0b883a 	add	r5,r5,r8
40006d90:	6099383a 	mul	r12,r12,r2
40006d94:	52d1883a 	add	r8,r10,r11
40006d98:	3ac00284 	addi	r11,r7,10
40006d9c:	914b883a 	add	r5,r18,r5
40006da0:	539d883a 	add	r14,r10,r14
40006da4:	42000003 	ldbu	r8,0(r8)
40006da8:	5897383a 	mul	r11,r11,r2
40006dac:	3bc002c4 	addi	r15,r7,11
40006db0:	4953883a 	add	r9,r9,r5
40006db4:	74800003 	ldbu	r18,0(r14)
40006db8:	534b883a 	add	r5,r10,r13
40006dbc:	789f383a 	mul	r15,r15,r2
40006dc0:	3b800304 	addi	r14,r7,12
40006dc4:	8a53883a 	add	r9,r17,r9
40006dc8:	5319883a 	add	r12,r10,r12
40006dcc:	29400003 	ldbu	r5,0(r5)
40006dd0:	709d383a 	mul	r14,r14,r2
40006dd4:	3b400344 	addi	r13,r7,13
40006dd8:	52d7883a 	add	r11,r10,r11
40006ddc:	4251883a 	add	r8,r8,r9
40006de0:	64400003 	ldbu	r17,0(r12)
40006de4:	689b383a 	mul	r13,r13,r2
40006de8:	3b000384 	addi	r12,r7,14
40006dec:	9211883a 	add	r8,r18,r8
40006df0:	5a400003 	ldbu	r9,0(r11)
40006df4:	53df883a 	add	r15,r10,r15
40006df8:	6099383a 	mul	r12,r12,r2
40006dfc:	3ac003c4 	addi	r11,r7,15
40006e00:	2a0b883a 	add	r5,r5,r8
40006e04:	539d883a 	add	r14,r10,r14
40006e08:	7bc00003 	ldbu	r15,0(r15)
40006e0c:	5897383a 	mul	r11,r11,r2
40006e10:	894b883a 	add	r5,r17,r5
40006e14:	535b883a 	add	r13,r10,r13
40006e18:	72000003 	ldbu	r8,0(r14)
40006e1c:	4953883a 	add	r9,r9,r5
40006e20:	5319883a 	add	r12,r10,r12
40006e24:	6b400003 	ldbu	r13,0(r13)
40006e28:	7a53883a 	add	r9,r15,r9
40006e2c:	61400003 	ldbu	r5,0(r12)
40006e30:	52d5883a 	add	r10,r10,r11
40006e34:	4251883a 	add	r8,r8,r9
40006e38:	52400003 	ldbu	r9,0(r10)
40006e3c:	6a11883a 	add	r8,r13,r8
40006e40:	2a0b883a 	add	r5,r5,r8
40006e44:	494b883a 	add	r5,r9,r5
  if(y_avail)
40006e48:	3000071e 	bne	r6,zero,40006e68 <Intra_16x16_Dispatch+0x1200>
    for(i=0; i<16; ++i, ++count)
      sum+=p(i,-1);
  if(count==32) sum=(sum+16)>>5; else
  if(count==16) sum=(sum+8)>>4;  else
40006e4c:	2c800204 	addi	r18,r5,8
40006e50:	9025d13a 	srai	r18,r18,4
40006e54:	003e2406 	br	400066e8 <__alt_data_end+0xc00066e8>
40006e58:	01800404 	movi	r6,16
40006e5c:	59bffb26 	beq	r11,r6,40006e4c <__alt_data_end+0xc0006e4c>
40006e60:	04802004 	movi	r18,128
40006e64:	003e2306 	br	400066f4 <__alt_data_end+0xc00066f4>
}

static inline void Intra_16x16_DC(frame *f, int x_avail, int y_avail, int bx, int by) {
  int i, sum=0, count=0;
  if(x_avail)
    for(i=0; i<16; ++i, ++count)
40006e68:	02800404 	movi	r10,16
40006e6c:	003df606 	br	40006648 <__alt_data_end+0xc0006648>

40006e70 <Intra_Chroma_Dispatch_2>:
            default: printf("unsupported Intra16x16PredMode %d at %d,%d!\n",mode,x,y);
        }
}


void Intra_Chroma_Dispatch_2(frame *f, int mode, int x, int y, uint32_t x_avail, uint32_t y_avail) {
40006e70:	deffd204 	addi	sp,sp,-184
40006e74:	dd802a15 	stw	r22,168(sp)
40006e78:	dcc02715 	stw	r19,156(sp)
40006e7c:	dc802615 	stw	r18,152(sp)
    static int mode_2    = 0;
    static int mode_3    = 0;
    int        last_mode = 0;
    int        nocd      = 0;

    int        conv_modes[] = {2, 1, 0, 3};
40006e80:	05800084 	movi	r22,2
40006e84:	04800044 	movi	r18,1
40006e88:	04c000c4 	movi	r19,3
            default: printf("unsupported Intra16x16PredMode %d at %d,%d!\n",mode,x,y);
        }
}


void Intra_Chroma_Dispatch_2(frame *f, int mode, int x, int y, uint32_t x_avail, uint32_t y_avail) {
40006e8c:	df002c15 	stw	fp,176(sp)
40006e90:	ddc02b15 	stw	r23,172(sp)
40006e94:	dd402915 	stw	r21,164(sp)
40006e98:	dc402515 	stw	r17,148(sp)
40006e9c:	dc002415 	stw	r16,144(sp)
40006ea0:	dfc02d15 	stw	ra,180(sp)
40006ea4:	dd002815 	stw	r20,160(sp)
    static int mode_2    = 0;
    static int mode_3    = 0;
    int        last_mode = 0;
    int        nocd      = 0;

    int        conv_modes[] = {2, 1, 0, 3};
40006ea8:	dd800415 	stw	r22,16(sp)
40006eac:	dc800515 	stw	r18,20(sp)
40006eb0:	d8000615 	stw	zero,24(sp)
40006eb4:	dcc00715 	stw	r19,28(sp)
            default: printf("unsupported Intra16x16PredMode %d at %d,%d!\n",mode,x,y);
        }
}


void Intra_Chroma_Dispatch_2(frame *f, int mode, int x, int y, uint32_t x_avail, uint32_t y_avail) {
40006eb8:	2023883a 	mov	r17,r4
40006ebc:	3021883a 	mov	r16,r6
40006ec0:	382b883a 	mov	r21,r7
40006ec4:	ddc02e17 	ldw	r23,184(sp)
40006ec8:	df002f17 	ldw	fp,188(sp)
    static int mode_3    = 0;
    int        last_mode = 0;
    int        nocd      = 0;

    int        conv_modes[] = {2, 1, 0, 3};
    int        block_size = mode==0?4:8;
40006ecc:	28002b26 	beq	r5,zero,40006f7c <Intra_Chroma_Dispatch_2+0x10c>
    int bx = x;
    int by = y;

    if(HW_ENABLE_CHROMA && (mode != 0))
    {
        uint32_t id = send_chroma_intra_packet_2(block_size, f, conv_modes[mode], x, y, 1,1, 0);
40006ed0:	294b883a 	add	r5,r5,r5
40006ed4:	d8800404 	addi	r2,sp,16
40006ed8:	294b883a 	add	r5,r5,r5
40006edc:	114b883a 	add	r5,r2,r5
40006ee0:	2cc00017 	ldw	r19,0(r5)
40006ee4:	200b883a 	mov	r5,r4
40006ee8:	d9c00015 	stw	r7,0(sp)
40006eec:	01000204 	movi	r4,8
40006ef0:	300f883a 	mov	r7,r6
40006ef4:	d8000315 	stw	zero,12(sp)
40006ef8:	980d883a 	mov	r6,r19
40006efc:	dc800215 	stw	r18,8(sp)
40006f00:	dc800115 	stw	r18,4(sp)
40006f04:	00050740 	call	40005074 <send_chroma_intra_packet_2>
        //start = read_timer();
        rx_intra_packet(id, f, x, y, TYPE_CR);
40006f08:	1009883a 	mov	r4,r2
40006f0c:	a80f883a 	mov	r7,r21
40006f10:	800d883a 	mov	r6,r16
40006f14:	880b883a 	mov	r5,r17
40006f18:	0001f600 	call	40001f60 <rx_intra_packet.constprop.13>

        id = send_chroma_intra_packet_2(block_size, f, conv_modes[mode], x, y, 1,1, 1);
40006f1c:	800f883a 	mov	r7,r16
40006f20:	980d883a 	mov	r6,r19
40006f24:	dc800215 	stw	r18,8(sp)
40006f28:	dc800115 	stw	r18,4(sp)
40006f2c:	dd400015 	stw	r21,0(sp)
40006f30:	880b883a 	mov	r5,r17
40006f34:	01000204 	movi	r4,8
40006f38:	00023400 	call	40002340 <send_chroma_intra_packet_2.constprop.15>
        //start = read_timer();
        rx_intra_packet(id, f, x, y, TYPE_CB);
40006f3c:	a80f883a 	mov	r7,r21
40006f40:	800d883a 	mov	r6,r16
        //start = read_timer();
        rx_intra_packet(id, f, x+4, y+4, TYPE_CR);

        id = send_chroma_intra_packet_2(block_size, f, conv_modes[mode], x+4, y+4, 1,1, 1);
        //start = read_timer();
        rx_intra_packet(id, f, x+4, y+4, TYPE_CB);
40006f44:	880b883a 	mov	r5,r17
40006f48:	1009883a 	mov	r4,r2
//            case 2: Intra_Chroma_Vertical(f,x,y); break;
//            case 3: Intra_Chroma_Plane(f,x,y); break;
//            default: printf("unsupported IntraChromaPredMode %d at %d,%d!\n",mode,x<<1,y<<1);
//        }
    }
}
40006f4c:	dfc02d17 	ldw	ra,180(sp)
40006f50:	df002c17 	ldw	fp,176(sp)
40006f54:	ddc02b17 	ldw	r23,172(sp)
40006f58:	dd802a17 	ldw	r22,168(sp)
40006f5c:	dd402917 	ldw	r21,164(sp)
40006f60:	dd002817 	ldw	r20,160(sp)
40006f64:	dcc02717 	ldw	r19,156(sp)
40006f68:	dc802617 	ldw	r18,152(sp)
40006f6c:	dc402517 	ldw	r17,148(sp)
40006f70:	dc002417 	ldw	r16,144(sp)
40006f74:	dec02e04 	addi	sp,sp,184
        //start = read_timer();
        rx_intra_packet(id, f, x+4, y+4, TYPE_CR);

        id = send_chroma_intra_packet_2(block_size, f, conv_modes[mode], x+4, y+4, 1,1, 1);
        //start = read_timer();
        rx_intra_packet(id, f, x+4, y+4, TYPE_CB);
40006f78:	00021501 	jmpi	40002150 <rx_intra_packet.constprop.14>
        rx_intra_packet(id, f, x, y, TYPE_CB);
    }
    else if( HW_ENABLE_CHROMA && (mode == 0)){

        //0,0
        uint32_t id = send_chroma_intra_packet_2(block_size, f, conv_modes[mode], x, y, x_avail, y_avail, 0);
40006f7c:	200b883a 	mov	r5,r4
40006f80:	df000215 	stw	fp,8(sp)
40006f84:	ddc00115 	stw	r23,4(sp)
40006f88:	d9c00015 	stw	r7,0(sp)
40006f8c:	01000104 	movi	r4,4
40006f90:	300f883a 	mov	r7,r6
40006f94:	d8000315 	stw	zero,12(sp)
40006f98:	b00d883a 	mov	r6,r22
40006f9c:	00050740 	call	40005074 <send_chroma_intra_packet_2>
        //start = read_timer();
        rx_intra_packet(id, f, x, y, TYPE_CR);
40006fa0:	a80f883a 	mov	r7,r21
40006fa4:	800d883a 	mov	r6,r16
40006fa8:	1009883a 	mov	r4,r2
40006fac:	880b883a 	mov	r5,r17
40006fb0:	0001f600 	call	40001f60 <rx_intra_packet.constprop.13>

        id = send_chroma_intra_packet_2(block_size, f, conv_modes[mode], x, y, x_avail, y_avail, 1);
40006fb4:	800f883a 	mov	r7,r16
40006fb8:	b00d883a 	mov	r6,r22
40006fbc:	df000215 	stw	fp,8(sp)
40006fc0:	ddc00115 	stw	r23,4(sp)
40006fc4:	dd400015 	stw	r21,0(sp)
40006fc8:	880b883a 	mov	r5,r17
40006fcc:	01000104 	movi	r4,4
40006fd0:	00023400 	call	40002340 <send_chroma_intra_packet_2.constprop.15>
       // start = read_timer();
        rx_intra_packet(id, f, x, y, TYPE_CB);
40006fd4:	a80f883a 	mov	r7,r21
40006fd8:	800d883a 	mov	r6,r16
40006fdc:	1009883a 	mov	r4,r2
40006fe0:	880b883a 	mov	r5,r17
40006fe4:	00021500 	call	40002150 <rx_intra_packet.constprop.14>

        //4,0
        id = send_chroma_intra_packet_2(block_size, f, conv_modes[mode], x+4, y, 1, y_avail, 0);
40006fe8:	85000104 	addi	r20,r16,4
40006fec:	b00d883a 	mov	r6,r22
40006ff0:	df000215 	stw	fp,8(sp)
40006ff4:	dd400015 	stw	r21,0(sp)
40006ff8:	a00f883a 	mov	r7,r20
40006ffc:	880b883a 	mov	r5,r17
40007000:	01000104 	movi	r4,4
40007004:	d8000315 	stw	zero,12(sp)
40007008:	dc800115 	stw	r18,4(sp)
4000700c:	00050740 	call	40005074 <send_chroma_intra_packet_2>
        //start = read_timer();
        rx_intra_packet(id, f, x+4, y, TYPE_CR);
40007010:	a80f883a 	mov	r7,r21
40007014:	1009883a 	mov	r4,r2
40007018:	a00d883a 	mov	r6,r20
4000701c:	880b883a 	mov	r5,r17
40007020:	0001f600 	call	40001f60 <rx_intra_packet.constprop.13>

        id = send_chroma_intra_packet_2(block_size, f, conv_modes[mode], x+4, y, 1, y_avail, 1);
40007024:	b00d883a 	mov	r6,r22
40007028:	a00f883a 	mov	r7,r20
4000702c:	df000215 	stw	fp,8(sp)
40007030:	dd400015 	stw	r21,0(sp)
40007034:	880b883a 	mov	r5,r17
40007038:	01000104 	movi	r4,4
4000703c:	dc800115 	stw	r18,4(sp)
40007040:	00023400 	call	40002340 <send_chroma_intra_packet_2.constprop.15>
        //start = read_timer();
        rx_intra_packet(id, f, x+4, y, TYPE_CB);
40007044:	a80f883a 	mov	r7,r21
40007048:	1009883a 	mov	r4,r2
4000704c:	a00d883a 	mov	r6,r20
40007050:	880b883a 	mov	r5,r17
40007054:	00021500 	call	40002150 <rx_intra_packet.constprop.14>

        //0,4
        id = send_chroma_intra_packet_2(block_size, f, conv_modes[mode], x, y+4, x_avail, 1, 0);
40007058:	aa000104 	addi	r8,r21,4
4000705c:	da000015 	stw	r8,0(sp)
40007060:	800f883a 	mov	r7,r16
40007064:	b00d883a 	mov	r6,r22
40007068:	ddc00115 	stw	r23,4(sp)
4000706c:	880b883a 	mov	r5,r17
40007070:	01000104 	movi	r4,4
40007074:	d8000315 	stw	zero,12(sp)
40007078:	dc800215 	stw	r18,8(sp)
4000707c:	da000815 	stw	r8,32(sp)
40007080:	00050740 	call	40005074 <send_chroma_intra_packet_2>
        //start = read_timer();
        rx_intra_packet(id, f, x, y+4, TYPE_CR);
40007084:	d9c00817 	ldw	r7,32(sp)
40007088:	800d883a 	mov	r6,r16
4000708c:	1009883a 	mov	r4,r2
40007090:	880b883a 	mov	r5,r17
40007094:	0001f600 	call	40001f60 <rx_intra_packet.constprop.13>

        id = send_chroma_intra_packet_2(block_size, f, conv_modes[mode], x, y+4, x_avail, 1, 1);
40007098:	da400817 	ldw	r9,32(sp)
4000709c:	800f883a 	mov	r7,r16
400070a0:	b00d883a 	mov	r6,r22
400070a4:	da400015 	stw	r9,0(sp)
400070a8:	ddc00115 	stw	r23,4(sp)
400070ac:	880b883a 	mov	r5,r17
400070b0:	01000104 	movi	r4,4
400070b4:	dc800215 	stw	r18,8(sp)
400070b8:	00023400 	call	40002340 <send_chroma_intra_packet_2.constprop.15>
        //start = read_timer();
        rx_intra_packet(id, f, x, y+4, TYPE_CB);
400070bc:	d9c00817 	ldw	r7,32(sp)
400070c0:	800d883a 	mov	r6,r16
400070c4:	1009883a 	mov	r4,r2
400070c8:	880b883a 	mov	r5,r17
400070cc:	00021500 	call	40002150 <rx_intra_packet.constprop.14>
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400070d0:	88c00517 	ldw	r3,20(r17)
400070d4:	88800817 	ldw	r2,32(r17)
400070d8:	a9c000c4 	addi	r7,r21,3
400070dc:	38cf383a 	mul	r7,r7,r3
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400070e0:	18cb883a 	add	r5,r3,r3

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
           ((uint32_t)r(x+2,y)) <<8  |\
           ((uint32_t)r(x+1,y)) <<16 |\
400070e4:	1539883a 	add	fp,r2,r20
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400070e8:	294b883a 	add	r5,r5,r5
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
           ((uint32_t)r(x+2,y)) <<8  |\
400070ec:	11ed883a 	add	r22,r2,r7
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400070f0:	29cb883a 	add	r5,r5,r7

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
           ((uint32_t)r(x+2,y)) <<8  |\
           ((uint32_t)r(x+1,y)) <<16 |\
400070f4:	e1cf883a 	add	r7,fp,r7
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400070f8:	39c00003 	ldbu	r7,0(r7)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400070fc:	1dc001e4 	muli	r23,r3,7
           ((uint32_t)r(x,y+2)) <<8  |\
40007100:	28ebc83a 	sub	r21,r5,r3
           ((uint32_t)r(x,y+1)) <<16 |\
40007104:	a8ffc83a 	sub	ra,r21,r3
           ((uint32_t)r(x,y+0)) <<24;
40007108:	f8dfc83a 	sub	r15,ra,r3
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
4000710c:	380e943a 	slli	r7,r7,16
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007110:	bbd9883a 	add	r12,r23,r15
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
           ((uint32_t)r(x+2,y)) <<8  |\
40007114:	b409883a 	add	r4,r22,r16
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
40007118:	60ddc83a 	sub	r14,r12,r3
           ((uint32_t)r(x,y+1)) <<16 |\
4000711c:	70dbc83a 	sub	r13,r14,r3
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007120:	d9c00c15 	stw	r7,48(sp)
40007124:	21c00183 	ldbu	r7,6(r4)
uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
40007128:	68d7c83a 	sub	r11,r13,r3
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
4000712c:	bad1883a 	add	r8,r23,r11
uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
           ((uint32_t)r(x+2,y)) <<8  |\
           ((uint32_t)r(x+1,y)) <<16 |\
           ((uint32_t)r(x+0,y)) <<24;
40007130:	840000c4 	addi	r16,r16,3
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
40007134:	40d5c83a 	sub	r10,r8,r3
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007138:	d9c00e15 	stw	r7,56(sp)
4000713c:	21c00243 	ldbu	r7,9(r4)

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
40007140:	50d3c83a 	sub	r9,r10,r3
uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
           ((uint32_t)r(x+2,y)) <<8  |\
           ((uint32_t)r(x+1,y)) <<16 |\
           ((uint32_t)r(x+0,y)) <<24;
40007144:	b42d883a 	add	r22,r22,r16
uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
40007148:	48cdc83a 	sub	r6,r9,r3
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
4000714c:	b5800003 	ldbu	r22,0(r22)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007150:	b9af883a 	add	r23,r23,r6
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007154:	d9c01015 	stw	r7,64(sp)
40007158:	21c00203 	ldbu	r7,8(r4)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
4000715c:	ddc00915 	stw	r23,36(sp)
           ((uint32_t)r(x,y+2)) <<8  |\
40007160:	b8efc83a 	sub	r23,r23,r3
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007164:	dd800f15 	stw	r22,60(sp)

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
40007168:	b8edc83a 	sub	r22,r23,r3
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
4000716c:	15ef883a 	add	r23,r2,r23
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007170:	d9c01115 	stw	r7,68(sp)
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
40007174:	bc0f883a 	add	r7,r23,r16
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007178:	25c00283 	ldbu	r23,10(r4)
4000717c:	27000143 	ldbu	fp,5(r4)

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
40007180:	dd800a15 	stw	r22,40(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007184:	ddc01215 	stw	r23,72(sp)
40007188:	25c001c3 	ldbu	r23,7(r4)
4000718c:	e038923a 	slli	fp,fp,8
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007190:	114b883a 	add	r5,r2,r5
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007194:	ddc01315 	stw	r23,76(sp)
40007198:	25c00343 	ldbu	r23,13(r4)
4000719c:	df000b15 	stw	fp,44(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400071a0:	2c0b883a 	add	r5,r5,r16
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400071a4:	ddc01415 	stw	r23,80(sp)
400071a8:	25c00303 	ldbu	r23,12(r4)
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
400071ac:	1295883a 	add	r10,r2,r10
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
400071b0:	118d883a 	add	r6,r2,r6
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400071b4:	ddc01515 	stw	r23,84(sp)
400071b8:	25c00383 	ldbu	r23,14(r4)
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
400071bc:	5415883a 	add	r10,r10,r16
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
400071c0:	340d883a 	add	r6,r6,r16
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400071c4:	ddc01615 	stw	r23,88(sp)
400071c8:	25c002c3 	ldbu	r23,11(r4)

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
400071cc:	17ff883a 	add	ra,r2,ra
           ((uint32_t)r(x,y+0)) <<24;
400071d0:	13df883a 	add	r15,r2,r15
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400071d4:	ddc01715 	stw	r23,92(sp)
400071d8:	25c00443 	ldbu	r23,17(r4)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400071dc:	1319883a 	add	r12,r2,r12
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
400071e0:	12d7883a 	add	r11,r2,r11
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400071e4:	ddc01815 	stw	r23,96(sp)
400071e8:	25c00403 	ldbu	r23,16(r4)

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
400071ec:	1253883a 	add	r9,r2,r9
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400071f0:	1211883a 	add	r8,r2,r8
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400071f4:	ddc01915 	stw	r23,100(sp)
400071f8:	25c00483 	ldbu	r23,18(r4)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400071fc:	29400003 	ldbu	r5,0(r5)
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
40007200:	fc3f883a 	add	ra,ra,r16
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007204:	ddc01a15 	stw	r23,104(sp)
40007208:	25c003c3 	ldbu	r23,15(r4)
    else{
        data_0 = pack_cr_x(f, bx, by, -1, -1);
        data_1 = pack_cr_x(f, bx, by, 3, -1);
        data_2 = pack_cr_x(f, bx, by, 7,  -1);
        data_3 = pack_cr_x(f, bx, by, 11, -1);
        data_4 = (uint32_t) r(15, -1);
4000720c:	210004c3 	ldbu	r4,19(r4)

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
40007210:	4c13883a 	add	r9,r9,r16
           ((uint32_t)r(x,y+0)) <<24;
40007214:	7c1f883a 	add	r15,r15,r16
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007218:	6419883a 	add	r12,r12,r16
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
4000721c:	5c17883a 	add	r11,r11,r16
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007220:	4411883a 	add	r8,r8,r16
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007224:	ddc01b15 	stw	r23,108(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007228:	55c00003 	ldbu	r23,0(r10)
4000722c:	32800003 	ldbu	r10,0(r6)
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
40007230:	d9800a17 	ldw	r6,40(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007234:	ff000003 	ldbu	fp,0(ra)
40007238:	7bc00003 	ldbu	r15,0(r15)
4000723c:	63000003 	ldbu	r12,0(r12)
40007240:	5ac00003 	ldbu	r11,0(r11)
40007244:	42000003 	ldbu	r8,0(r8)
40007248:	3fc00003 	ldbu	ra,0(r7)
    else{
        data_0 = pack_cr_x(f, bx, by, -1, -1);
        data_1 = pack_cr_x(f, bx, by, 3, -1);
        data_2 = pack_cr_x(f, bx, by, 7,  -1);
        data_3 = pack_cr_x(f, bx, by, 11, -1);
        data_4 = (uint32_t) r(15, -1);
4000724c:	d9000d15 	stw	r4,52(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007250:	d9c00b17 	ldw	r7,44(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007254:	49000003 	ldbu	r4,0(r9)
40007258:	d9401c15 	stw	r5,112(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
4000725c:	da400c17 	ldw	r9,48(sp)
40007260:	d9400f17 	ldw	r5,60(sp)
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
40007264:	156b883a 	add	r21,r2,r21
40007268:	139d883a 	add	r14,r2,r14
           ((uint32_t)r(x,y+1)) <<16 |\
4000726c:	135b883a 	add	r13,r2,r13
40007270:	15ad883a 	add	r22,r2,r22
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
40007274:	ac2b883a 	add	r21,r21,r16
40007278:	741d883a 	add	r14,r14,r16
           ((uint32_t)r(x,y+1)) <<16 |\
4000727c:	6c1b883a 	add	r13,r13,r16
40007280:	b42d883a 	add	r22,r22,r16
           ((uint32_t)r(x,y+0)) <<24;
40007284:	30c7c83a 	sub	r3,r6,r3
40007288:	140d883a 	add	r6,r2,r16
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
4000728c:	ad400003 	ldbu	r21,0(r21)
40007290:	dbc01d15 	stw	r15,116(sp)
40007294:	73800003 	ldbu	r14,0(r14)
40007298:	6b400003 	ldbu	r13,0(r13)
4000729c:	db001e15 	stw	r12,120(sp)
400072a0:	dac01f15 	stw	r11,124(sp)
400072a4:	da002015 	stw	r8,128(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400072a8:	dac00e17 	ldw	r11,56(sp)
400072ac:	2810963a 	slli	r8,r5,24
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400072b0:	b5800003 	ldbu	r22,0(r22)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400072b4:	3a4ab03a 	or	r5,r7,r9
uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
           ((uint32_t)r(x,y+2)) <<8  |\
           ((uint32_t)r(x,y+1)) <<16 |\
           ((uint32_t)r(x,y+0)) <<24;
400072b8:	30c7883a 	add	r3,r6,r3
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400072bc:	d9c01117 	ldw	r7,68(sp)
400072c0:	d9801017 	ldw	r6,64(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400072c4:	da400917 	ldw	r9,36(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400072c8:	2acab03a 	or	r5,r5,r11
400072cc:	3018923a 	slli	r12,r6,8
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400072d0:	124d883a 	add	r6,r2,r9
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400072d4:	d8801417 	ldw	r2,80(sp)
400072d8:	3816943a 	slli	r11,r7,16
400072dc:	2a0ab03a 	or	r5,r5,r8
400072e0:	100e923a 	slli	r7,r2,8
400072e4:	da001517 	ldw	r8,84(sp)
400072e8:	d8801817 	ldw	r2,96(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400072ec:	18c00003 	ldbu	r3,0(r3)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400072f0:	4012943a 	slli	r9,r8,16
400072f4:	1010923a 	slli	r8,r2,8
400072f8:	d8801917 	ldw	r2,100(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400072fc:	d8c00c15 	stw	r3,48(sp)
40007300:	e038943a 	slli	fp,fp,16
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007304:	1004943a 	slli	r2,r2,16
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007308:	b82e923a 	slli	r23,r23,8
4000730c:	2006943a 	slli	r3,r4,16
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007310:	d9001317 	ldw	r4,76(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007314:	3421883a 	add	r16,r6,r16
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007318:	d8800f15 	stw	r2,60(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
4000731c:	df001115 	stw	fp,68(sp)
40007320:	ddc01515 	stw	r23,84(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007324:	2038963a 	slli	fp,r4,24
40007328:	ddc01b17 	ldw	r23,108(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
4000732c:	81000003 	ldbu	r4,0(r16)
40007330:	d8801d17 	ldw	r2,116(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007334:	62e0b03a 	or	r16,r12,r11
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007338:	a82a923a 	slli	r21,r21,8
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
4000733c:	dac01717 	ldw	r11,92(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007340:	701c923a 	slli	r14,r14,8
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007344:	b81e963a 	slli	r15,r23,24
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007348:	dd400b15 	stw	r21,44(sp)
4000734c:	db801015 	stw	r14,64(sp)
40007350:	ddc00c17 	ldw	r23,48(sp)
40007354:	101c963a 	slli	r14,r2,24
40007358:	681a943a 	slli	r13,r13,16
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
4000735c:	d8801217 	ldw	r2,72(sp)
40007360:	582a963a 	slli	r21,r11,24
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007364:	dac01f17 	ldw	r11,124(sp)
40007368:	5018963a 	slli	r12,r10,24
4000736c:	db401415 	stw	r13,80(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007370:	3a54b03a 	or	r10,r7,r9
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007374:	581a963a 	slli	r13,r11,24
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007378:	d9c00f17 	ldw	r7,60(sp)
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
4000737c:	b816963a 	slli	r11,r23,24
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007380:	80a0b03a 	or	r16,r16,r2
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007384:	ddc00b17 	ldw	r23,44(sp)
40007388:	d8801117 	ldw	r2,68(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
4000738c:	41d0b03a 	or	r8,r8,r7
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007390:	d9c01017 	ldw	r7,64(sp)
40007394:	b892b03a 	or	r9,r23,r2
40007398:	ddc01417 	ldw	r23,80(sp)
4000739c:	f83e923a 	slli	ra,ra,8
400073a0:	b02c943a 	slli	r22,r22,16
400073a4:	3dc4b03a 	or	r2,r7,r23
400073a8:	d9c01517 	ldw	r7,84(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400073ac:	ddc01a17 	ldw	r23,104(sp)
    uint8_t wr_addr   = 0x00;

    // write data 0
    uint32_t word1    = data_0<<16 | wr_addr<<8 | cmd;
    uint32_t word0    = 0xFFFF0000 | data_0>>16;
    send_flit(3, word0, word1, 1);
400073b0:	280c943a 	slli	r6,r5,16
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400073b4:	38c6b03a 	or	r3,r7,r3
400073b8:	fd8eb03a 	or	r7,ra,r22
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400073bc:	dd801617 	ldw	r22,88(sp)
400073c0:	45d0b03a 	or	r8,r8,r23
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400073c4:	ddc01e17 	ldw	r23,120(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
400073c8:	5594b03a 	or	r10,r10,r22
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400073cc:	dd801c17 	ldw	r22,112(sp)
    uint8_t wr_addr   = 0x00;

    // write data 0
    uint32_t word1    = data_0<<16 | wr_addr<<8 | cmd;
    uint32_t word0    = 0xFFFF0000 | data_0>>16;
    send_flit(3, word0, word1, 1);
400073d0:	280ad43a 	srli	r5,r5,16
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400073d4:	15c4b03a 	or	r2,r2,r23
400073d8:	4d92b03a 	or	r9,r9,r22
400073dc:	dd802017 	ldw	r22,128(sp)
400073e0:	4b92b03a 	or	r9,r9,r14
400073e4:	1344b03a 	or	r2,r2,r13
400073e8:	1d86b03a 	or	r3,r3,r22
    uint8_t wr_addr   = 0x00;

    // write data 0
    uint32_t word1    = data_0<<16 | wr_addr<<8 | cmd;
    uint32_t word0    = 0xFFFF0000 | data_0>>16;
    send_flit(3, word0, word1, 1);
400073ec:	31800054 	ori	r6,r6,1
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
400073f0:	392cb03a 	or	r22,r7,r4
    uint8_t wr_addr   = 0x00;

    // write data 0
    uint32_t word1    = data_0<<16 | wr_addr<<8 | cmd;
    uint32_t word0    = 0xFFFF0000 | data_0>>16;
    send_flit(3, word0, word1, 1);
400073f4:	297ffff4 	orhi	r5,r5,65535
400073f8:	900f883a 	mov	r7,r18
400073fc:	9809883a 	mov	r4,r19
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007400:	1b2eb03a 	or	r23,r3,r12
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007404:	556ab03a 	or	r21,r10,r21
           ((uint32_t)r(x+0,y)) <<24;
}

uint32_t pack_cr_y(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x,y+3))      |\
40007408:	b2ecb03a 	or	r22,r22,r11
    uint8_t wr_addr   = 0x00;

    // write data 0
    uint32_t word1    = data_0<<16 | wr_addr<<8 | cmd;
    uint32_t word0    = 0xFFFF0000 | data_0>>16;
    send_flit(3, word0, word1, 1);
4000740c:	d8802315 	stw	r2,140(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007410:	8720b03a 	or	r16,r16,fp
    uint8_t wr_addr   = 0x00;

    // write data 0
    uint32_t word1    = data_0<<16 | wr_addr<<8 | cmd;
    uint32_t word0    = 0xFFFF0000 | data_0>>16;
    send_flit(3, word0, word1, 1);
40007414:	da402215 	stw	r9,136(sp)
           ((uint32_t)p(x,y+0)) <<24;
}

uint32_t pack_cr_x(frame *f, int bx, int by, int x, int y){

    return ((uint32_t)r(x+3,y))      |\
40007418:	43f8b03a 	or	fp,r8,r15
    uint8_t wr_addr   = 0x00;

    // write data 0
    uint32_t word1    = data_0<<16 | wr_addr<<8 | cmd;
    uint32_t word0    = 0xFFFF0000 | data_0>>16;
    send_flit(3, word0, word1, 1);
4000741c:	000c2000 	call	4000c200 <send_flit>

    // write data 1
    wr_addr  = 1;
    word1    = data_1<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_1>>16;
    send_flit(3, word0, word1, 1);
40007420:	800c943a 	slli	r6,r16,16
40007424:	800ad43a 	srli	r5,r16,16
40007428:	900f883a 	mov	r7,r18
4000742c:	31804054 	ori	r6,r6,257
40007430:	297ffff4 	orhi	r5,r5,65535
40007434:	9809883a 	mov	r4,r19
40007438:	000c2000 	call	4000c200 <send_flit>

    // write data 2
    wr_addr  = 2;
    word1    = data_2<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_2>>16;
    send_flit(3, word0, word1, 1);
4000743c:	a80c943a 	slli	r6,r21,16
40007440:	a80ad43a 	srli	r5,r21,16
40007444:	900f883a 	mov	r7,r18
40007448:	31808054 	ori	r6,r6,513
4000744c:	297ffff4 	orhi	r5,r5,65535
40007450:	9809883a 	mov	r4,r19
40007454:	000c2000 	call	4000c200 <send_flit>

    // write   data 5
    wr_addr  = 5;
    word1    = data_5<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_5>>16;
    send_flit(3, word0, word1, 1);
40007458:	da402217 	ldw	r9,136(sp)
4000745c:	900f883a 	mov	r7,r18
40007460:	9809883a 	mov	r4,r19
40007464:	480c943a 	slli	r6,r9,16
40007468:	480ad43a 	srli	r5,r9,16
4000746c:	31814054 	ori	r6,r6,1281
40007470:	297ffff4 	orhi	r5,r5,65535
40007474:	000c2000 	call	4000c200 <send_flit>

    // write   data 6
    wr_addr  = 6;
    word1    = data_6<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_6>>16;
    send_flit(3, word0, word1, 1);
40007478:	d8802317 	ldw	r2,140(sp)
4000747c:	900f883a 	mov	r7,r18
40007480:	9809883a 	mov	r4,r19
40007484:	100c943a 	slli	r6,r2,16
40007488:	100ad43a 	srli	r5,r2,16
4000748c:	31818054 	ori	r6,r6,1537
40007490:	297ffff4 	orhi	r5,r5,65535
40007494:	000c2000 	call	4000c200 <send_flit>

    // write data 3
    wr_addr  = 3;
    word1    = data_3<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_3>>16;
    send_flit(3, word0, word1, 1);
40007498:	e00c943a 	slli	r6,fp,16
4000749c:	e00ad43a 	srli	r5,fp,16
400074a0:	900f883a 	mov	r7,r18
400074a4:	3180c054 	ori	r6,r6,769
400074a8:	297ffff4 	orhi	r5,r5,65535
400074ac:	9809883a 	mov	r4,r19
400074b0:	000c2000 	call	4000c200 <send_flit>

    // write   data 4
    wr_addr  = 4;
    word1    = data_4<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_4>>16;
    send_flit(3, word0, word1, 1);
400074b4:	d8800d17 	ldw	r2,52(sp)
400074b8:	900f883a 	mov	r7,r18
400074bc:	017ffff4 	movhi	r5,65535
400074c0:	100c943a 	slli	r6,r2,16
400074c4:	9809883a 	mov	r4,r19
400074c8:	31810054 	ori	r6,r6,1025
400074cc:	000c2000 	call	4000c200 <send_flit>

    // write   data 7
    wr_addr  = 7;
    word1    = data_7<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_7>>16;
    send_flit(3, word0, word1, 1);
400074d0:	b80c943a 	slli	r6,r23,16
400074d4:	b80ad43a 	srli	r5,r23,16
400074d8:	900f883a 	mov	r7,r18
400074dc:	3181c054 	ori	r6,r6,1793
400074e0:	297ffff4 	orhi	r5,r5,65535
400074e4:	9809883a 	mov	r4,r19
400074e8:	000c2000 	call	4000c200 <send_flit>

    // write   data 8
    wr_addr  = 8;
    word1    = data_8<<16 | wr_addr<<8 | cmd;
    word0    = 0xFFFF0000 | data_8>>16;
    send_flit(3, word0, word1, 1);
400074ec:	b00c943a 	slli	r6,r22,16
400074f0:	b00ad43a 	srli	r5,r22,16
400074f4:	900f883a 	mov	r7,r18
400074f8:	31820054 	ori	r6,r6,2049
400074fc:	297ffff4 	orhi	r5,r5,65535
40007500:	9809883a 	mov	r4,r19
40007504:	000c2000 	call	4000c200 <send_flit>

    //send a intra prediction request
    cmd                      = 2;
    uint32_t  availible_mask = availible_mask_x | availible_mask_y;
    identifier     = rand()%32 + 129;
40007508:	000f0b00 	call	4000f0b0 <rand>
4000750c:	00e00034 	movhi	r3,32768
40007510:	18c007c4 	addi	r3,r3,31
40007514:	10c4703a 	and	r2,r2,r3
40007518:	10001c16 	blt	r2,zero,4000758c <Intra_Chroma_Dispatch_2+0x71c>
4000751c:	14002044 	addi	r16,r2,129

    word1 = availible_mask<<24 | mode<<16 | size<<8 | cmd;
    word0 = identifier<<24     | availible_mask>>8;

    send_flit(3, word0, word1, 1);
40007520:	800a963a 	slli	r5,r16,24
40007524:	00804034 	movhi	r2,256
40007528:	10bfffc4 	addi	r2,r2,-1
4000752c:	04800044 	movi	r18,1
40007530:	01bfc0b4 	movhi	r6,65282
40007534:	288ab03a 	or	r5,r5,r2
40007538:	31810084 	addi	r6,r6,1026
4000753c:	900f883a 	mov	r7,r18
40007540:	010000c4 	movi	r4,3
40007544:	000c2000 	call	4000c200 <send_flit>
        rx_intra_packet(id, f, x, y+4, TYPE_CB);

        //4,4
        id = send_chroma_intra_packet_2(block_size, f, conv_modes[mode], x+4, y+4, 1,1, 0);
        //start = read_timer();
        rx_intra_packet(id, f, x+4, y+4, TYPE_CR);
40007548:	d9c00817 	ldw	r7,32(sp)
4000754c:	a00d883a 	mov	r6,r20
40007550:	880b883a 	mov	r5,r17
40007554:	8009883a 	mov	r4,r16
40007558:	0001f600 	call	40001f60 <rx_intra_packet.constprop.13>

        id = send_chroma_intra_packet_2(block_size, f, conv_modes[mode], x+4, y+4, 1,1, 1);
4000755c:	da000817 	ldw	r8,32(sp)
40007560:	a00f883a 	mov	r7,r20
40007564:	01800084 	movi	r6,2
40007568:	dc800215 	stw	r18,8(sp)
4000756c:	dc800115 	stw	r18,4(sp)
40007570:	da000015 	stw	r8,0(sp)
40007574:	880b883a 	mov	r5,r17
40007578:	01000104 	movi	r4,4
4000757c:	00023400 	call	40002340 <send_chroma_intra_packet_2.constprop.15>
        //start = read_timer();
        rx_intra_packet(id, f, x+4, y+4, TYPE_CB);
40007580:	d9c00817 	ldw	r7,32(sp)
40007584:	a00d883a 	mov	r6,r20
40007588:	003e6e06 	br	40006f44 <__alt_data_end+0xc0006f44>
    send_flit(3, word0, word1, 1);

    //send a intra prediction request
    cmd                      = 2;
    uint32_t  availible_mask = availible_mask_x | availible_mask_y;
    identifier     = rand()%32 + 129;
4000758c:	10bfffc4 	addi	r2,r2,-1
40007590:	00fff804 	movi	r3,-32
40007594:	10c4b03a 	or	r2,r2,r3
40007598:	10800044 	addi	r2,r2,1
4000759c:	003fdf06 	br	4000751c <__alt_data_end+0xc000751c>

400075a0 <software_intra>:
//        }
    }
}


void software_intra(frame *f, int size, int mode, int x, int y, uint32_t x_avail, uint32_t y_avail, int LCbCr, int luma4x4BlkIdx_check){
400075a0:	defff104 	addi	sp,sp,-60
	if(LCbCr == 0){
400075a4:	da401217 	ldw	r9,72(sp)
//        }
    }
}


void software_intra(frame *f, int size, int mode, int x, int y, uint32_t x_avail, uint32_t y_avail, int LCbCr, int luma4x4BlkIdx_check){
400075a8:	dfc00e15 	stw	ra,56(sp)
400075ac:	df000d15 	stw	fp,52(sp)
400075b0:	ddc00c15 	stw	r23,48(sp)
400075b4:	dd800b15 	stw	r22,44(sp)
400075b8:	dd400a15 	stw	r21,40(sp)
400075bc:	dd000915 	stw	r20,36(sp)
400075c0:	dcc00815 	stw	r19,32(sp)
400075c4:	dc800715 	stw	r18,28(sp)
400075c8:	dc400615 	stw	r17,24(sp)
400075cc:	dc000515 	stw	r16,20(sp)
400075d0:	3011883a 	mov	r8,r6
400075d4:	3807883a 	mov	r3,r7
400075d8:	dac01017 	ldw	r11,64(sp)
400075dc:	d9c00f17 	ldw	r7,60(sp)
400075e0:	d9801117 	ldw	r6,68(sp)
400075e4:	db001317 	ldw	r12,76(sp)
	if(LCbCr == 0){
400075e8:	4800141e 	bne	r9,zero,4000763c <software_intra+0x9c>
		switch(size){
400075ec:	00800104 	movi	r2,4
400075f0:	28803626 	beq	r5,r2,400076cc <software_intra+0x12c>
400075f4:	00800404 	movi	r2,16
400075f8:	2880261e 	bne	r5,r2,40007694 <software_intra+0xf4>
			case 4:  Intra_4x4_Dispatch(f, mode, x_avail, y_avail, x, y, luma4x4BlkIdx_check); break;
			case 16: Intra_16x16_Dispatch(f, x_avail, y_avail, mode, x, y); break;
400075fc:	d9c01015 	stw	r7,64(sp)
40007600:	580b883a 	mov	r5,r11
40007604:	400f883a 	mov	r7,r8
40007608:	d8c00f15 	stw	r3,60(sp)
            case 2: Intra_Chroma_Vertical(f,x,y); break;
            case 3: Intra_Chroma_Plane(f,x,y); break;
            default: printf("unsupported IntraChromaPredMode %d at %d,%d!\n",mode,x<<1,y<<1);
        }
	}
}
4000760c:	dfc00e17 	ldw	ra,56(sp)
40007610:	df000d17 	ldw	fp,52(sp)
40007614:	ddc00c17 	ldw	r23,48(sp)
40007618:	dd800b17 	ldw	r22,44(sp)
4000761c:	dd400a17 	ldw	r21,40(sp)
40007620:	dd000917 	ldw	r20,36(sp)
40007624:	dcc00817 	ldw	r19,32(sp)
40007628:	dc800717 	ldw	r18,28(sp)
4000762c:	dc400617 	ldw	r17,24(sp)
40007630:	dc000517 	ldw	r16,20(sp)
40007634:	dec00f04 	addi	sp,sp,60

void software_intra(frame *f, int size, int mode, int x, int y, uint32_t x_avail, uint32_t y_avail, int LCbCr, int luma4x4BlkIdx_check){
	if(LCbCr == 0){
		switch(size){
			case 4:  Intra_4x4_Dispatch(f, mode, x_avail, y_avail, x, y, luma4x4BlkIdx_check); break;
			case 16: Intra_16x16_Dispatch(f, x_avail, y_avail, mode, x, y); break;
40007638:	0005c681 	jmpi	40005c68 <Intra_16x16_Dispatch>
			default: printf("bad intra prediction size (%d)!\n", size);
		}
	}
	else{
        switch(mode) {
4000763c:	01400044 	movi	r5,1
40007640:	2005883a 	mov	r2,r4
40007644:	41403326 	beq	r8,r5,40007714 <software_intra+0x174>
40007648:	2a01660e 	bge	r5,r8,40007be4 <software_intra+0x644>
4000764c:	01400084 	movi	r5,2
40007650:	4140c726 	beq	r8,r5,40007970 <software_intra+0x3d0>
40007654:	008000c4 	movi	r2,3
40007658:	4081c01e 	bne	r8,r2,40007d5c <software_intra+0x7bc>
            case 0: Intra_Chroma_DC(f, x_avail, y_avail, x, y); break;
            case 1: Intra_Chroma_Horizontal(f,x,y); break;
            case 2: Intra_Chroma_Vertical(f,x,y); break;
            case 3: Intra_Chroma_Plane(f,x,y); break;
4000765c:	380d883a 	mov	r6,r7
40007660:	180b883a 	mov	r5,r3
            default: printf("unsupported IntraChromaPredMode %d at %d,%d!\n",mode,x<<1,y<<1);
        }
	}
}
40007664:	dfc00e17 	ldw	ra,56(sp)
40007668:	df000d17 	ldw	fp,52(sp)
4000766c:	ddc00c17 	ldw	r23,48(sp)
40007670:	dd800b17 	ldw	r22,44(sp)
40007674:	dd400a17 	ldw	r21,40(sp)
40007678:	dd000917 	ldw	r20,36(sp)
4000767c:	dcc00817 	ldw	r19,32(sp)
40007680:	dc800717 	ldw	r18,28(sp)
40007684:	dc400617 	ldw	r17,24(sp)
40007688:	dc000517 	ldw	r16,20(sp)
4000768c:	dec00f04 	addi	sp,sp,60
	else{
        switch(mode) {
            case 0: Intra_Chroma_DC(f, x_avail, y_avail, x, y); break;
            case 1: Intra_Chroma_Horizontal(f,x,y); break;
            case 2: Intra_Chroma_Vertical(f,x,y); break;
            case 3: Intra_Chroma_Plane(f,x,y); break;
40007690:	000487c1 	jmpi	4000487c <Intra_Chroma_Plane>
void software_intra(frame *f, int size, int mode, int x, int y, uint32_t x_avail, uint32_t y_avail, int LCbCr, int luma4x4BlkIdx_check){
	if(LCbCr == 0){
		switch(size){
			case 4:  Intra_4x4_Dispatch(f, mode, x_avail, y_avail, x, y, luma4x4BlkIdx_check); break;
			case 16: Intra_16x16_Dispatch(f, x_avail, y_avail, mode, x, y); break;
			default: printf("bad intra prediction size (%d)!\n", size);
40007694:	011000b4 	movhi	r4,16386
40007698:	2129bc04 	addi	r4,r4,-22800
            case 2: Intra_Chroma_Vertical(f,x,y); break;
            case 3: Intra_Chroma_Plane(f,x,y); break;
            default: printf("unsupported IntraChromaPredMode %d at %d,%d!\n",mode,x<<1,y<<1);
        }
	}
}
4000769c:	dfc00e17 	ldw	ra,56(sp)
400076a0:	df000d17 	ldw	fp,52(sp)
400076a4:	ddc00c17 	ldw	r23,48(sp)
400076a8:	dd800b17 	ldw	r22,44(sp)
400076ac:	dd400a17 	ldw	r21,40(sp)
400076b0:	dd000917 	ldw	r20,36(sp)
400076b4:	dcc00817 	ldw	r19,32(sp)
400076b8:	dc800717 	ldw	r18,28(sp)
400076bc:	dc400617 	ldw	r17,24(sp)
400076c0:	dc000517 	ldw	r16,20(sp)
400076c4:	dec00f04 	addi	sp,sp,60
void software_intra(frame *f, int size, int mode, int x, int y, uint32_t x_avail, uint32_t y_avail, int LCbCr, int luma4x4BlkIdx_check){
	if(LCbCr == 0){
		switch(size){
			case 4:  Intra_4x4_Dispatch(f, mode, x_avail, y_avail, x, y, luma4x4BlkIdx_check); break;
			case 16: Intra_16x16_Dispatch(f, x_avail, y_avail, mode, x, y); break;
			default: printf("bad intra prediction size (%d)!\n", size);
400076c8:	000ef681 	jmpi	4000ef68 <printf>


void software_intra(frame *f, int size, int mode, int x, int y, uint32_t x_avail, uint32_t y_avail, int LCbCr, int luma4x4BlkIdx_check){
	if(LCbCr == 0){
		switch(size){
			case 4:  Intra_4x4_Dispatch(f, mode, x_avail, y_avail, x, y, luma4x4BlkIdx_check); break;
400076cc:	d9c01015 	stw	r7,64(sp)
400076d0:	400b883a 	mov	r5,r8
400076d4:	300f883a 	mov	r7,r6
400076d8:	580d883a 	mov	r6,r11
400076dc:	db001115 	stw	r12,68(sp)
400076e0:	d8c00f15 	stw	r3,60(sp)
            case 2: Intra_Chroma_Vertical(f,x,y); break;
            case 3: Intra_Chroma_Plane(f,x,y); break;
            default: printf("unsupported IntraChromaPredMode %d at %d,%d!\n",mode,x<<1,y<<1);
        }
	}
}
400076e4:	dfc00e17 	ldw	ra,56(sp)
400076e8:	df000d17 	ldw	fp,52(sp)
400076ec:	ddc00c17 	ldw	r23,48(sp)
400076f0:	dd800b17 	ldw	r22,44(sp)
400076f4:	dd400a17 	ldw	r21,40(sp)
400076f8:	dd000917 	ldw	r20,36(sp)
400076fc:	dcc00817 	ldw	r19,32(sp)
40007700:	dc800717 	ldw	r18,28(sp)
40007704:	dc400617 	ldw	r17,24(sp)
40007708:	dc000517 	ldw	r16,20(sp)
4000770c:	dec00f04 	addi	sp,sp,60


void software_intra(frame *f, int size, int mode, int x, int y, uint32_t x_avail, uint32_t y_avail, int LCbCr, int luma4x4BlkIdx_check){
	if(LCbCr == 0){
		switch(size){
			case 4:  Intra_4x4_Dispatch(f, mode, x_avail, y_avail, x, y, luma4x4BlkIdx_check); break;
40007710:	00028081 	jmpi	40002808 <Intra_4x4_Dispatch>
40007714:	193fffc4 	addi	r4,r3,-1
40007718:	1b800044 	addi	r14,r3,1
4000771c:	1b400084 	addi	r13,r3,2
40007720:	1b0000c4 	addi	r12,r3,3
40007724:	1ac00104 	addi	r11,r3,4
40007728:	1a800144 	addi	r10,r3,5
4000772c:	1a400184 	addi	r9,r3,6
40007730:	1a0001c4 	addi	r8,r3,7
40007734:	3bc00204 	addi	r15,r7,8

void Intra_Chroma_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(-1,y);
40007738:	11400517 	ldw	r5,20(r2)
4000773c:	11800817 	ldw	r6,32(r2)
40007740:	394b383a 	mul	r5,r7,r5
40007744:	314b883a 	add	r5,r6,r5
40007748:	290d883a 	add	r6,r5,r4
4000774c:	31800003 	ldbu	r6,0(r6)
40007750:	28cb883a 	add	r5,r5,r3
40007754:	29800005 	stb	r6,0(r5)
      b(x,y)=b(-1,y);
40007758:	11400517 	ldw	r5,20(r2)
4000775c:	11800717 	ldw	r6,28(r2)
40007760:	394b383a 	mul	r5,r7,r5
40007764:	314b883a 	add	r5,r6,r5
40007768:	290d883a 	add	r6,r5,r4
4000776c:	31800003 	ldbu	r6,0(r6)
40007770:	28cb883a 	add	r5,r5,r3
40007774:	29800005 	stb	r6,0(r5)

void Intra_Chroma_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(-1,y);
40007778:	11400517 	ldw	r5,20(r2)
4000777c:	11800817 	ldw	r6,32(r2)
40007780:	394b383a 	mul	r5,r7,r5
40007784:	314b883a 	add	r5,r6,r5
40007788:	290d883a 	add	r6,r5,r4
4000778c:	31800003 	ldbu	r6,0(r6)
40007790:	2b8b883a 	add	r5,r5,r14
40007794:	29800005 	stb	r6,0(r5)
      b(x,y)=b(-1,y);
40007798:	11400517 	ldw	r5,20(r2)
4000779c:	11800717 	ldw	r6,28(r2)
400077a0:	394b383a 	mul	r5,r7,r5
400077a4:	314b883a 	add	r5,r6,r5
400077a8:	290d883a 	add	r6,r5,r4
400077ac:	31800003 	ldbu	r6,0(r6)
400077b0:	2b8b883a 	add	r5,r5,r14
400077b4:	29800005 	stb	r6,0(r5)

void Intra_Chroma_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(-1,y);
400077b8:	11400517 	ldw	r5,20(r2)
400077bc:	11800817 	ldw	r6,32(r2)
400077c0:	394b383a 	mul	r5,r7,r5
400077c4:	314b883a 	add	r5,r6,r5
400077c8:	290d883a 	add	r6,r5,r4
400077cc:	31800003 	ldbu	r6,0(r6)
400077d0:	2b4b883a 	add	r5,r5,r13
400077d4:	29800005 	stb	r6,0(r5)
      b(x,y)=b(-1,y);
400077d8:	11400517 	ldw	r5,20(r2)
400077dc:	11800717 	ldw	r6,28(r2)
400077e0:	394b383a 	mul	r5,r7,r5
400077e4:	314b883a 	add	r5,r6,r5
400077e8:	290d883a 	add	r6,r5,r4
400077ec:	31800003 	ldbu	r6,0(r6)
400077f0:	2b4b883a 	add	r5,r5,r13
400077f4:	29800005 	stb	r6,0(r5)

void Intra_Chroma_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(-1,y);
400077f8:	11400517 	ldw	r5,20(r2)
400077fc:	11800817 	ldw	r6,32(r2)
40007800:	394b383a 	mul	r5,r7,r5
40007804:	314b883a 	add	r5,r6,r5
40007808:	290d883a 	add	r6,r5,r4
4000780c:	31800003 	ldbu	r6,0(r6)
40007810:	2b0b883a 	add	r5,r5,r12
40007814:	29800005 	stb	r6,0(r5)
      b(x,y)=b(-1,y);
40007818:	11400517 	ldw	r5,20(r2)
4000781c:	11800717 	ldw	r6,28(r2)
40007820:	394b383a 	mul	r5,r7,r5
40007824:	314b883a 	add	r5,r6,r5
40007828:	290d883a 	add	r6,r5,r4
4000782c:	31800003 	ldbu	r6,0(r6)
40007830:	2b0b883a 	add	r5,r5,r12
40007834:	29800005 	stb	r6,0(r5)

void Intra_Chroma_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(-1,y);
40007838:	11800817 	ldw	r6,32(r2)
4000783c:	11400517 	ldw	r5,20(r2)
40007840:	394b383a 	mul	r5,r7,r5
40007844:	314b883a 	add	r5,r6,r5
40007848:	290d883a 	add	r6,r5,r4
4000784c:	31800003 	ldbu	r6,0(r6)
40007850:	2acb883a 	add	r5,r5,r11
40007854:	29800005 	stb	r6,0(r5)
      b(x,y)=b(-1,y);
40007858:	11400517 	ldw	r5,20(r2)
4000785c:	11800717 	ldw	r6,28(r2)
40007860:	394b383a 	mul	r5,r7,r5
40007864:	314b883a 	add	r5,r6,r5
40007868:	290d883a 	add	r6,r5,r4
4000786c:	31800003 	ldbu	r6,0(r6)
40007870:	2acb883a 	add	r5,r5,r11
40007874:	29800005 	stb	r6,0(r5)

void Intra_Chroma_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(-1,y);
40007878:	11400517 	ldw	r5,20(r2)
4000787c:	11800817 	ldw	r6,32(r2)
40007880:	394b383a 	mul	r5,r7,r5
40007884:	314b883a 	add	r5,r6,r5
40007888:	290d883a 	add	r6,r5,r4
4000788c:	31800003 	ldbu	r6,0(r6)
40007890:	2a8b883a 	add	r5,r5,r10
40007894:	29800005 	stb	r6,0(r5)
      b(x,y)=b(-1,y);
40007898:	11400517 	ldw	r5,20(r2)
4000789c:	11800717 	ldw	r6,28(r2)
400078a0:	394b383a 	mul	r5,r7,r5
400078a4:	314b883a 	add	r5,r6,r5
400078a8:	290d883a 	add	r6,r5,r4
400078ac:	31800003 	ldbu	r6,0(r6)
400078b0:	2a8b883a 	add	r5,r5,r10
400078b4:	29800005 	stb	r6,0(r5)

void Intra_Chroma_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(-1,y);
400078b8:	11400517 	ldw	r5,20(r2)
400078bc:	11800817 	ldw	r6,32(r2)
400078c0:	394b383a 	mul	r5,r7,r5
400078c4:	314b883a 	add	r5,r6,r5
400078c8:	290d883a 	add	r6,r5,r4
400078cc:	31800003 	ldbu	r6,0(r6)
400078d0:	2a4b883a 	add	r5,r5,r9
400078d4:	29800005 	stb	r6,0(r5)
      b(x,y)=b(-1,y);
400078d8:	11400517 	ldw	r5,20(r2)
400078dc:	11800717 	ldw	r6,28(r2)
400078e0:	394b383a 	mul	r5,r7,r5
400078e4:	314b883a 	add	r5,r6,r5
400078e8:	290d883a 	add	r6,r5,r4
400078ec:	31800003 	ldbu	r6,0(r6)
400078f0:	2a4b883a 	add	r5,r5,r9
400078f4:	29800005 	stb	r6,0(r5)

void Intra_Chroma_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(-1,y);
400078f8:	11400517 	ldw	r5,20(r2)
400078fc:	11800817 	ldw	r6,32(r2)
40007900:	394b383a 	mul	r5,r7,r5
40007904:	314b883a 	add	r5,r6,r5
40007908:	290d883a 	add	r6,r5,r4
4000790c:	31800003 	ldbu	r6,0(r6)
40007910:	2a0b883a 	add	r5,r5,r8
40007914:	29800005 	stb	r6,0(r5)
      b(x,y)=b(-1,y);
40007918:	11400517 	ldw	r5,20(r2)
4000791c:	11800717 	ldw	r6,28(r2)
40007920:	394b383a 	mul	r5,r7,r5
40007924:	39c00044 	addi	r7,r7,1
40007928:	314b883a 	add	r5,r6,r5
4000792c:	290d883a 	add	r6,r5,r4
40007930:	31800003 	ldbu	r6,0(r6)
40007934:	2a0b883a 	add	r5,r5,r8
40007938:	29800005 	stb	r6,0(r5)
  }
}

void Intra_Chroma_Horizontal(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
4000793c:	79ff7e1e 	bne	r15,r7,40007738 <__alt_data_end+0xc0007738>
            case 2: Intra_Chroma_Vertical(f,x,y); break;
            case 3: Intra_Chroma_Plane(f,x,y); break;
            default: printf("unsupported IntraChromaPredMode %d at %d,%d!\n",mode,x<<1,y<<1);
        }
	}
}
40007940:	dfc00e17 	ldw	ra,56(sp)
40007944:	df000d17 	ldw	fp,52(sp)
40007948:	ddc00c17 	ldw	r23,48(sp)
4000794c:	dd800b17 	ldw	r22,44(sp)
40007950:	dd400a17 	ldw	r21,40(sp)
40007954:	dd000917 	ldw	r20,36(sp)
40007958:	dcc00817 	ldw	r19,32(sp)
4000795c:	dc800717 	ldw	r18,28(sp)
40007960:	dc400617 	ldw	r17,24(sp)
40007964:	dc000517 	ldw	r16,20(sp)
40007968:	dec00f04 	addi	sp,sp,60
4000796c:	f800283a 	ret
40007970:	3809883a 	mov	r4,r7
40007974:	1b800044 	addi	r14,r3,1
40007978:	39ffffc4 	addi	r7,r7,-1
4000797c:	1b400084 	addi	r13,r3,2
40007980:	1b0000c4 	addi	r12,r3,3
40007984:	1ac00104 	addi	r11,r3,4
40007988:	1a800144 	addi	r10,r3,5
4000798c:	1a400184 	addi	r9,r3,6
40007990:	1a0001c4 	addi	r8,r3,7
40007994:	23c00204 	addi	r15,r4,8

void Intra_Chroma_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(x,-1);
40007998:	11400517 	ldw	r5,20(r2)
4000799c:	11800817 	ldw	r6,32(r2)
400079a0:	29e1383a 	mul	r16,r5,r7
400079a4:	30cd883a 	add	r6,r6,r3
400079a8:	214b383a 	mul	r5,r4,r5
400079ac:	3421883a 	add	r16,r6,r16
400079b0:	84000003 	ldbu	r16,0(r16)
400079b4:	314b883a 	add	r5,r6,r5
400079b8:	2c000005 	stb	r16,0(r5)
      b(x,y)=b(x,-1);
400079bc:	11400517 	ldw	r5,20(r2)
400079c0:	11800717 	ldw	r6,28(r2)
400079c4:	29e1383a 	mul	r16,r5,r7
400079c8:	30cd883a 	add	r6,r6,r3
400079cc:	214b383a 	mul	r5,r4,r5
400079d0:	3421883a 	add	r16,r6,r16
400079d4:	84000003 	ldbu	r16,0(r16)
400079d8:	314b883a 	add	r5,r6,r5
400079dc:	2c000005 	stb	r16,0(r5)

void Intra_Chroma_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(x,-1);
400079e0:	11400517 	ldw	r5,20(r2)
400079e4:	11800817 	ldw	r6,32(r2)
400079e8:	29e1383a 	mul	r16,r5,r7
400079ec:	338d883a 	add	r6,r6,r14
400079f0:	214b383a 	mul	r5,r4,r5
400079f4:	3421883a 	add	r16,r6,r16
400079f8:	84000003 	ldbu	r16,0(r16)
400079fc:	314b883a 	add	r5,r6,r5
40007a00:	2c000005 	stb	r16,0(r5)
      b(x,y)=b(x,-1);
40007a04:	11400517 	ldw	r5,20(r2)
40007a08:	11800717 	ldw	r6,28(r2)
40007a0c:	29e1383a 	mul	r16,r5,r7
40007a10:	338d883a 	add	r6,r6,r14
40007a14:	214b383a 	mul	r5,r4,r5
40007a18:	3421883a 	add	r16,r6,r16
40007a1c:	84000003 	ldbu	r16,0(r16)
40007a20:	314b883a 	add	r5,r6,r5
40007a24:	2c000005 	stb	r16,0(r5)

void Intra_Chroma_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(x,-1);
40007a28:	11400517 	ldw	r5,20(r2)
40007a2c:	11800817 	ldw	r6,32(r2)
40007a30:	29e1383a 	mul	r16,r5,r7
40007a34:	334d883a 	add	r6,r6,r13
40007a38:	214b383a 	mul	r5,r4,r5
40007a3c:	3421883a 	add	r16,r6,r16
40007a40:	84000003 	ldbu	r16,0(r16)
40007a44:	314b883a 	add	r5,r6,r5
40007a48:	2c000005 	stb	r16,0(r5)
      b(x,y)=b(x,-1);
40007a4c:	11400517 	ldw	r5,20(r2)
40007a50:	11800717 	ldw	r6,28(r2)
40007a54:	29e1383a 	mul	r16,r5,r7
40007a58:	334d883a 	add	r6,r6,r13
40007a5c:	214b383a 	mul	r5,r4,r5
40007a60:	3421883a 	add	r16,r6,r16
40007a64:	84000003 	ldbu	r16,0(r16)
40007a68:	314b883a 	add	r5,r6,r5
40007a6c:	2c000005 	stb	r16,0(r5)

void Intra_Chroma_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(x,-1);
40007a70:	11400517 	ldw	r5,20(r2)
40007a74:	11800817 	ldw	r6,32(r2)
40007a78:	29e1383a 	mul	r16,r5,r7
40007a7c:	330d883a 	add	r6,r6,r12
40007a80:	214b383a 	mul	r5,r4,r5
40007a84:	3421883a 	add	r16,r6,r16
40007a88:	84000003 	ldbu	r16,0(r16)
40007a8c:	314b883a 	add	r5,r6,r5
40007a90:	2c000005 	stb	r16,0(r5)
      b(x,y)=b(x,-1);
40007a94:	11400517 	ldw	r5,20(r2)
40007a98:	11800717 	ldw	r6,28(r2)
40007a9c:	29e1383a 	mul	r16,r5,r7
40007aa0:	330d883a 	add	r6,r6,r12
40007aa4:	214b383a 	mul	r5,r4,r5
40007aa8:	3421883a 	add	r16,r6,r16
40007aac:	84000003 	ldbu	r16,0(r16)
40007ab0:	314b883a 	add	r5,r6,r5
40007ab4:	2c000005 	stb	r16,0(r5)

void Intra_Chroma_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(x,-1);
40007ab8:	11800817 	ldw	r6,32(r2)
40007abc:	11400517 	ldw	r5,20(r2)
40007ac0:	32cd883a 	add	r6,r6,r11
40007ac4:	29e1383a 	mul	r16,r5,r7
40007ac8:	214b383a 	mul	r5,r4,r5
40007acc:	3421883a 	add	r16,r6,r16
40007ad0:	84000003 	ldbu	r16,0(r16)
40007ad4:	314b883a 	add	r5,r6,r5
40007ad8:	2c000005 	stb	r16,0(r5)
      b(x,y)=b(x,-1);
40007adc:	11400517 	ldw	r5,20(r2)
40007ae0:	11800717 	ldw	r6,28(r2)
40007ae4:	29e1383a 	mul	r16,r5,r7
40007ae8:	32cd883a 	add	r6,r6,r11
40007aec:	214b383a 	mul	r5,r4,r5
40007af0:	3421883a 	add	r16,r6,r16
40007af4:	84000003 	ldbu	r16,0(r16)
40007af8:	314b883a 	add	r5,r6,r5
40007afc:	2c000005 	stb	r16,0(r5)

void Intra_Chroma_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(x,-1);
40007b00:	11400517 	ldw	r5,20(r2)
40007b04:	11800817 	ldw	r6,32(r2)
40007b08:	29e1383a 	mul	r16,r5,r7
40007b0c:	328d883a 	add	r6,r6,r10
40007b10:	214b383a 	mul	r5,r4,r5
40007b14:	3421883a 	add	r16,r6,r16
40007b18:	84000003 	ldbu	r16,0(r16)
40007b1c:	314b883a 	add	r5,r6,r5
40007b20:	2c000005 	stb	r16,0(r5)
      b(x,y)=b(x,-1);
40007b24:	11400517 	ldw	r5,20(r2)
40007b28:	11800717 	ldw	r6,28(r2)
40007b2c:	29e1383a 	mul	r16,r5,r7
40007b30:	328d883a 	add	r6,r6,r10
40007b34:	214b383a 	mul	r5,r4,r5
40007b38:	3421883a 	add	r16,r6,r16
40007b3c:	84000003 	ldbu	r16,0(r16)
40007b40:	314b883a 	add	r5,r6,r5
40007b44:	2c000005 	stb	r16,0(r5)

void Intra_Chroma_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(x,-1);
40007b48:	11400517 	ldw	r5,20(r2)
40007b4c:	11800817 	ldw	r6,32(r2)
40007b50:	29e1383a 	mul	r16,r5,r7
40007b54:	324d883a 	add	r6,r6,r9
40007b58:	214b383a 	mul	r5,r4,r5
40007b5c:	3421883a 	add	r16,r6,r16
40007b60:	84000003 	ldbu	r16,0(r16)
40007b64:	314b883a 	add	r5,r6,r5
40007b68:	2c000005 	stb	r16,0(r5)
      b(x,y)=b(x,-1);
40007b6c:	11400517 	ldw	r5,20(r2)
40007b70:	11800717 	ldw	r6,28(r2)
40007b74:	29e1383a 	mul	r16,r5,r7
40007b78:	324d883a 	add	r6,r6,r9
40007b7c:	214b383a 	mul	r5,r4,r5
40007b80:	3421883a 	add	r16,r6,r16
40007b84:	84000003 	ldbu	r16,0(r16)
40007b88:	314b883a 	add	r5,r6,r5
40007b8c:	2c000005 	stb	r16,0(r5)

void Intra_Chroma_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
    for(x=0; x<8; ++x) {
      r(x,y)=r(x,-1);
40007b90:	11400517 	ldw	r5,20(r2)
40007b94:	11800817 	ldw	r6,32(r2)
40007b98:	29e1383a 	mul	r16,r5,r7
40007b9c:	320d883a 	add	r6,r6,r8
40007ba0:	214b383a 	mul	r5,r4,r5
40007ba4:	3421883a 	add	r16,r6,r16
40007ba8:	84000003 	ldbu	r16,0(r16)
40007bac:	314b883a 	add	r5,r6,r5
40007bb0:	2c000005 	stb	r16,0(r5)
      b(x,y)=b(x,-1);
40007bb4:	11400517 	ldw	r5,20(r2)
40007bb8:	11800717 	ldw	r6,28(r2)
40007bbc:	29e1383a 	mul	r16,r5,r7
40007bc0:	320d883a 	add	r6,r6,r8
40007bc4:	214b383a 	mul	r5,r4,r5
40007bc8:	3421883a 	add	r16,r6,r16
40007bcc:	84000003 	ldbu	r16,0(r16)
40007bd0:	314b883a 	add	r5,r6,r5
40007bd4:	21000044 	addi	r4,r4,1
40007bd8:	2c000005 	stb	r16,0(r5)
    }
}

void Intra_Chroma_Vertical(frame *f, int bx, int by) {
  int x,y;
  for(y=0; y<8; ++y)
40007bdc:	793f6e1e 	bne	r15,r4,40007998 <__alt_data_end+0xc0007998>
40007be0:	003f5706 	br	40007940 <__alt_data_end+0xc0007940>
			case 16: Intra_16x16_Dispatch(f, x_avail, y_avail, mode, x, y); break;
			default: printf("bad intra prediction size (%d)!\n", size);
		}
	}
	else{
        switch(mode) {
40007be4:	40005d1e 	bne	r8,zero,40007d5c <software_intra+0x7bc>
  int i;
  int left=1, top=1;
  int l0r=512,l0b=512,l4r=512,l4b=512;
  int t0r=512,t0b=512,t4r=512,t4b=512;

  if(!x_avail) left=0;
40007be8:	58006d1e 	bne	r11,zero,40007da0 <software_intra+0x800>
  if(left) {
    l0r=ICDCsumL(r,0); l0b=ICDCsumL(b,0);
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
40007bec:	30012d1e 	bne	r6,zero,400080a4 <software_intra+0xb04>
40007bf0:	3a000104 	addi	r8,r7,4
40007bf4:	3813883a 	mov	r9,r7
  if(top) {
    if(left)    ICDCfill(0,0,(l0r+t0r+4)>>3,(l0b+t0b+4)>>3);
        else    ICDCfill(0,0,(t0r+2)>>2,(t0b+2)>>2);
  } else {
    if(left)    ICDCfill(0,0,(l0r+2)>>2,(l0b+2)>>2);
        else    ICDCfill(0,0,128,128);
40007bf8:	01bfe004 	movi	r6,-128
40007bfc:	11000517 	ldw	r4,20(r2)
40007c00:	11400817 	ldw	r5,32(r2)
40007c04:	4909383a 	mul	r4,r9,r4
40007c08:	20c9883a 	add	r4,r4,r3
40007c0c:	2909883a 	add	r4,r5,r4
40007c10:	21800005 	stb	r6,0(r4)
40007c14:	21800045 	stb	r6,1(r4)
40007c18:	21800085 	stb	r6,2(r4)
40007c1c:	218000c5 	stb	r6,3(r4)
40007c20:	11000517 	ldw	r4,20(r2)
40007c24:	11400717 	ldw	r5,28(r2)
40007c28:	4909383a 	mul	r4,r9,r4
40007c2c:	4a400044 	addi	r9,r9,1
40007c30:	20c9883a 	add	r4,r4,r3
40007c34:	2909883a 	add	r4,r5,r4
40007c38:	21800005 	stb	r6,0(r4)
40007c3c:	21800045 	stb	r6,1(r4)
40007c40:	21800085 	stb	r6,2(r4)
40007c44:	218000c5 	stb	r6,3(r4)
40007c48:	427fec1e 	bne	r8,r9,40007bfc <__alt_data_end+0xc0007bfc>
40007c4c:	19800104 	addi	r6,r3,4
40007c50:	3815883a 	mov	r10,r7
  }

       if(top)  ICDCfill(4,0,(t4r+2)>>2,(t4b+2)>>2);
  else if(left) ICDCfill(4,0,(l0r+2)>>2,(l0b+2)>>2);
  else          ICDCfill(4,0,128,128);
40007c54:	027fe004 	movi	r9,-128
40007c58:	11000517 	ldw	r4,20(r2)
40007c5c:	11400817 	ldw	r5,32(r2)
40007c60:	5109383a 	mul	r4,r10,r4
40007c64:	2189883a 	add	r4,r4,r6
40007c68:	2909883a 	add	r4,r5,r4
40007c6c:	22400005 	stb	r9,0(r4)
40007c70:	22400045 	stb	r9,1(r4)
40007c74:	22400085 	stb	r9,2(r4)
40007c78:	224000c5 	stb	r9,3(r4)
40007c7c:	11000517 	ldw	r4,20(r2)
40007c80:	11400717 	ldw	r5,28(r2)
40007c84:	5109383a 	mul	r4,r10,r4
40007c88:	52800044 	addi	r10,r10,1
40007c8c:	2189883a 	add	r4,r4,r6
40007c90:	2909883a 	add	r4,r5,r4
40007c94:	22400005 	stb	r9,0(r4)
40007c98:	22400045 	stb	r9,1(r4)
40007c9c:	22400085 	stb	r9,2(r4)
40007ca0:	224000c5 	stb	r9,3(r4)
40007ca4:	42bfec1e 	bne	r8,r10,40007c58 <__alt_data_end+0xc0007c58>
40007ca8:	4015883a 	mov	r10,r8
40007cac:	39c00204 	addi	r7,r7,8

       if(left) ICDCfill(0,4,(l4r+2)>>2,(l4b+2)>>2);
  else if(top)  ICDCfill(0,4,(t0r+2)>>2,(t0b+2)>>2);
  else          ICDCfill(0,4,128,128);
40007cb0:	027fe004 	movi	r9,-128
40007cb4:	11000517 	ldw	r4,20(r2)
40007cb8:	11400817 	ldw	r5,32(r2)
40007cbc:	5109383a 	mul	r4,r10,r4
40007cc0:	20c9883a 	add	r4,r4,r3
40007cc4:	2909883a 	add	r4,r5,r4
40007cc8:	22400005 	stb	r9,0(r4)
40007ccc:	22400045 	stb	r9,1(r4)
40007cd0:	22400085 	stb	r9,2(r4)
40007cd4:	224000c5 	stb	r9,3(r4)
40007cd8:	11000517 	ldw	r4,20(r2)
40007cdc:	11400717 	ldw	r5,28(r2)
40007ce0:	5109383a 	mul	r4,r10,r4
40007ce4:	52800044 	addi	r10,r10,1
40007ce8:	20c9883a 	add	r4,r4,r3
40007cec:	2909883a 	add	r4,r5,r4
40007cf0:	22400005 	stb	r9,0(r4)
40007cf4:	22400045 	stb	r9,1(r4)
40007cf8:	22400085 	stb	r9,2(r4)
40007cfc:	224000c5 	stb	r9,3(r4)
40007d00:	3abfec1e 	bne	r7,r10,40007cb4 <__alt_data_end+0xc0007cb4>
  if(top) {
    if(left)    ICDCfill(4,4,(l4r+t4r+4)>>3,(l4b+t4b+4)>>3);
        else    ICDCfill(4,4,(t4r+2)>>2,(t4b+2)>>2);
  } else {
    if(left)    ICDCfill(4,4,(l4r+2)>>2,(l4b+2)>>2);
        else    ICDCfill(4,4,128,128);
40007d04:	017fe004 	movi	r5,-128
40007d08:	10c00517 	ldw	r3,20(r2)
40007d0c:	11000817 	ldw	r4,32(r2)
40007d10:	40c7383a 	mul	r3,r8,r3
40007d14:	1987883a 	add	r3,r3,r6
40007d18:	20c7883a 	add	r3,r4,r3
40007d1c:	19400005 	stb	r5,0(r3)
40007d20:	19400045 	stb	r5,1(r3)
40007d24:	19400085 	stb	r5,2(r3)
40007d28:	194000c5 	stb	r5,3(r3)
40007d2c:	10c00517 	ldw	r3,20(r2)
40007d30:	11000717 	ldw	r4,28(r2)
40007d34:	40c7383a 	mul	r3,r8,r3
40007d38:	42000044 	addi	r8,r8,1
40007d3c:	1987883a 	add	r3,r3,r6
40007d40:	20c7883a 	add	r3,r4,r3
40007d44:	19400005 	stb	r5,0(r3)
40007d48:	19400045 	stb	r5,1(r3)
40007d4c:	19400085 	stb	r5,2(r3)
40007d50:	194000c5 	stb	r5,3(r3)
40007d54:	3a3fec1e 	bne	r7,r8,40007d08 <__alt_data_end+0xc0007d08>
40007d58:	003ef906 	br	40007940 <__alt_data_end+0xc0007940>
        switch(mode) {
            case 0: Intra_Chroma_DC(f, x_avail, y_avail, x, y); break;
            case 1: Intra_Chroma_Horizontal(f,x,y); break;
            case 2: Intra_Chroma_Vertical(f,x,y); break;
            case 3: Intra_Chroma_Plane(f,x,y); break;
            default: printf("unsupported IntraChromaPredMode %d at %d,%d!\n",mode,x<<1,y<<1);
40007d5c:	011000b4 	movhi	r4,16386
40007d60:	2129c504 	addi	r4,r4,-22764
40007d64:	39cf883a 	add	r7,r7,r7
40007d68:	18cd883a 	add	r6,r3,r3
40007d6c:	400b883a 	mov	r5,r8
        }
	}
}
40007d70:	dfc00e17 	ldw	ra,56(sp)
40007d74:	df000d17 	ldw	fp,52(sp)
40007d78:	ddc00c17 	ldw	r23,48(sp)
40007d7c:	dd800b17 	ldw	r22,44(sp)
40007d80:	dd400a17 	ldw	r21,40(sp)
40007d84:	dd000917 	ldw	r20,36(sp)
40007d88:	dcc00817 	ldw	r19,32(sp)
40007d8c:	dc800717 	ldw	r18,28(sp)
40007d90:	dc400617 	ldw	r17,24(sp)
40007d94:	dc000517 	ldw	r16,20(sp)
40007d98:	dec00f04 	addi	sp,sp,60
        switch(mode) {
            case 0: Intra_Chroma_DC(f, x_avail, y_avail, x, y); break;
            case 1: Intra_Chroma_Horizontal(f,x,y); break;
            case 2: Intra_Chroma_Vertical(f,x,y); break;
            case 3: Intra_Chroma_Plane(f,x,y); break;
            default: printf("unsupported IntraChromaPredMode %d at %d,%d!\n",mode,x<<1,y<<1);
40007d9c:	000ef681 	jmpi	4000ef68 <printf>
  int l0r=512,l0b=512,l4r=512,l4b=512;
  int t0r=512,t0b=512,t4r=512,t4b=512;

  if(!x_avail) left=0;
  if(left) {
    l0r=ICDCsumL(r,0); l0b=ICDCsumL(b,0);
40007da0:	21000517 	ldw	r4,20(r4)
40007da4:	12400817 	ldw	r9,32(r2)
40007da8:	1a3fffc4 	addi	r8,r3,-1
40007dac:	3925383a 	mul	r18,r7,r4
40007db0:	12c00717 	ldw	r11,28(r2)
40007db4:	24a1883a 	add	r16,r4,r18
40007db8:	242d883a 	add	r22,r4,r16
40007dbc:	2599883a 	add	r12,r4,r22
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
40007dc0:	231b883a 	add	r13,r4,r12
40007dc4:	235d883a 	add	r14,r4,r13
  int l0r=512,l0b=512,l4r=512,l4b=512;
  int t0r=512,t0b=512,t4r=512,t4b=512;

  if(!x_avail) left=0;
  if(left) {
    l0r=ICDCsumL(r,0); l0b=ICDCsumL(b,0);
40007dc8:	9225883a 	add	r18,r18,r8
40007dcc:	4421883a 	add	r16,r8,r16
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
40007dd0:	439f883a 	add	r15,r8,r14
40007dd4:	435b883a 	add	r13,r8,r13
40007dd8:	239d883a 	add	r14,r4,r14
  int l0r=512,l0b=512,l4r=512,l4b=512;
  int t0r=512,t0b=512,t4r=512,t4b=512;

  if(!x_avail) left=0;
  if(left) {
    l0r=ICDCsumL(r,0); l0b=ICDCsumL(b,0);
40007ddc:	45ad883a 	add	r22,r8,r22
40007de0:	4caf883a 	add	r23,r9,r18
40007de4:	4c27883a 	add	r19,r9,r16
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
40007de8:	4395883a 	add	r10,r8,r14
  int l0r=512,l0b=512,l4r=512,l4b=512;
  int t0r=512,t0b=512,t4r=512,t4b=512;

  if(!x_avail) left=0;
  if(left) {
    l0r=ICDCsumL(r,0); l0b=ICDCsumL(b,0);
40007dec:	4319883a 	add	r12,r8,r12
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
40007df0:	4b6b883a 	add	r21,r9,r13
40007df4:	23a3883a 	add	r17,r4,r14
  int l0r=512,l0b=512,l4r=512,l4b=512;
  int t0r=512,t0b=512,t4r=512,t4b=512;

  if(!x_avail) left=0;
  if(left) {
    l0r=ICDCsumL(r,0); l0b=ICDCsumL(b,0);
40007df8:	bfc00003 	ldbu	ra,0(r23)
40007dfc:	4d9d883a 	add	r14,r9,r22
40007e00:	9cc00003 	ldbu	r19,0(r19)
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
40007e04:	4be9883a 	add	r20,r9,r15
  int l0r=512,l0b=512,l4r=512,l4b=512;
  int t0r=512,t0b=512,t4r=512,t4b=512;

  if(!x_avail) left=0;
  if(left) {
    l0r=ICDCsumL(r,0); l0b=ICDCsumL(b,0);
40007e08:	5ca5883a 	add	r18,r11,r18
40007e0c:	5c21883a 	add	r16,r11,r16
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
40007e10:	5b5b883a 	add	r13,r11,r13
40007e14:	adc00003 	ldbu	r23,0(r21)
40007e18:	5bdf883a 	add	r15,r11,r15
  int l0r=512,l0b=512,l4r=512,l4b=512;
  int t0r=512,t0b=512,t4r=512,t4b=512;

  if(!x_avail) left=0;
  if(left) {
    l0r=ICDCsumL(r,0); l0b=ICDCsumL(b,0);
40007e1c:	4b2b883a 	add	r21,r9,r12
40007e20:	73800003 	ldbu	r14,0(r14)
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
40007e24:	8a23883a 	add	r17,r17,r8
  int l0r=512,l0b=512,l4r=512,l4b=512;
  int t0r=512,t0b=512,t4r=512,t4b=512;

  if(!x_avail) left=0;
  if(left) {
    l0r=ICDCsumL(r,0); l0b=ICDCsumL(b,0);
40007e28:	97000003 	ldbu	fp,0(r18)
40007e2c:	5d91883a 	add	r8,r11,r22
40007e30:	84800003 	ldbu	r18,0(r16)
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
40007e34:	6d800003 	ldbu	r22,0(r13)
40007e38:	a4000003 	ldbu	r16,0(r20)
40007e3c:	7bc00003 	ldbu	r15,0(r15)
40007e40:	4aa9883a 	add	r20,r9,r10
  int l0r=512,l0b=512,l4r=512,l4b=512;
  int t0r=512,t0b=512,t4r=512,t4b=512;

  if(!x_avail) left=0;
  if(left) {
    l0r=ICDCsumL(r,0); l0b=ICDCsumL(b,0);
40007e44:	ad400003 	ldbu	r21,0(r21)
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
40007e48:	5a95883a 	add	r10,r11,r10
  int l0r=512,l0b=512,l4r=512,l4b=512;
  int t0r=512,t0b=512,t4r=512,t4b=512;

  if(!x_avail) left=0;
  if(left) {
    l0r=ICDCsumL(r,0); l0b=ICDCsumL(b,0);
40007e4c:	43400003 	ldbu	r13,0(r8)
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
40007e50:	52800003 	ldbu	r10,0(r10)
  int l0r=512,l0b=512,l4r=512,l4b=512;
  int t0r=512,t0b=512,t4r=512,t4b=512;

  if(!x_avail) left=0;
  if(left) {
    l0r=ICDCsumL(r,0); l0b=ICDCsumL(b,0);
40007e54:	5b11883a 	add	r8,r11,r12
40007e58:	fce7883a 	add	r19,ra,r19
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
40007e5c:	a3000003 	ldbu	r12,0(r20)
40007e60:	4c69883a 	add	r20,r9,r17
40007e64:	5c63883a 	add	r17,r11,r17
  int l0r=512,l0b=512,l4r=512,l4b=512;
  int t0r=512,t0b=512,t4r=512,t4b=512;

  if(!x_avail) left=0;
  if(left) {
    l0r=ICDCsumL(r,0); l0b=ICDCsumL(b,0);
40007e68:	42000003 	ldbu	r8,0(r8)
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
40007e6c:	a5000003 	ldbu	r20,0(r20)
40007e70:	8c400003 	ldbu	r17,0(r17)
  int l0r=512,l0b=512,l4r=512,l4b=512;
  int t0r=512,t0b=512,t4r=512,t4b=512;

  if(!x_avail) left=0;
  if(left) {
    l0r=ICDCsumL(r,0); l0b=ICDCsumL(b,0);
40007e74:	9b9d883a 	add	r14,r19,r14
40007e78:	e4a5883a 	add	r18,fp,r18
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
40007e7c:	bc21883a 	add	r16,r23,r16
40007e80:	b3df883a 	add	r15,r22,r15
  int l0r=512,l0b=512,l4r=512,l4b=512;
  int t0r=512,t0b=512,t4r=512,t4b=512;

  if(!x_avail) left=0;
  if(left) {
    l0r=ICDCsumL(r,0); l0b=ICDCsumL(b,0);
40007e84:	756b883a 	add	r21,r14,r21
40007e88:	935b883a 	add	r13,r18,r13
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
40007e8c:	8319883a 	add	r12,r16,r12
40007e90:	7a95883a 	add	r10,r15,r10
  int l0r=512,l0b=512,l4r=512,l4b=512;
  int t0r=512,t0b=512,t4r=512,t4b=512;

  if(!x_avail) left=0;
  if(left) {
    l0r=ICDCsumL(r,0); l0b=ICDCsumL(b,0);
40007e94:	dd400015 	stw	r21,0(sp)
40007e98:	6a11883a 	add	r8,r13,r8
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
40007e9c:	6529883a 	add	r20,r12,r20
40007ea0:	5463883a 	add	r17,r10,r17
  }

  if(!y_avail) top=0;
40007ea4:	30008826 	beq	r6,zero,400080c8 <software_intra+0xb28>
  if(top) {
    t0r=ICDCsumT(r,0); t0b=ICDCsumT(b,0);
40007ea8:	39bfffc4 	addi	r6,r7,-1
40007eac:	310d383a 	mul	r6,r6,r4
    t4r=ICDCsumT(r,4); t4b=ICDCsumT(b,4);
40007eb0:	1fc00144 	addi	ra,r3,5
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
  if(top) {
    t0r=ICDCsumT(r,0); t0b=ICDCsumT(b,0);
40007eb4:	1c000044 	addi	r16,r3,1
    t4r=ICDCsumT(r,4); t4b=ICDCsumT(b,4);
40007eb8:	f9bf883a 	add	ra,ra,r6
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
  if(top) {
    t0r=ICDCsumT(r,0); t0b=ICDCsumT(b,0);
40007ebc:	19a7883a 	add	r19,r3,r6
40007ec0:	81a1883a 	add	r16,r16,r6
    t4r=ICDCsumT(r,4); t4b=ICDCsumT(b,4);
40007ec4:	4feb883a 	add	r21,r9,ra
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
  if(top) {
    t0r=ICDCsumT(r,0); t0b=ICDCsumT(b,0);
40007ec8:	4cf9883a 	add	fp,r9,r19
40007ecc:	4c2f883a 	add	r23,r9,r16
40007ed0:	5ce7883a 	add	r19,r11,r19
40007ed4:	5c21883a 	add	r16,r11,r16
    t4r=ICDCsumT(r,4); t4b=ICDCsumT(b,4);
40007ed8:	ad400003 	ldbu	r21,0(r21)
40007edc:	1a800104 	addi	r10,r3,4
40007ee0:	32a5883a 	add	r18,r6,r10
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
  if(top) {
    t0r=ICDCsumT(r,0); t0b=ICDCsumT(b,0);
40007ee4:	9cc00003 	ldbu	r19,0(r19)
40007ee8:	1bc00084 	addi	r15,r3,2
40007eec:	84000003 	ldbu	r16,0(r16)
40007ef0:	799f883a 	add	r15,r15,r6
    t4r=ICDCsumT(r,4); t4b=ICDCsumT(b,4);
40007ef4:	1b0001c4 	addi	r12,r3,7
40007ef8:	4cad883a 	add	r22,r9,r18
40007efc:	5fff883a 	add	ra,r11,ra
40007f00:	5ca5883a 	add	r18,r11,r18
40007f04:	1b800184 	addi	r14,r3,6
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
  if(top) {
    t0r=ICDCsumT(r,0); t0b=ICDCsumT(b,0);
40007f08:	1b4000c4 	addi	r13,r3,3
    t4r=ICDCsumT(r,4); t4b=ICDCsumT(b,4);
40007f0c:	719d883a 	add	r14,r14,r6
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
  if(top) {
    t0r=ICDCsumT(r,0); t0b=ICDCsumT(b,0);
40007f10:	699b883a 	add	r13,r13,r6
    t4r=ICDCsumT(r,4); t4b=ICDCsumT(b,4);
40007f14:	dd400215 	stw	r21,8(sp)
40007f18:	618d883a 	add	r6,r12,r6
40007f1c:	94800003 	ldbu	r18,0(r18)
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
  if(top) {
    t0r=ICDCsumT(r,0); t0b=ICDCsumT(b,0);
40007f20:	4bd9883a 	add	r12,r9,r15
    t4r=ICDCsumT(r,4); t4b=ICDCsumT(b,4);
40007f24:	ffc00003 	ldbu	ra,0(ra)
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
  if(top) {
    t0r=ICDCsumT(r,0); t0b=ICDCsumT(b,0);
40007f28:	63000003 	ldbu	r12,0(r12)
40007f2c:	9c21883a 	add	r16,r19,r16
    t4r=ICDCsumT(r,4); t4b=ICDCsumT(b,4);
40007f30:	b5800003 	ldbu	r22,0(r22)
40007f34:	dcc00217 	ldw	r19,8(sp)
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
  if(top) {
    t0r=ICDCsumT(r,0); t0b=ICDCsumT(b,0);
40007f38:	5bdf883a 	add	r15,r11,r15
    t4r=ICDCsumT(r,4); t4b=ICDCsumT(b,4);
40007f3c:	4bab883a 	add	r21,r9,r14
40007f40:	dc800315 	stw	r18,12(sp)
40007f44:	dfc00415 	stw	ra,16(sp)
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
  if(top) {
    t0r=ICDCsumT(r,0); t0b=ICDCsumT(b,0);
40007f48:	4b65883a 	add	r18,r9,r13
40007f4c:	7fc00003 	ldbu	ra,0(r15)
40007f50:	5b5b883a 	add	r13,r11,r13
    t4r=ICDCsumT(r,4); t4b=ICDCsumT(b,4);
40007f54:	abc00003 	ldbu	r15,0(r21)
40007f58:	49ab883a 	add	r21,r9,r6
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
  if(top) {
    t0r=ICDCsumT(r,0); t0b=ICDCsumT(b,0);
40007f5c:	db000115 	stw	r12,4(sp)
    t4r=ICDCsumT(r,4); t4b=ICDCsumT(b,4);
40007f60:	b4ed883a 	add	r22,r22,r19
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
  if(top) {
    t0r=ICDCsumT(r,0); t0b=ICDCsumT(b,0);
40007f64:	6b000003 	ldbu	r12,0(r13)
    t4r=ICDCsumT(r,4); t4b=ICDCsumT(b,4);
40007f68:	dcc00417 	ldw	r19,16(sp)
40007f6c:	ab400003 	ldbu	r13,0(r21)
40007f70:	dd400317 	ldw	r21,12(sp)
40007f74:	5b9d883a 	add	r14,r11,r14
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
  if(top) {
    t0r=ICDCsumT(r,0); t0b=ICDCsumT(b,0);
40007f78:	e7000003 	ldbu	fp,0(fp)
40007f7c:	bdc00003 	ldbu	r23,0(r23)
    t4r=ICDCsumT(r,4); t4b=ICDCsumT(b,4);
40007f80:	598d883a 	add	r6,r11,r6
40007f84:	73800003 	ldbu	r14,0(r14)
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
  if(top) {
    t0r=ICDCsumT(r,0); t0b=ICDCsumT(b,0);
40007f88:	92c00003 	ldbu	r11,0(r18)
    t4r=ICDCsumT(r,4); t4b=ICDCsumT(b,4);
40007f8c:	ace5883a 	add	r18,r21,r19
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
  if(top) {
    t0r=ICDCsumT(r,0); t0b=ICDCsumT(b,0);
40007f90:	dd400117 	ldw	r21,4(sp)
    t4r=ICDCsumT(r,4); t4b=ICDCsumT(b,4);
40007f94:	31800003 	ldbu	r6,0(r6)
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
  if(top) {
    t0r=ICDCsumT(r,0); t0b=ICDCsumT(b,0);
40007f98:	e5ef883a 	add	r23,fp,r23
40007f9c:	bd6f883a 	add	r23,r23,r21
40007fa0:	87e1883a 	add	r16,r16,ra
    t4r=ICDCsumT(r,4); t4b=ICDCsumT(b,4);
40007fa4:	b3df883a 	add	r15,r22,r15
40007fa8:	939d883a 	add	r14,r18,r14
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
  if(top) {
    t0r=ICDCsumT(r,0); t0b=ICDCsumT(b,0);
40007fac:	bad7883a 	add	r11,r23,r11
40007fb0:	8319883a 	add	r12,r16,r12
    t4r=ICDCsumT(r,4); t4b=ICDCsumT(b,4);
40007fb4:	7b5b883a 	add	r13,r15,r13
40007fb8:	718d883a 	add	r6,r14,r6
  }

  if(top) {
    if(left)    ICDCfill(0,0,(l0r+t0r+4)>>3,(l0b+t0b+4)>>3);
40007fbc:	28001e26 	beq	r5,zero,40008038 <software_intra+0xa98>
40007fc0:	db800017 	ldw	r14,0(sp)
40007fc4:	621f883a 	add	r15,r12,r8
40007fc8:	7bc00104 	addi	r15,r15,4
40007fcc:	5ba1883a 	add	r16,r11,r14
40007fd0:	84000104 	addi	r16,r16,4
40007fd4:	8021d0fa 	srai	r16,r16,3
40007fd8:	781fd0fa 	srai	r15,r15,3
40007fdc:	381d883a 	mov	r14,r7
40007fe0:	3a000104 	addi	r8,r7,4
40007fe4:	7109383a 	mul	r4,r14,r4
40007fe8:	20c9883a 	add	r4,r4,r3
40007fec:	4909883a 	add	r4,r9,r4
40007ff0:	24000005 	stb	r16,0(r4)
40007ff4:	24000045 	stb	r16,1(r4)
40007ff8:	24000085 	stb	r16,2(r4)
40007ffc:	240000c5 	stb	r16,3(r4)
40008000:	11000517 	ldw	r4,20(r2)
40008004:	12400717 	ldw	r9,28(r2)
40008008:	7109383a 	mul	r4,r14,r4
4000800c:	73800044 	addi	r14,r14,1
40008010:	20c9883a 	add	r4,r4,r3
40008014:	4909883a 	add	r4,r9,r4
40008018:	23c00005 	stb	r15,0(r4)
4000801c:	23c00045 	stb	r15,1(r4)
40008020:	23c00085 	stb	r15,2(r4)
40008024:	23c000c5 	stb	r15,3(r4)
40008028:	43804326 	beq	r8,r14,40008138 <software_intra+0xb98>
4000802c:	12400817 	ldw	r9,32(r2)
40008030:	11000517 	ldw	r4,20(r2)
40008034:	003feb06 	br	40007fe4 <__alt_data_end+0xc0007fe4>
        else    ICDCfill(0,0,(t0r+2)>>2,(t0b+2)>>2);
40008038:	5c000084 	addi	r16,r11,2
4000803c:	63c00084 	addi	r15,r12,2
40008040:	8021d0ba 	srai	r16,r16,2
40008044:	781fd0ba 	srai	r15,r15,2
40008048:	381d883a 	mov	r14,r7
4000804c:	3a000104 	addi	r8,r7,4
40008050:	7109383a 	mul	r4,r14,r4
40008054:	20c9883a 	add	r4,r4,r3
40008058:	4909883a 	add	r4,r9,r4
4000805c:	24000005 	stb	r16,0(r4)
40008060:	24000045 	stb	r16,1(r4)
40008064:	24000085 	stb	r16,2(r4)
40008068:	240000c5 	stb	r16,3(r4)
4000806c:	11000517 	ldw	r4,20(r2)
40008070:	12400717 	ldw	r9,28(r2)
40008074:	7109383a 	mul	r4,r14,r4
40008078:	73800044 	addi	r14,r14,1
4000807c:	20c9883a 	add	r4,r4,r3
40008080:	4909883a 	add	r4,r9,r4
40008084:	23c00005 	stb	r15,0(r4)
40008088:	23c00045 	stb	r15,1(r4)
4000808c:	23c00085 	stb	r15,2(r4)
40008090:	23c000c5 	stb	r15,3(r4)
40008094:	43802826 	beq	r8,r14,40008138 <software_intra+0xb98>
40008098:	12400817 	ldw	r9,32(r2)
4000809c:	11000517 	ldw	r4,20(r2)
400080a0:	003feb06 	br	40008050 <__alt_data_end+0xc0008050>
}

static inline void Intra_Chroma_DC(frame *f, int x_avail, int y_avail, int bx, int by) {
  int i;
  int left=1, top=1;
  int l0r=512,l0b=512,l4r=512,l4b=512;
400080a4:	04408004 	movi	r17,512
400080a8:	22400817 	ldw	r9,32(r4)
400080ac:	12c00717 	ldw	r11,28(r2)
400080b0:	21000517 	ldw	r4,20(r4)
  int t0r=512,t0b=512,t4r=512,t4b=512;

  if(!x_avail) left=0;
400080b4:	000b883a 	mov	r5,zero
}

static inline void Intra_Chroma_DC(frame *f, int x_avail, int y_avail, int bx, int by) {
  int i;
  int left=1, top=1;
  int l0r=512,l0b=512,l4r=512,l4b=512;
400080b8:	8829883a 	mov	r20,r17
400080bc:	8811883a 	mov	r8,r17
400080c0:	dc400015 	stw	r17,0(sp)
400080c4:	003f7806 	br	40007ea8 <__alt_data_end+0xc0007ea8>

  if(top) {
    if(left)    ICDCfill(0,0,(l0r+t0r+4)>>3,(l0b+t0b+4)>>3);
        else    ICDCfill(0,0,(t0r+2)>>2,(t0b+2)>>2);
  } else {
    if(left)    ICDCfill(0,0,(l0r+2)>>2,(l0b+2)>>2);
400080c8:	a9800084 	addi	r6,r21,2
400080cc:	300dd0ba 	srai	r6,r6,2
400080d0:	42000084 	addi	r8,r8,2
400080d4:	4017d0ba 	srai	r11,r8,2
400080d8:	3819883a 	mov	r12,r7
400080dc:	3a000104 	addi	r8,r7,4
400080e0:	3815883a 	mov	r10,r7
400080e4:	5109383a 	mul	r4,r10,r4
400080e8:	20c9883a 	add	r4,r4,r3
400080ec:	4909883a 	add	r4,r9,r4
400080f0:	21800005 	stb	r6,0(r4)
400080f4:	21800045 	stb	r6,1(r4)
400080f8:	21800085 	stb	r6,2(r4)
400080fc:	218000c5 	stb	r6,3(r4)
40008100:	11000517 	ldw	r4,20(r2)
40008104:	11400717 	ldw	r5,28(r2)
40008108:	5109383a 	mul	r4,r10,r4
4000810c:	52800044 	addi	r10,r10,1
40008110:	20c9883a 	add	r4,r4,r3
40008114:	2909883a 	add	r4,r5,r4
40008118:	22c00005 	stb	r11,0(r4)
4000811c:	22c00045 	stb	r11,1(r4)
40008120:	22c00085 	stb	r11,2(r4)
40008124:	22c000c5 	stb	r11,3(r4)
40008128:	42809a26 	beq	r8,r10,40008394 <software_intra+0xdf4>
4000812c:	12400817 	ldw	r9,32(r2)
40008130:	11000517 	ldw	r4,20(r2)
40008134:	003feb06 	br	400080e4 <__alt_data_end+0xc00080e4>
        else    ICDCfill(0,0,128,128);
  }

       if(top)  ICDCfill(4,0,(t4r+2)>>2,(t4b+2)>>2);
40008138:	6cc00084 	addi	r19,r13,2
4000813c:	34800084 	addi	r18,r6,2
40008140:	9821d0ba 	srai	r16,r19,2
40008144:	901fd0ba 	srai	r15,r18,2
40008148:	381d883a 	mov	r14,r7
4000814c:	11000517 	ldw	r4,20(r2)
40008150:	12400817 	ldw	r9,32(r2)
40008154:	7109383a 	mul	r4,r14,r4
40008158:	2289883a 	add	r4,r4,r10
4000815c:	4909883a 	add	r4,r9,r4
40008160:	24000005 	stb	r16,0(r4)
40008164:	24000045 	stb	r16,1(r4)
40008168:	24000085 	stb	r16,2(r4)
4000816c:	240000c5 	stb	r16,3(r4)
40008170:	11000517 	ldw	r4,20(r2)
40008174:	12400717 	ldw	r9,28(r2)
40008178:	7109383a 	mul	r4,r14,r4
4000817c:	73800044 	addi	r14,r14,1
40008180:	2289883a 	add	r4,r4,r10
40008184:	4909883a 	add	r4,r9,r4
40008188:	23c00005 	stb	r15,0(r4)
4000818c:	23c00045 	stb	r15,1(r4)
40008190:	23c00085 	stb	r15,2(r4)
40008194:	23c000c5 	stb	r15,3(r4)
40008198:	43bfec1e 	bne	r8,r14,4000814c <__alt_data_end+0xc000814c>
  else if(left) ICDCfill(4,0,(l0r+2)>>2,(l0b+2)>>2);
  else          ICDCfill(4,0,128,128);

       if(left) ICDCfill(0,4,(l4r+2)>>2,(l4b+2)>>2);
4000819c:	28004c26 	beq	r5,zero,400082d0 <software_intra+0xd30>
           ((uint32_t)b(x,y+0)) <<24;
}

static inline void Intra_Chroma_DC(frame *f, int x_avail, int y_avail, int bx, int by) {
  int i;
  int left=1, top=1;
400081a0:	03800044 	movi	r14,1

       if(top)  ICDCfill(4,0,(t4r+2)>>2,(t4b+2)>>2);
  else if(left) ICDCfill(4,0,(l0r+2)>>2,(l0b+2)>>2);
  else          ICDCfill(4,0,128,128);

       if(left) ICDCfill(0,4,(l4r+2)>>2,(l4b+2)>>2);
400081a4:	a2400084 	addi	r9,r20,2
400081a8:	8ac00084 	addi	r11,r17,2
400081ac:	4813d0ba 	srai	r9,r9,2
400081b0:	5817d0ba 	srai	r11,r11,2
400081b4:	4019883a 	mov	r12,r8
400081b8:	39c00204 	addi	r7,r7,8
400081bc:	11000517 	ldw	r4,20(r2)
400081c0:	11400817 	ldw	r5,32(r2)
400081c4:	6109383a 	mul	r4,r12,r4
400081c8:	20c9883a 	add	r4,r4,r3
400081cc:	2909883a 	add	r4,r5,r4
400081d0:	22400005 	stb	r9,0(r4)
400081d4:	22400045 	stb	r9,1(r4)
400081d8:	22400085 	stb	r9,2(r4)
400081dc:	224000c5 	stb	r9,3(r4)
400081e0:	11000517 	ldw	r4,20(r2)
400081e4:	11400717 	ldw	r5,28(r2)
400081e8:	6109383a 	mul	r4,r12,r4
400081ec:	63000044 	addi	r12,r12,1
400081f0:	20c9883a 	add	r4,r4,r3
400081f4:	2909883a 	add	r4,r5,r4
400081f8:	22c00005 	stb	r11,0(r4)
400081fc:	22c00045 	stb	r11,1(r4)
40008200:	22c00085 	stb	r11,2(r4)
40008204:	22c000c5 	stb	r11,3(r4)
40008208:	3b3fec1e 	bne	r7,r12,400081bc <__alt_data_end+0xc00081bc>
  else if(top)  ICDCfill(0,4,(t0r+2)>>2,(t0b+2)>>2);
  else          ICDCfill(0,4,128,128);

  if(top) {
4000820c:	70001b26 	beq	r14,zero,4000827c <software_intra+0xcdc>
    if(left)    ICDCfill(4,4,(l4r+t4r+4)>>3,(l4b+t4b+4)>>3);
40008210:	898b883a 	add	r5,r17,r6
40008214:	a35b883a 	add	r13,r20,r13
40008218:	69800104 	addi	r6,r13,4
4000821c:	29400104 	addi	r5,r5,4
40008220:	300dd0fa 	srai	r6,r6,3
40008224:	280bd0fa 	srai	r5,r5,3
40008228:	10c00517 	ldw	r3,20(r2)
4000822c:	11000817 	ldw	r4,32(r2)
40008230:	40c7383a 	mul	r3,r8,r3
40008234:	1a87883a 	add	r3,r3,r10
40008238:	20c7883a 	add	r3,r4,r3
4000823c:	19800005 	stb	r6,0(r3)
40008240:	19800045 	stb	r6,1(r3)
40008244:	19800085 	stb	r6,2(r3)
40008248:	198000c5 	stb	r6,3(r3)
4000824c:	10c00517 	ldw	r3,20(r2)
40008250:	11000717 	ldw	r4,28(r2)
40008254:	40c7383a 	mul	r3,r8,r3
40008258:	42000044 	addi	r8,r8,1
4000825c:	1a87883a 	add	r3,r3,r10
40008260:	20c7883a 	add	r3,r4,r3
40008264:	19400005 	stb	r5,0(r3)
40008268:	19400045 	stb	r5,1(r3)
4000826c:	19400085 	stb	r5,2(r3)
40008270:	194000c5 	stb	r5,3(r3)
40008274:	41ffec1e 	bne	r8,r7,40008228 <__alt_data_end+0xc0008228>
40008278:	003db106 	br	40007940 <__alt_data_end+0xc0007940>
        else    ICDCfill(4,4,(t4r+2)>>2,(t4b+2)>>2);
  } else {
    if(left)    ICDCfill(4,4,(l4r+2)>>2,(l4b+2)>>2);
4000827c:	10c00517 	ldw	r3,20(r2)
40008280:	11000817 	ldw	r4,32(r2)
40008284:	40c7383a 	mul	r3,r8,r3
40008288:	1a87883a 	add	r3,r3,r10
4000828c:	20c7883a 	add	r3,r4,r3
40008290:	1a400005 	stb	r9,0(r3)
40008294:	1a400045 	stb	r9,1(r3)
40008298:	1a400085 	stb	r9,2(r3)
4000829c:	1a4000c5 	stb	r9,3(r3)
400082a0:	10c00517 	ldw	r3,20(r2)
400082a4:	11000717 	ldw	r4,28(r2)
400082a8:	40c7383a 	mul	r3,r8,r3
400082ac:	42000044 	addi	r8,r8,1
400082b0:	1a87883a 	add	r3,r3,r10
400082b4:	20c7883a 	add	r3,r4,r3
400082b8:	1ac00005 	stb	r11,0(r3)
400082bc:	1ac00045 	stb	r11,1(r3)
400082c0:	1ac00085 	stb	r11,2(r3)
400082c4:	1ac000c5 	stb	r11,3(r3)
400082c8:	41ffec1e 	bne	r8,r7,4000827c <__alt_data_end+0xc000827c>
400082cc:	003d9c06 	br	40007940 <__alt_data_end+0xc0007940>
       if(top)  ICDCfill(4,0,(t4r+2)>>2,(t4b+2)>>2);
  else if(left) ICDCfill(4,0,(l0r+2)>>2,(l0b+2)>>2);
  else          ICDCfill(4,0,128,128);

       if(left) ICDCfill(0,4,(l4r+2)>>2,(l4b+2)>>2);
  else if(top)  ICDCfill(0,4,(t0r+2)>>2,(t0b+2)>>2);
400082d0:	63000084 	addi	r12,r12,2
400082d4:	600dd0ba 	srai	r6,r12,2
400082d8:	5ac00084 	addi	r11,r11,2
400082dc:	5813d0ba 	srai	r9,r11,2
400082e0:	39c00204 	addi	r7,r7,8
400082e4:	4017883a 	mov	r11,r8
400082e8:	11000517 	ldw	r4,20(r2)
400082ec:	11400817 	ldw	r5,32(r2)
400082f0:	5909383a 	mul	r4,r11,r4
400082f4:	20c9883a 	add	r4,r4,r3
400082f8:	2909883a 	add	r4,r5,r4
400082fc:	22400005 	stb	r9,0(r4)
40008300:	22400045 	stb	r9,1(r4)
40008304:	22400085 	stb	r9,2(r4)
40008308:	224000c5 	stb	r9,3(r4)
4000830c:	11000517 	ldw	r4,20(r2)
40008310:	11400717 	ldw	r5,28(r2)
40008314:	5909383a 	mul	r4,r11,r4
40008318:	5ac00044 	addi	r11,r11,1
4000831c:	20c9883a 	add	r4,r4,r3
40008320:	2909883a 	add	r4,r5,r4
40008324:	21800005 	stb	r6,0(r4)
40008328:	21800045 	stb	r6,1(r4)
4000832c:	21800085 	stb	r6,2(r4)
40008330:	218000c5 	stb	r6,3(r4)
40008334:	3affec1e 	bne	r7,r11,400082e8 <__alt_data_end+0xc00082e8>
  else          ICDCfill(0,4,128,128);

  if(top) {
    if(left)    ICDCfill(4,4,(l4r+t4r+4)>>3,(l4b+t4b+4)>>3);
        else    ICDCfill(4,4,(t4r+2)>>2,(t4b+2)>>2);
40008338:	9827d0ba 	srai	r19,r19,2
4000833c:	9025d0ba 	srai	r18,r18,2
40008340:	10c00517 	ldw	r3,20(r2)
40008344:	11000817 	ldw	r4,32(r2)
40008348:	40c7383a 	mul	r3,r8,r3
4000834c:	1a87883a 	add	r3,r3,r10
40008350:	20c7883a 	add	r3,r4,r3
40008354:	1cc00005 	stb	r19,0(r3)
40008358:	1cc00045 	stb	r19,1(r3)
4000835c:	1cc00085 	stb	r19,2(r3)
40008360:	1cc000c5 	stb	r19,3(r3)
40008364:	10c00517 	ldw	r3,20(r2)
40008368:	11000717 	ldw	r4,28(r2)
4000836c:	40c7383a 	mul	r3,r8,r3
40008370:	42000044 	addi	r8,r8,1
40008374:	1a87883a 	add	r3,r3,r10
40008378:	20c7883a 	add	r3,r4,r3
4000837c:	1c800005 	stb	r18,0(r3)
40008380:	1c800045 	stb	r18,1(r3)
40008384:	1c800085 	stb	r18,2(r3)
40008388:	1c8000c5 	stb	r18,3(r3)
4000838c:	3a3fec1e 	bne	r7,r8,40008340 <__alt_data_end+0xc0008340>
40008390:	003d6b06 	br	40007940 <__alt_data_end+0xc0007940>
40008394:	1a800104 	addi	r10,r3,4
    if(left)    ICDCfill(0,0,(l0r+2)>>2,(l0b+2)>>2);
        else    ICDCfill(0,0,128,128);
  }

       if(top)  ICDCfill(4,0,(t4r+2)>>2,(t4b+2)>>2);
  else if(left) ICDCfill(4,0,(l0r+2)>>2,(l0b+2)>>2);
40008398:	11000517 	ldw	r4,20(r2)
4000839c:	11400817 	ldw	r5,32(r2)
400083a0:	6109383a 	mul	r4,r12,r4
400083a4:	2289883a 	add	r4,r4,r10
400083a8:	2909883a 	add	r4,r5,r4
400083ac:	21800005 	stb	r6,0(r4)
400083b0:	21800045 	stb	r6,1(r4)
400083b4:	21800085 	stb	r6,2(r4)
400083b8:	218000c5 	stb	r6,3(r4)
400083bc:	11000517 	ldw	r4,20(r2)
400083c0:	11400717 	ldw	r5,28(r2)
400083c4:	6109383a 	mul	r4,r12,r4
400083c8:	63000044 	addi	r12,r12,1
400083cc:	2289883a 	add	r4,r4,r10
400083d0:	2909883a 	add	r4,r5,r4
400083d4:	22c00005 	stb	r11,0(r4)
400083d8:	22c00045 	stb	r11,1(r4)
400083dc:	22c00085 	stb	r11,2(r4)
400083e0:	22c000c5 	stb	r11,3(r4)
400083e4:	433fec1e 	bne	r8,r12,40008398 <__alt_data_end+0xc0008398>

static inline void Intra_Chroma_DC(frame *f, int x_avail, int y_avail, int bx, int by) {
  int i;
  int left=1, top=1;
  int l0r=512,l0b=512,l4r=512,l4b=512;
  int t0r=512,t0b=512,t4r=512,t4b=512;
400083e8:	01808004 	movi	r6,512
400083ec:	301b883a 	mov	r13,r6
  if(left) {
    l0r=ICDCsumL(r,0); l0b=ICDCsumL(b,0);
    l4r=ICDCsumL(r,4); l4b=ICDCsumL(b,4);
  }

  if(!y_avail) top=0;
400083f0:	001d883a 	mov	r14,zero
400083f4:	003f6b06 	br	400081a4 <__alt_data_end+0xc00081a4>

400083f8 <set_luma_x>:
            default: printf("unsupported IntraChromaPredMode %d at %d,%d!\n",mode,x<<1,y<<1);
        }
	}
}

void set_luma_x(frame *f, int bx, int by, int x, int y, int wr_addr){
400083f8:	d8c00017 	ldw	r3,0(sp)
400083fc:	da400117 	ldw	r9,4(sp)

	WR_PIO(TX_0_BASE, 0                     );
40008400:	0005883a 	mov	r2,zero
40008404:	02044404 	movi	r8,4368
40008408:	40800035 	stwio	r2,0(r8)
	WR_PIO(TX_1_BASE, 0                     );
4000840c:	02044004 	movi	r8,4352
40008410:	40800035 	stwio	r2,0(r8)
	WR_PIO(TX_2_BASE, ((uint32_t)p(x+0,y))  );
40008414:	20800217 	ldw	r2,8(r4)
40008418:	22000617 	ldw	r8,24(r4)
4000841c:	30cd883a 	add	r6,r6,r3
40008420:	3087383a 	mul	r3,r6,r2
40008424:	4145883a 	add	r2,r8,r5
40008428:	11c5883a 	add	r2,r2,r7
4000842c:	10c5883a 	add	r2,r2,r3
40008430:	10c00003 	ldbu	r3,0(r2)
40008434:	00842c04 	movi	r2,4272
40008438:	10c00035 	stwio	r3,0(r2)
	WR_PIO(TX_3_BASE, ((uint32_t)p(x+1,y))  );
4000843c:	20800217 	ldw	r2,8(r4)
40008440:	22000617 	ldw	r8,24(r4)
40008444:	3087383a 	mul	r3,r6,r2
40008448:	4145883a 	add	r2,r8,r5
4000844c:	11c5883a 	add	r2,r2,r7
40008450:	10c5883a 	add	r2,r2,r3
40008454:	10c00043 	ldbu	r3,1(r2)
40008458:	00842804 	movi	r2,4256
4000845c:	10c00035 	stwio	r3,0(r2)
	WR_PIO(TX_4_BASE, ((uint32_t)p(x+2,y))  );
40008460:	20800217 	ldw	r2,8(r4)
40008464:	22000617 	ldw	r8,24(r4)
40008468:	3087383a 	mul	r3,r6,r2
4000846c:	4145883a 	add	r2,r8,r5
40008470:	11c5883a 	add	r2,r2,r7
40008474:	10c5883a 	add	r2,r2,r3
40008478:	10c00083 	ldbu	r3,2(r2)
4000847c:	00842404 	movi	r2,4240
40008480:	10c00035 	stwio	r3,0(r2)
	WR_PIO(TX_5_BASE, ((uint32_t)p(x+3,y))  );
40008484:	20800217 	ldw	r2,8(r4)
40008488:	20c00617 	ldw	r3,24(r4)
4000848c:	308d383a 	mul	r6,r6,r2
40008490:	194b883a 	add	r5,r3,r5
40008494:	29cf883a 	add	r7,r5,r7
40008498:	398f883a 	add	r7,r7,r6
4000849c:	38c000c3 	ldbu	r3,3(r7)
400084a0:	00842004 	movi	r2,4224
400084a4:	10c00035 	stwio	r3,0(r2)
	WR_PIO(TX_6_BASE, wr_addr               );
400084a8:	00841c04 	movi	r2,4208
400084ac:	12400035 	stwio	r9,0(r2)
	WR_PIO(TX_7_BASE, 1                     );
400084b0:	00841804 	movi	r2,4192
400084b4:	00c00044 	movi	r3,1
400084b8:	10c00035 	stwio	r3,0(r2)
	no_data_send(FORMAT_5 | IN_PLACE_INTRA_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
400084bc:	013000f4 	movhi	r4,49155
400084c0:	21000144 	addi	r4,r4,5
400084c4:	000c26c1 	jmpi	4000c26c <no_data_send>

400084c8 <set_luma_y>:
}

void set_luma_y(frame *f, int bx, int by, int x, int y, int wr_addr){
400084c8:	d8800017 	ldw	r2,0(sp)
400084cc:	da400117 	ldw	r9,4(sp)

	WR_PIO(TX_0_BASE, 0                     );
400084d0:	0007883a 	mov	r3,zero
400084d4:	02044404 	movi	r8,4368
400084d8:	40c00035 	stwio	r3,0(r8)
	WR_PIO(TX_1_BASE, 0                     );
400084dc:	02044004 	movi	r8,4352
400084e0:	40c00035 	stwio	r3,0(r8)
	WR_PIO(TX_2_BASE, ((uint32_t)p(x,y+0))  );
400084e4:	22000217 	ldw	r8,8(r4)
400084e8:	3095883a 	add	r10,r6,r2
400084ec:	20c00617 	ldw	r3,24(r4)
400084f0:	5211383a 	mul	r8,r10,r8
400084f4:	29cb883a 	add	r5,r5,r7
400084f8:	1947883a 	add	r3,r3,r5
400084fc:	1a07883a 	add	r3,r3,r8
40008500:	19c00003 	ldbu	r7,0(r3)
40008504:	00c42c04 	movi	r3,4272
40008508:	19c00035 	stwio	r7,0(r3)
	WR_PIO(TX_3_BASE, ((uint32_t)p(x,y+1))  );
4000850c:	22000217 	ldw	r8,8(r4)
40008510:	11c00044 	addi	r7,r2,1
40008514:	398f883a 	add	r7,r7,r6
40008518:	20c00617 	ldw	r3,24(r4)
4000851c:	3a0f383a 	mul	r7,r7,r8
40008520:	1947883a 	add	r3,r3,r5
40008524:	19c7883a 	add	r3,r3,r7
40008528:	19c00003 	ldbu	r7,0(r3)
4000852c:	00c42804 	movi	r3,4256
40008530:	19c00035 	stwio	r7,0(r3)
	WR_PIO(TX_4_BASE, ((uint32_t)p(x,y+2))  );
40008534:	22000217 	ldw	r8,8(r4)
40008538:	11c00084 	addi	r7,r2,2
4000853c:	398f883a 	add	r7,r7,r6
40008540:	20c00617 	ldw	r3,24(r4)
40008544:	3a0f383a 	mul	r7,r7,r8
40008548:	1947883a 	add	r3,r3,r5
4000854c:	19c7883a 	add	r3,r3,r7
40008550:	19c00003 	ldbu	r7,0(r3)
40008554:	00c42404 	movi	r3,4240
40008558:	19c00035 	stwio	r7,0(r3)
	WR_PIO(TX_5_BASE, ((uint32_t)p(x,y+3))  );
4000855c:	20c00217 	ldw	r3,8(r4)
40008560:	108000c4 	addi	r2,r2,3
40008564:	118d883a 	add	r6,r2,r6
40008568:	21c00617 	ldw	r7,24(r4)
4000856c:	30cd383a 	mul	r6,r6,r3
40008570:	00842004 	movi	r2,4224
40008574:	394b883a 	add	r5,r7,r5
40008578:	298b883a 	add	r5,r5,r6
4000857c:	28c00003 	ldbu	r3,0(r5)
40008580:	10c00035 	stwio	r3,0(r2)
	WR_PIO(TX_6_BASE, wr_addr               );
40008584:	00841c04 	movi	r2,4208
40008588:	12400035 	stwio	r9,0(r2)
	WR_PIO(TX_7_BASE, 1                     );
4000858c:	00841804 	movi	r2,4192
40008590:	00c00044 	movi	r3,1
40008594:	10c00035 	stwio	r3,0(r2)
	no_data_send(FORMAT_5 | IN_PLACE_INTRA_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
40008598:	013000f4 	movhi	r4,49155
4000859c:	21000144 	addi	r4,r4,5
400085a0:	000c26c1 	jmpi	4000c26c <no_data_send>

400085a4 <set_luma_single>:

}

void set_luma_single(frame *f, int bx, int by, int x, int y, int wr_addr){
400085a4:	d8c00017 	ldw	r3,0(sp)
400085a8:	da000117 	ldw	r8,4(sp)

	WR_PIO(TX_0_BASE, 0                     );
400085ac:	0005883a 	mov	r2,zero
400085b0:	02444404 	movi	r9,4368
400085b4:	48800035 	stwio	r2,0(r9)
	WR_PIO(TX_1_BASE, 0                     );
400085b8:	02444004 	movi	r9,4352
400085bc:	48800035 	stwio	r2,0(r9)
	WR_PIO(TX_2_BASE, 0                     );
400085c0:	02442c04 	movi	r9,4272
400085c4:	48800035 	stwio	r2,0(r9)
	WR_PIO(TX_3_BASE, 0                     );
400085c8:	02442804 	movi	r9,4256
400085cc:	48800035 	stwio	r2,0(r9)
	WR_PIO(TX_4_BASE, 0                     );
400085d0:	02442404 	movi	r9,4240
400085d4:	48800035 	stwio	r2,0(r9)
	WR_PIO(TX_5_BASE, ((uint32_t)p(x,y))    );
400085d8:	20800217 	ldw	r2,8(r4)
400085dc:	21000617 	ldw	r4,24(r4)
400085e0:	30cd883a 	add	r6,r6,r3
400085e4:	308d383a 	mul	r6,r6,r2
400085e8:	214b883a 	add	r5,r4,r5
400085ec:	29cf883a 	add	r7,r5,r7
400085f0:	398f883a 	add	r7,r7,r6
400085f4:	38c00003 	ldbu	r3,0(r7)
400085f8:	00842004 	movi	r2,4224
400085fc:	10c00035 	stwio	r3,0(r2)
	WR_PIO(TX_6_BASE, wr_addr               );
40008600:	00841c04 	movi	r2,4208
40008604:	12000035 	stwio	r8,0(r2)
	WR_PIO(TX_7_BASE, 1                     );
40008608:	00841804 	movi	r2,4192
4000860c:	00c00044 	movi	r3,1
40008610:	10c00035 	stwio	r3,0(r2)
	no_data_send(FORMAT_5 | IN_PLACE_INTRA_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
40008614:	013000f4 	movhi	r4,49155
40008618:	21000144 	addi	r4,r4,5
4000861c:	000c26c1 	jmpi	4000c26c <no_data_send>

40008620 <set_luma_all>:

}

void set_luma_all(frame *f, int bx, int by, int x, int y, int wr_addr){
40008620:	da400017 	ldw	r9,0(sp)
40008624:	da000117 	ldw	r8,4(sp)

	WR_PIO(TX_0_BASE, 0                     );
40008628:	0005883a 	mov	r2,zero
4000862c:	00c44404 	movi	r3,4368
40008630:	18800035 	stwio	r2,0(r3)
	WR_PIO(TX_1_BASE, 0                     );
40008634:	00c44004 	movi	r3,4352
40008638:	18800035 	stwio	r2,0(r3)
	WR_PIO(TX_2_BASE, ((uint32_t)p(x,y))    );
4000863c:	20c00217 	ldw	r3,8(r4)
40008640:	324d883a 	add	r6,r6,r9
40008644:	20800617 	ldw	r2,24(r4)
40008648:	30c7383a 	mul	r3,r6,r3
4000864c:	29cb883a 	add	r5,r5,r7
40008650:	1145883a 	add	r2,r2,r5
40008654:	10c5883a 	add	r2,r2,r3
40008658:	10c00003 	ldbu	r3,0(r2)
4000865c:	00842c04 	movi	r2,4272
40008660:	10c00035 	stwio	r3,0(r2)
	WR_PIO(TX_3_BASE, ((uint32_t)p(x,y))    );
40008664:	20c00217 	ldw	r3,8(r4)
40008668:	20800617 	ldw	r2,24(r4)
4000866c:	30c7383a 	mul	r3,r6,r3
40008670:	1145883a 	add	r2,r2,r5
40008674:	10c5883a 	add	r2,r2,r3
40008678:	10c00003 	ldbu	r3,0(r2)
4000867c:	00842804 	movi	r2,4256
40008680:	10c00035 	stwio	r3,0(r2)
	WR_PIO(TX_4_BASE, ((uint32_t)p(x,y))    );
40008684:	20c00217 	ldw	r3,8(r4)
40008688:	20800617 	ldw	r2,24(r4)
4000868c:	30c7383a 	mul	r3,r6,r3
40008690:	1145883a 	add	r2,r2,r5
40008694:	10c5883a 	add	r2,r2,r3
40008698:	10c00003 	ldbu	r3,0(r2)
4000869c:	00842404 	movi	r2,4240
400086a0:	10c00035 	stwio	r3,0(r2)
	WR_PIO(TX_5_BASE, ((uint32_t)p(x,y))    );
400086a4:	20800217 	ldw	r2,8(r4)
400086a8:	21c00617 	ldw	r7,24(r4)
400086ac:	308d383a 	mul	r6,r6,r2
400086b0:	394b883a 	add	r5,r7,r5
400086b4:	00842004 	movi	r2,4224
400086b8:	298b883a 	add	r5,r5,r6
400086bc:	28c00003 	ldbu	r3,0(r5)
400086c0:	10c00035 	stwio	r3,0(r2)
	WR_PIO(TX_6_BASE, wr_addr               );
400086c4:	00841c04 	movi	r2,4208
400086c8:	12000035 	stwio	r8,0(r2)
	WR_PIO(TX_7_BASE, 1                     );
400086cc:	00841804 	movi	r2,4192
400086d0:	00c00044 	movi	r3,1
400086d4:	10c00035 	stwio	r3,0(r2)
	no_data_send(FORMAT_5 | IN_PLACE_INTRA_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
400086d8:	013000f4 	movhi	r4,49155
400086dc:	21000144 	addi	r4,r4,5
400086e0:	000c26c1 	jmpi	4000c26c <no_data_send>

400086e4 <send_luma_intra_packet_3>:

}


uint32_t send_luma_intra_packet_3(int size, frame *f, int bx, int by, int blkIdx_test, uint64_t intra_request, int identifier)
{
400086e4:	deffed04 	addi	sp,sp,-76
400086e8:	d8c01517 	ldw	r3,84(sp)
400086ec:	d8801417 	ldw	r2,80(sp)
400086f0:	dc400a15 	stw	r17,40(sp)
400086f4:	d8c00215 	stw	r3,8(sp)
400086f8:	dfc01215 	stw	ra,72(sp)
400086fc:	df001115 	stw	fp,68(sp)
40008700:	ddc01015 	stw	r23,64(sp)
40008704:	dd800f15 	stw	r22,60(sp)
40008708:	dd400e15 	stw	r21,56(sp)
4000870c:	dd000d15 	stw	r20,52(sp)
40008710:	dcc00c15 	stw	r19,48(sp)
40008714:	dc800b15 	stw	r18,44(sp)
40008718:	dc000915 	stw	r16,36(sp)
4000871c:	d8800115 	stw	r2,4(sp)
40008720:	d9000015 	stw	r4,0(sp)
40008724:	2823883a 	mov	r17,r5
	}
}

void set_luma_x(frame *f, int bx, int by, int x, int y, int wr_addr){

	WR_PIO(TX_0_BASE, 0                     );
40008728:	00c44404 	movi	r3,4368
4000872c:	18000035 	stwio	zero,0(r3)
	WR_PIO(TX_1_BASE, 0                     );
40008730:	04044004 	movi	r16,4352
40008734:	80000035 	stwio	zero,0(r16)
	WR_PIO(TX_2_BASE, ((uint32_t)p(x+0,y))  );
40008738:	2a000217 	ldw	r8,8(r5)
4000873c:	38bfffc4 	addi	r2,r7,-1
40008740:	29000617 	ldw	r4,24(r5)
40008744:	1211383a 	mul	r8,r2,r8
40008748:	373fffc4 	addi	fp,r6,-1
4000874c:	2709883a 	add	r4,r4,fp
40008750:	2209883a 	add	r4,r4,r8
40008754:	21000003 	ldbu	r4,0(r4)
40008758:	04c42c04 	movi	r19,4272
4000875c:	99000035 	stwio	r4,0(r19)
	WR_PIO(TX_3_BASE, ((uint32_t)p(x+1,y))  );
40008760:	2a000217 	ldw	r8,8(r5)
40008764:	29000617 	ldw	r4,24(r5)
40008768:	04842804 	movi	r18,4256
4000876c:	1211383a 	mul	r8,r2,r8
40008770:	2189883a 	add	r4,r4,r6
40008774:	2209883a 	add	r4,r4,r8
40008778:	21000003 	ldbu	r4,0(r4)
4000877c:	91000035 	stwio	r4,0(r18)
	WR_PIO(TX_4_BASE, ((uint32_t)p(x+2,y))  );
40008780:	2a000217 	ldw	r8,8(r5)
40008784:	29000617 	ldw	r4,24(r5)
40008788:	05042404 	movi	r20,4240
4000878c:	1211383a 	mul	r8,r2,r8
40008790:	2189883a 	add	r4,r4,r6
40008794:	2209883a 	add	r4,r4,r8
40008798:	21000043 	ldbu	r4,1(r4)
4000879c:	a1000035 	stwio	r4,0(r20)
	WR_PIO(TX_5_BASE, ((uint32_t)p(x+3,y))  );
400087a0:	2a000217 	ldw	r8,8(r5)
400087a4:	29000617 	ldw	r4,24(r5)
400087a8:	02442004 	movi	r9,4224
400087ac:	1211383a 	mul	r8,r2,r8
400087b0:	2189883a 	add	r4,r4,r6
400087b4:	2209883a 	add	r4,r4,r8
400087b8:	21000083 	ldbu	r4,2(r4)
400087bc:	49000035 	stwio	r4,0(r9)
	WR_PIO(TX_6_BASE, wr_addr               );
400087c0:	05c41c04 	movi	r23,4208
400087c4:	b8000035 	stwio	zero,0(r23)
	WR_PIO(TX_7_BASE, 1                     );
400087c8:	05400044 	movi	r21,1
400087cc:	05841804 	movi	r22,4192
400087d0:	b5400035 	stwio	r21,0(r22)
	no_data_send(FORMAT_5 | IN_PLACE_INTRA_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
400087d4:	013000f4 	movhi	r4,49155
400087d8:	21000144 	addi	r4,r4,5
400087dc:	d8800615 	stw	r2,24(sp)
400087e0:	d8c00415 	stw	r3,16(sp)
400087e4:	d9800715 	stw	r6,28(sp)
400087e8:	d9c00815 	stw	r7,32(sp)
400087ec:	da400515 	stw	r9,20(sp)
400087f0:	000c26c0 	call	4000c26c <no_data_send>
uint32_t send_luma_intra_packet_3(int size, frame *f, int bx, int by, int blkIdx_test, uint64_t intra_request, int identifier)
{
	// write data 0
	set_luma_x(f, bx, by, -1, -1, 0);

	if((size == 4) && (blkIdx_test)){
400087f4:	d9400017 	ldw	r5,0(sp)
400087f8:	01000104 	movi	r4,4
400087fc:	d8800617 	ldw	r2,24(sp)
40008800:	d8c00417 	ldw	r3,16(sp)
40008804:	d9800717 	ldw	r6,28(sp)
40008808:	d9c00817 	ldw	r7,32(sp)
4000880c:	da400517 	ldw	r9,20(sp)
40008810:	2900d526 	beq	r5,r4,40008b68 <send_luma_intra_packet_3+0x484>
	}
}

void set_luma_x(frame *f, int bx, int by, int x, int y, int wr_addr){

	WR_PIO(TX_0_BASE, 0                     );
40008814:	02444404 	movi	r9,4368
40008818:	48000035 	stwio	zero,0(r9)
	WR_PIO(TX_1_BASE, 0                     );
4000881c:	05c44004 	movi	r23,4352
40008820:	b8000035 	stwio	zero,0(r23)
	WR_PIO(TX_2_BASE, ((uint32_t)p(x+0,y))  );
40008824:	8a000217 	ldw	r8,8(r17)
40008828:	89000617 	ldw	r4,24(r17)
4000882c:	05842c04 	movi	r22,4272
40008830:	1211383a 	mul	r8,r2,r8
40008834:	2189883a 	add	r4,r4,r6
40008838:	2209883a 	add	r4,r4,r8
4000883c:	210000c3 	ldbu	r4,3(r4)
40008840:	b1000035 	stwio	r4,0(r22)
	WR_PIO(TX_3_BASE, ((uint32_t)p(x+1,y))  );
40008844:	8a000217 	ldw	r8,8(r17)
40008848:	89000617 	ldw	r4,24(r17)
4000884c:	05442804 	movi	r21,4256
40008850:	1211383a 	mul	r8,r2,r8
40008854:	2189883a 	add	r4,r4,r6
40008858:	2209883a 	add	r4,r4,r8
4000885c:	21000103 	ldbu	r4,4(r4)
40008860:	a9000035 	stwio	r4,0(r21)
	WR_PIO(TX_4_BASE, ((uint32_t)p(x+2,y))  );
40008864:	8a000217 	ldw	r8,8(r17)
40008868:	89000617 	ldw	r4,24(r17)
4000886c:	05042404 	movi	r20,4240
40008870:	1211383a 	mul	r8,r2,r8
40008874:	2189883a 	add	r4,r4,r6
40008878:	2209883a 	add	r4,r4,r8
4000887c:	21000143 	ldbu	r4,5(r4)
40008880:	a1000035 	stwio	r4,0(r20)
	WR_PIO(TX_5_BASE, ((uint32_t)p(x+3,y))  );
40008884:	8a000217 	ldw	r8,8(r17)
40008888:	89000617 	ldw	r4,24(r17)
4000888c:	04c42004 	movi	r19,4224
40008890:	1211383a 	mul	r8,r2,r8
40008894:	2189883a 	add	r4,r4,r6
40008898:	2209883a 	add	r4,r4,r8
4000889c:	21000183 	ldbu	r4,6(r4)
400088a0:	99000035 	stwio	r4,0(r19)
	WR_PIO(TX_6_BASE, wr_addr               );
400088a4:	04000044 	movi	r16,1
400088a8:	04841c04 	movi	r18,4208
400088ac:	94000035 	stwio	r16,0(r18)
	WR_PIO(TX_7_BASE, 1                     );
400088b0:	00c41804 	movi	r3,4192
400088b4:	1c000035 	stwio	r16,0(r3)
	no_data_send(FORMAT_5 | IN_PLACE_INTRA_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
400088b8:	013000f4 	movhi	r4,49155
400088bc:	21000144 	addi	r4,r4,5
400088c0:	da400515 	stw	r9,20(sp)
400088c4:	d8800615 	stw	r2,24(sp)
400088c8:	d8c00415 	stw	r3,16(sp)
400088cc:	d9800715 	stw	r6,28(sp)
400088d0:	d9c00815 	stw	r7,32(sp)
400088d4:	000c26c0 	call	4000c26c <no_data_send>
	}
}

void set_luma_x(frame *f, int bx, int by, int x, int y, int wr_addr){

	WR_PIO(TX_0_BASE, 0                     );
400088d8:	da400517 	ldw	r9,20(sp)
400088dc:	48000035 	stwio	zero,0(r9)
	WR_PIO(TX_1_BASE, 0                     );
400088e0:	b8000035 	stwio	zero,0(r23)
	WR_PIO(TX_2_BASE, ((uint32_t)p(x+0,y))  );
400088e4:	8a000217 	ldw	r8,8(r17)
400088e8:	d8800617 	ldw	r2,24(sp)
400088ec:	89000617 	ldw	r4,24(r17)
400088f0:	d9800717 	ldw	r6,28(sp)
400088f4:	1211383a 	mul	r8,r2,r8
400088f8:	2189883a 	add	r4,r4,r6
400088fc:	2209883a 	add	r4,r4,r8
40008900:	210001c3 	ldbu	r4,7(r4)
40008904:	b1000035 	stwio	r4,0(r22)
	WR_PIO(TX_3_BASE, ((uint32_t)p(x+1,y))  );
40008908:	8a000217 	ldw	r8,8(r17)
4000890c:	89000617 	ldw	r4,24(r17)
40008910:	1211383a 	mul	r8,r2,r8
40008914:	2189883a 	add	r4,r4,r6
40008918:	2209883a 	add	r4,r4,r8
4000891c:	21000203 	ldbu	r4,8(r4)
40008920:	a9000035 	stwio	r4,0(r21)
	WR_PIO(TX_4_BASE, ((uint32_t)p(x+2,y))  );
40008924:	8a000217 	ldw	r8,8(r17)
40008928:	89000617 	ldw	r4,24(r17)
4000892c:	1211383a 	mul	r8,r2,r8
40008930:	2189883a 	add	r4,r4,r6
40008934:	2209883a 	add	r4,r4,r8
40008938:	21000243 	ldbu	r4,9(r4)
4000893c:	a1000035 	stwio	r4,0(r20)
	WR_PIO(TX_5_BASE, ((uint32_t)p(x+3,y))  );
40008940:	8a000217 	ldw	r8,8(r17)
40008944:	89000617 	ldw	r4,24(r17)
40008948:	1211383a 	mul	r8,r2,r8
4000894c:	2189883a 	add	r4,r4,r6
40008950:	2209883a 	add	r4,r4,r8
40008954:	21000283 	ldbu	r4,10(r4)
40008958:	99000035 	stwio	r4,0(r19)
	WR_PIO(TX_6_BASE, wr_addr               );
4000895c:	01000084 	movi	r4,2
40008960:	91000035 	stwio	r4,0(r18)
	WR_PIO(TX_7_BASE, 1                     );
40008964:	d8c00417 	ldw	r3,16(sp)
40008968:	1c000035 	stwio	r16,0(r3)
	no_data_send(FORMAT_5 | IN_PLACE_INTRA_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
4000896c:	013000f4 	movhi	r4,49155
40008970:	21000144 	addi	r4,r4,5
40008974:	d8800615 	stw	r2,24(sp)
40008978:	d9800715 	stw	r6,28(sp)
4000897c:	000c26c0 	call	4000c26c <no_data_send>
40008980:	d9c00817 	ldw	r7,32(sp)
40008984:	d9800717 	ldw	r6,28(sp)
40008988:	d8800617 	ldw	r2,24(sp)
}

void set_luma_y(frame *f, int bx, int by, int x, int y, int wr_addr){

	WR_PIO(TX_0_BASE, 0                     );
4000898c:	05c44404 	movi	r23,4368
40008990:	b8000035 	stwio	zero,0(r23)
	WR_PIO(TX_1_BASE, 0                     );
40008994:	05844004 	movi	r22,4352
40008998:	b0000035 	stwio	zero,0(r22)
	WR_PIO(TX_2_BASE, ((uint32_t)p(x,y+0))  );
4000899c:	8a000217 	ldw	r8,8(r17)
400089a0:	89000617 	ldw	r4,24(r17)
400089a4:	05442c04 	movi	r21,4272
400089a8:	3a11383a 	mul	r8,r7,r8
400089ac:	2709883a 	add	r4,r4,fp
400089b0:	2209883a 	add	r4,r4,r8
400089b4:	21000003 	ldbu	r4,0(r4)
400089b8:	a9000035 	stwio	r4,0(r21)
	WR_PIO(TX_3_BASE, ((uint32_t)p(x,y+1))  );
400089bc:	8a400217 	ldw	r9,8(r17)
400089c0:	39000044 	addi	r4,r7,1
400089c4:	8a800617 	ldw	r10,24(r17)
400089c8:	2251383a 	mul	r8,r4,r9
400089cc:	05042804 	movi	r20,4256
400089d0:	5709883a 	add	r4,r10,fp
400089d4:	2209883a 	add	r4,r4,r8
400089d8:	21000003 	ldbu	r4,0(r4)
400089dc:	a1000035 	stwio	r4,0(r20)
	WR_PIO(TX_4_BASE, ((uint32_t)p(x,y+2))  );
400089e0:	8a400217 	ldw	r9,8(r17)
400089e4:	39000084 	addi	r4,r7,2
400089e8:	8a800617 	ldw	r10,24(r17)
400089ec:	2251383a 	mul	r8,r4,r9
400089f0:	04c42404 	movi	r19,4240
400089f4:	5709883a 	add	r4,r10,fp
400089f8:	2209883a 	add	r4,r4,r8
400089fc:	21000003 	ldbu	r4,0(r4)
40008a00:	99000035 	stwio	r4,0(r19)
	WR_PIO(TX_5_BASE, ((uint32_t)p(x,y+3))  );
40008a04:	8a400217 	ldw	r9,8(r17)
40008a08:	390000c4 	addi	r4,r7,3
40008a0c:	8a800617 	ldw	r10,24(r17)
40008a10:	2251383a 	mul	r8,r4,r9
40008a14:	04842004 	movi	r18,4224
40008a18:	5709883a 	add	r4,r10,fp
40008a1c:	2209883a 	add	r4,r4,r8
40008a20:	21000003 	ldbu	r4,0(r4)
40008a24:	91000035 	stwio	r4,0(r18)
	WR_PIO(TX_6_BASE, wr_addr               );
40008a28:	01000144 	movi	r4,5
40008a2c:	00c41c04 	movi	r3,4208
40008a30:	19000035 	stwio	r4,0(r3)
	WR_PIO(TX_7_BASE, 1                     );
40008a34:	04000044 	movi	r16,1
40008a38:	01441804 	movi	r5,4192
40008a3c:	2c000035 	stwio	r16,0(r5)
	no_data_send(FORMAT_5 | IN_PLACE_INTRA_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
40008a40:	013000f4 	movhi	r4,49155
40008a44:	21000144 	addi	r4,r4,5
40008a48:	d8800615 	stw	r2,24(sp)
40008a4c:	d9800715 	stw	r6,28(sp)
40008a50:	d9c00815 	stw	r7,32(sp)
40008a54:	000c26c0 	call	4000c26c <no_data_send>
	no_data_send(FORMAT_5 | IN_PLACE_INTRA_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
}

void set_luma_y(frame *f, int bx, int by, int x, int y, int wr_addr){

	WR_PIO(TX_0_BASE, 0                     );
40008a58:	b8000035 	stwio	zero,0(r23)
	WR_PIO(TX_1_BASE, 0                     );
40008a5c:	b0000035 	stwio	zero,0(r22)
	WR_PIO(TX_2_BASE, ((uint32_t)p(x,y+0))  );
40008a60:	d9c00817 	ldw	r7,32(sp)
40008a64:	8a400217 	ldw	r9,8(r17)
40008a68:	8a800617 	ldw	r10,24(r17)
40008a6c:	39000104 	addi	r4,r7,4
40008a70:	2251383a 	mul	r8,r4,r9
40008a74:	5709883a 	add	r4,r10,fp
40008a78:	2209883a 	add	r4,r4,r8
40008a7c:	21000003 	ldbu	r4,0(r4)
40008a80:	a9000035 	stwio	r4,0(r21)
	WR_PIO(TX_3_BASE, ((uint32_t)p(x,y+1))  );
40008a84:	8a400217 	ldw	r9,8(r17)
40008a88:	39000144 	addi	r4,r7,5
40008a8c:	8a800617 	ldw	r10,24(r17)
40008a90:	2251383a 	mul	r8,r4,r9
40008a94:	5709883a 	add	r4,r10,fp
40008a98:	2209883a 	add	r4,r4,r8
40008a9c:	21000003 	ldbu	r4,0(r4)
40008aa0:	a1000035 	stwio	r4,0(r20)
	WR_PIO(TX_4_BASE, ((uint32_t)p(x,y+2))  );
40008aa4:	8a400217 	ldw	r9,8(r17)
40008aa8:	39000184 	addi	r4,r7,6
40008aac:	8a800617 	ldw	r10,24(r17)
40008ab0:	2251383a 	mul	r8,r4,r9
40008ab4:	5709883a 	add	r4,r10,fp
40008ab8:	2209883a 	add	r4,r4,r8
40008abc:	21000003 	ldbu	r4,0(r4)
40008ac0:	99000035 	stwio	r4,0(r19)
	WR_PIO(TX_5_BASE, ((uint32_t)p(x,y+3))  );
40008ac4:	8a400217 	ldw	r9,8(r17)
40008ac8:	390001c4 	addi	r4,r7,7
40008acc:	8a800617 	ldw	r10,24(r17)
40008ad0:	2251383a 	mul	r8,r4,r9
40008ad4:	5709883a 	add	r4,r10,fp
40008ad8:	2209883a 	add	r4,r4,r8
40008adc:	21000003 	ldbu	r4,0(r4)
40008ae0:	91000035 	stwio	r4,0(r18)
	WR_PIO(TX_6_BASE, wr_addr               );
40008ae4:	01000184 	movi	r4,6
40008ae8:	00c41c04 	movi	r3,4208
40008aec:	19000035 	stwio	r4,0(r3)
	WR_PIO(TX_7_BASE, 1                     );
40008af0:	01441804 	movi	r5,4192
40008af4:	2c000035 	stwio	r16,0(r5)
	no_data_send(FORMAT_5 | IN_PLACE_INTRA_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
40008af8:	013000f4 	movhi	r4,49155
40008afc:	21000144 	addi	r4,r4,5
40008b00:	d9c00815 	stw	r7,32(sp)
40008b04:	000c26c0 	call	4000c26c <no_data_send>
	set_luma_y(f, bx, by, -1, 0, 5);

	// write   data 6
	set_luma_y(f, bx, by, -1, 4, 6);

	if(size == 16){
40008b08:	d8c00017 	ldw	r3,0(sp)
40008b0c:	01000404 	movi	r4,16
40008b10:	d8800617 	ldw	r2,24(sp)
40008b14:	d9800717 	ldw	r6,28(sp)
40008b18:	d9c00817 	ldw	r7,32(sp)
40008b1c:	19006b26 	beq	r3,r4,40008ccc <send_luma_intra_packet_3+0x5e8>
	}

    uint64_t word_0 = intra_request>>32;
    uint64_t word_1 = intra_request&0xFFFFFFFF;

    send_flit(3, (uint32_t)word_0, (uint32_t)word_1, 1);
40008b20:	d9800117 	ldw	r6,4(sp)
40008b24:	d9400217 	ldw	r5,8(sp)
40008b28:	01c00044 	movi	r7,1
40008b2c:	010000c4 	movi	r4,3
40008b30:	000c2000 	call	4000c200 <send_flit>
	//start = read_timer();

    return identifier;

}
40008b34:	d8801617 	ldw	r2,88(sp)
40008b38:	dfc01217 	ldw	ra,72(sp)
40008b3c:	df001117 	ldw	fp,68(sp)
40008b40:	ddc01017 	ldw	r23,64(sp)
40008b44:	dd800f17 	ldw	r22,60(sp)
40008b48:	dd400e17 	ldw	r21,56(sp)
40008b4c:	dd000d17 	ldw	r20,52(sp)
40008b50:	dcc00c17 	ldw	r19,48(sp)
40008b54:	dc800b17 	ldw	r18,44(sp)
40008b58:	dc400a17 	ldw	r17,40(sp)
40008b5c:	dc000917 	ldw	r16,36(sp)
40008b60:	dec01304 	addi	sp,sp,76
40008b64:	f800283a 	ret
uint32_t send_luma_intra_packet_3(int size, frame *f, int bx, int by, int blkIdx_test, uint64_t intra_request, int identifier)
{
	// write data 0
	set_luma_x(f, bx, by, -1, -1, 0);

	if((size == 4) && (blkIdx_test)){
40008b68:	d9001317 	ldw	r4,76(sp)
40008b6c:	203f2926 	beq	r4,zero,40008814 <__alt_data_end+0xc0008814>

}

void set_luma_all(frame *f, int bx, int by, int x, int y, int wr_addr){

	WR_PIO(TX_0_BASE, 0                     );
40008b70:	18000035 	stwio	zero,0(r3)
	WR_PIO(TX_1_BASE, 0                     );
40008b74:	80000035 	stwio	zero,0(r16)
	WR_PIO(TX_2_BASE, ((uint32_t)p(x,y))    );
40008b78:	89000217 	ldw	r4,8(r17)
40008b7c:	8ac00617 	ldw	r11,24(r17)
40008b80:	320000c4 	addi	r8,r6,3
40008b84:	1115383a 	mul	r10,r2,r4
40008b88:	5a09883a 	add	r4,r11,r8
40008b8c:	2289883a 	add	r4,r4,r10
40008b90:	21000003 	ldbu	r4,0(r4)
40008b94:	99000035 	stwio	r4,0(r19)
	WR_PIO(TX_3_BASE, ((uint32_t)p(x,y))    );
40008b98:	89000217 	ldw	r4,8(r17)
40008b9c:	8ac00617 	ldw	r11,24(r17)
40008ba0:	1115383a 	mul	r10,r2,r4
40008ba4:	5a09883a 	add	r4,r11,r8
40008ba8:	2289883a 	add	r4,r4,r10
40008bac:	21000003 	ldbu	r4,0(r4)
40008bb0:	91000035 	stwio	r4,0(r18)
	WR_PIO(TX_4_BASE, ((uint32_t)p(x,y))    );
40008bb4:	89000217 	ldw	r4,8(r17)
40008bb8:	8ac00617 	ldw	r11,24(r17)
40008bbc:	1115383a 	mul	r10,r2,r4
40008bc0:	5a09883a 	add	r4,r11,r8
40008bc4:	2289883a 	add	r4,r4,r10
40008bc8:	21000003 	ldbu	r4,0(r4)
40008bcc:	a1000035 	stwio	r4,0(r20)
	WR_PIO(TX_5_BASE, ((uint32_t)p(x,y))    );
40008bd0:	89000217 	ldw	r4,8(r17)
40008bd4:	8ac00617 	ldw	r11,24(r17)
40008bd8:	1115383a 	mul	r10,r2,r4
40008bdc:	5a09883a 	add	r4,r11,r8
40008be0:	2289883a 	add	r4,r4,r10
40008be4:	21000003 	ldbu	r4,0(r4)
40008be8:	49000035 	stwio	r4,0(r9)
	WR_PIO(TX_6_BASE, wr_addr               );
40008bec:	bd400035 	stwio	r21,0(r23)
	WR_PIO(TX_7_BASE, 1                     );
40008bf0:	b5400035 	stwio	r21,0(r22)
	no_data_send(FORMAT_5 | IN_PLACE_INTRA_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
40008bf4:	013000f4 	movhi	r4,49155
40008bf8:	21000144 	addi	r4,r4,5
40008bfc:	d8c00415 	stw	r3,16(sp)
40008c00:	d8800615 	stw	r2,24(sp)
40008c04:	d9800715 	stw	r6,28(sp)
40008c08:	d9c00815 	stw	r7,32(sp)
40008c0c:	da000315 	stw	r8,12(sp)
40008c10:	da400515 	stw	r9,20(sp)
40008c14:	000c26c0 	call	4000c26c <no_data_send>

}

void set_luma_all(frame *f, int bx, int by, int x, int y, int wr_addr){

	WR_PIO(TX_0_BASE, 0                     );
40008c18:	d8c00417 	ldw	r3,16(sp)
40008c1c:	18000035 	stwio	zero,0(r3)
	WR_PIO(TX_1_BASE, 0                     );
40008c20:	80000035 	stwio	zero,0(r16)
	WR_PIO(TX_2_BASE, ((uint32_t)p(x,y))    );
40008c24:	89000217 	ldw	r4,8(r17)
40008c28:	d8800617 	ldw	r2,24(sp)
40008c2c:	8ac00617 	ldw	r11,24(r17)
40008c30:	da000317 	ldw	r8,12(sp)
40008c34:	1115383a 	mul	r10,r2,r4
40008c38:	5a09883a 	add	r4,r11,r8
40008c3c:	2289883a 	add	r4,r4,r10
40008c40:	21000003 	ldbu	r4,0(r4)
40008c44:	99000035 	stwio	r4,0(r19)
	WR_PIO(TX_3_BASE, ((uint32_t)p(x,y))    );
40008c48:	89000217 	ldw	r4,8(r17)
40008c4c:	8ac00617 	ldw	r11,24(r17)
40008c50:	1115383a 	mul	r10,r2,r4
40008c54:	5a09883a 	add	r4,r11,r8
40008c58:	2289883a 	add	r4,r4,r10
40008c5c:	21000003 	ldbu	r4,0(r4)
40008c60:	91000035 	stwio	r4,0(r18)
	WR_PIO(TX_4_BASE, ((uint32_t)p(x,y))    );
40008c64:	89000217 	ldw	r4,8(r17)
40008c68:	8ac00617 	ldw	r11,24(r17)
40008c6c:	1115383a 	mul	r10,r2,r4
40008c70:	5a09883a 	add	r4,r11,r8
40008c74:	2289883a 	add	r4,r4,r10
40008c78:	21000003 	ldbu	r4,0(r4)
40008c7c:	a1000035 	stwio	r4,0(r20)
	WR_PIO(TX_5_BASE, ((uint32_t)p(x,y))    );
40008c80:	89000217 	ldw	r4,8(r17)
40008c84:	8a800617 	ldw	r10,24(r17)
40008c88:	da400517 	ldw	r9,20(sp)
40008c8c:	1109383a 	mul	r4,r2,r4
40008c90:	5211883a 	add	r8,r10,r8
40008c94:	4111883a 	add	r8,r8,r4
40008c98:	41000003 	ldbu	r4,0(r8)
40008c9c:	49000035 	stwio	r4,0(r9)
	WR_PIO(TX_6_BASE, wr_addr               );
40008ca0:	01000084 	movi	r4,2
40008ca4:	b9000035 	stwio	r4,0(r23)
	WR_PIO(TX_7_BASE, 1                     );
40008ca8:	b5400035 	stwio	r21,0(r22)
	no_data_send(FORMAT_5 | IN_PLACE_INTRA_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
40008cac:	013000f4 	movhi	r4,49155
40008cb0:	21000144 	addi	r4,r4,5
40008cb4:	d8800615 	stw	r2,24(sp)
40008cb8:	000c26c0 	call	4000c26c <no_data_send>
40008cbc:	d8800617 	ldw	r2,24(sp)
40008cc0:	d9800717 	ldw	r6,28(sp)
40008cc4:	d9c00817 	ldw	r7,32(sp)
40008cc8:	003f3006 	br	4000898c <__alt_data_end+0xc000898c>
	}
}

void set_luma_x(frame *f, int bx, int by, int x, int y, int wr_addr){

	WR_PIO(TX_0_BASE, 0                     );
40008ccc:	b8000035 	stwio	zero,0(r23)
	WR_PIO(TX_1_BASE, 0                     );
40008cd0:	b0000035 	stwio	zero,0(r22)
	WR_PIO(TX_2_BASE, ((uint32_t)p(x+0,y))  );
40008cd4:	89000217 	ldw	r4,8(r17)
40008cd8:	8a400617 	ldw	r9,24(r17)
40008cdc:	1111383a 	mul	r8,r2,r4
40008ce0:	4989883a 	add	r4,r9,r6
40008ce4:	2209883a 	add	r4,r4,r8
40008ce8:	210002c3 	ldbu	r4,11(r4)
40008cec:	a9000035 	stwio	r4,0(r21)
	WR_PIO(TX_3_BASE, ((uint32_t)p(x+1,y))  );
40008cf0:	89000217 	ldw	r4,8(r17)
40008cf4:	8a400617 	ldw	r9,24(r17)
40008cf8:	1111383a 	mul	r8,r2,r4
40008cfc:	4989883a 	add	r4,r9,r6
40008d00:	2209883a 	add	r4,r4,r8
40008d04:	21000303 	ldbu	r4,12(r4)
40008d08:	a1000035 	stwio	r4,0(r20)
	WR_PIO(TX_4_BASE, ((uint32_t)p(x+2,y))  );
40008d0c:	89000217 	ldw	r4,8(r17)
40008d10:	8a400617 	ldw	r9,24(r17)
40008d14:	1111383a 	mul	r8,r2,r4
40008d18:	4989883a 	add	r4,r9,r6
40008d1c:	2209883a 	add	r4,r4,r8
40008d20:	21000343 	ldbu	r4,13(r4)
40008d24:	99000035 	stwio	r4,0(r19)
	WR_PIO(TX_5_BASE, ((uint32_t)p(x+3,y))  );
40008d28:	89000217 	ldw	r4,8(r17)
40008d2c:	8a400617 	ldw	r9,24(r17)
40008d30:	1111383a 	mul	r8,r2,r4
40008d34:	4989883a 	add	r4,r9,r6
40008d38:	2209883a 	add	r4,r4,r8
40008d3c:	21000383 	ldbu	r4,14(r4)
40008d40:	91000035 	stwio	r4,0(r18)
	WR_PIO(TX_6_BASE, wr_addr               );
40008d44:	010000c4 	movi	r4,3
40008d48:	01441c04 	movi	r5,4208
40008d4c:	29000035 	stwio	r4,0(r5)
	WR_PIO(TX_7_BASE, 1                     );
40008d50:	00c41804 	movi	r3,4192
40008d54:	1c000035 	stwio	r16,0(r3)
	no_data_send(FORMAT_5 | IN_PLACE_INTRA_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
40008d58:	013000f4 	movhi	r4,49155
40008d5c:	21000144 	addi	r4,r4,5
40008d60:	d8800615 	stw	r2,24(sp)
40008d64:	d9800715 	stw	r6,28(sp)
40008d68:	d9c00815 	stw	r7,32(sp)
40008d6c:	000c26c0 	call	4000c26c <no_data_send>

}

void set_luma_single(frame *f, int bx, int by, int x, int y, int wr_addr){

	WR_PIO(TX_0_BASE, 0                     );
40008d70:	b8000035 	stwio	zero,0(r23)
	WR_PIO(TX_1_BASE, 0                     );
40008d74:	b0000035 	stwio	zero,0(r22)
	WR_PIO(TX_2_BASE, 0                     );
40008d78:	a8000035 	stwio	zero,0(r21)
	WR_PIO(TX_3_BASE, 0                     );
40008d7c:	a0000035 	stwio	zero,0(r20)
	WR_PIO(TX_4_BASE, 0                     );
40008d80:	98000035 	stwio	zero,0(r19)
	WR_PIO(TX_5_BASE, ((uint32_t)p(x,y))    );
40008d84:	89000217 	ldw	r4,8(r17)
40008d88:	d8800617 	ldw	r2,24(sp)
40008d8c:	8a000617 	ldw	r8,24(r17)
40008d90:	d9800717 	ldw	r6,28(sp)
40008d94:	1105383a 	mul	r2,r2,r4
40008d98:	418d883a 	add	r6,r8,r6
40008d9c:	308d883a 	add	r6,r6,r2
40008da0:	308003c3 	ldbu	r2,15(r6)
40008da4:	90800035 	stwio	r2,0(r18)
	WR_PIO(TX_6_BASE, wr_addr               );
40008da8:	00800104 	movi	r2,4
40008dac:	01441c04 	movi	r5,4208
40008db0:	28800035 	stwio	r2,0(r5)
	WR_PIO(TX_7_BASE, 1                     );
40008db4:	00841804 	movi	r2,4192
40008db8:	14000035 	stwio	r16,0(r2)
	no_data_send(FORMAT_5 | IN_PLACE_INTRA_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
40008dbc:	013000f4 	movhi	r4,49155
40008dc0:	21000144 	addi	r4,r4,5
40008dc4:	000c26c0 	call	4000c26c <no_data_send>
	no_data_send(FORMAT_5 | IN_PLACE_INTRA_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
}

void set_luma_y(frame *f, int bx, int by, int x, int y, int wr_addr){

	WR_PIO(TX_0_BASE, 0                     );
40008dc8:	b8000035 	stwio	zero,0(r23)
	WR_PIO(TX_1_BASE, 0                     );
40008dcc:	b0000035 	stwio	zero,0(r22)
	WR_PIO(TX_2_BASE, ((uint32_t)p(x,y+0))  );
40008dd0:	d9c00817 	ldw	r7,32(sp)
40008dd4:	89000217 	ldw	r4,8(r17)
40008dd8:	88800617 	ldw	r2,24(r17)
40008ddc:	39800204 	addi	r6,r7,8
40008de0:	3109383a 	mul	r4,r6,r4
40008de4:	1705883a 	add	r2,r2,fp
40008de8:	1105883a 	add	r2,r2,r4
40008dec:	10800003 	ldbu	r2,0(r2)
40008df0:	a8800035 	stwio	r2,0(r21)
	WR_PIO(TX_3_BASE, ((uint32_t)p(x,y+1))  );
40008df4:	89000217 	ldw	r4,8(r17)
40008df8:	39800244 	addi	r6,r7,9
40008dfc:	88800617 	ldw	r2,24(r17)
40008e00:	3109383a 	mul	r4,r6,r4
40008e04:	1705883a 	add	r2,r2,fp
40008e08:	1105883a 	add	r2,r2,r4
40008e0c:	10800003 	ldbu	r2,0(r2)
40008e10:	a0800035 	stwio	r2,0(r20)
	WR_PIO(TX_4_BASE, ((uint32_t)p(x,y+2))  );
40008e14:	89000217 	ldw	r4,8(r17)
40008e18:	39800284 	addi	r6,r7,10
40008e1c:	88800617 	ldw	r2,24(r17)
40008e20:	3109383a 	mul	r4,r6,r4
40008e24:	1705883a 	add	r2,r2,fp
40008e28:	1105883a 	add	r2,r2,r4
40008e2c:	10800003 	ldbu	r2,0(r2)
40008e30:	98800035 	stwio	r2,0(r19)
	WR_PIO(TX_5_BASE, ((uint32_t)p(x,y+3))  );
40008e34:	89000217 	ldw	r4,8(r17)
40008e38:	398002c4 	addi	r6,r7,11
40008e3c:	88800617 	ldw	r2,24(r17)
40008e40:	3109383a 	mul	r4,r6,r4
40008e44:	1705883a 	add	r2,r2,fp
40008e48:	1105883a 	add	r2,r2,r4
40008e4c:	10800003 	ldbu	r2,0(r2)
40008e50:	90800035 	stwio	r2,0(r18)
	WR_PIO(TX_6_BASE, wr_addr               );
40008e54:	008001c4 	movi	r2,7
40008e58:	00c41c04 	movi	r3,4208
40008e5c:	18800035 	stwio	r2,0(r3)
	WR_PIO(TX_7_BASE, 1                     );
40008e60:	01441804 	movi	r5,4192
40008e64:	2c000035 	stwio	r16,0(r5)
	no_data_send(FORMAT_5 | IN_PLACE_INTRA_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
40008e68:	013000f4 	movhi	r4,49155
40008e6c:	21000144 	addi	r4,r4,5
40008e70:	d9c00815 	stw	r7,32(sp)
40008e74:	000c26c0 	call	4000c26c <no_data_send>
	no_data_send(FORMAT_5 | IN_PLACE_INTRA_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
}

void set_luma_y(frame *f, int bx, int by, int x, int y, int wr_addr){

	WR_PIO(TX_0_BASE, 0                     );
40008e78:	b8000035 	stwio	zero,0(r23)
	WR_PIO(TX_1_BASE, 0                     );
40008e7c:	b0000035 	stwio	zero,0(r22)
	WR_PIO(TX_2_BASE, ((uint32_t)p(x,y+0))  );
40008e80:	d9c00817 	ldw	r7,32(sp)
40008e84:	89000217 	ldw	r4,8(r17)
40008e88:	88800617 	ldw	r2,24(r17)
40008e8c:	39800304 	addi	r6,r7,12
40008e90:	3109383a 	mul	r4,r6,r4
40008e94:	1705883a 	add	r2,r2,fp
40008e98:	1105883a 	add	r2,r2,r4
40008e9c:	10800003 	ldbu	r2,0(r2)
40008ea0:	a8800035 	stwio	r2,0(r21)
	WR_PIO(TX_3_BASE, ((uint32_t)p(x,y+1))  );
40008ea4:	89000217 	ldw	r4,8(r17)
40008ea8:	39800344 	addi	r6,r7,13
40008eac:	88800617 	ldw	r2,24(r17)
40008eb0:	3109383a 	mul	r4,r6,r4
40008eb4:	1705883a 	add	r2,r2,fp
40008eb8:	1105883a 	add	r2,r2,r4
40008ebc:	10800003 	ldbu	r2,0(r2)
40008ec0:	a0800035 	stwio	r2,0(r20)
	WR_PIO(TX_4_BASE, ((uint32_t)p(x,y+2))  );
40008ec4:	89000217 	ldw	r4,8(r17)
40008ec8:	39800384 	addi	r6,r7,14
40008ecc:	88800617 	ldw	r2,24(r17)
40008ed0:	3109383a 	mul	r4,r6,r4
40008ed4:	1705883a 	add	r2,r2,fp
40008ed8:	1105883a 	add	r2,r2,r4
40008edc:	10800003 	ldbu	r2,0(r2)
40008ee0:	98800035 	stwio	r2,0(r19)
	WR_PIO(TX_5_BASE, ((uint32_t)p(x,y+3))  );
40008ee4:	88800217 	ldw	r2,8(r17)
40008ee8:	89000617 	ldw	r4,24(r17)
40008eec:	39c003c4 	addi	r7,r7,15
40008ef0:	388f383a 	mul	r7,r7,r2
40008ef4:	2707883a 	add	r3,r4,fp
40008ef8:	19c7883a 	add	r3,r3,r7
40008efc:	18800003 	ldbu	r2,0(r3)
40008f00:	90800035 	stwio	r2,0(r18)
	WR_PIO(TX_6_BASE, wr_addr               );
40008f04:	00800204 	movi	r2,8
40008f08:	00c41c04 	movi	r3,4208
40008f0c:	18800035 	stwio	r2,0(r3)
	WR_PIO(TX_7_BASE, 1                     );
40008f10:	01441804 	movi	r5,4192
40008f14:	2c000035 	stwio	r16,0(r5)
	no_data_send(FORMAT_5 | IN_PLACE_INTRA_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
40008f18:	013000f4 	movhi	r4,49155
40008f1c:	21000144 	addi	r4,r4,5
40008f20:	000c26c0 	call	4000c26c <no_data_send>
40008f24:	003efe06 	br	40008b20 <__alt_data_end+0xc0008b20>

40008f28 <main>:
#include "noc_control.h"
#include <time.h>
#include "Buffer_Node_Sim.h"
#include "noc_control.h"

int main(void){
40008f28:	deffff04 	addi	sp,sp,-4
40008f2c:	dfc00015 	stw	ra,0(sp)
	noc_init();
40008f30:	000c1980 	call	4000c198 <noc_init>

	while(get_buffer_rx_state()){
40008f34:	00000106 	br	40008f3c <main+0x14>
		buffers_loop(1);
40008f38:	000c3500 	call	4000c350 <buffers_loop>
#include "noc_control.h"

int main(void){
	noc_init();

	while(get_buffer_rx_state()){
40008f3c:	000c2980 	call	4000c298 <get_buffer_rx_state>
		buffers_loop(1);
40008f40:	01000044 	movi	r4,1
#include "noc_control.h"

int main(void){
	noc_init();

	while(get_buffer_rx_state()){
40008f44:	103ffc1e 	bne	r2,zero,40008f38 <__alt_data_end+0xc0008f38>
		buffers_loop(1);
	}

	noc_init();
40008f48:	000c1980 	call	4000c198 <noc_init>

	while(1){
		simulate_buffer_node();
40008f4c:	00008cc0 	call	400008cc <simulate_buffer_node>
40008f50:	003ffe06 	br	40008f4c <__alt_data_end+0xc0008f4c>

40008f54 <send_luma_motion_comp_fast>:
  return b;
}

int send_luma_motion_comp_fast(frame *ref, int org_x, int org_y, int frac){
	static int id = 127;
	id = (id+1)%(LUMA_MOCOMP_MAX-LUMA_MOCOMP_MIN) + LUMA_MOCOMP_MIN;
40008f54:	d0a00317 	ldw	r2,-32756(gp)
    }
  }
  return b;
}

int send_luma_motion_comp_fast(frame *ref, int org_x, int org_y, int frac){
40008f58:	defff004 	addi	sp,sp,-64
40008f5c:	dcc00915 	stw	r19,36(sp)
	static int id = 127;
	id = (id+1)%(LUMA_MOCOMP_MAX-LUMA_MOCOMP_MIN) + LUMA_MOCOMP_MIN;
40008f60:	10c00044 	addi	r3,r2,1
40008f64:	00a00034 	movhi	r2,32768
40008f68:	108007c4 	addi	r2,r2,31
    }
  }
  return b;
}

int send_luma_motion_comp_fast(frame *ref, int org_x, int org_y, int frac){
40008f6c:	dc800815 	stw	r18,32(sp)
40008f70:	dc000615 	stw	r16,24(sp)
40008f74:	dfc00f15 	stw	ra,60(sp)
40008f78:	df000e15 	stw	fp,56(sp)
40008f7c:	ddc00d15 	stw	r23,52(sp)
40008f80:	dd800c15 	stw	r22,48(sp)
40008f84:	dd400b15 	stw	r21,44(sp)
40008f88:	dd000a15 	stw	r20,40(sp)
40008f8c:	dc400715 	stw	r17,28(sp)
	static int id = 127;
	id = (id+1)%(LUMA_MOCOMP_MAX-LUMA_MOCOMP_MIN) + LUMA_MOCOMP_MIN;
40008f90:	1884703a 	and	r2,r3,r2
    }
  }
  return b;
}

int send_luma_motion_comp_fast(frame *ref, int org_x, int org_y, int frac){
40008f94:	d9800415 	stw	r6,16(sp)
40008f98:	2025883a 	mov	r18,r4
40008f9c:	2827883a 	mov	r19,r5
40008fa0:	3821883a 	mov	r16,r7
	static int id = 127;
	id = (id+1)%(LUMA_MOCOMP_MAX-LUMA_MOCOMP_MIN) + LUMA_MOCOMP_MIN;
40008fa4:	10011916 	blt	r2,zero,4000940c <send_luma_motion_comp_fast+0x4b8>
40008fa8:	10800844 	addi	r2,r2,33
	send_flit(LINTER_0_ADDR, id, id, 0);
40008fac:	100d883a 	mov	r6,r2
40008fb0:	100b883a 	mov	r5,r2
40008fb4:	000f883a 	mov	r7,zero
40008fb8:	01000144 	movi	r4,5
  return b;
}

int send_luma_motion_comp_fast(frame *ref, int org_x, int org_y, int frac){
	static int id = 127;
	id = (id+1)%(LUMA_MOCOMP_MAX-LUMA_MOCOMP_MIN) + LUMA_MOCOMP_MIN;
40008fbc:	d0a00315 	stw	r2,-32756(gp)
	send_flit(LINTER_0_ADDR, id, id, 0);
40008fc0:	000c2000 	call	4000c200 <send_flit>
	uint32_t sizes = (0x0F & (uint64_t)frac) | (4 << 8) | (4 << 16);
	send_flit(LINTER_0_ADDR, 0, sizes, 0);
40008fc4:	01800134 	movhi	r6,4
40008fc8:	840003cc 	andi	r16,r16,15
40008fcc:	31810004 	addi	r6,r6,1024
40008fd0:	000f883a 	mov	r7,zero
40008fd4:	818cb03a 	or	r6,r16,r6
40008fd8:	000b883a 	mov	r5,zero
40008fdc:	01000144 	movi	r4,5
40008fe0:	000c2000 	call	4000c200 <send_flit>
40008fe4:	98800204 	addi	r2,r19,8
40008fe8:	d8800515 	stw	r2,20(sp)
40008fec:	00bffe84 	movi	r2,-6
40008ff0:	98c001c4 	addi	r3,r19,7
40008ff4:	98810316 	blt	r19,r2,40009404 <send_luma_motion_comp_fast+0x4b0>
40008ff8:	d8c00015 	stw	r3,0(sp)
40008ffc:	00bffec4 	movi	r2,-5
40009000:	98c00184 	addi	r3,r19,6
40009004:	9880fd16 	blt	r19,r2,400093fc <send_luma_motion_comp_fast+0x4a8>
40009008:	d8c00115 	stw	r3,4(sp)
4000900c:	00bfff04 	movi	r2,-4
40009010:	9d000144 	addi	r20,r19,5
40009014:	9880f716 	blt	r19,r2,400093f4 <send_luma_motion_comp_fast+0x4a0>
40009018:	dd000215 	stw	r20,8(sp)
4000901c:	00bfff44 	movi	r2,-3
40009020:	9d400104 	addi	r21,r19,4
40009024:	9880010e 	bge	r19,r2,4000902c <send_luma_motion_comp_fast+0xd8>
40009028:	002b883a 	mov	r21,zero
4000902c:	00bfff84 	movi	r2,-2
40009030:	9d8000c4 	addi	r22,r19,3
40009034:	9880010e 	bge	r19,r2,4000903c <send_luma_motion_comp_fast+0xe8>
40009038:	002d883a 	mov	r22,zero
4000903c:	00bfffc4 	movi	r2,-1
40009040:	9dc00084 	addi	r23,r19,2
40009044:	9880010e 	bge	r19,r2,4000904c <send_luma_motion_comp_fast+0xf8>
40009048:	002f883a 	mov	r23,zero
4000904c:	9c400044 	addi	r17,r19,1
40009050:	9800f316 	blt	r19,zero,40009420 <send_luma_motion_comp_fast+0x4cc>
40009054:	dc400315 	stw	r17,12(sp)
			WR_PIO(TX_1_BASE, L_pixel(ref,x6,sy)  );
			WR_PIO(TX_2_BASE, L_pixel(ref,x5,sy)  );
			WR_PIO(TX_3_BASE, L_pixel(ref,x4,sy)  );
			WR_PIO(TX_4_BASE, L_pixel(ref,x3,sy)  );
			WR_PIO(TX_5_BASE, L_pixel(ref,x2,sy)  );
			WR_PIO(TX_6_BASE, L_pixel(ref,x1,sy)  );
40009058:	9023883a 	mov	r17,r18
	send_flit(LINTER_0_ADDR, id, id, 0);
	uint32_t sizes = (0x0F & (uint64_t)frac) | (4 << 8) | (4 << 16);
	send_flit(LINTER_0_ADDR, 0, sizes, 0);

	int x,y,sx,sy;
	for(y=0; y<9; ++y) {
4000905c:	0039883a 	mov	fp,zero
			x1     = (x1 < ref->Lwidth)?x1: ref->Lwidth-1;

			int x0 = ((sx)>0)?sx:0;
			x0     = (x0 < ref->Lwidth)?x0: ref->Lwidth-1;

			WR_PIO(TX_0_BASE, L_pixel(ref,x7,sy)  );
40009060:	04044404 	movi	r16,4368
			WR_PIO(TX_1_BASE, L_pixel(ref,x6,sy)  );
			WR_PIO(TX_2_BASE, L_pixel(ref,x5,sy)  );
			WR_PIO(TX_3_BASE, L_pixel(ref,x4,sy)  );
			WR_PIO(TX_4_BASE, L_pixel(ref,x3,sy)  );
			WR_PIO(TX_5_BASE, L_pixel(ref,x2,sy)  );
			WR_PIO(TX_6_BASE, L_pixel(ref,x1,sy)  );
40009064:	9825883a 	mov	r18,r19
40009068:	d8800417 	ldw	r2,16(sp)
4000906c:	1729883a 	add	r20,r2,fp
40009070:	a000de16 	blt	r20,zero,400093ec <send_luma_motion_comp_fast+0x498>
	for(y=0; y<9; ++y) {
		sy=org_y+y;
		if(sy<0){
			sy=0;
		}
		if(sy>=ref->Lheight){
40009074:	89000117 	ldw	r4,4(r17)
40009078:	a1000116 	blt	r20,r4,40009080 <send_luma_motion_comp_fast+0x12c>
			sy=ref->Lheight-1;
4000907c:	253fffc4 	addi	r20,r4,-1
		}
		sx = org_x;
		if((sx >= 0) && ((sx+8) < ref->Lwidth)){
40009080:	90008716 	blt	r18,zero,400092a0 <send_luma_motion_comp_fast+0x34c>
40009084:	89000017 	ldw	r4,0(r17)
40009088:	d8800517 	ldw	r2,20(sp)
4000908c:	11008a16 	blt	r2,r4,400092b8 <send_luma_motion_comp_fast+0x364>
			no_data_send(FORMAT_0 | IN_PLACE_LINTER_0_ADDR | CPU_TX_REQ | (y==8?TAIL_FLIT_BIT:0));
		}else{


			int x8 = ((sx+8)>0)?sx+8:0;
			x8     = (x8 < ref->Lwidth)?x8: ref->Lwidth-1;
40009090:	24ffffc4 	addi	r19,r4,-1

			int x7 = ((sx+7)>0)?sx+7:0;
			x7     = (x7 < ref->Lwidth)?x7: ref->Lwidth-1;
40009094:	d8800017 	ldw	r2,0(sp)
40009098:	11007f16 	blt	r2,r4,40009298 <send_luma_motion_comp_fast+0x344>
4000909c:	27ffffc4 	addi	ra,r4,-1

			int x6 = ((sx+6)>0)?sx+6:0;
			x6     = (x6 < ref->Lwidth)?x6: ref->Lwidth-1;
400090a0:	d8800117 	ldw	r2,4(sp)
400090a4:	11007a16 	blt	r2,r4,40009290 <send_luma_motion_comp_fast+0x33c>
400090a8:	233fffc4 	addi	r12,r4,-1

			int x5 = ((sx+5)>0)?sx+5:0;
			x5     = (x5 < ref->Lwidth)?x5: ref->Lwidth-1;
400090ac:	d8800217 	ldw	r2,8(sp)
400090b0:	11007516 	blt	r2,r4,40009288 <send_luma_motion_comp_fast+0x334>
400090b4:	23bfffc4 	addi	r14,r4,-1

			int x4 = ((sx+4)>0)?sx+4:0;
			x4     = (x4 < ref->Lwidth)?x4: ref->Lwidth-1;
400090b8:	a9007116 	blt	r21,r4,40009280 <send_luma_motion_comp_fast+0x32c>
400090bc:	22bfffc4 	addi	r10,r4,-1

			int x3 = ((sx+3)>0)?sx+3:0;
			x3     = (x3 < ref->Lwidth)?x3: ref->Lwidth-1;
400090c0:	b1006816 	blt	r22,r4,40009264 <send_luma_motion_comp_fast+0x310>
400090c4:	237fffc4 	addi	r13,r4,-1

			int x2 = ((sx+2)>0)?sx+2:0;
			x2     = (x2 < ref->Lwidth)?x2: ref->Lwidth-1;
400090c8:	b9006816 	blt	r23,r4,4000926c <send_luma_motion_comp_fast+0x318>

			int x1 = ((sx+1)>0)?sx+1:0;
			x1     = (x1 < ref->Lwidth)?x1: ref->Lwidth-1;
400090cc:	d8800317 	ldw	r2,12(sp)

			int x3 = ((sx+3)>0)?sx+3:0;
			x3     = (x3 < ref->Lwidth)?x3: ref->Lwidth-1;

			int x2 = ((sx+2)>0)?sx+2:0;
			x2     = (x2 < ref->Lwidth)?x2: ref->Lwidth-1;
400090d0:	21ffffc4 	addi	r7,r4,-1

			int x1 = ((sx+1)>0)?sx+1:0;
			x1     = (x1 < ref->Lwidth)?x1: ref->Lwidth-1;
400090d4:	11006816 	blt	r2,r4,40009278 <send_luma_motion_comp_fast+0x324>
400090d8:	21bfffc4 	addi	r6,r4,-1

			int x0 = ((sx)>0)?sx:0;
400090dc:	9017883a 	mov	r11,r18
400090e0:	90005e16 	blt	r18,zero,4000925c <send_luma_motion_comp_fast+0x308>
			x0     = (x0 < ref->Lwidth)?x0: ref->Lwidth-1;
400090e4:	59000116 	blt	r11,r4,400090ec <send_luma_motion_comp_fast+0x198>
400090e8:	22ffffc4 	addi	r11,r4,-1

			WR_PIO(TX_0_BASE, L_pixel(ref,x7,sy)  );
400090ec:	8bc00217 	ldw	r15,8(r17)
400090f0:	89000617 	ldw	r4,24(r17)
400090f4:	a3df383a 	mul	r15,r20,r15
400090f8:	27c9883a 	add	r4,r4,ra
400090fc:	23c9883a 	add	r4,r4,r15
40009100:	21000003 	ldbu	r4,0(r4)
40009104:	81000035 	stwio	r4,0(r16)
			WR_PIO(TX_1_BASE, L_pixel(ref,x6,sy)  );
40009108:	89000217 	ldw	r4,8(r17)
4000910c:	8bc00617 	ldw	r15,24(r17)
40009110:	00844004 	movi	r2,4352
40009114:	a109383a 	mul	r4,r20,r4
40009118:	7b19883a 	add	r12,r15,r12
4000911c:	6119883a 	add	r12,r12,r4
40009120:	61000003 	ldbu	r4,0(r12)
40009124:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_2_BASE, L_pixel(ref,x5,sy)  );
40009128:	8b000217 	ldw	r12,8(r17)
4000912c:	89000617 	ldw	r4,24(r17)
40009130:	00842c04 	movi	r2,4272
40009134:	a319383a 	mul	r12,r20,r12
40009138:	2389883a 	add	r4,r4,r14
4000913c:	2309883a 	add	r4,r4,r12
40009140:	21000003 	ldbu	r4,0(r4)
40009144:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_3_BASE, L_pixel(ref,x4,sy)  );
40009148:	8b000217 	ldw	r12,8(r17)
4000914c:	89000617 	ldw	r4,24(r17)
40009150:	00842804 	movi	r2,4256
40009154:	a319383a 	mul	r12,r20,r12
40009158:	2295883a 	add	r10,r4,r10
4000915c:	5315883a 	add	r10,r10,r12
40009160:	51000003 	ldbu	r4,0(r10)
40009164:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_4_BASE, L_pixel(ref,x3,sy)  );
40009168:	8a800217 	ldw	r10,8(r17)
4000916c:	89000617 	ldw	r4,24(r17)
40009170:	00842404 	movi	r2,4240
40009174:	a295383a 	mul	r10,r20,r10
40009178:	2349883a 	add	r4,r4,r13
4000917c:	2289883a 	add	r4,r4,r10
40009180:	21000003 	ldbu	r4,0(r4)
40009184:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_5_BASE, L_pixel(ref,x2,sy)  );
40009188:	8a800217 	ldw	r10,8(r17)
4000918c:	89000617 	ldw	r4,24(r17)
40009190:	00842004 	movi	r2,4224
40009194:	a295383a 	mul	r10,r20,r10
40009198:	21cf883a 	add	r7,r4,r7
4000919c:	3a8f883a 	add	r7,r7,r10
400091a0:	39000003 	ldbu	r4,0(r7)
400091a4:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_6_BASE, L_pixel(ref,x1,sy)  );
400091a8:	89c00217 	ldw	r7,8(r17)
400091ac:	89000617 	ldw	r4,24(r17)
400091b0:	00841c04 	movi	r2,4208
400091b4:	a1cf383a 	mul	r7,r20,r7
400091b8:	218d883a 	add	r6,r4,r6
400091bc:	31cd883a 	add	r6,r6,r7
400091c0:	31000003 	ldbu	r4,0(r6)
400091c4:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_7_BASE, L_pixel(ref,x0,sy)  );
400091c8:	89800217 	ldw	r6,8(r17)
400091cc:	89000617 	ldw	r4,24(r17)
400091d0:	a18d383a 	mul	r6,r20,r6
400091d4:	22c9883a 	add	r4,r4,r11
400091d8:	2189883a 	add	r4,r4,r6
400091dc:	21800003 	ldbu	r6,0(r4)
400091e0:	01041804 	movi	r4,4192
400091e4:	21800035 	stwio	r6,0(r4)
			no_data_send(FORMAT_0 | IN_PLACE_LINTER_0_ADDR | CPU_TX_REQ);
400091e8:	01100174 	movhi	r4,16389
400091ec:	000c26c0 	call	4000c26c <no_data_send>
			WR_PIO(TX_0_BASE, L_pixel(ref,x8,sy)  );
400091f0:	89000217 	ldw	r4,8(r17)
400091f4:	89800617 	ldw	r6,24(r17)
400091f8:	a107383a 	mul	r3,r20,r4
400091fc:	34d3883a 	add	r9,r6,r19
40009200:	48c7883a 	add	r3,r9,r3
40009204:	18c00003 	ldbu	r3,0(r3)
40009208:	80c00035 	stwio	r3,0(r16)
			no_data_send(FORMAT_0 | IN_PLACE_LINTER_0_ADDR | CPU_TX_REQ | (y==8?TAIL_FLIT_BIT:0));
4000920c:	00c00204 	movi	r3,8
40009210:	e0c07426 	beq	fp,r3,400093e4 <send_luma_motion_comp_fast+0x490>
40009214:	01100174 	movhi	r4,16389
40009218:	000c26c0 	call	4000c26c <no_data_send>
	send_flit(LINTER_0_ADDR, id, id, 0);
	uint32_t sizes = (0x0F & (uint64_t)frac) | (4 << 8) | (4 << 16);
	send_flit(LINTER_0_ADDR, 0, sizes, 0);

	int x,y,sx,sy;
	for(y=0; y<9; ++y) {
4000921c:	e7000044 	addi	fp,fp,1
40009220:	00c00244 	movi	r3,9
40009224:	e0ff901e 	bne	fp,r3,40009068 <__alt_data_end+0xc0009068>

	}

	return id;

}
40009228:	d0a00317 	ldw	r2,-32756(gp)
4000922c:	dfc00f17 	ldw	ra,60(sp)
40009230:	df000e17 	ldw	fp,56(sp)
40009234:	ddc00d17 	ldw	r23,52(sp)
40009238:	dd800c17 	ldw	r22,48(sp)
4000923c:	dd400b17 	ldw	r21,44(sp)
40009240:	dd000a17 	ldw	r20,40(sp)
40009244:	dcc00917 	ldw	r19,36(sp)
40009248:	dc800817 	ldw	r18,32(sp)
4000924c:	dc400717 	ldw	r17,28(sp)
40009250:	dc000617 	ldw	r16,24(sp)
40009254:	dec01004 	addi	sp,sp,64
40009258:	f800283a 	ret
			x2     = (x2 < ref->Lwidth)?x2: ref->Lwidth-1;

			int x1 = ((sx+1)>0)?sx+1:0;
			x1     = (x1 < ref->Lwidth)?x1: ref->Lwidth-1;

			int x0 = ((sx)>0)?sx:0;
4000925c:	0017883a 	mov	r11,zero
40009260:	003fa006 	br	400090e4 <__alt_data_end+0xc00090e4>
40009264:	b01b883a 	mov	r13,r22

			int x3 = ((sx+3)>0)?sx+3:0;
			x3     = (x3 < ref->Lwidth)?x3: ref->Lwidth-1;

			int x2 = ((sx+2)>0)?sx+2:0;
			x2     = (x2 < ref->Lwidth)?x2: ref->Lwidth-1;
40009268:	b93f980e 	bge	r23,r4,400090cc <__alt_data_end+0xc00090cc>

			int x1 = ((sx+1)>0)?sx+1:0;
			x1     = (x1 < ref->Lwidth)?x1: ref->Lwidth-1;
4000926c:	d8800317 	ldw	r2,12(sp)
40009270:	b80f883a 	mov	r7,r23
40009274:	113f980e 	bge	r2,r4,400090d8 <__alt_data_end+0xc00090d8>
40009278:	100d883a 	mov	r6,r2
4000927c:	003f9706 	br	400090dc <__alt_data_end+0xc00090dc>
40009280:	a815883a 	mov	r10,r21
40009284:	003f8e06 	br	400090c0 <__alt_data_end+0xc00090c0>
40009288:	101d883a 	mov	r14,r2
4000928c:	003f8a06 	br	400090b8 <__alt_data_end+0xc00090b8>
40009290:	1019883a 	mov	r12,r2
40009294:	003f8506 	br	400090ac <__alt_data_end+0xc00090ac>
40009298:	103f883a 	mov	ra,r2
4000929c:	003f8006 	br	400090a0 <__alt_data_end+0xc00090a0>
			WR_PIO(TX_0_BASE, L_pixel(ref,sx+8,sy)  );
			no_data_send(FORMAT_0 | IN_PLACE_LINTER_0_ADDR | CPU_TX_REQ | (y==8?TAIL_FLIT_BIT:0));
		}else{


			int x8 = ((sx+8)>0)?sx+8:0;
400092a0:	013ffe44 	movi	r4,-7
400092a4:	9100600e 	bge	r18,r4,40009428 <send_luma_motion_comp_fast+0x4d4>
400092a8:	89000017 	ldw	r4,0(r17)
400092ac:	0027883a 	mov	r19,zero
			x8     = (x8 < ref->Lwidth)?x8: ref->Lwidth-1;
400092b0:	993f7816 	blt	r19,r4,40009094 <__alt_data_end+0xc0009094>
400092b4:	003f7606 	br	40009090 <__alt_data_end+0xc0009090>
		if(sy>=ref->Lheight){
			sy=ref->Lheight-1;
		}
		sx = org_x;
		if((sx >= 0) && ((sx+8) < ref->Lwidth)){
			WR_PIO(TX_0_BASE, L_pixel(ref,sx+7,sy)  );
400092b8:	89000217 	ldw	r4,8(r17)
400092bc:	89c00617 	ldw	r7,24(r17)
400092c0:	a10d383a 	mul	r6,r20,r4
400092c4:	3c89883a 	add	r4,r7,r18
400092c8:	2189883a 	add	r4,r4,r6
400092cc:	210001c3 	ldbu	r4,7(r4)
400092d0:	81000035 	stwio	r4,0(r16)
			WR_PIO(TX_1_BASE, L_pixel(ref,sx+6,sy)  );
400092d4:	89000217 	ldw	r4,8(r17)
400092d8:	89c00617 	ldw	r7,24(r17)
400092dc:	00844004 	movi	r2,4352
400092e0:	a10d383a 	mul	r6,r20,r4
400092e4:	3c89883a 	add	r4,r7,r18
400092e8:	2189883a 	add	r4,r4,r6
400092ec:	21000183 	ldbu	r4,6(r4)
400092f0:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_2_BASE, L_pixel(ref,sx+5,sy)  );
400092f4:	89000217 	ldw	r4,8(r17)
400092f8:	89c00617 	ldw	r7,24(r17)
400092fc:	00842c04 	movi	r2,4272
40009300:	a10d383a 	mul	r6,r20,r4
40009304:	3c89883a 	add	r4,r7,r18
40009308:	2189883a 	add	r4,r4,r6
4000930c:	21000143 	ldbu	r4,5(r4)
40009310:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_3_BASE, L_pixel(ref,sx+4,sy)  );
40009314:	89000217 	ldw	r4,8(r17)
40009318:	89c00617 	ldw	r7,24(r17)
4000931c:	00842804 	movi	r2,4256
40009320:	a10d383a 	mul	r6,r20,r4
40009324:	3c89883a 	add	r4,r7,r18
40009328:	2189883a 	add	r4,r4,r6
4000932c:	21000103 	ldbu	r4,4(r4)
40009330:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_4_BASE, L_pixel(ref,sx+3,sy)  );
40009334:	89000217 	ldw	r4,8(r17)
40009338:	89c00617 	ldw	r7,24(r17)
4000933c:	00842404 	movi	r2,4240
40009340:	a10d383a 	mul	r6,r20,r4
40009344:	3c89883a 	add	r4,r7,r18
40009348:	2189883a 	add	r4,r4,r6
4000934c:	210000c3 	ldbu	r4,3(r4)
40009350:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_5_BASE, L_pixel(ref,sx+2,sy)  );
40009354:	89000217 	ldw	r4,8(r17)
40009358:	89c00617 	ldw	r7,24(r17)
4000935c:	00842004 	movi	r2,4224
40009360:	a10d383a 	mul	r6,r20,r4
40009364:	3c89883a 	add	r4,r7,r18
40009368:	2189883a 	add	r4,r4,r6
4000936c:	21000083 	ldbu	r4,2(r4)
40009370:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_6_BASE, L_pixel(ref,sx+1,sy)  );
40009374:	89000217 	ldw	r4,8(r17)
40009378:	89c00617 	ldw	r7,24(r17)
4000937c:	00841c04 	movi	r2,4208
40009380:	a10d383a 	mul	r6,r20,r4
40009384:	3c89883a 	add	r4,r7,r18
40009388:	2189883a 	add	r4,r4,r6
4000938c:	21000043 	ldbu	r4,1(r4)
40009390:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_7_BASE, L_pixel(ref,sx+0,sy)  );
40009394:	89000217 	ldw	r4,8(r17)
40009398:	89c00617 	ldw	r7,24(r17)
4000939c:	a10d383a 	mul	r6,r20,r4
400093a0:	3c89883a 	add	r4,r7,r18
400093a4:	2189883a 	add	r4,r4,r6
400093a8:	21800003 	ldbu	r6,0(r4)
400093ac:	01041804 	movi	r4,4192
400093b0:	21800035 	stwio	r6,0(r4)
			no_data_send(FORMAT_0 | IN_PLACE_LINTER_0_ADDR | CPU_TX_REQ);
400093b4:	01100174 	movhi	r4,16389
400093b8:	000c26c0 	call	4000c26c <no_data_send>
			WR_PIO(TX_0_BASE, L_pixel(ref,sx+8,sy)  );
400093bc:	89000217 	ldw	r4,8(r17)
400093c0:	89800617 	ldw	r6,24(r17)
400093c4:	d8800517 	ldw	r2,20(sp)
400093c8:	a107383a 	mul	r3,r20,r4
400093cc:	3089883a 	add	r4,r6,r2
400093d0:	20c7883a 	add	r3,r4,r3
400093d4:	18c00003 	ldbu	r3,0(r3)
400093d8:	80c00035 	stwio	r3,0(r16)
			no_data_send(FORMAT_0 | IN_PLACE_LINTER_0_ADDR | CPU_TX_REQ | (y==8?TAIL_FLIT_BIT:0));
400093dc:	00c00204 	movi	r3,8
400093e0:	e0ff8c1e 	bne	fp,r3,40009214 <__alt_data_end+0xc0009214>
			WR_PIO(TX_5_BASE, L_pixel(ref,x2,sy)  );
			WR_PIO(TX_6_BASE, L_pixel(ref,x1,sy)  );
			WR_PIO(TX_7_BASE, L_pixel(ref,x0,sy)  );
			no_data_send(FORMAT_0 | IN_PLACE_LINTER_0_ADDR | CPU_TX_REQ);
			WR_PIO(TX_0_BASE, L_pixel(ref,x8,sy)  );
			no_data_send(FORMAT_0 | IN_PLACE_LINTER_0_ADDR | CPU_TX_REQ | (y==8?TAIL_FLIT_BIT:0));
400093e4:	01300174 	movhi	r4,49157
400093e8:	003f8b06 	br	40009218 <__alt_data_end+0xc0009218>
400093ec:	0029883a 	mov	r20,zero
400093f0:	003f2006 	br	40009074 <__alt_data_end+0xc0009074>
400093f4:	d8000215 	stw	zero,8(sp)
400093f8:	003f0806 	br	4000901c <__alt_data_end+0xc000901c>
400093fc:	d8000115 	stw	zero,4(sp)
40009400:	003f0206 	br	4000900c <__alt_data_end+0xc000900c>
40009404:	d8000015 	stw	zero,0(sp)
40009408:	003efc06 	br	40008ffc <__alt_data_end+0xc0008ffc>
  return b;
}

int send_luma_motion_comp_fast(frame *ref, int org_x, int org_y, int frac){
	static int id = 127;
	id = (id+1)%(LUMA_MOCOMP_MAX-LUMA_MOCOMP_MIN) + LUMA_MOCOMP_MIN;
4000940c:	10bfffc4 	addi	r2,r2,-1
40009410:	00fff804 	movi	r3,-32
40009414:	10c4b03a 	or	r2,r2,r3
40009418:	10800044 	addi	r2,r2,1
4000941c:	003ee206 	br	40008fa8 <__alt_data_end+0xc0008fa8>
40009420:	d8000315 	stw	zero,12(sp)
40009424:	003f0c06 	br	40009058 <__alt_data_end+0xc0009058>
40009428:	89000017 	ldw	r4,0(r17)
4000942c:	dcc00517 	ldw	r19,20(sp)
			no_data_send(FORMAT_0 | IN_PLACE_LINTER_0_ADDR | CPU_TX_REQ | (y==8?TAIL_FLIT_BIT:0));
		}else{


			int x8 = ((sx+8)>0)?sx+8:0;
			x8     = (x8 < ref->Lwidth)?x8: ref->Lwidth-1;
40009430:	993f1816 	blt	r19,r4,40009094 <__alt_data_end+0xc0009094>
40009434:	003f1606 	br	40009090 <__alt_data_end+0xc0009090>

40009438 <rx_luma_motion_comp_packet>:
	return id;

}

void rx_luma_motion_comp_packet(int id, frame *this, int org_x, int org_y)
{
40009438:	defffb04 	addi	sp,sp,-20
4000943c:	dcc00315 	stw	r19,12(sp)
40009440:	dc800215 	stw	r18,8(sp)
40009444:	dc400115 	stw	r17,4(sp)
40009448:	dc000015 	stw	r16,0(sp)
4000944c:	dfc00415 	stw	ra,16(sp)
40009450:	2027883a 	mov	r19,r4
40009454:	2821883a 	mov	r16,r5
40009458:	3023883a 	mov	r17,r6
4000945c:	3825883a 	mov	r18,r7
	//start = read_timer();
	packet *inter_packet = (void *)0;
	while(inter_packet == (void *)0){
		inter_packet = get_packet_pointer_by_id(id);
40009460:	9809883a 	mov	r4,r19
40009464:	000c5340 	call	4000c534 <get_packet_pointer_by_id>
		if(inter_packet == (void *)0){
40009468:	10007e26 	beq	r2,zero,40009664 <rx_luma_motion_comp_packet+0x22c>
	}

	inter_rx_struct *flit_1 = (inter_rx_struct *)(&(inter_packet->data.flit[1]));
	inter_rx_struct *flit_2 = (inter_rx_struct *)(&(inter_packet->data.flit[2]));

	L_pixel(this,0+org_x,0+org_y) = flit_1->byte_7;
4000946c:	81000217 	ldw	r4,8(r16)
40009470:	80c00617 	ldw	r3,24(r16)
40009474:	114003c3 	ldbu	r5,15(r2)
40009478:	9109383a 	mul	r4,r18,r4
4000947c:	1c47883a 	add	r3,r3,r17
	L_pixel(this,1+org_x,0+org_y) = flit_1->byte_6;
40009480:	89c00044 	addi	r7,r17,1
	}

	inter_rx_struct *flit_1 = (inter_rx_struct *)(&(inter_packet->data.flit[1]));
	inter_rx_struct *flit_2 = (inter_rx_struct *)(&(inter_packet->data.flit[2]));

	L_pixel(this,0+org_x,0+org_y) = flit_1->byte_7;
40009484:	1907883a 	add	r3,r3,r4
40009488:	19400005 	stb	r5,0(r3)
	L_pixel(this,1+org_x,0+org_y) = flit_1->byte_6;
4000948c:	81000217 	ldw	r4,8(r16)
40009490:	80c00617 	ldw	r3,24(r16)
40009494:	11800383 	ldbu	r6,14(r2)
40009498:	9109383a 	mul	r4,r18,r4
4000949c:	19c7883a 	add	r3,r3,r7
	L_pixel(this,2+org_x,0+org_y) = flit_1->byte_5;
400094a0:	89400084 	addi	r5,r17,2

	inter_rx_struct *flit_1 = (inter_rx_struct *)(&(inter_packet->data.flit[1]));
	inter_rx_struct *flit_2 = (inter_rx_struct *)(&(inter_packet->data.flit[2]));

	L_pixel(this,0+org_x,0+org_y) = flit_1->byte_7;
	L_pixel(this,1+org_x,0+org_y) = flit_1->byte_6;
400094a4:	1907883a 	add	r3,r3,r4
400094a8:	19800005 	stb	r6,0(r3)
	L_pixel(this,2+org_x,0+org_y) = flit_1->byte_5;
400094ac:	81800217 	ldw	r6,8(r16)
400094b0:	81000617 	ldw	r4,24(r16)
400094b4:	12000343 	ldbu	r8,13(r2)
400094b8:	918d383a 	mul	r6,r18,r6
400094bc:	2149883a 	add	r4,r4,r5
	L_pixel(this,3+org_x,0+org_y) = flit_1->byte_4;
400094c0:	88c000c4 	addi	r3,r17,3
	inter_rx_struct *flit_1 = (inter_rx_struct *)(&(inter_packet->data.flit[1]));
	inter_rx_struct *flit_2 = (inter_rx_struct *)(&(inter_packet->data.flit[2]));

	L_pixel(this,0+org_x,0+org_y) = flit_1->byte_7;
	L_pixel(this,1+org_x,0+org_y) = flit_1->byte_6;
	L_pixel(this,2+org_x,0+org_y) = flit_1->byte_5;
400094c4:	2189883a 	add	r4,r4,r6
400094c8:	22000005 	stb	r8,0(r4)
	L_pixel(this,3+org_x,0+org_y) = flit_1->byte_4;
400094cc:	81800217 	ldw	r6,8(r16)
400094d0:	81000617 	ldw	r4,24(r16)
400094d4:	12000303 	ldbu	r8,12(r2)
400094d8:	918d383a 	mul	r6,r18,r6
400094dc:	20c9883a 	add	r4,r4,r3
	L_pixel(this,0+org_x,1+org_y) = flit_1->byte_3;
400094e0:	92400044 	addi	r9,r18,1
	inter_rx_struct *flit_2 = (inter_rx_struct *)(&(inter_packet->data.flit[2]));

	L_pixel(this,0+org_x,0+org_y) = flit_1->byte_7;
	L_pixel(this,1+org_x,0+org_y) = flit_1->byte_6;
	L_pixel(this,2+org_x,0+org_y) = flit_1->byte_5;
	L_pixel(this,3+org_x,0+org_y) = flit_1->byte_4;
400094e4:	2189883a 	add	r4,r4,r6
400094e8:	22000005 	stb	r8,0(r4)
	L_pixel(this,0+org_x,1+org_y) = flit_1->byte_3;
400094ec:	82000217 	ldw	r8,8(r16)
400094f0:	81000617 	ldw	r4,24(r16)
400094f4:	128002c3 	ldbu	r10,11(r2)
400094f8:	4a11383a 	mul	r8,r9,r8
400094fc:	2449883a 	add	r4,r4,r17
	L_pixel(this,1+org_x,1+org_y) = flit_1->byte_2;
	L_pixel(this,2+org_x,1+org_y) = flit_1->byte_1;
	L_pixel(this,3+org_x,1+org_y) = flit_1->byte_0;
	L_pixel(this,0+org_x,2+org_y) = flit_2->byte_7;
40009500:	91800084 	addi	r6,r18,2

	L_pixel(this,0+org_x,0+org_y) = flit_1->byte_7;
	L_pixel(this,1+org_x,0+org_y) = flit_1->byte_6;
	L_pixel(this,2+org_x,0+org_y) = flit_1->byte_5;
	L_pixel(this,3+org_x,0+org_y) = flit_1->byte_4;
	L_pixel(this,0+org_x,1+org_y) = flit_1->byte_3;
40009504:	2209883a 	add	r4,r4,r8
40009508:	22800005 	stb	r10,0(r4)
	L_pixel(this,1+org_x,1+org_y) = flit_1->byte_2;
4000950c:	82000217 	ldw	r8,8(r16)
40009510:	81000617 	ldw	r4,24(r16)
40009514:	12800283 	ldbu	r10,10(r2)
40009518:	4a11383a 	mul	r8,r9,r8
4000951c:	21c9883a 	add	r4,r4,r7
	L_pixel(this,3+org_x,1+org_y) = flit_1->byte_0;
	L_pixel(this,0+org_x,2+org_y) = flit_2->byte_7;
	L_pixel(this,1+org_x,2+org_y) = flit_2->byte_6;
	L_pixel(this,2+org_x,2+org_y) = flit_2->byte_5;
	L_pixel(this,3+org_x,2+org_y) = flit_2->byte_4;
	L_pixel(this,0+org_x,3+org_y) = flit_2->byte_3;
40009520:	948000c4 	addi	r18,r18,3
	L_pixel(this,0+org_x,0+org_y) = flit_1->byte_7;
	L_pixel(this,1+org_x,0+org_y) = flit_1->byte_6;
	L_pixel(this,2+org_x,0+org_y) = flit_1->byte_5;
	L_pixel(this,3+org_x,0+org_y) = flit_1->byte_4;
	L_pixel(this,0+org_x,1+org_y) = flit_1->byte_3;
	L_pixel(this,1+org_x,1+org_y) = flit_1->byte_2;
40009524:	2209883a 	add	r4,r4,r8
40009528:	22800005 	stb	r10,0(r4)
	L_pixel(this,2+org_x,1+org_y) = flit_1->byte_1;
4000952c:	82c00217 	ldw	r11,8(r16)
40009530:	82000617 	ldw	r8,24(r16)
40009534:	12800243 	ldbu	r10,9(r2)
40009538:	4ad7383a 	mul	r11,r9,r11
4000953c:	4151883a 	add	r8,r8,r5
	L_pixel(this,0+org_x,3+org_y) = flit_2->byte_3;
	L_pixel(this,1+org_x,3+org_y) = flit_2->byte_2;
	L_pixel(this,2+org_x,3+org_y) = flit_2->byte_1;
	L_pixel(this,3+org_x,3+org_y) = flit_2->byte_0;

	remove_packet_with_id(id);
40009540:	9809883a 	mov	r4,r19
	L_pixel(this,1+org_x,0+org_y) = flit_1->byte_6;
	L_pixel(this,2+org_x,0+org_y) = flit_1->byte_5;
	L_pixel(this,3+org_x,0+org_y) = flit_1->byte_4;
	L_pixel(this,0+org_x,1+org_y) = flit_1->byte_3;
	L_pixel(this,1+org_x,1+org_y) = flit_1->byte_2;
	L_pixel(this,2+org_x,1+org_y) = flit_1->byte_1;
40009544:	42d1883a 	add	r8,r8,r11
40009548:	42800005 	stb	r10,0(r8)
	L_pixel(this,3+org_x,1+org_y) = flit_1->byte_0;
4000954c:	82800217 	ldw	r10,8(r16)
40009550:	82000617 	ldw	r8,24(r16)
40009554:	12c00203 	ldbu	r11,8(r2)
40009558:	4a95383a 	mul	r10,r9,r10
4000955c:	40d3883a 	add	r9,r8,r3
40009560:	4a93883a 	add	r9,r9,r10
40009564:	4ac00005 	stb	r11,0(r9)
	L_pixel(this,0+org_x,2+org_y) = flit_2->byte_7;
40009568:	120005c3 	ldbu	r8,23(r2)
4000956c:	82800217 	ldw	r10,8(r16)
40009570:	82400617 	ldw	r9,24(r16)
40009574:	3295383a 	mul	r10,r6,r10
40009578:	4c53883a 	add	r9,r9,r17
4000957c:	4a93883a 	add	r9,r9,r10
40009580:	4a000005 	stb	r8,0(r9)
	L_pixel(this,1+org_x,2+org_y) = flit_2->byte_6;
40009584:	82800217 	ldw	r10,8(r16)
40009588:	82400617 	ldw	r9,24(r16)
4000958c:	12000583 	ldbu	r8,22(r2)
40009590:	3295383a 	mul	r10,r6,r10
40009594:	49d3883a 	add	r9,r9,r7
40009598:	4a93883a 	add	r9,r9,r10
4000959c:	4a000005 	stb	r8,0(r9)
	L_pixel(this,2+org_x,2+org_y) = flit_2->byte_5;
400095a0:	82800217 	ldw	r10,8(r16)
400095a4:	82400617 	ldw	r9,24(r16)
400095a8:	12000543 	ldbu	r8,21(r2)
400095ac:	3295383a 	mul	r10,r6,r10
400095b0:	4953883a 	add	r9,r9,r5
400095b4:	4a93883a 	add	r9,r9,r10
400095b8:	4a000005 	stb	r8,0(r9)
	L_pixel(this,3+org_x,2+org_y) = flit_2->byte_4;
400095bc:	82000217 	ldw	r8,8(r16)
400095c0:	82400617 	ldw	r9,24(r16)
400095c4:	12800503 	ldbu	r10,20(r2)
400095c8:	3211383a 	mul	r8,r6,r8
400095cc:	48cd883a 	add	r6,r9,r3
400095d0:	320d883a 	add	r6,r6,r8
400095d4:	32800005 	stb	r10,0(r6)
	L_pixel(this,0+org_x,3+org_y) = flit_2->byte_3;
400095d8:	82000217 	ldw	r8,8(r16)
400095dc:	81800617 	ldw	r6,24(r16)
400095e0:	124004c3 	ldbu	r9,19(r2)
400095e4:	9211383a 	mul	r8,r18,r8
400095e8:	3463883a 	add	r17,r6,r17
400095ec:	8a23883a 	add	r17,r17,r8
400095f0:	8a400005 	stb	r9,0(r17)
	L_pixel(this,1+org_x,3+org_y) = flit_2->byte_2;
400095f4:	81800217 	ldw	r6,8(r16)
400095f8:	82400617 	ldw	r9,24(r16)
400095fc:	12000483 	ldbu	r8,18(r2)
40009600:	918d383a 	mul	r6,r18,r6
40009604:	49cf883a 	add	r7,r9,r7
40009608:	398f883a 	add	r7,r7,r6
4000960c:	3a000005 	stb	r8,0(r7)
	L_pixel(this,2+org_x,3+org_y) = flit_2->byte_1;
40009610:	81800217 	ldw	r6,8(r16)
40009614:	82000617 	ldw	r8,24(r16)
40009618:	11c00443 	ldbu	r7,17(r2)
4000961c:	918d383a 	mul	r6,r18,r6
40009620:	414b883a 	add	r5,r8,r5
40009624:	298b883a 	add	r5,r5,r6
40009628:	29c00005 	stb	r7,0(r5)
	L_pixel(this,3+org_x,3+org_y) = flit_2->byte_0;
4000962c:	81c00217 	ldw	r7,8(r16)
40009630:	81400617 	ldw	r5,24(r16)
40009634:	10800403 	ldbu	r2,16(r2)
40009638:	91e5383a 	mul	r18,r18,r7
4000963c:	28c7883a 	add	r3,r5,r3
40009640:	1c87883a 	add	r3,r3,r18
40009644:	18800005 	stb	r2,0(r3)

	remove_packet_with_id(id);

}
40009648:	dfc00417 	ldw	ra,16(sp)
4000964c:	dcc00317 	ldw	r19,12(sp)
40009650:	dc800217 	ldw	r18,8(sp)
40009654:	dc400117 	ldw	r17,4(sp)
40009658:	dc000017 	ldw	r16,0(sp)
4000965c:	dec00504 	addi	sp,sp,20
	L_pixel(this,0+org_x,3+org_y) = flit_2->byte_3;
	L_pixel(this,1+org_x,3+org_y) = flit_2->byte_2;
	L_pixel(this,2+org_x,3+org_y) = flit_2->byte_1;
	L_pixel(this,3+org_x,3+org_y) = flit_2->byte_0;

	remove_packet_with_id(id);
40009660:	000c5c01 	jmpi	4000c5c0 <remove_packet_with_id>
	//start = read_timer();
	packet *inter_packet = (void *)0;
	while(inter_packet == (void *)0){
		inter_packet = get_packet_pointer_by_id(id);
		if(inter_packet == (void *)0){
			buffers_loop(1);
40009664:	01000044 	movi	r4,1
40009668:	000c3500 	call	4000c350 <buffers_loop>
4000966c:	003f7c06 	br	40009460 <__alt_data_end+0xc0009460>

40009670 <send_chroma_motion_comp_packet_fast>:
}

int send_chroma_motion_comp_packet_fast(frame *ref, int org_x, int org_y, int xFrac, int yFrac)
{
	static int id = 32;
    id = ((id+1)%32) + 65;
40009670:	d0a00217 	ldw	r2,-32760(gp)
	remove_packet_with_id(id);

}

int send_chroma_motion_comp_packet_fast(frame *ref, int org_x, int org_y, int xFrac, int yFrac)
{
40009674:	defff004 	addi	sp,sp,-64
40009678:	dd800c15 	stw	r22,48(sp)
	static int id = 32;
    id = ((id+1)%32) + 65;
4000967c:	10c00044 	addi	r3,r2,1
40009680:	00a00034 	movhi	r2,32768
40009684:	108007c4 	addi	r2,r2,31
	remove_packet_with_id(id);

}

int send_chroma_motion_comp_packet_fast(frame *ref, int org_x, int org_y, int xFrac, int yFrac)
{
40009688:	dc400715 	stw	r17,28(sp)
4000968c:	dc000615 	stw	r16,24(sp)
	static int id = 32;
    id = ((id+1)%32) + 65;
40009690:	1884703a 	and	r2,r3,r2
	remove_packet_with_id(id);

}

int send_chroma_motion_comp_packet_fast(frame *ref, int org_x, int org_y, int xFrac, int yFrac)
{
40009694:	dfc00f15 	stw	ra,60(sp)
40009698:	df000e15 	stw	fp,56(sp)
4000969c:	ddc00d15 	stw	r23,52(sp)
400096a0:	dd400b15 	stw	r21,44(sp)
400096a4:	dd000a15 	stw	r20,40(sp)
400096a8:	dcc00915 	stw	r19,36(sp)
400096ac:	dc800815 	stw	r18,32(sp)
400096b0:	2823883a 	mov	r17,r5
400096b4:	2021883a 	mov	r16,r4
400096b8:	302d883a 	mov	r22,r6
400096bc:	380b883a 	mov	r5,r7
400096c0:	d8c01017 	ldw	r3,64(sp)
	static int id = 32;
    id = ((id+1)%32) + 65;
400096c4:	1000d916 	blt	r2,zero,40009a2c <send_chroma_motion_comp_packet_fast+0x3bc>
    uint32_t header_msw = xFrac;
    uint32_t header_lsw = (yFrac<<24) | (xFrac<<16) | (yFrac<<8) | id;


	send_flit(4, header_msw, header_lsw, 0);
400096c8:	1808963a 	slli	r4,r3,24
400096cc:	1806923a 	slli	r3,r3,8
400096d0:	280c943a 	slli	r6,r5,16
}

int send_chroma_motion_comp_packet_fast(frame *ref, int org_x, int org_y, int xFrac, int yFrac)
{
	static int id = 32;
    id = ((id+1)%32) + 65;
400096d4:	10801044 	addi	r2,r2,65
    uint32_t header_msw = xFrac;
    uint32_t header_lsw = (yFrac<<24) | (xFrac<<16) | (yFrac<<8) | id;


	send_flit(4, header_msw, header_lsw, 0);
400096d8:	20c6b03a 	or	r3,r4,r3
400096dc:	1886b03a 	or	r3,r3,r2
400096e0:	000f883a 	mov	r7,zero
400096e4:	198cb03a 	or	r6,r3,r6
400096e8:	01000104 	movi	r4,4
}

int send_chroma_motion_comp_packet_fast(frame *ref, int org_x, int org_y, int xFrac, int yFrac)
{
	static int id = 32;
    id = ((id+1)%32) + 65;
400096ec:	d0a00215 	stw	r2,-32760(gp)


	send_flit(4, header_msw, header_lsw, 0);

    //write CB data 0..7
    int y1 = org_y>0?org_y:0;
400096f0:	b029883a 	mov	r20,r22
    id = ((id+1)%32) + 65;
    uint32_t header_msw = xFrac;
    uint32_t header_lsw = (yFrac<<24) | (xFrac<<16) | (yFrac<<8) | id;


	send_flit(4, header_msw, header_lsw, 0);
400096f4:	000c2000 	call	4000c200 <send_flit>

    //write CB data 0..7
    int y1 = org_y>0?org_y:0;
400096f8:	b000ca16 	blt	r22,zero,40009a24 <send_chroma_motion_comp_packet_fast+0x3b4>
    y1 = y1<ref->Cheight?y1:ref->Cheight-1;
400096fc:	80800417 	ldw	r2,16(r16)
40009700:	a0800116 	blt	r20,r2,40009708 <send_chroma_motion_comp_packet_fast+0x98>
40009704:	153fffc4 	addi	r20,r2,-1

    int y2 = org_y+1>0?org_y+1:0;
40009708:	b000bc16 	blt	r22,zero,400099fc <send_chroma_motion_comp_packet_fast+0x38c>
4000970c:	b5400044 	addi	r21,r22,1
    y2 = y2<ref->Cheight?y2:ref->Cheight-1;
40009710:	a8800116 	blt	r21,r2,40009718 <send_chroma_motion_comp_packet_fast+0xa8>
40009714:	157fffc4 	addi	r21,r2,-1

	int y3 = org_y+2>0?org_y+2:0;
40009718:	00ffffc4 	movi	r3,-1
4000971c:	b0c0bd16 	blt	r22,r3,40009a14 <send_chroma_motion_comp_packet_fast+0x3a4>
40009720:	b5800084 	addi	r22,r22,2
	y3 = y3<ref->Cheight?y3:ref->Cheight-1;
40009724:	b0800116 	blt	r22,r2,4000972c <send_chroma_motion_comp_packet_fast+0xbc>
40009728:	15bfffc4 	addi	r22,r2,-1

    int x1 = org_x>0?org_x:0;
4000972c:	8825883a 	mov	r18,r17
40009730:	8800ba16 	blt	r17,zero,40009a1c <send_chroma_motion_comp_packet_fast+0x3ac>
    x1 = x1<ref->Cwidth?x1:ref->Cwidth-1;
40009734:	80800317 	ldw	r2,12(r16)
40009738:	90800116 	blt	r18,r2,40009740 <send_chroma_motion_comp_packet_fast+0xd0>
4000973c:	14bfffc4 	addi	r18,r2,-1

    int x2 = (org_x+1)>0?org_x+1:0;
40009740:	8800b216 	blt	r17,zero,40009a0c <send_chroma_motion_comp_packet_fast+0x39c>
40009744:	8cc00044 	addi	r19,r17,1
	x2 = x2<ref->Cwidth?x2:ref->Cwidth-1;
40009748:	98800116 	blt	r19,r2,40009750 <send_chroma_motion_comp_packet_fast+0xe0>
4000974c:	14ffffc4 	addi	r19,r2,-1

    int x3 = (org_x+2)>0?org_x+2:0;
40009750:	00ffffc4 	movi	r3,-1
40009754:	88c0ab16 	blt	r17,r3,40009a04 <send_chroma_motion_comp_packet_fast+0x394>
40009758:	8c400084 	addi	r17,r17,2
	x3 = x3<ref->Cwidth?x3:ref->Cwidth-1;
4000975c:	88800116 	blt	r17,r2,40009764 <send_chroma_motion_comp_packet_fast+0xf4>
40009760:	147fffc4 	addi	r17,r2,-1

	//printf("%d %d %d %d %d %d\n", x1, x2, x3, y1, y2, y3);

	WR_PIO(TX_0_BASE, C_pixel(ref,0,x2,y3)  );
40009764:	80c00517 	ldw	r3,20(r16)
40009768:	80800717 	ldw	r2,28(r16)
4000976c:	07044404 	movi	fp,4368
40009770:	b0c7383a 	mul	r3,r22,r3
40009774:	14c5883a 	add	r2,r2,r19
40009778:	10c5883a 	add	r2,r2,r3
4000977c:	10800003 	ldbu	r2,0(r2)
40009780:	e0800035 	stwio	r2,0(fp)
	WR_PIO(TX_1_BASE, C_pixel(ref,0,x1,y3)  );
40009784:	80c00517 	ldw	r3,20(r16)
40009788:	80800717 	ldw	r2,28(r16)
4000978c:	05c44004 	movi	r23,4352
40009790:	b0c7383a 	mul	r3,r22,r3
40009794:	1485883a 	add	r2,r2,r18
40009798:	10c5883a 	add	r2,r2,r3
4000979c:	10800003 	ldbu	r2,0(r2)
400097a0:	b8800035 	stwio	r2,0(r23)
	WR_PIO(TX_2_BASE, C_pixel(ref,0,x3,y2)  );
400097a4:	80c00517 	ldw	r3,20(r16)
400097a8:	80800717 	ldw	r2,28(r16)
400097ac:	02842c04 	movi	r10,4272
400097b0:	a8c7383a 	mul	r3,r21,r3
400097b4:	1445883a 	add	r2,r2,r17
400097b8:	10c5883a 	add	r2,r2,r3
400097bc:	10800003 	ldbu	r2,0(r2)
400097c0:	50800035 	stwio	r2,0(r10)
	WR_PIO(TX_3_BASE, C_pixel(ref,0,x2,y2)  );
400097c4:	80c00517 	ldw	r3,20(r16)
400097c8:	80800717 	ldw	r2,28(r16)
400097cc:	02442804 	movi	r9,4256
400097d0:	a8c7383a 	mul	r3,r21,r3
400097d4:	14c5883a 	add	r2,r2,r19
400097d8:	10c5883a 	add	r2,r2,r3
400097dc:	10800003 	ldbu	r2,0(r2)
400097e0:	48800035 	stwio	r2,0(r9)
	WR_PIO(TX_4_BASE, C_pixel(ref,0,x1,y2)  );
400097e4:	80c00517 	ldw	r3,20(r16)
400097e8:	80800717 	ldw	r2,28(r16)
400097ec:	02042404 	movi	r8,4240
400097f0:	a8c7383a 	mul	r3,r21,r3
400097f4:	1485883a 	add	r2,r2,r18
400097f8:	10c5883a 	add	r2,r2,r3
400097fc:	10800003 	ldbu	r2,0(r2)
40009800:	40800035 	stwio	r2,0(r8)
	WR_PIO(TX_5_BASE, C_pixel(ref,0,x3,y1)  );
40009804:	80c00517 	ldw	r3,20(r16)
40009808:	80800717 	ldw	r2,28(r16)
4000980c:	01c42004 	movi	r7,4224
40009810:	a0c7383a 	mul	r3,r20,r3
40009814:	1445883a 	add	r2,r2,r17
40009818:	10c5883a 	add	r2,r2,r3
4000981c:	10800003 	ldbu	r2,0(r2)
40009820:	38800035 	stwio	r2,0(r7)
	WR_PIO(TX_6_BASE, C_pixel(ref,0,x2,y1)  );
40009824:	80c00517 	ldw	r3,20(r16)
40009828:	80800717 	ldw	r2,28(r16)
4000982c:	01841c04 	movi	r6,4208
40009830:	a0c7383a 	mul	r3,r20,r3
40009834:	14c5883a 	add	r2,r2,r19
40009838:	10c5883a 	add	r2,r2,r3
4000983c:	10800003 	ldbu	r2,0(r2)
40009840:	30800035 	stwio	r2,0(r6)
	WR_PIO(TX_7_BASE, C_pixel(ref,0,x1,y1)  );
40009844:	80c00517 	ldw	r3,20(r16)
40009848:	80800717 	ldw	r2,28(r16)
4000984c:	01441804 	movi	r5,4192
40009850:	a0c7383a 	mul	r3,r20,r3
40009854:	1485883a 	add	r2,r2,r18
40009858:	10c5883a 	add	r2,r2,r3
4000985c:	10800003 	ldbu	r2,0(r2)
40009860:	28800035 	stwio	r2,0(r5)
	no_data_send(FORMAT_0 | IN_PLACE_CINTER_0_ADDR | CPU_TX_REQ);
40009864:	01100134 	movhi	r4,16388
40009868:	d9400515 	stw	r5,20(sp)
4000986c:	d9800415 	stw	r6,16(sp)
40009870:	d9c00315 	stw	r7,12(sp)
40009874:	da000215 	stw	r8,8(sp)
40009878:	da400115 	stw	r9,4(sp)
4000987c:	da800015 	stw	r10,0(sp)
40009880:	000c26c0 	call	4000c26c <no_data_send>

	//Now CR
	WR_PIO(TX_0_BASE, C_pixel(ref,1,x2,y3)  );
40009884:	80c00517 	ldw	r3,20(r16)
40009888:	80800817 	ldw	r2,32(r16)
4000988c:	b0c7383a 	mul	r3,r22,r3
40009890:	14c5883a 	add	r2,r2,r19
40009894:	10c5883a 	add	r2,r2,r3
40009898:	10800003 	ldbu	r2,0(r2)
4000989c:	e0800035 	stwio	r2,0(fp)
	WR_PIO(TX_1_BASE, C_pixel(ref,1,x1,y3)  );
400098a0:	80c00517 	ldw	r3,20(r16)
400098a4:	80800817 	ldw	r2,32(r16)
400098a8:	b0c7383a 	mul	r3,r22,r3
400098ac:	1485883a 	add	r2,r2,r18
400098b0:	10c5883a 	add	r2,r2,r3
400098b4:	10800003 	ldbu	r2,0(r2)
400098b8:	b8800035 	stwio	r2,0(r23)
	WR_PIO(TX_2_BASE, C_pixel(ref,1,x3,y2)  );
400098bc:	80c00517 	ldw	r3,20(r16)
400098c0:	80800817 	ldw	r2,32(r16)
400098c4:	da800017 	ldw	r10,0(sp)
400098c8:	a8c7383a 	mul	r3,r21,r3
400098cc:	1445883a 	add	r2,r2,r17
400098d0:	10c5883a 	add	r2,r2,r3
400098d4:	10800003 	ldbu	r2,0(r2)
400098d8:	50800035 	stwio	r2,0(r10)
	WR_PIO(TX_3_BASE, C_pixel(ref,1,x2,y2)  );
400098dc:	80c00517 	ldw	r3,20(r16)
400098e0:	80800817 	ldw	r2,32(r16)
400098e4:	da400117 	ldw	r9,4(sp)
400098e8:	a8c7383a 	mul	r3,r21,r3
400098ec:	14c5883a 	add	r2,r2,r19
400098f0:	10c5883a 	add	r2,r2,r3
400098f4:	10800003 	ldbu	r2,0(r2)
400098f8:	48800035 	stwio	r2,0(r9)
	WR_PIO(TX_4_BASE, C_pixel(ref,1,x1,y2)  );
400098fc:	80800517 	ldw	r2,20(r16)
40009900:	80c00817 	ldw	r3,32(r16)
40009904:	da000217 	ldw	r8,8(sp)
40009908:	a8ab383a 	mul	r21,r21,r2
4000990c:	1c85883a 	add	r2,r3,r18
40009910:	156b883a 	add	r21,r2,r21
40009914:	a8800003 	ldbu	r2,0(r21)
40009918:	40800035 	stwio	r2,0(r8)
	WR_PIO(TX_5_BASE, C_pixel(ref,1,x3,y1)  );
4000991c:	80c00517 	ldw	r3,20(r16)
40009920:	80800817 	ldw	r2,32(r16)
40009924:	d9c00317 	ldw	r7,12(sp)
40009928:	a0c7383a 	mul	r3,r20,r3
4000992c:	1445883a 	add	r2,r2,r17
40009930:	10c5883a 	add	r2,r2,r3
40009934:	10800003 	ldbu	r2,0(r2)
40009938:	38800035 	stwio	r2,0(r7)
	WR_PIO(TX_6_BASE, C_pixel(ref,1,x2,y1)  );
4000993c:	80800517 	ldw	r2,20(r16)
40009940:	80c00817 	ldw	r3,32(r16)
40009944:	d9800417 	ldw	r6,16(sp)
40009948:	a085383a 	mul	r2,r20,r2
4000994c:	1ce7883a 	add	r19,r3,r19
40009950:	98a7883a 	add	r19,r19,r2
40009954:	98800003 	ldbu	r2,0(r19)
40009958:	30800035 	stwio	r2,0(r6)
	WR_PIO(TX_7_BASE, C_pixel(ref,1,x1,y1)  );
4000995c:	80800517 	ldw	r2,20(r16)
40009960:	80c00817 	ldw	r3,32(r16)
40009964:	d9400517 	ldw	r5,20(sp)
40009968:	a0a9383a 	mul	r20,r20,r2
4000996c:	1ca5883a 	add	r18,r3,r18
40009970:	9525883a 	add	r18,r18,r20
40009974:	90800003 	ldbu	r2,0(r18)
40009978:	28800035 	stwio	r2,0(r5)
	no_data_send(FORMAT_0 | IN_PLACE_CINTER_0_ADDR | CPU_TX_REQ);
4000997c:	01100134 	movhi	r4,16388
40009980:	000c26c0 	call	4000c26c <no_data_send>

	//Now the last two samples which don't fit nicely...
	WR_PIO(TX_0_BASE, C_pixel(ref,0,x3,y3)  );
40009984:	80c00517 	ldw	r3,20(r16)
40009988:	80800717 	ldw	r2,28(r16)
4000998c:	b0c7383a 	mul	r3,r22,r3
40009990:	1445883a 	add	r2,r2,r17
40009994:	10c5883a 	add	r2,r2,r3
40009998:	10800003 	ldbu	r2,0(r2)
4000999c:	e0800035 	stwio	r2,0(fp)
	WR_PIO(TX_1_BASE, C_pixel(ref,1,x3,y3)  );
400099a0:	80800517 	ldw	r2,20(r16)
400099a4:	80c00817 	ldw	r3,32(r16)
400099a8:	b0ad383a 	mul	r22,r22,r2
400099ac:	1c63883a 	add	r17,r3,r17
400099b0:	8da3883a 	add	r17,r17,r22
400099b4:	88800003 	ldbu	r2,0(r17)
400099b8:	b8800035 	stwio	r2,0(r23)
	no_data_send(FORMAT_2 | IN_PLACE_CINTER_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
400099bc:	01300134 	movhi	r4,49156
400099c0:	21000084 	addi	r4,r4,2
400099c4:	000c26c0 	call	4000c26c <no_data_send>

    return id;

}
400099c8:	d0a00217 	ldw	r2,-32760(gp)
400099cc:	dfc00f17 	ldw	ra,60(sp)
400099d0:	df000e17 	ldw	fp,56(sp)
400099d4:	ddc00d17 	ldw	r23,52(sp)
400099d8:	dd800c17 	ldw	r22,48(sp)
400099dc:	dd400b17 	ldw	r21,44(sp)
400099e0:	dd000a17 	ldw	r20,40(sp)
400099e4:	dcc00917 	ldw	r19,36(sp)
400099e8:	dc800817 	ldw	r18,32(sp)
400099ec:	dc400717 	ldw	r17,28(sp)
400099f0:	dc000617 	ldw	r16,24(sp)
400099f4:	dec01004 	addi	sp,sp,64
400099f8:	f800283a 	ret

    //write CB data 0..7
    int y1 = org_y>0?org_y:0;
    y1 = y1<ref->Cheight?y1:ref->Cheight-1;

    int y2 = org_y+1>0?org_y+1:0;
400099fc:	002b883a 	mov	r21,zero
40009a00:	003f4306 	br	40009710 <__alt_data_end+0xc0009710>
    x1 = x1<ref->Cwidth?x1:ref->Cwidth-1;

    int x2 = (org_x+1)>0?org_x+1:0;
	x2 = x2<ref->Cwidth?x2:ref->Cwidth-1;

    int x3 = (org_x+2)>0?org_x+2:0;
40009a04:	0023883a 	mov	r17,zero
40009a08:	003f5406 	br	4000975c <__alt_data_end+0xc000975c>
	y3 = y3<ref->Cheight?y3:ref->Cheight-1;

    int x1 = org_x>0?org_x:0;
    x1 = x1<ref->Cwidth?x1:ref->Cwidth-1;

    int x2 = (org_x+1)>0?org_x+1:0;
40009a0c:	0027883a 	mov	r19,zero
40009a10:	003f4d06 	br	40009748 <__alt_data_end+0xc0009748>
    y1 = y1<ref->Cheight?y1:ref->Cheight-1;

    int y2 = org_y+1>0?org_y+1:0;
    y2 = y2<ref->Cheight?y2:ref->Cheight-1;

	int y3 = org_y+2>0?org_y+2:0;
40009a14:	002d883a 	mov	r22,zero
40009a18:	003f4206 	br	40009724 <__alt_data_end+0xc0009724>
	y3 = y3<ref->Cheight?y3:ref->Cheight-1;

    int x1 = org_x>0?org_x:0;
40009a1c:	0025883a 	mov	r18,zero
40009a20:	003f4406 	br	40009734 <__alt_data_end+0xc0009734>


	send_flit(4, header_msw, header_lsw, 0);

    //write CB data 0..7
    int y1 = org_y>0?org_y:0;
40009a24:	0029883a 	mov	r20,zero
40009a28:	003f3406 	br	400096fc <__alt_data_end+0xc00096fc>
}

int send_chroma_motion_comp_packet_fast(frame *ref, int org_x, int org_y, int xFrac, int yFrac)
{
	static int id = 32;
    id = ((id+1)%32) + 65;
40009a2c:	10bfffc4 	addi	r2,r2,-1
40009a30:	013ff804 	movi	r4,-32
40009a34:	1104b03a 	or	r2,r2,r4
40009a38:	10800044 	addi	r2,r2,1
40009a3c:	003f2206 	br	400096c8 <__alt_data_end+0xc00096c8>

40009a40 <rx_chroma_motion_comp_packet>:
    return id;

}

void rx_chroma_motion_comp_packet(int id, frame *this, int org_x, int org_y)
{
40009a40:	defffb04 	addi	sp,sp,-20
40009a44:	dcc00315 	stw	r19,12(sp)
40009a48:	dc800215 	stw	r18,8(sp)
40009a4c:	dc400115 	stw	r17,4(sp)
40009a50:	dc000015 	stw	r16,0(sp)
40009a54:	dfc00415 	stw	ra,16(sp)
40009a58:	2025883a 	mov	r18,r4
40009a5c:	2821883a 	mov	r16,r5
40009a60:	3023883a 	mov	r17,r6
40009a64:	3827883a 	mov	r19,r7

	//start = read_timer();
	packet *inter_packet = (void *)0;
	while(inter_packet == (void *)0){
		inter_packet = get_packet_pointer_by_id(id);
40009a68:	9009883a 	mov	r4,r18
40009a6c:	000c5340 	call	4000c534 <get_packet_pointer_by_id>
		if(inter_packet == (void *)0){
40009a70:	10004226 	beq	r2,zero,40009b7c <rx_chroma_motion_comp_packet+0x13c>
			buffers_loop(1);
		}
	}
	//add_time(HW_INTER_COUNTS, read_timer() - start);

	C_pixel(this,0,0+org_x,0+org_y) = (uint8_t)((inter_packet->data.flit[1]&0xFF00000000000000ull)>>56);
40009a74:	81400517 	ldw	r5,20(r16)
40009a78:	81000717 	ldw	r4,28(r16)
40009a7c:	118003c3 	ldbu	r6,15(r2)
40009a80:	994b383a 	mul	r5,r19,r5
40009a84:	2449883a 	add	r4,r4,r17
	C_pixel(this,0,1+org_x,0+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x00FF000000000000ull)>>48);
40009a88:	88c00044 	addi	r3,r17,1
			buffers_loop(1);
		}
	}
	//add_time(HW_INTER_COUNTS, read_timer() - start);

	C_pixel(this,0,0+org_x,0+org_y) = (uint8_t)((inter_packet->data.flit[1]&0xFF00000000000000ull)>>56);
40009a8c:	2149883a 	add	r4,r4,r5
40009a90:	21800005 	stb	r6,0(r4)
	C_pixel(this,0,1+org_x,0+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x00FF000000000000ull)>>48);
40009a94:	81800517 	ldw	r6,20(r16)
40009a98:	81000717 	ldw	r4,28(r16)
40009a9c:	11400383 	ldbu	r5,14(r2)
40009aa0:	998d383a 	mul	r6,r19,r6
40009aa4:	20c9883a 	add	r4,r4,r3
	C_pixel(this,0,0+org_x,1+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x0000FF0000000000ull)>>40);
40009aa8:	9a400044 	addi	r9,r19,1
		}
	}
	//add_time(HW_INTER_COUNTS, read_timer() - start);

	C_pixel(this,0,0+org_x,0+org_y) = (uint8_t)((inter_packet->data.flit[1]&0xFF00000000000000ull)>>56);
	C_pixel(this,0,1+org_x,0+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x00FF000000000000ull)>>48);
40009aac:	2189883a 	add	r4,r4,r6
40009ab0:	21400005 	stb	r5,0(r4)
	C_pixel(this,0,0+org_x,1+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x0000FF0000000000ull)>>40);
40009ab4:	82000517 	ldw	r8,20(r16)
40009ab8:	81800717 	ldw	r6,28(r16)
40009abc:	11400343 	ldbu	r5,13(r2)
40009ac0:	4a11383a 	mul	r8,r9,r8
40009ac4:	344d883a 	add	r6,r6,r17
	C_pixel(this,1,0+org_x,0+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x00000000FF000000ull)>>24);
	C_pixel(this,1,1+org_x,0+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x0000000000FF0000ull)>>16);
	C_pixel(this,1,0+org_x,1+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x000000000000FF00ull)>>8 );
	C_pixel(this,1,1+org_x,1+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x00000000000000FFull)>>0 );

	remove_packet_with_id(id);
40009ac8:	9009883a 	mov	r4,r18
	}
	//add_time(HW_INTER_COUNTS, read_timer() - start);

	C_pixel(this,0,0+org_x,0+org_y) = (uint8_t)((inter_packet->data.flit[1]&0xFF00000000000000ull)>>56);
	C_pixel(this,0,1+org_x,0+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x00FF000000000000ull)>>48);
	C_pixel(this,0,0+org_x,1+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x0000FF0000000000ull)>>40);
40009acc:	320d883a 	add	r6,r6,r8
40009ad0:	31400005 	stb	r5,0(r6)
	C_pixel(this,0,1+org_x,1+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x000000FF00000000ull)>>32);
40009ad4:	82000517 	ldw	r8,20(r16)
40009ad8:	81800717 	ldw	r6,28(r16)
40009adc:	11400303 	ldbu	r5,12(r2)
40009ae0:	4a11383a 	mul	r8,r9,r8
40009ae4:	30cd883a 	add	r6,r6,r3
40009ae8:	320d883a 	add	r6,r6,r8
40009aec:	31400005 	stb	r5,0(r6)
	C_pixel(this,1,0+org_x,0+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x00000000FF000000ull)>>24);
40009af0:	82000517 	ldw	r8,20(r16)
40009af4:	81800817 	ldw	r6,32(r16)
40009af8:	114002c3 	ldbu	r5,11(r2)
40009afc:	9a11383a 	mul	r8,r19,r8
40009b00:	344d883a 	add	r6,r6,r17
40009b04:	320d883a 	add	r6,r6,r8
40009b08:	31400005 	stb	r5,0(r6)
	C_pixel(this,1,1+org_x,0+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x0000000000FF0000ull)>>16);
40009b0c:	81400517 	ldw	r5,20(r16)
40009b10:	81c00817 	ldw	r7,32(r16)
40009b14:	11800283 	ldbu	r6,10(r2)
40009b18:	994b383a 	mul	r5,r19,r5
40009b1c:	38cf883a 	add	r7,r7,r3
40009b20:	394f883a 	add	r7,r7,r5
40009b24:	39800005 	stb	r6,0(r7)
	C_pixel(this,1,0+org_x,1+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x000000000000FF00ull)>>8 );
40009b28:	81400517 	ldw	r5,20(r16)
40009b2c:	81800817 	ldw	r6,32(r16)
40009b30:	11c00243 	ldbu	r7,9(r2)
40009b34:	494b383a 	mul	r5,r9,r5
40009b38:	3463883a 	add	r17,r6,r17
40009b3c:	8963883a 	add	r17,r17,r5
40009b40:	89c00005 	stb	r7,0(r17)
	C_pixel(this,1,1+org_x,1+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x00000000000000FFull)>>0 );
40009b44:	81400517 	ldw	r5,20(r16)
40009b48:	81c00817 	ldw	r7,32(r16)
40009b4c:	11800217 	ldw	r6,8(r2)
40009b50:	4945383a 	mul	r2,r9,r5
40009b54:	38c7883a 	add	r3,r7,r3
40009b58:	1887883a 	add	r3,r3,r2
40009b5c:	19800005 	stb	r6,0(r3)

	remove_packet_with_id(id);
}
40009b60:	dfc00417 	ldw	ra,16(sp)
40009b64:	dcc00317 	ldw	r19,12(sp)
40009b68:	dc800217 	ldw	r18,8(sp)
40009b6c:	dc400117 	ldw	r17,4(sp)
40009b70:	dc000017 	ldw	r16,0(sp)
40009b74:	dec00504 	addi	sp,sp,20
	C_pixel(this,1,0+org_x,0+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x00000000FF000000ull)>>24);
	C_pixel(this,1,1+org_x,0+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x0000000000FF0000ull)>>16);
	C_pixel(this,1,0+org_x,1+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x000000000000FF00ull)>>8 );
	C_pixel(this,1,1+org_x,1+org_y) = (uint8_t)((inter_packet->data.flit[1]&0x00000000000000FFull)>>0 );

	remove_packet_with_id(id);
40009b78:	000c5c01 	jmpi	4000c5c0 <remove_packet_with_id>
	//start = read_timer();
	packet *inter_packet = (void *)0;
	while(inter_packet == (void *)0){
		inter_packet = get_packet_pointer_by_id(id);
		if(inter_packet == (void *)0){
			buffers_loop(1);
40009b7c:	01000044 	movi	r4,1
40009b80:	000c3500 	call	4000c350 <buffers_loop>
40009b84:	003fb806 	br	40009a68 <__alt_data_end+0xc0009a68>

40009b88 <MotionCompensateTB>:
	remove_packet_with_id(id);
}

void MotionCompensateTB(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
40009b88:	deff9204 	addi	sp,sp,-440
40009b8c:	d8c06f17 	ldw	r3,444(sp)
40009b90:	da006e17 	ldw	r8,440(sp)
40009b94:	dfc06d15 	stw	ra,436(sp)


  //static uint64_t total_error[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  //static uint64_t total_counts[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

  int frac=(mvy&3)*4+(mvx&3);
40009b98:	188000cc 	andi	r2,r3,3
40009b9c:	1085883a 	add	r2,r2,r2
	remove_packet_with_id(id);
}

void MotionCompensateTB(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
40009ba0:	d8c05915 	stw	r3,356(sp)


  //static uint64_t total_error[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  //static uint64_t total_counts[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

  int frac=(mvy&3)*4+(mvx&3);
40009ba4:	1085883a 	add	r2,r2,r2
40009ba8:	40c000cc 	andi	r3,r8,3
	remove_packet_with_id(id);
}

void MotionCompensateTB(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
40009bac:	df006c15 	stw	fp,432(sp)
40009bb0:	ddc06b15 	stw	r23,428(sp)
40009bb4:	dd806a15 	stw	r22,424(sp)
40009bb8:	dd406915 	stw	r21,420(sp)
40009bbc:	dd006815 	stw	r20,416(sp)
40009bc0:	dcc06715 	stw	r19,412(sp)
40009bc4:	dc806615 	stw	r18,408(sp)
40009bc8:	dc406515 	stw	r17,404(sp)
40009bcc:	dc006415 	stw	r16,400(sp)
40009bd0:	da005815 	stw	r8,352(sp)


  //static uint64_t total_error[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  //static uint64_t total_counts[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

  int frac=(mvy&3)*4+(mvx&3);
40009bd4:	10c5883a 	add	r2,r2,r3
	remove_packet_with_id(id);
}

void MotionCompensateTB(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
40009bd8:	d9805515 	stw	r6,340(sp)
40009bdc:	d9c05615 	stw	r7,344(sp)
  }
  else
  {
	  //printf("starting sub-pixel motion compensation...");

	  if((frac != 0)){
40009be0:	1002591e 	bne	r2,zero,4000a548 <MotionCompensateTB+0x9c0>
		  rx_luma_motion_comp_packet(id0, this, org_x, org_y);
		  rx_chroma_motion_comp_packet(id1, this, (org_x>>1), (org_y>>1));
		  //printf("done!\n");
	  }
	  else{
		  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
40009be4:	db805917 	ldw	r14,356(sp)
40009be8:	3813883a 	mov	r9,r7
40009bec:	2dc00117 	ldw	r23,4(r5)
40009bf0:	7005d0ba 	srai	r2,r14,2
40009bf4:	400fd0ba 	srai	r7,r8,2
40009bf8:	ddc05215 	stw	r23,328(sp)
40009bfc:	1245883a 	add	r2,r2,r9
40009c00:	398f883a 	add	r7,r7,r6
40009c04:	11bfff84 	addi	r6,r2,-2
40009c08:	108001c4 	addi	r2,r2,7
40009c0c:	28c00617 	ldw	r3,24(r5)
40009c10:	d8805315 	stw	r2,332(sp)
  L_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<9; ++y) {
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
40009c14:	d8805217 	ldw	r2,328(sp)
		  rx_luma_motion_comp_packet(id0, this, org_x, org_y);
		  rx_chroma_motion_comp_packet(id1, this, (org_x>>1), (org_y>>1));
		  //printf("done!\n");
	  }
	  else{
		  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
40009c18:	3f3fff84 	addi	fp,r7,-2
40009c1c:	2a000217 	ldw	r8,8(r5)
  L_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<9; ++y) {
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
40009c20:	10bfffc4 	addi	r2,r2,-1
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
                     else b.p[y][x]=L_pixel(ref,sx,sy);
40009c24:	1f13883a 	add	r9,r3,fp
40009c28:	3dffffc4 	addi	r23,r7,-1
40009c2c:	3d800044 	addi	r22,r7,1
40009c30:	3d400084 	addi	r21,r7,2
  L_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<9; ++y) {
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
40009c34:	d8805715 	stw	r2,348(sp)
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
                     else b.p[y][x]=L_pixel(ref,sx,sy);
40009c38:	da405a15 	stw	r9,360(sp)
40009c3c:	1dc5883a 	add	r2,r3,r23
40009c40:	19d3883a 	add	r9,r3,r7
40009c44:	3d0000c4 	addi	r20,r7,3
40009c48:	3cc00104 	addi	r19,r7,4
40009c4c:	d8805b15 	stw	r2,364(sp)
40009c50:	da405c15 	stw	r9,368(sp)
40009c54:	1d85883a 	add	r2,r3,r22
40009c58:	1d53883a 	add	r9,r3,r21
40009c5c:	da005415 	stw	r8,336(sp)
40009c60:	3c800144 	addi	r18,r7,5
40009c64:	3a000184 	addi	r8,r7,6
40009c68:	d8805d15 	stw	r2,372(sp)
40009c6c:	da405e15 	stw	r9,376(sp)
40009c70:	1d05883a 	add	r2,r3,r20
40009c74:	1cd3883a 	add	r9,r3,r19
40009c78:	d8805f15 	stw	r2,380(sp)
40009c7c:	da406015 	stw	r9,384(sp)
40009c80:	1c85883a 	add	r2,r3,r18
40009c84:	1a13883a 	add	r9,r3,r8
40009c88:	dc400904 	addi	r17,sp,36
40009c8c:	dc000104 	addi	r16,sp,4
40009c90:	dfc00804 	addi	ra,sp,32
40009c94:	dbc00704 	addi	r15,sp,28
40009c98:	db800604 	addi	r14,sp,24
40009c9c:	db400504 	addi	r13,sp,20
40009ca0:	db000404 	addi	r12,sp,16
40009ca4:	dac00304 	addi	r11,sp,12
40009ca8:	da800204 	addi	r10,sp,8
40009cac:	d8806115 	stw	r2,388(sp)
40009cb0:	da406215 	stw	r9,392(sp)
40009cb4:	d9006315 	stw	r4,396(sp)
40009cb8:	3005883a 	mov	r2,r6
40009cbc:	3001cf16 	blt	r6,zero,4000a3fc <MotionCompensateTB+0x874>
  L_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<9; ++y) {
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
40009cc0:	d9005217 	ldw	r4,328(sp)
40009cc4:	11000116 	blt	r2,r4,40009ccc <MotionCompensateTB+0x144>
40009cc8:	d8805717 	ldw	r2,348(sp)
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
40009ccc:	e001c516 	blt	fp,zero,4000a3e4 <MotionCompensateTB+0x85c>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
40009cd0:	da405417 	ldw	r9,336(sp)
40009cd4:	29000017 	ldw	r4,0(r5)
40009cd8:	1245383a 	mul	r2,r2,r9
40009cdc:	e101b80e 	bge	fp,r4,4000a3c0 <MotionCompensateTB+0x838>
                     else b.p[y][x]=L_pixel(ref,sx,sy);
40009ce0:	da405a17 	ldw	r9,360(sp)
40009ce4:	4889883a 	add	r4,r9,r2
40009ce8:	21000003 	ldbu	r4,0(r4)
40009cec:	81000015 	stw	r4,0(r16)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
40009cf0:	b801b816 	blt	r23,zero,4000a3d4 <MotionCompensateTB+0x84c>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
40009cf4:	29000017 	ldw	r4,0(r5)
40009cf8:	b901a80e 	bge	r23,r4,4000a39c <MotionCompensateTB+0x814>
                     else b.p[y][x]=L_pixel(ref,sx,sy);
40009cfc:	da405b17 	ldw	r9,364(sp)
40009d00:	4889883a 	add	r4,r9,r2
40009d04:	21000003 	ldbu	r4,0(r4)
40009d08:	51000015 	stw	r4,0(r10)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
40009d0c:	3801a816 	blt	r7,zero,4000a3b0 <MotionCompensateTB+0x828>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
40009d10:	29000017 	ldw	r4,0(r5)
40009d14:	3901980e 	bge	r7,r4,4000a378 <MotionCompensateTB+0x7f0>
                     else b.p[y][x]=L_pixel(ref,sx,sy);
40009d18:	da405c17 	ldw	r9,368(sp)
40009d1c:	4889883a 	add	r4,r9,r2
40009d20:	21000003 	ldbu	r4,0(r4)
40009d24:	59000015 	stw	r4,0(r11)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
40009d28:	b0019816 	blt	r22,zero,4000a38c <MotionCompensateTB+0x804>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
40009d2c:	29000017 	ldw	r4,0(r5)
40009d30:	b101880e 	bge	r22,r4,4000a354 <MotionCompensateTB+0x7cc>
                     else b.p[y][x]=L_pixel(ref,sx,sy);
40009d34:	da405d17 	ldw	r9,372(sp)
40009d38:	4889883a 	add	r4,r9,r2
40009d3c:	21000003 	ldbu	r4,0(r4)
40009d40:	61000015 	stw	r4,0(r12)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
40009d44:	a8018816 	blt	r21,zero,4000a368 <MotionCompensateTB+0x7e0>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
40009d48:	29000017 	ldw	r4,0(r5)
40009d4c:	a901780e 	bge	r21,r4,4000a330 <MotionCompensateTB+0x7a8>
                     else b.p[y][x]=L_pixel(ref,sx,sy);
40009d50:	da405e17 	ldw	r9,376(sp)
40009d54:	4889883a 	add	r4,r9,r2
40009d58:	21000003 	ldbu	r4,0(r4)
40009d5c:	69000015 	stw	r4,0(r13)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
40009d60:	a0017816 	blt	r20,zero,4000a344 <MotionCompensateTB+0x7bc>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
40009d64:	29000017 	ldw	r4,0(r5)
40009d68:	a101680e 	bge	r20,r4,4000a30c <MotionCompensateTB+0x784>
                     else b.p[y][x]=L_pixel(ref,sx,sy);
40009d6c:	da405f17 	ldw	r9,380(sp)
40009d70:	4889883a 	add	r4,r9,r2
40009d74:	21000003 	ldbu	r4,0(r4)
40009d78:	71000015 	stw	r4,0(r14)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
40009d7c:	98016816 	blt	r19,zero,4000a320 <MotionCompensateTB+0x798>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
40009d80:	29000017 	ldw	r4,0(r5)
40009d84:	9901580e 	bge	r19,r4,4000a2e8 <MotionCompensateTB+0x760>
                     else b.p[y][x]=L_pixel(ref,sx,sy);
40009d88:	da406017 	ldw	r9,384(sp)
40009d8c:	4889883a 	add	r4,r9,r2
40009d90:	21000003 	ldbu	r4,0(r4)
40009d94:	79000015 	stw	r4,0(r15)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
40009d98:	90015816 	blt	r18,zero,4000a2fc <MotionCompensateTB+0x774>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
40009d9c:	29000017 	ldw	r4,0(r5)
40009da0:	9101480e 	bge	r18,r4,4000a2c4 <MotionCompensateTB+0x73c>
                     else b.p[y][x]=L_pixel(ref,sx,sy);
40009da4:	da406117 	ldw	r9,388(sp)
40009da8:	4889883a 	add	r4,r9,r2
40009dac:	21000003 	ldbu	r4,0(r4)
40009db0:	f9000015 	stw	r4,0(ra)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
40009db4:	40014816 	blt	r8,zero,4000a2d8 <MotionCompensateTB+0x750>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
40009db8:	29000017 	ldw	r4,0(r5)
40009dbc:	41013c0e 	bge	r8,r4,4000a2b0 <MotionCompensateTB+0x728>
                     else b.p[y][x]=L_pixel(ref,sx,sy);
40009dc0:	d9006217 	ldw	r4,392(sp)
40009dc4:	2085883a 	add	r2,r4,r2
40009dc8:	10800003 	ldbu	r2,0(r2)
40009dcc:	88800015 	stw	r2,0(r17)


static inline L_MC_temp_block GetLMCTempBlock(frame *ref, int org_x, int org_y) {
  L_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<9; ++y) {
40009dd0:	da405317 	ldw	r9,332(sp)
40009dd4:	31800044 	addi	r6,r6,1
40009dd8:	8c400904 	addi	r17,r17,36
40009ddc:	84000904 	addi	r16,r16,36
40009de0:	ffc00904 	addi	ra,ra,36
40009de4:	7bc00904 	addi	r15,r15,36
40009de8:	73800904 	addi	r14,r14,36
40009dec:	6b400904 	addi	r13,r13,36
40009df0:	63000904 	addi	r12,r12,36
40009df4:	5ac00904 	addi	r11,r11,36
40009df8:	52800904 	addi	r10,r10,36
40009dfc:	327fae1e 	bne	r6,r9,40009cb8 <__alt_data_end+0xc0009cb8>
		  rx_chroma_motion_comp_packet(id1, this, (org_x>>1), (org_y>>1));
		  //printf("done!\n");
	  }
	  else{
		  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
		  C_MC_temp_block bcb = GetCMCTempBlock(ref,0,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));
40009e00:	db005817 	ldw	r12,352(sp)
40009e04:	db805917 	ldw	r14,356(sp)
40009e08:	dac05517 	ldw	r11,340(sp)
40009e0c:	db405617 	ldw	r13,344(sp)
40009e10:	6007d0fa 	srai	r3,r12,3
40009e14:	5811d07a 	srai	r8,r11,1
40009e18:	6815d07a 	srai	r10,r13,1
40009e1c:	7005d0fa 	srai	r2,r14,3
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
                     else b.p[y][x]=L_pixel(ref,sx,sy);
    }
  }
  return b;
40009e20:	d9802a17 	ldw	r6,168(sp)
40009e24:	d9c03017 	ldw	r7,192(sp)
40009e28:	dac03217 	ldw	r11,200(sp)
40009e2c:	db003317 	ldw	r12,204(sp)
40009e30:	ddc02717 	ldw	r23,156(sp)
40009e34:	da403117 	ldw	r9,196(sp)
		  rx_chroma_motion_comp_packet(id1, this, (org_x>>1), (org_y>>1));
		  //printf("done!\n");
	  }
	  else{
		  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
		  C_MC_temp_block bcb = GetCMCTempBlock(ref,0,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));
40009e38:	1a07883a 	add	r3,r3,r8
40009e3c:	1285883a 	add	r2,r2,r10
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
                     else b.p[y][x]=L_pixel(ref,sx,sy);
    }
  }
  return b;
40009e40:	d9805815 	stw	r6,352(sp)
40009e44:	d9c05915 	stw	r7,356(sp)
40009e48:	dac05a15 	stw	r11,360(sp)
40009e4c:	db005215 	stw	r12,328(sp)
40009e50:	ddc05e15 	stw	r23,376(sp)
40009e54:	da405315 	stw	r9,332(sp)
40009e58:	d9006317 	ldw	r4,396(sp)
40009e5c:	dd401517 	ldw	r21,84(sp)
40009e60:	dd001617 	ldw	r20,88(sp)
40009e64:	dcc01717 	ldw	r19,92(sp)
40009e68:	dc801817 	ldw	r18,96(sp)
40009e6c:	dc401e17 	ldw	r17,120(sp)
40009e70:	dc001f17 	ldw	r16,124(sp)
40009e74:	dbc02017 	ldw	r15,128(sp)
40009e78:	db802117 	ldw	r14,132(sp)
40009e7c:	df002817 	ldw	fp,160(sp)
40009e80:	dfc02917 	ldw	ra,164(sp)
40009e84:	2ac00417 	ldw	r11,16(r5)
40009e88:	19800044 	addi	r6,r3,1
40009e8c:	2b400717 	ldw	r13,28(r5)
40009e90:	2b000517 	ldw	r12,20(r5)
40009e94:	100f883a 	mov	r7,r2
40009e98:	1001dd16 	blt	r2,zero,4000a610 <MotionCompensateTB+0xa88>
  C_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<3; ++y) {
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
40009e9c:	3ac15916 	blt	r7,r11,4000a404 <MotionCompensateTB+0x87c>
40009ea0:	5a7fffc4 	addi	r9,r11,-1
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
40009ea4:	18015916 	blt	r3,zero,4000a40c <MotionCompensateTB+0x884>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
40009ea8:	2d800317 	ldw	r22,12(r5)
40009eac:	4b13383a 	mul	r9,r9,r12
40009eb0:	1d817516 	blt	r3,r22,4000a488 <MotionCompensateTB+0x900>
40009eb4:	6dad883a 	add	r22,r13,r22
40009eb8:	b26d883a 	add	r22,r22,r9
40009ebc:	b5bfffc3 	ldbu	r22,-1(r22)
40009ec0:	6a53883a 	add	r9,r13,r9
40009ec4:	dd800115 	stw	r22,4(sp)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
40009ec8:	30015516 	blt	r6,zero,4000a420 <MotionCompensateTB+0x898>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
40009ecc:	2d800317 	ldw	r22,12(r5)
40009ed0:	35816916 	blt	r6,r22,4000a478 <MotionCompensateTB+0x8f0>
40009ed4:	4d93883a 	add	r9,r9,r22
40009ed8:	4a7fffc3 	ldbu	r9,-1(r9)
40009edc:	10800044 	addi	r2,r2,1
40009ee0:	da400215 	stw	r9,8(sp)
40009ee4:	10015216 	blt	r2,zero,4000a430 <MotionCompensateTB+0x8a8>
  C_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<3; ++y) {
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
40009ee8:	12c15316 	blt	r2,r11,4000a438 <MotionCompensateTB+0x8b0>
40009eec:	5a7fffc4 	addi	r9,r11,-1
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
40009ef0:	18015316 	blt	r3,zero,4000a440 <MotionCompensateTB+0x8b8>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
40009ef4:	2d800317 	ldw	r22,12(r5)
40009ef8:	4b13383a 	mul	r9,r9,r12
40009efc:	1d815816 	blt	r3,r22,4000a460 <MotionCompensateTB+0x8d8>
40009f00:	6a5b883a 	add	r13,r13,r9
40009f04:	6dad883a 	add	r22,r13,r22
40009f08:	b27fffc3 	ldbu	r9,-1(r22)
40009f0c:	da400415 	stw	r9,16(sp)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
40009f10:	30015016 	blt	r6,zero,4000a454 <MotionCompensateTB+0x8cc>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
40009f14:	2a400317 	ldw	r9,12(r5)
40009f18:	32416f16 	blt	r6,r9,4000a4d8 <MotionCompensateTB+0x950>
40009f1c:	6a53883a 	add	r9,r13,r9
40009f20:	4a7fffc3 	ldbu	r9,-1(r9)
40009f24:	da400515 	stw	r9,20(sp)
                     else b.p[y][x]=C_pixel(ref,iCbCr,sx,sy);
    }
  }
  return b;
40009f28:	da400417 	ldw	r9,16(sp)
40009f2c:	db400117 	ldw	r13,4(sp)
40009f30:	ddc00217 	ldw	r23,8(sp)
40009f34:	da405415 	stw	r9,336(sp)
40009f38:	db405b15 	stw	r13,364(sp)
40009f3c:	ddc05715 	stw	r23,348(sp)
40009f40:	dd800517 	ldw	r22,20(sp)
40009f44:	2a400817 	ldw	r9,32(r5)
  C_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<3; ++y) {
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
40009f48:	3ac00116 	blt	r7,r11,40009f50 <MotionCompensateTB+0x3c8>
40009f4c:	59ffffc4 	addi	r7,r11,-1
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
40009f50:	18017316 	blt	r3,zero,4000a520 <MotionCompensateTB+0x998>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
40009f54:	2b400317 	ldw	r13,12(r5)
40009f58:	3b0f383a 	mul	r7,r7,r12
40009f5c:	db405d15 	stw	r13,372(sp)
40009f60:	1b416616 	blt	r3,r13,4000a4fc <MotionCompensateTB+0x974>
40009f64:	49ef883a 	add	r23,r9,r7
40009f68:	bb5b883a 	add	r13,r23,r13
40009f6c:	db405c15 	stw	r13,368(sp)
40009f70:	6b7fffc3 	ldbu	r13,-1(r13)
40009f74:	db400115 	stw	r13,4(sp)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
40009f78:	30016516 	blt	r6,zero,4000a510 <MotionCompensateTB+0x988>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
40009f7c:	2b400317 	ldw	r13,12(r5)
40009f80:	33415916 	blt	r6,r13,4000a4e8 <MotionCompensateTB+0x960>
40009f84:	4b5b883a 	add	r13,r9,r13
40009f88:	69cf883a 	add	r7,r13,r7
40009f8c:	39ffffc3 	ldbu	r7,-1(r7)
40009f90:	d9c00215 	stw	r7,8(sp)
  C_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<3; ++y) {
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
40009f94:	12c00116 	blt	r2,r11,40009f9c <MotionCompensateTB+0x414>
40009f98:	58bfffc4 	addi	r2,r11,-1
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
40009f9c:	18016516 	blt	r3,zero,4000a534 <MotionCompensateTB+0x9ac>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
40009fa0:	29c00317 	ldw	r7,12(r5)
40009fa4:	1305383a 	mul	r2,r2,r12
40009fa8:	19c14216 	blt	r3,r7,4000a4b4 <MotionCompensateTB+0x92c>
40009fac:	4887883a 	add	r3,r9,r2
40009fb0:	19c7883a 	add	r3,r3,r7
40009fb4:	18ffffc3 	ldbu	r3,-1(r3)
40009fb8:	d8c00415 	stw	r3,16(sp)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
40009fbc:	30014216 	blt	r6,zero,4000a4c8 <MotionCompensateTB+0x940>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
40009fc0:	28c00317 	ldw	r3,12(r5)
40009fc4:	30c13616 	blt	r6,r3,4000a4a0 <MotionCompensateTB+0x918>
40009fc8:	48c7883a 	add	r3,r9,r3
40009fcc:	1885883a 	add	r2,r3,r2
40009fd0:	10bfffc3 	ldbu	r2,-1(r2)
40009fd4:	d8800515 	stw	r2,20(sp)
	  else{
		  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
		  C_MC_temp_block bcb = GetCMCTempBlock(ref,0,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));
		  C_MC_temp_block bcr = GetCMCTempBlock(ref,1,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));
		  int offset = 2;
		  L_pixel(this,0+org_x,0+org_y)         = b.p[0 + offset][0 + offset];
40009fd8:	20800217 	ldw	r2,8(r4)
40009fdc:	d8c05617 	ldw	r3,344(sp)
40009fe0:	21800617 	ldw	r6,24(r4)
		  L_pixel(this,1+org_x,0+org_y)         = b.p[0 + offset][1 + offset];
40009fe4:	ddc05517 	ldw	r23,340(sp)
	  else{
		  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
		  C_MC_temp_block bcb = GetCMCTempBlock(ref,0,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));
		  C_MC_temp_block bcr = GetCMCTempBlock(ref,1,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));
		  int offset = 2;
		  L_pixel(this,0+org_x,0+org_y)         = b.p[0 + offset][0 + offset];
40009fe8:	1885383a 	mul	r2,r3,r2
		  L_pixel(this,1+org_x,0+org_y)         = b.p[0 + offset][1 + offset];
40009fec:	d9c05617 	ldw	r7,344(sp)
	  else{
		  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
		  C_MC_temp_block bcb = GetCMCTempBlock(ref,0,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));
		  C_MC_temp_block bcr = GetCMCTempBlock(ref,1,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));
		  int offset = 2;
		  L_pixel(this,0+org_x,0+org_y)         = b.p[0 + offset][0 + offset];
40009ff0:	35cd883a 	add	r6,r6,r23
40009ff4:	3085883a 	add	r2,r6,r2
40009ff8:	15400005 	stb	r21,0(r2)
		  L_pixel(this,1+org_x,0+org_y)         = b.p[0 + offset][1 + offset];
40009ffc:	21800217 	ldw	r6,8(r4)
4000a000:	22400617 	ldw	r9,24(r4)
4000a004:	b9400044 	addi	r5,r23,1
4000a008:	398d383a 	mul	r6,r7,r6
4000a00c:	4953883a 	add	r9,r9,r5
		  L_pixel(this,3+org_x,0+org_y)         = b.p[0 + offset][3 + offset];
		  L_pixel(this,0+org_x,1+org_y)         = b.p[1 + offset][0 + offset];
		  L_pixel(this,1+org_x,1+org_y)         = b.p[1 + offset][1 + offset];
		  L_pixel(this,2+org_x,1+org_y)         = b.p[1 + offset][2 + offset];
		  L_pixel(this,3+org_x,1+org_y)         = b.p[1 + offset][3 + offset];
		  L_pixel(this,0+org_x,2+org_y)         = b.p[2 + offset][0 + offset];
4000a010:	db005617 	ldw	r12,344(sp)
		  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
		  C_MC_temp_block bcb = GetCMCTempBlock(ref,0,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));
		  C_MC_temp_block bcr = GetCMCTempBlock(ref,1,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));
		  int offset = 2;
		  L_pixel(this,0+org_x,0+org_y)         = b.p[0 + offset][0 + offset];
		  L_pixel(this,1+org_x,0+org_y)         = b.p[0 + offset][1 + offset];
4000a014:	498d883a 	add	r6,r9,r6
4000a018:	35000005 	stb	r20,0(r6)
		  L_pixel(this,2+org_x,0+org_y)         = b.p[0 + offset][2 + offset];
4000a01c:	21800217 	ldw	r6,8(r4)
4000a020:	22c00617 	ldw	r11,24(r4)
4000a024:	b8c00084 	addi	r3,r23,2
4000a028:	618d383a 	mul	r6,r12,r6
4000a02c:	58d7883a 	add	r11,r11,r3
		  L_pixel(this,3+org_x,0+org_y)         = b.p[0 + offset][3 + offset];
4000a030:	b88000c4 	addi	r2,r23,3
		  C_MC_temp_block bcb = GetCMCTempBlock(ref,0,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));
		  C_MC_temp_block bcr = GetCMCTempBlock(ref,1,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));
		  int offset = 2;
		  L_pixel(this,0+org_x,0+org_y)         = b.p[0 + offset][0 + offset];
		  L_pixel(this,1+org_x,0+org_y)         = b.p[0 + offset][1 + offset];
		  L_pixel(this,2+org_x,0+org_y)         = b.p[0 + offset][2 + offset];
4000a034:	598d883a 	add	r6,r11,r6
4000a038:	34c00005 	stb	r19,0(r6)
		  L_pixel(this,3+org_x,0+org_y)         = b.p[0 + offset][3 + offset];
4000a03c:	21800217 	ldw	r6,8(r4)
4000a040:	22c00617 	ldw	r11,24(r4)
		  L_pixel(this,0+org_x,1+org_y)         = b.p[1 + offset][0 + offset];
4000a044:	39c00044 	addi	r7,r7,1
		  C_MC_temp_block bcr = GetCMCTempBlock(ref,1,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));
		  int offset = 2;
		  L_pixel(this,0+org_x,0+org_y)         = b.p[0 + offset][0 + offset];
		  L_pixel(this,1+org_x,0+org_y)         = b.p[0 + offset][1 + offset];
		  L_pixel(this,2+org_x,0+org_y)         = b.p[0 + offset][2 + offset];
		  L_pixel(this,3+org_x,0+org_y)         = b.p[0 + offset][3 + offset];
4000a048:	618d383a 	mul	r6,r12,r6
4000a04c:	5897883a 	add	r11,r11,r2
		  L_pixel(this,0+org_x,1+org_y)         = b.p[1 + offset][0 + offset];
		  L_pixel(this,1+org_x,1+org_y)         = b.p[1 + offset][1 + offset];
		  L_pixel(this,2+org_x,1+org_y)         = b.p[1 + offset][2 + offset];
		  L_pixel(this,3+org_x,1+org_y)         = b.p[1 + offset][3 + offset];
		  L_pixel(this,0+org_x,2+org_y)         = b.p[2 + offset][0 + offset];
4000a050:	62400084 	addi	r9,r12,2
		  C_MC_temp_block bcr = GetCMCTempBlock(ref,1,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));
		  int offset = 2;
		  L_pixel(this,0+org_x,0+org_y)         = b.p[0 + offset][0 + offset];
		  L_pixel(this,1+org_x,0+org_y)         = b.p[0 + offset][1 + offset];
		  L_pixel(this,2+org_x,0+org_y)         = b.p[0 + offset][2 + offset];
		  L_pixel(this,3+org_x,0+org_y)         = b.p[0 + offset][3 + offset];
4000a054:	598d883a 	add	r6,r11,r6
4000a058:	34800005 	stb	r18,0(r6)
		  L_pixel(this,0+org_x,1+org_y)         = b.p[1 + offset][0 + offset];
4000a05c:	21800217 	ldw	r6,8(r4)
4000a060:	22c00617 	ldw	r11,24(r4)
		  L_pixel(this,3+org_x,1+org_y)         = b.p[1 + offset][3 + offset];
		  L_pixel(this,0+org_x,2+org_y)         = b.p[2 + offset][0 + offset];
		  L_pixel(this,1+org_x,2+org_y)         = b.p[2 + offset][1 + offset];
		  L_pixel(this,2+org_x,2+org_y)         = b.p[2 + offset][2 + offset];
		  L_pixel(this,3+org_x,2+org_y)         = b.p[2 + offset][3 + offset];
		  L_pixel(this,0+org_x,3+org_y)         = b.p[3 + offset][0 + offset];
4000a064:	630000c4 	addi	r12,r12,3
		  int offset = 2;
		  L_pixel(this,0+org_x,0+org_y)         = b.p[0 + offset][0 + offset];
		  L_pixel(this,1+org_x,0+org_y)         = b.p[0 + offset][1 + offset];
		  L_pixel(this,2+org_x,0+org_y)         = b.p[0 + offset][2 + offset];
		  L_pixel(this,3+org_x,0+org_y)         = b.p[0 + offset][3 + offset];
		  L_pixel(this,0+org_x,1+org_y)         = b.p[1 + offset][0 + offset];
4000a068:	398d383a 	mul	r6,r7,r6
4000a06c:	5dd7883a 	add	r11,r11,r23
		  L_pixel(this,1+org_x,3+org_y)         = b.p[3 + offset][1 + offset];
		  L_pixel(this,2+org_x,3+org_y)         = b.p[3 + offset][2 + offset];
		  L_pixel(this,3+org_x,3+org_y)         = b.p[3 + offset][3 + offset];
		  C_pixel(this,0,0+(org_x>>1),0+(org_y>>1)) = bcb.p[0][0];
		  C_pixel(this,0,1+(org_x>>1),0+(org_y>>1)) = bcb.p[1][0];
		  C_pixel(this,0,0+(org_x>>1),1+(org_y>>1)) = bcb.p[0][1];
4000a070:	53400044 	addi	r13,r10,1
		  int offset = 2;
		  L_pixel(this,0+org_x,0+org_y)         = b.p[0 + offset][0 + offset];
		  L_pixel(this,1+org_x,0+org_y)         = b.p[0 + offset][1 + offset];
		  L_pixel(this,2+org_x,0+org_y)         = b.p[0 + offset][2 + offset];
		  L_pixel(this,3+org_x,0+org_y)         = b.p[0 + offset][3 + offset];
		  L_pixel(this,0+org_x,1+org_y)         = b.p[1 + offset][0 + offset];
4000a074:	598d883a 	add	r6,r11,r6
4000a078:	34400005 	stb	r17,0(r6)
		  L_pixel(this,1+org_x,1+org_y)         = b.p[1 + offset][1 + offset];
4000a07c:	22c00217 	ldw	r11,8(r4)
4000a080:	24400617 	ldw	r17,24(r4)
		  L_pixel(this,0+org_x,3+org_y)         = b.p[3 + offset][0 + offset];
		  L_pixel(this,1+org_x,3+org_y)         = b.p[3 + offset][1 + offset];
		  L_pixel(this,2+org_x,3+org_y)         = b.p[3 + offset][2 + offset];
		  L_pixel(this,3+org_x,3+org_y)         = b.p[3 + offset][3 + offset];
		  C_pixel(this,0,0+(org_x>>1),0+(org_y>>1)) = bcb.p[0][0];
		  C_pixel(this,0,1+(org_x>>1),0+(org_y>>1)) = bcb.p[1][0];
4000a084:	41800044 	addi	r6,r8,1
		  L_pixel(this,0+org_x,0+org_y)         = b.p[0 + offset][0 + offset];
		  L_pixel(this,1+org_x,0+org_y)         = b.p[0 + offset][1 + offset];
		  L_pixel(this,2+org_x,0+org_y)         = b.p[0 + offset][2 + offset];
		  L_pixel(this,3+org_x,0+org_y)         = b.p[0 + offset][3 + offset];
		  L_pixel(this,0+org_x,1+org_y)         = b.p[1 + offset][0 + offset];
		  L_pixel(this,1+org_x,1+org_y)         = b.p[1 + offset][1 + offset];
4000a088:	3ad7383a 	mul	r11,r7,r11
4000a08c:	8963883a 	add	r17,r17,r5
4000a090:	8ad7883a 	add	r11,r17,r11
4000a094:	5c000005 	stb	r16,0(r11)
		  L_pixel(this,2+org_x,1+org_y)         = b.p[1 + offset][2 + offset];
4000a098:	22c00217 	ldw	r11,8(r4)
4000a09c:	24000617 	ldw	r16,24(r4)
4000a0a0:	3ad7383a 	mul	r11,r7,r11
4000a0a4:	80e1883a 	add	r16,r16,r3
4000a0a8:	82d7883a 	add	r11,r16,r11
4000a0ac:	5bc00005 	stb	r15,0(r11)
		  L_pixel(this,3+org_x,1+org_y)         = b.p[1 + offset][3 + offset];
4000a0b0:	22c00217 	ldw	r11,8(r4)
4000a0b4:	23c00617 	ldw	r15,24(r4)
4000a0b8:	3acf383a 	mul	r7,r7,r11
4000a0bc:	7897883a 	add	r11,r15,r2
4000a0c0:	59cf883a 	add	r7,r11,r7
4000a0c4:	3b800005 	stb	r14,0(r7)
		  L_pixel(this,0+org_x,2+org_y)         = b.p[2 + offset][0 + offset];
4000a0c8:	21c00217 	ldw	r7,8(r4)
4000a0cc:	22c00617 	ldw	r11,24(r4)
4000a0d0:	db805e17 	ldw	r14,376(sp)
4000a0d4:	49cf383a 	mul	r7,r9,r7
4000a0d8:	5dd7883a 	add	r11,r11,r23
4000a0dc:	59cf883a 	add	r7,r11,r7
4000a0e0:	3b800005 	stb	r14,0(r7)
		  L_pixel(this,1+org_x,2+org_y)         = b.p[2 + offset][1 + offset];
4000a0e4:	21c00217 	ldw	r7,8(r4)
4000a0e8:	22c00617 	ldw	r11,24(r4)
		  L_pixel(this,2+org_x,2+org_y)         = b.p[2 + offset][2 + offset];
		  L_pixel(this,3+org_x,2+org_y)         = b.p[2 + offset][3 + offset];
4000a0ec:	ddc05817 	ldw	r23,352(sp)
		  L_pixel(this,0+org_x,1+org_y)         = b.p[1 + offset][0 + offset];
		  L_pixel(this,1+org_x,1+org_y)         = b.p[1 + offset][1 + offset];
		  L_pixel(this,2+org_x,1+org_y)         = b.p[1 + offset][2 + offset];
		  L_pixel(this,3+org_x,1+org_y)         = b.p[1 + offset][3 + offset];
		  L_pixel(this,0+org_x,2+org_y)         = b.p[2 + offset][0 + offset];
		  L_pixel(this,1+org_x,2+org_y)         = b.p[2 + offset][1 + offset];
4000a0f0:	49cf383a 	mul	r7,r9,r7
4000a0f4:	5957883a 	add	r11,r11,r5
		  L_pixel(this,2+org_x,2+org_y)         = b.p[2 + offset][2 + offset];
		  L_pixel(this,3+org_x,2+org_y)         = b.p[2 + offset][3 + offset];
		  L_pixel(this,0+org_x,3+org_y)         = b.p[3 + offset][0 + offset];
4000a0f8:	db805917 	ldw	r14,356(sp)
		  L_pixel(this,0+org_x,1+org_y)         = b.p[1 + offset][0 + offset];
		  L_pixel(this,1+org_x,1+org_y)         = b.p[1 + offset][1 + offset];
		  L_pixel(this,2+org_x,1+org_y)         = b.p[1 + offset][2 + offset];
		  L_pixel(this,3+org_x,1+org_y)         = b.p[1 + offset][3 + offset];
		  L_pixel(this,0+org_x,2+org_y)         = b.p[2 + offset][0 + offset];
		  L_pixel(this,1+org_x,2+org_y)         = b.p[2 + offset][1 + offset];
4000a0fc:	59cf883a 	add	r7,r11,r7
4000a100:	3f000005 	stb	fp,0(r7)
		  L_pixel(this,2+org_x,2+org_y)         = b.p[2 + offset][2 + offset];
4000a104:	21c00217 	ldw	r7,8(r4)
4000a108:	22c00617 	ldw	r11,24(r4)
4000a10c:	49cf383a 	mul	r7,r9,r7
4000a110:	58d7883a 	add	r11,r11,r3
4000a114:	59cf883a 	add	r7,r11,r7
4000a118:	3fc00005 	stb	ra,0(r7)
		  L_pixel(this,3+org_x,2+org_y)         = b.p[2 + offset][3 + offset];
4000a11c:	21c00217 	ldw	r7,8(r4)
4000a120:	22c00617 	ldw	r11,24(r4)
4000a124:	49d3383a 	mul	r9,r9,r7
4000a128:	588f883a 	add	r7,r11,r2
		  L_pixel(this,0+org_x,3+org_y)         = b.p[3 + offset][0 + offset];
4000a12c:	dac05517 	ldw	r11,340(sp)
		  L_pixel(this,2+org_x,1+org_y)         = b.p[1 + offset][2 + offset];
		  L_pixel(this,3+org_x,1+org_y)         = b.p[1 + offset][3 + offset];
		  L_pixel(this,0+org_x,2+org_y)         = b.p[2 + offset][0 + offset];
		  L_pixel(this,1+org_x,2+org_y)         = b.p[2 + offset][1 + offset];
		  L_pixel(this,2+org_x,2+org_y)         = b.p[2 + offset][2 + offset];
		  L_pixel(this,3+org_x,2+org_y)         = b.p[2 + offset][3 + offset];
4000a130:	3a4f883a 	add	r7,r7,r9
4000a134:	3dc00005 	stb	r23,0(r7)
		  L_pixel(this,0+org_x,3+org_y)         = b.p[3 + offset][0 + offset];
4000a138:	22400217 	ldw	r9,8(r4)
4000a13c:	21c00617 	ldw	r7,24(r4)
		  L_pixel(this,1+org_x,3+org_y)         = b.p[3 + offset][1 + offset];
4000a140:	ddc05317 	ldw	r23,332(sp)
		  L_pixel(this,3+org_x,1+org_y)         = b.p[1 + offset][3 + offset];
		  L_pixel(this,0+org_x,2+org_y)         = b.p[2 + offset][0 + offset];
		  L_pixel(this,1+org_x,2+org_y)         = b.p[2 + offset][1 + offset];
		  L_pixel(this,2+org_x,2+org_y)         = b.p[2 + offset][2 + offset];
		  L_pixel(this,3+org_x,2+org_y)         = b.p[2 + offset][3 + offset];
		  L_pixel(this,0+org_x,3+org_y)         = b.p[3 + offset][0 + offset];
4000a144:	6253383a 	mul	r9,r12,r9
4000a148:	3acf883a 	add	r7,r7,r11
4000a14c:	3a4f883a 	add	r7,r7,r9
4000a150:	3b800005 	stb	r14,0(r7)
		  L_pixel(this,1+org_x,3+org_y)         = b.p[3 + offset][1 + offset];
4000a154:	21c00217 	ldw	r7,8(r4)
4000a158:	22400617 	ldw	r9,24(r4)
4000a15c:	61cf383a 	mul	r7,r12,r7
4000a160:	494b883a 	add	r5,r9,r5
		  L_pixel(this,2+org_x,3+org_y)         = b.p[3 + offset][2 + offset];
		  L_pixel(this,3+org_x,3+org_y)         = b.p[3 + offset][3 + offset];
		  C_pixel(this,0,0+(org_x>>1),0+(org_y>>1)) = bcb.p[0][0];
4000a164:	da405b17 	ldw	r9,364(sp)
		  L_pixel(this,0+org_x,2+org_y)         = b.p[2 + offset][0 + offset];
		  L_pixel(this,1+org_x,2+org_y)         = b.p[2 + offset][1 + offset];
		  L_pixel(this,2+org_x,2+org_y)         = b.p[2 + offset][2 + offset];
		  L_pixel(this,3+org_x,2+org_y)         = b.p[2 + offset][3 + offset];
		  L_pixel(this,0+org_x,3+org_y)         = b.p[3 + offset][0 + offset];
		  L_pixel(this,1+org_x,3+org_y)         = b.p[3 + offset][1 + offset];
4000a168:	29cb883a 	add	r5,r5,r7
4000a16c:	2dc00005 	stb	r23,0(r5)
		  L_pixel(this,2+org_x,3+org_y)         = b.p[3 + offset][2 + offset];
4000a170:	21400217 	ldw	r5,8(r4)
4000a174:	21c00617 	ldw	r7,24(r4)
4000a178:	614b383a 	mul	r5,r12,r5
4000a17c:	38c7883a 	add	r3,r7,r3
		  L_pixel(this,3+org_x,3+org_y)         = b.p[3 + offset][3 + offset];
4000a180:	d9c05217 	ldw	r7,328(sp)
		  L_pixel(this,1+org_x,2+org_y)         = b.p[2 + offset][1 + offset];
		  L_pixel(this,2+org_x,2+org_y)         = b.p[2 + offset][2 + offset];
		  L_pixel(this,3+org_x,2+org_y)         = b.p[2 + offset][3 + offset];
		  L_pixel(this,0+org_x,3+org_y)         = b.p[3 + offset][0 + offset];
		  L_pixel(this,1+org_x,3+org_y)         = b.p[3 + offset][1 + offset];
		  L_pixel(this,2+org_x,3+org_y)         = b.p[3 + offset][2 + offset];
4000a184:	1947883a 	add	r3,r3,r5
4000a188:	d9405a17 	ldw	r5,360(sp)
4000a18c:	19400005 	stb	r5,0(r3)
		  L_pixel(this,3+org_x,3+org_y)         = b.p[3 + offset][3 + offset];
4000a190:	20c00217 	ldw	r3,8(r4)
4000a194:	21400617 	ldw	r5,24(r4)
4000a198:	60d9383a 	mul	r12,r12,r3
4000a19c:	2885883a 	add	r2,r5,r2
4000a1a0:	1305883a 	add	r2,r2,r12
4000a1a4:	11c00005 	stb	r7,0(r2)
		  C_pixel(this,0,0+(org_x>>1),0+(org_y>>1)) = bcb.p[0][0];
4000a1a8:	20800517 	ldw	r2,20(r4)
4000a1ac:	20c00717 	ldw	r3,28(r4)
4000a1b0:	5085383a 	mul	r2,r10,r2
4000a1b4:	1a07883a 	add	r3,r3,r8
4000a1b8:	1885883a 	add	r2,r3,r2
4000a1bc:	12400005 	stb	r9,0(r2)
		  C_pixel(this,0,1+(org_x>>1),0+(org_y>>1)) = bcb.p[1][0];
4000a1c0:	20800517 	ldw	r2,20(r4)
4000a1c4:	20c00717 	ldw	r3,28(r4)
4000a1c8:	dac05417 	ldw	r11,336(sp)
4000a1cc:	5085383a 	mul	r2,r10,r2
4000a1d0:	1987883a 	add	r3,r3,r6
		  C_pixel(this,0,0+(org_x>>1),1+(org_y>>1)) = bcb.p[0][1];
4000a1d4:	db005717 	ldw	r12,348(sp)
		  L_pixel(this,0+org_x,3+org_y)         = b.p[3 + offset][0 + offset];
		  L_pixel(this,1+org_x,3+org_y)         = b.p[3 + offset][1 + offset];
		  L_pixel(this,2+org_x,3+org_y)         = b.p[3 + offset][2 + offset];
		  L_pixel(this,3+org_x,3+org_y)         = b.p[3 + offset][3 + offset];
		  C_pixel(this,0,0+(org_x>>1),0+(org_y>>1)) = bcb.p[0][0];
		  C_pixel(this,0,1+(org_x>>1),0+(org_y>>1)) = bcb.p[1][0];
4000a1d8:	1885883a 	add	r2,r3,r2
4000a1dc:	12c00005 	stb	r11,0(r2)
		  C_pixel(this,0,0+(org_x>>1),1+(org_y>>1)) = bcb.p[0][1];
4000a1e0:	20800517 	ldw	r2,20(r4)
4000a1e4:	20c00717 	ldw	r3,28(r4)
4000a1e8:	6885383a 	mul	r2,r13,r2
4000a1ec:	1a07883a 	add	r3,r3,r8
4000a1f0:	1885883a 	add	r2,r3,r2
4000a1f4:	13000005 	stb	r12,0(r2)
		  C_pixel(this,0,1+(org_x>>1),1+(org_y>>1)) = bcb.p[1][1];
4000a1f8:	20800517 	ldw	r2,20(r4)
4000a1fc:	20c00717 	ldw	r3,28(r4)
4000a200:	6885383a 	mul	r2,r13,r2
4000a204:	1987883a 	add	r3,r3,r6
4000a208:	1885883a 	add	r2,r3,r2
4000a20c:	15800005 	stb	r22,0(r2)
		  C_pixel(this,1,0+(org_x>>1),0+(org_y>>1)) = bcr.p[0][0];
4000a210:	20800517 	ldw	r2,20(r4)
4000a214:	20c00817 	ldw	r3,32(r4)
4000a218:	5085383a 	mul	r2,r10,r2
4000a21c:	1a07883a 	add	r3,r3,r8
4000a220:	1885883a 	add	r2,r3,r2
4000a224:	d8c00117 	ldw	r3,4(sp)
4000a228:	10c00005 	stb	r3,0(r2)
		  C_pixel(this,1,1+(org_x>>1),0+(org_y>>1)) = bcr.p[1][0];
4000a22c:	20800517 	ldw	r2,20(r4)
4000a230:	20c00817 	ldw	r3,32(r4)
4000a234:	5095383a 	mul	r10,r10,r2
4000a238:	1985883a 	add	r2,r3,r6
4000a23c:	d8c00417 	ldw	r3,16(sp)
4000a240:	1285883a 	add	r2,r2,r10
4000a244:	10c00005 	stb	r3,0(r2)
		  C_pixel(this,1,0+(org_x>>1),1+(org_y>>1)) = bcr.p[0][1];
4000a248:	20800517 	ldw	r2,20(r4)
4000a24c:	20c00817 	ldw	r3,32(r4)
4000a250:	6885383a 	mul	r2,r13,r2
4000a254:	1a11883a 	add	r8,r3,r8
4000a258:	4091883a 	add	r8,r8,r2
4000a25c:	d8800217 	ldw	r2,8(sp)
4000a260:	40800005 	stb	r2,0(r8)
		  C_pixel(this,1,1+(org_x>>1),1+(org_y>>1)) = bcr.p[1][1];
4000a264:	20800517 	ldw	r2,20(r4)
4000a268:	20c00817 	ldw	r3,32(r4)
4000a26c:	689b383a 	mul	r13,r13,r2
4000a270:	d8800517 	ldw	r2,20(sp)
4000a274:	198d883a 	add	r6,r3,r6
4000a278:	334d883a 	add	r6,r6,r13
4000a27c:	30800005 	stb	r2,0(r6)
	  }
  }
}
4000a280:	dfc06d17 	ldw	ra,436(sp)
4000a284:	df006c17 	ldw	fp,432(sp)
4000a288:	ddc06b17 	ldw	r23,428(sp)
4000a28c:	dd806a17 	ldw	r22,424(sp)
4000a290:	dd406917 	ldw	r21,420(sp)
4000a294:	dd006817 	ldw	r20,416(sp)
4000a298:	dcc06717 	ldw	r19,412(sp)
4000a29c:	dc806617 	ldw	r18,408(sp)
4000a2a0:	dc406517 	ldw	r17,404(sp)
4000a2a4:	dc006417 	ldw	r16,400(sp)
4000a2a8:	dec06e04 	addi	sp,sp,440
4000a2ac:	f800283a 	ret
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000a2b0:	1885883a 	add	r2,r3,r2
4000a2b4:	1105883a 	add	r2,r2,r4
4000a2b8:	10bfffc3 	ldbu	r2,-1(r2)
4000a2bc:	88800015 	stw	r2,0(r17)
4000a2c0:	003ec306 	br	40009dd0 <__alt_data_end+0xc0009dd0>
4000a2c4:	1893883a 	add	r9,r3,r2
4000a2c8:	4909883a 	add	r4,r9,r4
4000a2cc:	213fffc3 	ldbu	r4,-1(r4)
4000a2d0:	f9000015 	stw	r4,0(ra)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000a2d4:	403eb80e 	bge	r8,zero,40009db8 <__alt_data_end+0xc0009db8>
4000a2d8:	1885883a 	add	r2,r3,r2
4000a2dc:	10800003 	ldbu	r2,0(r2)
4000a2e0:	88800015 	stw	r2,0(r17)
4000a2e4:	003eba06 	br	40009dd0 <__alt_data_end+0xc0009dd0>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000a2e8:	1893883a 	add	r9,r3,r2
4000a2ec:	4909883a 	add	r4,r9,r4
4000a2f0:	213fffc3 	ldbu	r4,-1(r4)
4000a2f4:	79000015 	stw	r4,0(r15)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000a2f8:	903ea80e 	bge	r18,zero,40009d9c <__alt_data_end+0xc0009d9c>
4000a2fc:	1889883a 	add	r4,r3,r2
4000a300:	21000003 	ldbu	r4,0(r4)
4000a304:	f9000015 	stw	r4,0(ra)
4000a308:	003eaa06 	br	40009db4 <__alt_data_end+0xc0009db4>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000a30c:	1893883a 	add	r9,r3,r2
4000a310:	4909883a 	add	r4,r9,r4
4000a314:	213fffc3 	ldbu	r4,-1(r4)
4000a318:	71000015 	stw	r4,0(r14)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000a31c:	983e980e 	bge	r19,zero,40009d80 <__alt_data_end+0xc0009d80>
4000a320:	1889883a 	add	r4,r3,r2
4000a324:	21000003 	ldbu	r4,0(r4)
4000a328:	79000015 	stw	r4,0(r15)
4000a32c:	003e9a06 	br	40009d98 <__alt_data_end+0xc0009d98>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000a330:	1893883a 	add	r9,r3,r2
4000a334:	4909883a 	add	r4,r9,r4
4000a338:	213fffc3 	ldbu	r4,-1(r4)
4000a33c:	69000015 	stw	r4,0(r13)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000a340:	a03e880e 	bge	r20,zero,40009d64 <__alt_data_end+0xc0009d64>
4000a344:	1889883a 	add	r4,r3,r2
4000a348:	21000003 	ldbu	r4,0(r4)
4000a34c:	71000015 	stw	r4,0(r14)
4000a350:	003e8a06 	br	40009d7c <__alt_data_end+0xc0009d7c>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000a354:	1893883a 	add	r9,r3,r2
4000a358:	4909883a 	add	r4,r9,r4
4000a35c:	213fffc3 	ldbu	r4,-1(r4)
4000a360:	61000015 	stw	r4,0(r12)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000a364:	a83e780e 	bge	r21,zero,40009d48 <__alt_data_end+0xc0009d48>
4000a368:	1889883a 	add	r4,r3,r2
4000a36c:	21000003 	ldbu	r4,0(r4)
4000a370:	69000015 	stw	r4,0(r13)
4000a374:	003e7a06 	br	40009d60 <__alt_data_end+0xc0009d60>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000a378:	1893883a 	add	r9,r3,r2
4000a37c:	4909883a 	add	r4,r9,r4
4000a380:	213fffc3 	ldbu	r4,-1(r4)
4000a384:	59000015 	stw	r4,0(r11)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000a388:	b03e680e 	bge	r22,zero,40009d2c <__alt_data_end+0xc0009d2c>
4000a38c:	1889883a 	add	r4,r3,r2
4000a390:	21000003 	ldbu	r4,0(r4)
4000a394:	61000015 	stw	r4,0(r12)
4000a398:	003e6a06 	br	40009d44 <__alt_data_end+0xc0009d44>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000a39c:	1893883a 	add	r9,r3,r2
4000a3a0:	4909883a 	add	r4,r9,r4
4000a3a4:	213fffc3 	ldbu	r4,-1(r4)
4000a3a8:	51000015 	stw	r4,0(r10)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000a3ac:	383e580e 	bge	r7,zero,40009d10 <__alt_data_end+0xc0009d10>
4000a3b0:	1889883a 	add	r4,r3,r2
4000a3b4:	21000003 	ldbu	r4,0(r4)
4000a3b8:	59000015 	stw	r4,0(r11)
4000a3bc:	003e5a06 	br	40009d28 <__alt_data_end+0xc0009d28>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000a3c0:	1909883a 	add	r4,r3,r4
4000a3c4:	2089883a 	add	r4,r4,r2
4000a3c8:	213fffc3 	ldbu	r4,-1(r4)
4000a3cc:	81000015 	stw	r4,0(r16)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000a3d0:	b83e480e 	bge	r23,zero,40009cf4 <__alt_data_end+0xc0009cf4>
4000a3d4:	1889883a 	add	r4,r3,r2
4000a3d8:	21000003 	ldbu	r4,0(r4)
4000a3dc:	51000015 	stw	r4,0(r10)
4000a3e0:	003e4a06 	br	40009d0c <__alt_data_end+0xc0009d0c>
4000a3e4:	d9005417 	ldw	r4,336(sp)
4000a3e8:	1105383a 	mul	r2,r2,r4
4000a3ec:	1889883a 	add	r4,r3,r2
4000a3f0:	21000003 	ldbu	r4,0(r4)
4000a3f4:	81000015 	stw	r4,0(r16)
4000a3f8:	003e3d06 	br	40009cf0 <__alt_data_end+0xc0009cf0>
4000a3fc:	0005883a 	mov	r2,zero
4000a400:	003e2f06 	br	40009cc0 <__alt_data_end+0xc0009cc0>
  C_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<3; ++y) {
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
4000a404:	3813883a 	mov	r9,r7
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000a408:	183ea70e 	bge	r3,zero,40009ea8 <__alt_data_end+0xc0009ea8>
4000a40c:	4b13383a 	mul	r9,r9,r12
4000a410:	6a53883a 	add	r9,r13,r9
4000a414:	4d800003 	ldbu	r22,0(r9)
4000a418:	dd800115 	stw	r22,4(sp)
4000a41c:	303eab0e 	bge	r6,zero,40009ecc <__alt_data_end+0xc0009ecc>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
                     else b.p[y][x]=C_pixel(ref,iCbCr,sx,sy);
4000a420:	4a400003 	ldbu	r9,0(r9)
4000a424:	da400215 	stw	r9,8(sp)
4000a428:	10800044 	addi	r2,r2,1
4000a42c:	103eae0e 	bge	r2,zero,40009ee8 <__alt_data_end+0xc0009ee8>
4000a430:	0005883a 	mov	r2,zero
  C_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<3; ++y) {
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
4000a434:	12fead0e 	bge	r2,r11,40009eec <__alt_data_end+0xc0009eec>
4000a438:	1013883a 	mov	r9,r2
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000a43c:	183ead0e 	bge	r3,zero,40009ef4 <__alt_data_end+0xc0009ef4>
4000a440:	4b13383a 	mul	r9,r9,r12
4000a444:	6a5b883a 	add	r13,r13,r9
4000a448:	6a400003 	ldbu	r9,0(r13)
4000a44c:	da400415 	stw	r9,16(sp)
4000a450:	303eb00e 	bge	r6,zero,40009f14 <__alt_data_end+0xc0009f14>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
                     else b.p[y][x]=C_pixel(ref,iCbCr,sx,sy);
4000a454:	6a400003 	ldbu	r9,0(r13)
4000a458:	da400515 	stw	r9,20(sp)
4000a45c:	003eb206 	br	40009f28 <__alt_data_end+0xc0009f28>
4000a460:	68ed883a 	add	r22,r13,r3
4000a464:	b26d883a 	add	r22,r22,r9
4000a468:	b5800003 	ldbu	r22,0(r22)
4000a46c:	6a5b883a 	add	r13,r13,r9
4000a470:	dd800415 	stw	r22,16(sp)
4000a474:	003ea606 	br	40009f10 <__alt_data_end+0xc0009f10>
4000a478:	4993883a 	add	r9,r9,r6
4000a47c:	4a400003 	ldbu	r9,0(r9)
4000a480:	da400215 	stw	r9,8(sp)
4000a484:	003fe806 	br	4000a428 <__alt_data_end+0xc000a428>
4000a488:	68ed883a 	add	r22,r13,r3
4000a48c:	b26d883a 	add	r22,r22,r9
4000a490:	b5800003 	ldbu	r22,0(r22)
4000a494:	6a53883a 	add	r9,r13,r9
4000a498:	dd800115 	stw	r22,4(sp)
4000a49c:	003e8a06 	br	40009ec8 <__alt_data_end+0xc0009ec8>
4000a4a0:	4885883a 	add	r2,r9,r2
4000a4a4:	1185883a 	add	r2,r2,r6
4000a4a8:	10800003 	ldbu	r2,0(r2)
4000a4ac:	d8800515 	stw	r2,20(sp)
4000a4b0:	003ec906 	br	40009fd8 <__alt_data_end+0xc0009fd8>
4000a4b4:	48c7883a 	add	r3,r9,r3
4000a4b8:	1887883a 	add	r3,r3,r2
4000a4bc:	18c00003 	ldbu	r3,0(r3)
4000a4c0:	d8c00415 	stw	r3,16(sp)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000a4c4:	303ebe0e 	bge	r6,zero,40009fc0 <__alt_data_end+0xc0009fc0>
4000a4c8:	4885883a 	add	r2,r9,r2
4000a4cc:	10800003 	ldbu	r2,0(r2)
4000a4d0:	d8800515 	stw	r2,20(sp)
4000a4d4:	003ec006 	br	40009fd8 <__alt_data_end+0xc0009fd8>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
                     else b.p[y][x]=C_pixel(ref,iCbCr,sx,sy);
4000a4d8:	699b883a 	add	r13,r13,r6
4000a4dc:	6a400003 	ldbu	r9,0(r13)
4000a4e0:	da400515 	stw	r9,20(sp)
4000a4e4:	003e9006 	br	40009f28 <__alt_data_end+0xc0009f28>
4000a4e8:	49cf883a 	add	r7,r9,r7
4000a4ec:	398f883a 	add	r7,r7,r6
4000a4f0:	39c00003 	ldbu	r7,0(r7)
4000a4f4:	d9c00215 	stw	r7,8(sp)
4000a4f8:	003ea606 	br	40009f94 <__alt_data_end+0xc0009f94>
4000a4fc:	48db883a 	add	r13,r9,r3
4000a500:	69db883a 	add	r13,r13,r7
4000a504:	6b400003 	ldbu	r13,0(r13)
4000a508:	db400115 	stw	r13,4(sp)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000a50c:	303e9b0e 	bge	r6,zero,40009f7c <__alt_data_end+0xc0009f7c>
4000a510:	49cf883a 	add	r7,r9,r7
4000a514:	39c00003 	ldbu	r7,0(r7)
4000a518:	d9c00215 	stw	r7,8(sp)
4000a51c:	003e9d06 	br	40009f94 <__alt_data_end+0xc0009f94>
4000a520:	3b0f383a 	mul	r7,r7,r12
4000a524:	49db883a 	add	r13,r9,r7
4000a528:	6b400003 	ldbu	r13,0(r13)
4000a52c:	db400115 	stw	r13,4(sp)
4000a530:	003e9106 	br	40009f78 <__alt_data_end+0xc0009f78>
4000a534:	1305383a 	mul	r2,r2,r12
4000a538:	4887883a 	add	r3,r9,r2
4000a53c:	18c00003 	ldbu	r3,0(r3)
4000a540:	d8c00415 	stw	r3,16(sp)
4000a544:	003e9d06 	br	40009fbc <__alt_data_end+0xc0009fbc>

	  if((frac != 0)){
		  int id0;
		  //L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);

		  id0 = send_luma_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
4000a548:	da405917 	ldw	r9,356(sp)
4000a54c:	3021883a 	mov	r16,r6
4000a550:	282b883a 	mov	r21,r5
4000a554:	480dd0ba 	srai	r6,r9,2
4000a558:	400bd0ba 	srai	r5,r8,2
4000a55c:	3823883a 	mov	r17,r7
4000a560:	344d883a 	add	r6,r6,r17
4000a564:	2c0b883a 	add	r5,r5,r16
4000a568:	2025883a 	mov	r18,r4
4000a56c:	100f883a 	mov	r7,r2
4000a570:	a809883a 	mov	r4,r21
4000a574:	31bfff84 	addi	r6,r6,-2
4000a578:	297fff84 	addi	r5,r5,-2
4000a57c:	0008f540 	call	40008f54 <send_luma_motion_comp_fast>
		  //C_MC_temp_block bcr = GetCMCTempBlock(ref,0,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));
		  //C_MC_temp_block bcb = GetCMCTempBlock(ref,1,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));

		  int xFrac=(mvx&7), yFrac=(mvy&7);
		  uint8_t zeros[9] = {0};
		  int id1 = send_chroma_motion_comp_packet_fast(ref, (org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3), xFrac, yFrac);
4000a580:	dac05917 	ldw	r11,356(sp)
4000a584:	db005817 	ldw	r12,352(sp)
4000a588:	8027d07a 	srai	r19,r16,1
4000a58c:	580dd0fa 	srai	r6,r11,3
4000a590:	600bd0fa 	srai	r5,r12,3
4000a594:	8829d07a 	srai	r20,r17,1

	  if((frac != 0)){
		  int id0;
		  //L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);

		  id0 = send_luma_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
4000a598:	102d883a 	mov	r22,r2
		  //C_MC_temp_block bcr = GetCMCTempBlock(ref,0,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));
		  //C_MC_temp_block bcb = GetCMCTempBlock(ref,1,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));

		  int xFrac=(mvx&7), yFrac=(mvy&7);
		  uint8_t zeros[9] = {0};
		  int id1 = send_chroma_motion_comp_packet_fast(ref, (org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3), xFrac, yFrac);
4000a59c:	588001cc 	andi	r2,r11,7
4000a5a0:	61c001cc 	andi	r7,r12,7
4000a5a4:	350d883a 	add	r6,r6,r20
4000a5a8:	2ccb883a 	add	r5,r5,r19
4000a5ac:	a809883a 	mov	r4,r21
4000a5b0:	d8800015 	stw	r2,0(sp)
4000a5b4:	00096700 	call	40009670 <send_chroma_motion_comp_packet_fast>


		  rx_luma_motion_comp_packet(id0, this, org_x, org_y);
4000a5b8:	880f883a 	mov	r7,r17
4000a5bc:	800d883a 	mov	r6,r16
4000a5c0:	900b883a 	mov	r5,r18
4000a5c4:	b009883a 	mov	r4,r22
		  //C_MC_temp_block bcr = GetCMCTempBlock(ref,0,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));
		  //C_MC_temp_block bcb = GetCMCTempBlock(ref,1,(org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3));

		  int xFrac=(mvx&7), yFrac=(mvy&7);
		  uint8_t zeros[9] = {0};
		  int id1 = send_chroma_motion_comp_packet_fast(ref, (org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3), xFrac, yFrac);
4000a5c8:	102b883a 	mov	r21,r2


		  rx_luma_motion_comp_packet(id0, this, org_x, org_y);
4000a5cc:	00094380 	call	40009438 <rx_luma_motion_comp_packet>
		  rx_chroma_motion_comp_packet(id1, this, (org_x>>1), (org_y>>1));
4000a5d0:	a00f883a 	mov	r7,r20
4000a5d4:	980d883a 	mov	r6,r19
4000a5d8:	900b883a 	mov	r5,r18
4000a5dc:	a809883a 	mov	r4,r21
		  C_pixel(this,1,1+(org_x>>1),0+(org_y>>1)) = bcr.p[1][0];
		  C_pixel(this,1,0+(org_x>>1),1+(org_y>>1)) = bcr.p[0][1];
		  C_pixel(this,1,1+(org_x>>1),1+(org_y>>1)) = bcr.p[1][1];
	  }
  }
}
4000a5e0:	dfc06d17 	ldw	ra,436(sp)
4000a5e4:	df006c17 	ldw	fp,432(sp)
4000a5e8:	ddc06b17 	ldw	r23,428(sp)
4000a5ec:	dd806a17 	ldw	r22,424(sp)
4000a5f0:	dd406917 	ldw	r21,420(sp)
4000a5f4:	dd006817 	ldw	r20,416(sp)
4000a5f8:	dcc06717 	ldw	r19,412(sp)
4000a5fc:	dc806617 	ldw	r18,408(sp)
4000a600:	dc406517 	ldw	r17,404(sp)
4000a604:	dc006417 	ldw	r16,400(sp)
4000a608:	dec06e04 	addi	sp,sp,440
		  uint8_t zeros[9] = {0};
		  int id1 = send_chroma_motion_comp_packet_fast(ref, (org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3), xFrac, yFrac);


		  rx_luma_motion_comp_packet(id0, this, org_x, org_y);
		  rx_chroma_motion_comp_packet(id1, this, (org_x>>1), (org_y>>1));
4000a60c:	0009a401 	jmpi	40009a40 <rx_chroma_motion_comp_packet>
4000a610:	000f883a 	mov	r7,zero
  C_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<3; ++y) {
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
4000a614:	3aff7b16 	blt	r7,r11,4000a404 <__alt_data_end+0xc000a404>
4000a618:	003e2106 	br	40009ea0 <__alt_data_end+0xc0009ea0>

4000a61c <send_luma_1_motion_comp_fast>:
  }
}

int send_luma_1_motion_comp_fast(frame *ref, int org_x, int org_y, int frac){
	static int id = 127;
	id = (id+1)%(LUMA_1_MOCOMP_MAX-LUMA_1_MOCOMP_MIN) + LUMA_1_MOCOMP_MIN;
4000a61c:	d0a00117 	ldw	r2,-32764(gp)
		  C_pixel(this,1,1+(org_x>>1),1+(org_y>>1)) = bcr.p[1][1];
	  }
  }
}

int send_luma_1_motion_comp_fast(frame *ref, int org_x, int org_y, int frac){
4000a620:	defff004 	addi	sp,sp,-64
4000a624:	dcc00915 	stw	r19,36(sp)
	static int id = 127;
	id = (id+1)%(LUMA_1_MOCOMP_MAX-LUMA_1_MOCOMP_MIN) + LUMA_1_MOCOMP_MIN;
4000a628:	10c00044 	addi	r3,r2,1
4000a62c:	00a00034 	movhi	r2,32768
4000a630:	108007c4 	addi	r2,r2,31
		  C_pixel(this,1,1+(org_x>>1),1+(org_y>>1)) = bcr.p[1][1];
	  }
  }
}

int send_luma_1_motion_comp_fast(frame *ref, int org_x, int org_y, int frac){
4000a634:	dc800815 	stw	r18,32(sp)
4000a638:	dc000615 	stw	r16,24(sp)
4000a63c:	dfc00f15 	stw	ra,60(sp)
4000a640:	df000e15 	stw	fp,56(sp)
4000a644:	ddc00d15 	stw	r23,52(sp)
4000a648:	dd800c15 	stw	r22,48(sp)
4000a64c:	dd400b15 	stw	r21,44(sp)
4000a650:	dd000a15 	stw	r20,40(sp)
4000a654:	dc400715 	stw	r17,28(sp)
	static int id = 127;
	id = (id+1)%(LUMA_1_MOCOMP_MAX-LUMA_1_MOCOMP_MIN) + LUMA_1_MOCOMP_MIN;
4000a658:	1884703a 	and	r2,r3,r2
		  C_pixel(this,1,1+(org_x>>1),1+(org_y>>1)) = bcr.p[1][1];
	  }
  }
}

int send_luma_1_motion_comp_fast(frame *ref, int org_x, int org_y, int frac){
4000a65c:	d9800415 	stw	r6,16(sp)
4000a660:	2025883a 	mov	r18,r4
4000a664:	2827883a 	mov	r19,r5
4000a668:	3821883a 	mov	r16,r7
	static int id = 127;
	id = (id+1)%(LUMA_1_MOCOMP_MAX-LUMA_1_MOCOMP_MIN) + LUMA_1_MOCOMP_MIN;
4000a66c:	10011916 	blt	r2,zero,4000aad4 <send_luma_1_motion_comp_fast+0x4b8>
4000a670:	10802fc4 	addi	r2,r2,191

	send_flit(LINTER_1_ADDR, id, id, 0);
4000a674:	100d883a 	mov	r6,r2
4000a678:	100b883a 	mov	r5,r2
4000a67c:	000f883a 	mov	r7,zero
4000a680:	01000184 	movi	r4,6
  }
}

int send_luma_1_motion_comp_fast(frame *ref, int org_x, int org_y, int frac){
	static int id = 127;
	id = (id+1)%(LUMA_1_MOCOMP_MAX-LUMA_1_MOCOMP_MIN) + LUMA_1_MOCOMP_MIN;
4000a684:	d0a00115 	stw	r2,-32764(gp)

	send_flit(LINTER_1_ADDR, id, id, 0);
4000a688:	000c2000 	call	4000c200 <send_flit>
	uint32_t sizes = (0x0F & (uint64_t)frac) | (4 << 8) | (4 << 16);

	send_flit(LINTER_1_ADDR, 0, sizes, 0);
4000a68c:	01800134 	movhi	r6,4
4000a690:	840003cc 	andi	r16,r16,15
4000a694:	31810004 	addi	r6,r6,1024
4000a698:	000f883a 	mov	r7,zero
4000a69c:	818cb03a 	or	r6,r16,r6
4000a6a0:	000b883a 	mov	r5,zero
4000a6a4:	01000184 	movi	r4,6
4000a6a8:	000c2000 	call	4000c200 <send_flit>
4000a6ac:	98800204 	addi	r2,r19,8
4000a6b0:	d8800515 	stw	r2,20(sp)
4000a6b4:	00bffe84 	movi	r2,-6
4000a6b8:	98c001c4 	addi	r3,r19,7
4000a6bc:	98810316 	blt	r19,r2,4000aacc <send_luma_1_motion_comp_fast+0x4b0>
4000a6c0:	d8c00015 	stw	r3,0(sp)
4000a6c4:	00bffec4 	movi	r2,-5
4000a6c8:	98c00184 	addi	r3,r19,6
4000a6cc:	9880fd16 	blt	r19,r2,4000aac4 <send_luma_1_motion_comp_fast+0x4a8>
4000a6d0:	d8c00115 	stw	r3,4(sp)
4000a6d4:	00bfff04 	movi	r2,-4
4000a6d8:	9d000144 	addi	r20,r19,5
4000a6dc:	9880f716 	blt	r19,r2,4000aabc <send_luma_1_motion_comp_fast+0x4a0>
4000a6e0:	dd000215 	stw	r20,8(sp)
4000a6e4:	00bfff44 	movi	r2,-3
4000a6e8:	9d400104 	addi	r21,r19,4
4000a6ec:	9880010e 	bge	r19,r2,4000a6f4 <send_luma_1_motion_comp_fast+0xd8>
4000a6f0:	002b883a 	mov	r21,zero
4000a6f4:	00bfff84 	movi	r2,-2
4000a6f8:	9d8000c4 	addi	r22,r19,3
4000a6fc:	9880010e 	bge	r19,r2,4000a704 <send_luma_1_motion_comp_fast+0xe8>
4000a700:	002d883a 	mov	r22,zero
4000a704:	00bfffc4 	movi	r2,-1
4000a708:	9dc00084 	addi	r23,r19,2
4000a70c:	9880010e 	bge	r19,r2,4000a714 <send_luma_1_motion_comp_fast+0xf8>
4000a710:	002f883a 	mov	r23,zero
4000a714:	9c400044 	addi	r17,r19,1
4000a718:	9800f316 	blt	r19,zero,4000aae8 <send_luma_1_motion_comp_fast+0x4cc>
4000a71c:	dc400315 	stw	r17,12(sp)
			WR_PIO(TX_1_BASE, L_pixel(ref,x6,sy)  );
			WR_PIO(TX_2_BASE, L_pixel(ref,x5,sy)  );
			WR_PIO(TX_3_BASE, L_pixel(ref,x4,sy)  );
			WR_PIO(TX_4_BASE, L_pixel(ref,x3,sy)  );
			WR_PIO(TX_5_BASE, L_pixel(ref,x2,sy)  );
			WR_PIO(TX_6_BASE, L_pixel(ref,x1,sy)  );
4000a720:	9023883a 	mov	r17,r18

	send_flit(LINTER_1_ADDR, 0, sizes, 0);


	int x,y,sx,sy;
	for(y=0; y<9; ++y) {
4000a724:	0039883a 	mov	fp,zero
			x1     = (x1 < ref->Lwidth)?x1: ref->Lwidth-1;

			int x0 = ((sx)>0)?sx:0;
			x0     = (x0 < ref->Lwidth)?x0: ref->Lwidth-1;

			WR_PIO(TX_0_BASE, L_pixel(ref,x7,sy)  );
4000a728:	04044404 	movi	r16,4368
			WR_PIO(TX_1_BASE, L_pixel(ref,x6,sy)  );
			WR_PIO(TX_2_BASE, L_pixel(ref,x5,sy)  );
			WR_PIO(TX_3_BASE, L_pixel(ref,x4,sy)  );
			WR_PIO(TX_4_BASE, L_pixel(ref,x3,sy)  );
			WR_PIO(TX_5_BASE, L_pixel(ref,x2,sy)  );
			WR_PIO(TX_6_BASE, L_pixel(ref,x1,sy)  );
4000a72c:	9825883a 	mov	r18,r19
4000a730:	d8800417 	ldw	r2,16(sp)
4000a734:	1729883a 	add	r20,r2,fp
4000a738:	a000de16 	blt	r20,zero,4000aab4 <send_luma_1_motion_comp_fast+0x498>
	for(y=0; y<9; ++y) {
		sy=org_y+y;
		if(sy<0){
			sy=0;
		}
		if(sy>=ref->Lheight){
4000a73c:	89000117 	ldw	r4,4(r17)
4000a740:	a1000116 	blt	r20,r4,4000a748 <send_luma_1_motion_comp_fast+0x12c>
			sy=ref->Lheight-1;
4000a744:	253fffc4 	addi	r20,r4,-1
		}
		sx = org_x;
		if((sx >= 0) && ((sx+8) < ref->Lwidth)){
4000a748:	90008716 	blt	r18,zero,4000a968 <send_luma_1_motion_comp_fast+0x34c>
4000a74c:	89000017 	ldw	r4,0(r17)
4000a750:	d8800517 	ldw	r2,20(sp)
4000a754:	11008a16 	blt	r2,r4,4000a980 <send_luma_1_motion_comp_fast+0x364>
			no_data_send(FORMAT_0 | IN_PLACE_LINTER_1_ADDR | CPU_TX_REQ | (y==8?TAIL_FLIT_BIT:0));
		}else{
			//printf("    ~\n");

			int x8 = ((sx+8)>0)?sx+8:0;
			x8     = (x8 < ref->Lwidth)?x8: ref->Lwidth-1;
4000a758:	24ffffc4 	addi	r19,r4,-1

			int x7 = ((sx+7)>0)?sx+7:0;
			x7     = (x7 < ref->Lwidth)?x7: ref->Lwidth-1;
4000a75c:	d8800017 	ldw	r2,0(sp)
4000a760:	11007f16 	blt	r2,r4,4000a960 <send_luma_1_motion_comp_fast+0x344>
4000a764:	27ffffc4 	addi	ra,r4,-1

			int x6 = ((sx+6)>0)?sx+6:0;
			x6     = (x6 < ref->Lwidth)?x6: ref->Lwidth-1;
4000a768:	d8800117 	ldw	r2,4(sp)
4000a76c:	11007a16 	blt	r2,r4,4000a958 <send_luma_1_motion_comp_fast+0x33c>
4000a770:	233fffc4 	addi	r12,r4,-1

			int x5 = ((sx+5)>0)?sx+5:0;
			x5     = (x5 < ref->Lwidth)?x5: ref->Lwidth-1;
4000a774:	d8800217 	ldw	r2,8(sp)
4000a778:	11007516 	blt	r2,r4,4000a950 <send_luma_1_motion_comp_fast+0x334>
4000a77c:	23bfffc4 	addi	r14,r4,-1

			int x4 = ((sx+4)>0)?sx+4:0;
			x4     = (x4 < ref->Lwidth)?x4: ref->Lwidth-1;
4000a780:	a9007116 	blt	r21,r4,4000a948 <send_luma_1_motion_comp_fast+0x32c>
4000a784:	22bfffc4 	addi	r10,r4,-1

			int x3 = ((sx+3)>0)?sx+3:0;
			x3     = (x3 < ref->Lwidth)?x3: ref->Lwidth-1;
4000a788:	b1006816 	blt	r22,r4,4000a92c <send_luma_1_motion_comp_fast+0x310>
4000a78c:	237fffc4 	addi	r13,r4,-1

			int x2 = ((sx+2)>0)?sx+2:0;
			x2     = (x2 < ref->Lwidth)?x2: ref->Lwidth-1;
4000a790:	b9006816 	blt	r23,r4,4000a934 <send_luma_1_motion_comp_fast+0x318>

			int x1 = ((sx+1)>0)?sx+1:0;
			x1     = (x1 < ref->Lwidth)?x1: ref->Lwidth-1;
4000a794:	d8800317 	ldw	r2,12(sp)

			int x3 = ((sx+3)>0)?sx+3:0;
			x3     = (x3 < ref->Lwidth)?x3: ref->Lwidth-1;

			int x2 = ((sx+2)>0)?sx+2:0;
			x2     = (x2 < ref->Lwidth)?x2: ref->Lwidth-1;
4000a798:	21ffffc4 	addi	r7,r4,-1

			int x1 = ((sx+1)>0)?sx+1:0;
			x1     = (x1 < ref->Lwidth)?x1: ref->Lwidth-1;
4000a79c:	11006816 	blt	r2,r4,4000a940 <send_luma_1_motion_comp_fast+0x324>
4000a7a0:	21bfffc4 	addi	r6,r4,-1

			int x0 = ((sx)>0)?sx:0;
4000a7a4:	9017883a 	mov	r11,r18
4000a7a8:	90005e16 	blt	r18,zero,4000a924 <send_luma_1_motion_comp_fast+0x308>
			x0     = (x0 < ref->Lwidth)?x0: ref->Lwidth-1;
4000a7ac:	59000116 	blt	r11,r4,4000a7b4 <send_luma_1_motion_comp_fast+0x198>
4000a7b0:	22ffffc4 	addi	r11,r4,-1

			WR_PIO(TX_0_BASE, L_pixel(ref,x7,sy)  );
4000a7b4:	8bc00217 	ldw	r15,8(r17)
4000a7b8:	89000617 	ldw	r4,24(r17)
4000a7bc:	a3df383a 	mul	r15,r20,r15
4000a7c0:	27c9883a 	add	r4,r4,ra
4000a7c4:	23c9883a 	add	r4,r4,r15
4000a7c8:	21000003 	ldbu	r4,0(r4)
4000a7cc:	81000035 	stwio	r4,0(r16)
			WR_PIO(TX_1_BASE, L_pixel(ref,x6,sy)  );
4000a7d0:	89000217 	ldw	r4,8(r17)
4000a7d4:	8bc00617 	ldw	r15,24(r17)
4000a7d8:	00844004 	movi	r2,4352
4000a7dc:	a109383a 	mul	r4,r20,r4
4000a7e0:	7b19883a 	add	r12,r15,r12
4000a7e4:	6119883a 	add	r12,r12,r4
4000a7e8:	61000003 	ldbu	r4,0(r12)
4000a7ec:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_2_BASE, L_pixel(ref,x5,sy)  );
4000a7f0:	8b000217 	ldw	r12,8(r17)
4000a7f4:	89000617 	ldw	r4,24(r17)
4000a7f8:	00842c04 	movi	r2,4272
4000a7fc:	a319383a 	mul	r12,r20,r12
4000a800:	2389883a 	add	r4,r4,r14
4000a804:	2309883a 	add	r4,r4,r12
4000a808:	21000003 	ldbu	r4,0(r4)
4000a80c:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_3_BASE, L_pixel(ref,x4,sy)  );
4000a810:	8b000217 	ldw	r12,8(r17)
4000a814:	89000617 	ldw	r4,24(r17)
4000a818:	00842804 	movi	r2,4256
4000a81c:	a319383a 	mul	r12,r20,r12
4000a820:	2295883a 	add	r10,r4,r10
4000a824:	5315883a 	add	r10,r10,r12
4000a828:	51000003 	ldbu	r4,0(r10)
4000a82c:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_4_BASE, L_pixel(ref,x3,sy)  );
4000a830:	8a800217 	ldw	r10,8(r17)
4000a834:	89000617 	ldw	r4,24(r17)
4000a838:	00842404 	movi	r2,4240
4000a83c:	a295383a 	mul	r10,r20,r10
4000a840:	2349883a 	add	r4,r4,r13
4000a844:	2289883a 	add	r4,r4,r10
4000a848:	21000003 	ldbu	r4,0(r4)
4000a84c:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_5_BASE, L_pixel(ref,x2,sy)  );
4000a850:	8a800217 	ldw	r10,8(r17)
4000a854:	89000617 	ldw	r4,24(r17)
4000a858:	00842004 	movi	r2,4224
4000a85c:	a295383a 	mul	r10,r20,r10
4000a860:	21cf883a 	add	r7,r4,r7
4000a864:	3a8f883a 	add	r7,r7,r10
4000a868:	39000003 	ldbu	r4,0(r7)
4000a86c:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_6_BASE, L_pixel(ref,x1,sy)  );
4000a870:	89c00217 	ldw	r7,8(r17)
4000a874:	89000617 	ldw	r4,24(r17)
4000a878:	00841c04 	movi	r2,4208
4000a87c:	a1cf383a 	mul	r7,r20,r7
4000a880:	218d883a 	add	r6,r4,r6
4000a884:	31cd883a 	add	r6,r6,r7
4000a888:	31000003 	ldbu	r4,0(r6)
4000a88c:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_7_BASE, L_pixel(ref,x0,sy)  );
4000a890:	89800217 	ldw	r6,8(r17)
4000a894:	89000617 	ldw	r4,24(r17)
4000a898:	a18d383a 	mul	r6,r20,r6
4000a89c:	22c9883a 	add	r4,r4,r11
4000a8a0:	2189883a 	add	r4,r4,r6
4000a8a4:	21800003 	ldbu	r6,0(r4)
4000a8a8:	01041804 	movi	r4,4192
4000a8ac:	21800035 	stwio	r6,0(r4)
			no_data_send(FORMAT_0 | IN_PLACE_LINTER_1_ADDR | CPU_TX_REQ);
4000a8b0:	011001b4 	movhi	r4,16390
4000a8b4:	000c26c0 	call	4000c26c <no_data_send>
			WR_PIO(TX_0_BASE, L_pixel(ref,x8,sy)  );
4000a8b8:	89000217 	ldw	r4,8(r17)
4000a8bc:	89800617 	ldw	r6,24(r17)
4000a8c0:	a107383a 	mul	r3,r20,r4
4000a8c4:	34d3883a 	add	r9,r6,r19
4000a8c8:	48c7883a 	add	r3,r9,r3
4000a8cc:	18c00003 	ldbu	r3,0(r3)
4000a8d0:	80c00035 	stwio	r3,0(r16)
			no_data_send(FORMAT_0 | IN_PLACE_LINTER_1_ADDR | CPU_TX_REQ | (y==8?TAIL_FLIT_BIT:0));
4000a8d4:	00c00204 	movi	r3,8
4000a8d8:	e0c07426 	beq	fp,r3,4000aaac <send_luma_1_motion_comp_fast+0x490>
4000a8dc:	011001b4 	movhi	r4,16390
4000a8e0:	000c26c0 	call	4000c26c <no_data_send>

	send_flit(LINTER_1_ADDR, 0, sizes, 0);


	int x,y,sx,sy;
	for(y=0; y<9; ++y) {
4000a8e4:	e7000044 	addi	fp,fp,1
4000a8e8:	00c00244 	movi	r3,9
4000a8ec:	e0ff901e 	bne	fp,r3,4000a730 <__alt_data_end+0xc000a730>
		}

	}
	return id;

}
4000a8f0:	d0a00117 	ldw	r2,-32764(gp)
4000a8f4:	dfc00f17 	ldw	ra,60(sp)
4000a8f8:	df000e17 	ldw	fp,56(sp)
4000a8fc:	ddc00d17 	ldw	r23,52(sp)
4000a900:	dd800c17 	ldw	r22,48(sp)
4000a904:	dd400b17 	ldw	r21,44(sp)
4000a908:	dd000a17 	ldw	r20,40(sp)
4000a90c:	dcc00917 	ldw	r19,36(sp)
4000a910:	dc800817 	ldw	r18,32(sp)
4000a914:	dc400717 	ldw	r17,28(sp)
4000a918:	dc000617 	ldw	r16,24(sp)
4000a91c:	dec01004 	addi	sp,sp,64
4000a920:	f800283a 	ret
			x2     = (x2 < ref->Lwidth)?x2: ref->Lwidth-1;

			int x1 = ((sx+1)>0)?sx+1:0;
			x1     = (x1 < ref->Lwidth)?x1: ref->Lwidth-1;

			int x0 = ((sx)>0)?sx:0;
4000a924:	0017883a 	mov	r11,zero
4000a928:	003fa006 	br	4000a7ac <__alt_data_end+0xc000a7ac>
4000a92c:	b01b883a 	mov	r13,r22

			int x3 = ((sx+3)>0)?sx+3:0;
			x3     = (x3 < ref->Lwidth)?x3: ref->Lwidth-1;

			int x2 = ((sx+2)>0)?sx+2:0;
			x2     = (x2 < ref->Lwidth)?x2: ref->Lwidth-1;
4000a930:	b93f980e 	bge	r23,r4,4000a794 <__alt_data_end+0xc000a794>

			int x1 = ((sx+1)>0)?sx+1:0;
			x1     = (x1 < ref->Lwidth)?x1: ref->Lwidth-1;
4000a934:	d8800317 	ldw	r2,12(sp)
4000a938:	b80f883a 	mov	r7,r23
4000a93c:	113f980e 	bge	r2,r4,4000a7a0 <__alt_data_end+0xc000a7a0>
4000a940:	100d883a 	mov	r6,r2
4000a944:	003f9706 	br	4000a7a4 <__alt_data_end+0xc000a7a4>
4000a948:	a815883a 	mov	r10,r21
4000a94c:	003f8e06 	br	4000a788 <__alt_data_end+0xc000a788>
4000a950:	101d883a 	mov	r14,r2
4000a954:	003f8a06 	br	4000a780 <__alt_data_end+0xc000a780>
4000a958:	1019883a 	mov	r12,r2
4000a95c:	003f8506 	br	4000a774 <__alt_data_end+0xc000a774>
4000a960:	103f883a 	mov	ra,r2
4000a964:	003f8006 	br	4000a768 <__alt_data_end+0xc000a768>
			WR_PIO(TX_0_BASE, L_pixel(ref,sx+8,sy)  );
			no_data_send(FORMAT_0 | IN_PLACE_LINTER_1_ADDR | CPU_TX_REQ | (y==8?TAIL_FLIT_BIT:0));
		}else{
			//printf("    ~\n");

			int x8 = ((sx+8)>0)?sx+8:0;
4000a968:	013ffe44 	movi	r4,-7
4000a96c:	9100600e 	bge	r18,r4,4000aaf0 <send_luma_1_motion_comp_fast+0x4d4>
4000a970:	89000017 	ldw	r4,0(r17)
4000a974:	0027883a 	mov	r19,zero
			x8     = (x8 < ref->Lwidth)?x8: ref->Lwidth-1;
4000a978:	993f7816 	blt	r19,r4,4000a75c <__alt_data_end+0xc000a75c>
4000a97c:	003f7606 	br	4000a758 <__alt_data_end+0xc000a758>
			sy=ref->Lheight-1;
		}
		sx = org_x;
		if((sx >= 0) && ((sx+8) < ref->Lwidth)){
			//printf("    *\n");
			WR_PIO(TX_0_BASE, L_pixel(ref,sx+7,sy)  );
4000a980:	89000217 	ldw	r4,8(r17)
4000a984:	89c00617 	ldw	r7,24(r17)
4000a988:	a10d383a 	mul	r6,r20,r4
4000a98c:	3c89883a 	add	r4,r7,r18
4000a990:	2189883a 	add	r4,r4,r6
4000a994:	210001c3 	ldbu	r4,7(r4)
4000a998:	81000035 	stwio	r4,0(r16)
			WR_PIO(TX_1_BASE, L_pixel(ref,sx+6,sy)  );
4000a99c:	89000217 	ldw	r4,8(r17)
4000a9a0:	89c00617 	ldw	r7,24(r17)
4000a9a4:	00844004 	movi	r2,4352
4000a9a8:	a10d383a 	mul	r6,r20,r4
4000a9ac:	3c89883a 	add	r4,r7,r18
4000a9b0:	2189883a 	add	r4,r4,r6
4000a9b4:	21000183 	ldbu	r4,6(r4)
4000a9b8:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_2_BASE, L_pixel(ref,sx+5,sy)  );
4000a9bc:	89000217 	ldw	r4,8(r17)
4000a9c0:	89c00617 	ldw	r7,24(r17)
4000a9c4:	00842c04 	movi	r2,4272
4000a9c8:	a10d383a 	mul	r6,r20,r4
4000a9cc:	3c89883a 	add	r4,r7,r18
4000a9d0:	2189883a 	add	r4,r4,r6
4000a9d4:	21000143 	ldbu	r4,5(r4)
4000a9d8:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_3_BASE, L_pixel(ref,sx+4,sy)  );
4000a9dc:	89000217 	ldw	r4,8(r17)
4000a9e0:	89c00617 	ldw	r7,24(r17)
4000a9e4:	00842804 	movi	r2,4256
4000a9e8:	a10d383a 	mul	r6,r20,r4
4000a9ec:	3c89883a 	add	r4,r7,r18
4000a9f0:	2189883a 	add	r4,r4,r6
4000a9f4:	21000103 	ldbu	r4,4(r4)
4000a9f8:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_4_BASE, L_pixel(ref,sx+3,sy)  );
4000a9fc:	89000217 	ldw	r4,8(r17)
4000aa00:	89c00617 	ldw	r7,24(r17)
4000aa04:	00842404 	movi	r2,4240
4000aa08:	a10d383a 	mul	r6,r20,r4
4000aa0c:	3c89883a 	add	r4,r7,r18
4000aa10:	2189883a 	add	r4,r4,r6
4000aa14:	210000c3 	ldbu	r4,3(r4)
4000aa18:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_5_BASE, L_pixel(ref,sx+2,sy)  );
4000aa1c:	89000217 	ldw	r4,8(r17)
4000aa20:	89c00617 	ldw	r7,24(r17)
4000aa24:	00842004 	movi	r2,4224
4000aa28:	a10d383a 	mul	r6,r20,r4
4000aa2c:	3c89883a 	add	r4,r7,r18
4000aa30:	2189883a 	add	r4,r4,r6
4000aa34:	21000083 	ldbu	r4,2(r4)
4000aa38:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_6_BASE, L_pixel(ref,sx+1,sy)  );
4000aa3c:	89000217 	ldw	r4,8(r17)
4000aa40:	89c00617 	ldw	r7,24(r17)
4000aa44:	00841c04 	movi	r2,4208
4000aa48:	a10d383a 	mul	r6,r20,r4
4000aa4c:	3c89883a 	add	r4,r7,r18
4000aa50:	2189883a 	add	r4,r4,r6
4000aa54:	21000043 	ldbu	r4,1(r4)
4000aa58:	11000035 	stwio	r4,0(r2)
			WR_PIO(TX_7_BASE, L_pixel(ref,sx+0,sy)  );
4000aa5c:	89000217 	ldw	r4,8(r17)
4000aa60:	89c00617 	ldw	r7,24(r17)
4000aa64:	a10d383a 	mul	r6,r20,r4
4000aa68:	3c89883a 	add	r4,r7,r18
4000aa6c:	2189883a 	add	r4,r4,r6
4000aa70:	21800003 	ldbu	r6,0(r4)
4000aa74:	01041804 	movi	r4,4192
4000aa78:	21800035 	stwio	r6,0(r4)
			no_data_send(FORMAT_0 | IN_PLACE_LINTER_1_ADDR | CPU_TX_REQ);
4000aa7c:	011001b4 	movhi	r4,16390
4000aa80:	000c26c0 	call	4000c26c <no_data_send>
			WR_PIO(TX_0_BASE, L_pixel(ref,sx+8,sy)  );
4000aa84:	89000217 	ldw	r4,8(r17)
4000aa88:	89800617 	ldw	r6,24(r17)
4000aa8c:	d8800517 	ldw	r2,20(sp)
4000aa90:	a107383a 	mul	r3,r20,r4
4000aa94:	3089883a 	add	r4,r6,r2
4000aa98:	20c7883a 	add	r3,r4,r3
4000aa9c:	18c00003 	ldbu	r3,0(r3)
4000aaa0:	80c00035 	stwio	r3,0(r16)
			no_data_send(FORMAT_0 | IN_PLACE_LINTER_1_ADDR | CPU_TX_REQ | (y==8?TAIL_FLIT_BIT:0));
4000aaa4:	00c00204 	movi	r3,8
4000aaa8:	e0ff8c1e 	bne	fp,r3,4000a8dc <__alt_data_end+0xc000a8dc>
			WR_PIO(TX_5_BASE, L_pixel(ref,x2,sy)  );
			WR_PIO(TX_6_BASE, L_pixel(ref,x1,sy)  );
			WR_PIO(TX_7_BASE, L_pixel(ref,x0,sy)  );
			no_data_send(FORMAT_0 | IN_PLACE_LINTER_1_ADDR | CPU_TX_REQ);
			WR_PIO(TX_0_BASE, L_pixel(ref,x8,sy)  );
			no_data_send(FORMAT_0 | IN_PLACE_LINTER_1_ADDR | CPU_TX_REQ | (y==8?TAIL_FLIT_BIT:0));
4000aaac:	013001b4 	movhi	r4,49158
4000aab0:	003f8b06 	br	4000a8e0 <__alt_data_end+0xc000a8e0>
4000aab4:	0029883a 	mov	r20,zero
4000aab8:	003f2006 	br	4000a73c <__alt_data_end+0xc000a73c>
4000aabc:	d8000215 	stw	zero,8(sp)
4000aac0:	003f0806 	br	4000a6e4 <__alt_data_end+0xc000a6e4>
4000aac4:	d8000115 	stw	zero,4(sp)
4000aac8:	003f0206 	br	4000a6d4 <__alt_data_end+0xc000a6d4>
4000aacc:	d8000015 	stw	zero,0(sp)
4000aad0:	003efc06 	br	4000a6c4 <__alt_data_end+0xc000a6c4>
  }
}

int send_luma_1_motion_comp_fast(frame *ref, int org_x, int org_y, int frac){
	static int id = 127;
	id = (id+1)%(LUMA_1_MOCOMP_MAX-LUMA_1_MOCOMP_MIN) + LUMA_1_MOCOMP_MIN;
4000aad4:	10bfffc4 	addi	r2,r2,-1
4000aad8:	00fff804 	movi	r3,-32
4000aadc:	10c4b03a 	or	r2,r2,r3
4000aae0:	10800044 	addi	r2,r2,1
4000aae4:	003ee206 	br	4000a670 <__alt_data_end+0xc000a670>
4000aae8:	d8000315 	stw	zero,12(sp)
4000aaec:	003f0c06 	br	4000a720 <__alt_data_end+0xc000a720>
4000aaf0:	89000017 	ldw	r4,0(r17)
4000aaf4:	dcc00517 	ldw	r19,20(sp)
			no_data_send(FORMAT_0 | IN_PLACE_LINTER_1_ADDR | CPU_TX_REQ | (y==8?TAIL_FLIT_BIT:0));
		}else{
			//printf("    ~\n");

			int x8 = ((sx+8)>0)?sx+8:0;
			x8     = (x8 < ref->Lwidth)?x8: ref->Lwidth-1;
4000aaf8:	993f1816 	blt	r19,r4,4000a75c <__alt_data_end+0xc000a75c>
4000aafc:	003f1606 	br	4000a758 <__alt_data_end+0xc000a758>

4000ab00 <motion_comp_send_luma>:



int motion_comp_send_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy, int select){
4000ab00:	da000117 	ldw	r8,4(sp)
4000ab04:	d8c00017 	ldw	r3,0(sp)
4000ab08:	2809883a 	mov	r4,r5
    int frac=(mvy&3)*4+(mvx&3);
4000ab0c:	408000cc 	andi	r2,r8,3
4000ab10:	1085883a 	add	r2,r2,r2
4000ab14:	1085883a 	add	r2,r2,r2
4000ab18:	1a4000cc 	andi	r9,r3,3
    if(select == 0){
        return send_luma_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
4000ab1c:	4011d0ba 	srai	r8,r8,2
4000ab20:	1807d0ba 	srai	r3,r3,2



int motion_comp_send_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy, int select){
4000ab24:	380b883a 	mov	r5,r7
    int frac=(mvy&3)*4+(mvx&3);
4000ab28:	124f883a 	add	r7,r2,r9
    if(select == 0){
4000ab2c:	d8800217 	ldw	r2,8(sp)
        return send_luma_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
4000ab30:	4151883a 	add	r8,r8,r5
4000ab34:	198b883a 	add	r5,r3,r6
4000ab38:	297fff84 	addi	r5,r5,-2
4000ab3c:	41bfff84 	addi	r6,r8,-2

int motion_comp_send_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy, int select){
    int frac=(mvy&3)*4+(mvx&3);
    if(select == 0){
4000ab40:	10000126 	beq	r2,zero,4000ab48 <motion_comp_send_luma+0x48>
        return send_luma_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
    }
    else{
        return send_luma_1_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
4000ab44:	000a61c1 	jmpi	4000a61c <send_luma_1_motion_comp_fast>
int motion_comp_send_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy, int select){
    int frac=(mvy&3)*4+(mvx&3);
    if(select == 0){
        return send_luma_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
4000ab48:	0008f541 	jmpi	40008f54 <send_luma_motion_comp_fast>

4000ab4c <motion_comp_send_chroma>:
    }
}

int motion_comp_send_chroma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy){
4000ab4c:	defff004 	addi	sp,sp,-64
4000ab50:	da001017 	ldw	r8,64(sp)
4000ab54:	d8801117 	ldw	r2,68(sp)
}

int send_chroma_motion_comp_packet_fast(frame *ref, int org_x, int org_y, int xFrac, int yFrac)
{
	static int id = 32;
    id = ((id+1)%32) + 65;
4000ab58:	d0e00217 	ldw	r3,-32760(gp)

int motion_comp_send_chroma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy){
    int xFrac=(mvx&7), yFrac=(mvy&7);
    return send_chroma_motion_comp_packet_fast(ref, (org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3), xFrac, yFrac);
4000ab5c:	300dd07a 	srai	r6,r6,1
4000ab60:	1009d0fa 	srai	r4,r2,3
}

int send_chroma_motion_comp_packet_fast(frame *ref, int org_x, int org_y, int xFrac, int yFrac)
{
	static int id = 32;
    id = ((id+1)%32) + 65;
4000ab64:	1a400044 	addi	r9,r3,1

int motion_comp_send_chroma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy){
    int xFrac=(mvx&7), yFrac=(mvy&7);
    return send_chroma_motion_comp_packet_fast(ref, (org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3), xFrac, yFrac);
4000ab68:	4015d0fa 	srai	r10,r8,3
4000ab6c:	380fd07a 	srai	r7,r7,1
}

int send_chroma_motion_comp_packet_fast(frame *ref, int org_x, int org_y, int xFrac, int yFrac)
{
	static int id = 32;
    id = ((id+1)%32) + 65;
4000ab70:	00e00034 	movhi	r3,32768
4000ab74:	18c007c4 	addi	r3,r3,31
    }
}

int motion_comp_send_chroma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy){
4000ab78:	dd800c15 	stw	r22,48(sp)
4000ab7c:	dc400715 	stw	r17,28(sp)
4000ab80:	dc000615 	stw	r16,24(sp)
4000ab84:	dfc00f15 	stw	ra,60(sp)
4000ab88:	df000e15 	stw	fp,56(sp)
4000ab8c:	ddc00d15 	stw	r23,52(sp)
4000ab90:	dd400b15 	stw	r21,44(sp)
4000ab94:	dd000a15 	stw	r20,40(sp)
4000ab98:	dcc00915 	stw	r19,36(sp)
4000ab9c:	dc800815 	stw	r18,32(sp)
}

int send_chroma_motion_comp_packet_fast(frame *ref, int org_x, int org_y, int xFrac, int yFrac)
{
	static int id = 32;
    id = ((id+1)%32) + 65;
4000aba0:	48c6703a 	and	r3,r9,r3
    }
}

int motion_comp_send_chroma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy){
4000aba4:	2821883a 	mov	r16,r5
    int xFrac=(mvx&7), yFrac=(mvy&7);
4000aba8:	108001cc 	andi	r2,r2,7
4000abac:	414001cc 	andi	r5,r8,7
    return send_chroma_motion_comp_packet_fast(ref, (org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3), xFrac, yFrac);
4000abb0:	32a3883a 	add	r17,r6,r10
4000abb4:	392d883a 	add	r22,r7,r4
}

int send_chroma_motion_comp_packet_fast(frame *ref, int org_x, int org_y, int xFrac, int yFrac)
{
	static int id = 32;
    id = ((id+1)%32) + 65;
4000abb8:	1800d916 	blt	r3,zero,4000af20 <motion_comp_send_chroma+0x3d4>
    uint32_t header_msw = xFrac;
    uint32_t header_lsw = (yFrac<<24) | (xFrac<<16) | (yFrac<<8) | id;


	send_flit(4, header_msw, header_lsw, 0);
4000abbc:	1008963a 	slli	r4,r2,24
4000abc0:	1004923a 	slli	r2,r2,8
4000abc4:	280c943a 	slli	r6,r5,16
}

int send_chroma_motion_comp_packet_fast(frame *ref, int org_x, int org_y, int xFrac, int yFrac)
{
	static int id = 32;
    id = ((id+1)%32) + 65;
4000abc8:	18c01044 	addi	r3,r3,65
    uint32_t header_msw = xFrac;
    uint32_t header_lsw = (yFrac<<24) | (xFrac<<16) | (yFrac<<8) | id;


	send_flit(4, header_msw, header_lsw, 0);
4000abcc:	2084b03a 	or	r2,r4,r2
4000abd0:	10c4b03a 	or	r2,r2,r3
4000abd4:	000f883a 	mov	r7,zero
4000abd8:	118cb03a 	or	r6,r2,r6
4000abdc:	01000104 	movi	r4,4
}

int send_chroma_motion_comp_packet_fast(frame *ref, int org_x, int org_y, int xFrac, int yFrac)
{
	static int id = 32;
    id = ((id+1)%32) + 65;
4000abe0:	d0e00215 	stw	r3,-32760(gp)


	send_flit(4, header_msw, header_lsw, 0);

    //write CB data 0..7
    int y1 = org_y>0?org_y:0;
4000abe4:	b029883a 	mov	r20,r22
    id = ((id+1)%32) + 65;
    uint32_t header_msw = xFrac;
    uint32_t header_lsw = (yFrac<<24) | (xFrac<<16) | (yFrac<<8) | id;


	send_flit(4, header_msw, header_lsw, 0);
4000abe8:	000c2000 	call	4000c200 <send_flit>

    //write CB data 0..7
    int y1 = org_y>0?org_y:0;
4000abec:	b000ca16 	blt	r22,zero,4000af18 <motion_comp_send_chroma+0x3cc>
    y1 = y1<ref->Cheight?y1:ref->Cheight-1;
4000abf0:	80800417 	ldw	r2,16(r16)
4000abf4:	a0800116 	blt	r20,r2,4000abfc <motion_comp_send_chroma+0xb0>
4000abf8:	153fffc4 	addi	r20,r2,-1

    int y2 = org_y+1>0?org_y+1:0;
4000abfc:	b000bc16 	blt	r22,zero,4000aef0 <motion_comp_send_chroma+0x3a4>
4000ac00:	b5400044 	addi	r21,r22,1
    y2 = y2<ref->Cheight?y2:ref->Cheight-1;
4000ac04:	a8800116 	blt	r21,r2,4000ac0c <motion_comp_send_chroma+0xc0>
4000ac08:	157fffc4 	addi	r21,r2,-1

	int y3 = org_y+2>0?org_y+2:0;
4000ac0c:	00ffffc4 	movi	r3,-1
4000ac10:	b0c0bd16 	blt	r22,r3,4000af08 <motion_comp_send_chroma+0x3bc>
4000ac14:	b5800084 	addi	r22,r22,2
	y3 = y3<ref->Cheight?y3:ref->Cheight-1;
4000ac18:	b0800116 	blt	r22,r2,4000ac20 <motion_comp_send_chroma+0xd4>
4000ac1c:	15bfffc4 	addi	r22,r2,-1

    int x1 = org_x>0?org_x:0;
4000ac20:	8825883a 	mov	r18,r17
4000ac24:	8800ba16 	blt	r17,zero,4000af10 <motion_comp_send_chroma+0x3c4>
    x1 = x1<ref->Cwidth?x1:ref->Cwidth-1;
4000ac28:	80800317 	ldw	r2,12(r16)
4000ac2c:	90800116 	blt	r18,r2,4000ac34 <motion_comp_send_chroma+0xe8>
4000ac30:	14bfffc4 	addi	r18,r2,-1

    int x2 = (org_x+1)>0?org_x+1:0;
4000ac34:	8800b216 	blt	r17,zero,4000af00 <motion_comp_send_chroma+0x3b4>
4000ac38:	8cc00044 	addi	r19,r17,1
	x2 = x2<ref->Cwidth?x2:ref->Cwidth-1;
4000ac3c:	98800116 	blt	r19,r2,4000ac44 <motion_comp_send_chroma+0xf8>
4000ac40:	14ffffc4 	addi	r19,r2,-1

    int x3 = (org_x+2)>0?org_x+2:0;
4000ac44:	00ffffc4 	movi	r3,-1
4000ac48:	88c0ab16 	blt	r17,r3,4000aef8 <motion_comp_send_chroma+0x3ac>
4000ac4c:	8c400084 	addi	r17,r17,2
	x3 = x3<ref->Cwidth?x3:ref->Cwidth-1;
4000ac50:	88800116 	blt	r17,r2,4000ac58 <motion_comp_send_chroma+0x10c>
4000ac54:	147fffc4 	addi	r17,r2,-1

	//printf("%d %d %d %d %d %d\n", x1, x2, x3, y1, y2, y3);

	WR_PIO(TX_0_BASE, C_pixel(ref,0,x2,y3)  );
4000ac58:	80c00517 	ldw	r3,20(r16)
4000ac5c:	80800717 	ldw	r2,28(r16)
4000ac60:	07044404 	movi	fp,4368
4000ac64:	b0c7383a 	mul	r3,r22,r3
4000ac68:	14c5883a 	add	r2,r2,r19
4000ac6c:	10c5883a 	add	r2,r2,r3
4000ac70:	10800003 	ldbu	r2,0(r2)
4000ac74:	e0800035 	stwio	r2,0(fp)
	WR_PIO(TX_1_BASE, C_pixel(ref,0,x1,y3)  );
4000ac78:	80c00517 	ldw	r3,20(r16)
4000ac7c:	80800717 	ldw	r2,28(r16)
4000ac80:	05c44004 	movi	r23,4352
4000ac84:	b0c7383a 	mul	r3,r22,r3
4000ac88:	1485883a 	add	r2,r2,r18
4000ac8c:	10c5883a 	add	r2,r2,r3
4000ac90:	10800003 	ldbu	r2,0(r2)
4000ac94:	b8800035 	stwio	r2,0(r23)
	WR_PIO(TX_2_BASE, C_pixel(ref,0,x3,y2)  );
4000ac98:	80c00517 	ldw	r3,20(r16)
4000ac9c:	80800717 	ldw	r2,28(r16)
4000aca0:	02842c04 	movi	r10,4272
4000aca4:	a8c7383a 	mul	r3,r21,r3
4000aca8:	1445883a 	add	r2,r2,r17
4000acac:	10c5883a 	add	r2,r2,r3
4000acb0:	10800003 	ldbu	r2,0(r2)
4000acb4:	50800035 	stwio	r2,0(r10)
	WR_PIO(TX_3_BASE, C_pixel(ref,0,x2,y2)  );
4000acb8:	80c00517 	ldw	r3,20(r16)
4000acbc:	80800717 	ldw	r2,28(r16)
4000acc0:	02442804 	movi	r9,4256
4000acc4:	a8c7383a 	mul	r3,r21,r3
4000acc8:	14c5883a 	add	r2,r2,r19
4000accc:	10c5883a 	add	r2,r2,r3
4000acd0:	10800003 	ldbu	r2,0(r2)
4000acd4:	48800035 	stwio	r2,0(r9)
	WR_PIO(TX_4_BASE, C_pixel(ref,0,x1,y2)  );
4000acd8:	80c00517 	ldw	r3,20(r16)
4000acdc:	80800717 	ldw	r2,28(r16)
4000ace0:	02042404 	movi	r8,4240
4000ace4:	a8c7383a 	mul	r3,r21,r3
4000ace8:	1485883a 	add	r2,r2,r18
4000acec:	10c5883a 	add	r2,r2,r3
4000acf0:	10800003 	ldbu	r2,0(r2)
4000acf4:	40800035 	stwio	r2,0(r8)
	WR_PIO(TX_5_BASE, C_pixel(ref,0,x3,y1)  );
4000acf8:	80c00517 	ldw	r3,20(r16)
4000acfc:	80800717 	ldw	r2,28(r16)
4000ad00:	01c42004 	movi	r7,4224
4000ad04:	a0c7383a 	mul	r3,r20,r3
4000ad08:	1445883a 	add	r2,r2,r17
4000ad0c:	10c5883a 	add	r2,r2,r3
4000ad10:	10800003 	ldbu	r2,0(r2)
4000ad14:	38800035 	stwio	r2,0(r7)
	WR_PIO(TX_6_BASE, C_pixel(ref,0,x2,y1)  );
4000ad18:	80c00517 	ldw	r3,20(r16)
4000ad1c:	80800717 	ldw	r2,28(r16)
4000ad20:	01841c04 	movi	r6,4208
4000ad24:	a0c7383a 	mul	r3,r20,r3
4000ad28:	14c5883a 	add	r2,r2,r19
4000ad2c:	10c5883a 	add	r2,r2,r3
4000ad30:	10800003 	ldbu	r2,0(r2)
4000ad34:	30800035 	stwio	r2,0(r6)
	WR_PIO(TX_7_BASE, C_pixel(ref,0,x1,y1)  );
4000ad38:	80c00517 	ldw	r3,20(r16)
4000ad3c:	80800717 	ldw	r2,28(r16)
4000ad40:	01441804 	movi	r5,4192
4000ad44:	a0c7383a 	mul	r3,r20,r3
4000ad48:	1485883a 	add	r2,r2,r18
4000ad4c:	10c5883a 	add	r2,r2,r3
4000ad50:	10800003 	ldbu	r2,0(r2)
4000ad54:	28800035 	stwio	r2,0(r5)
	no_data_send(FORMAT_0 | IN_PLACE_CINTER_0_ADDR | CPU_TX_REQ);
4000ad58:	01100134 	movhi	r4,16388
4000ad5c:	d9400515 	stw	r5,20(sp)
4000ad60:	d9800415 	stw	r6,16(sp)
4000ad64:	d9c00315 	stw	r7,12(sp)
4000ad68:	da000215 	stw	r8,8(sp)
4000ad6c:	da400115 	stw	r9,4(sp)
4000ad70:	da800015 	stw	r10,0(sp)
4000ad74:	000c26c0 	call	4000c26c <no_data_send>

	//Now CR
	WR_PIO(TX_0_BASE, C_pixel(ref,1,x2,y3)  );
4000ad78:	80c00517 	ldw	r3,20(r16)
4000ad7c:	80800817 	ldw	r2,32(r16)
4000ad80:	b0c7383a 	mul	r3,r22,r3
4000ad84:	14c5883a 	add	r2,r2,r19
4000ad88:	10c5883a 	add	r2,r2,r3
4000ad8c:	10800003 	ldbu	r2,0(r2)
4000ad90:	e0800035 	stwio	r2,0(fp)
	WR_PIO(TX_1_BASE, C_pixel(ref,1,x1,y3)  );
4000ad94:	80c00517 	ldw	r3,20(r16)
4000ad98:	80800817 	ldw	r2,32(r16)
4000ad9c:	b0c7383a 	mul	r3,r22,r3
4000ada0:	1485883a 	add	r2,r2,r18
4000ada4:	10c5883a 	add	r2,r2,r3
4000ada8:	10800003 	ldbu	r2,0(r2)
4000adac:	b8800035 	stwio	r2,0(r23)
	WR_PIO(TX_2_BASE, C_pixel(ref,1,x3,y2)  );
4000adb0:	80c00517 	ldw	r3,20(r16)
4000adb4:	80800817 	ldw	r2,32(r16)
4000adb8:	da800017 	ldw	r10,0(sp)
4000adbc:	a8c7383a 	mul	r3,r21,r3
4000adc0:	1445883a 	add	r2,r2,r17
4000adc4:	10c5883a 	add	r2,r2,r3
4000adc8:	10800003 	ldbu	r2,0(r2)
4000adcc:	50800035 	stwio	r2,0(r10)
	WR_PIO(TX_3_BASE, C_pixel(ref,1,x2,y2)  );
4000add0:	80c00517 	ldw	r3,20(r16)
4000add4:	80800817 	ldw	r2,32(r16)
4000add8:	da400117 	ldw	r9,4(sp)
4000addc:	a8c7383a 	mul	r3,r21,r3
4000ade0:	14c5883a 	add	r2,r2,r19
4000ade4:	10c5883a 	add	r2,r2,r3
4000ade8:	10800003 	ldbu	r2,0(r2)
4000adec:	48800035 	stwio	r2,0(r9)
	WR_PIO(TX_4_BASE, C_pixel(ref,1,x1,y2)  );
4000adf0:	80800517 	ldw	r2,20(r16)
4000adf4:	80c00817 	ldw	r3,32(r16)
4000adf8:	da000217 	ldw	r8,8(sp)
4000adfc:	a8ab383a 	mul	r21,r21,r2
4000ae00:	1c85883a 	add	r2,r3,r18
4000ae04:	156b883a 	add	r21,r2,r21
4000ae08:	a8800003 	ldbu	r2,0(r21)
4000ae0c:	40800035 	stwio	r2,0(r8)
	WR_PIO(TX_5_BASE, C_pixel(ref,1,x3,y1)  );
4000ae10:	80c00517 	ldw	r3,20(r16)
4000ae14:	80800817 	ldw	r2,32(r16)
4000ae18:	d9c00317 	ldw	r7,12(sp)
4000ae1c:	a0c7383a 	mul	r3,r20,r3
4000ae20:	1445883a 	add	r2,r2,r17
4000ae24:	10c5883a 	add	r2,r2,r3
4000ae28:	10800003 	ldbu	r2,0(r2)
4000ae2c:	38800035 	stwio	r2,0(r7)
	WR_PIO(TX_6_BASE, C_pixel(ref,1,x2,y1)  );
4000ae30:	80800517 	ldw	r2,20(r16)
4000ae34:	80c00817 	ldw	r3,32(r16)
4000ae38:	d9800417 	ldw	r6,16(sp)
4000ae3c:	a085383a 	mul	r2,r20,r2
4000ae40:	1ce7883a 	add	r19,r3,r19
4000ae44:	98a7883a 	add	r19,r19,r2
4000ae48:	98800003 	ldbu	r2,0(r19)
4000ae4c:	30800035 	stwio	r2,0(r6)
	WR_PIO(TX_7_BASE, C_pixel(ref,1,x1,y1)  );
4000ae50:	80800517 	ldw	r2,20(r16)
4000ae54:	80c00817 	ldw	r3,32(r16)
4000ae58:	d9400517 	ldw	r5,20(sp)
4000ae5c:	a0a9383a 	mul	r20,r20,r2
4000ae60:	1ca5883a 	add	r18,r3,r18
4000ae64:	9525883a 	add	r18,r18,r20
4000ae68:	90800003 	ldbu	r2,0(r18)
4000ae6c:	28800035 	stwio	r2,0(r5)
	no_data_send(FORMAT_0 | IN_PLACE_CINTER_0_ADDR | CPU_TX_REQ);
4000ae70:	01100134 	movhi	r4,16388
4000ae74:	000c26c0 	call	4000c26c <no_data_send>

	//Now the last two samples which don't fit nicely...
	WR_PIO(TX_0_BASE, C_pixel(ref,0,x3,y3)  );
4000ae78:	80c00517 	ldw	r3,20(r16)
4000ae7c:	80800717 	ldw	r2,28(r16)
4000ae80:	b0c7383a 	mul	r3,r22,r3
4000ae84:	1445883a 	add	r2,r2,r17
4000ae88:	10c5883a 	add	r2,r2,r3
4000ae8c:	10800003 	ldbu	r2,0(r2)
4000ae90:	e0800035 	stwio	r2,0(fp)
	WR_PIO(TX_1_BASE, C_pixel(ref,1,x3,y3)  );
4000ae94:	81c00517 	ldw	r7,20(r16)
4000ae98:	81800817 	ldw	r6,32(r16)
4000ae9c:	b1ed383a 	mul	r22,r22,r7
4000aea0:	3463883a 	add	r17,r6,r17
4000aea4:	8da3883a 	add	r17,r17,r22
4000aea8:	88800003 	ldbu	r2,0(r17)
4000aeac:	b8800035 	stwio	r2,0(r23)
	no_data_send(FORMAT_2 | IN_PLACE_CINTER_0_ADDR | CPU_TX_REQ | TAIL_FLIT_BIT);
4000aeb0:	01300134 	movhi	r4,49156
4000aeb4:	21000084 	addi	r4,r4,2
4000aeb8:	000c26c0 	call	4000c26c <no_data_send>
int motion_comp_send_chroma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy){
    int xFrac=(mvx&7), yFrac=(mvy&7);
    return send_chroma_motion_comp_packet_fast(ref, (org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3), xFrac, yFrac);
}
4000aebc:	d0a00217 	ldw	r2,-32760(gp)
4000aec0:	dfc00f17 	ldw	ra,60(sp)
4000aec4:	df000e17 	ldw	fp,56(sp)
4000aec8:	ddc00d17 	ldw	r23,52(sp)
4000aecc:	dd800c17 	ldw	r22,48(sp)
4000aed0:	dd400b17 	ldw	r21,44(sp)
4000aed4:	dd000a17 	ldw	r20,40(sp)
4000aed8:	dcc00917 	ldw	r19,36(sp)
4000aedc:	dc800817 	ldw	r18,32(sp)
4000aee0:	dc400717 	ldw	r17,28(sp)
4000aee4:	dc000617 	ldw	r16,24(sp)
4000aee8:	dec01004 	addi	sp,sp,64
4000aeec:	f800283a 	ret

    //write CB data 0..7
    int y1 = org_y>0?org_y:0;
    y1 = y1<ref->Cheight?y1:ref->Cheight-1;

    int y2 = org_y+1>0?org_y+1:0;
4000aef0:	002b883a 	mov	r21,zero
4000aef4:	003f4306 	br	4000ac04 <__alt_data_end+0xc000ac04>
    x1 = x1<ref->Cwidth?x1:ref->Cwidth-1;

    int x2 = (org_x+1)>0?org_x+1:0;
	x2 = x2<ref->Cwidth?x2:ref->Cwidth-1;

    int x3 = (org_x+2)>0?org_x+2:0;
4000aef8:	0023883a 	mov	r17,zero
4000aefc:	003f5406 	br	4000ac50 <__alt_data_end+0xc000ac50>
	y3 = y3<ref->Cheight?y3:ref->Cheight-1;

    int x1 = org_x>0?org_x:0;
    x1 = x1<ref->Cwidth?x1:ref->Cwidth-1;

    int x2 = (org_x+1)>0?org_x+1:0;
4000af00:	0027883a 	mov	r19,zero
4000af04:	003f4d06 	br	4000ac3c <__alt_data_end+0xc000ac3c>
    y1 = y1<ref->Cheight?y1:ref->Cheight-1;

    int y2 = org_y+1>0?org_y+1:0;
    y2 = y2<ref->Cheight?y2:ref->Cheight-1;

	int y3 = org_y+2>0?org_y+2:0;
4000af08:	002d883a 	mov	r22,zero
4000af0c:	003f4206 	br	4000ac18 <__alt_data_end+0xc000ac18>
	y3 = y3<ref->Cheight?y3:ref->Cheight-1;

    int x1 = org_x>0?org_x:0;
4000af10:	0025883a 	mov	r18,zero
4000af14:	003f4406 	br	4000ac28 <__alt_data_end+0xc000ac28>


	send_flit(4, header_msw, header_lsw, 0);

    //write CB data 0..7
    int y1 = org_y>0?org_y:0;
4000af18:	0029883a 	mov	r20,zero
4000af1c:	003f3406 	br	4000abf0 <__alt_data_end+0xc000abf0>
}

int send_chroma_motion_comp_packet_fast(frame *ref, int org_x, int org_y, int xFrac, int yFrac)
{
	static int id = 32;
    id = ((id+1)%32) + 65;
4000af20:	18ffffc4 	addi	r3,r3,-1
4000af24:	013ff804 	movi	r4,-32
4000af28:	1906b03a 	or	r3,r3,r4
4000af2c:	18c00044 	addi	r3,r3,1
4000af30:	003f2206 	br	4000abbc <__alt_data_end+0xc000abbc>

4000af34 <sw_inter_luma>:
    return send_chroma_motion_comp_packet_fast(ref, (org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3), xFrac, yFrac);
}

void sw_inter_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
4000af34:	2a800117 	ldw	r10,4(r5)
4000af38:	deff4204 	addi	sp,sp,-760
  int x,y,iCbCr;
  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
4000af3c:	d8c0be17 	ldw	r3,760(sp)
4000af40:	da80a415 	stw	r10,656(sp)
4000af44:	2a400617 	ldw	r9,24(r5)
    return send_chroma_motion_comp_packet_fast(ref, (org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3), xFrac, yFrac);
}

void sw_inter_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
4000af48:	dc00b415 	stw	r16,720(sp)
  L_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<9; ++y) {
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
4000af4c:	dc00a417 	ldw	r16,656(sp)

void sw_inter_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
  int x,y,iCbCr;
  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
4000af50:	181fd0ba 	srai	r15,r3,2
4000af54:	da40a215 	stw	r9,648(sp)
  L_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<9; ++y) {
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
4000af58:	843fffc4 	addi	r16,r16,-1

void sw_inter_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
  int x,y,iCbCr;
  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
4000af5c:	da00bf17 	ldw	r8,764(sp)
  L_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<9; ++y) {
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
4000af60:	dc00a715 	stw	r16,668(sp)
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
                     else b.p[y][x]=L_pixel(ref,sx,sy);
4000af64:	d8c0a217 	ldw	r3,648(sp)
4000af68:	dc00a217 	ldw	r16,648(sp)

void sw_inter_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
  int x,y,iCbCr;
  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
4000af6c:	799f883a 	add	r15,r15,r6
    return send_chroma_motion_comp_packet_fast(ref, (org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3), xFrac, yFrac);
}

void sw_inter_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
4000af70:	ddc0bb15 	stw	r23,748(sp)
  int x,y,iCbCr;
  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
4000af74:	7dffff84 	addi	r23,r15,-2
4000af78:	4005d0ba 	srai	r2,r8,2
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
                     else b.p[y][x]=L_pixel(ref,sx,sy);
4000af7c:	1dc7883a 	add	r3,r3,r23
4000af80:	83e1883a 	add	r16,r16,r15
4000af84:	d8c0a815 	stw	r3,672(sp)
4000af88:	dc00a915 	stw	r16,676(sp)
4000af8c:	d8c0a217 	ldw	r3,648(sp)
4000af90:	dc00a217 	ldw	r16,648(sp)
4000af94:	2b000217 	ldw	r12,8(r5)

void sw_inter_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
  int x,y,iCbCr;
  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
4000af98:	11c5883a 	add	r2,r2,r7
    return send_chroma_motion_comp_packet_fast(ref, (org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3), xFrac, yFrac);
}

void sw_inter_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
4000af9c:	dd80ba15 	stw	r22,744(sp)
4000afa0:	dd40b915 	stw	r21,740(sp)
4000afa4:	7d800044 	addi	r22,r15,1
4000afa8:	7d400144 	addi	r21,r15,5
4000afac:	dc40b515 	stw	r17,724(sp)
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
                     else b.p[y][x]=L_pixel(ref,sx,sy);
4000afb0:	1d87883a 	add	r3,r3,r22
    return send_chroma_motion_comp_packet_fast(ref, (org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3), xFrac, yFrac);
}

void sw_inter_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
4000afb4:	2023883a 	mov	r17,r4
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
                     else b.p[y][x]=L_pixel(ref,sx,sy);
4000afb8:	8561883a 	add	r16,r16,r21
4000afbc:	113fff84 	addi	r4,r2,-2
4000afc0:	108001c4 	addi	r2,r2,7
    return send_chroma_motion_comp_packet_fast(ref, (org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3), xFrac, yFrac);
}

void sw_inter_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
4000afc4:	dfc0bd15 	stw	ra,756(sp)
4000afc8:	df00bc15 	stw	fp,752(sp)
4000afcc:	dd00b815 	stw	r20,736(sp)
4000afd0:	dcc0b715 	stw	r19,732(sp)
4000afd4:	dc80b615 	stw	r18,728(sp)
4000afd8:	d980ac15 	stw	r6,688(sp)
4000afdc:	d9c0a515 	stw	r7,660(sp)
4000afe0:	db00a315 	stw	r12,652(sp)
4000afe4:	7f3fffc4 	addi	fp,r15,-1
4000afe8:	7d000084 	addi	r20,r15,2
4000afec:	7cc000c4 	addi	r19,r15,3
4000aff0:	7c800104 	addi	r18,r15,4
4000aff4:	7fc00184 	addi	ra,r15,6
4000aff8:	db800804 	addi	r14,sp,32
4000affc:	d81b883a 	mov	r13,sp
4000b000:	db000704 	addi	r12,sp,28
4000b004:	dac00604 	addi	r11,sp,24
4000b008:	da800504 	addi	r10,sp,20
4000b00c:	da400404 	addi	r9,sp,16
4000b010:	da000304 	addi	r8,sp,12
4000b014:	d9c00204 	addi	r7,sp,8
4000b018:	d9800104 	addi	r6,sp,4
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
                     else b.p[y][x]=L_pixel(ref,sx,sy);
4000b01c:	d8c0aa15 	stw	r3,680(sp)
4000b020:	dc00a615 	stw	r16,664(sp)
4000b024:	dc40ae15 	stw	r17,696(sp)
4000b028:	d880ab15 	stw	r2,684(sp)
4000b02c:	2007883a 	mov	r3,r4
4000b030:	2001d416 	blt	r4,zero,4000b784 <sw_inter_luma+0x850>
  L_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<9; ++y) {
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
4000b034:	dc40a417 	ldw	r17,656(sp)
4000b038:	1c400116 	blt	r3,r17,4000b040 <sw_inter_luma+0x10c>
4000b03c:	d8c0a717 	ldw	r3,668(sp)
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000b040:	b801c916 	blt	r23,zero,4000b768 <sw_inter_luma+0x834>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000b044:	2c000017 	ldw	r16,0(r5)
4000b048:	bc01bc0e 	bge	r23,r16,4000b73c <sw_inter_luma+0x808>
                     else b.p[y][x]=L_pixel(ref,sx,sy);
4000b04c:	d880a317 	ldw	r2,652(sp)
4000b050:	dc00a817 	ldw	r16,672(sp)
4000b054:	1887383a 	mul	r3,r3,r2
4000b058:	80c5883a 	add	r2,r16,r3
4000b05c:	14400003 	ldbu	r17,0(r2)
4000b060:	dc00a217 	ldw	r16,648(sp)
4000b064:	6c400015 	stw	r17,0(r13)
4000b068:	80c5883a 	add	r2,r16,r3
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000b06c:	e001bb16 	blt	fp,zero,4000b75c <sw_inter_luma+0x828>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000b070:	2c000017 	ldw	r16,0(r5)
4000b074:	e401aa0e 	bge	fp,r16,4000b720 <sw_inter_luma+0x7ec>
                     else b.p[y][x]=L_pixel(ref,sx,sy);
4000b078:	1721883a 	add	r16,r2,fp
4000b07c:	84000003 	ldbu	r16,0(r16)
4000b080:	34000015 	stw	r16,0(r6)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000b084:	7801aa16 	blt	r15,zero,4000b730 <sw_inter_luma+0x7fc>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000b088:	2c000017 	ldw	r16,0(r5)
4000b08c:	7c019d0e 	bge	r15,r16,4000b704 <sw_inter_luma+0x7d0>
                     else b.p[y][x]=L_pixel(ref,sx,sy);
4000b090:	dc40a917 	ldw	r17,676(sp)
4000b094:	88e1883a 	add	r16,r17,r3
4000b098:	84000003 	ldbu	r16,0(r16)
4000b09c:	3c000015 	stw	r16,0(r7)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000b0a0:	b0019c16 	blt	r22,zero,4000b714 <sw_inter_luma+0x7e0>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000b0a4:	2c000017 	ldw	r16,0(r5)
4000b0a8:	b4018f0e 	bge	r22,r16,4000b6e8 <sw_inter_luma+0x7b4>
                     else b.p[y][x]=L_pixel(ref,sx,sy);
4000b0ac:	dc40aa17 	ldw	r17,680(sp)
4000b0b0:	88e1883a 	add	r16,r17,r3
4000b0b4:	84000003 	ldbu	r16,0(r16)
4000b0b8:	44000015 	stw	r16,0(r8)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000b0bc:	a0018e16 	blt	r20,zero,4000b6f8 <sw_inter_luma+0x7c4>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000b0c0:	2c000017 	ldw	r16,0(r5)
4000b0c4:	a401810e 	bge	r20,r16,4000b6cc <sw_inter_luma+0x798>
                     else b.p[y][x]=L_pixel(ref,sx,sy);
4000b0c8:	1521883a 	add	r16,r2,r20
4000b0cc:	84000003 	ldbu	r16,0(r16)
4000b0d0:	4c000015 	stw	r16,0(r9)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000b0d4:	98018116 	blt	r19,zero,4000b6dc <sw_inter_luma+0x7a8>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000b0d8:	2c000017 	ldw	r16,0(r5)
4000b0dc:	9c01740e 	bge	r19,r16,4000b6b0 <sw_inter_luma+0x77c>
                     else b.p[y][x]=L_pixel(ref,sx,sy);
4000b0e0:	14e1883a 	add	r16,r2,r19
4000b0e4:	84000003 	ldbu	r16,0(r16)
4000b0e8:	54000015 	stw	r16,0(r10)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000b0ec:	90017416 	blt	r18,zero,4000b6c0 <sw_inter_luma+0x78c>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000b0f0:	2c000017 	ldw	r16,0(r5)
4000b0f4:	9401670e 	bge	r18,r16,4000b694 <sw_inter_luma+0x760>
                     else b.p[y][x]=L_pixel(ref,sx,sy);
4000b0f8:	14a1883a 	add	r16,r2,r18
4000b0fc:	84000003 	ldbu	r16,0(r16)
4000b100:	5c000015 	stw	r16,0(r11)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000b104:	a8016716 	blt	r21,zero,4000b6a4 <sw_inter_luma+0x770>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000b108:	2c000017 	ldw	r16,0(r5)
4000b10c:	ac015a0e 	bge	r21,r16,4000b678 <sw_inter_luma+0x744>
                     else b.p[y][x]=L_pixel(ref,sx,sy);
4000b110:	dc00a617 	ldw	r16,664(sp)
4000b114:	80c7883a 	add	r3,r16,r3
4000b118:	18c00003 	ldbu	r3,0(r3)
4000b11c:	60c00015 	stw	r3,0(r12)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000b120:	f8015916 	blt	ra,zero,4000b688 <sw_inter_luma+0x754>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000b124:	28c00017 	ldw	r3,0(r5)
4000b128:	f8c14f0e 	bge	ra,r3,4000b668 <sw_inter_luma+0x734>
                     else b.p[y][x]=L_pixel(ref,sx,sy);
4000b12c:	17c5883a 	add	r2,r2,ra
4000b130:	10800003 	ldbu	r2,0(r2)
4000b134:	70800015 	stw	r2,0(r14)


static inline L_MC_temp_block GetLMCTempBlock(frame *ref, int org_x, int org_y) {
  L_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<9; ++y) {
4000b138:	dc40ab17 	ldw	r17,684(sp)
4000b13c:	21000044 	addi	r4,r4,1
4000b140:	73800904 	addi	r14,r14,36
4000b144:	6b400904 	addi	r13,r13,36
4000b148:	63000904 	addi	r12,r12,36
4000b14c:	5ac00904 	addi	r11,r11,36
4000b150:	52800904 	addi	r10,r10,36
4000b154:	4a400904 	addi	r9,r9,36
4000b158:	42000904 	addi	r8,r8,36
4000b15c:	39c00904 	addi	r7,r7,36
4000b160:	31800904 	addi	r6,r6,36
4000b164:	247fb11e 	bne	r4,r17,4000b02c <__alt_data_end+0xc000b02c>
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
                     else b.p[y][x]=L_pixel(ref,sx,sy);
    }
  }
  return b;
4000b168:	01805104 	movi	r6,324
4000b16c:	d80b883a 	mov	r5,sp
4000b170:	d989883a 	add	r4,sp,r6
4000b174:	dc40ae17 	ldw	r17,696(sp)
4000b178:	000ecc80 	call	4000ecc8 <memcpy>
void sw_inter_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
  int x,y,iCbCr;
  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
  int frac=(mvy&3)*4+(mvx&3);
4000b17c:	dc80bf17 	ldw	r18,764(sp)
4000b180:	da00be17 	ldw	r8,760(sp)
4000b184:	da40a517 	ldw	r9,660(sp)
4000b188:	908000cc 	andi	r2,r18,3
4000b18c:	1085883a 	add	r2,r2,r2
4000b190:	1085883a 	add	r2,r2,r2
4000b194:	40c000cc 	andi	r3,r8,3
4000b198:	4a400104 	addi	r9,r9,4
4000b19c:	10ef883a 	add	r23,r2,r3
4000b1a0:	dd805104 	addi	r22,sp,324
4000b1a4:	da40af15 	stw	r9,700(sp)
4000b1a8:	b1c00304 	addi	r7,r22,12
4000b1ac:	b2000c04 	addi	r8,r22,48
4000b1b0:	b0802704 	addi	r2,r22,156
4000b1b4:	b5401404 	addi	r21,r22,80
4000b1b8:	b3801204 	addi	r14,r22,72
4000b1bc:	b3401304 	addi	r13,r22,76
4000b1c0:	b1401504 	addi	r5,r22,84
4000b1c4:	b2c01604 	addi	r11,r22,88
4000b1c8:	b1801704 	addi	r6,r22,92
4000b1cc:	b7c00204 	addi	ra,r22,8
4000b1d0:	b7000b04 	addi	fp,r22,44
4000b1d4:	b4001d04 	addi	r16,r22,116
4000b1d8:	b0c02604 	addi	r3,r22,152
4000b1dc:	b1002f04 	addi	r4,r22,188
4000b1e0:	b3c01e04 	addi	r15,r22,120
    return send_chroma_motion_comp_packet_fast(ref, (org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3), xFrac, yFrac);
}

void sw_inter_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
4000b1e4:	b029883a 	mov	r20,r22
4000b1e8:	dd80ae15 	stw	r22,696(sp)
4000b1ec:	d9c0a415 	stw	r7,656(sp)
4000b1f0:	da00a215 	stw	r8,648(sp)
4000b1f4:	0027883a 	mov	r19,zero
4000b1f8:	102d883a 	mov	r22,r2
  int x,y,iCbCr;
  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
  int frac=(mvy&3)*4+(mvx&3);
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x)
      L_pixel(this,x+org_x,y+org_y)=L_MC_get_sub(&(b.p[y+2][x+2]),frac);
4000b1fc:	89c00217 	ldw	r7,8(r17)
4000b200:	db00a517 	ldw	r12,660(sp)
4000b204:	da80ac17 	ldw	r10,688(sp)
4000b208:	8a000617 	ldw	r8,24(r17)
4000b20c:	61cf383a 	mul	r7,r12,r7
4000b210:	9a85883a 	add	r2,r19,r10
4000b214:	3885883a 	add	r2,r7,r2
4000b218:	4093883a 	add	r9,r8,r2
#define Mix(a,b) (((a)+(b)+1)>>1)

static inline int L_MC_get_sub(uint32_t *data, int frac) {
#define p(x,y) data[(y)*9+(x)]
  int b,cc,dd,ee,ff,h,j,m,s;
  iffrac(0,0) {
4000b21c:	b8002c1e 	bne	r23,zero,4000b2d0 <sw_inter_luma+0x39c>
4000b220:	a8800003 	ldbu	r2,0(r21)
4000b224:	db00a417 	ldw	r12,656(sp)
4000b228:	dc80a217 	ldw	r18,648(sp)
  int x,y,iCbCr;
  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
  int frac=(mvy&3)*4+(mvx&3);
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x)
      L_pixel(this,x+org_x,y+org_y)=L_MC_get_sub(&(b.p[y+2][x+2]),frac);
4000b22c:	48800005 	stb	r2,0(r9)
4000b230:	63000104 	addi	r12,r12,4
4000b234:	94800104 	addi	r18,r18,4
                        int mvx, int mvy) {
  int x,y,iCbCr;
  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
  int frac=(mvy&3)*4+(mvx&3);
  for(y=0; y<4; ++y)
    for(x=0; x<4; ++x)
4000b238:	9cc00044 	addi	r19,r19,1
4000b23c:	db00a415 	stw	r12,656(sp)
4000b240:	dc80a215 	stw	r18,648(sp)
4000b244:	00800104 	movi	r2,4
4000b248:	ad400104 	addi	r21,r21,4
4000b24c:	73800104 	addi	r14,r14,4
4000b250:	a5000104 	addi	r20,r20,4
4000b254:	6b400104 	addi	r13,r13,4
4000b258:	29400104 	addi	r5,r5,4
4000b25c:	5ac00104 	addi	r11,r11,4
4000b260:	31800104 	addi	r6,r6,4
4000b264:	ffc00104 	addi	ra,ra,4
4000b268:	e7000104 	addi	fp,fp,4
4000b26c:	84000104 	addi	r16,r16,4
4000b270:	18c00104 	addi	r3,r3,4
4000b274:	21000104 	addi	r4,r4,4
4000b278:	7bc00104 	addi	r15,r15,4
4000b27c:	b5800104 	addi	r22,r22,4
4000b280:	98bfde1e 	bne	r19,r2,4000b1fc <__alt_data_end+0xc000b1fc>
4000b284:	d8c0a517 	ldw	r3,660(sp)
4000b288:	dd80ae17 	ldw	r22,696(sp)
                        int org_x, int org_y,
                        int mvx, int mvy) {
  int x,y,iCbCr;
  L_MC_temp_block b=GetLMCTempBlock(ref,org_x+(mvx>>2)-2,org_y+(mvy>>2)-2);
  int frac=(mvy&3)*4+(mvx&3);
  for(y=0; y<4; ++y)
4000b28c:	d900af17 	ldw	r4,700(sp)
4000b290:	18c00044 	addi	r3,r3,1
4000b294:	d8c0a515 	stw	r3,660(sp)
4000b298:	b5800904 	addi	r22,r22,36
4000b29c:	20ffc21e 	bne	r4,r3,4000b1a8 <__alt_data_end+0xc000b1a8>
    for(x=0; x<4; ++x)
      L_pixel(this,x+org_x,y+org_y)=L_MC_get_sub(&(b.p[y+2][x+2]),frac);
}
4000b2a0:	dfc0bd17 	ldw	ra,756(sp)
4000b2a4:	df00bc17 	ldw	fp,752(sp)
4000b2a8:	ddc0bb17 	ldw	r23,748(sp)
4000b2ac:	dd80ba17 	ldw	r22,744(sp)
4000b2b0:	dd40b917 	ldw	r21,740(sp)
4000b2b4:	dd00b817 	ldw	r20,736(sp)
4000b2b8:	dcc0b717 	ldw	r19,732(sp)
4000b2bc:	dc80b617 	ldw	r18,728(sp)
4000b2c0:	dc40b517 	ldw	r17,724(sp)
4000b2c4:	dc00b417 	ldw	r16,720(sp)
4000b2c8:	dec0be04 	addi	sp,sp,760
4000b2cc:	f800283a 	ret
#define p(x,y) data[(y)*9+(x)]
  int b,cc,dd,ee,ff,h,j,m,s;
  iffrac(0,0) {
	  return p(0,0);
  }
  b=Filter(p(-2,0),p(-1,0),p(0,0),p(1,0),p(2,0),p(3,0));
4000b2d0:	74800017 	ldw	r18,0(r14)
4000b2d4:	5b000017 	ldw	r12,0(r11)
4000b2d8:	6a000017 	ldw	r8,0(r13)
4000b2dc:	dc80a715 	stw	r18,668(sp)
4000b2e0:	30800017 	ldw	r2,0(r6)
4000b2e4:	db00a915 	stw	r12,676(sp)
4000b2e8:	db00a717 	ldw	r12,668(sp)
4000b2ec:	da00a815 	stw	r8,672(sp)
4000b2f0:	d880aa15 	stw	r2,680(sp)
4000b2f4:	6085883a 	add	r2,r12,r2
4000b2f8:	db00a817 	ldw	r12,672(sp)
4000b2fc:	a9c00017 	ldw	r7,0(r21)
4000b300:	2a800017 	ldw	r10,0(r5)
4000b304:	63000164 	muli	r12,r12,5
4000b308:	3c800524 	muli	r18,r7,20
4000b30c:	52000524 	muli	r8,r10,20
4000b310:	db00a315 	stw	r12,652(sp)
4000b314:	db00a917 	ldw	r12,676(sp)
4000b318:	10800404 	addi	r2,r2,16
4000b31c:	1485883a 	add	r2,r2,r18
4000b320:	63000164 	muli	r12,r12,5
4000b324:	1205883a 	add	r2,r2,r8
4000b328:	db00a615 	stw	r12,664(sp)
4000b32c:	db00a317 	ldw	r12,652(sp)
4000b330:	1305c83a 	sub	r2,r2,r12
4000b334:	db00a617 	ldw	r12,664(sp)
4000b338:	1305c83a 	sub	r2,r2,r12
4000b33c:	1004d17a 	srli	r2,r2,5
4000b340:	03003fc4 	movi	r12,255
4000b344:	d880a315 	stw	r2,652(sp)
4000b348:	6080010e 	bge	r12,r2,4000b350 <sw_inter_luma+0x41c>
4000b34c:	db00a315 	stw	r12,652(sp)
  iffrac(1,0){
4000b350:	03000044 	movi	r12,1
4000b354:	bb010d26 	beq	r23,r12,4000b78c <sw_inter_luma+0x858>
	  return Mix(p(0,0),b);
  }
  iffrac(2,0){
4000b358:	00800084 	movi	r2,2
4000b35c:	b8811026 	beq	r23,r2,4000b7a0 <sw_inter_luma+0x86c>
	  return b;
  }
  iffrac(3,0){
4000b360:	030000c4 	movi	r12,3
4000b364:	bb011126 	beq	r23,r12,4000b7ac <sw_inter_luma+0x878>
	  return Mix(b,p(1,0));
  }
  h=Filter(p(0,-2),p(0,-1),p(0,0),p(0,1),p(0,2),p(0,3));
4000b368:	80800017 	ldw	r2,0(r16)
4000b36c:	fb000017 	ldw	r12,0(ra)
4000b370:	12800524 	muli	r10,r2,20
4000b374:	d880ad15 	stw	r2,692(sp)
4000b378:	20800017 	ldw	r2,0(r4)
4000b37c:	6099883a 	add	r12,r12,r2
4000b380:	e0800017 	ldw	r2,0(fp)
4000b384:	63000404 	addi	r12,r12,16
4000b388:	10800164 	muli	r2,r2,5
4000b38c:	d880a615 	stw	r2,664(sp)
4000b390:	6485883a 	add	r2,r12,r18
4000b394:	1b000017 	ldw	r12,0(r3)
4000b398:	dc80a617 	ldw	r18,664(sp)
4000b39c:	1285883a 	add	r2,r2,r10
4000b3a0:	63000164 	muli	r12,r12,5
4000b3a4:	1485c83a 	sub	r2,r2,r18
4000b3a8:	1305c83a 	sub	r2,r2,r12
4000b3ac:	1024d17a 	srli	r18,r2,5
4000b3b0:	00803fc4 	movi	r2,255
4000b3b4:	1480010e 	bge	r2,r18,4000b3bc <sw_inter_luma+0x488>
4000b3b8:	1025883a 	mov	r18,r2
  iffrac(0,1){
4000b3bc:	03000104 	movi	r12,4
4000b3c0:	bb00ff26 	beq	r23,r12,4000b7c0 <sw_inter_luma+0x88c>
	  return Mix(p(0,0),h);
  }
  iffrac(0,2){
4000b3c4:	00800204 	movi	r2,8
4000b3c8:	b8810126 	beq	r23,r2,4000b7d0 <sw_inter_luma+0x89c>
	  return h;
  }
  iffrac(0,3){
4000b3cc:	01c00304 	movi	r7,12
4000b3d0:	b9c10126 	beq	r23,r7,4000b7d8 <sw_inter_luma+0x8a4>
	  return Mix(h,p(0,1));
  }
  iffrac(1,1){
4000b3d4:	03000144 	movi	r12,5
4000b3d8:	bb010e26 	beq	r23,r12,4000b814 <sw_inter_luma+0x8e0>
4000b3dc:	d880a217 	ldw	r2,648(sp)
	  return Mix(b,h);
  }
  m=Filter(p(1,-2),p(1,-1),p(1,0),p(1,1),p(1,2),p(1,3));
4000b3e0:	79c00017 	ldw	r7,0(r15)
4000b3e4:	db00a417 	ldw	r12,656(sp)
4000b3e8:	10800017 	ldw	r2,0(r2)
4000b3ec:	63000017 	ldw	r12,0(r12)
4000b3f0:	d880b215 	stw	r2,712(sp)
4000b3f4:	38800524 	muli	r2,r7,20
4000b3f8:	a1c03017 	ldw	r7,192(r20)
4000b3fc:	61cf883a 	add	r7,r12,r7
4000b400:	3b000404 	addi	r12,r7,16
4000b404:	d9c0b217 	ldw	r7,712(sp)
4000b408:	6211883a 	add	r8,r12,r8
4000b40c:	4091883a 	add	r8,r8,r2
4000b410:	39c00164 	muli	r7,r7,5
4000b414:	d9c0a615 	stw	r7,664(sp)
4000b418:	b1c00017 	ldw	r7,0(r22)
4000b41c:	3b000164 	muli	r12,r7,5
4000b420:	d9c0a617 	ldw	r7,664(sp)
4000b424:	41d1c83a 	sub	r8,r8,r7
4000b428:	4311c83a 	sub	r8,r8,r12
4000b42c:	4010d17a 	srli	r8,r8,5
4000b430:	03003fc4 	movi	r12,255
4000b434:	da00a615 	stw	r8,664(sp)
4000b438:	6200010e 	bge	r12,r8,4000b440 <sw_inter_luma+0x50c>
4000b43c:	db00a615 	stw	r12,664(sp)
  iffrac(3,1){
4000b440:	020001c4 	movi	r8,7
4000b444:	ba00f826 	beq	r23,r8,4000b828 <sw_inter_luma+0x8f4>
	  return Mix(b,m);
  }
  s=Filter(p(-2,1),p(-1,1),p(0,1),p(1,1),p(2,1),p(3,1));
4000b448:	a1c01b17 	ldw	r7,108(r20)
4000b44c:	a2002017 	ldw	r8,128(r20)
4000b450:	a3001c17 	ldw	r12,112(r20)
4000b454:	d9c0ad15 	stw	r7,692(sp)
4000b458:	a1c01f17 	ldw	r7,124(r20)
4000b45c:	da00b115 	stw	r8,708(sp)
4000b460:	d9c0b015 	stw	r7,704(sp)
4000b464:	d9c0ad17 	ldw	r7,692(sp)
4000b468:	3a11883a 	add	r8,r7,r8
4000b46c:	61c00164 	muli	r7,r12,5
4000b470:	42000404 	addi	r8,r8,16
4000b474:	4295883a 	add	r10,r8,r10
4000b478:	d9c0ab15 	stw	r7,684(sp)
4000b47c:	d9c0b017 	ldw	r7,704(sp)
4000b480:	5095883a 	add	r10,r10,r2
4000b484:	d880ab17 	ldw	r2,684(sp)
4000b488:	3a000164 	muli	r8,r7,5
4000b48c:	01c03fc4 	movi	r7,255
4000b490:	5095c83a 	sub	r10,r10,r2
4000b494:	5215c83a 	sub	r10,r10,r8
4000b498:	5014d17a 	srli	r10,r10,5
4000b49c:	da80ab15 	stw	r10,684(sp)
4000b4a0:	3a80010e 	bge	r7,r10,4000b4a8 <sw_inter_luma+0x574>
4000b4a4:	d9c0ab15 	stw	r7,684(sp)
  iffrac(1,3){
4000b4a8:	02800344 	movi	r10,13
4000b4ac:	ba80e426 	beq	r23,r10,4000b840 <sw_inter_luma+0x90c>
	  return Mix(h,s);
  }
  iffrac(3,3){
4000b4b0:	008003c4 	movi	r2,15
4000b4b4:	b880e726 	beq	r23,r2,4000b854 <sw_inter_luma+0x920>
4000b4b8:	da80a817 	ldw	r10,672(sp)
4000b4bc:	a2000117 	ldw	r8,4(r20)
4000b4c0:	5305883a 	add	r2,r10,r12
4000b4c4:	a2802e17 	ldw	r10,184(r20)
4000b4c8:	a3002517 	ldw	r12,148(r20)
4000b4cc:	10800524 	muli	r2,r2,20
4000b4d0:	428f883a 	add	r7,r8,r10
4000b4d4:	a2000a17 	ldw	r8,40(r20)
4000b4d8:	39c00404 	addi	r7,r7,16
4000b4dc:	3885883a 	add	r2,r7,r2
4000b4e0:	42800164 	muli	r10,r8,5
4000b4e4:	62000164 	muli	r8,r12,5
4000b4e8:	1285c83a 	sub	r2,r2,r10
4000b4ec:	1205c83a 	sub	r2,r2,r8
4000b4f0:	100ed17a 	srli	r7,r2,5
4000b4f4:	02803fc4 	movi	r10,255
4000b4f8:	51c0c416 	blt	r10,r7,4000b80c <sw_inter_luma+0x8d8>
4000b4fc:	db00a717 	ldw	r12,668(sp)
4000b500:	da00ad17 	ldw	r8,692(sp)
4000b504:	a2800017 	ldw	r10,0(r20)
4000b508:	39fffee4 	muli	r7,r7,-5
4000b50c:	6205883a 	add	r2,r12,r8
4000b510:	10800524 	muli	r2,r2,20
4000b514:	a3002d17 	ldw	r12,180(r20)
4000b518:	d880a715 	stw	r2,668(sp)
4000b51c:	a0800917 	ldw	r2,36(r20)
4000b520:	5311883a 	add	r8,r10,r12
4000b524:	a2802417 	ldw	r10,144(r20)
4000b528:	10800164 	muli	r2,r2,5
4000b52c:	42000404 	addi	r8,r8,16
4000b530:	53000164 	muli	r12,r10,5
4000b534:	da80a717 	ldw	r10,668(sp)
4000b538:	d880a815 	stw	r2,672(sp)
4000b53c:	4285883a 	add	r2,r8,r10
4000b540:	da00a817 	ldw	r8,672(sp)
4000b544:	02803fc4 	movi	r10,255
4000b548:	d9c0a815 	stw	r7,672(sp)
4000b54c:	1205c83a 	sub	r2,r2,r8
4000b550:	1305c83a 	sub	r2,r2,r12
4000b554:	1010d17a 	srli	r8,r2,5
4000b558:	5200aa16 	blt	r10,r8,4000b804 <sw_inter_luma+0x8d0>
4000b55c:	d9c0a917 	ldw	r7,676(sp)
4000b560:	da80b017 	ldw	r10,704(sp)
4000b564:	a3000417 	ldw	r12,16(r20)
4000b568:	3a85883a 	add	r2,r7,r10
4000b56c:	a2803117 	ldw	r10,196(r20)
4000b570:	10800524 	muli	r2,r2,20
4000b574:	628f883a 	add	r7,r12,r10
4000b578:	a3000d17 	ldw	r12,52(r20)
4000b57c:	39c00404 	addi	r7,r7,16
4000b580:	3885883a 	add	r2,r7,r2
4000b584:	62800164 	muli	r10,r12,5
4000b588:	a3002817 	ldw	r12,160(r20)
4000b58c:	1295c83a 	sub	r10,r2,r10
4000b590:	63000164 	muli	r12,r12,5
4000b594:	90800524 	muli	r2,r18,20
4000b598:	5315c83a 	sub	r10,r10,r12
4000b59c:	db00a617 	ldw	r12,664(sp)
4000b5a0:	5014d17a 	srli	r10,r10,5
4000b5a4:	61c00524 	muli	r7,r12,20
4000b5a8:	db00a817 	ldw	r12,672(sp)
4000b5ac:	6211883a 	add	r8,r12,r8
4000b5b0:	4085883a 	add	r2,r8,r2
4000b5b4:	11cf883a 	add	r7,r2,r7
4000b5b8:	d9c0a815 	stw	r7,672(sp)
4000b5bc:	00803fc4 	movi	r2,255
4000b5c0:	12808e16 	blt	r2,r10,4000b7fc <sw_inter_luma+0x8c8>
4000b5c4:	d9c0aa17 	ldw	r7,680(sp)
4000b5c8:	da00b117 	ldw	r8,708(sp)
4000b5cc:	a3000517 	ldw	r12,20(r20)
4000b5d0:	3a05883a 	add	r2,r7,r8
4000b5d4:	a2003217 	ldw	r8,200(r20)
4000b5d8:	10800524 	muli	r2,r2,20
4000b5dc:	620f883a 	add	r7,r12,r8
4000b5e0:	a3000e17 	ldw	r12,56(r20)
4000b5e4:	39c00404 	addi	r7,r7,16
4000b5e8:	3885883a 	add	r2,r7,r2
4000b5ec:	63000164 	muli	r12,r12,5
4000b5f0:	db00a715 	stw	r12,668(sp)
4000b5f4:	a3002917 	ldw	r12,164(r20)
4000b5f8:	d9c0a717 	ldw	r7,668(sp)
4000b5fc:	62000164 	muli	r8,r12,5
4000b600:	11c5c83a 	sub	r2,r2,r7
4000b604:	51fffee4 	muli	r7,r10,-5
4000b608:	1205c83a 	sub	r2,r2,r8
4000b60c:	1004d17a 	srli	r2,r2,5
4000b610:	da00a817 	ldw	r8,672(sp)
4000b614:	02803fc4 	movi	r10,255
4000b618:	41cf883a 	add	r7,r8,r7
4000b61c:	50807516 	blt	r10,r2,4000b7f4 <sw_inter_luma+0x8c0>
4000b620:	3885883a 	add	r2,r7,r2
4000b624:	10800404 	addi	r2,r2,16
4000b628:	1005d17a 	srai	r2,r2,5
4000b62c:	03003fc4 	movi	r12,255
4000b630:	60806e16 	blt	r12,r2,4000b7ec <sw_inter_luma+0x8b8>
4000b634:	10009116 	blt	r2,zero,4000b87c <sw_inter_luma+0x948>
  cc=Filter(p(-2,-2),p(-2,-1),p(-2,0),p(-2,1),p(-2,2),p(-2,3));
  dd=Filter(p(-1,-2),p(-1,-1),p(-1,0),p(-1,1),p(-1,2),p(-1,3));
  ee=Filter(p(2,-2),p(2,-1),p(2,0),p(2,1),p(2,2),p(2,3));
  ff=Filter(p(3,-2),p(3,-1),p(3,0),p(3,1),p(3,2),p(3,3));
  j=Filter(cc,dd,h,m,ee,ff);
  iffrac(2,2){
4000b638:	01c00284 	movi	r7,10
4000b63c:	b9fef926 	beq	r23,r7,4000b224 <__alt_data_end+0xc000b224>
	  return j;
  }
  iffrac(2,1){
4000b640:	02000184 	movi	r8,6
4000b644:	ba008f26 	beq	r23,r8,4000b884 <sw_inter_luma+0x950>
	  return Mix(b,j);
  }
  iffrac(1,2){
4000b648:	03000244 	movi	r12,9
4000b64c:	bb008726 	beq	r23,r12,4000b86c <sw_inter_luma+0x938>
	  return Mix(h,j);
  }
  iffrac(2,3){
4000b650:	04800384 	movi	r18,14
4000b654:	bc809026 	beq	r23,r18,4000b898 <sw_inter_luma+0x964>
	  return Mix(j,s);
  }
  iffrac(3,2){
4000b658:	020002c4 	movi	r8,11
4000b65c:	ba009326 	beq	r23,r8,4000b8ac <sw_inter_luma+0x978>
4000b660:	00bfe004 	movi	r2,-128
4000b664:	003eef06 	br	4000b224 <__alt_data_end+0xc000b224>
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000b668:	10c5883a 	add	r2,r2,r3
4000b66c:	10bfffc3 	ldbu	r2,-1(r2)
4000b670:	70800015 	stw	r2,0(r14)
4000b674:	003eb006 	br	4000b138 <__alt_data_end+0xc000b138>
4000b678:	1421883a 	add	r16,r2,r16
4000b67c:	80ffffc3 	ldbu	r3,-1(r16)
4000b680:	60c00015 	stw	r3,0(r12)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000b684:	f83ea70e 	bge	ra,zero,4000b124 <__alt_data_end+0xc000b124>
4000b688:	10800003 	ldbu	r2,0(r2)
4000b68c:	70800015 	stw	r2,0(r14)
4000b690:	003ea906 	br	4000b138 <__alt_data_end+0xc000b138>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000b694:	1421883a 	add	r16,r2,r16
4000b698:	843fffc3 	ldbu	r16,-1(r16)
4000b69c:	5c000015 	stw	r16,0(r11)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000b6a0:	a83e990e 	bge	r21,zero,4000b108 <__alt_data_end+0xc000b108>
4000b6a4:	10c00003 	ldbu	r3,0(r2)
4000b6a8:	60c00015 	stw	r3,0(r12)
4000b6ac:	003e9c06 	br	4000b120 <__alt_data_end+0xc000b120>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000b6b0:	1421883a 	add	r16,r2,r16
4000b6b4:	843fffc3 	ldbu	r16,-1(r16)
4000b6b8:	54000015 	stw	r16,0(r10)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000b6bc:	903e8c0e 	bge	r18,zero,4000b0f0 <__alt_data_end+0xc000b0f0>
4000b6c0:	14000003 	ldbu	r16,0(r2)
4000b6c4:	5c000015 	stw	r16,0(r11)
4000b6c8:	003e8e06 	br	4000b104 <__alt_data_end+0xc000b104>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000b6cc:	1421883a 	add	r16,r2,r16
4000b6d0:	843fffc3 	ldbu	r16,-1(r16)
4000b6d4:	4c000015 	stw	r16,0(r9)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000b6d8:	983e7f0e 	bge	r19,zero,4000b0d8 <__alt_data_end+0xc000b0d8>
4000b6dc:	14000003 	ldbu	r16,0(r2)
4000b6e0:	54000015 	stw	r16,0(r10)
4000b6e4:	003e8106 	br	4000b0ec <__alt_data_end+0xc000b0ec>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000b6e8:	1421883a 	add	r16,r2,r16
4000b6ec:	843fffc3 	ldbu	r16,-1(r16)
4000b6f0:	44000015 	stw	r16,0(r8)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000b6f4:	a03e720e 	bge	r20,zero,4000b0c0 <__alt_data_end+0xc000b0c0>
4000b6f8:	14000003 	ldbu	r16,0(r2)
4000b6fc:	4c000015 	stw	r16,0(r9)
4000b700:	003e7406 	br	4000b0d4 <__alt_data_end+0xc000b0d4>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000b704:	1421883a 	add	r16,r2,r16
4000b708:	843fffc3 	ldbu	r16,-1(r16)
4000b70c:	3c000015 	stw	r16,0(r7)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000b710:	b03e640e 	bge	r22,zero,4000b0a4 <__alt_data_end+0xc000b0a4>
4000b714:	14000003 	ldbu	r16,0(r2)
4000b718:	44000015 	stw	r16,0(r8)
4000b71c:	003e6706 	br	4000b0bc <__alt_data_end+0xc000b0bc>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000b720:	1421883a 	add	r16,r2,r16
4000b724:	843fffc3 	ldbu	r16,-1(r16)
4000b728:	34000015 	stw	r16,0(r6)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000b72c:	783e560e 	bge	r15,zero,4000b088 <__alt_data_end+0xc000b088>
4000b730:	14000003 	ldbu	r16,0(r2)
4000b734:	3c000015 	stw	r16,0(r7)
4000b738:	003e5906 	br	4000b0a0 <__alt_data_end+0xc000b0a0>
      if(sx>=ref->Lwidth) b.p[y][x]=L_pixel(ref,ref->Lwidth-1,sy);
4000b73c:	dc40a317 	ldw	r17,652(sp)
4000b740:	1c47383a 	mul	r3,r3,r17
4000b744:	dc40a217 	ldw	r17,648(sp)
4000b748:	88c5883a 	add	r2,r17,r3
4000b74c:	1421883a 	add	r16,r2,r16
4000b750:	843fffc3 	ldbu	r16,-1(r16)
4000b754:	6c000015 	stw	r16,0(r13)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Lheight) sy=ref->Lheight-1;
    for(x=0; x<9; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=L_pixel(ref,0,sy); else
4000b758:	e03e450e 	bge	fp,zero,4000b070 <__alt_data_end+0xc000b070>
4000b75c:	14000003 	ldbu	r16,0(r2)
4000b760:	34000015 	stw	r16,0(r6)
4000b764:	003e4706 	br	4000b084 <__alt_data_end+0xc000b084>
4000b768:	d880a317 	ldw	r2,652(sp)
4000b76c:	dc00a217 	ldw	r16,648(sp)
4000b770:	1887383a 	mul	r3,r3,r2
4000b774:	80c5883a 	add	r2,r16,r3
4000b778:	14000003 	ldbu	r16,0(r2)
4000b77c:	6c000015 	stw	r16,0(r13)
4000b780:	003e3a06 	br	4000b06c <__alt_data_end+0xc000b06c>
4000b784:	0007883a 	mov	r3,zero
4000b788:	003e2a06 	br	4000b034 <__alt_data_end+0xc000b034>
4000b78c:	dc80a317 	ldw	r18,652(sp)
4000b790:	3b0f883a 	add	r7,r7,r12
4000b794:	3c85883a 	add	r2,r7,r18
4000b798:	1304d83a 	srl	r2,r2,r12
4000b79c:	003ea106 	br	4000b224 <__alt_data_end+0xc000b224>
4000b7a0:	d9c0a317 	ldw	r7,652(sp)
4000b7a4:	3805883a 	mov	r2,r7
4000b7a8:	003e9e06 	br	4000b224 <__alt_data_end+0xc000b224>
4000b7ac:	dc80a317 	ldw	r18,652(sp)
4000b7b0:	52800044 	addi	r10,r10,1
4000b7b4:	5485883a 	add	r2,r10,r18
4000b7b8:	1004d07a 	srli	r2,r2,1
4000b7bc:	003e9906 	br	4000b224 <__alt_data_end+0xc000b224>
4000b7c0:	39c00044 	addi	r7,r7,1
4000b7c4:	3c85883a 	add	r2,r7,r18
4000b7c8:	1004d07a 	srli	r2,r2,1
4000b7cc:	003e9506 	br	4000b224 <__alt_data_end+0xc000b224>
4000b7d0:	9005883a 	mov	r2,r18
4000b7d4:	003e9306 	br	4000b224 <__alt_data_end+0xc000b224>
4000b7d8:	da00ad17 	ldw	r8,692(sp)
4000b7dc:	43000044 	addi	r12,r8,1
4000b7e0:	6485883a 	add	r2,r12,r18
4000b7e4:	1004d07a 	srli	r2,r2,1
4000b7e8:	003e8e06 	br	4000b224 <__alt_data_end+0xc000b224>
4000b7ec:	6005883a 	mov	r2,r12
4000b7f0:	003f9106 	br	4000b638 <__alt_data_end+0xc000b638>
4000b7f4:	5005883a 	mov	r2,r10
4000b7f8:	003f8906 	br	4000b620 <__alt_data_end+0xc000b620>
4000b7fc:	1015883a 	mov	r10,r2
4000b800:	003f7006 	br	4000b5c4 <__alt_data_end+0xc000b5c4>
4000b804:	5011883a 	mov	r8,r10
4000b808:	003f5406 	br	4000b55c <__alt_data_end+0xc000b55c>
4000b80c:	500f883a 	mov	r7,r10
4000b810:	003f3a06 	br	4000b4fc <__alt_data_end+0xc000b4fc>
4000b814:	d9c0a317 	ldw	r7,652(sp)
4000b818:	3c85883a 	add	r2,r7,r18
4000b81c:	10800044 	addi	r2,r2,1
4000b820:	1004d07a 	srli	r2,r2,1
4000b824:	003e7f06 	br	4000b224 <__alt_data_end+0xc000b224>
4000b828:	da80a317 	ldw	r10,652(sp)
4000b82c:	db00a617 	ldw	r12,664(sp)
4000b830:	5305883a 	add	r2,r10,r12
4000b834:	10800044 	addi	r2,r2,1
4000b838:	1004d07a 	srli	r2,r2,1
4000b83c:	003e7906 	br	4000b224 <__alt_data_end+0xc000b224>
4000b840:	db00ab17 	ldw	r12,684(sp)
4000b844:	6485883a 	add	r2,r12,r18
4000b848:	10800044 	addi	r2,r2,1
4000b84c:	1004d07a 	srli	r2,r2,1
4000b850:	003e7406 	br	4000b224 <__alt_data_end+0xc000b224>
4000b854:	d9c0ab17 	ldw	r7,684(sp)
4000b858:	da00a617 	ldw	r8,664(sp)
4000b85c:	3a05883a 	add	r2,r7,r8
4000b860:	10800044 	addi	r2,r2,1
4000b864:	1004d07a 	srli	r2,r2,1
4000b868:	003e6e06 	br	4000b224 <__alt_data_end+0xc000b224>
4000b86c:	1485883a 	add	r2,r2,r18
4000b870:	10800044 	addi	r2,r2,1
4000b874:	1004d07a 	srli	r2,r2,1
4000b878:	003e6a06 	br	4000b224 <__alt_data_end+0xc000b224>
4000b87c:	0005883a 	mov	r2,zero
4000b880:	003f6d06 	br	4000b638 <__alt_data_end+0xc000b638>
4000b884:	da80a317 	ldw	r10,652(sp)
4000b888:	1285883a 	add	r2,r2,r10
4000b88c:	10800044 	addi	r2,r2,1
4000b890:	1004d07a 	srli	r2,r2,1
4000b894:	003e6306 	br	4000b224 <__alt_data_end+0xc000b224>
4000b898:	d9c0ab17 	ldw	r7,684(sp)
4000b89c:	11c5883a 	add	r2,r2,r7
4000b8a0:	10800044 	addi	r2,r2,1
4000b8a4:	1004d07a 	srli	r2,r2,1
4000b8a8:	003e5e06 	br	4000b224 <__alt_data_end+0xc000b224>
4000b8ac:	da80a617 	ldw	r10,664(sp)
4000b8b0:	1285883a 	add	r2,r2,r10
4000b8b4:	10800044 	addi	r2,r2,1
4000b8b8:	1004d07a 	srli	r2,r2,1
4000b8bc:	003e5906 	br	4000b224 <__alt_data_end+0xc000b224>

4000b8c0 <sw_inter_chroma>:
      L_pixel(this,x+org_x,y+org_y)=L_MC_get_sub(&(b.p[y+2][x+2]),frac);
}

void sw_inter_chroma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
4000b8c0:	deffef04 	addi	sp,sp,-68
4000b8c4:	ddc00e15 	stw	r23,56(sp)
4000b8c8:	ddc01217 	ldw	r23,72(sp)
  int x,y,iCbCr;
  org_x>>=1; org_y>>=1;
4000b8cc:	380fd07a 	srai	r7,r7,1
      L_pixel(this,x+org_x,y+org_y)=L_MC_get_sub(&(b.p[y+2][x+2]),frac);
}

void sw_inter_chroma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
4000b8d0:	dc800915 	stw	r18,36(sp)
4000b8d4:	b807d0fa 	srai	r3,r23,3
4000b8d8:	dfc01015 	stw	ra,64(sp)
4000b8dc:	df000f15 	stw	fp,60(sp)
4000b8e0:	19c7883a 	add	r3,r3,r7
4000b8e4:	18800084 	addi	r2,r3,2
4000b8e8:	dd800d15 	stw	r22,52(sp)
4000b8ec:	dd400c15 	stw	r21,48(sp)
4000b8f0:	dd000b15 	stw	r20,44(sp)
4000b8f4:	dcc00a15 	stw	r19,40(sp)
4000b8f8:	dc400815 	stw	r17,32(sp)
4000b8fc:	dc000715 	stw	r16,28(sp)
4000b900:	d8800315 	stw	r2,12(sp)
4000b904:	dc801117 	ldw	r18,68(sp)
  int x,y,iCbCr;
  org_x>>=1; org_y>>=1;
4000b908:	300dd07a 	srai	r6,r6,1
4000b90c:	1000fc16 	blt	r2,zero,4000bd00 <sw_inter_chroma+0x440>
4000b910:	9023d0fa 	srai	r17,r18,3
4000b914:	b88001cc 	andi	r2,r23,7
4000b918:	948001cc 	andi	r18,r18,7
4000b91c:	05000204 	movi	r20,8
4000b920:	1a000044 	addi	r8,r3,1
4000b924:	32c00044 	addi	r11,r6,1
4000b928:	3b000044 	addi	r12,r7,1
4000b92c:	a4afc83a 	sub	r23,r20,r18
4000b930:	da000115 	stw	r8,4(sp)
4000b934:	a0a9c83a 	sub	r20,r20,r2
4000b938:	dac00415 	stw	r11,16(sp)
4000b93c:	db000515 	stw	r12,20(sp)
4000b940:	a5f9383a 	mul	fp,r20,r23
4000b944:	89a3883a 	add	r17,r17,r6
4000b948:	a4a9383a 	mul	r20,r20,r18
4000b94c:	15ef383a 	mul	r23,r2,r23
4000b950:	14a5383a 	mul	r18,r2,r18
4000b954:	4000ee16 	blt	r8,zero,4000bd10 <sw_inter_chroma+0x450>
4000b958:	d8c00215 	stw	r3,8(sp)
4000b95c:	8d400044 	addi	r21,r17,1
4000b960:	8d800084 	addi	r22,r17,2
4000b964:	1800e816 	blt	r3,zero,4000bd08 <sw_inter_chroma+0x448>
4000b968:	2b800704 	addi	r14,r5,28
4000b96c:	27c00904 	addi	ra,r4,36
4000b970:	24c00704 	addi	r19,r4,28
4000b974:	db800015 	stw	r14,0(sp)
4000b978:	dfc00615 	stw	ra,24(sp)
  C_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<3; ++y) {
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
4000b97c:	2a400417 	ldw	r9,16(r5)
4000b980:	d8800217 	ldw	r2,8(sp)
4000b984:	12400116 	blt	r2,r9,4000b98c <sw_inter_chroma+0xcc>
4000b988:	48bfffc4 	addi	r2,r9,-1
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000b98c:	8800d116 	blt	r17,zero,4000bcd4 <sw_inter_chroma+0x414>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
4000b990:	28c00317 	ldw	r3,12(r5)
4000b994:	2b800517 	ldw	r14,20(r5)
4000b998:	88c0bc16 	blt	r17,r3,4000bc8c <sw_inter_chroma+0x3cc>
4000b99c:	da000017 	ldw	r8,0(sp)
4000b9a0:	1385383a 	mul	r2,r2,r14
4000b9a4:	43400017 	ldw	r13,0(r8)
4000b9a8:	6891883a 	add	r8,r13,r2
4000b9ac:	40c7883a 	add	r3,r8,r3
4000b9b0:	1bffffc3 	ldbu	r15,-1(r3)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000b9b4:	a800bc16 	blt	r21,zero,4000bca8 <sw_inter_chroma+0x3e8>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
4000b9b8:	28c00317 	ldw	r3,12(r5)
4000b9bc:	a8c0ac16 	blt	r21,r3,4000bc70 <sw_inter_chroma+0x3b0>
4000b9c0:	6891883a 	add	r8,r13,r2
4000b9c4:	40c7883a 	add	r3,r8,r3
4000b9c8:	1b3fffc3 	ldbu	r12,-1(r3)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000b9cc:	b000ac16 	blt	r22,zero,4000bc80 <sw_inter_chroma+0x3c0>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
4000b9d0:	28c00317 	ldw	r3,12(r5)
4000b9d4:	b0c0b716 	blt	r22,r3,4000bcb4 <sw_inter_chroma+0x3f4>
4000b9d8:	6885883a 	add	r2,r13,r2
4000b9dc:	10c5883a 	add	r2,r2,r3
4000b9e0:	123fffc3 	ldbu	r8,-1(r2)
  C_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<3; ++y) {
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
4000b9e4:	dfc00117 	ldw	ra,4(sp)
4000b9e8:	fa407b16 	blt	ra,r9,4000bbd8 <sw_inter_chroma+0x318>
4000b9ec:	48ffffc4 	addi	r3,r9,-1
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000b9f0:	88007b16 	blt	r17,zero,4000bbe0 <sw_inter_chroma+0x320>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
4000b9f4:	28800317 	ldw	r2,12(r5)
4000b9f8:	70c7383a 	mul	r3,r14,r3
4000b9fc:	88809816 	blt	r17,r2,4000bc60 <sw_inter_chroma+0x3a0>
4000ba00:	68d5883a 	add	r10,r13,r3
4000ba04:	5085883a 	add	r2,r10,r2
4000ba08:	12ffffc3 	ldbu	r11,-1(r2)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000ba0c:	a8007816 	blt	r21,zero,4000bbf0 <sw_inter_chroma+0x330>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
4000ba10:	28800317 	ldw	r2,12(r5)
4000ba14:	a8808e16 	blt	r21,r2,4000bc50 <sw_inter_chroma+0x390>
4000ba18:	68d5883a 	add	r10,r13,r3
4000ba1c:	5085883a 	add	r2,r10,r2
4000ba20:	10bfffc3 	ldbu	r2,-1(r2)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000ba24:	b0007516 	blt	r22,zero,4000bbfc <sw_inter_chroma+0x33c>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
4000ba28:	2a800317 	ldw	r10,12(r5)
4000ba2c:	b2808416 	blt	r22,r10,4000bc40 <sw_inter_chroma+0x380>
4000ba30:	68c7883a 	add	r3,r13,r3
4000ba34:	1a87883a 	add	r3,r3,r10
4000ba38:	1abfffc3 	ldbu	r10,-1(r3)
  C_MC_temp_block b;
  int x,y,sx,sy;
  for(y=0; y<3; ++y) {
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
4000ba3c:	d8c00317 	ldw	r3,12(sp)
4000ba40:	1a400116 	blt	r3,r9,4000ba48 <sw_inter_chroma+0x188>
4000ba44:	48ffffc4 	addi	r3,r9,-1
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000ba48:	8800a916 	blt	r17,zero,4000bcf0 <sw_inter_chroma+0x430>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
4000ba4c:	2c000317 	ldw	r16,12(r5)
4000ba50:	70c7383a 	mul	r3,r14,r3
4000ba54:	8c007316 	blt	r17,r16,4000bc24 <sw_inter_chroma+0x364>
4000ba58:	68d3883a 	add	r9,r13,r3
4000ba5c:	4c21883a 	add	r16,r9,r16
4000ba60:	843fffc3 	ldbu	r16,-1(r16)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000ba64:	a8007316 	blt	r21,zero,4000bc34 <sw_inter_chroma+0x374>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
4000ba68:	2a400317 	ldw	r9,12(r5)
4000ba6c:	aa406616 	blt	r21,r9,4000bc08 <sw_inter_chroma+0x348>
4000ba70:	68dd883a 	add	r14,r13,r3
4000ba74:	7253883a 	add	r9,r14,r9
4000ba78:	4a7fffc3 	ldbu	r9,-1(r9)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000ba7c:	b0006616 	blt	r22,zero,4000bc18 <sw_inter_chroma+0x358>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
4000ba80:	2b800317 	ldw	r14,12(r5)
4000ba84:	b3808f16 	blt	r22,r14,4000bcc4 <sw_inter_chroma+0x404>
4000ba88:	68c7883a 	add	r3,r13,r3
4000ba8c:	1b87883a 	add	r3,r3,r14
4000ba90:	18ffffc3 	ldbu	r3,-1(r3)
    C_MC_temp_block b=GetCMCTempBlock(ref,iCbCr,
                      org_x+(mvx>>3),org_y+(mvy>>3));
    int xFrac=(mvx&7), yFrac=(mvy&7);
    for(y=0; y<2; ++y)
      for(x=0; x<2; ++x)
        C_pixel(this,iCbCr,x+org_x,y+org_y)=
4000ba94:	7f1f383a 	mul	r15,r15,fp
4000ba98:	a31d383a 	mul	r14,r20,r12
4000ba9c:	baff383a 	mul	ra,r23,r11
4000baa0:	7bc00804 	addi	r15,r15,32
4000baa4:	7b9d883a 	add	r14,r15,r14
4000baa8:	909b383a 	mul	r13,r18,r2
4000baac:	77ff883a 	add	ra,r14,ra
4000bab0:	23800517 	ldw	r14,20(r4)
4000bab4:	fb5b883a 	add	r13,ra,r13
4000bab8:	9fc00017 	ldw	ra,0(r19)
4000babc:	3b9f383a 	mul	r15,r7,r14
4000bac0:	681ad1ba 	srli	r13,r13,6
4000bac4:	f99d883a 	add	r14,ra,r6
4000bac8:	e319383a 	mul	r12,fp,r12
4000bacc:	73df883a 	add	r15,r14,r15
4000bad0:	a211383a 	mul	r8,r20,r8
4000bad4:	7b400005 	stb	r13,0(r15)
4000bad8:	b89d383a 	mul	r14,r23,r2
4000badc:	23c00517 	ldw	r15,20(r4)
4000bae0:	929b383a 	mul	r13,r18,r10
4000bae4:	63000804 	addi	r12,r12,32
4000bae8:	6219883a 	add	r12,r12,r8
4000baec:	639d883a 	add	r14,r12,r14
4000baf0:	9a000017 	ldw	r8,0(r19)
4000baf4:	db000417 	ldw	r12,16(sp)
4000baf8:	735b883a 	add	r13,r14,r13
4000bafc:	3bdf383a 	mul	r15,r7,r15
4000bb00:	681ad1ba 	srli	r13,r13,6
4000bb04:	4311883a 	add	r8,r8,r12
4000bb08:	e2d7383a 	mul	r11,fp,r11
4000bb0c:	a099383a 	mul	r12,r20,r2
4000bb10:	43df883a 	add	r15,r8,r15
4000bb14:	7b400005 	stb	r13,0(r15)
4000bb18:	bc21383a 	mul	r16,r23,r16
4000bb1c:	23400517 	ldw	r13,20(r4)
4000bb20:	9251383a 	mul	r8,r18,r9
4000bb24:	db800517 	ldw	r14,20(sp)
4000bb28:	5ac00804 	addi	r11,r11,32
4000bb2c:	5b17883a 	add	r11,r11,r12
4000bb30:	5c21883a 	add	r16,r11,r16
4000bb34:	9b000017 	ldw	r12,0(r19)
4000bb38:	735b383a 	mul	r13,r14,r13
4000bb3c:	8211883a 	add	r8,r16,r8
4000bb40:	4010d1ba 	srli	r8,r8,6
4000bb44:	6197883a 	add	r11,r12,r6
4000bb48:	e085383a 	mul	r2,fp,r2
4000bb4c:	5b5b883a 	add	r13,r11,r13
4000bb50:	a295383a 	mul	r10,r20,r10
4000bb54:	6a000005 	stb	r8,0(r13)
4000bb58:	ba53383a 	mul	r9,r23,r9
4000bb5c:	22000517 	ldw	r8,20(r4)
4000bb60:	10800804 	addi	r2,r2,32
4000bb64:	90c7383a 	mul	r3,r18,r3
4000bb68:	1285883a 	add	r2,r2,r10
4000bb6c:	9ac00017 	ldw	r11,0(r19)
4000bb70:	1253883a 	add	r9,r2,r9
4000bb74:	dfc00417 	ldw	ra,16(sp)
4000bb78:	7211383a 	mul	r8,r14,r8
4000bb7c:	48c7883a 	add	r3,r9,r3
4000bb80:	1806d1ba 	srli	r3,r3,6
4000bb84:	d8800017 	ldw	r2,0(sp)
4000bb88:	5fd7883a 	add	r11,r11,ra
4000bb8c:	5a11883a 	add	r8,r11,r8
4000bb90:	40c00005 	stb	r3,0(r8)
void sw_inter_chroma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy) {
  int x,y,iCbCr;
  org_x>>=1; org_y>>=1;
  for(iCbCr=0; iCbCr<2; ++iCbCr) {
4000bb94:	d8c00617 	ldw	r3,24(sp)
4000bb98:	10800104 	addi	r2,r2,4
4000bb9c:	9cc00104 	addi	r19,r19,4
4000bba0:	d8800015 	stw	r2,0(sp)
4000bba4:	1cff751e 	bne	r3,r19,4000b97c <__alt_data_end+0xc000b97c>
              xFrac *(8-yFrac)*b.p[y]  [x+1]+
           (8-xFrac)*   yFrac *b.p[y+1][x]  +
              xFrac *   yFrac *b.p[y+1][x+1]+
         32)>>6;
  }
}
4000bba8:	dfc01017 	ldw	ra,64(sp)
4000bbac:	df000f17 	ldw	fp,60(sp)
4000bbb0:	ddc00e17 	ldw	r23,56(sp)
4000bbb4:	dd800d17 	ldw	r22,52(sp)
4000bbb8:	dd400c17 	ldw	r21,48(sp)
4000bbbc:	dd000b17 	ldw	r20,44(sp)
4000bbc0:	dcc00a17 	ldw	r19,40(sp)
4000bbc4:	dc800917 	ldw	r18,36(sp)
4000bbc8:	dc400817 	ldw	r17,32(sp)
4000bbcc:	dc000717 	ldw	r16,28(sp)
4000bbd0:	dec01104 	addi	sp,sp,68
4000bbd4:	f800283a 	ret
4000bbd8:	f807883a 	mov	r3,ra
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000bbdc:	883f850e 	bge	r17,zero,4000b9f4 <__alt_data_end+0xc000b9f4>
4000bbe0:	70c7383a 	mul	r3,r14,r3
4000bbe4:	68c5883a 	add	r2,r13,r3
4000bbe8:	12c00003 	ldbu	r11,0(r2)
4000bbec:	a83f880e 	bge	r21,zero,4000ba10 <__alt_data_end+0xc000ba10>
4000bbf0:	68c5883a 	add	r2,r13,r3
4000bbf4:	10800003 	ldbu	r2,0(r2)
4000bbf8:	b03f8b0e 	bge	r22,zero,4000ba28 <__alt_data_end+0xc000ba28>
4000bbfc:	68c7883a 	add	r3,r13,r3
4000bc00:	1a800003 	ldbu	r10,0(r3)
4000bc04:	003f8d06 	br	4000ba3c <__alt_data_end+0xc000ba3c>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
                     else b.p[y][x]=C_pixel(ref,iCbCr,sx,sy);
4000bc08:	6d53883a 	add	r9,r13,r21
4000bc0c:	48d3883a 	add	r9,r9,r3
4000bc10:	4a400003 	ldbu	r9,0(r9)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000bc14:	b03f9a0e 	bge	r22,zero,4000ba80 <__alt_data_end+0xc000ba80>
4000bc18:	68c7883a 	add	r3,r13,r3
4000bc1c:	18c00003 	ldbu	r3,0(r3)
4000bc20:	003f9c06 	br	4000ba94 <__alt_data_end+0xc000ba94>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
                     else b.p[y][x]=C_pixel(ref,iCbCr,sx,sy);
4000bc24:	6c53883a 	add	r9,r13,r17
4000bc28:	48d3883a 	add	r9,r9,r3
4000bc2c:	4c000003 	ldbu	r16,0(r9)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000bc30:	a83f8d0e 	bge	r21,zero,4000ba68 <__alt_data_end+0xc000ba68>
4000bc34:	68d3883a 	add	r9,r13,r3
4000bc38:	4a400003 	ldbu	r9,0(r9)
4000bc3c:	003f8f06 	br	4000ba7c <__alt_data_end+0xc000ba7c>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
                     else b.p[y][x]=C_pixel(ref,iCbCr,sx,sy);
4000bc40:	6d95883a 	add	r10,r13,r22
4000bc44:	50c7883a 	add	r3,r10,r3
4000bc48:	1a800003 	ldbu	r10,0(r3)
4000bc4c:	003f7b06 	br	4000ba3c <__alt_data_end+0xc000ba3c>
4000bc50:	6d45883a 	add	r2,r13,r21
4000bc54:	10c5883a 	add	r2,r2,r3
4000bc58:	10800003 	ldbu	r2,0(r2)
4000bc5c:	003f7106 	br	4000ba24 <__alt_data_end+0xc000ba24>
4000bc60:	6c45883a 	add	r2,r13,r17
4000bc64:	10c5883a 	add	r2,r2,r3
4000bc68:	12c00003 	ldbu	r11,0(r2)
4000bc6c:	003f6706 	br	4000ba0c <__alt_data_end+0xc000ba0c>
4000bc70:	6d47883a 	add	r3,r13,r21
4000bc74:	1887883a 	add	r3,r3,r2
4000bc78:	1b000003 	ldbu	r12,0(r3)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000bc7c:	b03f540e 	bge	r22,zero,4000b9d0 <__alt_data_end+0xc000b9d0>
4000bc80:	6885883a 	add	r2,r13,r2
4000bc84:	12000003 	ldbu	r8,0(r2)
4000bc88:	003f5606 	br	4000b9e4 <__alt_data_end+0xc000b9e4>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
                     else b.p[y][x]=C_pixel(ref,iCbCr,sx,sy);
4000bc8c:	dac00017 	ldw	r11,0(sp)
4000bc90:	1385383a 	mul	r2,r2,r14
4000bc94:	5b400017 	ldw	r13,0(r11)
4000bc98:	6c47883a 	add	r3,r13,r17
4000bc9c:	1887883a 	add	r3,r3,r2
4000bca0:	1bc00003 	ldbu	r15,0(r3)
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000bca4:	a83f440e 	bge	r21,zero,4000b9b8 <__alt_data_end+0xc000b9b8>
4000bca8:	6887883a 	add	r3,r13,r2
4000bcac:	1b000003 	ldbu	r12,0(r3)
4000bcb0:	003f4606 	br	4000b9cc <__alt_data_end+0xc000b9cc>
      if(sx>=ref->Cwidth) b.p[y][x]=C_pixel(ref,iCbCr,ref->Cwidth-1,sy);
                     else b.p[y][x]=C_pixel(ref,iCbCr,sx,sy);
4000bcb4:	6d87883a 	add	r3,r13,r22
4000bcb8:	1885883a 	add	r2,r3,r2
4000bcbc:	12000003 	ldbu	r8,0(r2)
4000bcc0:	003f4806 	br	4000b9e4 <__alt_data_end+0xc000b9e4>
4000bcc4:	6d9b883a 	add	r13,r13,r22
4000bcc8:	68db883a 	add	r13,r13,r3
4000bccc:	68c00003 	ldbu	r3,0(r13)
4000bcd0:	003f7006 	br	4000ba94 <__alt_data_end+0xc000ba94>
    sy=org_y+y;
    if(sy<0) sy=0;
    if(sy>=ref->Cheight) sy=ref->Cheight-1;
    for(x=0; x<3; ++x) {
      sx=org_x+x;
      if(sx<0)            b.p[y][x]=C_pixel(ref,iCbCr,0,sy); else
4000bcd4:	2b800517 	ldw	r14,20(r5)
4000bcd8:	db000017 	ldw	r12,0(sp)
4000bcdc:	1385383a 	mul	r2,r2,r14
4000bce0:	63400017 	ldw	r13,0(r12)
4000bce4:	6887883a 	add	r3,r13,r2
4000bce8:	1bc00003 	ldbu	r15,0(r3)
4000bcec:	003f3106 	br	4000b9b4 <__alt_data_end+0xc000b9b4>
4000bcf0:	70c7383a 	mul	r3,r14,r3
4000bcf4:	68d3883a 	add	r9,r13,r3
4000bcf8:	4c000003 	ldbu	r16,0(r9)
4000bcfc:	003f5906 	br	4000ba64 <__alt_data_end+0xc000ba64>
4000bd00:	d8000315 	stw	zero,12(sp)
4000bd04:	003f0206 	br	4000b910 <__alt_data_end+0xc000b910>
4000bd08:	d8000215 	stw	zero,8(sp)
4000bd0c:	003f1606 	br	4000b968 <__alt_data_end+0xc000b968>
4000bd10:	d8000115 	stw	zero,4(sp)
4000bd14:	003f1006 	br	4000b958 <__alt_data_end+0xc000b958>

4000bd18 <MotionCompensateMB_7>:
		                  frame *ref,
                          int mvx[16],
						  int mvy[16],
                          int org_x,
                          int org_y
                          ) {
4000bd18:	deffe404 	addi	sp,sp,-112
4000bd1c:	d8c01c17 	ldw	r3,112(sp)
    int chroma_id_1 = 0;
    int luma_0_hw_x,   luma_0_hw_y,   waiting_hw_luma_0 = 0;
    int luma_1_hw_x,   luma_1_hw_y,   waiting_hw_luma_1 = 0;
    int chroma_0_hw_x, chroma_0_hw_y, waiting_hw_chroma_0 = 0;

    for(y=0; y<4; ++y){
4000bd20:	d8000415 	stw	zero,16(sp)
		                  frame *ref,
                          int mvx[16],
						  int mvy[16],
                          int org_x,
                          int org_y
                          ) {
4000bd24:	dd401715 	stw	r21,92(sp)
4000bd28:	d8c00815 	stw	r3,32(sp)
4000bd2c:	d8c01d17 	ldw	r3,116(sp)
    int x,y;
    int luma_id_0 = 1;
    int luma_id_1 = 1;
    int chroma_id_0 = 1;
4000bd30:	05400044 	movi	r21,1
		                  frame *ref,
                          int mvx[16],
						  int mvy[16],
                          int org_x,
                          int org_y
                          ) {
4000bd34:	df001a15 	stw	fp,104(sp)
4000bd38:	d8c01115 	stw	r3,68(sp)
4000bd3c:	d8c00417 	ldw	r3,16(sp)
4000bd40:	ddc01915 	stw	r23,100(sp)
4000bd44:	dfc01b15 	stw	ra,108(sp)
4000bd48:	dd801815 	stw	r22,96(sp)
4000bd4c:	dd001615 	stw	r20,88(sp)
4000bd50:	dcc01515 	stw	r19,84(sp)
4000bd54:	dc801415 	stw	r18,80(sp)
4000bd58:	dc401315 	stw	r17,76(sp)
4000bd5c:	dc001215 	stw	r16,72(sp)
4000bd60:	d9000a15 	stw	r4,40(sp)
4000bd64:	2839883a 	mov	fp,r5
4000bd68:	d9800d15 	stw	r6,52(sp)
4000bd6c:	d9c00c15 	stw	r7,48(sp)
    int luma_id_1 = 1;
    int chroma_id_0 = 1;
    int chroma_id_1 = 0;
    int luma_0_hw_x,   luma_0_hw_y,   waiting_hw_luma_0 = 0;
    int luma_1_hw_x,   luma_1_hw_y,   waiting_hw_luma_1 = 0;
    int chroma_0_hw_x, chroma_0_hw_y, waiting_hw_chroma_0 = 0;
4000bd70:	d8000915 	stw	zero,36(sp)
    int luma_id_0 = 1;
    int luma_id_1 = 1;
    int chroma_id_0 = 1;
    int chroma_id_1 = 0;
    int luma_0_hw_x,   luma_0_hw_y,   waiting_hw_luma_0 = 0;
    int luma_1_hw_x,   luma_1_hw_y,   waiting_hw_luma_1 = 0;
4000bd74:	d8000f15 	stw	zero,60(sp)
    int x,y;
    int luma_id_0 = 1;
    int luma_id_1 = 1;
    int chroma_id_0 = 1;
    int chroma_id_1 = 0;
    int luma_0_hw_x,   luma_0_hw_y,   waiting_hw_luma_0 = 0;
4000bd78:	d8000e15 	stw	zero,56(sp)
                          int org_x,
                          int org_y
                          ) {
    int x,y;
    int luma_id_0 = 1;
    int luma_id_1 = 1;
4000bd7c:	dd400515 	stw	r21,20(sp)
						  int mvy[16],
                          int org_x,
                          int org_y
                          ) {
    int x,y;
    int luma_id_0 = 1;
4000bd80:	a82f883a 	mov	r23,r21
4000bd84:	18e5883a 	add	r18,r3,r3
4000bd88:	d8c01117 	ldw	r3,68(sp)
4000bd8c:	94a5883a 	add	r18,r18,r18

int motion_comp_send_chroma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy){
    int xFrac=(mvx&7), yFrac=(mvy&7);
    return send_chroma_motion_comp_packet_fast(ref, (org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3), xFrac, yFrac);
4000bd90:	dd000c17 	ldw	r20,48(sp)
4000bd94:	90e4b03a 	or	r18,r18,r3
4000bd98:	9007d07a 	srai	r3,r18,1
4000bd9c:	dcc00d17 	ldw	r19,52(sp)
4000bda0:	0023883a 	mov	r17,zero
4000bda4:	d8c00715 	stw	r3,28(sp)
    int luma_1_hw_x,   luma_1_hw_y,   waiting_hw_luma_1 = 0;
    int chroma_0_hw_x, chroma_0_hw_y, waiting_hw_chroma_0 = 0;

    for(y=0; y<4; ++y){
        for(x=0; x<4; x++){
            if(luma_id_0==0){
4000bda8:	b8000b26 	beq	r23,zero,4000bdd8 <MotionCompensateMB_7+0xc0>
                luma_0_hw_x = org_x|(x<<2);
                luma_0_hw_y = org_y|(y<<2);
                waiting_hw_luma_0 = 1;
                //printf(".\n");
            }
            else if(luma_id_1==0){
4000bdac:	d8c00517 	ldw	r3,20(sp)
4000bdb0:	18006a26 	beq	r3,zero,4000bf5c <MotionCompensateMB_7+0x244>
                luma_1_hw_x = org_x|(x<<2);
                luma_1_hw_y = org_y|(y<<2);
                waiting_hw_luma_1 = 1;
                //printf(".\n");
            }
            else if(rx_packet_by_id_no_block(luma_id_0, 1) != (void *)0){
4000bdb4:	01400044 	movi	r5,1
4000bdb8:	b809883a 	mov	r4,r23
4000bdbc:	000c5580 	call	4000c558 <rx_packet_by_id_no_block>
4000bdc0:	10005d26 	beq	r2,zero,4000bf38 <MotionCompensateMB_7+0x220>
            //    printf("recieved from luma node 0 (id = %d)\n", luma_id_0);
                rx_luma_motion_comp_packet(luma_id_0, this, luma_0_hw_x, luma_0_hw_y);
4000bdc4:	d9c00b17 	ldw	r7,44(sp)
4000bdc8:	d9400a17 	ldw	r5,40(sp)
4000bdcc:	800d883a 	mov	r6,r16
4000bdd0:	b809883a 	mov	r4,r23
4000bdd4:	00094380 	call	40009438 <rx_luma_motion_comp_packet>
                luma_id_0 = motion_comp_send_luma(this,ref,org_x|(x<<2),org_y|(y<<2),mvx[x+y*4], mvy[x+y*4], 0);
4000bdd8:	98800017 	ldw	r2,0(r19)
4000bddc:	a1c00017 	ldw	r7,0(r20)
4000bde0:	d8c00817 	ldw	r3,32(sp)
int motion_comp_send_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy, int select){
    int frac=(mvy&3)*4+(mvx&3);
    if(select == 0){
        return send_luma_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
4000bde4:	100bd0ba 	srai	r5,r2,2
4000bde8:	380dd0ba 	srai	r6,r7,2
                //printf(".\n");
            }
            else if(rx_packet_by_id_no_block(luma_id_0, 1) != (void *)0){
            //    printf("recieved from luma node 0 (id = %d)\n", luma_id_0);
                rx_luma_motion_comp_packet(luma_id_0, this, luma_0_hw_x, luma_0_hw_y);
                luma_id_0 = motion_comp_send_luma(this,ref,org_x|(x<<2),org_y|(y<<2),mvx[x+y*4], mvy[x+y*4], 0);
4000bdec:	8c61883a 	add	r16,r17,r17
4000bdf0:	8421883a 	add	r16,r16,r16
int motion_comp_send_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy, int select){
    int frac=(mvy&3)*4+(mvx&3);
    if(select == 0){
        return send_luma_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
4000bdf4:	39c000cc 	andi	r7,r7,3
                //printf(".\n");
            }
            else if(rx_packet_by_id_no_block(luma_id_0, 1) != (void *)0){
            //    printf("recieved from luma node 0 (id = %d)\n", luma_id_0);
                rx_luma_motion_comp_packet(luma_id_0, this, luma_0_hw_x, luma_0_hw_y);
                luma_id_0 = motion_comp_send_luma(this,ref,org_x|(x<<2),org_y|(y<<2),mvx[x+y*4], mvy[x+y*4], 0);
4000bdf8:	80e0b03a 	or	r16,r16,r3
int motion_comp_send_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy, int select){
    int frac=(mvy&3)*4+(mvx&3);
    if(select == 0){
        return send_luma_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
4000bdfc:	39cf883a 	add	r7,r7,r7
4000be00:	108000cc 	andi	r2,r2,3
4000be04:	39cf883a 	add	r7,r7,r7
4000be08:	348d883a 	add	r6,r6,r18
4000be0c:	2c0b883a 	add	r5,r5,r16
4000be10:	388f883a 	add	r7,r7,r2
4000be14:	31bfff84 	addi	r6,r6,-2
4000be18:	297fff84 	addi	r5,r5,-2
4000be1c:	e009883a 	mov	r4,fp
4000be20:	0008f540 	call	40008f54 <send_luma_motion_comp_fast>
                rx_luma_motion_comp_packet(luma_id_0, this, luma_0_hw_x, luma_0_hw_y);
                luma_id_0 = motion_comp_send_luma(this,ref,org_x|(x<<2),org_y|(y<<2),mvx[x+y*4], mvy[x+y*4], 0);
             //   printf("luma 0 sent packet with id: %d\n", luma_id_0);
                luma_0_hw_x = org_x|(x<<2);
                luma_0_hw_y = org_y|(y<<2);
                waiting_hw_luma_0 = 1;
4000be24:	00c00044 	movi	r3,1
int motion_comp_send_luma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy, int select){
    int frac=(mvy&3)*4+(mvx&3);
    if(select == 0){
        return send_luma_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
4000be28:	102f883a 	mov	r23,r2
4000be2c:	802d883a 	mov	r22,r16
            //    printf("recieved from luma node 0 (id = %d)\n", luma_id_0);
                rx_luma_motion_comp_packet(luma_id_0, this, luma_0_hw_x, luma_0_hw_y);
                luma_id_0 = motion_comp_send_luma(this,ref,org_x|(x<<2),org_y|(y<<2),mvx[x+y*4], mvy[x+y*4], 0);
             //   printf("luma 0 sent packet with id: %d\n", luma_id_0);
                luma_0_hw_x = org_x|(x<<2);
                luma_0_hw_y = org_y|(y<<2);
4000be30:	dc800b15 	stw	r18,44(sp)
                waiting_hw_luma_0 = 1;
4000be34:	d8c00e15 	stw	r3,56(sp)
                sw_inter_luma(this,ref,org_x|(x<<2),org_y|(y<<2),mvx[x+y*4], mvy[x+y*4]);
                //printf(".\n");
            }


            if(chroma_id_0==0){
4000be38:	a8000b26 	beq	r21,zero,4000be68 <MotionCompensateMB_7+0x150>
                chroma_0_hw_x = org_x|(x<<2);
                chroma_0_hw_y = org_y|(y<<2);
                waiting_hw_chroma_0 = 1;
                //printf(".\n");
            }
            else if(rx_packet_by_id_no_block(chroma_id_0, 1) != (void *)0){
4000be3c:	01400044 	movi	r5,1
4000be40:	a809883a 	mov	r4,r21
4000be44:	000c5580 	call	4000c558 <rx_packet_by_id_no_block>
4000be48:	10005e26 	beq	r2,zero,4000bfc4 <MotionCompensateMB_7+0x2ac>
            //	printf("recieved from chroma node 0(id = %d)\n", chroma_id_0);
                rx_chroma_motion_comp_packet(chroma_id_0, this, (chroma_0_hw_x>>1), (chroma_0_hw_y>>1));
4000be4c:	d8c00317 	ldw	r3,12(sp)
4000be50:	d9400a17 	ldw	r5,40(sp)
4000be54:	a809883a 	mov	r4,r21
4000be58:	180fd07a 	srai	r7,r3,1
4000be5c:	d8c00217 	ldw	r3,8(sp)
4000be60:	180dd07a 	srai	r6,r3,1
4000be64:	0009a400 	call	40009a40 <rx_chroma_motion_comp_packet>
                chroma_id_0=motion_comp_send_chroma(this,ref,org_x|(x<<2),org_y|(y<<2),mvx[x+y*4], mvy[x+y*4]);
4000be68:	99c00017 	ldw	r7,0(r19)
4000be6c:	a0800017 	ldw	r2,0(r20)

int motion_comp_send_chroma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy){
    int xFrac=(mvx&7), yFrac=(mvy&7);
    return send_chroma_motion_comp_packet_fast(ref, (org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3), xFrac, yFrac);
4000be70:	d9000717 	ldw	r4,28(sp)
4000be74:	3807d0fa 	srai	r3,r7,3
4000be78:	100dd0fa 	srai	r6,r2,3
4000be7c:	b00bd07a 	srai	r5,r22,1
4000be80:	108001cc 	andi	r2,r2,7
4000be84:	310d883a 	add	r6,r6,r4
4000be88:	28cb883a 	add	r5,r5,r3
4000be8c:	d8800015 	stw	r2,0(sp)
4000be90:	39c001cc 	andi	r7,r7,7
4000be94:	e009883a 	mov	r4,fp
4000be98:	00096700 	call	40009670 <send_chroma_motion_comp_packet_fast>
                rx_chroma_motion_comp_packet(chroma_id_0, this, (chroma_0_hw_x>>1), (chroma_0_hw_y>>1));
                chroma_id_0=motion_comp_send_chroma(this,ref,org_x|(x<<2),org_y|(y<<2),mvx[x+y*4], mvy[x+y*4]);
            //    printf("chroma 0 sent packet with id: %d\n", chroma_id_0);
                chroma_0_hw_x = org_x|(x<<2);
                chroma_0_hw_y = org_y|(y<<2);
                waiting_hw_chroma_0 = 1;
4000be9c:	00c00044 	movi	r3,1

int motion_comp_send_chroma(frame *this, frame *ref,
                        int org_x, int org_y,
                        int mvx, int mvy){
    int xFrac=(mvx&7), yFrac=(mvy&7);
    return send_chroma_motion_comp_packet_fast(ref, (org_x>>1)+(mvx>>3),(org_y>>1)+(mvy>>3), xFrac, yFrac);
4000bea0:	102b883a 	mov	r21,r2
            //	printf("recieved from chroma node 0(id = %d)\n", chroma_id_0);
                rx_chroma_motion_comp_packet(chroma_id_0, this, (chroma_0_hw_x>>1), (chroma_0_hw_y>>1));
                chroma_id_0=motion_comp_send_chroma(this,ref,org_x|(x<<2),org_y|(y<<2),mvx[x+y*4], mvy[x+y*4]);
            //    printf("chroma 0 sent packet with id: %d\n", chroma_id_0);
                chroma_0_hw_x = org_x|(x<<2);
                chroma_0_hw_y = org_y|(y<<2);
4000bea4:	dc800315 	stw	r18,12(sp)
            else if(rx_packet_by_id_no_block(chroma_id_0, 1) != (void *)0){
            //	printf("recieved from chroma node 0(id = %d)\n", chroma_id_0);
                rx_chroma_motion_comp_packet(chroma_id_0, this, (chroma_0_hw_x>>1), (chroma_0_hw_y>>1));
                chroma_id_0=motion_comp_send_chroma(this,ref,org_x|(x<<2),org_y|(y<<2),mvx[x+y*4], mvy[x+y*4]);
            //    printf("chroma 0 sent packet with id: %d\n", chroma_id_0);
                chroma_0_hw_x = org_x|(x<<2);
4000bea8:	dd800215 	stw	r22,8(sp)
                chroma_0_hw_y = org_y|(y<<2);
                waiting_hw_chroma_0 = 1;
4000beac:	d8c00915 	stw	r3,36(sp)
    int luma_0_hw_x,   luma_0_hw_y,   waiting_hw_luma_0 = 0;
    int luma_1_hw_x,   luma_1_hw_y,   waiting_hw_luma_1 = 0;
    int chroma_0_hw_x, chroma_0_hw_y, waiting_hw_chroma_0 = 0;

    for(y=0; y<4; ++y){
        for(x=0; x<4; x++){
4000beb0:	8c400044 	addi	r17,r17,1
4000beb4:	01000104 	movi	r4,4
4000beb8:	9cc00104 	addi	r19,r19,4
4000bebc:	a5000104 	addi	r20,r20,4
4000bec0:	893fb91e 	bne	r17,r4,4000bda8 <__alt_data_end+0xc000bda8>
    int chroma_id_1 = 0;
    int luma_0_hw_x,   luma_0_hw_y,   waiting_hw_luma_0 = 0;
    int luma_1_hw_x,   luma_1_hw_y,   waiting_hw_luma_1 = 0;
    int chroma_0_hw_x, chroma_0_hw_y, waiting_hw_chroma_0 = 0;

    for(y=0; y<4; ++y){
4000bec4:	d8c00417 	ldw	r3,16(sp)
4000bec8:	18c00044 	addi	r3,r3,1
4000becc:	d8c00415 	stw	r3,16(sp)
4000bed0:	d8c00d17 	ldw	r3,52(sp)
4000bed4:	18c00404 	addi	r3,r3,16
4000bed8:	d8c00d15 	stw	r3,52(sp)
4000bedc:	d8c00c17 	ldw	r3,48(sp)
4000bee0:	18c00404 	addi	r3,r3,16
4000bee4:	d8c00c15 	stw	r3,48(sp)
4000bee8:	d8c00417 	ldw	r3,16(sp)
4000beec:	1c7fa51e 	bne	r3,r17,4000bd84 <__alt_data_end+0xc000bd84>
//    rx_packet_by_id_no_block(chroma_id_0, 1);
//    rx_packet_by_id_no_block(luma_id_0, 1);
//    rx_packet_by_id_no_block(luma_id_1, 1);
//    print_rx_buffer();

    if(waiting_hw_luma_0){
4000bef0:	d8c00e17 	ldw	r3,56(sp)
4000bef4:	1800551e 	bne	r3,zero,4000c04c <MotionCompensateMB_7+0x334>
        //printf("waiting for luma 0 (id = %d)\n", luma_id_0);
        rx_luma_motion_comp_packet(luma_id_0, this, luma_0_hw_x, luma_0_hw_y);
    }
    if(waiting_hw_luma_1){
4000bef8:	d8c00f17 	ldw	r3,60(sp)
4000befc:	18004d1e 	bne	r3,zero,4000c034 <MotionCompensateMB_7+0x31c>
    	//printf("waiting for luma 1 (id = %d)\n", luma_id_1);
        rx_luma_motion_comp_packet(luma_id_1, this, luma_1_hw_x, luma_1_hw_y);
    }
    if(waiting_hw_chroma_0){
4000bf00:	d8c00917 	ldw	r3,36(sp)
4000bf04:	1800391e 	bne	r3,zero,4000bfec <MotionCompensateMB_7+0x2d4>
    }
    //printf("--------------------------------------------\n");
    //while(1);


}
4000bf08:	dfc01b17 	ldw	ra,108(sp)
4000bf0c:	df001a17 	ldw	fp,104(sp)
4000bf10:	ddc01917 	ldw	r23,100(sp)
4000bf14:	dd801817 	ldw	r22,96(sp)
4000bf18:	dd401717 	ldw	r21,92(sp)
4000bf1c:	dd001617 	ldw	r20,88(sp)
4000bf20:	dcc01517 	ldw	r19,84(sp)
4000bf24:	dc801417 	ldw	r18,80(sp)
4000bf28:	dc401317 	ldw	r17,76(sp)
4000bf2c:	dc001217 	ldw	r16,72(sp)
4000bf30:	dec01c04 	addi	sp,sp,112
4000bf34:	f800283a 	ret
                luma_0_hw_x = org_x|(x<<2);
                luma_0_hw_y = org_y|(y<<2);
                waiting_hw_luma_0 = 1;
                //printf(".\n");
            }
            else if(rx_packet_by_id_no_block(luma_id_1, 1) != (void *)0){
4000bf38:	d9000517 	ldw	r4,20(sp)
4000bf3c:	01400044 	movi	r5,1
4000bf40:	000c5580 	call	4000c558 <rx_packet_by_id_no_block>
4000bf44:	10004726 	beq	r2,zero,4000c064 <MotionCompensateMB_7+0x34c>
            //    printf("recieved from luma node 1(id = %d)\n", luma_id_1);
                rx_luma_motion_comp_packet(luma_id_1, this, luma_1_hw_x, luma_1_hw_y);
4000bf48:	d9c01017 	ldw	r7,64(sp)
4000bf4c:	d9800617 	ldw	r6,24(sp)
4000bf50:	d9000517 	ldw	r4,20(sp)
4000bf54:	d9400a17 	ldw	r5,40(sp)
4000bf58:	00094380 	call	40009438 <rx_luma_motion_comp_packet>
                luma_id_1 = motion_comp_send_luma(this,ref,org_x|(x<<2),org_y|(y<<2),mvx[x+y*4], mvy[x+y*4], 1);
4000bf5c:	98c00017 	ldw	r3,0(r19)
4000bf60:	a1c00017 	ldw	r7,0(r20)
4000bf64:	d9000817 	ldw	r4,32(sp)
    int frac=(mvy&3)*4+(mvx&3);
    if(select == 0){
        return send_luma_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
    }
    else{
        return send_luma_1_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
4000bf68:	180bd0ba 	srai	r5,r3,2
4000bf6c:	380dd0ba 	srai	r6,r7,2
                //printf(".\n");
            }
            else if(rx_packet_by_id_no_block(luma_id_1, 1) != (void *)0){
            //    printf("recieved from luma node 1(id = %d)\n", luma_id_1);
                rx_luma_motion_comp_packet(luma_id_1, this, luma_1_hw_x, luma_1_hw_y);
                luma_id_1 = motion_comp_send_luma(this,ref,org_x|(x<<2),org_y|(y<<2),mvx[x+y*4], mvy[x+y*4], 1);
4000bf70:	8c45883a 	add	r2,r17,r17
4000bf74:	1085883a 	add	r2,r2,r2
    int frac=(mvy&3)*4+(mvx&3);
    if(select == 0){
        return send_luma_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
    }
    else{
        return send_luma_1_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
4000bf78:	39c000cc 	andi	r7,r7,3
                //printf(".\n");
            }
            else if(rx_packet_by_id_no_block(luma_id_1, 1) != (void *)0){
            //    printf("recieved from luma node 1(id = %d)\n", luma_id_1);
                rx_luma_motion_comp_packet(luma_id_1, this, luma_1_hw_x, luma_1_hw_y);
                luma_id_1 = motion_comp_send_luma(this,ref,org_x|(x<<2),org_y|(y<<2),mvx[x+y*4], mvy[x+y*4], 1);
4000bf7c:	1104b03a 	or	r2,r2,r4
    int frac=(mvy&3)*4+(mvx&3);
    if(select == 0){
        return send_luma_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
    }
    else{
        return send_luma_1_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
4000bf80:	39cf883a 	add	r7,r7,r7
4000bf84:	18c000cc 	andi	r3,r3,3
4000bf88:	288b883a 	add	r5,r5,r2
4000bf8c:	39cf883a 	add	r7,r7,r7
4000bf90:	348d883a 	add	r6,r6,r18
4000bf94:	38cf883a 	add	r7,r7,r3
4000bf98:	31bfff84 	addi	r6,r6,-2
4000bf9c:	297fff84 	addi	r5,r5,-2
4000bfa0:	e009883a 	mov	r4,fp
                //printf(".\n");
            }
            else if(rx_packet_by_id_no_block(luma_id_1, 1) != (void *)0){
            //    printf("recieved from luma node 1(id = %d)\n", luma_id_1);
                rx_luma_motion_comp_packet(luma_id_1, this, luma_1_hw_x, luma_1_hw_y);
                luma_id_1 = motion_comp_send_luma(this,ref,org_x|(x<<2),org_y|(y<<2),mvx[x+y*4], mvy[x+y*4], 1);
4000bfa4:	d8800615 	stw	r2,24(sp)
    int frac=(mvy&3)*4+(mvx&3);
    if(select == 0){
        return send_luma_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
    }
    else{
        return send_luma_1_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
4000bfa8:	000a61c0 	call	4000a61c <send_luma_1_motion_comp_fast>
                rx_luma_motion_comp_packet(luma_id_1, this, luma_1_hw_x, luma_1_hw_y);
                luma_id_1 = motion_comp_send_luma(this,ref,org_x|(x<<2),org_y|(y<<2),mvx[x+y*4], mvy[x+y*4], 1);
            //    printf("luma 1 sent packet with id: %d\n", luma_id_1);
                luma_1_hw_x = org_x|(x<<2);
                luma_1_hw_y = org_y|(y<<2);
                waiting_hw_luma_1 = 1;
4000bfac:	00c00044 	movi	r3,1
    int frac=(mvy&3)*4+(mvx&3);
    if(select == 0){
        return send_luma_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
    }
    else{
        return send_luma_1_motion_comp_fast(ref, org_x+(mvx>>2)-2, org_y+(mvy>>2)-2, frac);
4000bfb0:	d8800515 	stw	r2,20(sp)
4000bfb4:	dd800617 	ldw	r22,24(sp)
            //    printf("recieved from luma node 1(id = %d)\n", luma_id_1);
                rx_luma_motion_comp_packet(luma_id_1, this, luma_1_hw_x, luma_1_hw_y);
                luma_id_1 = motion_comp_send_luma(this,ref,org_x|(x<<2),org_y|(y<<2),mvx[x+y*4], mvy[x+y*4], 1);
            //    printf("luma 1 sent packet with id: %d\n", luma_id_1);
                luma_1_hw_x = org_x|(x<<2);
                luma_1_hw_y = org_y|(y<<2);
4000bfb8:	dc801015 	stw	r18,64(sp)
                waiting_hw_luma_1 = 1;
4000bfbc:	d8c00f15 	stw	r3,60(sp)
4000bfc0:	003f9d06 	br	4000be38 <__alt_data_end+0xc000be38>
                waiting_hw_chroma_0 = 1;
                //printf(".\n");
            }
            else{
                //printf("using SW chroma inter\n");
                sw_inter_chroma(this,ref,org_x|(x<<2),org_y|(y<<2),mvx[x+y*4], mvy[x+y*4]);
4000bfc4:	a0800017 	ldw	r2,0(r20)
4000bfc8:	d9000a17 	ldw	r4,40(sp)
4000bfcc:	900f883a 	mov	r7,r18
4000bfd0:	d8800115 	stw	r2,4(sp)
4000bfd4:	98800017 	ldw	r2,0(r19)
4000bfd8:	b00d883a 	mov	r6,r22
4000bfdc:	e00b883a 	mov	r5,fp
4000bfe0:	d8800015 	stw	r2,0(sp)
4000bfe4:	000b8c00 	call	4000b8c0 <sw_inter_chroma>
4000bfe8:	003fb106 	br	4000beb0 <__alt_data_end+0xc000beb0>
    	//printf("waiting for luma 1 (id = %d)\n", luma_id_1);
        rx_luma_motion_comp_packet(luma_id_1, this, luma_1_hw_x, luma_1_hw_y);
    }
    if(waiting_hw_chroma_0){
    	//printf("waiting for chroma 0 (id = %d)\n", chroma_id_0);
        rx_chroma_motion_comp_packet(chroma_id_0, this, (chroma_0_hw_x>>1), (chroma_0_hw_y>>1));
4000bfec:	d8c00317 	ldw	r3,12(sp)
4000bff0:	d9400a17 	ldw	r5,40(sp)
4000bff4:	a809883a 	mov	r4,r21
4000bff8:	180fd07a 	srai	r7,r3,1
4000bffc:	d8c00217 	ldw	r3,8(sp)
4000c000:	180dd07a 	srai	r6,r3,1
    }
    //printf("--------------------------------------------\n");
    //while(1);


}
4000c004:	dfc01b17 	ldw	ra,108(sp)
4000c008:	df001a17 	ldw	fp,104(sp)
4000c00c:	ddc01917 	ldw	r23,100(sp)
4000c010:	dd801817 	ldw	r22,96(sp)
4000c014:	dd401717 	ldw	r21,92(sp)
4000c018:	dd001617 	ldw	r20,88(sp)
4000c01c:	dcc01517 	ldw	r19,84(sp)
4000c020:	dc801417 	ldw	r18,80(sp)
4000c024:	dc401317 	ldw	r17,76(sp)
4000c028:	dc001217 	ldw	r16,72(sp)
4000c02c:	dec01c04 	addi	sp,sp,112
    	//printf("waiting for luma 1 (id = %d)\n", luma_id_1);
        rx_luma_motion_comp_packet(luma_id_1, this, luma_1_hw_x, luma_1_hw_y);
    }
    if(waiting_hw_chroma_0){
    	//printf("waiting for chroma 0 (id = %d)\n", chroma_id_0);
        rx_chroma_motion_comp_packet(chroma_id_0, this, (chroma_0_hw_x>>1), (chroma_0_hw_y>>1));
4000c030:	0009a401 	jmpi	40009a40 <rx_chroma_motion_comp_packet>
        //printf("waiting for luma 0 (id = %d)\n", luma_id_0);
        rx_luma_motion_comp_packet(luma_id_0, this, luma_0_hw_x, luma_0_hw_y);
    }
    if(waiting_hw_luma_1){
    	//printf("waiting for luma 1 (id = %d)\n", luma_id_1);
        rx_luma_motion_comp_packet(luma_id_1, this, luma_1_hw_x, luma_1_hw_y);
4000c034:	d9c01017 	ldw	r7,64(sp)
4000c038:	d9800617 	ldw	r6,24(sp)
4000c03c:	d9400a17 	ldw	r5,40(sp)
4000c040:	d9000517 	ldw	r4,20(sp)
4000c044:	00094380 	call	40009438 <rx_luma_motion_comp_packet>
4000c048:	003fad06 	br	4000bf00 <__alt_data_end+0xc000bf00>
//    rx_packet_by_id_no_block(luma_id_1, 1);
//    print_rx_buffer();

    if(waiting_hw_luma_0){
        //printf("waiting for luma 0 (id = %d)\n", luma_id_0);
        rx_luma_motion_comp_packet(luma_id_0, this, luma_0_hw_x, luma_0_hw_y);
4000c04c:	d9c00b17 	ldw	r7,44(sp)
4000c050:	d9400a17 	ldw	r5,40(sp)
4000c054:	800d883a 	mov	r6,r16
4000c058:	b809883a 	mov	r4,r23
4000c05c:	00094380 	call	40009438 <rx_luma_motion_comp_packet>
4000c060:	003fa506 	br	4000bef8 <__alt_data_end+0xc000bef8>
                waiting_hw_luma_1 = 1;
                //printf(".\n");
            }
            else{
                //printf("using SW luma inter\n");
                sw_inter_luma(this,ref,org_x|(x<<2),org_y|(y<<2),mvx[x+y*4], mvy[x+y*4]);
4000c064:	a0800017 	ldw	r2,0(r20)
4000c068:	d8c00817 	ldw	r3,32(sp)
4000c06c:	8c6d883a 	add	r22,r17,r17
4000c070:	d8800115 	stw	r2,4(sp)
4000c074:	98800017 	ldw	r2,0(r19)
4000c078:	b5ad883a 	add	r22,r22,r22
4000c07c:	d9000a17 	ldw	r4,40(sp)
4000c080:	b0ecb03a 	or	r22,r22,r3
4000c084:	900f883a 	mov	r7,r18
4000c088:	d8800015 	stw	r2,0(sp)
4000c08c:	b00d883a 	mov	r6,r22
4000c090:	e00b883a 	mov	r5,fp
4000c094:	000af340 	call	4000af34 <sw_inter_luma>
4000c098:	003f6706 	br	4000be38 <__alt_data_end+0xc000be38>

4000c09c <MotionCompensateMB_2>:
                          int org_x,
                          int org_y
                          ) {
  int x,y;
  static int count = 0;
  count++;
4000c09c:	d0a2c617 	ldw	r2,-29928(gp)
		                  frame *ref,
                          int mvx[16],
						  int mvy[16],
                          int org_x,
                          int org_y
                          ) {
4000c0a0:	defff204 	addi	sp,sp,-56
4000c0a4:	dcc00715 	stw	r19,28(sp)
4000c0a8:	dcc00e17 	ldw	r19,56(sp)
  int x,y;
  static int count = 0;
  count++;
4000c0ac:	10800044 	addi	r2,r2,1
		                  frame *ref,
                          int mvx[16],
						  int mvy[16],
                          int org_x,
                          int org_y
                          ) {
4000c0b0:	dd400915 	stw	r21,36(sp)
4000c0b4:	dd000815 	stw	r20,32(sp)
4000c0b8:	dc800615 	stw	r18,24(sp)
4000c0bc:	dc400515 	stw	r17,20(sp)
4000c0c0:	dfc00d15 	stw	ra,52(sp)
4000c0c4:	df000c15 	stw	fp,48(sp)
4000c0c8:	ddc00b15 	stw	r23,44(sp)
4000c0cc:	dd800a15 	stw	r22,40(sp)
4000c0d0:	dc000415 	stw	r16,16(sp)
4000c0d4:	202b883a 	mov	r21,r4
4000c0d8:	2829883a 	mov	r20,r5
  int x,y;
  static int count = 0;
  count++;
4000c0dc:	d0a2c615 	stw	r2,-29928(gp)
4000c0e0:	d9800215 	stw	r6,8(sp)
4000c0e4:	d9c00315 	stw	r7,12(sp)

  int luma_ids[4];
  int chroma_ids[4];


  for(y=0; y<4; ++y){
4000c0e8:	0023883a 	mov	r17,zero
    for(x=0; x<4; ++x){
4000c0ec:	04800104 	movi	r18,4
4000c0f0:	d8800f17 	ldw	r2,60(sp)
4000c0f4:	8c61883a 	add	r16,r17,r17
		                  frame *ref,
                          int mvx[16],
						  int mvy[16],
                          int org_x,
                          int org_y
                          ) {
4000c0f8:	ddc00317 	ldw	r23,12(sp)
4000c0fc:	dd800217 	ldw	r22,8(sp)
4000c100:	8421883a 	add	r16,r16,r16
4000c104:	80a0b03a 	or	r16,r16,r2
4000c108:	0039883a 	mov	fp,zero
  int chroma_ids[4];


  for(y=0; y<4; ++y){
    for(x=0; x<4; ++x){
    	MotionCompensateTB(this,ref,
4000c10c:	b9000017 	ldw	r4,0(r23)
4000c110:	e70d883a 	add	r6,fp,fp
4000c114:	318d883a 	add	r6,r6,r6
4000c118:	d9000115 	stw	r4,4(sp)
4000c11c:	b1000017 	ldw	r4,0(r22)
4000c120:	800f883a 	mov	r7,r16
4000c124:	34ccb03a 	or	r6,r6,r19
4000c128:	d9000015 	stw	r4,0(sp)
4000c12c:	a00b883a 	mov	r5,r20
4000c130:	a809883a 	mov	r4,r21
  int luma_ids[4];
  int chroma_ids[4];


  for(y=0; y<4; ++y){
    for(x=0; x<4; ++x){
4000c134:	e7000044 	addi	fp,fp,1
    	MotionCompensateTB(this,ref,
4000c138:	0009b880 	call	40009b88 <MotionCompensateTB>
4000c13c:	b5800104 	addi	r22,r22,4
4000c140:	bdc00104 	addi	r23,r23,4
  int luma_ids[4];
  int chroma_ids[4];


  for(y=0; y<4; ++y){
    for(x=0; x<4; ++x){
4000c144:	e4bff11e 	bne	fp,r18,4000c10c <__alt_data_end+0xc000c10c>
4000c148:	d8800217 	ldw	r2,8(sp)

  int luma_ids[4];
  int chroma_ids[4];


  for(y=0; y<4; ++y){
4000c14c:	8c400044 	addi	r17,r17,1
4000c150:	10800404 	addi	r2,r2,16
4000c154:	d8800215 	stw	r2,8(sp)
4000c158:	d8800317 	ldw	r2,12(sp)
4000c15c:	10800404 	addi	r2,r2,16
4000c160:	d8800315 	stw	r2,12(sp)
4000c164:	8f3fe21e 	bne	r17,fp,4000c0f0 <__alt_data_end+0xc000c0f0>
    			           org_y|(y<<2),
                           mvx[x+y*4],
                           mvy[x+y*4]);
    }
  }
}
4000c168:	dfc00d17 	ldw	ra,52(sp)
4000c16c:	df000c17 	ldw	fp,48(sp)
4000c170:	ddc00b17 	ldw	r23,44(sp)
4000c174:	dd800a17 	ldw	r22,40(sp)
4000c178:	dd400917 	ldw	r21,36(sp)
4000c17c:	dd000817 	ldw	r20,32(sp)
4000c180:	dcc00717 	ldw	r19,28(sp)
4000c184:	dc800617 	ldw	r18,24(sp)
4000c188:	dc400517 	ldw	r17,20(sp)
4000c18c:	dc000417 	ldw	r16,16(sp)
4000c190:	dec00e04 	addi	sp,sp,56
4000c194:	f800283a 	ret

4000c198 <noc_init>:

static int total_flits = 0;

void noc_init()
{
    printf("initializing network!\n");
4000c198:	011000b4 	movhi	r4,16386
static buffer the_buffer;

static int total_flits = 0;

void noc_init()
{
4000c19c:	defffe04 	addi	sp,sp,-8
    printf("initializing network!\n");
4000c1a0:	2129d104 	addi	r4,r4,-22716
static buffer the_buffer;

static int total_flits = 0;

void noc_init()
{
4000c1a4:	dfc00115 	stw	ra,4(sp)
4000c1a8:	dc000015 	stw	r16,0(sp)
    printf("initializing network!\n");
4000c1ac:	000f0840 	call	4000f084 <puts>
4000c1b0:	009000b4 	movhi	r2,16386
4000c1b4:	10b06f04 	addi	r2,r2,-15940
4000c1b8:	011000f4 	movhi	r4,16387
4000c1bc:	21356f04 	addi	r4,r4,-10820
4000c1c0:	10c00204 	addi	r3,r2,8
    
    int i;
    for(i = 0; i < MAX_PACKETS; i++){
        the_buffer.the_packets[i].num_flits = 0;
4000c1c4:	10000015 	stw	zero,0(r2)
        the_buffer.the_packets[i].identifier = 0;
4000c1c8:	18000015 	stw	zero,0(r3)
4000c1cc:	10804504 	addi	r2,r2,276
4000c1d0:	18c04504 	addi	r3,r3,276
void noc_init()
{
    printf("initializing network!\n");
    
    int i;
    for(i = 0; i < MAX_PACKETS; i++){
4000c1d4:	113ffb1e 	bne	r2,r4,4000c1c4 <__alt_data_end+0xc000c1c4>
        the_buffer.the_packets[i].num_flits = 0;
        the_buffer.the_packets[i].identifier = 0;
    }
    

    WR_PIO(NOC_CTRL_BASE, NOC_RESET);
4000c1d8:	04043c04 	movi	r16,4336
4000c1dc:	00840034 	movhi	r2,4096
4000c1e0:	80800035 	stwio	r2,0(r16)

    usleep(100);
4000c1e4:	01001904 	movi	r4,100
4000c1e8:	00198540 	call	40019854 <usleep>
    
    WR_PIO(NOC_CTRL_BASE, 0);
4000c1ec:	80000035 	stwio	zero,0(r16)
}
4000c1f0:	dfc00117 	ldw	ra,4(sp)
4000c1f4:	dc000017 	ldw	r16,0(sp)
4000c1f8:	dec00204 	addi	sp,sp,8
4000c1fc:	f800283a 	ret

4000c200 <send_flit>:

void send_flit(uint32_t dest, uint32_t word0, uint32_t word1, uint32_t set_tail)
{
    //wait for ack to go low
    while(RD_PIO(NOC_STS_BASE) & TX_ACK_BIT);
4000c200:	00c43004 	movi	r3,4288
4000c204:	18800037 	ldwio	r2,0(r3)
4000c208:	103ffe16 	blt	r2,zero,4000c204 <__alt_data_end+0xc000c204>
    
    //THIS IS A LEGACY FUNCTION
    //only send in mode 2
    WR_PIO(TX_0_BASE, word0);
4000c20c:	00844404 	movi	r2,4368
4000c210:	11400035 	stwio	r5,0(r2)
    WR_PIO(TX_1_BASE, word1);
4000c214:	00844004 	movi	r2,4352
4000c218:	11800035 	stwio	r6,0(r2)
    
    //set control values
    int ncv = (dest<<16) | (set_tail?TAIL_FLIT_BIT:0) | CPU_TX_REQ | FORMAT_2;
4000c21c:	2008943a 	slli	r4,r4,16
4000c220:	3800101e 	bne	r7,zero,4000c264 <send_flit+0x64>
4000c224:	0005883a 	mov	r2,zero
4000c228:	01500034 	movhi	r5,16384
4000c22c:	29400084 	addi	r5,r5,2
4000c230:	2148b03a 	or	r4,r4,r5

}

void no_data_send(uint32_t format_code){
	//uint64_t start = read_timer();
    while(RD_PIO(NOC_STS_BASE) & TX_ACK_BIT);
4000c234:	00c43004 	movi	r3,4288
    //only send in mode 2
    WR_PIO(TX_0_BASE, word0);
    WR_PIO(TX_1_BASE, word1);
    
    //set control values
    int ncv = (dest<<16) | (set_tail?TAIL_FLIT_BIT:0) | CPU_TX_REQ | FORMAT_2;
4000c238:	2088b03a 	or	r4,r4,r2

}

void no_data_send(uint32_t format_code){
	//uint64_t start = read_timer();
    while(RD_PIO(NOC_STS_BASE) & TX_ACK_BIT);
4000c23c:	18800037 	ldwio	r2,0(r3)
4000c240:	103ffe16 	blt	r2,zero,4000c23c <__alt_data_end+0xc000c23c>
    WR_PIO(NOC_CTRL_BASE, format_code);
4000c244:	00843c04 	movi	r2,4336
4000c248:	11000035 	stwio	r4,0(r2)
    while((RD_PIO(NOC_STS_BASE) & TX_ACK_BIT) == 0);
4000c24c:	00c43004 	movi	r3,4288
4000c250:	18800037 	ldwio	r2,0(r3)
4000c254:	103ffe0e 	bge	r2,zero,4000c250 <__alt_data_end+0xc000c250>
    WR_PIO(NOC_CTRL_BASE, 0);
4000c258:	00843c04 	movi	r2,4336
4000c25c:	10000035 	stwio	zero,0(r2)
4000c260:	f800283a 	ret
    //only send in mode 2
    WR_PIO(TX_0_BASE, word0);
    WR_PIO(TX_1_BASE, word1);
    
    //set control values
    int ncv = (dest<<16) | (set_tail?TAIL_FLIT_BIT:0) | CPU_TX_REQ | FORMAT_2;
4000c264:	00a00034 	movhi	r2,32768
4000c268:	003fef06 	br	4000c228 <__alt_data_end+0xc000c228>

4000c26c <no_data_send>:

}

void no_data_send(uint32_t format_code){
	//uint64_t start = read_timer();
    while(RD_PIO(NOC_STS_BASE) & TX_ACK_BIT);
4000c26c:	00c43004 	movi	r3,4288
4000c270:	18800037 	ldwio	r2,0(r3)
4000c274:	103ffe16 	blt	r2,zero,4000c270 <__alt_data_end+0xc000c270>
    WR_PIO(NOC_CTRL_BASE, format_code);
4000c278:	00843c04 	movi	r2,4336
4000c27c:	11000035 	stwio	r4,0(r2)
    while((RD_PIO(NOC_STS_BASE) & TX_ACK_BIT) == 0);
4000c280:	00c43004 	movi	r3,4288
4000c284:	18800037 	ldwio	r2,0(r3)
4000c288:	103ffe0e 	bge	r2,zero,4000c284 <__alt_data_end+0xc000c284>
    WR_PIO(NOC_CTRL_BASE, 0);
4000c28c:	00843c04 	movi	r2,4336
4000c290:	10000035 	stwio	zero,0(r2)
4000c294:	f800283a 	ret

4000c298 <get_buffer_rx_state>:
}


uint32_t get_buffer_rx_state()
{
    uint32_t state = RD_PIO(NOC_STS_BASE);
4000c298:	00843004 	movi	r2,4288
4000c29c:	10800037 	ldwio	r2,0(r2)
    return state & 0xFF;
}
4000c2a0:	10803fcc 	andi	r2,r2,255
4000c2a4:	f800283a 	ret

4000c2a8 <copy_to_buffer>:


uint32_t copy_to_buffer(uint32_t id)
{
    uint32_t packet_index = id;
    uint32_t flit_index   = the_buffer.the_packets[packet_index].num_flits;
4000c2a8:	20804524 	muli	r2,r4,276
4000c2ac:	00d000b4 	movhi	r3,16386
4000c2b0:	18f02d04 	addi	r3,r3,-16204
4000c2b4:	188d883a 	add	r6,r3,r2
4000c2b8:	32404204 	addi	r9,r6,264
4000c2bc:	49400017 	ldw	r5,0(r9)



    }else{
    	//default flit parser
    	WR_PIO(NOC_CTRL_BASE, PARSE_32_BIT_UNSIGNED);
4000c2c0:	0011883a 	mov	r8,zero
4000c2c4:	01c43c04 	movi	r7,4336
4000c2c8:	3a000035 	stwio	r8,0(r7)
        uint32_t flit_top    = RD_PIO(RX_0_BASE);
4000c2cc:	02843804 	movi	r10,4320
4000c2d0:	52800037 	ldwio	r10,0(r10)
        uint32_t flit_bottom = RD_PIO(RX_1_BASE);
4000c2d4:	02c43404 	movi	r11,4304
4000c2d8:	5ac00037 	ldwio	r11,0(r11)
        uint64_t *flit_stack = &(the_buffer.the_packets[packet_index].data.flit[flit_index++]);
4000c2dc:	281890fa 	slli	r12,r5,3
        *(uint32_t *)flit_stack                                 = flit_bottom;
        *(((uint32_t *)flit_stack)+1)                           = flit_top;
        the_buffer.the_packets[packet_index].num_flits          = flit_index;
4000c2e0:	29400044 	addi	r5,r5,1
    }else{
    	//default flit parser
    	WR_PIO(NOC_CTRL_BASE, PARSE_32_BIT_UNSIGNED);
        uint32_t flit_top    = RD_PIO(RX_0_BASE);
        uint32_t flit_bottom = RD_PIO(RX_1_BASE);
        uint64_t *flit_stack = &(the_buffer.the_packets[packet_index].data.flit[flit_index++]);
4000c2e4:	6085883a 	add	r2,r12,r2
4000c2e8:	10c5883a 	add	r2,r2,r3
        *(uint32_t *)flit_stack                                 = flit_bottom;
4000c2ec:	12c00015 	stw	r11,0(r2)
        *(((uint32_t *)flit_stack)+1)                           = flit_top;
4000c2f0:	12800115 	stw	r10,4(r2)
        the_buffer.the_packets[packet_index].num_flits          = flit_index;
4000c2f4:	49400015 	stw	r5,0(r9)
        the_buffer.the_packets[packet_index].identifier         = id;
4000c2f8:	31004415 	stw	r4,272(r6)
        the_buffer.the_packets[packet_index].src_addr           = 0;
4000c2fc:	30004315 	stw	zero,268(r6)
    }


    WR_PIO(NOC_CTRL_BASE, 0);
4000c300:	3a000035 	stwio	r8,0(r7)
    return 1;
}
4000c304:	00800044 	movi	r2,1
4000c308:	f800283a 	ret

4000c30c <set_cpu_read_flag>:

void set_cpu_read_flag(int value)
{
    uint32_t noc_ctrl_value = RD_PIO(NOC_CTRL_BASE);
4000c30c:	00843c04 	movi	r2,4336
4000c310:	10800037 	ldwio	r2,0(r2)
    if( value != 0)
4000c314:	2000061e 	bne	r4,zero,4000c330 <set_cpu_read_flag+0x24>
    {
    	noc_ctrl_value |= CPU_RX_CTRL;
    }
    else
    {
    	noc_ctrl_value &= (~CPU_RX_CTRL);
4000c318:	00f80034 	movhi	r3,57344
4000c31c:	18ffffc4 	addi	r3,r3,-1
4000c320:	10c4703a 	and	r2,r2,r3
    }
    WR_PIO(NOC_CTRL_BASE, noc_ctrl_value);
4000c324:	00c43c04 	movi	r3,4336
4000c328:	18800035 	stwio	r2,0(r3)
4000c32c:	f800283a 	ret
void set_cpu_read_flag(int value)
{
    uint32_t noc_ctrl_value = RD_PIO(NOC_CTRL_BASE);
    if( value != 0)
    {
    	noc_ctrl_value |= CPU_RX_CTRL;
4000c330:	10880034 	orhi	r2,r2,8192
    }
    else
    {
    	noc_ctrl_value &= (~CPU_RX_CTRL);
    }
    WR_PIO(NOC_CTRL_BASE, noc_ctrl_value);
4000c334:	00c43c04 	movi	r3,4336
4000c338:	18800035 	stwio	r2,0(r3)
4000c33c:	f800283a 	ret

4000c340 <get_identifier>:
}

uint32_t get_identifier()
{
    return RD_PIO(RX_1_BASE) & 0xFF;
4000c340:	00843404 	movi	r2,4304
4000c344:	10800037 	ldwio	r2,0(r2)
}
4000c348:	10803fcc 	andi	r2,r2,255
4000c34c:	f800283a 	ret

4000c350 <buffers_loop>:

uint32_t buffers_loop(uint32_t packet_count)
{
4000c350:	defffa04 	addi	sp,sp,-24

//    	if(the_state != BUFFER_IDLE){
//    		start = read_timer();
//    	}

    	switch(the_state){
4000c354:	02500074 	movhi	r9,16385
    }
    else
    {
    	noc_ctrl_value &= (~CPU_RX_CTRL);
    }
    WR_PIO(NOC_CTRL_BASE, noc_ctrl_value);
4000c358:	03f80034 	movhi	r15,57344


uint32_t copy_to_buffer(uint32_t id)
{
    uint32_t packet_index = id;
    uint32_t flit_index   = the_buffer.the_packets[packet_index].num_flits;
4000c35c:	039000b4 	movhi	r14,16386
{
    return RD_PIO(RX_1_BASE) & 0xFF;
}

uint32_t buffers_loop(uint32_t packet_count)
{
4000c360:	dfc00515 	stw	ra,20(sp)
4000c364:	dd000415 	stw	r20,16(sp)
4000c368:	dcc00315 	stw	r19,12(sp)
4000c36c:	dc800215 	stw	r18,8(sp)
4000c370:	dc400115 	stw	r17,4(sp)
4000c374:	dc000015 	stw	r16,0(sp)
    uint32_t id = 0;
    uint32_t packets_rxd = 0;
    uint32_t packets_rxd_next = 0;
4000c378:	0019883a 	mov	r12,zero
}

uint32_t buffers_loop(uint32_t packet_count)
{
    uint32_t id = 0;
    uint32_t packets_rxd = 0;
4000c37c:	000f883a 	mov	r7,zero
    return RD_PIO(RX_1_BASE) & 0xFF;
}

uint32_t buffers_loop(uint32_t packet_count)
{
    uint32_t id = 0;
4000c380:	0015883a 	mov	r10,zero
}


uint32_t get_buffer_rx_state()
{
    uint32_t state = RD_PIO(NOC_STS_BASE);
4000c384:	00c43004 	movi	r3,4288

//    	if(the_state != BUFFER_IDLE){
//    		start = read_timer();
//    	}

    	switch(the_state){
4000c388:	02000144 	movi	r8,5
4000c38c:	4a70f304 	addi	r9,r9,-15412
    return 1;
}

void set_cpu_read_flag(int value)
{
    uint32_t noc_ctrl_value = RD_PIO(NOC_CTRL_BASE);
4000c390:	01843c04 	movi	r6,4336
    }
    else
    {
    	noc_ctrl_value &= (~CPU_RX_CTRL);
    }
    WR_PIO(NOC_CTRL_BASE, noc_ctrl_value);
4000c394:	7bffffc4 	addi	r15,r15,-1


uint32_t copy_to_buffer(uint32_t id)
{
    uint32_t packet_index = id;
    uint32_t flit_index   = the_buffer.the_packets[packet_index].num_flits;
4000c398:	73b02d04 	addi	r14,r14,-16204


    }else{
    	//default flit parser
    	WR_PIO(NOC_CTRL_BASE, PARSE_32_BIT_UNSIGNED);
        uint32_t flit_top    = RD_PIO(RX_0_BASE);
4000c39c:	07c43804 	movi	ra,4320
        uint32_t flit_bottom = RD_PIO(RX_1_BASE);
4000c3a0:	03443404 	movi	r13,4304
    		packets_rxd = packets_rxd_next;
    		break;
    	case BUFFER_ADDR_RST:
    		set_cpu_read_flag(1);
    		packets_rxd = packets_rxd_next;
    		while(get_buffer_rx_state() != BUFFER_START_READ);
4000c3a4:	014000c4 	movi	r5,3
    uint32_t packets_rxd = 0;
    uint32_t packets_rxd_next = 0;
    uint32_t infinite_loops = (packet_count==0)?1:0;
    uint64_t start;
    
    while(infinite_loops || (packets_rxd < packet_count))
4000c3a8:	20000126 	beq	r4,zero,4000c3b0 <buffers_loop+0x60>
4000c3ac:	3900352e 	bgeu	r7,r4,4000c484 <buffers_loop+0x134>
}


uint32_t get_buffer_rx_state()
{
    uint32_t state = RD_PIO(NOC_STS_BASE);
4000c3b0:	18800037 	ldwio	r2,0(r3)

//    	if(the_state != BUFFER_IDLE){
//    		start = read_timer();
//    	}

    	switch(the_state){
4000c3b4:	10803fcc 	andi	r2,r2,255
4000c3b8:	40bffb36 	bltu	r8,r2,4000c3a8 <__alt_data_end+0xc000c3a8>
4000c3bc:	100490ba 	slli	r2,r2,2
4000c3c0:	1245883a 	add	r2,r2,r9
4000c3c4:	10800017 	ldw	r2,0(r2)
4000c3c8:	1000683a 	jmp	r2
4000c3cc:	4000c3fc 	xorhi	zero,r8,783
4000c3d0:	4000c3a8 	cmpgeui	zero,r8,782
4000c3d4:	4000c3e4 	muli	zero,r8,783
4000c3d8:	4000c458 	cmpnei	zero,r8,785
4000c3dc:	4000c404 	addi	zero,r8,784
4000c3e0:	4000c474 	orhi	zero,r8,785
    return 1;
}

void set_cpu_read_flag(int value)
{
    uint32_t noc_ctrl_value = RD_PIO(NOC_CTRL_BASE);
4000c3e4:	30800037 	ldwio	r2,0(r6)
    }
    else
    {
    	noc_ctrl_value &= (~CPU_RX_CTRL);
    }
    WR_PIO(NOC_CTRL_BASE, noc_ctrl_value);
4000c3e8:	10880034 	orhi	r2,r2,8192
4000c3ec:	30800035 	stwio	r2,0(r6)
}


uint32_t get_buffer_rx_state()
{
    uint32_t state = RD_PIO(NOC_STS_BASE);
4000c3f0:	18800037 	ldwio	r2,0(r3)
    		packets_rxd = packets_rxd_next;
    		break;
    	case BUFFER_ADDR_RST:
    		set_cpu_read_flag(1);
    		packets_rxd = packets_rxd_next;
    		while(get_buffer_rx_state() != BUFFER_START_READ);
4000c3f4:	10803fcc 	andi	r2,r2,255
4000c3f8:	117ffd1e 	bne	r2,r5,4000c3f0 <__alt_data_end+0xc000c3f0>
    	case BUFFER_IDLE:
    		packets_rxd = packets_rxd_next;
    		break;
    	case BUFFER_ADDR_RST:
    		set_cpu_read_flag(1);
    		packets_rxd = packets_rxd_next;
4000c3fc:	600f883a 	mov	r7,r12
4000c400:	003fe906 	br	4000c3a8 <__alt_data_end+0xc000c3a8>


uint32_t copy_to_buffer(uint32_t id)
{
    uint32_t packet_index = id;
    uint32_t flit_index   = the_buffer.the_packets[packet_index].num_flits;
4000c404:	50804524 	muli	r2,r10,276
4000c408:	70a1883a 	add	r16,r14,r2
4000c40c:	84404204 	addi	r17,r16,264
4000c410:	8ac00017 	ldw	r11,0(r17)



    }else{
    	//default flit parser
    	WR_PIO(NOC_CTRL_BASE, PARSE_32_BIT_UNSIGNED);
4000c414:	30000035 	stwio	zero,0(r6)
        uint32_t flit_top    = RD_PIO(RX_0_BASE);
4000c418:	fc800037 	ldwio	r18,0(ra)
        uint32_t flit_bottom = RD_PIO(RX_1_BASE);
4000c41c:	6cc00037 	ldwio	r19,0(r13)
        uint64_t *flit_stack = &(the_buffer.the_packets[packet_index].data.flit[flit_index++]);
4000c420:	582890fa 	slli	r20,r11,3
        *(uint32_t *)flit_stack                                 = flit_bottom;
        *(((uint32_t *)flit_stack)+1)                           = flit_top;
        the_buffer.the_packets[packet_index].num_flits          = flit_index;
4000c424:	5ac00044 	addi	r11,r11,1
    }else{
    	//default flit parser
    	WR_PIO(NOC_CTRL_BASE, PARSE_32_BIT_UNSIGNED);
        uint32_t flit_top    = RD_PIO(RX_0_BASE);
        uint32_t flit_bottom = RD_PIO(RX_1_BASE);
        uint64_t *flit_stack = &(the_buffer.the_packets[packet_index].data.flit[flit_index++]);
4000c428:	a085883a 	add	r2,r20,r2
4000c42c:	1385883a 	add	r2,r2,r14
        *(uint32_t *)flit_stack                                 = flit_bottom;
4000c430:	14c00015 	stw	r19,0(r2)
        *(((uint32_t *)flit_stack)+1)                           = flit_top;
4000c434:	14800115 	stw	r18,4(r2)
        the_buffer.the_packets[packet_index].num_flits          = flit_index;
4000c438:	8ac00015 	stw	r11,0(r17)
        the_buffer.the_packets[packet_index].identifier         = id;
4000c43c:	82804415 	stw	r10,272(r16)
        the_buffer.the_packets[packet_index].src_addr           = 0;
4000c440:	80004315 	stw	zero,268(r16)
    }


    WR_PIO(NOC_CTRL_BASE, 0);
4000c444:	30000035 	stwio	zero,0(r6)
    return 1;
}

void set_cpu_read_flag(int value)
{
    uint32_t noc_ctrl_value = RD_PIO(NOC_CTRL_BASE);
4000c448:	30800037 	ldwio	r2,0(r6)
    }
    else
    {
    	noc_ctrl_value &= (~CPU_RX_CTRL);
    }
    WR_PIO(NOC_CTRL_BASE, noc_ctrl_value);
4000c44c:	10880034 	orhi	r2,r2,8192
4000c450:	30800035 	stwio	r2,0(r6)
4000c454:	003fd406 	br	4000c3a8 <__alt_data_end+0xc000c3a8>
}

uint32_t get_identifier()
{
    return RD_PIO(RX_1_BASE) & 0xFF;
4000c458:	6a800037 	ldwio	r10,0(r13)
4000c45c:	52803fcc 	andi	r10,r10,255
    		packets_rxd = packets_rxd_next;
    		while(get_buffer_rx_state() != BUFFER_START_READ);
    		break;
    	case BUFFER_START_READ:
    		id = get_identifier();
    		packets_rxd_next += 1;
4000c460:	63000044 	addi	r12,r12,1
    return 1;
}

void set_cpu_read_flag(int value)
{
    uint32_t noc_ctrl_value = RD_PIO(NOC_CTRL_BASE);
4000c464:	30800037 	ldwio	r2,0(r6)
    }
    else
    {
    	noc_ctrl_value &= (~CPU_RX_CTRL);
    }
    WR_PIO(NOC_CTRL_BASE, noc_ctrl_value);
4000c468:	13c4703a 	and	r2,r2,r15
4000c46c:	30800035 	stwio	r2,0(r6)
4000c470:	003fcd06 	br	4000c3a8 <__alt_data_end+0xc000c3a8>
    return 1;
}

void set_cpu_read_flag(int value)
{
    uint32_t noc_ctrl_value = RD_PIO(NOC_CTRL_BASE);
4000c474:	30800037 	ldwio	r2,0(r6)
    }
    else
    {
    	noc_ctrl_value &= (~CPU_RX_CTRL);
    }
    WR_PIO(NOC_CTRL_BASE, noc_ctrl_value);
4000c478:	13c4703a 	and	r2,r2,r15
4000c47c:	30800035 	stwio	r2,0(r6)
4000c480:	003fc906 	br	4000c3a8 <__alt_data_end+0xc000c3a8>
//		}

    }
    
    return 0;
}
4000c484:	0005883a 	mov	r2,zero
4000c488:	dfc00517 	ldw	ra,20(sp)
4000c48c:	dd000417 	ldw	r20,16(sp)
4000c490:	dcc00317 	ldw	r19,12(sp)
4000c494:	dc800217 	ldw	r18,8(sp)
4000c498:	dc400117 	ldw	r17,4(sp)
4000c49c:	dc000017 	ldw	r16,0(sp)
4000c4a0:	dec00604 	addi	sp,sp,24
4000c4a4:	f800283a 	ret

4000c4a8 <print_rx_buffer>:


void print_rx_buffer(){
4000c4a8:	defffb04 	addi	sp,sp,-20
4000c4ac:	dc000015 	stw	r16,0(sp)
4000c4b0:	041000b4 	movhi	r16,16386
4000c4b4:	dcc00315 	stw	r19,12(sp)
4000c4b8:	84306f04 	addi	r16,r16,-15940
4000c4bc:	04d000f4 	movhi	r19,16387
4000c4c0:	dc800215 	stw	r18,8(sp)
4000c4c4:	dc400115 	stw	r17,4(sp)
4000c4c8:	dfc00415 	stw	ra,16(sp)
4000c4cc:	9cf56f04 	addi	r19,r19,-10820
	for(int i = 0; i < MAX_PACKETS; i++){
4000c4d0:	0025883a 	mov	r18,zero
4000c4d4:	84400204 	addi	r17,r16,8
		printf("    packet[%d]\n", i);
4000c4d8:	011000b4 	movhi	r4,16386
4000c4dc:	900b883a 	mov	r5,r18
4000c4e0:	2129d704 	addi	r4,r4,-22692
4000c4e4:	000ef680 	call	4000ef68 <printf>
4000c4e8:	84004504 	addi	r16,r16,276
		printf("    flits: %d\n",the_buffer.the_packets[i].num_flits);
4000c4ec:	817fbb17 	ldw	r5,-276(r16)
4000c4f0:	011000b4 	movhi	r4,16386
4000c4f4:	2129db04 	addi	r4,r4,-22676
4000c4f8:	000ef680 	call	4000ef68 <printf>
4000c4fc:	8c404504 	addi	r17,r17,276
		printf("    identifier: %d\n", the_buffer.the_packets[i].identifier);
4000c500:	897fbb17 	ldw	r5,-276(r17)
4000c504:	011000b4 	movhi	r4,16386
4000c508:	2129df04 	addi	r4,r4,-22660
    return 0;
}


void print_rx_buffer(){
	for(int i = 0; i < MAX_PACKETS; i++){
4000c50c:	94800044 	addi	r18,r18,1
		printf("    packet[%d]\n", i);
		printf("    flits: %d\n",the_buffer.the_packets[i].num_flits);
		printf("    identifier: %d\n", the_buffer.the_packets[i].identifier);
4000c510:	000ef680 	call	4000ef68 <printf>
    return 0;
}


void print_rx_buffer(){
	for(int i = 0; i < MAX_PACKETS; i++){
4000c514:	84fff01e 	bne	r16,r19,4000c4d8 <__alt_data_end+0xc000c4d8>
		printf("    identifier: %d\n", the_buffer.the_packets[i].identifier);
		//for(int j = 0; j < the_buffer.the_packets[i].num_flits; j++){
		//	printf("        %016llx\n", the_buffer.the_packets[i].data.flit[j]);
		//}
	}
}
4000c518:	dfc00417 	ldw	ra,16(sp)
4000c51c:	dcc00317 	ldw	r19,12(sp)
4000c520:	dc800217 	ldw	r18,8(sp)
4000c524:	dc400117 	ldw	r17,4(sp)
4000c528:	dc000017 	ldw	r16,0(sp)
4000c52c:	dec00504 	addi	sp,sp,20
4000c530:	f800283a 	ret

4000c534 <get_packet_pointer_by_id>:

packet* get_packet_pointer_by_id(uint32_t id){
	if(the_buffer.the_packets[id].identifier == id){
4000c534:	20804524 	muli	r2,r4,276
4000c538:	00d000b4 	movhi	r3,16386
4000c53c:	18f02d04 	addi	r3,r3,-16204
4000c540:	1885883a 	add	r2,r3,r2
4000c544:	10c04417 	ldw	r3,272(r2)
4000c548:	20c0011e 	bne	r4,r3,4000c550 <get_packet_pointer_by_id+0x1c>
		return &(the_buffer.the_packets[id]);
	}
	return (void *)0;
}
4000c54c:	f800283a 	ret

packet* get_packet_pointer_by_id(uint32_t id){
	if(the_buffer.the_packets[id].identifier == id){
		return &(the_buffer.the_packets[id]);
	}
	return (void *)0;
4000c550:	0005883a 	mov	r2,zero
}
4000c554:	f800283a 	ret

4000c558 <rx_packet_by_id_no_block>:

packet* rx_packet_by_id_no_block(uint32_t id, uint32_t trys){
4000c558:	defffe04 	addi	sp,sp,-8
4000c55c:	dc000015 	stw	r16,0(sp)
}


uint32_t get_buffer_rx_state()
{
    uint32_t state = RD_PIO(NOC_STS_BASE);
4000c560:	00843004 	movi	r2,4288
		return &(the_buffer.the_packets[id]);
	}
	return (void *)0;
}

packet* rx_packet_by_id_no_block(uint32_t id, uint32_t trys){
4000c564:	2021883a 	mov	r16,r4
4000c568:	dfc00115 	stw	ra,4(sp)
}


uint32_t get_buffer_rx_state()
{
    uint32_t state = RD_PIO(NOC_STS_BASE);
4000c56c:	10800037 	ldwio	r2,0(r2)
	}
	return (void *)0;
}

packet* rx_packet_by_id_no_block(uint32_t id, uint32_t trys){
	if(get_buffer_rx_state() != BUFFER_IDLE){
4000c570:	10803fcc 	andi	r2,r2,255
4000c574:	10000a1e 	bne	r2,zero,4000c5a0 <rx_packet_by_id_no_block+0x48>
		//}
	}
}

packet* get_packet_pointer_by_id(uint32_t id){
	if(the_buffer.the_packets[id].identifier == id){
4000c578:	80804524 	muli	r2,r16,276
4000c57c:	00d000b4 	movhi	r3,16386
4000c580:	18f02d04 	addi	r3,r3,-16204
4000c584:	1885883a 	add	r2,r3,r2
4000c588:	10c04417 	ldw	r3,272(r2)
4000c58c:	1c00071e 	bne	r3,r16,4000c5ac <rx_packet_by_id_no_block+0x54>
packet* rx_packet_by_id_no_block(uint32_t id, uint32_t trys){
	if(get_buffer_rx_state() != BUFFER_IDLE){
		buffers_loop(trys);
	}
	return get_packet_pointer_by_id(id);
}
4000c590:	dfc00117 	ldw	ra,4(sp)
4000c594:	dc000017 	ldw	r16,0(sp)
4000c598:	dec00204 	addi	sp,sp,8
4000c59c:	f800283a 	ret
	return (void *)0;
}

packet* rx_packet_by_id_no_block(uint32_t id, uint32_t trys){
	if(get_buffer_rx_state() != BUFFER_IDLE){
		buffers_loop(trys);
4000c5a0:	2809883a 	mov	r4,r5
4000c5a4:	000c3500 	call	4000c350 <buffers_loop>
4000c5a8:	003ff306 	br	4000c578 <__alt_data_end+0xc000c578>

packet* get_packet_pointer_by_id(uint32_t id){
	if(the_buffer.the_packets[id].identifier == id){
		return &(the_buffer.the_packets[id]);
	}
	return (void *)0;
4000c5ac:	0005883a 	mov	r2,zero
packet* rx_packet_by_id_no_block(uint32_t id, uint32_t trys){
	if(get_buffer_rx_state() != BUFFER_IDLE){
		buffers_loop(trys);
	}
	return get_packet_pointer_by_id(id);
}
4000c5b0:	dfc00117 	ldw	ra,4(sp)
4000c5b4:	dc000017 	ldw	r16,0(sp)
4000c5b8:	dec00204 	addi	sp,sp,8
4000c5bc:	f800283a 	ret

4000c5c0 <remove_packet_with_id>:

void remove_packet_with_id(int id){
	int move_packets = 0;

	the_buffer.the_packets[id].num_flits  = 0;
4000c5c0:	21004524 	muli	r4,r4,276
4000c5c4:	009000b4 	movhi	r2,16386
4000c5c8:	10b02d04 	addi	r2,r2,-16204
4000c5cc:	1109883a 	add	r4,r2,r4
	the_buffer.the_packets[id].identifier = -1;
4000c5d0:	00bfffc4 	movi	r2,-1
}

void remove_packet_with_id(int id){
	int move_packets = 0;

	the_buffer.the_packets[id].num_flits  = 0;
4000c5d4:	20004215 	stw	zero,264(r4)
	the_buffer.the_packets[id].identifier = -1;
4000c5d8:	20804415 	stw	r2,272(r4)
4000c5dc:	f800283a 	ret

4000c5e0 <perf_enable>:
perf_entry *perf_data=NULL;
perf_entry *perf_current=NULL;
INT64 perf_last_clock;


void perf_enable() {
4000c5e0:	deffff04 	addi	sp,sp,-4
  perf_data=calloc(HASH_SIZE,sizeof(perf_entry));
4000c5e4:	01400304 	movi	r5,12
4000c5e8:	01010004 	movi	r4,1024
perf_entry *perf_data=NULL;
perf_entry *perf_current=NULL;
INT64 perf_last_clock;


void perf_enable() {
4000c5ec:	dfc00015 	stw	ra,0(sp)
  perf_data=calloc(HASH_SIZE,sizeof(perf_entry));
4000c5f0:	000e3b80 	call	4000e3b8 <calloc>
4000c5f4:	d0a2c815 	stw	r2,-29920(gp)
  perf_last_clock=0L;
4000c5f8:	d022c915 	stw	zero,-29916(gp)
4000c5fc:	d022ca15 	stw	zero,-29912(gp)
}
4000c600:	dfc00017 	ldw	ra,0(sp)
4000c604:	dec00104 	addi	sp,sp,4
4000c608:	f800283a 	ret

4000c60c <perf_enter>:

void perf_enter(char *section) {
  INT64 now; 
  if(!perf_data) return;
4000c60c:	d262c817 	ldw	r9,-29920(gp)
4000c610:	48001426 	beq	r9,zero,4000c664 <perf_enter+0x58>
    "=d" (((unsigned int *)(&now))[1]));
#else
  now=0;
#endif

  if(perf_current) perf_current->clocks+=now-perf_last_clock;
4000c614:	d0e2c717 	ldw	r3,-29924(gp)
4000c618:	18000a26 	beq	r3,zero,4000c644 <perf_enter+0x38>
4000c61c:	19400117 	ldw	r5,4(r3)
4000c620:	d1e2c917 	ldw	r7,-29916(gp)
4000c624:	19800217 	ldw	r6,8(r3)
4000c628:	29cfc83a 	sub	r7,r5,r7
4000c62c:	29d1803a 	cmpltu	r8,r5,r7
4000c630:	d162ca17 	ldw	r5,-29912(gp)
4000c634:	19c00115 	stw	r7,4(r3)
4000c638:	314bc83a 	sub	r5,r6,r5
4000c63c:	2a0bc83a 	sub	r5,r5,r8
4000c640:	19400215 	stw	r5,8(r3)
  perf_current=&perf_data[(((unsigned int)section)+HASH_OFFSET)&HASH_MOD];
4000c644:	2080bb44 	addi	r2,r4,749
4000c648:	1080ffcc 	andi	r2,r2,1023
4000c64c:	10800324 	muli	r2,r2,12
4000c650:	4885883a 	add	r2,r9,r2
4000c654:	d0a2c715 	stw	r2,-29924(gp)
  perf_current->name=section;
4000c658:	11000015 	stw	r4,0(r2)
  perf_last_clock=now;
4000c65c:	d022c915 	stw	zero,-29916(gp)
4000c660:	d022ca15 	stw	zero,-29912(gp)
4000c664:	f800283a 	ret

4000c668 <perf_summarize>:
}

void perf_summarize() {
4000c668:	defff304 	addi	sp,sp,-52
4000c66c:	dc800515 	stw	r18,20(sp)
  INT64 total;
  int i;
  perf_entry *e;
  if(!perf_data) return;
4000c670:	d4a2c817 	ldw	r18,-29920(gp)
  perf_current=&perf_data[(((unsigned int)section)+HASH_OFFSET)&HASH_MOD];
  perf_current->name=section;
  perf_last_clock=now;
}

void perf_summarize() {
4000c674:	dfc00c15 	stw	ra,48(sp)
4000c678:	df000b15 	stw	fp,44(sp)
4000c67c:	ddc00a15 	stw	r23,40(sp)
4000c680:	dd800915 	stw	r22,36(sp)
4000c684:	dd400815 	stw	r21,32(sp)
4000c688:	dd000715 	stw	r20,28(sp)
4000c68c:	dcc00615 	stw	r19,24(sp)
4000c690:	dc400415 	stw	r17,16(sp)
4000c694:	dc000315 	stw	r16,12(sp)
  INT64 total;
  int i;
  perf_entry *e;
  if(!perf_data) return;
4000c698:	90004426 	beq	r18,zero,4000c7ac <perf_summarize+0x144>
    "=d" (((unsigned int *)(&now))[1]));
#else
  now=0;
#endif

  if(perf_current) perf_current->clocks+=now-perf_last_clock;
4000c69c:	d0a2c717 	ldw	r2,-29924(gp)
4000c6a0:	10000a26 	beq	r2,zero,4000c6cc <perf_summarize+0x64>
4000c6a4:	10c00117 	ldw	r3,4(r2)
4000c6a8:	d162c917 	ldw	r5,-29916(gp)
4000c6ac:	11000217 	ldw	r4,8(r2)
4000c6b0:	194bc83a 	sub	r5,r3,r5
4000c6b4:	194d803a 	cmpltu	r6,r3,r5
4000c6b8:	d0e2ca17 	ldw	r3,-29912(gp)
4000c6bc:	11400115 	stw	r5,4(r2)
4000c6c0:	20c7c83a 	sub	r3,r4,r3
4000c6c4:	1987c83a 	sub	r3,r3,r6
4000c6c8:	10c00215 	stw	r3,8(r2)
  perf_current=&perf_data[(((unsigned int)section)+HASH_OFFSET)&HASH_MOD];
4000c6cc:	9088c704 	addi	r2,r18,8988
4000c6d0:	94c00104 	addi	r19,r18,4
4000c6d4:	d0a2c715 	stw	r2,-29924(gp)
  perf_current->name=section;
4000c6d8:	9008c715 	stw	zero,8988(r18)
  perf_last_clock=now;
4000c6dc:	d022c915 	stw	zero,-29916(gp)
4000c6e0:	d022ca15 	stw	zero,-29912(gp)
4000c6e4:	918c0104 	addi	r6,r18,12292
4000c6e8:	9807883a 	mov	r3,r19
  int i;
  perf_entry *e;
  if(!perf_data) return;

  perf_enter(NULL);
  for(e=perf_data, i=HASH_SIZE, total=0; i; --i)
4000c6ec:	0005883a 	mov	r2,zero
4000c6f0:	000b883a 	mov	r5,zero
    total+=(e++)->clocks;
4000c6f4:	1c400017 	ldw	r17,0(r3)
4000c6f8:	19000117 	ldw	r4,4(r3)
4000c6fc:	18c00304 	addi	r3,r3,12
4000c700:	1463883a 	add	r17,r2,r17
4000c704:	8885803a 	cmpltu	r2,r17,r2
4000c708:	2921883a 	add	r16,r5,r4
4000c70c:	1421883a 	add	r16,r2,r16
4000c710:	800b883a 	mov	r5,r16
4000c714:	8805883a 	mov	r2,r17
  int i;
  perf_entry *e;
  if(!perf_data) return;

  perf_enter(NULL);
  for(e=perf_data, i=HASH_SIZE, total=0; i; --i)
4000c718:	19bff61e 	bne	r3,r6,4000c6f4 <__alt_data_end+0xc000c6f4>
4000c71c:	908c0004 	addi	r2,r18,12288
4000c720:	d8800215 	stw	r2,8(sp)
    total+=(e++)->clocks;
  for(e=perf_data, i=HASH_SIZE; i; --i, ++e)
    if(e->name)
4000c724:	95000017 	ldw	r20,0(r18)
  if(!perf_data) return;

  perf_enter(NULL);
  for(e=perf_data, i=HASH_SIZE, total=0; i; --i)
    total+=(e++)->clocks;
  for(e=perf_data, i=HASH_SIZE; i; --i, ++e)
4000c728:	94800304 	addi	r18,r18,12
    if(e->name)
4000c72c:	a0001c26 	beq	r20,zero,4000c7a0 <perf_summarize+0x138>
      printf("%20.0f |%6.2f%% | %s\n",(double)e->clocks,(100.0*e->clocks/total),e->name);
4000c730:	99000017 	ldw	r4,0(r19)
4000c734:	99400117 	ldw	r5,4(r19)
4000c738:	000c7dc0 	call	4000c7dc <__floatundidf>
4000c73c:	000d883a 	mov	r6,zero
4000c740:	01d01674 	movhi	r7,16473
4000c744:	1009883a 	mov	r4,r2
4000c748:	180b883a 	mov	r5,r3
4000c74c:	102d883a 	mov	r22,r2
4000c750:	182b883a 	mov	r21,r3
4000c754:	000db940 	call	4000db94 <__muldf3>
4000c758:	8809883a 	mov	r4,r17
4000c75c:	800b883a 	mov	r5,r16
4000c760:	1039883a 	mov	fp,r2
4000c764:	182f883a 	mov	r23,r3
4000c768:	000c7dc0 	call	4000c7dc <__floatundidf>
4000c76c:	100d883a 	mov	r6,r2
4000c770:	180f883a 	mov	r7,r3
4000c774:	e009883a 	mov	r4,fp
4000c778:	b80b883a 	mov	r5,r23
4000c77c:	000d2ac0 	call	4000d2ac <__divdf3>
4000c780:	011000b4 	movhi	r4,16386
4000c784:	2129e404 	addi	r4,r4,-22640
4000c788:	dd000115 	stw	r20,4(sp)
4000c78c:	d8c00015 	stw	r3,0(sp)
4000c790:	100f883a 	mov	r7,r2
4000c794:	b00b883a 	mov	r5,r22
4000c798:	a80d883a 	mov	r6,r21
4000c79c:	000ef680 	call	4000ef68 <printf>
  if(!perf_data) return;

  perf_enter(NULL);
  for(e=perf_data, i=HASH_SIZE, total=0; i; --i)
    total+=(e++)->clocks;
  for(e=perf_data, i=HASH_SIZE; i; --i, ++e)
4000c7a0:	d8800217 	ldw	r2,8(sp)
4000c7a4:	9cc00304 	addi	r19,r19,12
4000c7a8:	14bfde1e 	bne	r2,r18,4000c724 <__alt_data_end+0xc000c724>
    if(e->name)
      printf("%20.0f |%6.2f%% | %s\n",(double)e->clocks,(100.0*e->clocks/total),e->name);
}
4000c7ac:	dfc00c17 	ldw	ra,48(sp)
4000c7b0:	df000b17 	ldw	fp,44(sp)
4000c7b4:	ddc00a17 	ldw	r23,40(sp)
4000c7b8:	dd800917 	ldw	r22,36(sp)
4000c7bc:	dd400817 	ldw	r21,32(sp)
4000c7c0:	dd000717 	ldw	r20,28(sp)
4000c7c4:	dcc00617 	ldw	r19,24(sp)
4000c7c8:	dc800517 	ldw	r18,20(sp)
4000c7cc:	dc400417 	ldw	r17,16(sp)
4000c7d0:	dc000317 	ldw	r16,12(sp)
4000c7d4:	dec00d04 	addi	sp,sp,52
4000c7d8:	f800283a 	ret

4000c7dc <__floatundidf>:
4000c7dc:	defffc04 	addi	sp,sp,-16
4000c7e0:	dc800215 	stw	r18,8(sp)
4000c7e4:	2025883a 	mov	r18,r4
4000c7e8:	2809883a 	mov	r4,r5
4000c7ec:	dfc00315 	stw	ra,12(sp)
4000c7f0:	dc400115 	stw	r17,4(sp)
4000c7f4:	dc000015 	stw	r16,0(sp)
4000c7f8:	000e2ac0 	call	4000e2ac <__floatunsidf>
4000c7fc:	000d883a 	mov	r6,zero
4000c800:	01d07c34 	movhi	r7,16880
4000c804:	180b883a 	mov	r5,r3
4000c808:	1009883a 	mov	r4,r2
4000c80c:	000db940 	call	4000db94 <__muldf3>
4000c810:	9009883a 	mov	r4,r18
4000c814:	1023883a 	mov	r17,r2
4000c818:	1821883a 	mov	r16,r3
4000c81c:	000e2ac0 	call	4000e2ac <__floatunsidf>
4000c820:	880d883a 	mov	r6,r17
4000c824:	800f883a 	mov	r7,r16
4000c828:	1009883a 	mov	r4,r2
4000c82c:	180b883a 	mov	r5,r3
4000c830:	000ca000 	call	4000ca00 <__adddf3>
4000c834:	dfc00317 	ldw	ra,12(sp)
4000c838:	dc800217 	ldw	r18,8(sp)
4000c83c:	dc400117 	ldw	r17,4(sp)
4000c840:	dc000017 	ldw	r16,0(sp)
4000c844:	dec00404 	addi	sp,sp,16
4000c848:	f800283a 	ret

4000c84c <__divsi3>:
4000c84c:	20001b16 	blt	r4,zero,4000c8bc <__divsi3+0x70>
4000c850:	000f883a 	mov	r7,zero
4000c854:	28001616 	blt	r5,zero,4000c8b0 <__divsi3+0x64>
4000c858:	200d883a 	mov	r6,r4
4000c85c:	29001a2e 	bgeu	r5,r4,4000c8c8 <__divsi3+0x7c>
4000c860:	00800804 	movi	r2,32
4000c864:	00c00044 	movi	r3,1
4000c868:	00000106 	br	4000c870 <__divsi3+0x24>
4000c86c:	10000d26 	beq	r2,zero,4000c8a4 <__divsi3+0x58>
4000c870:	294b883a 	add	r5,r5,r5
4000c874:	10bfffc4 	addi	r2,r2,-1
4000c878:	18c7883a 	add	r3,r3,r3
4000c87c:	293ffb36 	bltu	r5,r4,4000c86c <__alt_data_end+0xc000c86c>
4000c880:	0005883a 	mov	r2,zero
4000c884:	18000726 	beq	r3,zero,4000c8a4 <__divsi3+0x58>
4000c888:	0005883a 	mov	r2,zero
4000c88c:	31400236 	bltu	r6,r5,4000c898 <__divsi3+0x4c>
4000c890:	314dc83a 	sub	r6,r6,r5
4000c894:	10c4b03a 	or	r2,r2,r3
4000c898:	1806d07a 	srli	r3,r3,1
4000c89c:	280ad07a 	srli	r5,r5,1
4000c8a0:	183ffa1e 	bne	r3,zero,4000c88c <__alt_data_end+0xc000c88c>
4000c8a4:	38000126 	beq	r7,zero,4000c8ac <__divsi3+0x60>
4000c8a8:	0085c83a 	sub	r2,zero,r2
4000c8ac:	f800283a 	ret
4000c8b0:	014bc83a 	sub	r5,zero,r5
4000c8b4:	39c0005c 	xori	r7,r7,1
4000c8b8:	003fe706 	br	4000c858 <__alt_data_end+0xc000c858>
4000c8bc:	0109c83a 	sub	r4,zero,r4
4000c8c0:	01c00044 	movi	r7,1
4000c8c4:	003fe306 	br	4000c854 <__alt_data_end+0xc000c854>
4000c8c8:	00c00044 	movi	r3,1
4000c8cc:	003fee06 	br	4000c888 <__alt_data_end+0xc000c888>

4000c8d0 <__modsi3>:
4000c8d0:	20001716 	blt	r4,zero,4000c930 <__modsi3+0x60>
4000c8d4:	000f883a 	mov	r7,zero
4000c8d8:	2005883a 	mov	r2,r4
4000c8dc:	28001216 	blt	r5,zero,4000c928 <__modsi3+0x58>
4000c8e0:	2900162e 	bgeu	r5,r4,4000c93c <__modsi3+0x6c>
4000c8e4:	01800804 	movi	r6,32
4000c8e8:	00c00044 	movi	r3,1
4000c8ec:	00000106 	br	4000c8f4 <__modsi3+0x24>
4000c8f0:	30000a26 	beq	r6,zero,4000c91c <__modsi3+0x4c>
4000c8f4:	294b883a 	add	r5,r5,r5
4000c8f8:	31bfffc4 	addi	r6,r6,-1
4000c8fc:	18c7883a 	add	r3,r3,r3
4000c900:	293ffb36 	bltu	r5,r4,4000c8f0 <__alt_data_end+0xc000c8f0>
4000c904:	18000526 	beq	r3,zero,4000c91c <__modsi3+0x4c>
4000c908:	1806d07a 	srli	r3,r3,1
4000c90c:	11400136 	bltu	r2,r5,4000c914 <__modsi3+0x44>
4000c910:	1145c83a 	sub	r2,r2,r5
4000c914:	280ad07a 	srli	r5,r5,1
4000c918:	183ffb1e 	bne	r3,zero,4000c908 <__alt_data_end+0xc000c908>
4000c91c:	38000126 	beq	r7,zero,4000c924 <__modsi3+0x54>
4000c920:	0085c83a 	sub	r2,zero,r2
4000c924:	f800283a 	ret
4000c928:	014bc83a 	sub	r5,zero,r5
4000c92c:	003fec06 	br	4000c8e0 <__alt_data_end+0xc000c8e0>
4000c930:	0109c83a 	sub	r4,zero,r4
4000c934:	01c00044 	movi	r7,1
4000c938:	003fe706 	br	4000c8d8 <__alt_data_end+0xc000c8d8>
4000c93c:	00c00044 	movi	r3,1
4000c940:	003ff106 	br	4000c908 <__alt_data_end+0xc000c908>

4000c944 <__udivsi3>:
4000c944:	200d883a 	mov	r6,r4
4000c948:	2900152e 	bgeu	r5,r4,4000c9a0 <__udivsi3+0x5c>
4000c94c:	28001416 	blt	r5,zero,4000c9a0 <__udivsi3+0x5c>
4000c950:	00800804 	movi	r2,32
4000c954:	00c00044 	movi	r3,1
4000c958:	00000206 	br	4000c964 <__udivsi3+0x20>
4000c95c:	10000e26 	beq	r2,zero,4000c998 <__udivsi3+0x54>
4000c960:	28000516 	blt	r5,zero,4000c978 <__udivsi3+0x34>
4000c964:	294b883a 	add	r5,r5,r5
4000c968:	10bfffc4 	addi	r2,r2,-1
4000c96c:	18c7883a 	add	r3,r3,r3
4000c970:	293ffa36 	bltu	r5,r4,4000c95c <__alt_data_end+0xc000c95c>
4000c974:	18000826 	beq	r3,zero,4000c998 <__udivsi3+0x54>
4000c978:	0005883a 	mov	r2,zero
4000c97c:	31400236 	bltu	r6,r5,4000c988 <__udivsi3+0x44>
4000c980:	314dc83a 	sub	r6,r6,r5
4000c984:	10c4b03a 	or	r2,r2,r3
4000c988:	1806d07a 	srli	r3,r3,1
4000c98c:	280ad07a 	srli	r5,r5,1
4000c990:	183ffa1e 	bne	r3,zero,4000c97c <__alt_data_end+0xc000c97c>
4000c994:	f800283a 	ret
4000c998:	0005883a 	mov	r2,zero
4000c99c:	f800283a 	ret
4000c9a0:	00c00044 	movi	r3,1
4000c9a4:	003ff406 	br	4000c978 <__alt_data_end+0xc000c978>

4000c9a8 <__umodsi3>:
4000c9a8:	2005883a 	mov	r2,r4
4000c9ac:	2900122e 	bgeu	r5,r4,4000c9f8 <__umodsi3+0x50>
4000c9b0:	28001116 	blt	r5,zero,4000c9f8 <__umodsi3+0x50>
4000c9b4:	01800804 	movi	r6,32
4000c9b8:	00c00044 	movi	r3,1
4000c9bc:	00000206 	br	4000c9c8 <__umodsi3+0x20>
4000c9c0:	30000c26 	beq	r6,zero,4000c9f4 <__umodsi3+0x4c>
4000c9c4:	28000516 	blt	r5,zero,4000c9dc <__umodsi3+0x34>
4000c9c8:	294b883a 	add	r5,r5,r5
4000c9cc:	31bfffc4 	addi	r6,r6,-1
4000c9d0:	18c7883a 	add	r3,r3,r3
4000c9d4:	293ffa36 	bltu	r5,r4,4000c9c0 <__alt_data_end+0xc000c9c0>
4000c9d8:	18000626 	beq	r3,zero,4000c9f4 <__umodsi3+0x4c>
4000c9dc:	1806d07a 	srli	r3,r3,1
4000c9e0:	11400136 	bltu	r2,r5,4000c9e8 <__umodsi3+0x40>
4000c9e4:	1145c83a 	sub	r2,r2,r5
4000c9e8:	280ad07a 	srli	r5,r5,1
4000c9ec:	183ffb1e 	bne	r3,zero,4000c9dc <__alt_data_end+0xc000c9dc>
4000c9f0:	f800283a 	ret
4000c9f4:	f800283a 	ret
4000c9f8:	00c00044 	movi	r3,1
4000c9fc:	003ff706 	br	4000c9dc <__alt_data_end+0xc000c9dc>

4000ca00 <__adddf3>:
4000ca00:	02c00434 	movhi	r11,16
4000ca04:	5affffc4 	addi	r11,r11,-1
4000ca08:	2806d7fa 	srli	r3,r5,31
4000ca0c:	2ad4703a 	and	r10,r5,r11
4000ca10:	3ad2703a 	and	r9,r7,r11
4000ca14:	3804d53a 	srli	r2,r7,20
4000ca18:	3018d77a 	srli	r12,r6,29
4000ca1c:	280ad53a 	srli	r5,r5,20
4000ca20:	501490fa 	slli	r10,r10,3
4000ca24:	2010d77a 	srli	r8,r4,29
4000ca28:	481290fa 	slli	r9,r9,3
4000ca2c:	380ed7fa 	srli	r7,r7,31
4000ca30:	defffb04 	addi	sp,sp,-20
4000ca34:	dc800215 	stw	r18,8(sp)
4000ca38:	dc400115 	stw	r17,4(sp)
4000ca3c:	dc000015 	stw	r16,0(sp)
4000ca40:	dfc00415 	stw	ra,16(sp)
4000ca44:	dcc00315 	stw	r19,12(sp)
4000ca48:	1c803fcc 	andi	r18,r3,255
4000ca4c:	2c01ffcc 	andi	r16,r5,2047
4000ca50:	5210b03a 	or	r8,r10,r8
4000ca54:	202290fa 	slli	r17,r4,3
4000ca58:	1081ffcc 	andi	r2,r2,2047
4000ca5c:	4b12b03a 	or	r9,r9,r12
4000ca60:	300c90fa 	slli	r6,r6,3
4000ca64:	91c07526 	beq	r18,r7,4000cc3c <__adddf3+0x23c>
4000ca68:	8087c83a 	sub	r3,r16,r2
4000ca6c:	00c0ab0e 	bge	zero,r3,4000cd1c <__adddf3+0x31c>
4000ca70:	10002a1e 	bne	r2,zero,4000cb1c <__adddf3+0x11c>
4000ca74:	4984b03a 	or	r2,r9,r6
4000ca78:	1000961e 	bne	r2,zero,4000ccd4 <__adddf3+0x2d4>
4000ca7c:	888001cc 	andi	r2,r17,7
4000ca80:	10000726 	beq	r2,zero,4000caa0 <__adddf3+0xa0>
4000ca84:	888003cc 	andi	r2,r17,15
4000ca88:	00c00104 	movi	r3,4
4000ca8c:	10c00426 	beq	r2,r3,4000caa0 <__adddf3+0xa0>
4000ca90:	88c7883a 	add	r3,r17,r3
4000ca94:	1c63803a 	cmpltu	r17,r3,r17
4000ca98:	4451883a 	add	r8,r8,r17
4000ca9c:	1823883a 	mov	r17,r3
4000caa0:	4080202c 	andhi	r2,r8,128
4000caa4:	10005926 	beq	r2,zero,4000cc0c <__adddf3+0x20c>
4000caa8:	84000044 	addi	r16,r16,1
4000caac:	0081ffc4 	movi	r2,2047
4000cab0:	8080ba26 	beq	r16,r2,4000cd9c <__adddf3+0x39c>
4000cab4:	00bfe034 	movhi	r2,65408
4000cab8:	10bfffc4 	addi	r2,r2,-1
4000cabc:	4090703a 	and	r8,r8,r2
4000cac0:	4004977a 	slli	r2,r8,29
4000cac4:	4010927a 	slli	r8,r8,9
4000cac8:	8822d0fa 	srli	r17,r17,3
4000cacc:	8401ffcc 	andi	r16,r16,2047
4000cad0:	4010d33a 	srli	r8,r8,12
4000cad4:	9007883a 	mov	r3,r18
4000cad8:	1444b03a 	or	r2,r2,r17
4000cadc:	8401ffcc 	andi	r16,r16,2047
4000cae0:	8020953a 	slli	r16,r16,20
4000cae4:	18c03fcc 	andi	r3,r3,255
4000cae8:	01000434 	movhi	r4,16
4000caec:	213fffc4 	addi	r4,r4,-1
4000caf0:	180697fa 	slli	r3,r3,31
4000caf4:	4110703a 	and	r8,r8,r4
4000caf8:	4410b03a 	or	r8,r8,r16
4000cafc:	40c6b03a 	or	r3,r8,r3
4000cb00:	dfc00417 	ldw	ra,16(sp)
4000cb04:	dcc00317 	ldw	r19,12(sp)
4000cb08:	dc800217 	ldw	r18,8(sp)
4000cb0c:	dc400117 	ldw	r17,4(sp)
4000cb10:	dc000017 	ldw	r16,0(sp)
4000cb14:	dec00504 	addi	sp,sp,20
4000cb18:	f800283a 	ret
4000cb1c:	0081ffc4 	movi	r2,2047
4000cb20:	80bfd626 	beq	r16,r2,4000ca7c <__alt_data_end+0xc000ca7c>
4000cb24:	4a402034 	orhi	r9,r9,128
4000cb28:	00800e04 	movi	r2,56
4000cb2c:	10c09f16 	blt	r2,r3,4000cdac <__adddf3+0x3ac>
4000cb30:	008007c4 	movi	r2,31
4000cb34:	10c0c216 	blt	r2,r3,4000ce40 <__adddf3+0x440>
4000cb38:	00800804 	movi	r2,32
4000cb3c:	10c5c83a 	sub	r2,r2,r3
4000cb40:	488a983a 	sll	r5,r9,r2
4000cb44:	30c8d83a 	srl	r4,r6,r3
4000cb48:	3084983a 	sll	r2,r6,r2
4000cb4c:	48c6d83a 	srl	r3,r9,r3
4000cb50:	290cb03a 	or	r6,r5,r4
4000cb54:	1004c03a 	cmpne	r2,r2,zero
4000cb58:	308cb03a 	or	r6,r6,r2
4000cb5c:	898dc83a 	sub	r6,r17,r6
4000cb60:	89a3803a 	cmpltu	r17,r17,r6
4000cb64:	40d1c83a 	sub	r8,r8,r3
4000cb68:	4451c83a 	sub	r8,r8,r17
4000cb6c:	3023883a 	mov	r17,r6
4000cb70:	4080202c 	andhi	r2,r8,128
4000cb74:	10002326 	beq	r2,zero,4000cc04 <__adddf3+0x204>
4000cb78:	04c02034 	movhi	r19,128
4000cb7c:	9cffffc4 	addi	r19,r19,-1
4000cb80:	44e6703a 	and	r19,r8,r19
4000cb84:	98007626 	beq	r19,zero,4000cd60 <__adddf3+0x360>
4000cb88:	9809883a 	mov	r4,r19
4000cb8c:	000e3540 	call	4000e354 <__clzsi2>
4000cb90:	10fffe04 	addi	r3,r2,-8
4000cb94:	010007c4 	movi	r4,31
4000cb98:	20c07716 	blt	r4,r3,4000cd78 <__adddf3+0x378>
4000cb9c:	00800804 	movi	r2,32
4000cba0:	10c5c83a 	sub	r2,r2,r3
4000cba4:	8884d83a 	srl	r2,r17,r2
4000cba8:	98d0983a 	sll	r8,r19,r3
4000cbac:	88e2983a 	sll	r17,r17,r3
4000cbb0:	1204b03a 	or	r2,r2,r8
4000cbb4:	1c007416 	blt	r3,r16,4000cd88 <__adddf3+0x388>
4000cbb8:	1c21c83a 	sub	r16,r3,r16
4000cbbc:	82000044 	addi	r8,r16,1
4000cbc0:	00c007c4 	movi	r3,31
4000cbc4:	1a009116 	blt	r3,r8,4000ce0c <__adddf3+0x40c>
4000cbc8:	00c00804 	movi	r3,32
4000cbcc:	1a07c83a 	sub	r3,r3,r8
4000cbd0:	8a08d83a 	srl	r4,r17,r8
4000cbd4:	88e2983a 	sll	r17,r17,r3
4000cbd8:	10c6983a 	sll	r3,r2,r3
4000cbdc:	1210d83a 	srl	r8,r2,r8
4000cbe0:	8804c03a 	cmpne	r2,r17,zero
4000cbe4:	1906b03a 	or	r3,r3,r4
4000cbe8:	18a2b03a 	or	r17,r3,r2
4000cbec:	0021883a 	mov	r16,zero
4000cbf0:	003fa206 	br	4000ca7c <__alt_data_end+0xc000ca7c>
4000cbf4:	1890b03a 	or	r8,r3,r2
4000cbf8:	40017d26 	beq	r8,zero,4000d1f0 <__adddf3+0x7f0>
4000cbfc:	1011883a 	mov	r8,r2
4000cc00:	1823883a 	mov	r17,r3
4000cc04:	888001cc 	andi	r2,r17,7
4000cc08:	103f9e1e 	bne	r2,zero,4000ca84 <__alt_data_end+0xc000ca84>
4000cc0c:	4004977a 	slli	r2,r8,29
4000cc10:	8822d0fa 	srli	r17,r17,3
4000cc14:	4010d0fa 	srli	r8,r8,3
4000cc18:	9007883a 	mov	r3,r18
4000cc1c:	1444b03a 	or	r2,r2,r17
4000cc20:	0101ffc4 	movi	r4,2047
4000cc24:	81002426 	beq	r16,r4,4000ccb8 <__adddf3+0x2b8>
4000cc28:	8120703a 	and	r16,r16,r4
4000cc2c:	01000434 	movhi	r4,16
4000cc30:	213fffc4 	addi	r4,r4,-1
4000cc34:	4110703a 	and	r8,r8,r4
4000cc38:	003fa806 	br	4000cadc <__alt_data_end+0xc000cadc>
4000cc3c:	8089c83a 	sub	r4,r16,r2
4000cc40:	01005e0e 	bge	zero,r4,4000cdbc <__adddf3+0x3bc>
4000cc44:	10002b26 	beq	r2,zero,4000ccf4 <__adddf3+0x2f4>
4000cc48:	0081ffc4 	movi	r2,2047
4000cc4c:	80bf8b26 	beq	r16,r2,4000ca7c <__alt_data_end+0xc000ca7c>
4000cc50:	4a402034 	orhi	r9,r9,128
4000cc54:	00800e04 	movi	r2,56
4000cc58:	1100a40e 	bge	r2,r4,4000ceec <__adddf3+0x4ec>
4000cc5c:	498cb03a 	or	r6,r9,r6
4000cc60:	300ac03a 	cmpne	r5,r6,zero
4000cc64:	0013883a 	mov	r9,zero
4000cc68:	2c4b883a 	add	r5,r5,r17
4000cc6c:	2c63803a 	cmpltu	r17,r5,r17
4000cc70:	4a11883a 	add	r8,r9,r8
4000cc74:	8a11883a 	add	r8,r17,r8
4000cc78:	2823883a 	mov	r17,r5
4000cc7c:	4080202c 	andhi	r2,r8,128
4000cc80:	103fe026 	beq	r2,zero,4000cc04 <__alt_data_end+0xc000cc04>
4000cc84:	84000044 	addi	r16,r16,1
4000cc88:	0081ffc4 	movi	r2,2047
4000cc8c:	8080d226 	beq	r16,r2,4000cfd8 <__adddf3+0x5d8>
4000cc90:	00bfe034 	movhi	r2,65408
4000cc94:	10bfffc4 	addi	r2,r2,-1
4000cc98:	4090703a 	and	r8,r8,r2
4000cc9c:	880ad07a 	srli	r5,r17,1
4000cca0:	400897fa 	slli	r4,r8,31
4000cca4:	88c0004c 	andi	r3,r17,1
4000cca8:	28e2b03a 	or	r17,r5,r3
4000ccac:	4010d07a 	srli	r8,r8,1
4000ccb0:	2462b03a 	or	r17,r4,r17
4000ccb4:	003f7106 	br	4000ca7c <__alt_data_end+0xc000ca7c>
4000ccb8:	4088b03a 	or	r4,r8,r2
4000ccbc:	20014526 	beq	r4,zero,4000d1d4 <__adddf3+0x7d4>
4000ccc0:	01000434 	movhi	r4,16
4000ccc4:	42000234 	orhi	r8,r8,8
4000ccc8:	213fffc4 	addi	r4,r4,-1
4000cccc:	4110703a 	and	r8,r8,r4
4000ccd0:	003f8206 	br	4000cadc <__alt_data_end+0xc000cadc>
4000ccd4:	18ffffc4 	addi	r3,r3,-1
4000ccd8:	1800491e 	bne	r3,zero,4000ce00 <__adddf3+0x400>
4000ccdc:	898bc83a 	sub	r5,r17,r6
4000cce0:	8963803a 	cmpltu	r17,r17,r5
4000cce4:	4251c83a 	sub	r8,r8,r9
4000cce8:	4451c83a 	sub	r8,r8,r17
4000ccec:	2823883a 	mov	r17,r5
4000ccf0:	003f9f06 	br	4000cb70 <__alt_data_end+0xc000cb70>
4000ccf4:	4984b03a 	or	r2,r9,r6
4000ccf8:	103f6026 	beq	r2,zero,4000ca7c <__alt_data_end+0xc000ca7c>
4000ccfc:	213fffc4 	addi	r4,r4,-1
4000cd00:	2000931e 	bne	r4,zero,4000cf50 <__adddf3+0x550>
4000cd04:	898d883a 	add	r6,r17,r6
4000cd08:	3463803a 	cmpltu	r17,r6,r17
4000cd0c:	4251883a 	add	r8,r8,r9
4000cd10:	8a11883a 	add	r8,r17,r8
4000cd14:	3023883a 	mov	r17,r6
4000cd18:	003fd806 	br	4000cc7c <__alt_data_end+0xc000cc7c>
4000cd1c:	1800541e 	bne	r3,zero,4000ce70 <__adddf3+0x470>
4000cd20:	80800044 	addi	r2,r16,1
4000cd24:	1081ffcc 	andi	r2,r2,2047
4000cd28:	00c00044 	movi	r3,1
4000cd2c:	1880a00e 	bge	r3,r2,4000cfb0 <__adddf3+0x5b0>
4000cd30:	8989c83a 	sub	r4,r17,r6
4000cd34:	8905803a 	cmpltu	r2,r17,r4
4000cd38:	4267c83a 	sub	r19,r8,r9
4000cd3c:	98a7c83a 	sub	r19,r19,r2
4000cd40:	9880202c 	andhi	r2,r19,128
4000cd44:	10006326 	beq	r2,zero,4000ced4 <__adddf3+0x4d4>
4000cd48:	3463c83a 	sub	r17,r6,r17
4000cd4c:	4a07c83a 	sub	r3,r9,r8
4000cd50:	344d803a 	cmpltu	r6,r6,r17
4000cd54:	19a7c83a 	sub	r19,r3,r6
4000cd58:	3825883a 	mov	r18,r7
4000cd5c:	983f8a1e 	bne	r19,zero,4000cb88 <__alt_data_end+0xc000cb88>
4000cd60:	8809883a 	mov	r4,r17
4000cd64:	000e3540 	call	4000e354 <__clzsi2>
4000cd68:	10800804 	addi	r2,r2,32
4000cd6c:	10fffe04 	addi	r3,r2,-8
4000cd70:	010007c4 	movi	r4,31
4000cd74:	20ff890e 	bge	r4,r3,4000cb9c <__alt_data_end+0xc000cb9c>
4000cd78:	10bff604 	addi	r2,r2,-40
4000cd7c:	8884983a 	sll	r2,r17,r2
4000cd80:	0023883a 	mov	r17,zero
4000cd84:	1c3f8c0e 	bge	r3,r16,4000cbb8 <__alt_data_end+0xc000cbb8>
4000cd88:	023fe034 	movhi	r8,65408
4000cd8c:	423fffc4 	addi	r8,r8,-1
4000cd90:	80e1c83a 	sub	r16,r16,r3
4000cd94:	1210703a 	and	r8,r2,r8
4000cd98:	003f3806 	br	4000ca7c <__alt_data_end+0xc000ca7c>
4000cd9c:	9007883a 	mov	r3,r18
4000cda0:	0011883a 	mov	r8,zero
4000cda4:	0005883a 	mov	r2,zero
4000cda8:	003f4c06 	br	4000cadc <__alt_data_end+0xc000cadc>
4000cdac:	498cb03a 	or	r6,r9,r6
4000cdb0:	300cc03a 	cmpne	r6,r6,zero
4000cdb4:	0007883a 	mov	r3,zero
4000cdb8:	003f6806 	br	4000cb5c <__alt_data_end+0xc000cb5c>
4000cdbc:	20009c1e 	bne	r4,zero,4000d030 <__adddf3+0x630>
4000cdc0:	80800044 	addi	r2,r16,1
4000cdc4:	1141ffcc 	andi	r5,r2,2047
4000cdc8:	01000044 	movi	r4,1
4000cdcc:	2140670e 	bge	r4,r5,4000cf6c <__adddf3+0x56c>
4000cdd0:	0101ffc4 	movi	r4,2047
4000cdd4:	11007f26 	beq	r2,r4,4000cfd4 <__adddf3+0x5d4>
4000cdd8:	898d883a 	add	r6,r17,r6
4000cddc:	4247883a 	add	r3,r8,r9
4000cde0:	3451803a 	cmpltu	r8,r6,r17
4000cde4:	40d1883a 	add	r8,r8,r3
4000cde8:	402297fa 	slli	r17,r8,31
4000cdec:	300cd07a 	srli	r6,r6,1
4000cdf0:	4010d07a 	srli	r8,r8,1
4000cdf4:	1021883a 	mov	r16,r2
4000cdf8:	89a2b03a 	or	r17,r17,r6
4000cdfc:	003f1f06 	br	4000ca7c <__alt_data_end+0xc000ca7c>
4000ce00:	0081ffc4 	movi	r2,2047
4000ce04:	80bf481e 	bne	r16,r2,4000cb28 <__alt_data_end+0xc000cb28>
4000ce08:	003f1c06 	br	4000ca7c <__alt_data_end+0xc000ca7c>
4000ce0c:	843ff844 	addi	r16,r16,-31
4000ce10:	01000804 	movi	r4,32
4000ce14:	1406d83a 	srl	r3,r2,r16
4000ce18:	41005026 	beq	r8,r4,4000cf5c <__adddf3+0x55c>
4000ce1c:	01001004 	movi	r4,64
4000ce20:	2211c83a 	sub	r8,r4,r8
4000ce24:	1204983a 	sll	r2,r2,r8
4000ce28:	88a2b03a 	or	r17,r17,r2
4000ce2c:	8822c03a 	cmpne	r17,r17,zero
4000ce30:	1c62b03a 	or	r17,r3,r17
4000ce34:	0011883a 	mov	r8,zero
4000ce38:	0021883a 	mov	r16,zero
4000ce3c:	003f7106 	br	4000cc04 <__alt_data_end+0xc000cc04>
4000ce40:	193ff804 	addi	r4,r3,-32
4000ce44:	00800804 	movi	r2,32
4000ce48:	4908d83a 	srl	r4,r9,r4
4000ce4c:	18804526 	beq	r3,r2,4000cf64 <__adddf3+0x564>
4000ce50:	00801004 	movi	r2,64
4000ce54:	10c5c83a 	sub	r2,r2,r3
4000ce58:	4886983a 	sll	r3,r9,r2
4000ce5c:	198cb03a 	or	r6,r3,r6
4000ce60:	300cc03a 	cmpne	r6,r6,zero
4000ce64:	218cb03a 	or	r6,r4,r6
4000ce68:	0007883a 	mov	r3,zero
4000ce6c:	003f3b06 	br	4000cb5c <__alt_data_end+0xc000cb5c>
4000ce70:	80002a26 	beq	r16,zero,4000cf1c <__adddf3+0x51c>
4000ce74:	0101ffc4 	movi	r4,2047
4000ce78:	11006826 	beq	r2,r4,4000d01c <__adddf3+0x61c>
4000ce7c:	00c7c83a 	sub	r3,zero,r3
4000ce80:	42002034 	orhi	r8,r8,128
4000ce84:	01000e04 	movi	r4,56
4000ce88:	20c07c16 	blt	r4,r3,4000d07c <__adddf3+0x67c>
4000ce8c:	010007c4 	movi	r4,31
4000ce90:	20c0da16 	blt	r4,r3,4000d1fc <__adddf3+0x7fc>
4000ce94:	01000804 	movi	r4,32
4000ce98:	20c9c83a 	sub	r4,r4,r3
4000ce9c:	4114983a 	sll	r10,r8,r4
4000cea0:	88cad83a 	srl	r5,r17,r3
4000cea4:	8908983a 	sll	r4,r17,r4
4000cea8:	40c6d83a 	srl	r3,r8,r3
4000ceac:	5162b03a 	or	r17,r10,r5
4000ceb0:	2008c03a 	cmpne	r4,r4,zero
4000ceb4:	8922b03a 	or	r17,r17,r4
4000ceb8:	3463c83a 	sub	r17,r6,r17
4000cebc:	48c7c83a 	sub	r3,r9,r3
4000cec0:	344d803a 	cmpltu	r6,r6,r17
4000cec4:	1991c83a 	sub	r8,r3,r6
4000cec8:	1021883a 	mov	r16,r2
4000cecc:	3825883a 	mov	r18,r7
4000ced0:	003f2706 	br	4000cb70 <__alt_data_end+0xc000cb70>
4000ced4:	24d0b03a 	or	r8,r4,r19
4000ced8:	40001b1e 	bne	r8,zero,4000cf48 <__adddf3+0x548>
4000cedc:	0005883a 	mov	r2,zero
4000cee0:	0007883a 	mov	r3,zero
4000cee4:	0021883a 	mov	r16,zero
4000cee8:	003f4d06 	br	4000cc20 <__alt_data_end+0xc000cc20>
4000ceec:	008007c4 	movi	r2,31
4000cef0:	11003c16 	blt	r2,r4,4000cfe4 <__adddf3+0x5e4>
4000cef4:	00800804 	movi	r2,32
4000cef8:	1105c83a 	sub	r2,r2,r4
4000cefc:	488e983a 	sll	r7,r9,r2
4000cf00:	310ad83a 	srl	r5,r6,r4
4000cf04:	3084983a 	sll	r2,r6,r2
4000cf08:	4912d83a 	srl	r9,r9,r4
4000cf0c:	394ab03a 	or	r5,r7,r5
4000cf10:	1004c03a 	cmpne	r2,r2,zero
4000cf14:	288ab03a 	or	r5,r5,r2
4000cf18:	003f5306 	br	4000cc68 <__alt_data_end+0xc000cc68>
4000cf1c:	4448b03a 	or	r4,r8,r17
4000cf20:	20003e26 	beq	r4,zero,4000d01c <__adddf3+0x61c>
4000cf24:	00c6303a 	nor	r3,zero,r3
4000cf28:	18003a1e 	bne	r3,zero,4000d014 <__adddf3+0x614>
4000cf2c:	3463c83a 	sub	r17,r6,r17
4000cf30:	4a07c83a 	sub	r3,r9,r8
4000cf34:	344d803a 	cmpltu	r6,r6,r17
4000cf38:	1991c83a 	sub	r8,r3,r6
4000cf3c:	1021883a 	mov	r16,r2
4000cf40:	3825883a 	mov	r18,r7
4000cf44:	003f0a06 	br	4000cb70 <__alt_data_end+0xc000cb70>
4000cf48:	2023883a 	mov	r17,r4
4000cf4c:	003f0d06 	br	4000cb84 <__alt_data_end+0xc000cb84>
4000cf50:	0081ffc4 	movi	r2,2047
4000cf54:	80bf3f1e 	bne	r16,r2,4000cc54 <__alt_data_end+0xc000cc54>
4000cf58:	003ec806 	br	4000ca7c <__alt_data_end+0xc000ca7c>
4000cf5c:	0005883a 	mov	r2,zero
4000cf60:	003fb106 	br	4000ce28 <__alt_data_end+0xc000ce28>
4000cf64:	0007883a 	mov	r3,zero
4000cf68:	003fbc06 	br	4000ce5c <__alt_data_end+0xc000ce5c>
4000cf6c:	4444b03a 	or	r2,r8,r17
4000cf70:	8000871e 	bne	r16,zero,4000d190 <__adddf3+0x790>
4000cf74:	1000ba26 	beq	r2,zero,4000d260 <__adddf3+0x860>
4000cf78:	4984b03a 	or	r2,r9,r6
4000cf7c:	103ebf26 	beq	r2,zero,4000ca7c <__alt_data_end+0xc000ca7c>
4000cf80:	8985883a 	add	r2,r17,r6
4000cf84:	4247883a 	add	r3,r8,r9
4000cf88:	1451803a 	cmpltu	r8,r2,r17
4000cf8c:	40d1883a 	add	r8,r8,r3
4000cf90:	40c0202c 	andhi	r3,r8,128
4000cf94:	1023883a 	mov	r17,r2
4000cf98:	183f1a26 	beq	r3,zero,4000cc04 <__alt_data_end+0xc000cc04>
4000cf9c:	00bfe034 	movhi	r2,65408
4000cfa0:	10bfffc4 	addi	r2,r2,-1
4000cfa4:	2021883a 	mov	r16,r4
4000cfa8:	4090703a 	and	r8,r8,r2
4000cfac:	003eb306 	br	4000ca7c <__alt_data_end+0xc000ca7c>
4000cfb0:	4444b03a 	or	r2,r8,r17
4000cfb4:	8000291e 	bne	r16,zero,4000d05c <__adddf3+0x65c>
4000cfb8:	10004b1e 	bne	r2,zero,4000d0e8 <__adddf3+0x6e8>
4000cfbc:	4990b03a 	or	r8,r9,r6
4000cfc0:	40008b26 	beq	r8,zero,4000d1f0 <__adddf3+0x7f0>
4000cfc4:	4811883a 	mov	r8,r9
4000cfc8:	3023883a 	mov	r17,r6
4000cfcc:	3825883a 	mov	r18,r7
4000cfd0:	003eaa06 	br	4000ca7c <__alt_data_end+0xc000ca7c>
4000cfd4:	1021883a 	mov	r16,r2
4000cfd8:	0011883a 	mov	r8,zero
4000cfdc:	0005883a 	mov	r2,zero
4000cfe0:	003f0f06 	br	4000cc20 <__alt_data_end+0xc000cc20>
4000cfe4:	217ff804 	addi	r5,r4,-32
4000cfe8:	00800804 	movi	r2,32
4000cfec:	494ad83a 	srl	r5,r9,r5
4000cff0:	20807d26 	beq	r4,r2,4000d1e8 <__adddf3+0x7e8>
4000cff4:	00801004 	movi	r2,64
4000cff8:	1109c83a 	sub	r4,r2,r4
4000cffc:	4912983a 	sll	r9,r9,r4
4000d000:	498cb03a 	or	r6,r9,r6
4000d004:	300cc03a 	cmpne	r6,r6,zero
4000d008:	298ab03a 	or	r5,r5,r6
4000d00c:	0013883a 	mov	r9,zero
4000d010:	003f1506 	br	4000cc68 <__alt_data_end+0xc000cc68>
4000d014:	0101ffc4 	movi	r4,2047
4000d018:	113f9a1e 	bne	r2,r4,4000ce84 <__alt_data_end+0xc000ce84>
4000d01c:	4811883a 	mov	r8,r9
4000d020:	3023883a 	mov	r17,r6
4000d024:	1021883a 	mov	r16,r2
4000d028:	3825883a 	mov	r18,r7
4000d02c:	003e9306 	br	4000ca7c <__alt_data_end+0xc000ca7c>
4000d030:	8000161e 	bne	r16,zero,4000d08c <__adddf3+0x68c>
4000d034:	444ab03a 	or	r5,r8,r17
4000d038:	28005126 	beq	r5,zero,4000d180 <__adddf3+0x780>
4000d03c:	0108303a 	nor	r4,zero,r4
4000d040:	20004d1e 	bne	r4,zero,4000d178 <__adddf3+0x778>
4000d044:	89a3883a 	add	r17,r17,r6
4000d048:	4253883a 	add	r9,r8,r9
4000d04c:	898d803a 	cmpltu	r6,r17,r6
4000d050:	3251883a 	add	r8,r6,r9
4000d054:	1021883a 	mov	r16,r2
4000d058:	003f0806 	br	4000cc7c <__alt_data_end+0xc000cc7c>
4000d05c:	1000301e 	bne	r2,zero,4000d120 <__adddf3+0x720>
4000d060:	4984b03a 	or	r2,r9,r6
4000d064:	10007126 	beq	r2,zero,4000d22c <__adddf3+0x82c>
4000d068:	4811883a 	mov	r8,r9
4000d06c:	3023883a 	mov	r17,r6
4000d070:	3825883a 	mov	r18,r7
4000d074:	0401ffc4 	movi	r16,2047
4000d078:	003e8006 	br	4000ca7c <__alt_data_end+0xc000ca7c>
4000d07c:	4462b03a 	or	r17,r8,r17
4000d080:	8822c03a 	cmpne	r17,r17,zero
4000d084:	0007883a 	mov	r3,zero
4000d088:	003f8b06 	br	4000ceb8 <__alt_data_end+0xc000ceb8>
4000d08c:	0141ffc4 	movi	r5,2047
4000d090:	11403b26 	beq	r2,r5,4000d180 <__adddf3+0x780>
4000d094:	0109c83a 	sub	r4,zero,r4
4000d098:	42002034 	orhi	r8,r8,128
4000d09c:	01400e04 	movi	r5,56
4000d0a0:	29006716 	blt	r5,r4,4000d240 <__adddf3+0x840>
4000d0a4:	014007c4 	movi	r5,31
4000d0a8:	29007016 	blt	r5,r4,4000d26c <__adddf3+0x86c>
4000d0ac:	01400804 	movi	r5,32
4000d0b0:	290bc83a 	sub	r5,r5,r4
4000d0b4:	4154983a 	sll	r10,r8,r5
4000d0b8:	890ed83a 	srl	r7,r17,r4
4000d0bc:	894a983a 	sll	r5,r17,r5
4000d0c0:	4108d83a 	srl	r4,r8,r4
4000d0c4:	51e2b03a 	or	r17,r10,r7
4000d0c8:	280ac03a 	cmpne	r5,r5,zero
4000d0cc:	8962b03a 	or	r17,r17,r5
4000d0d0:	89a3883a 	add	r17,r17,r6
4000d0d4:	2253883a 	add	r9,r4,r9
4000d0d8:	898d803a 	cmpltu	r6,r17,r6
4000d0dc:	3251883a 	add	r8,r6,r9
4000d0e0:	1021883a 	mov	r16,r2
4000d0e4:	003ee506 	br	4000cc7c <__alt_data_end+0xc000cc7c>
4000d0e8:	4984b03a 	or	r2,r9,r6
4000d0ec:	103e6326 	beq	r2,zero,4000ca7c <__alt_data_end+0xc000ca7c>
4000d0f0:	8987c83a 	sub	r3,r17,r6
4000d0f4:	88c9803a 	cmpltu	r4,r17,r3
4000d0f8:	4245c83a 	sub	r2,r8,r9
4000d0fc:	1105c83a 	sub	r2,r2,r4
4000d100:	1100202c 	andhi	r4,r2,128
4000d104:	203ebb26 	beq	r4,zero,4000cbf4 <__alt_data_end+0xc000cbf4>
4000d108:	3463c83a 	sub	r17,r6,r17
4000d10c:	4a07c83a 	sub	r3,r9,r8
4000d110:	344d803a 	cmpltu	r6,r6,r17
4000d114:	1991c83a 	sub	r8,r3,r6
4000d118:	3825883a 	mov	r18,r7
4000d11c:	003e5706 	br	4000ca7c <__alt_data_end+0xc000ca7c>
4000d120:	4984b03a 	or	r2,r9,r6
4000d124:	10002e26 	beq	r2,zero,4000d1e0 <__adddf3+0x7e0>
4000d128:	4004d0fa 	srli	r2,r8,3
4000d12c:	8822d0fa 	srli	r17,r17,3
4000d130:	4010977a 	slli	r8,r8,29
4000d134:	10c0022c 	andhi	r3,r2,8
4000d138:	4462b03a 	or	r17,r8,r17
4000d13c:	18000826 	beq	r3,zero,4000d160 <__adddf3+0x760>
4000d140:	4808d0fa 	srli	r4,r9,3
4000d144:	20c0022c 	andhi	r3,r4,8
4000d148:	1800051e 	bne	r3,zero,4000d160 <__adddf3+0x760>
4000d14c:	300cd0fa 	srli	r6,r6,3
4000d150:	4806977a 	slli	r3,r9,29
4000d154:	2005883a 	mov	r2,r4
4000d158:	3825883a 	mov	r18,r7
4000d15c:	19a2b03a 	or	r17,r3,r6
4000d160:	8810d77a 	srli	r8,r17,29
4000d164:	100490fa 	slli	r2,r2,3
4000d168:	882290fa 	slli	r17,r17,3
4000d16c:	0401ffc4 	movi	r16,2047
4000d170:	4090b03a 	or	r8,r8,r2
4000d174:	003e4106 	br	4000ca7c <__alt_data_end+0xc000ca7c>
4000d178:	0141ffc4 	movi	r5,2047
4000d17c:	117fc71e 	bne	r2,r5,4000d09c <__alt_data_end+0xc000d09c>
4000d180:	4811883a 	mov	r8,r9
4000d184:	3023883a 	mov	r17,r6
4000d188:	1021883a 	mov	r16,r2
4000d18c:	003e3b06 	br	4000ca7c <__alt_data_end+0xc000ca7c>
4000d190:	10002f26 	beq	r2,zero,4000d250 <__adddf3+0x850>
4000d194:	4984b03a 	or	r2,r9,r6
4000d198:	10001126 	beq	r2,zero,4000d1e0 <__adddf3+0x7e0>
4000d19c:	4004d0fa 	srli	r2,r8,3
4000d1a0:	8822d0fa 	srli	r17,r17,3
4000d1a4:	4010977a 	slli	r8,r8,29
4000d1a8:	10c0022c 	andhi	r3,r2,8
4000d1ac:	4462b03a 	or	r17,r8,r17
4000d1b0:	183feb26 	beq	r3,zero,4000d160 <__alt_data_end+0xc000d160>
4000d1b4:	4808d0fa 	srli	r4,r9,3
4000d1b8:	20c0022c 	andhi	r3,r4,8
4000d1bc:	183fe81e 	bne	r3,zero,4000d160 <__alt_data_end+0xc000d160>
4000d1c0:	300cd0fa 	srli	r6,r6,3
4000d1c4:	4806977a 	slli	r3,r9,29
4000d1c8:	2005883a 	mov	r2,r4
4000d1cc:	19a2b03a 	or	r17,r3,r6
4000d1d0:	003fe306 	br	4000d160 <__alt_data_end+0xc000d160>
4000d1d4:	0011883a 	mov	r8,zero
4000d1d8:	0005883a 	mov	r2,zero
4000d1dc:	003e3f06 	br	4000cadc <__alt_data_end+0xc000cadc>
4000d1e0:	0401ffc4 	movi	r16,2047
4000d1e4:	003e2506 	br	4000ca7c <__alt_data_end+0xc000ca7c>
4000d1e8:	0013883a 	mov	r9,zero
4000d1ec:	003f8406 	br	4000d000 <__alt_data_end+0xc000d000>
4000d1f0:	0005883a 	mov	r2,zero
4000d1f4:	0007883a 	mov	r3,zero
4000d1f8:	003e8906 	br	4000cc20 <__alt_data_end+0xc000cc20>
4000d1fc:	197ff804 	addi	r5,r3,-32
4000d200:	01000804 	movi	r4,32
4000d204:	414ad83a 	srl	r5,r8,r5
4000d208:	19002426 	beq	r3,r4,4000d29c <__adddf3+0x89c>
4000d20c:	01001004 	movi	r4,64
4000d210:	20c7c83a 	sub	r3,r4,r3
4000d214:	40c6983a 	sll	r3,r8,r3
4000d218:	1c46b03a 	or	r3,r3,r17
4000d21c:	1806c03a 	cmpne	r3,r3,zero
4000d220:	28e2b03a 	or	r17,r5,r3
4000d224:	0007883a 	mov	r3,zero
4000d228:	003f2306 	br	4000ceb8 <__alt_data_end+0xc000ceb8>
4000d22c:	0007883a 	mov	r3,zero
4000d230:	5811883a 	mov	r8,r11
4000d234:	00bfffc4 	movi	r2,-1
4000d238:	0401ffc4 	movi	r16,2047
4000d23c:	003e7806 	br	4000cc20 <__alt_data_end+0xc000cc20>
4000d240:	4462b03a 	or	r17,r8,r17
4000d244:	8822c03a 	cmpne	r17,r17,zero
4000d248:	0009883a 	mov	r4,zero
4000d24c:	003fa006 	br	4000d0d0 <__alt_data_end+0xc000d0d0>
4000d250:	4811883a 	mov	r8,r9
4000d254:	3023883a 	mov	r17,r6
4000d258:	0401ffc4 	movi	r16,2047
4000d25c:	003e0706 	br	4000ca7c <__alt_data_end+0xc000ca7c>
4000d260:	4811883a 	mov	r8,r9
4000d264:	3023883a 	mov	r17,r6
4000d268:	003e0406 	br	4000ca7c <__alt_data_end+0xc000ca7c>
4000d26c:	21fff804 	addi	r7,r4,-32
4000d270:	01400804 	movi	r5,32
4000d274:	41ced83a 	srl	r7,r8,r7
4000d278:	21400a26 	beq	r4,r5,4000d2a4 <__adddf3+0x8a4>
4000d27c:	01401004 	movi	r5,64
4000d280:	2909c83a 	sub	r4,r5,r4
4000d284:	4108983a 	sll	r4,r8,r4
4000d288:	2448b03a 	or	r4,r4,r17
4000d28c:	2008c03a 	cmpne	r4,r4,zero
4000d290:	3922b03a 	or	r17,r7,r4
4000d294:	0009883a 	mov	r4,zero
4000d298:	003f8d06 	br	4000d0d0 <__alt_data_end+0xc000d0d0>
4000d29c:	0007883a 	mov	r3,zero
4000d2a0:	003fdd06 	br	4000d218 <__alt_data_end+0xc000d218>
4000d2a4:	0009883a 	mov	r4,zero
4000d2a8:	003ff706 	br	4000d288 <__alt_data_end+0xc000d288>

4000d2ac <__divdf3>:
4000d2ac:	defff204 	addi	sp,sp,-56
4000d2b0:	dd400915 	stw	r21,36(sp)
4000d2b4:	282ad53a 	srli	r21,r5,20
4000d2b8:	dd000815 	stw	r20,32(sp)
4000d2bc:	2828d7fa 	srli	r20,r5,31
4000d2c0:	dc000415 	stw	r16,16(sp)
4000d2c4:	04000434 	movhi	r16,16
4000d2c8:	df000c15 	stw	fp,48(sp)
4000d2cc:	843fffc4 	addi	r16,r16,-1
4000d2d0:	dfc00d15 	stw	ra,52(sp)
4000d2d4:	ddc00b15 	stw	r23,44(sp)
4000d2d8:	dd800a15 	stw	r22,40(sp)
4000d2dc:	dcc00715 	stw	r19,28(sp)
4000d2e0:	dc800615 	stw	r18,24(sp)
4000d2e4:	dc400515 	stw	r17,20(sp)
4000d2e8:	ad41ffcc 	andi	r21,r21,2047
4000d2ec:	2c20703a 	and	r16,r5,r16
4000d2f0:	a7003fcc 	andi	fp,r20,255
4000d2f4:	a8006126 	beq	r21,zero,4000d47c <__divdf3+0x1d0>
4000d2f8:	0081ffc4 	movi	r2,2047
4000d2fc:	2025883a 	mov	r18,r4
4000d300:	a8803726 	beq	r21,r2,4000d3e0 <__divdf3+0x134>
4000d304:	80800434 	orhi	r2,r16,16
4000d308:	100490fa 	slli	r2,r2,3
4000d30c:	2020d77a 	srli	r16,r4,29
4000d310:	202490fa 	slli	r18,r4,3
4000d314:	ad7f0044 	addi	r21,r21,-1023
4000d318:	80a0b03a 	or	r16,r16,r2
4000d31c:	0027883a 	mov	r19,zero
4000d320:	0013883a 	mov	r9,zero
4000d324:	3804d53a 	srli	r2,r7,20
4000d328:	382cd7fa 	srli	r22,r7,31
4000d32c:	04400434 	movhi	r17,16
4000d330:	8c7fffc4 	addi	r17,r17,-1
4000d334:	1081ffcc 	andi	r2,r2,2047
4000d338:	3011883a 	mov	r8,r6
4000d33c:	3c62703a 	and	r17,r7,r17
4000d340:	b5c03fcc 	andi	r23,r22,255
4000d344:	10006c26 	beq	r2,zero,4000d4f8 <__divdf3+0x24c>
4000d348:	00c1ffc4 	movi	r3,2047
4000d34c:	10c06426 	beq	r2,r3,4000d4e0 <__divdf3+0x234>
4000d350:	88c00434 	orhi	r3,r17,16
4000d354:	180690fa 	slli	r3,r3,3
4000d358:	3022d77a 	srli	r17,r6,29
4000d35c:	301090fa 	slli	r8,r6,3
4000d360:	10bf0044 	addi	r2,r2,-1023
4000d364:	88e2b03a 	or	r17,r17,r3
4000d368:	000f883a 	mov	r7,zero
4000d36c:	a58cf03a 	xor	r6,r20,r22
4000d370:	3cc8b03a 	or	r4,r7,r19
4000d374:	a8abc83a 	sub	r21,r21,r2
4000d378:	008003c4 	movi	r2,15
4000d37c:	3007883a 	mov	r3,r6
4000d380:	34c03fcc 	andi	r19,r6,255
4000d384:	11009036 	bltu	r2,r4,4000d5c8 <__divdf3+0x31c>
4000d388:	200890ba 	slli	r4,r4,2
4000d38c:	00900074 	movhi	r2,16385
4000d390:	10b4e804 	addi	r2,r2,-11360
4000d394:	2089883a 	add	r4,r4,r2
4000d398:	20800017 	ldw	r2,0(r4)
4000d39c:	1000683a 	jmp	r2
4000d3a0:	4000d5c8 	cmpgei	zero,r8,855
4000d3a4:	4000d418 	cmpnei	zero,r8,848
4000d3a8:	4000d5b8 	rdprs	zero,r8,854
4000d3ac:	4000d40c 	andi	zero,r8,848
4000d3b0:	4000d5b8 	rdprs	zero,r8,854
4000d3b4:	4000d58c 	andi	zero,r8,854
4000d3b8:	4000d5b8 	rdprs	zero,r8,854
4000d3bc:	4000d40c 	andi	zero,r8,848
4000d3c0:	4000d418 	cmpnei	zero,r8,848
4000d3c4:	4000d418 	cmpnei	zero,r8,848
4000d3c8:	4000d58c 	andi	zero,r8,854
4000d3cc:	4000d40c 	andi	zero,r8,848
4000d3d0:	4000d3fc 	xorhi	zero,r8,847
4000d3d4:	4000d3fc 	xorhi	zero,r8,847
4000d3d8:	4000d3fc 	xorhi	zero,r8,847
4000d3dc:	4000d8ac 	andhi	zero,r8,866
4000d3e0:	2404b03a 	or	r2,r4,r16
4000d3e4:	1000661e 	bne	r2,zero,4000d580 <__divdf3+0x2d4>
4000d3e8:	04c00204 	movi	r19,8
4000d3ec:	0021883a 	mov	r16,zero
4000d3f0:	0025883a 	mov	r18,zero
4000d3f4:	02400084 	movi	r9,2
4000d3f8:	003fca06 	br	4000d324 <__alt_data_end+0xc000d324>
4000d3fc:	8023883a 	mov	r17,r16
4000d400:	9011883a 	mov	r8,r18
4000d404:	e02f883a 	mov	r23,fp
4000d408:	480f883a 	mov	r7,r9
4000d40c:	00800084 	movi	r2,2
4000d410:	3881311e 	bne	r7,r2,4000d8d8 <__divdf3+0x62c>
4000d414:	b827883a 	mov	r19,r23
4000d418:	98c0004c 	andi	r3,r19,1
4000d41c:	0081ffc4 	movi	r2,2047
4000d420:	000b883a 	mov	r5,zero
4000d424:	0025883a 	mov	r18,zero
4000d428:	1004953a 	slli	r2,r2,20
4000d42c:	18c03fcc 	andi	r3,r3,255
4000d430:	04400434 	movhi	r17,16
4000d434:	8c7fffc4 	addi	r17,r17,-1
4000d438:	180697fa 	slli	r3,r3,31
4000d43c:	2c4a703a 	and	r5,r5,r17
4000d440:	288ab03a 	or	r5,r5,r2
4000d444:	28c6b03a 	or	r3,r5,r3
4000d448:	9005883a 	mov	r2,r18
4000d44c:	dfc00d17 	ldw	ra,52(sp)
4000d450:	df000c17 	ldw	fp,48(sp)
4000d454:	ddc00b17 	ldw	r23,44(sp)
4000d458:	dd800a17 	ldw	r22,40(sp)
4000d45c:	dd400917 	ldw	r21,36(sp)
4000d460:	dd000817 	ldw	r20,32(sp)
4000d464:	dcc00717 	ldw	r19,28(sp)
4000d468:	dc800617 	ldw	r18,24(sp)
4000d46c:	dc400517 	ldw	r17,20(sp)
4000d470:	dc000417 	ldw	r16,16(sp)
4000d474:	dec00e04 	addi	sp,sp,56
4000d478:	f800283a 	ret
4000d47c:	2404b03a 	or	r2,r4,r16
4000d480:	2027883a 	mov	r19,r4
4000d484:	10003926 	beq	r2,zero,4000d56c <__divdf3+0x2c0>
4000d488:	80012e26 	beq	r16,zero,4000d944 <__divdf3+0x698>
4000d48c:	8009883a 	mov	r4,r16
4000d490:	d9800315 	stw	r6,12(sp)
4000d494:	d9c00215 	stw	r7,8(sp)
4000d498:	000e3540 	call	4000e354 <__clzsi2>
4000d49c:	d9800317 	ldw	r6,12(sp)
4000d4a0:	d9c00217 	ldw	r7,8(sp)
4000d4a4:	113ffd44 	addi	r4,r2,-11
4000d4a8:	00c00704 	movi	r3,28
4000d4ac:	19012116 	blt	r3,r4,4000d934 <__divdf3+0x688>
4000d4b0:	00c00744 	movi	r3,29
4000d4b4:	147ffe04 	addi	r17,r2,-8
4000d4b8:	1907c83a 	sub	r3,r3,r4
4000d4bc:	8460983a 	sll	r16,r16,r17
4000d4c0:	98c6d83a 	srl	r3,r19,r3
4000d4c4:	9c64983a 	sll	r18,r19,r17
4000d4c8:	1c20b03a 	or	r16,r3,r16
4000d4cc:	1080fcc4 	addi	r2,r2,1011
4000d4d0:	00abc83a 	sub	r21,zero,r2
4000d4d4:	0027883a 	mov	r19,zero
4000d4d8:	0013883a 	mov	r9,zero
4000d4dc:	003f9106 	br	4000d324 <__alt_data_end+0xc000d324>
4000d4e0:	3446b03a 	or	r3,r6,r17
4000d4e4:	18001f1e 	bne	r3,zero,4000d564 <__divdf3+0x2b8>
4000d4e8:	0023883a 	mov	r17,zero
4000d4ec:	0011883a 	mov	r8,zero
4000d4f0:	01c00084 	movi	r7,2
4000d4f4:	003f9d06 	br	4000d36c <__alt_data_end+0xc000d36c>
4000d4f8:	3446b03a 	or	r3,r6,r17
4000d4fc:	18001526 	beq	r3,zero,4000d554 <__divdf3+0x2a8>
4000d500:	88011b26 	beq	r17,zero,4000d970 <__divdf3+0x6c4>
4000d504:	8809883a 	mov	r4,r17
4000d508:	d9800315 	stw	r6,12(sp)
4000d50c:	da400115 	stw	r9,4(sp)
4000d510:	000e3540 	call	4000e354 <__clzsi2>
4000d514:	d9800317 	ldw	r6,12(sp)
4000d518:	da400117 	ldw	r9,4(sp)
4000d51c:	113ffd44 	addi	r4,r2,-11
4000d520:	00c00704 	movi	r3,28
4000d524:	19010e16 	blt	r3,r4,4000d960 <__divdf3+0x6b4>
4000d528:	00c00744 	movi	r3,29
4000d52c:	123ffe04 	addi	r8,r2,-8
4000d530:	1907c83a 	sub	r3,r3,r4
4000d534:	8a22983a 	sll	r17,r17,r8
4000d538:	30c6d83a 	srl	r3,r6,r3
4000d53c:	3210983a 	sll	r8,r6,r8
4000d540:	1c62b03a 	or	r17,r3,r17
4000d544:	1080fcc4 	addi	r2,r2,1011
4000d548:	0085c83a 	sub	r2,zero,r2
4000d54c:	000f883a 	mov	r7,zero
4000d550:	003f8606 	br	4000d36c <__alt_data_end+0xc000d36c>
4000d554:	0023883a 	mov	r17,zero
4000d558:	0011883a 	mov	r8,zero
4000d55c:	01c00044 	movi	r7,1
4000d560:	003f8206 	br	4000d36c <__alt_data_end+0xc000d36c>
4000d564:	01c000c4 	movi	r7,3
4000d568:	003f8006 	br	4000d36c <__alt_data_end+0xc000d36c>
4000d56c:	04c00104 	movi	r19,4
4000d570:	0021883a 	mov	r16,zero
4000d574:	0025883a 	mov	r18,zero
4000d578:	02400044 	movi	r9,1
4000d57c:	003f6906 	br	4000d324 <__alt_data_end+0xc000d324>
4000d580:	04c00304 	movi	r19,12
4000d584:	024000c4 	movi	r9,3
4000d588:	003f6606 	br	4000d324 <__alt_data_end+0xc000d324>
4000d58c:	01400434 	movhi	r5,16
4000d590:	0007883a 	mov	r3,zero
4000d594:	297fffc4 	addi	r5,r5,-1
4000d598:	04bfffc4 	movi	r18,-1
4000d59c:	0081ffc4 	movi	r2,2047
4000d5a0:	003fa106 	br	4000d428 <__alt_data_end+0xc000d428>
4000d5a4:	00c00044 	movi	r3,1
4000d5a8:	1887c83a 	sub	r3,r3,r2
4000d5ac:	01000e04 	movi	r4,56
4000d5b0:	20c1210e 	bge	r4,r3,4000da38 <__divdf3+0x78c>
4000d5b4:	98c0004c 	andi	r3,r19,1
4000d5b8:	0005883a 	mov	r2,zero
4000d5bc:	000b883a 	mov	r5,zero
4000d5c0:	0025883a 	mov	r18,zero
4000d5c4:	003f9806 	br	4000d428 <__alt_data_end+0xc000d428>
4000d5c8:	8c00fd36 	bltu	r17,r16,4000d9c0 <__divdf3+0x714>
4000d5cc:	8440fb26 	beq	r16,r17,4000d9bc <__divdf3+0x710>
4000d5d0:	8007883a 	mov	r3,r16
4000d5d4:	ad7fffc4 	addi	r21,r21,-1
4000d5d8:	0021883a 	mov	r16,zero
4000d5dc:	4004d63a 	srli	r2,r8,24
4000d5e0:	8822923a 	slli	r17,r17,8
4000d5e4:	1809883a 	mov	r4,r3
4000d5e8:	402c923a 	slli	r22,r8,8
4000d5ec:	88b8b03a 	or	fp,r17,r2
4000d5f0:	e028d43a 	srli	r20,fp,16
4000d5f4:	d8c00015 	stw	r3,0(sp)
4000d5f8:	e5ffffcc 	andi	r23,fp,65535
4000d5fc:	a00b883a 	mov	r5,r20
4000d600:	000c9440 	call	4000c944 <__udivsi3>
4000d604:	d8c00017 	ldw	r3,0(sp)
4000d608:	a00b883a 	mov	r5,r20
4000d60c:	d8800315 	stw	r2,12(sp)
4000d610:	1809883a 	mov	r4,r3
4000d614:	000c9a80 	call	4000c9a8 <__umodsi3>
4000d618:	d9800317 	ldw	r6,12(sp)
4000d61c:	1006943a 	slli	r3,r2,16
4000d620:	9004d43a 	srli	r2,r18,16
4000d624:	b9a3383a 	mul	r17,r23,r6
4000d628:	10c4b03a 	or	r2,r2,r3
4000d62c:	1440062e 	bgeu	r2,r17,4000d648 <__divdf3+0x39c>
4000d630:	1705883a 	add	r2,r2,fp
4000d634:	30ffffc4 	addi	r3,r6,-1
4000d638:	1700ee36 	bltu	r2,fp,4000d9f4 <__divdf3+0x748>
4000d63c:	1440ed2e 	bgeu	r2,r17,4000d9f4 <__divdf3+0x748>
4000d640:	31bfff84 	addi	r6,r6,-2
4000d644:	1705883a 	add	r2,r2,fp
4000d648:	1463c83a 	sub	r17,r2,r17
4000d64c:	a00b883a 	mov	r5,r20
4000d650:	8809883a 	mov	r4,r17
4000d654:	d9800315 	stw	r6,12(sp)
4000d658:	000c9440 	call	4000c944 <__udivsi3>
4000d65c:	a00b883a 	mov	r5,r20
4000d660:	8809883a 	mov	r4,r17
4000d664:	d8800215 	stw	r2,8(sp)
4000d668:	000c9a80 	call	4000c9a8 <__umodsi3>
4000d66c:	d9c00217 	ldw	r7,8(sp)
4000d670:	1004943a 	slli	r2,r2,16
4000d674:	94bfffcc 	andi	r18,r18,65535
4000d678:	b9d1383a 	mul	r8,r23,r7
4000d67c:	90a4b03a 	or	r18,r18,r2
4000d680:	d9800317 	ldw	r6,12(sp)
4000d684:	9200062e 	bgeu	r18,r8,4000d6a0 <__divdf3+0x3f4>
4000d688:	9725883a 	add	r18,r18,fp
4000d68c:	38bfffc4 	addi	r2,r7,-1
4000d690:	9700d636 	bltu	r18,fp,4000d9ec <__divdf3+0x740>
4000d694:	9200d52e 	bgeu	r18,r8,4000d9ec <__divdf3+0x740>
4000d698:	39ffff84 	addi	r7,r7,-2
4000d69c:	9725883a 	add	r18,r18,fp
4000d6a0:	3004943a 	slli	r2,r6,16
4000d6a4:	b012d43a 	srli	r9,r22,16
4000d6a8:	b1bfffcc 	andi	r6,r22,65535
4000d6ac:	11e2b03a 	or	r17,r2,r7
4000d6b0:	8806d43a 	srli	r3,r17,16
4000d6b4:	893fffcc 	andi	r4,r17,65535
4000d6b8:	218b383a 	mul	r5,r4,r6
4000d6bc:	30c5383a 	mul	r2,r6,r3
4000d6c0:	2249383a 	mul	r4,r4,r9
4000d6c4:	280ed43a 	srli	r7,r5,16
4000d6c8:	9225c83a 	sub	r18,r18,r8
4000d6cc:	2089883a 	add	r4,r4,r2
4000d6d0:	3909883a 	add	r4,r7,r4
4000d6d4:	1a47383a 	mul	r3,r3,r9
4000d6d8:	2080022e 	bgeu	r4,r2,4000d6e4 <__divdf3+0x438>
4000d6dc:	00800074 	movhi	r2,1
4000d6e0:	1887883a 	add	r3,r3,r2
4000d6e4:	2004d43a 	srli	r2,r4,16
4000d6e8:	2008943a 	slli	r4,r4,16
4000d6ec:	297fffcc 	andi	r5,r5,65535
4000d6f0:	10c7883a 	add	r3,r2,r3
4000d6f4:	2149883a 	add	r4,r4,r5
4000d6f8:	90c0a536 	bltu	r18,r3,4000d990 <__divdf3+0x6e4>
4000d6fc:	90c0bf26 	beq	r18,r3,4000d9fc <__divdf3+0x750>
4000d700:	90c7c83a 	sub	r3,r18,r3
4000d704:	810fc83a 	sub	r7,r16,r4
4000d708:	81e5803a 	cmpltu	r18,r16,r7
4000d70c:	1ca5c83a 	sub	r18,r3,r18
4000d710:	e480c126 	beq	fp,r18,4000da18 <__divdf3+0x76c>
4000d714:	a00b883a 	mov	r5,r20
4000d718:	9009883a 	mov	r4,r18
4000d71c:	d9800315 	stw	r6,12(sp)
4000d720:	d9c00215 	stw	r7,8(sp)
4000d724:	da400115 	stw	r9,4(sp)
4000d728:	000c9440 	call	4000c944 <__udivsi3>
4000d72c:	a00b883a 	mov	r5,r20
4000d730:	9009883a 	mov	r4,r18
4000d734:	d8800015 	stw	r2,0(sp)
4000d738:	000c9a80 	call	4000c9a8 <__umodsi3>
4000d73c:	d9c00217 	ldw	r7,8(sp)
4000d740:	da000017 	ldw	r8,0(sp)
4000d744:	1006943a 	slli	r3,r2,16
4000d748:	3804d43a 	srli	r2,r7,16
4000d74c:	ba21383a 	mul	r16,r23,r8
4000d750:	d9800317 	ldw	r6,12(sp)
4000d754:	10c4b03a 	or	r2,r2,r3
4000d758:	da400117 	ldw	r9,4(sp)
4000d75c:	1400062e 	bgeu	r2,r16,4000d778 <__divdf3+0x4cc>
4000d760:	1705883a 	add	r2,r2,fp
4000d764:	40ffffc4 	addi	r3,r8,-1
4000d768:	1700ad36 	bltu	r2,fp,4000da20 <__divdf3+0x774>
4000d76c:	1400ac2e 	bgeu	r2,r16,4000da20 <__divdf3+0x774>
4000d770:	423fff84 	addi	r8,r8,-2
4000d774:	1705883a 	add	r2,r2,fp
4000d778:	1421c83a 	sub	r16,r2,r16
4000d77c:	a00b883a 	mov	r5,r20
4000d780:	8009883a 	mov	r4,r16
4000d784:	d9800315 	stw	r6,12(sp)
4000d788:	d9c00215 	stw	r7,8(sp)
4000d78c:	da000015 	stw	r8,0(sp)
4000d790:	da400115 	stw	r9,4(sp)
4000d794:	000c9440 	call	4000c944 <__udivsi3>
4000d798:	8009883a 	mov	r4,r16
4000d79c:	a00b883a 	mov	r5,r20
4000d7a0:	1025883a 	mov	r18,r2
4000d7a4:	000c9a80 	call	4000c9a8 <__umodsi3>
4000d7a8:	d9c00217 	ldw	r7,8(sp)
4000d7ac:	1004943a 	slli	r2,r2,16
4000d7b0:	bcaf383a 	mul	r23,r23,r18
4000d7b4:	393fffcc 	andi	r4,r7,65535
4000d7b8:	2088b03a 	or	r4,r4,r2
4000d7bc:	d9800317 	ldw	r6,12(sp)
4000d7c0:	da000017 	ldw	r8,0(sp)
4000d7c4:	da400117 	ldw	r9,4(sp)
4000d7c8:	25c0062e 	bgeu	r4,r23,4000d7e4 <__divdf3+0x538>
4000d7cc:	2709883a 	add	r4,r4,fp
4000d7d0:	90bfffc4 	addi	r2,r18,-1
4000d7d4:	27009436 	bltu	r4,fp,4000da28 <__divdf3+0x77c>
4000d7d8:	25c0932e 	bgeu	r4,r23,4000da28 <__divdf3+0x77c>
4000d7dc:	94bfff84 	addi	r18,r18,-2
4000d7e0:	2709883a 	add	r4,r4,fp
4000d7e4:	4004943a 	slli	r2,r8,16
4000d7e8:	25efc83a 	sub	r23,r4,r23
4000d7ec:	1490b03a 	or	r8,r2,r18
4000d7f0:	4008d43a 	srli	r4,r8,16
4000d7f4:	40ffffcc 	andi	r3,r8,65535
4000d7f8:	30c5383a 	mul	r2,r6,r3
4000d7fc:	1a47383a 	mul	r3,r3,r9
4000d800:	310d383a 	mul	r6,r6,r4
4000d804:	100ad43a 	srli	r5,r2,16
4000d808:	4913383a 	mul	r9,r9,r4
4000d80c:	1987883a 	add	r3,r3,r6
4000d810:	28c7883a 	add	r3,r5,r3
4000d814:	1980022e 	bgeu	r3,r6,4000d820 <__divdf3+0x574>
4000d818:	01000074 	movhi	r4,1
4000d81c:	4913883a 	add	r9,r9,r4
4000d820:	1808d43a 	srli	r4,r3,16
4000d824:	1806943a 	slli	r3,r3,16
4000d828:	10bfffcc 	andi	r2,r2,65535
4000d82c:	2253883a 	add	r9,r4,r9
4000d830:	1887883a 	add	r3,r3,r2
4000d834:	ba403836 	bltu	r23,r9,4000d918 <__divdf3+0x66c>
4000d838:	ba403626 	beq	r23,r9,4000d914 <__divdf3+0x668>
4000d83c:	42000054 	ori	r8,r8,1
4000d840:	a880ffc4 	addi	r2,r21,1023
4000d844:	00bf570e 	bge	zero,r2,4000d5a4 <__alt_data_end+0xc000d5a4>
4000d848:	40c001cc 	andi	r3,r8,7
4000d84c:	18000726 	beq	r3,zero,4000d86c <__divdf3+0x5c0>
4000d850:	40c003cc 	andi	r3,r8,15
4000d854:	01000104 	movi	r4,4
4000d858:	19000426 	beq	r3,r4,4000d86c <__divdf3+0x5c0>
4000d85c:	4107883a 	add	r3,r8,r4
4000d860:	1a11803a 	cmpltu	r8,r3,r8
4000d864:	8a23883a 	add	r17,r17,r8
4000d868:	1811883a 	mov	r8,r3
4000d86c:	88c0402c 	andhi	r3,r17,256
4000d870:	18000426 	beq	r3,zero,4000d884 <__divdf3+0x5d8>
4000d874:	00ffc034 	movhi	r3,65280
4000d878:	18ffffc4 	addi	r3,r3,-1
4000d87c:	a8810004 	addi	r2,r21,1024
4000d880:	88e2703a 	and	r17,r17,r3
4000d884:	00c1ff84 	movi	r3,2046
4000d888:	18bee316 	blt	r3,r2,4000d418 <__alt_data_end+0xc000d418>
4000d88c:	8824977a 	slli	r18,r17,29
4000d890:	4010d0fa 	srli	r8,r8,3
4000d894:	8822927a 	slli	r17,r17,9
4000d898:	1081ffcc 	andi	r2,r2,2047
4000d89c:	9224b03a 	or	r18,r18,r8
4000d8a0:	880ad33a 	srli	r5,r17,12
4000d8a4:	98c0004c 	andi	r3,r19,1
4000d8a8:	003edf06 	br	4000d428 <__alt_data_end+0xc000d428>
4000d8ac:	8080022c 	andhi	r2,r16,8
4000d8b0:	10001226 	beq	r2,zero,4000d8fc <__divdf3+0x650>
4000d8b4:	8880022c 	andhi	r2,r17,8
4000d8b8:	1000101e 	bne	r2,zero,4000d8fc <__divdf3+0x650>
4000d8bc:	00800434 	movhi	r2,16
4000d8c0:	89400234 	orhi	r5,r17,8
4000d8c4:	10bfffc4 	addi	r2,r2,-1
4000d8c8:	b007883a 	mov	r3,r22
4000d8cc:	288a703a 	and	r5,r5,r2
4000d8d0:	4025883a 	mov	r18,r8
4000d8d4:	003f3106 	br	4000d59c <__alt_data_end+0xc000d59c>
4000d8d8:	008000c4 	movi	r2,3
4000d8dc:	3880a626 	beq	r7,r2,4000db78 <__divdf3+0x8cc>
4000d8e0:	00800044 	movi	r2,1
4000d8e4:	3880521e 	bne	r7,r2,4000da30 <__divdf3+0x784>
4000d8e8:	b807883a 	mov	r3,r23
4000d8ec:	0005883a 	mov	r2,zero
4000d8f0:	000b883a 	mov	r5,zero
4000d8f4:	0025883a 	mov	r18,zero
4000d8f8:	003ecb06 	br	4000d428 <__alt_data_end+0xc000d428>
4000d8fc:	00800434 	movhi	r2,16
4000d900:	81400234 	orhi	r5,r16,8
4000d904:	10bfffc4 	addi	r2,r2,-1
4000d908:	a007883a 	mov	r3,r20
4000d90c:	288a703a 	and	r5,r5,r2
4000d910:	003f2206 	br	4000d59c <__alt_data_end+0xc000d59c>
4000d914:	183fca26 	beq	r3,zero,4000d840 <__alt_data_end+0xc000d840>
4000d918:	e5ef883a 	add	r23,fp,r23
4000d91c:	40bfffc4 	addi	r2,r8,-1
4000d920:	bf00392e 	bgeu	r23,fp,4000da08 <__divdf3+0x75c>
4000d924:	1011883a 	mov	r8,r2
4000d928:	ba7fc41e 	bne	r23,r9,4000d83c <__alt_data_end+0xc000d83c>
4000d92c:	b0ffc31e 	bne	r22,r3,4000d83c <__alt_data_end+0xc000d83c>
4000d930:	003fc306 	br	4000d840 <__alt_data_end+0xc000d840>
4000d934:	143ff604 	addi	r16,r2,-40
4000d938:	9c20983a 	sll	r16,r19,r16
4000d93c:	0025883a 	mov	r18,zero
4000d940:	003ee206 	br	4000d4cc <__alt_data_end+0xc000d4cc>
4000d944:	d9800315 	stw	r6,12(sp)
4000d948:	d9c00215 	stw	r7,8(sp)
4000d94c:	000e3540 	call	4000e354 <__clzsi2>
4000d950:	10800804 	addi	r2,r2,32
4000d954:	d9c00217 	ldw	r7,8(sp)
4000d958:	d9800317 	ldw	r6,12(sp)
4000d95c:	003ed106 	br	4000d4a4 <__alt_data_end+0xc000d4a4>
4000d960:	147ff604 	addi	r17,r2,-40
4000d964:	3462983a 	sll	r17,r6,r17
4000d968:	0011883a 	mov	r8,zero
4000d96c:	003ef506 	br	4000d544 <__alt_data_end+0xc000d544>
4000d970:	3009883a 	mov	r4,r6
4000d974:	d9800315 	stw	r6,12(sp)
4000d978:	da400115 	stw	r9,4(sp)
4000d97c:	000e3540 	call	4000e354 <__clzsi2>
4000d980:	10800804 	addi	r2,r2,32
4000d984:	da400117 	ldw	r9,4(sp)
4000d988:	d9800317 	ldw	r6,12(sp)
4000d98c:	003ee306 	br	4000d51c <__alt_data_end+0xc000d51c>
4000d990:	85a1883a 	add	r16,r16,r22
4000d994:	8585803a 	cmpltu	r2,r16,r22
4000d998:	1705883a 	add	r2,r2,fp
4000d99c:	14a5883a 	add	r18,r2,r18
4000d9a0:	88bfffc4 	addi	r2,r17,-1
4000d9a4:	e4800c2e 	bgeu	fp,r18,4000d9d8 <__divdf3+0x72c>
4000d9a8:	90c03e36 	bltu	r18,r3,4000daa4 <__divdf3+0x7f8>
4000d9ac:	1c806926 	beq	r3,r18,4000db54 <__divdf3+0x8a8>
4000d9b0:	90c7c83a 	sub	r3,r18,r3
4000d9b4:	1023883a 	mov	r17,r2
4000d9b8:	003f5206 	br	4000d704 <__alt_data_end+0xc000d704>
4000d9bc:	923f0436 	bltu	r18,r8,4000d5d0 <__alt_data_end+0xc000d5d0>
4000d9c0:	800897fa 	slli	r4,r16,31
4000d9c4:	9004d07a 	srli	r2,r18,1
4000d9c8:	8006d07a 	srli	r3,r16,1
4000d9cc:	902097fa 	slli	r16,r18,31
4000d9d0:	20a4b03a 	or	r18,r4,r2
4000d9d4:	003f0106 	br	4000d5dc <__alt_data_end+0xc000d5dc>
4000d9d8:	e4bff51e 	bne	fp,r18,4000d9b0 <__alt_data_end+0xc000d9b0>
4000d9dc:	85bff22e 	bgeu	r16,r22,4000d9a8 <__alt_data_end+0xc000d9a8>
4000d9e0:	e0c7c83a 	sub	r3,fp,r3
4000d9e4:	1023883a 	mov	r17,r2
4000d9e8:	003f4606 	br	4000d704 <__alt_data_end+0xc000d704>
4000d9ec:	100f883a 	mov	r7,r2
4000d9f0:	003f2b06 	br	4000d6a0 <__alt_data_end+0xc000d6a0>
4000d9f4:	180d883a 	mov	r6,r3
4000d9f8:	003f1306 	br	4000d648 <__alt_data_end+0xc000d648>
4000d9fc:	813fe436 	bltu	r16,r4,4000d990 <__alt_data_end+0xc000d990>
4000da00:	0007883a 	mov	r3,zero
4000da04:	003f3f06 	br	4000d704 <__alt_data_end+0xc000d704>
4000da08:	ba402c36 	bltu	r23,r9,4000dabc <__divdf3+0x810>
4000da0c:	4dc05426 	beq	r9,r23,4000db60 <__divdf3+0x8b4>
4000da10:	1011883a 	mov	r8,r2
4000da14:	003f8906 	br	4000d83c <__alt_data_end+0xc000d83c>
4000da18:	023fffc4 	movi	r8,-1
4000da1c:	003f8806 	br	4000d840 <__alt_data_end+0xc000d840>
4000da20:	1811883a 	mov	r8,r3
4000da24:	003f5406 	br	4000d778 <__alt_data_end+0xc000d778>
4000da28:	1025883a 	mov	r18,r2
4000da2c:	003f6d06 	br	4000d7e4 <__alt_data_end+0xc000d7e4>
4000da30:	b827883a 	mov	r19,r23
4000da34:	003f8206 	br	4000d840 <__alt_data_end+0xc000d840>
4000da38:	010007c4 	movi	r4,31
4000da3c:	20c02616 	blt	r4,r3,4000dad8 <__divdf3+0x82c>
4000da40:	00800804 	movi	r2,32
4000da44:	10c5c83a 	sub	r2,r2,r3
4000da48:	888a983a 	sll	r5,r17,r2
4000da4c:	40c8d83a 	srl	r4,r8,r3
4000da50:	4084983a 	sll	r2,r8,r2
4000da54:	88e2d83a 	srl	r17,r17,r3
4000da58:	2906b03a 	or	r3,r5,r4
4000da5c:	1004c03a 	cmpne	r2,r2,zero
4000da60:	1886b03a 	or	r3,r3,r2
4000da64:	188001cc 	andi	r2,r3,7
4000da68:	10000726 	beq	r2,zero,4000da88 <__divdf3+0x7dc>
4000da6c:	188003cc 	andi	r2,r3,15
4000da70:	01000104 	movi	r4,4
4000da74:	11000426 	beq	r2,r4,4000da88 <__divdf3+0x7dc>
4000da78:	1805883a 	mov	r2,r3
4000da7c:	10c00104 	addi	r3,r2,4
4000da80:	1885803a 	cmpltu	r2,r3,r2
4000da84:	88a3883a 	add	r17,r17,r2
4000da88:	8880202c 	andhi	r2,r17,128
4000da8c:	10002726 	beq	r2,zero,4000db2c <__divdf3+0x880>
4000da90:	98c0004c 	andi	r3,r19,1
4000da94:	00800044 	movi	r2,1
4000da98:	000b883a 	mov	r5,zero
4000da9c:	0025883a 	mov	r18,zero
4000daa0:	003e6106 	br	4000d428 <__alt_data_end+0xc000d428>
4000daa4:	85a1883a 	add	r16,r16,r22
4000daa8:	8585803a 	cmpltu	r2,r16,r22
4000daac:	1705883a 	add	r2,r2,fp
4000dab0:	14a5883a 	add	r18,r2,r18
4000dab4:	8c7fff84 	addi	r17,r17,-2
4000dab8:	003f1106 	br	4000d700 <__alt_data_end+0xc000d700>
4000dabc:	b589883a 	add	r4,r22,r22
4000dac0:	25ad803a 	cmpltu	r22,r4,r22
4000dac4:	b739883a 	add	fp,r22,fp
4000dac8:	40bfff84 	addi	r2,r8,-2
4000dacc:	bf2f883a 	add	r23,r23,fp
4000dad0:	202d883a 	mov	r22,r4
4000dad4:	003f9306 	br	4000d924 <__alt_data_end+0xc000d924>
4000dad8:	013ff844 	movi	r4,-31
4000dadc:	2085c83a 	sub	r2,r4,r2
4000dae0:	8888d83a 	srl	r4,r17,r2
4000dae4:	00800804 	movi	r2,32
4000dae8:	18802126 	beq	r3,r2,4000db70 <__divdf3+0x8c4>
4000daec:	00801004 	movi	r2,64
4000daf0:	10c5c83a 	sub	r2,r2,r3
4000daf4:	8884983a 	sll	r2,r17,r2
4000daf8:	1204b03a 	or	r2,r2,r8
4000dafc:	1004c03a 	cmpne	r2,r2,zero
4000db00:	2084b03a 	or	r2,r4,r2
4000db04:	144001cc 	andi	r17,r2,7
4000db08:	88000d1e 	bne	r17,zero,4000db40 <__divdf3+0x894>
4000db0c:	000b883a 	mov	r5,zero
4000db10:	1024d0fa 	srli	r18,r2,3
4000db14:	98c0004c 	andi	r3,r19,1
4000db18:	0005883a 	mov	r2,zero
4000db1c:	9464b03a 	or	r18,r18,r17
4000db20:	003e4106 	br	4000d428 <__alt_data_end+0xc000d428>
4000db24:	1007883a 	mov	r3,r2
4000db28:	0023883a 	mov	r17,zero
4000db2c:	880a927a 	slli	r5,r17,9
4000db30:	1805883a 	mov	r2,r3
4000db34:	8822977a 	slli	r17,r17,29
4000db38:	280ad33a 	srli	r5,r5,12
4000db3c:	003ff406 	br	4000db10 <__alt_data_end+0xc000db10>
4000db40:	10c003cc 	andi	r3,r2,15
4000db44:	01000104 	movi	r4,4
4000db48:	193ff626 	beq	r3,r4,4000db24 <__alt_data_end+0xc000db24>
4000db4c:	0023883a 	mov	r17,zero
4000db50:	003fca06 	br	4000da7c <__alt_data_end+0xc000da7c>
4000db54:	813fd336 	bltu	r16,r4,4000daa4 <__alt_data_end+0xc000daa4>
4000db58:	1023883a 	mov	r17,r2
4000db5c:	003fa806 	br	4000da00 <__alt_data_end+0xc000da00>
4000db60:	b0ffd636 	bltu	r22,r3,4000dabc <__alt_data_end+0xc000dabc>
4000db64:	1011883a 	mov	r8,r2
4000db68:	b0ff341e 	bne	r22,r3,4000d83c <__alt_data_end+0xc000d83c>
4000db6c:	003f3406 	br	4000d840 <__alt_data_end+0xc000d840>
4000db70:	0005883a 	mov	r2,zero
4000db74:	003fe006 	br	4000daf8 <__alt_data_end+0xc000daf8>
4000db78:	00800434 	movhi	r2,16
4000db7c:	89400234 	orhi	r5,r17,8
4000db80:	10bfffc4 	addi	r2,r2,-1
4000db84:	b807883a 	mov	r3,r23
4000db88:	288a703a 	and	r5,r5,r2
4000db8c:	4025883a 	mov	r18,r8
4000db90:	003e8206 	br	4000d59c <__alt_data_end+0xc000d59c>

4000db94 <__muldf3>:
4000db94:	defff304 	addi	sp,sp,-52
4000db98:	2804d53a 	srli	r2,r5,20
4000db9c:	dd800915 	stw	r22,36(sp)
4000dba0:	282cd7fa 	srli	r22,r5,31
4000dba4:	dc000315 	stw	r16,12(sp)
4000dba8:	04000434 	movhi	r16,16
4000dbac:	dd400815 	stw	r21,32(sp)
4000dbb0:	dc800515 	stw	r18,20(sp)
4000dbb4:	843fffc4 	addi	r16,r16,-1
4000dbb8:	dfc00c15 	stw	ra,48(sp)
4000dbbc:	df000b15 	stw	fp,44(sp)
4000dbc0:	ddc00a15 	stw	r23,40(sp)
4000dbc4:	dd000715 	stw	r20,28(sp)
4000dbc8:	dcc00615 	stw	r19,24(sp)
4000dbcc:	dc400415 	stw	r17,16(sp)
4000dbd0:	1481ffcc 	andi	r18,r2,2047
4000dbd4:	2c20703a 	and	r16,r5,r16
4000dbd8:	b02b883a 	mov	r21,r22
4000dbdc:	b2403fcc 	andi	r9,r22,255
4000dbe0:	90006026 	beq	r18,zero,4000dd64 <__muldf3+0x1d0>
4000dbe4:	0081ffc4 	movi	r2,2047
4000dbe8:	2029883a 	mov	r20,r4
4000dbec:	90803626 	beq	r18,r2,4000dcc8 <__muldf3+0x134>
4000dbf0:	80800434 	orhi	r2,r16,16
4000dbf4:	100490fa 	slli	r2,r2,3
4000dbf8:	2020d77a 	srli	r16,r4,29
4000dbfc:	202890fa 	slli	r20,r4,3
4000dc00:	94bf0044 	addi	r18,r18,-1023
4000dc04:	80a0b03a 	or	r16,r16,r2
4000dc08:	0027883a 	mov	r19,zero
4000dc0c:	0039883a 	mov	fp,zero
4000dc10:	3804d53a 	srli	r2,r7,20
4000dc14:	382ed7fa 	srli	r23,r7,31
4000dc18:	04400434 	movhi	r17,16
4000dc1c:	8c7fffc4 	addi	r17,r17,-1
4000dc20:	1081ffcc 	andi	r2,r2,2047
4000dc24:	3011883a 	mov	r8,r6
4000dc28:	3c62703a 	and	r17,r7,r17
4000dc2c:	ba803fcc 	andi	r10,r23,255
4000dc30:	10006d26 	beq	r2,zero,4000dde8 <__muldf3+0x254>
4000dc34:	00c1ffc4 	movi	r3,2047
4000dc38:	10c06526 	beq	r2,r3,4000ddd0 <__muldf3+0x23c>
4000dc3c:	88c00434 	orhi	r3,r17,16
4000dc40:	180690fa 	slli	r3,r3,3
4000dc44:	3022d77a 	srli	r17,r6,29
4000dc48:	301090fa 	slli	r8,r6,3
4000dc4c:	10bf0044 	addi	r2,r2,-1023
4000dc50:	88e2b03a 	or	r17,r17,r3
4000dc54:	000b883a 	mov	r5,zero
4000dc58:	9085883a 	add	r2,r18,r2
4000dc5c:	2cc8b03a 	or	r4,r5,r19
4000dc60:	00c003c4 	movi	r3,15
4000dc64:	bdacf03a 	xor	r22,r23,r22
4000dc68:	12c00044 	addi	r11,r2,1
4000dc6c:	19009936 	bltu	r3,r4,4000ded4 <__muldf3+0x340>
4000dc70:	200890ba 	slli	r4,r4,2
4000dc74:	00d00074 	movhi	r3,16385
4000dc78:	18f72204 	addi	r3,r3,-9080
4000dc7c:	20c9883a 	add	r4,r4,r3
4000dc80:	20c00017 	ldw	r3,0(r4)
4000dc84:	1800683a 	jmp	r3
4000dc88:	4000ded4 	ori	zero,r8,891
4000dc8c:	4000dce8 	cmpgeui	zero,r8,883
4000dc90:	4000dce8 	cmpgeui	zero,r8,883
4000dc94:	4000dce4 	muli	zero,r8,883
4000dc98:	4000deb0 	cmpltui	zero,r8,890
4000dc9c:	4000deb0 	cmpltui	zero,r8,890
4000dca0:	4000de98 	cmpnei	zero,r8,890
4000dca4:	4000dce4 	muli	zero,r8,883
4000dca8:	4000deb0 	cmpltui	zero,r8,890
4000dcac:	4000de98 	cmpnei	zero,r8,890
4000dcb0:	4000deb0 	cmpltui	zero,r8,890
4000dcb4:	4000dce4 	muli	zero,r8,883
4000dcb8:	4000dec0 	call	44000dec <__alt_heap_start+0x3fd3910>
4000dcbc:	4000dec0 	call	44000dec <__alt_heap_start+0x3fd3910>
4000dcc0:	4000dec0 	call	44000dec <__alt_heap_start+0x3fd3910>
4000dcc4:	4000e0dc 	xori	zero,r8,899
4000dcc8:	2404b03a 	or	r2,r4,r16
4000dccc:	10006f1e 	bne	r2,zero,4000de8c <__muldf3+0x2f8>
4000dcd0:	04c00204 	movi	r19,8
4000dcd4:	0021883a 	mov	r16,zero
4000dcd8:	0029883a 	mov	r20,zero
4000dcdc:	07000084 	movi	fp,2
4000dce0:	003fcb06 	br	4000dc10 <__alt_data_end+0xc000dc10>
4000dce4:	502d883a 	mov	r22,r10
4000dce8:	00800084 	movi	r2,2
4000dcec:	28805726 	beq	r5,r2,4000de4c <__muldf3+0x2b8>
4000dcf0:	008000c4 	movi	r2,3
4000dcf4:	28816626 	beq	r5,r2,4000e290 <__muldf3+0x6fc>
4000dcf8:	00800044 	movi	r2,1
4000dcfc:	2881411e 	bne	r5,r2,4000e204 <__muldf3+0x670>
4000dd00:	b02b883a 	mov	r21,r22
4000dd04:	0005883a 	mov	r2,zero
4000dd08:	000b883a 	mov	r5,zero
4000dd0c:	0029883a 	mov	r20,zero
4000dd10:	1004953a 	slli	r2,r2,20
4000dd14:	a8c03fcc 	andi	r3,r21,255
4000dd18:	04400434 	movhi	r17,16
4000dd1c:	8c7fffc4 	addi	r17,r17,-1
4000dd20:	180697fa 	slli	r3,r3,31
4000dd24:	2c4a703a 	and	r5,r5,r17
4000dd28:	288ab03a 	or	r5,r5,r2
4000dd2c:	28c6b03a 	or	r3,r5,r3
4000dd30:	a005883a 	mov	r2,r20
4000dd34:	dfc00c17 	ldw	ra,48(sp)
4000dd38:	df000b17 	ldw	fp,44(sp)
4000dd3c:	ddc00a17 	ldw	r23,40(sp)
4000dd40:	dd800917 	ldw	r22,36(sp)
4000dd44:	dd400817 	ldw	r21,32(sp)
4000dd48:	dd000717 	ldw	r20,28(sp)
4000dd4c:	dcc00617 	ldw	r19,24(sp)
4000dd50:	dc800517 	ldw	r18,20(sp)
4000dd54:	dc400417 	ldw	r17,16(sp)
4000dd58:	dc000317 	ldw	r16,12(sp)
4000dd5c:	dec00d04 	addi	sp,sp,52
4000dd60:	f800283a 	ret
4000dd64:	2404b03a 	or	r2,r4,r16
4000dd68:	2027883a 	mov	r19,r4
4000dd6c:	10004226 	beq	r2,zero,4000de78 <__muldf3+0x2e4>
4000dd70:	8000fc26 	beq	r16,zero,4000e164 <__muldf3+0x5d0>
4000dd74:	8009883a 	mov	r4,r16
4000dd78:	d9800215 	stw	r6,8(sp)
4000dd7c:	d9c00015 	stw	r7,0(sp)
4000dd80:	da400115 	stw	r9,4(sp)
4000dd84:	000e3540 	call	4000e354 <__clzsi2>
4000dd88:	d9800217 	ldw	r6,8(sp)
4000dd8c:	d9c00017 	ldw	r7,0(sp)
4000dd90:	da400117 	ldw	r9,4(sp)
4000dd94:	113ffd44 	addi	r4,r2,-11
4000dd98:	00c00704 	movi	r3,28
4000dd9c:	1900ed16 	blt	r3,r4,4000e154 <__muldf3+0x5c0>
4000dda0:	00c00744 	movi	r3,29
4000dda4:	147ffe04 	addi	r17,r2,-8
4000dda8:	1907c83a 	sub	r3,r3,r4
4000ddac:	8460983a 	sll	r16,r16,r17
4000ddb0:	98c6d83a 	srl	r3,r19,r3
4000ddb4:	9c68983a 	sll	r20,r19,r17
4000ddb8:	1c20b03a 	or	r16,r3,r16
4000ddbc:	1080fcc4 	addi	r2,r2,1011
4000ddc0:	00a5c83a 	sub	r18,zero,r2
4000ddc4:	0027883a 	mov	r19,zero
4000ddc8:	0039883a 	mov	fp,zero
4000ddcc:	003f9006 	br	4000dc10 <__alt_data_end+0xc000dc10>
4000ddd0:	3446b03a 	or	r3,r6,r17
4000ddd4:	1800261e 	bne	r3,zero,4000de70 <__muldf3+0x2dc>
4000ddd8:	0023883a 	mov	r17,zero
4000dddc:	0011883a 	mov	r8,zero
4000dde0:	01400084 	movi	r5,2
4000dde4:	003f9c06 	br	4000dc58 <__alt_data_end+0xc000dc58>
4000dde8:	3446b03a 	or	r3,r6,r17
4000ddec:	18001c26 	beq	r3,zero,4000de60 <__muldf3+0x2cc>
4000ddf0:	8800ce26 	beq	r17,zero,4000e12c <__muldf3+0x598>
4000ddf4:	8809883a 	mov	r4,r17
4000ddf8:	d9800215 	stw	r6,8(sp)
4000ddfc:	da400115 	stw	r9,4(sp)
4000de00:	da800015 	stw	r10,0(sp)
4000de04:	000e3540 	call	4000e354 <__clzsi2>
4000de08:	d9800217 	ldw	r6,8(sp)
4000de0c:	da400117 	ldw	r9,4(sp)
4000de10:	da800017 	ldw	r10,0(sp)
4000de14:	113ffd44 	addi	r4,r2,-11
4000de18:	00c00704 	movi	r3,28
4000de1c:	1900bf16 	blt	r3,r4,4000e11c <__muldf3+0x588>
4000de20:	00c00744 	movi	r3,29
4000de24:	123ffe04 	addi	r8,r2,-8
4000de28:	1907c83a 	sub	r3,r3,r4
4000de2c:	8a22983a 	sll	r17,r17,r8
4000de30:	30c6d83a 	srl	r3,r6,r3
4000de34:	3210983a 	sll	r8,r6,r8
4000de38:	1c62b03a 	or	r17,r3,r17
4000de3c:	1080fcc4 	addi	r2,r2,1011
4000de40:	0085c83a 	sub	r2,zero,r2
4000de44:	000b883a 	mov	r5,zero
4000de48:	003f8306 	br	4000dc58 <__alt_data_end+0xc000dc58>
4000de4c:	b02b883a 	mov	r21,r22
4000de50:	0081ffc4 	movi	r2,2047
4000de54:	000b883a 	mov	r5,zero
4000de58:	0029883a 	mov	r20,zero
4000de5c:	003fac06 	br	4000dd10 <__alt_data_end+0xc000dd10>
4000de60:	0023883a 	mov	r17,zero
4000de64:	0011883a 	mov	r8,zero
4000de68:	01400044 	movi	r5,1
4000de6c:	003f7a06 	br	4000dc58 <__alt_data_end+0xc000dc58>
4000de70:	014000c4 	movi	r5,3
4000de74:	003f7806 	br	4000dc58 <__alt_data_end+0xc000dc58>
4000de78:	04c00104 	movi	r19,4
4000de7c:	0021883a 	mov	r16,zero
4000de80:	0029883a 	mov	r20,zero
4000de84:	07000044 	movi	fp,1
4000de88:	003f6106 	br	4000dc10 <__alt_data_end+0xc000dc10>
4000de8c:	04c00304 	movi	r19,12
4000de90:	070000c4 	movi	fp,3
4000de94:	003f5e06 	br	4000dc10 <__alt_data_end+0xc000dc10>
4000de98:	01400434 	movhi	r5,16
4000de9c:	002b883a 	mov	r21,zero
4000dea0:	297fffc4 	addi	r5,r5,-1
4000dea4:	053fffc4 	movi	r20,-1
4000dea8:	0081ffc4 	movi	r2,2047
4000deac:	003f9806 	br	4000dd10 <__alt_data_end+0xc000dd10>
4000deb0:	8023883a 	mov	r17,r16
4000deb4:	a011883a 	mov	r8,r20
4000deb8:	e00b883a 	mov	r5,fp
4000debc:	003f8a06 	br	4000dce8 <__alt_data_end+0xc000dce8>
4000dec0:	8023883a 	mov	r17,r16
4000dec4:	a011883a 	mov	r8,r20
4000dec8:	482d883a 	mov	r22,r9
4000decc:	e00b883a 	mov	r5,fp
4000ded0:	003f8506 	br	4000dce8 <__alt_data_end+0xc000dce8>
4000ded4:	a00ad43a 	srli	r5,r20,16
4000ded8:	401ad43a 	srli	r13,r8,16
4000dedc:	a53fffcc 	andi	r20,r20,65535
4000dee0:	423fffcc 	andi	r8,r8,65535
4000dee4:	4519383a 	mul	r12,r8,r20
4000dee8:	4147383a 	mul	r3,r8,r5
4000deec:	6d09383a 	mul	r4,r13,r20
4000def0:	600cd43a 	srli	r6,r12,16
4000def4:	2b5d383a 	mul	r14,r5,r13
4000def8:	20c9883a 	add	r4,r4,r3
4000defc:	310d883a 	add	r6,r6,r4
4000df00:	30c0022e 	bgeu	r6,r3,4000df0c <__muldf3+0x378>
4000df04:	00c00074 	movhi	r3,1
4000df08:	70dd883a 	add	r14,r14,r3
4000df0c:	8826d43a 	srli	r19,r17,16
4000df10:	8bffffcc 	andi	r15,r17,65535
4000df14:	7d23383a 	mul	r17,r15,r20
4000df18:	7949383a 	mul	r4,r15,r5
4000df1c:	9d29383a 	mul	r20,r19,r20
4000df20:	8814d43a 	srli	r10,r17,16
4000df24:	3012943a 	slli	r9,r6,16
4000df28:	a129883a 	add	r20,r20,r4
4000df2c:	633fffcc 	andi	r12,r12,65535
4000df30:	5515883a 	add	r10,r10,r20
4000df34:	3006d43a 	srli	r3,r6,16
4000df38:	4b13883a 	add	r9,r9,r12
4000df3c:	2ccb383a 	mul	r5,r5,r19
4000df40:	5100022e 	bgeu	r10,r4,4000df4c <__muldf3+0x3b8>
4000df44:	01000074 	movhi	r4,1
4000df48:	290b883a 	add	r5,r5,r4
4000df4c:	802ad43a 	srli	r21,r16,16
4000df50:	843fffcc 	andi	r16,r16,65535
4000df54:	440d383a 	mul	r6,r8,r16
4000df58:	4565383a 	mul	r18,r8,r21
4000df5c:	8349383a 	mul	r4,r16,r13
4000df60:	500e943a 	slli	r7,r10,16
4000df64:	3010d43a 	srli	r8,r6,16
4000df68:	5028d43a 	srli	r20,r10,16
4000df6c:	2489883a 	add	r4,r4,r18
4000df70:	8abfffcc 	andi	r10,r17,65535
4000df74:	3a95883a 	add	r10,r7,r10
4000df78:	4119883a 	add	r12,r8,r4
4000df7c:	a169883a 	add	r20,r20,r5
4000df80:	1a87883a 	add	r3,r3,r10
4000df84:	6d5b383a 	mul	r13,r13,r21
4000df88:	6480022e 	bgeu	r12,r18,4000df94 <__muldf3+0x400>
4000df8c:	01000074 	movhi	r4,1
4000df90:	691b883a 	add	r13,r13,r4
4000df94:	7c25383a 	mul	r18,r15,r16
4000df98:	7d4b383a 	mul	r5,r15,r21
4000df9c:	84cf383a 	mul	r7,r16,r19
4000dfa0:	901ed43a 	srli	r15,r18,16
4000dfa4:	6008d43a 	srli	r4,r12,16
4000dfa8:	6010943a 	slli	r8,r12,16
4000dfac:	394f883a 	add	r7,r7,r5
4000dfb0:	333fffcc 	andi	r12,r6,65535
4000dfb4:	79df883a 	add	r15,r15,r7
4000dfb8:	235b883a 	add	r13,r4,r13
4000dfbc:	9d63383a 	mul	r17,r19,r21
4000dfc0:	4309883a 	add	r4,r8,r12
4000dfc4:	7940022e 	bgeu	r15,r5,4000dfd0 <__muldf3+0x43c>
4000dfc8:	01400074 	movhi	r5,1
4000dfcc:	8963883a 	add	r17,r17,r5
4000dfd0:	780a943a 	slli	r5,r15,16
4000dfd4:	91bfffcc 	andi	r6,r18,65535
4000dfd8:	70c7883a 	add	r3,r14,r3
4000dfdc:	298d883a 	add	r6,r5,r6
4000dfe0:	1a8f803a 	cmpltu	r7,r3,r10
4000dfe4:	350b883a 	add	r5,r6,r20
4000dfe8:	20c7883a 	add	r3,r4,r3
4000dfec:	3955883a 	add	r10,r7,r5
4000dff0:	1909803a 	cmpltu	r4,r3,r4
4000dff4:	6a91883a 	add	r8,r13,r10
4000dff8:	780cd43a 	srli	r6,r15,16
4000dffc:	2219883a 	add	r12,r4,r8
4000e000:	2d0b803a 	cmpltu	r5,r5,r20
4000e004:	51cf803a 	cmpltu	r7,r10,r7
4000e008:	29ceb03a 	or	r7,r5,r7
4000e00c:	4351803a 	cmpltu	r8,r8,r13
4000e010:	610b803a 	cmpltu	r5,r12,r4
4000e014:	4148b03a 	or	r4,r8,r5
4000e018:	398f883a 	add	r7,r7,r6
4000e01c:	3909883a 	add	r4,r7,r4
4000e020:	1810927a 	slli	r8,r3,9
4000e024:	2449883a 	add	r4,r4,r17
4000e028:	2008927a 	slli	r4,r4,9
4000e02c:	6022d5fa 	srli	r17,r12,23
4000e030:	1806d5fa 	srli	r3,r3,23
4000e034:	4252b03a 	or	r9,r8,r9
4000e038:	600a927a 	slli	r5,r12,9
4000e03c:	4810c03a 	cmpne	r8,r9,zero
4000e040:	2462b03a 	or	r17,r4,r17
4000e044:	40c6b03a 	or	r3,r8,r3
4000e048:	8900402c 	andhi	r4,r17,256
4000e04c:	1950b03a 	or	r8,r3,r5
4000e050:	20000726 	beq	r4,zero,4000e070 <__muldf3+0x4dc>
4000e054:	4006d07a 	srli	r3,r8,1
4000e058:	880497fa 	slli	r2,r17,31
4000e05c:	4200004c 	andi	r8,r8,1
4000e060:	8822d07a 	srli	r17,r17,1
4000e064:	1a10b03a 	or	r8,r3,r8
4000e068:	1210b03a 	or	r8,r2,r8
4000e06c:	5805883a 	mov	r2,r11
4000e070:	1140ffc4 	addi	r5,r2,1023
4000e074:	0140440e 	bge	zero,r5,4000e188 <__muldf3+0x5f4>
4000e078:	40c001cc 	andi	r3,r8,7
4000e07c:	18000726 	beq	r3,zero,4000e09c <__muldf3+0x508>
4000e080:	40c003cc 	andi	r3,r8,15
4000e084:	01000104 	movi	r4,4
4000e088:	19000426 	beq	r3,r4,4000e09c <__muldf3+0x508>
4000e08c:	4107883a 	add	r3,r8,r4
4000e090:	1a11803a 	cmpltu	r8,r3,r8
4000e094:	8a23883a 	add	r17,r17,r8
4000e098:	1811883a 	mov	r8,r3
4000e09c:	88c0402c 	andhi	r3,r17,256
4000e0a0:	18000426 	beq	r3,zero,4000e0b4 <__muldf3+0x520>
4000e0a4:	11410004 	addi	r5,r2,1024
4000e0a8:	00bfc034 	movhi	r2,65280
4000e0ac:	10bfffc4 	addi	r2,r2,-1
4000e0b0:	88a2703a 	and	r17,r17,r2
4000e0b4:	0081ff84 	movi	r2,2046
4000e0b8:	117f6416 	blt	r2,r5,4000de4c <__alt_data_end+0xc000de4c>
4000e0bc:	8828977a 	slli	r20,r17,29
4000e0c0:	4010d0fa 	srli	r8,r8,3
4000e0c4:	8822927a 	slli	r17,r17,9
4000e0c8:	2881ffcc 	andi	r2,r5,2047
4000e0cc:	a228b03a 	or	r20,r20,r8
4000e0d0:	880ad33a 	srli	r5,r17,12
4000e0d4:	b02b883a 	mov	r21,r22
4000e0d8:	003f0d06 	br	4000dd10 <__alt_data_end+0xc000dd10>
4000e0dc:	8080022c 	andhi	r2,r16,8
4000e0e0:	10000926 	beq	r2,zero,4000e108 <__muldf3+0x574>
4000e0e4:	8880022c 	andhi	r2,r17,8
4000e0e8:	1000071e 	bne	r2,zero,4000e108 <__muldf3+0x574>
4000e0ec:	00800434 	movhi	r2,16
4000e0f0:	89400234 	orhi	r5,r17,8
4000e0f4:	10bfffc4 	addi	r2,r2,-1
4000e0f8:	b82b883a 	mov	r21,r23
4000e0fc:	288a703a 	and	r5,r5,r2
4000e100:	4029883a 	mov	r20,r8
4000e104:	003f6806 	br	4000dea8 <__alt_data_end+0xc000dea8>
4000e108:	00800434 	movhi	r2,16
4000e10c:	81400234 	orhi	r5,r16,8
4000e110:	10bfffc4 	addi	r2,r2,-1
4000e114:	288a703a 	and	r5,r5,r2
4000e118:	003f6306 	br	4000dea8 <__alt_data_end+0xc000dea8>
4000e11c:	147ff604 	addi	r17,r2,-40
4000e120:	3462983a 	sll	r17,r6,r17
4000e124:	0011883a 	mov	r8,zero
4000e128:	003f4406 	br	4000de3c <__alt_data_end+0xc000de3c>
4000e12c:	3009883a 	mov	r4,r6
4000e130:	d9800215 	stw	r6,8(sp)
4000e134:	da400115 	stw	r9,4(sp)
4000e138:	da800015 	stw	r10,0(sp)
4000e13c:	000e3540 	call	4000e354 <__clzsi2>
4000e140:	10800804 	addi	r2,r2,32
4000e144:	da800017 	ldw	r10,0(sp)
4000e148:	da400117 	ldw	r9,4(sp)
4000e14c:	d9800217 	ldw	r6,8(sp)
4000e150:	003f3006 	br	4000de14 <__alt_data_end+0xc000de14>
4000e154:	143ff604 	addi	r16,r2,-40
4000e158:	9c20983a 	sll	r16,r19,r16
4000e15c:	0029883a 	mov	r20,zero
4000e160:	003f1606 	br	4000ddbc <__alt_data_end+0xc000ddbc>
4000e164:	d9800215 	stw	r6,8(sp)
4000e168:	d9c00015 	stw	r7,0(sp)
4000e16c:	da400115 	stw	r9,4(sp)
4000e170:	000e3540 	call	4000e354 <__clzsi2>
4000e174:	10800804 	addi	r2,r2,32
4000e178:	da400117 	ldw	r9,4(sp)
4000e17c:	d9c00017 	ldw	r7,0(sp)
4000e180:	d9800217 	ldw	r6,8(sp)
4000e184:	003f0306 	br	4000dd94 <__alt_data_end+0xc000dd94>
4000e188:	00c00044 	movi	r3,1
4000e18c:	1947c83a 	sub	r3,r3,r5
4000e190:	00800e04 	movi	r2,56
4000e194:	10feda16 	blt	r2,r3,4000dd00 <__alt_data_end+0xc000dd00>
4000e198:	008007c4 	movi	r2,31
4000e19c:	10c01b16 	blt	r2,r3,4000e20c <__muldf3+0x678>
4000e1a0:	00800804 	movi	r2,32
4000e1a4:	10c5c83a 	sub	r2,r2,r3
4000e1a8:	888a983a 	sll	r5,r17,r2
4000e1ac:	40c8d83a 	srl	r4,r8,r3
4000e1b0:	4084983a 	sll	r2,r8,r2
4000e1b4:	88e2d83a 	srl	r17,r17,r3
4000e1b8:	2906b03a 	or	r3,r5,r4
4000e1bc:	1004c03a 	cmpne	r2,r2,zero
4000e1c0:	1886b03a 	or	r3,r3,r2
4000e1c4:	188001cc 	andi	r2,r3,7
4000e1c8:	10000726 	beq	r2,zero,4000e1e8 <__muldf3+0x654>
4000e1cc:	188003cc 	andi	r2,r3,15
4000e1d0:	01000104 	movi	r4,4
4000e1d4:	11000426 	beq	r2,r4,4000e1e8 <__muldf3+0x654>
4000e1d8:	1805883a 	mov	r2,r3
4000e1dc:	10c00104 	addi	r3,r2,4
4000e1e0:	1885803a 	cmpltu	r2,r3,r2
4000e1e4:	88a3883a 	add	r17,r17,r2
4000e1e8:	8880202c 	andhi	r2,r17,128
4000e1ec:	10001c26 	beq	r2,zero,4000e260 <__muldf3+0x6cc>
4000e1f0:	b02b883a 	mov	r21,r22
4000e1f4:	00800044 	movi	r2,1
4000e1f8:	000b883a 	mov	r5,zero
4000e1fc:	0029883a 	mov	r20,zero
4000e200:	003ec306 	br	4000dd10 <__alt_data_end+0xc000dd10>
4000e204:	5805883a 	mov	r2,r11
4000e208:	003f9906 	br	4000e070 <__alt_data_end+0xc000e070>
4000e20c:	00bff844 	movi	r2,-31
4000e210:	1145c83a 	sub	r2,r2,r5
4000e214:	8888d83a 	srl	r4,r17,r2
4000e218:	00800804 	movi	r2,32
4000e21c:	18801a26 	beq	r3,r2,4000e288 <__muldf3+0x6f4>
4000e220:	00801004 	movi	r2,64
4000e224:	10c5c83a 	sub	r2,r2,r3
4000e228:	8884983a 	sll	r2,r17,r2
4000e22c:	1204b03a 	or	r2,r2,r8
4000e230:	1004c03a 	cmpne	r2,r2,zero
4000e234:	2084b03a 	or	r2,r4,r2
4000e238:	144001cc 	andi	r17,r2,7
4000e23c:	88000d1e 	bne	r17,zero,4000e274 <__muldf3+0x6e0>
4000e240:	000b883a 	mov	r5,zero
4000e244:	1028d0fa 	srli	r20,r2,3
4000e248:	b02b883a 	mov	r21,r22
4000e24c:	0005883a 	mov	r2,zero
4000e250:	a468b03a 	or	r20,r20,r17
4000e254:	003eae06 	br	4000dd10 <__alt_data_end+0xc000dd10>
4000e258:	1007883a 	mov	r3,r2
4000e25c:	0023883a 	mov	r17,zero
4000e260:	880a927a 	slli	r5,r17,9
4000e264:	1805883a 	mov	r2,r3
4000e268:	8822977a 	slli	r17,r17,29
4000e26c:	280ad33a 	srli	r5,r5,12
4000e270:	003ff406 	br	4000e244 <__alt_data_end+0xc000e244>
4000e274:	10c003cc 	andi	r3,r2,15
4000e278:	01000104 	movi	r4,4
4000e27c:	193ff626 	beq	r3,r4,4000e258 <__alt_data_end+0xc000e258>
4000e280:	0023883a 	mov	r17,zero
4000e284:	003fd506 	br	4000e1dc <__alt_data_end+0xc000e1dc>
4000e288:	0005883a 	mov	r2,zero
4000e28c:	003fe706 	br	4000e22c <__alt_data_end+0xc000e22c>
4000e290:	00800434 	movhi	r2,16
4000e294:	89400234 	orhi	r5,r17,8
4000e298:	10bfffc4 	addi	r2,r2,-1
4000e29c:	b02b883a 	mov	r21,r22
4000e2a0:	288a703a 	and	r5,r5,r2
4000e2a4:	4029883a 	mov	r20,r8
4000e2a8:	003eff06 	br	4000dea8 <__alt_data_end+0xc000dea8>

4000e2ac <__floatunsidf>:
4000e2ac:	defffe04 	addi	sp,sp,-8
4000e2b0:	dc000015 	stw	r16,0(sp)
4000e2b4:	dfc00115 	stw	ra,4(sp)
4000e2b8:	2021883a 	mov	r16,r4
4000e2bc:	20002226 	beq	r4,zero,4000e348 <__floatunsidf+0x9c>
4000e2c0:	000e3540 	call	4000e354 <__clzsi2>
4000e2c4:	01010784 	movi	r4,1054
4000e2c8:	2089c83a 	sub	r4,r4,r2
4000e2cc:	01810cc4 	movi	r6,1075
4000e2d0:	310dc83a 	sub	r6,r6,r4
4000e2d4:	00c007c4 	movi	r3,31
4000e2d8:	1980120e 	bge	r3,r6,4000e324 <__floatunsidf+0x78>
4000e2dc:	00c104c4 	movi	r3,1043
4000e2e0:	1907c83a 	sub	r3,r3,r4
4000e2e4:	80ca983a 	sll	r5,r16,r3
4000e2e8:	00800434 	movhi	r2,16
4000e2ec:	10bfffc4 	addi	r2,r2,-1
4000e2f0:	2101ffcc 	andi	r4,r4,2047
4000e2f4:	0021883a 	mov	r16,zero
4000e2f8:	288a703a 	and	r5,r5,r2
4000e2fc:	2008953a 	slli	r4,r4,20
4000e300:	00c00434 	movhi	r3,16
4000e304:	18ffffc4 	addi	r3,r3,-1
4000e308:	28c6703a 	and	r3,r5,r3
4000e30c:	8005883a 	mov	r2,r16
4000e310:	1906b03a 	or	r3,r3,r4
4000e314:	dfc00117 	ldw	ra,4(sp)
4000e318:	dc000017 	ldw	r16,0(sp)
4000e31c:	dec00204 	addi	sp,sp,8
4000e320:	f800283a 	ret
4000e324:	00c002c4 	movi	r3,11
4000e328:	188bc83a 	sub	r5,r3,r2
4000e32c:	814ad83a 	srl	r5,r16,r5
4000e330:	00c00434 	movhi	r3,16
4000e334:	18ffffc4 	addi	r3,r3,-1
4000e338:	81a0983a 	sll	r16,r16,r6
4000e33c:	2101ffcc 	andi	r4,r4,2047
4000e340:	28ca703a 	and	r5,r5,r3
4000e344:	003fed06 	br	4000e2fc <__alt_data_end+0xc000e2fc>
4000e348:	0009883a 	mov	r4,zero
4000e34c:	000b883a 	mov	r5,zero
4000e350:	003fea06 	br	4000e2fc <__alt_data_end+0xc000e2fc>

4000e354 <__clzsi2>:
4000e354:	00bfffd4 	movui	r2,65535
4000e358:	11000536 	bltu	r2,r4,4000e370 <__clzsi2+0x1c>
4000e35c:	00803fc4 	movi	r2,255
4000e360:	11000f36 	bltu	r2,r4,4000e3a0 <__clzsi2+0x4c>
4000e364:	00800804 	movi	r2,32
4000e368:	0007883a 	mov	r3,zero
4000e36c:	00000506 	br	4000e384 <__clzsi2+0x30>
4000e370:	00804034 	movhi	r2,256
4000e374:	10bfffc4 	addi	r2,r2,-1
4000e378:	11000c2e 	bgeu	r2,r4,4000e3ac <__clzsi2+0x58>
4000e37c:	00800204 	movi	r2,8
4000e380:	00c00604 	movi	r3,24
4000e384:	20c8d83a 	srl	r4,r4,r3
4000e388:	00d000b4 	movhi	r3,16386
4000e38c:	18e9e984 	addi	r3,r3,-22618
4000e390:	1909883a 	add	r4,r3,r4
4000e394:	20c00003 	ldbu	r3,0(r4)
4000e398:	10c5c83a 	sub	r2,r2,r3
4000e39c:	f800283a 	ret
4000e3a0:	00800604 	movi	r2,24
4000e3a4:	00c00204 	movi	r3,8
4000e3a8:	003ff606 	br	4000e384 <__alt_data_end+0xc000e384>
4000e3ac:	00800404 	movi	r2,16
4000e3b0:	1007883a 	mov	r3,r2
4000e3b4:	003ff306 	br	4000e384 <__alt_data_end+0xc000e384>

4000e3b8 <calloc>:
4000e3b8:	009000b4 	movhi	r2,16386
4000e3bc:	10ad4704 	addi	r2,r2,-19172
4000e3c0:	280d883a 	mov	r6,r5
4000e3c4:	200b883a 	mov	r5,r4
4000e3c8:	11000017 	ldw	r4,0(r2)
4000e3cc:	000e3d01 	jmpi	4000e3d0 <_calloc_r>

4000e3d0 <_calloc_r>:
4000e3d0:	298b383a 	mul	r5,r5,r6
4000e3d4:	defffe04 	addi	sp,sp,-8
4000e3d8:	dfc00115 	stw	ra,4(sp)
4000e3dc:	dc000015 	stw	r16,0(sp)
4000e3e0:	000e4bc0 	call	4000e4bc <_malloc_r>
4000e3e4:	10002926 	beq	r2,zero,4000e48c <_calloc_r+0xbc>
4000e3e8:	11bfff17 	ldw	r6,-4(r2)
4000e3ec:	1021883a 	mov	r16,r2
4000e3f0:	00bfff04 	movi	r2,-4
4000e3f4:	308c703a 	and	r6,r6,r2
4000e3f8:	00c00904 	movi	r3,36
4000e3fc:	308d883a 	add	r6,r6,r2
4000e400:	19801636 	bltu	r3,r6,4000e45c <_calloc_r+0x8c>
4000e404:	008004c4 	movi	r2,19
4000e408:	11800b2e 	bgeu	r2,r6,4000e438 <_calloc_r+0x68>
4000e40c:	80000015 	stw	zero,0(r16)
4000e410:	80000115 	stw	zero,4(r16)
4000e414:	008006c4 	movi	r2,27
4000e418:	11801a2e 	bgeu	r2,r6,4000e484 <_calloc_r+0xb4>
4000e41c:	80000215 	stw	zero,8(r16)
4000e420:	80000315 	stw	zero,12(r16)
4000e424:	30c0151e 	bne	r6,r3,4000e47c <_calloc_r+0xac>
4000e428:	80000415 	stw	zero,16(r16)
4000e42c:	80800604 	addi	r2,r16,24
4000e430:	80000515 	stw	zero,20(r16)
4000e434:	00000106 	br	4000e43c <_calloc_r+0x6c>
4000e438:	8005883a 	mov	r2,r16
4000e43c:	10000015 	stw	zero,0(r2)
4000e440:	10000115 	stw	zero,4(r2)
4000e444:	10000215 	stw	zero,8(r2)
4000e448:	8005883a 	mov	r2,r16
4000e44c:	dfc00117 	ldw	ra,4(sp)
4000e450:	dc000017 	ldw	r16,0(sp)
4000e454:	dec00204 	addi	sp,sp,8
4000e458:	f800283a 	ret
4000e45c:	000b883a 	mov	r5,zero
4000e460:	8009883a 	mov	r4,r16
4000e464:	000ee100 	call	4000ee10 <memset>
4000e468:	8005883a 	mov	r2,r16
4000e46c:	dfc00117 	ldw	ra,4(sp)
4000e470:	dc000017 	ldw	r16,0(sp)
4000e474:	dec00204 	addi	sp,sp,8
4000e478:	f800283a 	ret
4000e47c:	80800404 	addi	r2,r16,16
4000e480:	003fee06 	br	4000e43c <__alt_data_end+0xc000e43c>
4000e484:	80800204 	addi	r2,r16,8
4000e488:	003fec06 	br	4000e43c <__alt_data_end+0xc000e43c>
4000e48c:	0005883a 	mov	r2,zero
4000e490:	003fee06 	br	4000e44c <__alt_data_end+0xc000e44c>

4000e494 <malloc>:
4000e494:	009000b4 	movhi	r2,16386
4000e498:	10ad4704 	addi	r2,r2,-19172
4000e49c:	200b883a 	mov	r5,r4
4000e4a0:	11000017 	ldw	r4,0(r2)
4000e4a4:	000e4bc1 	jmpi	4000e4bc <_malloc_r>

4000e4a8 <free>:
4000e4a8:	009000b4 	movhi	r2,16386
4000e4ac:	10ad4704 	addi	r2,r2,-19172
4000e4b0:	200b883a 	mov	r5,r4
4000e4b4:	11000017 	ldw	r4,0(r2)
4000e4b8:	00136141 	jmpi	40013614 <_free_r>

4000e4bc <_malloc_r>:
4000e4bc:	defff504 	addi	sp,sp,-44
4000e4c0:	dc800315 	stw	r18,12(sp)
4000e4c4:	dfc00a15 	stw	ra,40(sp)
4000e4c8:	df000915 	stw	fp,36(sp)
4000e4cc:	ddc00815 	stw	r23,32(sp)
4000e4d0:	dd800715 	stw	r22,28(sp)
4000e4d4:	dd400615 	stw	r21,24(sp)
4000e4d8:	dd000515 	stw	r20,20(sp)
4000e4dc:	dcc00415 	stw	r19,16(sp)
4000e4e0:	dc400215 	stw	r17,8(sp)
4000e4e4:	dc000115 	stw	r16,4(sp)
4000e4e8:	288002c4 	addi	r2,r5,11
4000e4ec:	00c00584 	movi	r3,22
4000e4f0:	2025883a 	mov	r18,r4
4000e4f4:	18807f2e 	bgeu	r3,r2,4000e6f4 <_malloc_r+0x238>
4000e4f8:	047ffe04 	movi	r17,-8
4000e4fc:	1462703a 	and	r17,r2,r17
4000e500:	8800a316 	blt	r17,zero,4000e790 <_malloc_r+0x2d4>
4000e504:	8940a236 	bltu	r17,r5,4000e790 <_malloc_r+0x2d4>
4000e508:	00197140 	call	40019714 <__malloc_lock>
4000e50c:	00807dc4 	movi	r2,503
4000e510:	1441e92e 	bgeu	r2,r17,4000ecb8 <_malloc_r+0x7fc>
4000e514:	8804d27a 	srli	r2,r17,9
4000e518:	1000a126 	beq	r2,zero,4000e7a0 <_malloc_r+0x2e4>
4000e51c:	00c00104 	movi	r3,4
4000e520:	18811e36 	bltu	r3,r2,4000e99c <_malloc_r+0x4e0>
4000e524:	8804d1ba 	srli	r2,r17,6
4000e528:	12000e44 	addi	r8,r2,57
4000e52c:	11c00e04 	addi	r7,r2,56
4000e530:	4209883a 	add	r4,r8,r8
4000e534:	04d000b4 	movhi	r19,16386
4000e538:	2109883a 	add	r4,r4,r4
4000e53c:	9cebad04 	addi	r19,r19,-20812
4000e540:	2109883a 	add	r4,r4,r4
4000e544:	9909883a 	add	r4,r19,r4
4000e548:	24000117 	ldw	r16,4(r4)
4000e54c:	213ffe04 	addi	r4,r4,-8
4000e550:	24009726 	beq	r4,r16,4000e7b0 <_malloc_r+0x2f4>
4000e554:	80800117 	ldw	r2,4(r16)
4000e558:	01bfff04 	movi	r6,-4
4000e55c:	014003c4 	movi	r5,15
4000e560:	1184703a 	and	r2,r2,r6
4000e564:	1447c83a 	sub	r3,r2,r17
4000e568:	28c00716 	blt	r5,r3,4000e588 <_malloc_r+0xcc>
4000e56c:	1800920e 	bge	r3,zero,4000e7b8 <_malloc_r+0x2fc>
4000e570:	84000317 	ldw	r16,12(r16)
4000e574:	24008e26 	beq	r4,r16,4000e7b0 <_malloc_r+0x2f4>
4000e578:	80800117 	ldw	r2,4(r16)
4000e57c:	1184703a 	and	r2,r2,r6
4000e580:	1447c83a 	sub	r3,r2,r17
4000e584:	28fff90e 	bge	r5,r3,4000e56c <__alt_data_end+0xc000e56c>
4000e588:	3809883a 	mov	r4,r7
4000e58c:	019000b4 	movhi	r6,16386
4000e590:	9c000417 	ldw	r16,16(r19)
4000e594:	31abad04 	addi	r6,r6,-20812
4000e598:	32000204 	addi	r8,r6,8
4000e59c:	82013426 	beq	r16,r8,4000ea70 <_malloc_r+0x5b4>
4000e5a0:	80c00117 	ldw	r3,4(r16)
4000e5a4:	00bfff04 	movi	r2,-4
4000e5a8:	188e703a 	and	r7,r3,r2
4000e5ac:	3c45c83a 	sub	r2,r7,r17
4000e5b0:	00c003c4 	movi	r3,15
4000e5b4:	18811f16 	blt	r3,r2,4000ea34 <_malloc_r+0x578>
4000e5b8:	32000515 	stw	r8,20(r6)
4000e5bc:	32000415 	stw	r8,16(r6)
4000e5c0:	10007f0e 	bge	r2,zero,4000e7c0 <_malloc_r+0x304>
4000e5c4:	00807fc4 	movi	r2,511
4000e5c8:	11c0fd36 	bltu	r2,r7,4000e9c0 <_malloc_r+0x504>
4000e5cc:	3806d0fa 	srli	r3,r7,3
4000e5d0:	01c00044 	movi	r7,1
4000e5d4:	30800117 	ldw	r2,4(r6)
4000e5d8:	19400044 	addi	r5,r3,1
4000e5dc:	294b883a 	add	r5,r5,r5
4000e5e0:	1807d0ba 	srai	r3,r3,2
4000e5e4:	294b883a 	add	r5,r5,r5
4000e5e8:	294b883a 	add	r5,r5,r5
4000e5ec:	298b883a 	add	r5,r5,r6
4000e5f0:	38c6983a 	sll	r3,r7,r3
4000e5f4:	29c00017 	ldw	r7,0(r5)
4000e5f8:	2a7ffe04 	addi	r9,r5,-8
4000e5fc:	1886b03a 	or	r3,r3,r2
4000e600:	82400315 	stw	r9,12(r16)
4000e604:	81c00215 	stw	r7,8(r16)
4000e608:	30c00115 	stw	r3,4(r6)
4000e60c:	2c000015 	stw	r16,0(r5)
4000e610:	3c000315 	stw	r16,12(r7)
4000e614:	2005d0ba 	srai	r2,r4,2
4000e618:	01400044 	movi	r5,1
4000e61c:	288a983a 	sll	r5,r5,r2
4000e620:	19406f36 	bltu	r3,r5,4000e7e0 <_malloc_r+0x324>
4000e624:	28c4703a 	and	r2,r5,r3
4000e628:	10000a1e 	bne	r2,zero,4000e654 <_malloc_r+0x198>
4000e62c:	00bfff04 	movi	r2,-4
4000e630:	294b883a 	add	r5,r5,r5
4000e634:	2088703a 	and	r4,r4,r2
4000e638:	28c4703a 	and	r2,r5,r3
4000e63c:	21000104 	addi	r4,r4,4
4000e640:	1000041e 	bne	r2,zero,4000e654 <_malloc_r+0x198>
4000e644:	294b883a 	add	r5,r5,r5
4000e648:	28c4703a 	and	r2,r5,r3
4000e64c:	21000104 	addi	r4,r4,4
4000e650:	103ffc26 	beq	r2,zero,4000e644 <__alt_data_end+0xc000e644>
4000e654:	02bfff04 	movi	r10,-4
4000e658:	024003c4 	movi	r9,15
4000e65c:	21800044 	addi	r6,r4,1
4000e660:	318d883a 	add	r6,r6,r6
4000e664:	318d883a 	add	r6,r6,r6
4000e668:	318d883a 	add	r6,r6,r6
4000e66c:	998d883a 	add	r6,r19,r6
4000e670:	333ffe04 	addi	r12,r6,-8
4000e674:	2017883a 	mov	r11,r4
4000e678:	31800104 	addi	r6,r6,4
4000e67c:	34000017 	ldw	r16,0(r6)
4000e680:	31fffd04 	addi	r7,r6,-12
4000e684:	81c0041e 	bne	r16,r7,4000e698 <_malloc_r+0x1dc>
4000e688:	0000fb06 	br	4000ea78 <_malloc_r+0x5bc>
4000e68c:	1801030e 	bge	r3,zero,4000ea9c <_malloc_r+0x5e0>
4000e690:	84000317 	ldw	r16,12(r16)
4000e694:	81c0f826 	beq	r16,r7,4000ea78 <_malloc_r+0x5bc>
4000e698:	80800117 	ldw	r2,4(r16)
4000e69c:	1284703a 	and	r2,r2,r10
4000e6a0:	1447c83a 	sub	r3,r2,r17
4000e6a4:	48fff90e 	bge	r9,r3,4000e68c <__alt_data_end+0xc000e68c>
4000e6a8:	80800317 	ldw	r2,12(r16)
4000e6ac:	81000217 	ldw	r4,8(r16)
4000e6b0:	89400054 	ori	r5,r17,1
4000e6b4:	81400115 	stw	r5,4(r16)
4000e6b8:	20800315 	stw	r2,12(r4)
4000e6bc:	11000215 	stw	r4,8(r2)
4000e6c0:	8463883a 	add	r17,r16,r17
4000e6c4:	9c400515 	stw	r17,20(r19)
4000e6c8:	9c400415 	stw	r17,16(r19)
4000e6cc:	18800054 	ori	r2,r3,1
4000e6d0:	88800115 	stw	r2,4(r17)
4000e6d4:	8a000315 	stw	r8,12(r17)
4000e6d8:	8a000215 	stw	r8,8(r17)
4000e6dc:	88e3883a 	add	r17,r17,r3
4000e6e0:	88c00015 	stw	r3,0(r17)
4000e6e4:	9009883a 	mov	r4,r18
4000e6e8:	00197180 	call	40019718 <__malloc_unlock>
4000e6ec:	80800204 	addi	r2,r16,8
4000e6f0:	00001b06 	br	4000e760 <_malloc_r+0x2a4>
4000e6f4:	04400404 	movi	r17,16
4000e6f8:	89402536 	bltu	r17,r5,4000e790 <_malloc_r+0x2d4>
4000e6fc:	00197140 	call	40019714 <__malloc_lock>
4000e700:	00800184 	movi	r2,6
4000e704:	01000084 	movi	r4,2
4000e708:	04d000b4 	movhi	r19,16386
4000e70c:	1085883a 	add	r2,r2,r2
4000e710:	9cebad04 	addi	r19,r19,-20812
4000e714:	1085883a 	add	r2,r2,r2
4000e718:	9885883a 	add	r2,r19,r2
4000e71c:	14000117 	ldw	r16,4(r2)
4000e720:	10fffe04 	addi	r3,r2,-8
4000e724:	80c0d926 	beq	r16,r3,4000ea8c <_malloc_r+0x5d0>
4000e728:	80c00117 	ldw	r3,4(r16)
4000e72c:	81000317 	ldw	r4,12(r16)
4000e730:	00bfff04 	movi	r2,-4
4000e734:	1884703a 	and	r2,r3,r2
4000e738:	81400217 	ldw	r5,8(r16)
4000e73c:	8085883a 	add	r2,r16,r2
4000e740:	10c00117 	ldw	r3,4(r2)
4000e744:	29000315 	stw	r4,12(r5)
4000e748:	21400215 	stw	r5,8(r4)
4000e74c:	18c00054 	ori	r3,r3,1
4000e750:	10c00115 	stw	r3,4(r2)
4000e754:	9009883a 	mov	r4,r18
4000e758:	00197180 	call	40019718 <__malloc_unlock>
4000e75c:	80800204 	addi	r2,r16,8
4000e760:	dfc00a17 	ldw	ra,40(sp)
4000e764:	df000917 	ldw	fp,36(sp)
4000e768:	ddc00817 	ldw	r23,32(sp)
4000e76c:	dd800717 	ldw	r22,28(sp)
4000e770:	dd400617 	ldw	r21,24(sp)
4000e774:	dd000517 	ldw	r20,20(sp)
4000e778:	dcc00417 	ldw	r19,16(sp)
4000e77c:	dc800317 	ldw	r18,12(sp)
4000e780:	dc400217 	ldw	r17,8(sp)
4000e784:	dc000117 	ldw	r16,4(sp)
4000e788:	dec00b04 	addi	sp,sp,44
4000e78c:	f800283a 	ret
4000e790:	00800304 	movi	r2,12
4000e794:	90800015 	stw	r2,0(r18)
4000e798:	0005883a 	mov	r2,zero
4000e79c:	003ff006 	br	4000e760 <__alt_data_end+0xc000e760>
4000e7a0:	01002004 	movi	r4,128
4000e7a4:	02001004 	movi	r8,64
4000e7a8:	01c00fc4 	movi	r7,63
4000e7ac:	003f6106 	br	4000e534 <__alt_data_end+0xc000e534>
4000e7b0:	4009883a 	mov	r4,r8
4000e7b4:	003f7506 	br	4000e58c <__alt_data_end+0xc000e58c>
4000e7b8:	81000317 	ldw	r4,12(r16)
4000e7bc:	003fde06 	br	4000e738 <__alt_data_end+0xc000e738>
4000e7c0:	81c5883a 	add	r2,r16,r7
4000e7c4:	11400117 	ldw	r5,4(r2)
4000e7c8:	9009883a 	mov	r4,r18
4000e7cc:	29400054 	ori	r5,r5,1
4000e7d0:	11400115 	stw	r5,4(r2)
4000e7d4:	00197180 	call	40019718 <__malloc_unlock>
4000e7d8:	80800204 	addi	r2,r16,8
4000e7dc:	003fe006 	br	4000e760 <__alt_data_end+0xc000e760>
4000e7e0:	9c000217 	ldw	r16,8(r19)
4000e7e4:	00bfff04 	movi	r2,-4
4000e7e8:	85800117 	ldw	r22,4(r16)
4000e7ec:	b0ac703a 	and	r22,r22,r2
4000e7f0:	b4400336 	bltu	r22,r17,4000e800 <_malloc_r+0x344>
4000e7f4:	b445c83a 	sub	r2,r22,r17
4000e7f8:	00c003c4 	movi	r3,15
4000e7fc:	18805d16 	blt	r3,r2,4000e974 <_malloc_r+0x4b8>
4000e800:	05d000b4 	movhi	r23,16386
4000e804:	009000b4 	movhi	r2,16386
4000e808:	10b00f04 	addi	r2,r2,-16324
4000e80c:	bded4804 	addi	r23,r23,-19168
4000e810:	15400017 	ldw	r21,0(r2)
4000e814:	b8c00017 	ldw	r3,0(r23)
4000e818:	00bfffc4 	movi	r2,-1
4000e81c:	858d883a 	add	r6,r16,r22
4000e820:	8d6b883a 	add	r21,r17,r21
4000e824:	1880ea26 	beq	r3,r2,4000ebd0 <_malloc_r+0x714>
4000e828:	ad4403c4 	addi	r21,r21,4111
4000e82c:	00bc0004 	movi	r2,-4096
4000e830:	a8aa703a 	and	r21,r21,r2
4000e834:	a80b883a 	mov	r5,r21
4000e838:	9009883a 	mov	r4,r18
4000e83c:	d9800015 	stw	r6,0(sp)
4000e840:	000f1100 	call	4000f110 <_sbrk_r>
4000e844:	1029883a 	mov	r20,r2
4000e848:	00bfffc4 	movi	r2,-1
4000e84c:	d9800017 	ldw	r6,0(sp)
4000e850:	a080e826 	beq	r20,r2,4000ebf4 <_malloc_r+0x738>
4000e854:	a180a636 	bltu	r20,r6,4000eaf0 <_malloc_r+0x634>
4000e858:	071000f4 	movhi	fp,16387
4000e85c:	e7352d04 	addi	fp,fp,-11084
4000e860:	e0800017 	ldw	r2,0(fp)
4000e864:	a887883a 	add	r3,r21,r2
4000e868:	e0c00015 	stw	r3,0(fp)
4000e86c:	3500e626 	beq	r6,r20,4000ec08 <_malloc_r+0x74c>
4000e870:	b9000017 	ldw	r4,0(r23)
4000e874:	00bfffc4 	movi	r2,-1
4000e878:	2080ee26 	beq	r4,r2,4000ec34 <_malloc_r+0x778>
4000e87c:	a185c83a 	sub	r2,r20,r6
4000e880:	10c5883a 	add	r2,r2,r3
4000e884:	e0800015 	stw	r2,0(fp)
4000e888:	a0c001cc 	andi	r3,r20,7
4000e88c:	1800bc26 	beq	r3,zero,4000eb80 <_malloc_r+0x6c4>
4000e890:	a0e9c83a 	sub	r20,r20,r3
4000e894:	00840204 	movi	r2,4104
4000e898:	a5000204 	addi	r20,r20,8
4000e89c:	10c7c83a 	sub	r3,r2,r3
4000e8a0:	a545883a 	add	r2,r20,r21
4000e8a4:	1083ffcc 	andi	r2,r2,4095
4000e8a8:	18abc83a 	sub	r21,r3,r2
4000e8ac:	a80b883a 	mov	r5,r21
4000e8b0:	9009883a 	mov	r4,r18
4000e8b4:	000f1100 	call	4000f110 <_sbrk_r>
4000e8b8:	00ffffc4 	movi	r3,-1
4000e8bc:	10c0e126 	beq	r2,r3,4000ec44 <_malloc_r+0x788>
4000e8c0:	1505c83a 	sub	r2,r2,r20
4000e8c4:	1545883a 	add	r2,r2,r21
4000e8c8:	10800054 	ori	r2,r2,1
4000e8cc:	e0c00017 	ldw	r3,0(fp)
4000e8d0:	9d000215 	stw	r20,8(r19)
4000e8d4:	a0800115 	stw	r2,4(r20)
4000e8d8:	a8c7883a 	add	r3,r21,r3
4000e8dc:	e0c00015 	stw	r3,0(fp)
4000e8e0:	84c00e26 	beq	r16,r19,4000e91c <_malloc_r+0x460>
4000e8e4:	018003c4 	movi	r6,15
4000e8e8:	3580a72e 	bgeu	r6,r22,4000eb88 <_malloc_r+0x6cc>
4000e8ec:	81400117 	ldw	r5,4(r16)
4000e8f0:	013ffe04 	movi	r4,-8
4000e8f4:	b0bffd04 	addi	r2,r22,-12
4000e8f8:	1104703a 	and	r2,r2,r4
4000e8fc:	2900004c 	andi	r4,r5,1
4000e900:	2088b03a 	or	r4,r4,r2
4000e904:	81000115 	stw	r4,4(r16)
4000e908:	01400144 	movi	r5,5
4000e90c:	8089883a 	add	r4,r16,r2
4000e910:	21400115 	stw	r5,4(r4)
4000e914:	21400215 	stw	r5,8(r4)
4000e918:	3080cd36 	bltu	r6,r2,4000ec50 <_malloc_r+0x794>
4000e91c:	009000b4 	movhi	r2,16386
4000e920:	10b00e04 	addi	r2,r2,-16328
4000e924:	11000017 	ldw	r4,0(r2)
4000e928:	20c0012e 	bgeu	r4,r3,4000e930 <_malloc_r+0x474>
4000e92c:	10c00015 	stw	r3,0(r2)
4000e930:	009000b4 	movhi	r2,16386
4000e934:	10b00d04 	addi	r2,r2,-16332
4000e938:	11000017 	ldw	r4,0(r2)
4000e93c:	9c000217 	ldw	r16,8(r19)
4000e940:	20c0012e 	bgeu	r4,r3,4000e948 <_malloc_r+0x48c>
4000e944:	10c00015 	stw	r3,0(r2)
4000e948:	80c00117 	ldw	r3,4(r16)
4000e94c:	00bfff04 	movi	r2,-4
4000e950:	1886703a 	and	r3,r3,r2
4000e954:	1c45c83a 	sub	r2,r3,r17
4000e958:	1c400236 	bltu	r3,r17,4000e964 <_malloc_r+0x4a8>
4000e95c:	00c003c4 	movi	r3,15
4000e960:	18800416 	blt	r3,r2,4000e974 <_malloc_r+0x4b8>
4000e964:	9009883a 	mov	r4,r18
4000e968:	00197180 	call	40019718 <__malloc_unlock>
4000e96c:	0005883a 	mov	r2,zero
4000e970:	003f7b06 	br	4000e760 <__alt_data_end+0xc000e760>
4000e974:	88c00054 	ori	r3,r17,1
4000e978:	80c00115 	stw	r3,4(r16)
4000e97c:	8463883a 	add	r17,r16,r17
4000e980:	10800054 	ori	r2,r2,1
4000e984:	9c400215 	stw	r17,8(r19)
4000e988:	88800115 	stw	r2,4(r17)
4000e98c:	9009883a 	mov	r4,r18
4000e990:	00197180 	call	40019718 <__malloc_unlock>
4000e994:	80800204 	addi	r2,r16,8
4000e998:	003f7106 	br	4000e760 <__alt_data_end+0xc000e760>
4000e99c:	00c00504 	movi	r3,20
4000e9a0:	18804a2e 	bgeu	r3,r2,4000eacc <_malloc_r+0x610>
4000e9a4:	00c01504 	movi	r3,84
4000e9a8:	18806e36 	bltu	r3,r2,4000eb64 <_malloc_r+0x6a8>
4000e9ac:	8804d33a 	srli	r2,r17,12
4000e9b0:	12001bc4 	addi	r8,r2,111
4000e9b4:	11c01b84 	addi	r7,r2,110
4000e9b8:	4209883a 	add	r4,r8,r8
4000e9bc:	003edd06 	br	4000e534 <__alt_data_end+0xc000e534>
4000e9c0:	3804d27a 	srli	r2,r7,9
4000e9c4:	00c00104 	movi	r3,4
4000e9c8:	1880442e 	bgeu	r3,r2,4000eadc <_malloc_r+0x620>
4000e9cc:	00c00504 	movi	r3,20
4000e9d0:	18808136 	bltu	r3,r2,4000ebd8 <_malloc_r+0x71c>
4000e9d4:	11401704 	addi	r5,r2,92
4000e9d8:	10c016c4 	addi	r3,r2,91
4000e9dc:	294b883a 	add	r5,r5,r5
4000e9e0:	294b883a 	add	r5,r5,r5
4000e9e4:	294b883a 	add	r5,r5,r5
4000e9e8:	994b883a 	add	r5,r19,r5
4000e9ec:	28800017 	ldw	r2,0(r5)
4000e9f0:	019000b4 	movhi	r6,16386
4000e9f4:	297ffe04 	addi	r5,r5,-8
4000e9f8:	31abad04 	addi	r6,r6,-20812
4000e9fc:	28806526 	beq	r5,r2,4000eb94 <_malloc_r+0x6d8>
4000ea00:	01bfff04 	movi	r6,-4
4000ea04:	10c00117 	ldw	r3,4(r2)
4000ea08:	1986703a 	and	r3,r3,r6
4000ea0c:	38c0022e 	bgeu	r7,r3,4000ea18 <_malloc_r+0x55c>
4000ea10:	10800217 	ldw	r2,8(r2)
4000ea14:	28bffb1e 	bne	r5,r2,4000ea04 <__alt_data_end+0xc000ea04>
4000ea18:	11400317 	ldw	r5,12(r2)
4000ea1c:	98c00117 	ldw	r3,4(r19)
4000ea20:	81400315 	stw	r5,12(r16)
4000ea24:	80800215 	stw	r2,8(r16)
4000ea28:	2c000215 	stw	r16,8(r5)
4000ea2c:	14000315 	stw	r16,12(r2)
4000ea30:	003ef806 	br	4000e614 <__alt_data_end+0xc000e614>
4000ea34:	88c00054 	ori	r3,r17,1
4000ea38:	80c00115 	stw	r3,4(r16)
4000ea3c:	8463883a 	add	r17,r16,r17
4000ea40:	34400515 	stw	r17,20(r6)
4000ea44:	34400415 	stw	r17,16(r6)
4000ea48:	10c00054 	ori	r3,r2,1
4000ea4c:	8a000315 	stw	r8,12(r17)
4000ea50:	8a000215 	stw	r8,8(r17)
4000ea54:	88c00115 	stw	r3,4(r17)
4000ea58:	88a3883a 	add	r17,r17,r2
4000ea5c:	88800015 	stw	r2,0(r17)
4000ea60:	9009883a 	mov	r4,r18
4000ea64:	00197180 	call	40019718 <__malloc_unlock>
4000ea68:	80800204 	addi	r2,r16,8
4000ea6c:	003f3c06 	br	4000e760 <__alt_data_end+0xc000e760>
4000ea70:	30c00117 	ldw	r3,4(r6)
4000ea74:	003ee706 	br	4000e614 <__alt_data_end+0xc000e614>
4000ea78:	5ac00044 	addi	r11,r11,1
4000ea7c:	588000cc 	andi	r2,r11,3
4000ea80:	31800204 	addi	r6,r6,8
4000ea84:	103efd1e 	bne	r2,zero,4000e67c <__alt_data_end+0xc000e67c>
4000ea88:	00002406 	br	4000eb1c <_malloc_r+0x660>
4000ea8c:	14000317 	ldw	r16,12(r2)
4000ea90:	143f251e 	bne	r2,r16,4000e728 <__alt_data_end+0xc000e728>
4000ea94:	21000084 	addi	r4,r4,2
4000ea98:	003ebc06 	br	4000e58c <__alt_data_end+0xc000e58c>
4000ea9c:	8085883a 	add	r2,r16,r2
4000eaa0:	10c00117 	ldw	r3,4(r2)
4000eaa4:	81000317 	ldw	r4,12(r16)
4000eaa8:	81400217 	ldw	r5,8(r16)
4000eaac:	18c00054 	ori	r3,r3,1
4000eab0:	10c00115 	stw	r3,4(r2)
4000eab4:	29000315 	stw	r4,12(r5)
4000eab8:	21400215 	stw	r5,8(r4)
4000eabc:	9009883a 	mov	r4,r18
4000eac0:	00197180 	call	40019718 <__malloc_unlock>
4000eac4:	80800204 	addi	r2,r16,8
4000eac8:	003f2506 	br	4000e760 <__alt_data_end+0xc000e760>
4000eacc:	12001704 	addi	r8,r2,92
4000ead0:	11c016c4 	addi	r7,r2,91
4000ead4:	4209883a 	add	r4,r8,r8
4000ead8:	003e9606 	br	4000e534 <__alt_data_end+0xc000e534>
4000eadc:	3804d1ba 	srli	r2,r7,6
4000eae0:	11400e44 	addi	r5,r2,57
4000eae4:	10c00e04 	addi	r3,r2,56
4000eae8:	294b883a 	add	r5,r5,r5
4000eaec:	003fbc06 	br	4000e9e0 <__alt_data_end+0xc000e9e0>
4000eaf0:	84ff5926 	beq	r16,r19,4000e858 <__alt_data_end+0xc000e858>
4000eaf4:	009000b4 	movhi	r2,16386
4000eaf8:	10abad04 	addi	r2,r2,-20812
4000eafc:	14000217 	ldw	r16,8(r2)
4000eb00:	00bfff04 	movi	r2,-4
4000eb04:	80c00117 	ldw	r3,4(r16)
4000eb08:	1886703a 	and	r3,r3,r2
4000eb0c:	003f9106 	br	4000e954 <__alt_data_end+0xc000e954>
4000eb10:	60800217 	ldw	r2,8(r12)
4000eb14:	213fffc4 	addi	r4,r4,-1
4000eb18:	1300651e 	bne	r2,r12,4000ecb0 <_malloc_r+0x7f4>
4000eb1c:	208000cc 	andi	r2,r4,3
4000eb20:	633ffe04 	addi	r12,r12,-8
4000eb24:	103ffa1e 	bne	r2,zero,4000eb10 <__alt_data_end+0xc000eb10>
4000eb28:	98800117 	ldw	r2,4(r19)
4000eb2c:	0146303a 	nor	r3,zero,r5
4000eb30:	1884703a 	and	r2,r3,r2
4000eb34:	98800115 	stw	r2,4(r19)
4000eb38:	294b883a 	add	r5,r5,r5
4000eb3c:	117f2836 	bltu	r2,r5,4000e7e0 <__alt_data_end+0xc000e7e0>
4000eb40:	283f2726 	beq	r5,zero,4000e7e0 <__alt_data_end+0xc000e7e0>
4000eb44:	2886703a 	and	r3,r5,r2
4000eb48:	5809883a 	mov	r4,r11
4000eb4c:	183ec31e 	bne	r3,zero,4000e65c <__alt_data_end+0xc000e65c>
4000eb50:	294b883a 	add	r5,r5,r5
4000eb54:	2886703a 	and	r3,r5,r2
4000eb58:	21000104 	addi	r4,r4,4
4000eb5c:	183ffc26 	beq	r3,zero,4000eb50 <__alt_data_end+0xc000eb50>
4000eb60:	003ebe06 	br	4000e65c <__alt_data_end+0xc000e65c>
4000eb64:	00c05504 	movi	r3,340
4000eb68:	18801236 	bltu	r3,r2,4000ebb4 <_malloc_r+0x6f8>
4000eb6c:	8804d3fa 	srli	r2,r17,15
4000eb70:	12001e04 	addi	r8,r2,120
4000eb74:	11c01dc4 	addi	r7,r2,119
4000eb78:	4209883a 	add	r4,r8,r8
4000eb7c:	003e6d06 	br	4000e534 <__alt_data_end+0xc000e534>
4000eb80:	00c40004 	movi	r3,4096
4000eb84:	003f4606 	br	4000e8a0 <__alt_data_end+0xc000e8a0>
4000eb88:	00800044 	movi	r2,1
4000eb8c:	a0800115 	stw	r2,4(r20)
4000eb90:	003f7406 	br	4000e964 <__alt_data_end+0xc000e964>
4000eb94:	1805d0ba 	srai	r2,r3,2
4000eb98:	01c00044 	movi	r7,1
4000eb9c:	30c00117 	ldw	r3,4(r6)
4000eba0:	388e983a 	sll	r7,r7,r2
4000eba4:	2805883a 	mov	r2,r5
4000eba8:	38c6b03a 	or	r3,r7,r3
4000ebac:	30c00115 	stw	r3,4(r6)
4000ebb0:	003f9b06 	br	4000ea20 <__alt_data_end+0xc000ea20>
4000ebb4:	00c15504 	movi	r3,1364
4000ebb8:	18801a36 	bltu	r3,r2,4000ec24 <_malloc_r+0x768>
4000ebbc:	8804d4ba 	srli	r2,r17,18
4000ebc0:	12001f44 	addi	r8,r2,125
4000ebc4:	11c01f04 	addi	r7,r2,124
4000ebc8:	4209883a 	add	r4,r8,r8
4000ebcc:	003e5906 	br	4000e534 <__alt_data_end+0xc000e534>
4000ebd0:	ad400404 	addi	r21,r21,16
4000ebd4:	003f1706 	br	4000e834 <__alt_data_end+0xc000e834>
4000ebd8:	00c01504 	movi	r3,84
4000ebdc:	18802336 	bltu	r3,r2,4000ec6c <_malloc_r+0x7b0>
4000ebe0:	3804d33a 	srli	r2,r7,12
4000ebe4:	11401bc4 	addi	r5,r2,111
4000ebe8:	10c01b84 	addi	r3,r2,110
4000ebec:	294b883a 	add	r5,r5,r5
4000ebf0:	003f7b06 	br	4000e9e0 <__alt_data_end+0xc000e9e0>
4000ebf4:	9c000217 	ldw	r16,8(r19)
4000ebf8:	00bfff04 	movi	r2,-4
4000ebfc:	80c00117 	ldw	r3,4(r16)
4000ec00:	1886703a 	and	r3,r3,r2
4000ec04:	003f5306 	br	4000e954 <__alt_data_end+0xc000e954>
4000ec08:	3083ffcc 	andi	r2,r6,4095
4000ec0c:	103f181e 	bne	r2,zero,4000e870 <__alt_data_end+0xc000e870>
4000ec10:	99000217 	ldw	r4,8(r19)
4000ec14:	b545883a 	add	r2,r22,r21
4000ec18:	10800054 	ori	r2,r2,1
4000ec1c:	20800115 	stw	r2,4(r4)
4000ec20:	003f3e06 	br	4000e91c <__alt_data_end+0xc000e91c>
4000ec24:	01003f84 	movi	r4,254
4000ec28:	02001fc4 	movi	r8,127
4000ec2c:	01c01f84 	movi	r7,126
4000ec30:	003e4006 	br	4000e534 <__alt_data_end+0xc000e534>
4000ec34:	009000b4 	movhi	r2,16386
4000ec38:	10ad4804 	addi	r2,r2,-19168
4000ec3c:	15000015 	stw	r20,0(r2)
4000ec40:	003f1106 	br	4000e888 <__alt_data_end+0xc000e888>
4000ec44:	00800044 	movi	r2,1
4000ec48:	002b883a 	mov	r21,zero
4000ec4c:	003f1f06 	br	4000e8cc <__alt_data_end+0xc000e8cc>
4000ec50:	81400204 	addi	r5,r16,8
4000ec54:	9009883a 	mov	r4,r18
4000ec58:	00136140 	call	40013614 <_free_r>
4000ec5c:	009000f4 	movhi	r2,16387
4000ec60:	10b52d04 	addi	r2,r2,-11084
4000ec64:	10c00017 	ldw	r3,0(r2)
4000ec68:	003f2c06 	br	4000e91c <__alt_data_end+0xc000e91c>
4000ec6c:	00c05504 	movi	r3,340
4000ec70:	18800536 	bltu	r3,r2,4000ec88 <_malloc_r+0x7cc>
4000ec74:	3804d3fa 	srli	r2,r7,15
4000ec78:	11401e04 	addi	r5,r2,120
4000ec7c:	10c01dc4 	addi	r3,r2,119
4000ec80:	294b883a 	add	r5,r5,r5
4000ec84:	003f5606 	br	4000e9e0 <__alt_data_end+0xc000e9e0>
4000ec88:	00c15504 	movi	r3,1364
4000ec8c:	18800536 	bltu	r3,r2,4000eca4 <_malloc_r+0x7e8>
4000ec90:	3804d4ba 	srli	r2,r7,18
4000ec94:	11401f44 	addi	r5,r2,125
4000ec98:	10c01f04 	addi	r3,r2,124
4000ec9c:	294b883a 	add	r5,r5,r5
4000eca0:	003f4f06 	br	4000e9e0 <__alt_data_end+0xc000e9e0>
4000eca4:	01403f84 	movi	r5,254
4000eca8:	00c01f84 	movi	r3,126
4000ecac:	003f4c06 	br	4000e9e0 <__alt_data_end+0xc000e9e0>
4000ecb0:	98800117 	ldw	r2,4(r19)
4000ecb4:	003fa006 	br	4000eb38 <__alt_data_end+0xc000eb38>
4000ecb8:	8808d0fa 	srli	r4,r17,3
4000ecbc:	20800044 	addi	r2,r4,1
4000ecc0:	1085883a 	add	r2,r2,r2
4000ecc4:	003e9006 	br	4000e708 <__alt_data_end+0xc000e708>

4000ecc8 <memcpy>:
4000ecc8:	defffd04 	addi	sp,sp,-12
4000eccc:	dfc00215 	stw	ra,8(sp)
4000ecd0:	dc400115 	stw	r17,4(sp)
4000ecd4:	dc000015 	stw	r16,0(sp)
4000ecd8:	00c003c4 	movi	r3,15
4000ecdc:	2005883a 	mov	r2,r4
4000ece0:	1980452e 	bgeu	r3,r6,4000edf8 <memcpy+0x130>
4000ece4:	2906b03a 	or	r3,r5,r4
4000ece8:	18c000cc 	andi	r3,r3,3
4000ecec:	1800441e 	bne	r3,zero,4000ee00 <memcpy+0x138>
4000ecf0:	347ffc04 	addi	r17,r6,-16
4000ecf4:	8822d13a 	srli	r17,r17,4
4000ecf8:	28c00104 	addi	r3,r5,4
4000ecfc:	23400104 	addi	r13,r4,4
4000ed00:	8820913a 	slli	r16,r17,4
4000ed04:	2b000204 	addi	r12,r5,8
4000ed08:	22c00204 	addi	r11,r4,8
4000ed0c:	84000504 	addi	r16,r16,20
4000ed10:	2a800304 	addi	r10,r5,12
4000ed14:	22400304 	addi	r9,r4,12
4000ed18:	2c21883a 	add	r16,r5,r16
4000ed1c:	2811883a 	mov	r8,r5
4000ed20:	200f883a 	mov	r7,r4
4000ed24:	41000017 	ldw	r4,0(r8)
4000ed28:	1fc00017 	ldw	ra,0(r3)
4000ed2c:	63c00017 	ldw	r15,0(r12)
4000ed30:	39000015 	stw	r4,0(r7)
4000ed34:	53800017 	ldw	r14,0(r10)
4000ed38:	6fc00015 	stw	ra,0(r13)
4000ed3c:	5bc00015 	stw	r15,0(r11)
4000ed40:	4b800015 	stw	r14,0(r9)
4000ed44:	18c00404 	addi	r3,r3,16
4000ed48:	39c00404 	addi	r7,r7,16
4000ed4c:	42000404 	addi	r8,r8,16
4000ed50:	6b400404 	addi	r13,r13,16
4000ed54:	63000404 	addi	r12,r12,16
4000ed58:	5ac00404 	addi	r11,r11,16
4000ed5c:	52800404 	addi	r10,r10,16
4000ed60:	4a400404 	addi	r9,r9,16
4000ed64:	1c3fef1e 	bne	r3,r16,4000ed24 <__alt_data_end+0xc000ed24>
4000ed68:	89c00044 	addi	r7,r17,1
4000ed6c:	380e913a 	slli	r7,r7,4
4000ed70:	310003cc 	andi	r4,r6,15
4000ed74:	02c000c4 	movi	r11,3
4000ed78:	11c7883a 	add	r3,r2,r7
4000ed7c:	29cb883a 	add	r5,r5,r7
4000ed80:	5900212e 	bgeu	r11,r4,4000ee08 <memcpy+0x140>
4000ed84:	1813883a 	mov	r9,r3
4000ed88:	2811883a 	mov	r8,r5
4000ed8c:	200f883a 	mov	r7,r4
4000ed90:	42800017 	ldw	r10,0(r8)
4000ed94:	4a400104 	addi	r9,r9,4
4000ed98:	39ffff04 	addi	r7,r7,-4
4000ed9c:	4abfff15 	stw	r10,-4(r9)
4000eda0:	42000104 	addi	r8,r8,4
4000eda4:	59fffa36 	bltu	r11,r7,4000ed90 <__alt_data_end+0xc000ed90>
4000eda8:	213fff04 	addi	r4,r4,-4
4000edac:	2008d0ba 	srli	r4,r4,2
4000edb0:	318000cc 	andi	r6,r6,3
4000edb4:	21000044 	addi	r4,r4,1
4000edb8:	2109883a 	add	r4,r4,r4
4000edbc:	2109883a 	add	r4,r4,r4
4000edc0:	1907883a 	add	r3,r3,r4
4000edc4:	290b883a 	add	r5,r5,r4
4000edc8:	30000626 	beq	r6,zero,4000ede4 <memcpy+0x11c>
4000edcc:	198d883a 	add	r6,r3,r6
4000edd0:	29c00003 	ldbu	r7,0(r5)
4000edd4:	18c00044 	addi	r3,r3,1
4000edd8:	29400044 	addi	r5,r5,1
4000eddc:	19ffffc5 	stb	r7,-1(r3)
4000ede0:	19bffb1e 	bne	r3,r6,4000edd0 <__alt_data_end+0xc000edd0>
4000ede4:	dfc00217 	ldw	ra,8(sp)
4000ede8:	dc400117 	ldw	r17,4(sp)
4000edec:	dc000017 	ldw	r16,0(sp)
4000edf0:	dec00304 	addi	sp,sp,12
4000edf4:	f800283a 	ret
4000edf8:	2007883a 	mov	r3,r4
4000edfc:	003ff206 	br	4000edc8 <__alt_data_end+0xc000edc8>
4000ee00:	2007883a 	mov	r3,r4
4000ee04:	003ff106 	br	4000edcc <__alt_data_end+0xc000edcc>
4000ee08:	200d883a 	mov	r6,r4
4000ee0c:	003fee06 	br	4000edc8 <__alt_data_end+0xc000edc8>

4000ee10 <memset>:
4000ee10:	20c000cc 	andi	r3,r4,3
4000ee14:	2005883a 	mov	r2,r4
4000ee18:	18004426 	beq	r3,zero,4000ef2c <memset+0x11c>
4000ee1c:	31ffffc4 	addi	r7,r6,-1
4000ee20:	30004026 	beq	r6,zero,4000ef24 <memset+0x114>
4000ee24:	2813883a 	mov	r9,r5
4000ee28:	200d883a 	mov	r6,r4
4000ee2c:	2007883a 	mov	r3,r4
4000ee30:	00000406 	br	4000ee44 <memset+0x34>
4000ee34:	3a3fffc4 	addi	r8,r7,-1
4000ee38:	31800044 	addi	r6,r6,1
4000ee3c:	38003926 	beq	r7,zero,4000ef24 <memset+0x114>
4000ee40:	400f883a 	mov	r7,r8
4000ee44:	18c00044 	addi	r3,r3,1
4000ee48:	32400005 	stb	r9,0(r6)
4000ee4c:	1a0000cc 	andi	r8,r3,3
4000ee50:	403ff81e 	bne	r8,zero,4000ee34 <__alt_data_end+0xc000ee34>
4000ee54:	010000c4 	movi	r4,3
4000ee58:	21c02d2e 	bgeu	r4,r7,4000ef10 <memset+0x100>
4000ee5c:	29003fcc 	andi	r4,r5,255
4000ee60:	200c923a 	slli	r6,r4,8
4000ee64:	3108b03a 	or	r4,r6,r4
4000ee68:	200c943a 	slli	r6,r4,16
4000ee6c:	218cb03a 	or	r6,r4,r6
4000ee70:	010003c4 	movi	r4,15
4000ee74:	21c0182e 	bgeu	r4,r7,4000eed8 <memset+0xc8>
4000ee78:	3b3ffc04 	addi	r12,r7,-16
4000ee7c:	6018d13a 	srli	r12,r12,4
4000ee80:	1a000104 	addi	r8,r3,4
4000ee84:	1ac00204 	addi	r11,r3,8
4000ee88:	6008913a 	slli	r4,r12,4
4000ee8c:	1a800304 	addi	r10,r3,12
4000ee90:	1813883a 	mov	r9,r3
4000ee94:	21000504 	addi	r4,r4,20
4000ee98:	1909883a 	add	r4,r3,r4
4000ee9c:	49800015 	stw	r6,0(r9)
4000eea0:	41800015 	stw	r6,0(r8)
4000eea4:	59800015 	stw	r6,0(r11)
4000eea8:	51800015 	stw	r6,0(r10)
4000eeac:	42000404 	addi	r8,r8,16
4000eeb0:	4a400404 	addi	r9,r9,16
4000eeb4:	5ac00404 	addi	r11,r11,16
4000eeb8:	52800404 	addi	r10,r10,16
4000eebc:	413ff71e 	bne	r8,r4,4000ee9c <__alt_data_end+0xc000ee9c>
4000eec0:	63000044 	addi	r12,r12,1
4000eec4:	6018913a 	slli	r12,r12,4
4000eec8:	39c003cc 	andi	r7,r7,15
4000eecc:	010000c4 	movi	r4,3
4000eed0:	1b07883a 	add	r3,r3,r12
4000eed4:	21c00e2e 	bgeu	r4,r7,4000ef10 <memset+0x100>
4000eed8:	1813883a 	mov	r9,r3
4000eedc:	3811883a 	mov	r8,r7
4000eee0:	010000c4 	movi	r4,3
4000eee4:	49800015 	stw	r6,0(r9)
4000eee8:	423fff04 	addi	r8,r8,-4
4000eeec:	4a400104 	addi	r9,r9,4
4000eef0:	223ffc36 	bltu	r4,r8,4000eee4 <__alt_data_end+0xc000eee4>
4000eef4:	393fff04 	addi	r4,r7,-4
4000eef8:	2008d0ba 	srli	r4,r4,2
4000eefc:	39c000cc 	andi	r7,r7,3
4000ef00:	21000044 	addi	r4,r4,1
4000ef04:	2109883a 	add	r4,r4,r4
4000ef08:	2109883a 	add	r4,r4,r4
4000ef0c:	1907883a 	add	r3,r3,r4
4000ef10:	38000526 	beq	r7,zero,4000ef28 <memset+0x118>
4000ef14:	19cf883a 	add	r7,r3,r7
4000ef18:	19400005 	stb	r5,0(r3)
4000ef1c:	18c00044 	addi	r3,r3,1
4000ef20:	38fffd1e 	bne	r7,r3,4000ef18 <__alt_data_end+0xc000ef18>
4000ef24:	f800283a 	ret
4000ef28:	f800283a 	ret
4000ef2c:	2007883a 	mov	r3,r4
4000ef30:	300f883a 	mov	r7,r6
4000ef34:	003fc706 	br	4000ee54 <__alt_data_end+0xc000ee54>

4000ef38 <_printf_r>:
4000ef38:	defffd04 	addi	sp,sp,-12
4000ef3c:	2805883a 	mov	r2,r5
4000ef40:	dfc00015 	stw	ra,0(sp)
4000ef44:	d9800115 	stw	r6,4(sp)
4000ef48:	d9c00215 	stw	r7,8(sp)
4000ef4c:	21400217 	ldw	r5,8(r4)
4000ef50:	d9c00104 	addi	r7,sp,4
4000ef54:	100d883a 	mov	r6,r2
4000ef58:	000f1fc0 	call	4000f1fc <___vfprintf_internal_r>
4000ef5c:	dfc00017 	ldw	ra,0(sp)
4000ef60:	dec00304 	addi	sp,sp,12
4000ef64:	f800283a 	ret

4000ef68 <printf>:
4000ef68:	defffc04 	addi	sp,sp,-16
4000ef6c:	dfc00015 	stw	ra,0(sp)
4000ef70:	d9400115 	stw	r5,4(sp)
4000ef74:	d9800215 	stw	r6,8(sp)
4000ef78:	d9c00315 	stw	r7,12(sp)
4000ef7c:	009000b4 	movhi	r2,16386
4000ef80:	10ad4704 	addi	r2,r2,-19172
4000ef84:	10800017 	ldw	r2,0(r2)
4000ef88:	200b883a 	mov	r5,r4
4000ef8c:	d9800104 	addi	r6,sp,4
4000ef90:	11000217 	ldw	r4,8(r2)
4000ef94:	00113f40 	call	400113f4 <__vfprintf_internal>
4000ef98:	dfc00017 	ldw	ra,0(sp)
4000ef9c:	dec00404 	addi	sp,sp,16
4000efa0:	f800283a 	ret

4000efa4 <_putchar_r>:
4000efa4:	21800217 	ldw	r6,8(r4)
4000efa8:	001543c1 	jmpi	4001543c <_putc_r>

4000efac <putchar>:
4000efac:	009000b4 	movhi	r2,16386
4000efb0:	10ad4704 	addi	r2,r2,-19172
4000efb4:	200b883a 	mov	r5,r4
4000efb8:	11000017 	ldw	r4,0(r2)
4000efbc:	21800217 	ldw	r6,8(r4)
4000efc0:	001543c1 	jmpi	4001543c <_putc_r>

4000efc4 <_puts_r>:
4000efc4:	defff604 	addi	sp,sp,-40
4000efc8:	dc000715 	stw	r16,28(sp)
4000efcc:	2021883a 	mov	r16,r4
4000efd0:	2809883a 	mov	r4,r5
4000efd4:	dc400815 	stw	r17,32(sp)
4000efd8:	dfc00915 	stw	ra,36(sp)
4000efdc:	2823883a 	mov	r17,r5
4000efe0:	000f1640 	call	4000f164 <strlen>
4000efe4:	10c00044 	addi	r3,r2,1
4000efe8:	d8800115 	stw	r2,4(sp)
4000efec:	009000b4 	movhi	r2,16386
4000eff0:	10a9d004 	addi	r2,r2,-22720
4000eff4:	d8800215 	stw	r2,8(sp)
4000eff8:	00800044 	movi	r2,1
4000effc:	d8800315 	stw	r2,12(sp)
4000f000:	00800084 	movi	r2,2
4000f004:	dc400015 	stw	r17,0(sp)
4000f008:	d8c00615 	stw	r3,24(sp)
4000f00c:	dec00415 	stw	sp,16(sp)
4000f010:	d8800515 	stw	r2,20(sp)
4000f014:	80000226 	beq	r16,zero,4000f020 <_puts_r+0x5c>
4000f018:	80800e17 	ldw	r2,56(r16)
4000f01c:	10001426 	beq	r2,zero,4000f070 <_puts_r+0xac>
4000f020:	81400217 	ldw	r5,8(r16)
4000f024:	2880030b 	ldhu	r2,12(r5)
4000f028:	10c8000c 	andi	r3,r2,8192
4000f02c:	1800061e 	bne	r3,zero,4000f048 <_puts_r+0x84>
4000f030:	29001917 	ldw	r4,100(r5)
4000f034:	00f7ffc4 	movi	r3,-8193
4000f038:	10880014 	ori	r2,r2,8192
4000f03c:	20c6703a 	and	r3,r4,r3
4000f040:	2880030d 	sth	r2,12(r5)
4000f044:	28c01915 	stw	r3,100(r5)
4000f048:	d9800404 	addi	r6,sp,16
4000f04c:	8009883a 	mov	r4,r16
4000f050:	00139240 	call	40013924 <__sfvwrite_r>
4000f054:	1000091e 	bne	r2,zero,4000f07c <_puts_r+0xb8>
4000f058:	00800284 	movi	r2,10
4000f05c:	dfc00917 	ldw	ra,36(sp)
4000f060:	dc400817 	ldw	r17,32(sp)
4000f064:	dc000717 	ldw	r16,28(sp)
4000f068:	dec00a04 	addi	sp,sp,40
4000f06c:	f800283a 	ret
4000f070:	8009883a 	mov	r4,r16
4000f074:	00134a00 	call	400134a0 <__sinit>
4000f078:	003fe906 	br	4000f020 <__alt_data_end+0xc000f020>
4000f07c:	00bfffc4 	movi	r2,-1
4000f080:	003ff606 	br	4000f05c <__alt_data_end+0xc000f05c>

4000f084 <puts>:
4000f084:	009000b4 	movhi	r2,16386
4000f088:	10ad4704 	addi	r2,r2,-19172
4000f08c:	200b883a 	mov	r5,r4
4000f090:	11000017 	ldw	r4,0(r2)
4000f094:	000efc41 	jmpi	4000efc4 <_puts_r>

4000f098 <srand>:
4000f098:	009000b4 	movhi	r2,16386
4000f09c:	10ad4704 	addi	r2,r2,-19172
4000f0a0:	10800017 	ldw	r2,0(r2)
4000f0a4:	11002915 	stw	r4,164(r2)
4000f0a8:	10002a15 	stw	zero,168(r2)
4000f0ac:	f800283a 	ret

4000f0b0 <rand>:
4000f0b0:	009000b4 	movhi	r2,16386
4000f0b4:	10ad4704 	addi	r2,r2,-19172
4000f0b8:	11c00017 	ldw	r7,0(r2)
4000f0bc:	01532574 	movhi	r5,19605
4000f0c0:	019614b4 	movhi	r6,22610
4000f0c4:	38c02917 	ldw	r3,164(r7)
4000f0c8:	39002a17 	ldw	r4,168(r7)
4000f0cc:	295fcb44 	addi	r5,r5,32557
4000f0d0:	31bd0b44 	addi	r6,r6,-3027
4000f0d4:	1951383a 	mul	r8,r3,r5
4000f0d8:	2149383a 	mul	r4,r4,r5
4000f0dc:	198d383a 	mul	r6,r3,r6
4000f0e0:	194a383a 	mulxuu	r5,r3,r5
4000f0e4:	40800044 	addi	r2,r8,1
4000f0e8:	2187883a 	add	r3,r4,r6
4000f0ec:	1949883a 	add	r4,r3,r5
4000f0f0:	38802915 	stw	r2,164(r7)
4000f0f4:	1207803a 	cmpltu	r3,r2,r8
4000f0f8:	00a00034 	movhi	r2,32768
4000f0fc:	1907883a 	add	r3,r3,r4
4000f100:	10bfffc4 	addi	r2,r2,-1
4000f104:	38c02a15 	stw	r3,168(r7)
4000f108:	1884703a 	and	r2,r3,r2
4000f10c:	f800283a 	ret

4000f110 <_sbrk_r>:
4000f110:	defffd04 	addi	sp,sp,-12
4000f114:	dc000015 	stw	r16,0(sp)
4000f118:	041000b4 	movhi	r16,16386
4000f11c:	dc400115 	stw	r17,4(sp)
4000f120:	84301004 	addi	r16,r16,-16320
4000f124:	2023883a 	mov	r17,r4
4000f128:	2809883a 	mov	r4,r5
4000f12c:	dfc00215 	stw	ra,8(sp)
4000f130:	80000015 	stw	zero,0(r16)
4000f134:	00198080 	call	40019808 <sbrk>
4000f138:	00ffffc4 	movi	r3,-1
4000f13c:	10c00526 	beq	r2,r3,4000f154 <_sbrk_r+0x44>
4000f140:	dfc00217 	ldw	ra,8(sp)
4000f144:	dc400117 	ldw	r17,4(sp)
4000f148:	dc000017 	ldw	r16,0(sp)
4000f14c:	dec00304 	addi	sp,sp,12
4000f150:	f800283a 	ret
4000f154:	80c00017 	ldw	r3,0(r16)
4000f158:	183ff926 	beq	r3,zero,4000f140 <__alt_data_end+0xc000f140>
4000f15c:	88c00015 	stw	r3,0(r17)
4000f160:	003ff706 	br	4000f140 <__alt_data_end+0xc000f140>

4000f164 <strlen>:
4000f164:	208000cc 	andi	r2,r4,3
4000f168:	10002026 	beq	r2,zero,4000f1ec <strlen+0x88>
4000f16c:	20800007 	ldb	r2,0(r4)
4000f170:	10002026 	beq	r2,zero,4000f1f4 <strlen+0x90>
4000f174:	2005883a 	mov	r2,r4
4000f178:	00000206 	br	4000f184 <strlen+0x20>
4000f17c:	10c00007 	ldb	r3,0(r2)
4000f180:	18001826 	beq	r3,zero,4000f1e4 <strlen+0x80>
4000f184:	10800044 	addi	r2,r2,1
4000f188:	10c000cc 	andi	r3,r2,3
4000f18c:	183ffb1e 	bne	r3,zero,4000f17c <__alt_data_end+0xc000f17c>
4000f190:	10c00017 	ldw	r3,0(r2)
4000f194:	01ffbff4 	movhi	r7,65279
4000f198:	39ffbfc4 	addi	r7,r7,-257
4000f19c:	00ca303a 	nor	r5,zero,r3
4000f1a0:	01a02074 	movhi	r6,32897
4000f1a4:	19c7883a 	add	r3,r3,r7
4000f1a8:	31a02004 	addi	r6,r6,-32640
4000f1ac:	1946703a 	and	r3,r3,r5
4000f1b0:	1986703a 	and	r3,r3,r6
4000f1b4:	1800091e 	bne	r3,zero,4000f1dc <strlen+0x78>
4000f1b8:	10800104 	addi	r2,r2,4
4000f1bc:	10c00017 	ldw	r3,0(r2)
4000f1c0:	19cb883a 	add	r5,r3,r7
4000f1c4:	00c6303a 	nor	r3,zero,r3
4000f1c8:	28c6703a 	and	r3,r5,r3
4000f1cc:	1986703a 	and	r3,r3,r6
4000f1d0:	183ff926 	beq	r3,zero,4000f1b8 <__alt_data_end+0xc000f1b8>
4000f1d4:	00000106 	br	4000f1dc <strlen+0x78>
4000f1d8:	10800044 	addi	r2,r2,1
4000f1dc:	10c00007 	ldb	r3,0(r2)
4000f1e0:	183ffd1e 	bne	r3,zero,4000f1d8 <__alt_data_end+0xc000f1d8>
4000f1e4:	1105c83a 	sub	r2,r2,r4
4000f1e8:	f800283a 	ret
4000f1ec:	2005883a 	mov	r2,r4
4000f1f0:	003fe706 	br	4000f190 <__alt_data_end+0xc000f190>
4000f1f4:	0005883a 	mov	r2,zero
4000f1f8:	f800283a 	ret

4000f1fc <___vfprintf_internal_r>:
4000f1fc:	deffb804 	addi	sp,sp,-288
4000f200:	dfc04715 	stw	ra,284(sp)
4000f204:	ddc04515 	stw	r23,276(sp)
4000f208:	dd404315 	stw	r21,268(sp)
4000f20c:	d9002c15 	stw	r4,176(sp)
4000f210:	282f883a 	mov	r23,r5
4000f214:	302b883a 	mov	r21,r6
4000f218:	d9c02d15 	stw	r7,180(sp)
4000f21c:	df004615 	stw	fp,280(sp)
4000f220:	dd804415 	stw	r22,272(sp)
4000f224:	dd004215 	stw	r20,264(sp)
4000f228:	dcc04115 	stw	r19,260(sp)
4000f22c:	dc804015 	stw	r18,256(sp)
4000f230:	dc403f15 	stw	r17,252(sp)
4000f234:	dc003e15 	stw	r16,248(sp)
4000f238:	00140140 	call	40014014 <_localeconv_r>
4000f23c:	10800017 	ldw	r2,0(r2)
4000f240:	1009883a 	mov	r4,r2
4000f244:	d8803415 	stw	r2,208(sp)
4000f248:	000f1640 	call	4000f164 <strlen>
4000f24c:	d8803715 	stw	r2,220(sp)
4000f250:	d8802c17 	ldw	r2,176(sp)
4000f254:	10000226 	beq	r2,zero,4000f260 <___vfprintf_internal_r+0x64>
4000f258:	10800e17 	ldw	r2,56(r2)
4000f25c:	1000f926 	beq	r2,zero,4000f644 <___vfprintf_internal_r+0x448>
4000f260:	b880030b 	ldhu	r2,12(r23)
4000f264:	10c8000c 	andi	r3,r2,8192
4000f268:	1800061e 	bne	r3,zero,4000f284 <___vfprintf_internal_r+0x88>
4000f26c:	b9001917 	ldw	r4,100(r23)
4000f270:	00f7ffc4 	movi	r3,-8193
4000f274:	10880014 	ori	r2,r2,8192
4000f278:	20c6703a 	and	r3,r4,r3
4000f27c:	b880030d 	sth	r2,12(r23)
4000f280:	b8c01915 	stw	r3,100(r23)
4000f284:	10c0020c 	andi	r3,r2,8
4000f288:	1800c126 	beq	r3,zero,4000f590 <___vfprintf_internal_r+0x394>
4000f28c:	b8c00417 	ldw	r3,16(r23)
4000f290:	1800bf26 	beq	r3,zero,4000f590 <___vfprintf_internal_r+0x394>
4000f294:	1080068c 	andi	r2,r2,26
4000f298:	00c00284 	movi	r3,10
4000f29c:	10c0c426 	beq	r2,r3,4000f5b0 <___vfprintf_internal_r+0x3b4>
4000f2a0:	d8c00404 	addi	r3,sp,16
4000f2a4:	051000b4 	movhi	r20,16386
4000f2a8:	d9001e04 	addi	r4,sp,120
4000f2ac:	a52a3b84 	addi	r20,r20,-22290
4000f2b0:	d8c01e15 	stw	r3,120(sp)
4000f2b4:	d8002015 	stw	zero,128(sp)
4000f2b8:	d8001f15 	stw	zero,124(sp)
4000f2bc:	d8003315 	stw	zero,204(sp)
4000f2c0:	d8003615 	stw	zero,216(sp)
4000f2c4:	d8003815 	stw	zero,224(sp)
4000f2c8:	1811883a 	mov	r8,r3
4000f2cc:	d8003915 	stw	zero,228(sp)
4000f2d0:	d8003a15 	stw	zero,232(sp)
4000f2d4:	d8002f15 	stw	zero,188(sp)
4000f2d8:	d9002815 	stw	r4,160(sp)
4000f2dc:	a8800007 	ldb	r2,0(r21)
4000f2e0:	10027b26 	beq	r2,zero,4000fcd0 <___vfprintf_internal_r+0xad4>
4000f2e4:	00c00944 	movi	r3,37
4000f2e8:	a821883a 	mov	r16,r21
4000f2ec:	10c0021e 	bne	r2,r3,4000f2f8 <___vfprintf_internal_r+0xfc>
4000f2f0:	00001406 	br	4000f344 <___vfprintf_internal_r+0x148>
4000f2f4:	10c00326 	beq	r2,r3,4000f304 <___vfprintf_internal_r+0x108>
4000f2f8:	84000044 	addi	r16,r16,1
4000f2fc:	80800007 	ldb	r2,0(r16)
4000f300:	103ffc1e 	bne	r2,zero,4000f2f4 <__alt_data_end+0xc000f2f4>
4000f304:	8563c83a 	sub	r17,r16,r21
4000f308:	88000e26 	beq	r17,zero,4000f344 <___vfprintf_internal_r+0x148>
4000f30c:	d8c02017 	ldw	r3,128(sp)
4000f310:	d8801f17 	ldw	r2,124(sp)
4000f314:	45400015 	stw	r21,0(r8)
4000f318:	1c47883a 	add	r3,r3,r17
4000f31c:	10800044 	addi	r2,r2,1
4000f320:	d8c02015 	stw	r3,128(sp)
4000f324:	44400115 	stw	r17,4(r8)
4000f328:	d8801f15 	stw	r2,124(sp)
4000f32c:	00c001c4 	movi	r3,7
4000f330:	1880a716 	blt	r3,r2,4000f5d0 <___vfprintf_internal_r+0x3d4>
4000f334:	42000204 	addi	r8,r8,8
4000f338:	d9402f17 	ldw	r5,188(sp)
4000f33c:	2c4b883a 	add	r5,r5,r17
4000f340:	d9402f15 	stw	r5,188(sp)
4000f344:	80800007 	ldb	r2,0(r16)
4000f348:	1000a826 	beq	r2,zero,4000f5ec <___vfprintf_internal_r+0x3f0>
4000f34c:	84400047 	ldb	r17,1(r16)
4000f350:	00bfffc4 	movi	r2,-1
4000f354:	85400044 	addi	r21,r16,1
4000f358:	d8002785 	stb	zero,158(sp)
4000f35c:	0007883a 	mov	r3,zero
4000f360:	000f883a 	mov	r7,zero
4000f364:	d8802915 	stw	r2,164(sp)
4000f368:	d8003115 	stw	zero,196(sp)
4000f36c:	0025883a 	mov	r18,zero
4000f370:	01401604 	movi	r5,88
4000f374:	01800244 	movi	r6,9
4000f378:	02800a84 	movi	r10,42
4000f37c:	02401b04 	movi	r9,108
4000f380:	ad400044 	addi	r21,r21,1
4000f384:	88bff804 	addi	r2,r17,-32
4000f388:	28830436 	bltu	r5,r2,4000ff9c <___vfprintf_internal_r+0xda0>
4000f38c:	100490ba 	slli	r2,r2,2
4000f390:	01100074 	movhi	r4,16385
4000f394:	213ce904 	addi	r4,r4,-3164
4000f398:	1105883a 	add	r2,r2,r4
4000f39c:	10800017 	ldw	r2,0(r2)
4000f3a0:	1000683a 	jmp	r2
4000f3a4:	4000febc 	xorhi	zero,r8,1018
4000f3a8:	4000ff9c 	xori	zero,r8,1022
4000f3ac:	4000ff9c 	xori	zero,r8,1022
4000f3b0:	4000fedc 	xori	zero,r8,1019
4000f3b4:	4000ff9c 	xori	zero,r8,1022
4000f3b8:	4000ff9c 	xori	zero,r8,1022
4000f3bc:	4000ff9c 	xori	zero,r8,1022
4000f3c0:	4000ff9c 	xori	zero,r8,1022
4000f3c4:	4000ff9c 	xori	zero,r8,1022
4000f3c8:	4000ff9c 	xori	zero,r8,1022
4000f3cc:	4000f650 	cmplti	zero,r8,985
4000f3d0:	4000fdf8 	rdprs	zero,r8,1015
4000f3d4:	4000ff9c 	xori	zero,r8,1022
4000f3d8:	4000f518 	cmpnei	zero,r8,980
4000f3dc:	4000f678 	rdprs	zero,r8,985
4000f3e0:	4000ff9c 	xori	zero,r8,1022
4000f3e4:	4000f6b8 	rdprs	zero,r8,986
4000f3e8:	4000f6c4 	addi	zero,r8,987
4000f3ec:	4000f6c4 	addi	zero,r8,987
4000f3f0:	4000f6c4 	addi	zero,r8,987
4000f3f4:	4000f6c4 	addi	zero,r8,987
4000f3f8:	4000f6c4 	addi	zero,r8,987
4000f3fc:	4000f6c4 	addi	zero,r8,987
4000f400:	4000f6c4 	addi	zero,r8,987
4000f404:	4000f6c4 	addi	zero,r8,987
4000f408:	4000f6c4 	addi	zero,r8,987
4000f40c:	4000ff9c 	xori	zero,r8,1022
4000f410:	4000ff9c 	xori	zero,r8,1022
4000f414:	4000ff9c 	xori	zero,r8,1022
4000f418:	4000ff9c 	xori	zero,r8,1022
4000f41c:	4000ff9c 	xori	zero,r8,1022
4000f420:	4000ff9c 	xori	zero,r8,1022
4000f424:	4000ff9c 	xori	zero,r8,1022
4000f428:	4000ff9c 	xori	zero,r8,1022
4000f42c:	4000ff9c 	xori	zero,r8,1022
4000f430:	4000ff9c 	xori	zero,r8,1022
4000f434:	4000f6f8 	rdprs	zero,r8,987
4000f438:	4000f7b4 	orhi	zero,r8,990
4000f43c:	4000ff9c 	xori	zero,r8,1022
4000f440:	4000f7b4 	orhi	zero,r8,990
4000f444:	4000ff9c 	xori	zero,r8,1022
4000f448:	4000ff9c 	xori	zero,r8,1022
4000f44c:	4000ff9c 	xori	zero,r8,1022
4000f450:	4000ff9c 	xori	zero,r8,1022
4000f454:	4000f854 	ori	zero,r8,993
4000f458:	4000ff9c 	xori	zero,r8,1022
4000f45c:	4000ff9c 	xori	zero,r8,1022
4000f460:	4000f860 	cmpeqi	zero,r8,993
4000f464:	4000ff9c 	xori	zero,r8,1022
4000f468:	4000ff9c 	xori	zero,r8,1022
4000f46c:	4000ff9c 	xori	zero,r8,1022
4000f470:	4000ff9c 	xori	zero,r8,1022
4000f474:	4000ff9c 	xori	zero,r8,1022
4000f478:	4000fcd8 	cmpnei	zero,r8,1011
4000f47c:	4000ff9c 	xori	zero,r8,1022
4000f480:	4000ff9c 	xori	zero,r8,1022
4000f484:	4000fd38 	rdprs	zero,r8,1012
4000f488:	4000ff9c 	xori	zero,r8,1022
4000f48c:	4000ff9c 	xori	zero,r8,1022
4000f490:	4000ff9c 	xori	zero,r8,1022
4000f494:	4000ff9c 	xori	zero,r8,1022
4000f498:	4000ff9c 	xori	zero,r8,1022
4000f49c:	4000ff9c 	xori	zero,r8,1022
4000f4a0:	4000ff9c 	xori	zero,r8,1022
4000f4a4:	4000ff9c 	xori	zero,r8,1022
4000f4a8:	4000ff9c 	xori	zero,r8,1022
4000f4ac:	4000ff9c 	xori	zero,r8,1022
4000f4b0:	4000ff48 	cmpgei	zero,r8,1021
4000f4b4:	4000fee8 	cmpgeui	zero,r8,1019
4000f4b8:	4000f7b4 	orhi	zero,r8,990
4000f4bc:	4000f7b4 	orhi	zero,r8,990
4000f4c0:	4000f7b4 	orhi	zero,r8,990
4000f4c4:	4000fef8 	rdprs	zero,r8,1019
4000f4c8:	4000fee8 	cmpgeui	zero,r8,1019
4000f4cc:	4000ff9c 	xori	zero,r8,1022
4000f4d0:	4000ff9c 	xori	zero,r8,1022
4000f4d4:	4000ff04 	addi	zero,r8,1020
4000f4d8:	4000ff9c 	xori	zero,r8,1022
4000f4dc:	4000ff14 	ori	zero,r8,1020
4000f4e0:	4000fde8 	cmpgeui	zero,r8,1015
4000f4e4:	4000f524 	muli	zero,r8,980
4000f4e8:	4000fe08 	cmpgei	zero,r8,1016
4000f4ec:	4000ff9c 	xori	zero,r8,1022
4000f4f0:	4000fe14 	ori	zero,r8,1016
4000f4f4:	4000ff9c 	xori	zero,r8,1022
4000f4f8:	4000fe70 	cmpltui	zero,r8,1017
4000f4fc:	4000ff9c 	xori	zero,r8,1022
4000f500:	4000ff9c 	xori	zero,r8,1022
4000f504:	4000fe80 	call	44000fe8 <__alt_heap_start+0x3fd3b0c>
4000f508:	d9003117 	ldw	r4,196(sp)
4000f50c:	d8802d15 	stw	r2,180(sp)
4000f510:	0109c83a 	sub	r4,zero,r4
4000f514:	d9003115 	stw	r4,196(sp)
4000f518:	94800114 	ori	r18,r18,4
4000f51c:	ac400007 	ldb	r17,0(r21)
4000f520:	003f9706 	br	4000f380 <__alt_data_end+0xc000f380>
4000f524:	00800c04 	movi	r2,48
4000f528:	d9002d17 	ldw	r4,180(sp)
4000f52c:	d9402917 	ldw	r5,164(sp)
4000f530:	d8802705 	stb	r2,156(sp)
4000f534:	00801e04 	movi	r2,120
4000f538:	d8802745 	stb	r2,157(sp)
4000f53c:	d8002785 	stb	zero,158(sp)
4000f540:	20c00104 	addi	r3,r4,4
4000f544:	24c00017 	ldw	r19,0(r4)
4000f548:	002d883a 	mov	r22,zero
4000f54c:	90800094 	ori	r2,r18,2
4000f550:	28029a16 	blt	r5,zero,4000ffbc <___vfprintf_internal_r+0xdc0>
4000f554:	00bfdfc4 	movi	r2,-129
4000f558:	90a4703a 	and	r18,r18,r2
4000f55c:	d8c02d15 	stw	r3,180(sp)
4000f560:	94800094 	ori	r18,r18,2
4000f564:	9802871e 	bne	r19,zero,4000ff84 <___vfprintf_internal_r+0xd88>
4000f568:	009000b4 	movhi	r2,16386
4000f56c:	10aa3404 	addi	r2,r2,-22320
4000f570:	d8803915 	stw	r2,228(sp)
4000f574:	04401e04 	movi	r17,120
4000f578:	d8802917 	ldw	r2,164(sp)
4000f57c:	0039883a 	mov	fp,zero
4000f580:	1001e926 	beq	r2,zero,4000fd28 <___vfprintf_internal_r+0xb2c>
4000f584:	0027883a 	mov	r19,zero
4000f588:	002d883a 	mov	r22,zero
4000f58c:	00020506 	br	4000fda4 <___vfprintf_internal_r+0xba8>
4000f590:	d9002c17 	ldw	r4,176(sp)
4000f594:	b80b883a 	mov	r5,r23
4000f598:	00114cc0 	call	400114cc <__swsetup_r>
4000f59c:	1005ac1e 	bne	r2,zero,40010c50 <___vfprintf_internal_r+0x1a54>
4000f5a0:	b880030b 	ldhu	r2,12(r23)
4000f5a4:	00c00284 	movi	r3,10
4000f5a8:	1080068c 	andi	r2,r2,26
4000f5ac:	10ff3c1e 	bne	r2,r3,4000f2a0 <__alt_data_end+0xc000f2a0>
4000f5b0:	b880038f 	ldh	r2,14(r23)
4000f5b4:	103f3a16 	blt	r2,zero,4000f2a0 <__alt_data_end+0xc000f2a0>
4000f5b8:	d9c02d17 	ldw	r7,180(sp)
4000f5bc:	d9002c17 	ldw	r4,176(sp)
4000f5c0:	a80d883a 	mov	r6,r21
4000f5c4:	b80b883a 	mov	r5,r23
4000f5c8:	00114100 	call	40011410 <__sbprintf>
4000f5cc:	00001106 	br	4000f614 <___vfprintf_internal_r+0x418>
4000f5d0:	d9002c17 	ldw	r4,176(sp)
4000f5d4:	d9801e04 	addi	r6,sp,120
4000f5d8:	b80b883a 	mov	r5,r23
4000f5dc:	0015e900 	call	40015e90 <__sprint_r>
4000f5e0:	1000081e 	bne	r2,zero,4000f604 <___vfprintf_internal_r+0x408>
4000f5e4:	da000404 	addi	r8,sp,16
4000f5e8:	003f5306 	br	4000f338 <__alt_data_end+0xc000f338>
4000f5ec:	d8802017 	ldw	r2,128(sp)
4000f5f0:	10000426 	beq	r2,zero,4000f604 <___vfprintf_internal_r+0x408>
4000f5f4:	d9002c17 	ldw	r4,176(sp)
4000f5f8:	d9801e04 	addi	r6,sp,120
4000f5fc:	b80b883a 	mov	r5,r23
4000f600:	0015e900 	call	40015e90 <__sprint_r>
4000f604:	b880030b 	ldhu	r2,12(r23)
4000f608:	1080100c 	andi	r2,r2,64
4000f60c:	1005901e 	bne	r2,zero,40010c50 <___vfprintf_internal_r+0x1a54>
4000f610:	d8802f17 	ldw	r2,188(sp)
4000f614:	dfc04717 	ldw	ra,284(sp)
4000f618:	df004617 	ldw	fp,280(sp)
4000f61c:	ddc04517 	ldw	r23,276(sp)
4000f620:	dd804417 	ldw	r22,272(sp)
4000f624:	dd404317 	ldw	r21,268(sp)
4000f628:	dd004217 	ldw	r20,264(sp)
4000f62c:	dcc04117 	ldw	r19,260(sp)
4000f630:	dc804017 	ldw	r18,256(sp)
4000f634:	dc403f17 	ldw	r17,252(sp)
4000f638:	dc003e17 	ldw	r16,248(sp)
4000f63c:	dec04804 	addi	sp,sp,288
4000f640:	f800283a 	ret
4000f644:	d9002c17 	ldw	r4,176(sp)
4000f648:	00134a00 	call	400134a0 <__sinit>
4000f64c:	003f0406 	br	4000f260 <__alt_data_end+0xc000f260>
4000f650:	d8802d17 	ldw	r2,180(sp)
4000f654:	d9002d17 	ldw	r4,180(sp)
4000f658:	10800017 	ldw	r2,0(r2)
4000f65c:	d8803115 	stw	r2,196(sp)
4000f660:	20800104 	addi	r2,r4,4
4000f664:	d9003117 	ldw	r4,196(sp)
4000f668:	203fa716 	blt	r4,zero,4000f508 <__alt_data_end+0xc000f508>
4000f66c:	d8802d15 	stw	r2,180(sp)
4000f670:	ac400007 	ldb	r17,0(r21)
4000f674:	003f4206 	br	4000f380 <__alt_data_end+0xc000f380>
4000f678:	ac400007 	ldb	r17,0(r21)
4000f67c:	aac00044 	addi	r11,r21,1
4000f680:	8a872826 	beq	r17,r10,40011324 <___vfprintf_internal_r+0x2128>
4000f684:	88bff404 	addi	r2,r17,-48
4000f688:	0009883a 	mov	r4,zero
4000f68c:	30867d36 	bltu	r6,r2,40011084 <___vfprintf_internal_r+0x1e88>
4000f690:	5c400007 	ldb	r17,0(r11)
4000f694:	210002a4 	muli	r4,r4,10
4000f698:	5d400044 	addi	r21,r11,1
4000f69c:	a817883a 	mov	r11,r21
4000f6a0:	2089883a 	add	r4,r4,r2
4000f6a4:	88bff404 	addi	r2,r17,-48
4000f6a8:	30bff92e 	bgeu	r6,r2,4000f690 <__alt_data_end+0xc000f690>
4000f6ac:	2005c916 	blt	r4,zero,40010dd4 <___vfprintf_internal_r+0x1bd8>
4000f6b0:	d9002915 	stw	r4,164(sp)
4000f6b4:	003f3306 	br	4000f384 <__alt_data_end+0xc000f384>
4000f6b8:	94802014 	ori	r18,r18,128
4000f6bc:	ac400007 	ldb	r17,0(r21)
4000f6c0:	003f2f06 	br	4000f380 <__alt_data_end+0xc000f380>
4000f6c4:	a809883a 	mov	r4,r21
4000f6c8:	d8003115 	stw	zero,196(sp)
4000f6cc:	88bff404 	addi	r2,r17,-48
4000f6d0:	0017883a 	mov	r11,zero
4000f6d4:	24400007 	ldb	r17,0(r4)
4000f6d8:	5ac002a4 	muli	r11,r11,10
4000f6dc:	ad400044 	addi	r21,r21,1
4000f6e0:	a809883a 	mov	r4,r21
4000f6e4:	12d7883a 	add	r11,r2,r11
4000f6e8:	88bff404 	addi	r2,r17,-48
4000f6ec:	30bff92e 	bgeu	r6,r2,4000f6d4 <__alt_data_end+0xc000f6d4>
4000f6f0:	dac03115 	stw	r11,196(sp)
4000f6f4:	003f2306 	br	4000f384 <__alt_data_end+0xc000f384>
4000f6f8:	18c03fcc 	andi	r3,r3,255
4000f6fc:	18072b1e 	bne	r3,zero,400113ac <___vfprintf_internal_r+0x21b0>
4000f700:	94800414 	ori	r18,r18,16
4000f704:	9080080c 	andi	r2,r18,32
4000f708:	10037b26 	beq	r2,zero,400104f8 <___vfprintf_internal_r+0x12fc>
4000f70c:	d9402d17 	ldw	r5,180(sp)
4000f710:	28800117 	ldw	r2,4(r5)
4000f714:	2cc00017 	ldw	r19,0(r5)
4000f718:	29400204 	addi	r5,r5,8
4000f71c:	d9402d15 	stw	r5,180(sp)
4000f720:	102d883a 	mov	r22,r2
4000f724:	10044b16 	blt	r2,zero,40010854 <___vfprintf_internal_r+0x1658>
4000f728:	d9402917 	ldw	r5,164(sp)
4000f72c:	df002783 	ldbu	fp,158(sp)
4000f730:	2803bc16 	blt	r5,zero,40010624 <___vfprintf_internal_r+0x1428>
4000f734:	00ffdfc4 	movi	r3,-129
4000f738:	9d84b03a 	or	r2,r19,r22
4000f73c:	90e4703a 	and	r18,r18,r3
4000f740:	10017726 	beq	r2,zero,4000fd20 <___vfprintf_internal_r+0xb24>
4000f744:	b0038326 	beq	r22,zero,40010554 <___vfprintf_internal_r+0x1358>
4000f748:	dc402a15 	stw	r17,168(sp)
4000f74c:	dc001e04 	addi	r16,sp,120
4000f750:	b023883a 	mov	r17,r22
4000f754:	402d883a 	mov	r22,r8
4000f758:	9809883a 	mov	r4,r19
4000f75c:	880b883a 	mov	r5,r17
4000f760:	01800284 	movi	r6,10
4000f764:	000f883a 	mov	r7,zero
4000f768:	00181c40 	call	400181c4 <__umoddi3>
4000f76c:	10800c04 	addi	r2,r2,48
4000f770:	843fffc4 	addi	r16,r16,-1
4000f774:	9809883a 	mov	r4,r19
4000f778:	880b883a 	mov	r5,r17
4000f77c:	80800005 	stb	r2,0(r16)
4000f780:	01800284 	movi	r6,10
4000f784:	000f883a 	mov	r7,zero
4000f788:	0017c4c0 	call	40017c4c <__udivdi3>
4000f78c:	1027883a 	mov	r19,r2
4000f790:	10c4b03a 	or	r2,r2,r3
4000f794:	1823883a 	mov	r17,r3
4000f798:	103fef1e 	bne	r2,zero,4000f758 <__alt_data_end+0xc000f758>
4000f79c:	d8c02817 	ldw	r3,160(sp)
4000f7a0:	dc402a17 	ldw	r17,168(sp)
4000f7a4:	b011883a 	mov	r8,r22
4000f7a8:	1c07c83a 	sub	r3,r3,r16
4000f7ac:	d8c02e15 	stw	r3,184(sp)
4000f7b0:	00005906 	br	4000f918 <___vfprintf_internal_r+0x71c>
4000f7b4:	18c03fcc 	andi	r3,r3,255
4000f7b8:	1806fa1e 	bne	r3,zero,400113a4 <___vfprintf_internal_r+0x21a8>
4000f7bc:	9080020c 	andi	r2,r18,8
4000f7c0:	10048a26 	beq	r2,zero,400109ec <___vfprintf_internal_r+0x17f0>
4000f7c4:	d8c02d17 	ldw	r3,180(sp)
4000f7c8:	d9002d17 	ldw	r4,180(sp)
4000f7cc:	d9402d17 	ldw	r5,180(sp)
4000f7d0:	18c00017 	ldw	r3,0(r3)
4000f7d4:	21000117 	ldw	r4,4(r4)
4000f7d8:	29400204 	addi	r5,r5,8
4000f7dc:	d8c03615 	stw	r3,216(sp)
4000f7e0:	d9003815 	stw	r4,224(sp)
4000f7e4:	d9402d15 	stw	r5,180(sp)
4000f7e8:	d9003617 	ldw	r4,216(sp)
4000f7ec:	d9403817 	ldw	r5,224(sp)
4000f7f0:	da003d15 	stw	r8,244(sp)
4000f7f4:	04000044 	movi	r16,1
4000f7f8:	0015b080 	call	40015b08 <__fpclassifyd>
4000f7fc:	da003d17 	ldw	r8,244(sp)
4000f800:	14041f1e 	bne	r2,r16,40010880 <___vfprintf_internal_r+0x1684>
4000f804:	d9003617 	ldw	r4,216(sp)
4000f808:	d9403817 	ldw	r5,224(sp)
4000f80c:	000d883a 	mov	r6,zero
4000f810:	000f883a 	mov	r7,zero
4000f814:	00188600 	call	40018860 <__ledf2>
4000f818:	da003d17 	ldw	r8,244(sp)
4000f81c:	1005be16 	blt	r2,zero,40010f18 <___vfprintf_internal_r+0x1d1c>
4000f820:	df002783 	ldbu	fp,158(sp)
4000f824:	008011c4 	movi	r2,71
4000f828:	1445330e 	bge	r2,r17,40010cf8 <___vfprintf_internal_r+0x1afc>
4000f82c:	041000b4 	movhi	r16,16386
4000f830:	842a2c04 	addi	r16,r16,-22352
4000f834:	00c000c4 	movi	r3,3
4000f838:	00bfdfc4 	movi	r2,-129
4000f83c:	d8c02a15 	stw	r3,168(sp)
4000f840:	90a4703a 	and	r18,r18,r2
4000f844:	d8c02e15 	stw	r3,184(sp)
4000f848:	d8002915 	stw	zero,164(sp)
4000f84c:	d8003215 	stw	zero,200(sp)
4000f850:	00003706 	br	4000f930 <___vfprintf_internal_r+0x734>
4000f854:	94800214 	ori	r18,r18,8
4000f858:	ac400007 	ldb	r17,0(r21)
4000f85c:	003ec806 	br	4000f380 <__alt_data_end+0xc000f380>
4000f860:	18c03fcc 	andi	r3,r3,255
4000f864:	1806db1e 	bne	r3,zero,400113d4 <___vfprintf_internal_r+0x21d8>
4000f868:	94800414 	ori	r18,r18,16
4000f86c:	9080080c 	andi	r2,r18,32
4000f870:	1002d826 	beq	r2,zero,400103d4 <___vfprintf_internal_r+0x11d8>
4000f874:	d9402d17 	ldw	r5,180(sp)
4000f878:	d8c02917 	ldw	r3,164(sp)
4000f87c:	d8002785 	stb	zero,158(sp)
4000f880:	28800204 	addi	r2,r5,8
4000f884:	2cc00017 	ldw	r19,0(r5)
4000f888:	2d800117 	ldw	r22,4(r5)
4000f88c:	18048f16 	blt	r3,zero,40010acc <___vfprintf_internal_r+0x18d0>
4000f890:	013fdfc4 	movi	r4,-129
4000f894:	9d86b03a 	or	r3,r19,r22
4000f898:	d8802d15 	stw	r2,180(sp)
4000f89c:	9124703a 	and	r18,r18,r4
4000f8a0:	1802d91e 	bne	r3,zero,40010408 <___vfprintf_internal_r+0x120c>
4000f8a4:	d8c02917 	ldw	r3,164(sp)
4000f8a8:	0039883a 	mov	fp,zero
4000f8ac:	1805c326 	beq	r3,zero,40010fbc <___vfprintf_internal_r+0x1dc0>
4000f8b0:	0027883a 	mov	r19,zero
4000f8b4:	002d883a 	mov	r22,zero
4000f8b8:	dc001e04 	addi	r16,sp,120
4000f8bc:	9806d0fa 	srli	r3,r19,3
4000f8c0:	b008977a 	slli	r4,r22,29
4000f8c4:	b02cd0fa 	srli	r22,r22,3
4000f8c8:	9cc001cc 	andi	r19,r19,7
4000f8cc:	98800c04 	addi	r2,r19,48
4000f8d0:	843fffc4 	addi	r16,r16,-1
4000f8d4:	20e6b03a 	or	r19,r4,r3
4000f8d8:	80800005 	stb	r2,0(r16)
4000f8dc:	9d86b03a 	or	r3,r19,r22
4000f8e0:	183ff61e 	bne	r3,zero,4000f8bc <__alt_data_end+0xc000f8bc>
4000f8e4:	90c0004c 	andi	r3,r18,1
4000f8e8:	18013b26 	beq	r3,zero,4000fdd8 <___vfprintf_internal_r+0xbdc>
4000f8ec:	10803fcc 	andi	r2,r2,255
4000f8f0:	1080201c 	xori	r2,r2,128
4000f8f4:	10bfe004 	addi	r2,r2,-128
4000f8f8:	00c00c04 	movi	r3,48
4000f8fc:	10c13626 	beq	r2,r3,4000fdd8 <___vfprintf_internal_r+0xbdc>
4000f900:	80ffffc5 	stb	r3,-1(r16)
4000f904:	d8c02817 	ldw	r3,160(sp)
4000f908:	80bfffc4 	addi	r2,r16,-1
4000f90c:	1021883a 	mov	r16,r2
4000f910:	1887c83a 	sub	r3,r3,r2
4000f914:	d8c02e15 	stw	r3,184(sp)
4000f918:	d8802e17 	ldw	r2,184(sp)
4000f91c:	d9002917 	ldw	r4,164(sp)
4000f920:	1100010e 	bge	r2,r4,4000f928 <___vfprintf_internal_r+0x72c>
4000f924:	2005883a 	mov	r2,r4
4000f928:	d8802a15 	stw	r2,168(sp)
4000f92c:	d8003215 	stw	zero,200(sp)
4000f930:	e7003fcc 	andi	fp,fp,255
4000f934:	e700201c 	xori	fp,fp,128
4000f938:	e73fe004 	addi	fp,fp,-128
4000f93c:	e0000326 	beq	fp,zero,4000f94c <___vfprintf_internal_r+0x750>
4000f940:	d8c02a17 	ldw	r3,168(sp)
4000f944:	18c00044 	addi	r3,r3,1
4000f948:	d8c02a15 	stw	r3,168(sp)
4000f94c:	90c0008c 	andi	r3,r18,2
4000f950:	d8c02b15 	stw	r3,172(sp)
4000f954:	18000326 	beq	r3,zero,4000f964 <___vfprintf_internal_r+0x768>
4000f958:	d8c02a17 	ldw	r3,168(sp)
4000f95c:	18c00084 	addi	r3,r3,2
4000f960:	d8c02a15 	stw	r3,168(sp)
4000f964:	90c0210c 	andi	r3,r18,132
4000f968:	d8c03015 	stw	r3,192(sp)
4000f96c:	1801a31e 	bne	r3,zero,4000fffc <___vfprintf_internal_r+0xe00>
4000f970:	d9003117 	ldw	r4,196(sp)
4000f974:	d8c02a17 	ldw	r3,168(sp)
4000f978:	20e7c83a 	sub	r19,r4,r3
4000f97c:	04c19f0e 	bge	zero,r19,4000fffc <___vfprintf_internal_r+0xe00>
4000f980:	02400404 	movi	r9,16
4000f984:	d8c02017 	ldw	r3,128(sp)
4000f988:	d8801f17 	ldw	r2,124(sp)
4000f98c:	4cc50d0e 	bge	r9,r19,40010dc4 <___vfprintf_internal_r+0x1bc8>
4000f990:	015000b4 	movhi	r5,16386
4000f994:	296a3f84 	addi	r5,r5,-22274
4000f998:	dc403b15 	stw	r17,236(sp)
4000f99c:	d9403515 	stw	r5,212(sp)
4000f9a0:	9823883a 	mov	r17,r19
4000f9a4:	482d883a 	mov	r22,r9
4000f9a8:	9027883a 	mov	r19,r18
4000f9ac:	070001c4 	movi	fp,7
4000f9b0:	8025883a 	mov	r18,r16
4000f9b4:	dc002c17 	ldw	r16,176(sp)
4000f9b8:	00000306 	br	4000f9c8 <___vfprintf_internal_r+0x7cc>
4000f9bc:	8c7ffc04 	addi	r17,r17,-16
4000f9c0:	42000204 	addi	r8,r8,8
4000f9c4:	b440130e 	bge	r22,r17,4000fa14 <___vfprintf_internal_r+0x818>
4000f9c8:	011000b4 	movhi	r4,16386
4000f9cc:	18c00404 	addi	r3,r3,16
4000f9d0:	10800044 	addi	r2,r2,1
4000f9d4:	212a3f84 	addi	r4,r4,-22274
4000f9d8:	41000015 	stw	r4,0(r8)
4000f9dc:	45800115 	stw	r22,4(r8)
4000f9e0:	d8c02015 	stw	r3,128(sp)
4000f9e4:	d8801f15 	stw	r2,124(sp)
4000f9e8:	e0bff40e 	bge	fp,r2,4000f9bc <__alt_data_end+0xc000f9bc>
4000f9ec:	d9801e04 	addi	r6,sp,120
4000f9f0:	b80b883a 	mov	r5,r23
4000f9f4:	8009883a 	mov	r4,r16
4000f9f8:	0015e900 	call	40015e90 <__sprint_r>
4000f9fc:	103f011e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
4000fa00:	8c7ffc04 	addi	r17,r17,-16
4000fa04:	d8c02017 	ldw	r3,128(sp)
4000fa08:	d8801f17 	ldw	r2,124(sp)
4000fa0c:	da000404 	addi	r8,sp,16
4000fa10:	b47fed16 	blt	r22,r17,4000f9c8 <__alt_data_end+0xc000f9c8>
4000fa14:	9021883a 	mov	r16,r18
4000fa18:	9825883a 	mov	r18,r19
4000fa1c:	8827883a 	mov	r19,r17
4000fa20:	dc403b17 	ldw	r17,236(sp)
4000fa24:	d9403517 	ldw	r5,212(sp)
4000fa28:	98c7883a 	add	r3,r19,r3
4000fa2c:	10800044 	addi	r2,r2,1
4000fa30:	41400015 	stw	r5,0(r8)
4000fa34:	44c00115 	stw	r19,4(r8)
4000fa38:	d8c02015 	stw	r3,128(sp)
4000fa3c:	d8801f15 	stw	r2,124(sp)
4000fa40:	010001c4 	movi	r4,7
4000fa44:	2082a316 	blt	r4,r2,400104d4 <___vfprintf_internal_r+0x12d8>
4000fa48:	df002787 	ldb	fp,158(sp)
4000fa4c:	42000204 	addi	r8,r8,8
4000fa50:	e0000c26 	beq	fp,zero,4000fa84 <___vfprintf_internal_r+0x888>
4000fa54:	d8801f17 	ldw	r2,124(sp)
4000fa58:	d9002784 	addi	r4,sp,158
4000fa5c:	18c00044 	addi	r3,r3,1
4000fa60:	10800044 	addi	r2,r2,1
4000fa64:	41000015 	stw	r4,0(r8)
4000fa68:	01000044 	movi	r4,1
4000fa6c:	41000115 	stw	r4,4(r8)
4000fa70:	d8c02015 	stw	r3,128(sp)
4000fa74:	d8801f15 	stw	r2,124(sp)
4000fa78:	010001c4 	movi	r4,7
4000fa7c:	20823c16 	blt	r4,r2,40010370 <___vfprintf_internal_r+0x1174>
4000fa80:	42000204 	addi	r8,r8,8
4000fa84:	d8802b17 	ldw	r2,172(sp)
4000fa88:	10000c26 	beq	r2,zero,4000fabc <___vfprintf_internal_r+0x8c0>
4000fa8c:	d8801f17 	ldw	r2,124(sp)
4000fa90:	d9002704 	addi	r4,sp,156
4000fa94:	18c00084 	addi	r3,r3,2
4000fa98:	10800044 	addi	r2,r2,1
4000fa9c:	41000015 	stw	r4,0(r8)
4000faa0:	01000084 	movi	r4,2
4000faa4:	41000115 	stw	r4,4(r8)
4000faa8:	d8c02015 	stw	r3,128(sp)
4000faac:	d8801f15 	stw	r2,124(sp)
4000fab0:	010001c4 	movi	r4,7
4000fab4:	20823616 	blt	r4,r2,40010390 <___vfprintf_internal_r+0x1194>
4000fab8:	42000204 	addi	r8,r8,8
4000fabc:	d9003017 	ldw	r4,192(sp)
4000fac0:	00802004 	movi	r2,128
4000fac4:	20819926 	beq	r4,r2,4001012c <___vfprintf_internal_r+0xf30>
4000fac8:	d9402917 	ldw	r5,164(sp)
4000facc:	d8802e17 	ldw	r2,184(sp)
4000fad0:	28adc83a 	sub	r22,r5,r2
4000fad4:	0580310e 	bge	zero,r22,4000fb9c <___vfprintf_internal_r+0x9a0>
4000fad8:	07000404 	movi	fp,16
4000fadc:	d8801f17 	ldw	r2,124(sp)
4000fae0:	e584140e 	bge	fp,r22,40010b34 <___vfprintf_internal_r+0x1938>
4000fae4:	015000b4 	movhi	r5,16386
4000fae8:	296a3b84 	addi	r5,r5,-22290
4000faec:	dc402915 	stw	r17,164(sp)
4000faf0:	d9402b15 	stw	r5,172(sp)
4000faf4:	b023883a 	mov	r17,r22
4000faf8:	04c001c4 	movi	r19,7
4000fafc:	a82d883a 	mov	r22,r21
4000fb00:	902b883a 	mov	r21,r18
4000fb04:	8025883a 	mov	r18,r16
4000fb08:	dc002c17 	ldw	r16,176(sp)
4000fb0c:	00000306 	br	4000fb1c <___vfprintf_internal_r+0x920>
4000fb10:	8c7ffc04 	addi	r17,r17,-16
4000fb14:	42000204 	addi	r8,r8,8
4000fb18:	e440110e 	bge	fp,r17,4000fb60 <___vfprintf_internal_r+0x964>
4000fb1c:	18c00404 	addi	r3,r3,16
4000fb20:	10800044 	addi	r2,r2,1
4000fb24:	45000015 	stw	r20,0(r8)
4000fb28:	47000115 	stw	fp,4(r8)
4000fb2c:	d8c02015 	stw	r3,128(sp)
4000fb30:	d8801f15 	stw	r2,124(sp)
4000fb34:	98bff60e 	bge	r19,r2,4000fb10 <__alt_data_end+0xc000fb10>
4000fb38:	d9801e04 	addi	r6,sp,120
4000fb3c:	b80b883a 	mov	r5,r23
4000fb40:	8009883a 	mov	r4,r16
4000fb44:	0015e900 	call	40015e90 <__sprint_r>
4000fb48:	103eae1e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
4000fb4c:	8c7ffc04 	addi	r17,r17,-16
4000fb50:	d8c02017 	ldw	r3,128(sp)
4000fb54:	d8801f17 	ldw	r2,124(sp)
4000fb58:	da000404 	addi	r8,sp,16
4000fb5c:	e47fef16 	blt	fp,r17,4000fb1c <__alt_data_end+0xc000fb1c>
4000fb60:	9021883a 	mov	r16,r18
4000fb64:	a825883a 	mov	r18,r21
4000fb68:	b02b883a 	mov	r21,r22
4000fb6c:	882d883a 	mov	r22,r17
4000fb70:	dc402917 	ldw	r17,164(sp)
4000fb74:	d9002b17 	ldw	r4,172(sp)
4000fb78:	1d87883a 	add	r3,r3,r22
4000fb7c:	10800044 	addi	r2,r2,1
4000fb80:	41000015 	stw	r4,0(r8)
4000fb84:	45800115 	stw	r22,4(r8)
4000fb88:	d8c02015 	stw	r3,128(sp)
4000fb8c:	d8801f15 	stw	r2,124(sp)
4000fb90:	010001c4 	movi	r4,7
4000fb94:	2081ee16 	blt	r4,r2,40010350 <___vfprintf_internal_r+0x1154>
4000fb98:	42000204 	addi	r8,r8,8
4000fb9c:	9080400c 	andi	r2,r18,256
4000fba0:	1001181e 	bne	r2,zero,40010004 <___vfprintf_internal_r+0xe08>
4000fba4:	d9402e17 	ldw	r5,184(sp)
4000fba8:	d8801f17 	ldw	r2,124(sp)
4000fbac:	44000015 	stw	r16,0(r8)
4000fbb0:	1947883a 	add	r3,r3,r5
4000fbb4:	10800044 	addi	r2,r2,1
4000fbb8:	41400115 	stw	r5,4(r8)
4000fbbc:	d8c02015 	stw	r3,128(sp)
4000fbc0:	d8801f15 	stw	r2,124(sp)
4000fbc4:	010001c4 	movi	r4,7
4000fbc8:	2081d316 	blt	r4,r2,40010318 <___vfprintf_internal_r+0x111c>
4000fbcc:	42000204 	addi	r8,r8,8
4000fbd0:	9480010c 	andi	r18,r18,4
4000fbd4:	90003226 	beq	r18,zero,4000fca0 <___vfprintf_internal_r+0xaa4>
4000fbd8:	d9403117 	ldw	r5,196(sp)
4000fbdc:	d8802a17 	ldw	r2,168(sp)
4000fbe0:	28a1c83a 	sub	r16,r5,r2
4000fbe4:	04002e0e 	bge	zero,r16,4000fca0 <___vfprintf_internal_r+0xaa4>
4000fbe8:	04400404 	movi	r17,16
4000fbec:	d8801f17 	ldw	r2,124(sp)
4000fbf0:	8c04a20e 	bge	r17,r16,40010e7c <___vfprintf_internal_r+0x1c80>
4000fbf4:	015000b4 	movhi	r5,16386
4000fbf8:	296a3f84 	addi	r5,r5,-22274
4000fbfc:	d9403515 	stw	r5,212(sp)
4000fc00:	048001c4 	movi	r18,7
4000fc04:	dcc02c17 	ldw	r19,176(sp)
4000fc08:	00000306 	br	4000fc18 <___vfprintf_internal_r+0xa1c>
4000fc0c:	843ffc04 	addi	r16,r16,-16
4000fc10:	42000204 	addi	r8,r8,8
4000fc14:	8c00130e 	bge	r17,r16,4000fc64 <___vfprintf_internal_r+0xa68>
4000fc18:	011000b4 	movhi	r4,16386
4000fc1c:	18c00404 	addi	r3,r3,16
4000fc20:	10800044 	addi	r2,r2,1
4000fc24:	212a3f84 	addi	r4,r4,-22274
4000fc28:	41000015 	stw	r4,0(r8)
4000fc2c:	44400115 	stw	r17,4(r8)
4000fc30:	d8c02015 	stw	r3,128(sp)
4000fc34:	d8801f15 	stw	r2,124(sp)
4000fc38:	90bff40e 	bge	r18,r2,4000fc0c <__alt_data_end+0xc000fc0c>
4000fc3c:	d9801e04 	addi	r6,sp,120
4000fc40:	b80b883a 	mov	r5,r23
4000fc44:	9809883a 	mov	r4,r19
4000fc48:	0015e900 	call	40015e90 <__sprint_r>
4000fc4c:	103e6d1e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
4000fc50:	843ffc04 	addi	r16,r16,-16
4000fc54:	d8c02017 	ldw	r3,128(sp)
4000fc58:	d8801f17 	ldw	r2,124(sp)
4000fc5c:	da000404 	addi	r8,sp,16
4000fc60:	8c3fed16 	blt	r17,r16,4000fc18 <__alt_data_end+0xc000fc18>
4000fc64:	d9403517 	ldw	r5,212(sp)
4000fc68:	1c07883a 	add	r3,r3,r16
4000fc6c:	10800044 	addi	r2,r2,1
4000fc70:	41400015 	stw	r5,0(r8)
4000fc74:	44000115 	stw	r16,4(r8)
4000fc78:	d8c02015 	stw	r3,128(sp)
4000fc7c:	d8801f15 	stw	r2,124(sp)
4000fc80:	010001c4 	movi	r4,7
4000fc84:	2080060e 	bge	r4,r2,4000fca0 <___vfprintf_internal_r+0xaa4>
4000fc88:	d9002c17 	ldw	r4,176(sp)
4000fc8c:	d9801e04 	addi	r6,sp,120
4000fc90:	b80b883a 	mov	r5,r23
4000fc94:	0015e900 	call	40015e90 <__sprint_r>
4000fc98:	103e5a1e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
4000fc9c:	d8c02017 	ldw	r3,128(sp)
4000fca0:	d8803117 	ldw	r2,196(sp)
4000fca4:	d9002a17 	ldw	r4,168(sp)
4000fca8:	1100010e 	bge	r2,r4,4000fcb0 <___vfprintf_internal_r+0xab4>
4000fcac:	2005883a 	mov	r2,r4
4000fcb0:	d9402f17 	ldw	r5,188(sp)
4000fcb4:	288b883a 	add	r5,r5,r2
4000fcb8:	d9402f15 	stw	r5,188(sp)
4000fcbc:	18019e1e 	bne	r3,zero,40010338 <___vfprintf_internal_r+0x113c>
4000fcc0:	a8800007 	ldb	r2,0(r21)
4000fcc4:	d8001f15 	stw	zero,124(sp)
4000fcc8:	da000404 	addi	r8,sp,16
4000fccc:	103d851e 	bne	r2,zero,4000f2e4 <__alt_data_end+0xc000f2e4>
4000fcd0:	a821883a 	mov	r16,r21
4000fcd4:	003d9b06 	br	4000f344 <__alt_data_end+0xc000f344>
4000fcd8:	18c03fcc 	andi	r3,r3,255
4000fcdc:	1805c11e 	bne	r3,zero,400113e4 <___vfprintf_internal_r+0x21e8>
4000fce0:	94800414 	ori	r18,r18,16
4000fce4:	9080080c 	andi	r2,r18,32
4000fce8:	10020c26 	beq	r2,zero,4001051c <___vfprintf_internal_r+0x1320>
4000fcec:	d8802d17 	ldw	r2,180(sp)
4000fcf0:	d9002917 	ldw	r4,164(sp)
4000fcf4:	d8002785 	stb	zero,158(sp)
4000fcf8:	10c00204 	addi	r3,r2,8
4000fcfc:	14c00017 	ldw	r19,0(r2)
4000fd00:	15800117 	ldw	r22,4(r2)
4000fd04:	20040f16 	blt	r4,zero,40010d44 <___vfprintf_internal_r+0x1b48>
4000fd08:	013fdfc4 	movi	r4,-129
4000fd0c:	9d84b03a 	or	r2,r19,r22
4000fd10:	d8c02d15 	stw	r3,180(sp)
4000fd14:	9124703a 	and	r18,r18,r4
4000fd18:	0039883a 	mov	fp,zero
4000fd1c:	103e891e 	bne	r2,zero,4000f744 <__alt_data_end+0xc000f744>
4000fd20:	d9002917 	ldw	r4,164(sp)
4000fd24:	2002c11e 	bne	r4,zero,4001082c <___vfprintf_internal_r+0x1630>
4000fd28:	d8002915 	stw	zero,164(sp)
4000fd2c:	d8002e15 	stw	zero,184(sp)
4000fd30:	dc001e04 	addi	r16,sp,120
4000fd34:	003ef806 	br	4000f918 <__alt_data_end+0xc000f918>
4000fd38:	18c03fcc 	andi	r3,r3,255
4000fd3c:	18059d1e 	bne	r3,zero,400113b4 <___vfprintf_internal_r+0x21b8>
4000fd40:	015000b4 	movhi	r5,16386
4000fd44:	296a2f04 	addi	r5,r5,-22340
4000fd48:	d9403915 	stw	r5,228(sp)
4000fd4c:	9080080c 	andi	r2,r18,32
4000fd50:	10005226 	beq	r2,zero,4000fe9c <___vfprintf_internal_r+0xca0>
4000fd54:	d8802d17 	ldw	r2,180(sp)
4000fd58:	14c00017 	ldw	r19,0(r2)
4000fd5c:	15800117 	ldw	r22,4(r2)
4000fd60:	10800204 	addi	r2,r2,8
4000fd64:	d8802d15 	stw	r2,180(sp)
4000fd68:	9080004c 	andi	r2,r18,1
4000fd6c:	10019026 	beq	r2,zero,400103b0 <___vfprintf_internal_r+0x11b4>
4000fd70:	9d84b03a 	or	r2,r19,r22
4000fd74:	10036926 	beq	r2,zero,40010b1c <___vfprintf_internal_r+0x1920>
4000fd78:	d8c02917 	ldw	r3,164(sp)
4000fd7c:	00800c04 	movi	r2,48
4000fd80:	d8802705 	stb	r2,156(sp)
4000fd84:	dc402745 	stb	r17,157(sp)
4000fd88:	d8002785 	stb	zero,158(sp)
4000fd8c:	90800094 	ori	r2,r18,2
4000fd90:	18045d16 	blt	r3,zero,40010f08 <___vfprintf_internal_r+0x1d0c>
4000fd94:	00bfdfc4 	movi	r2,-129
4000fd98:	90a4703a 	and	r18,r18,r2
4000fd9c:	94800094 	ori	r18,r18,2
4000fda0:	0039883a 	mov	fp,zero
4000fda4:	d9003917 	ldw	r4,228(sp)
4000fda8:	dc001e04 	addi	r16,sp,120
4000fdac:	988003cc 	andi	r2,r19,15
4000fdb0:	b006973a 	slli	r3,r22,28
4000fdb4:	2085883a 	add	r2,r4,r2
4000fdb8:	9826d13a 	srli	r19,r19,4
4000fdbc:	10800003 	ldbu	r2,0(r2)
4000fdc0:	b02cd13a 	srli	r22,r22,4
4000fdc4:	843fffc4 	addi	r16,r16,-1
4000fdc8:	1ce6b03a 	or	r19,r3,r19
4000fdcc:	80800005 	stb	r2,0(r16)
4000fdd0:	9d84b03a 	or	r2,r19,r22
4000fdd4:	103ff51e 	bne	r2,zero,4000fdac <__alt_data_end+0xc000fdac>
4000fdd8:	d8c02817 	ldw	r3,160(sp)
4000fddc:	1c07c83a 	sub	r3,r3,r16
4000fde0:	d8c02e15 	stw	r3,184(sp)
4000fde4:	003ecc06 	br	4000f918 <__alt_data_end+0xc000f918>
4000fde8:	18c03fcc 	andi	r3,r3,255
4000fdec:	183e9f26 	beq	r3,zero,4000f86c <__alt_data_end+0xc000f86c>
4000fdf0:	d9c02785 	stb	r7,158(sp)
4000fdf4:	003e9d06 	br	4000f86c <__alt_data_end+0xc000f86c>
4000fdf8:	00c00044 	movi	r3,1
4000fdfc:	01c00ac4 	movi	r7,43
4000fe00:	ac400007 	ldb	r17,0(r21)
4000fe04:	003d5e06 	br	4000f380 <__alt_data_end+0xc000f380>
4000fe08:	94800814 	ori	r18,r18,32
4000fe0c:	ac400007 	ldb	r17,0(r21)
4000fe10:	003d5b06 	br	4000f380 <__alt_data_end+0xc000f380>
4000fe14:	d8c02d17 	ldw	r3,180(sp)
4000fe18:	d8002785 	stb	zero,158(sp)
4000fe1c:	1c000017 	ldw	r16,0(r3)
4000fe20:	1cc00104 	addi	r19,r3,4
4000fe24:	80041926 	beq	r16,zero,40010e8c <___vfprintf_internal_r+0x1c90>
4000fe28:	d9002917 	ldw	r4,164(sp)
4000fe2c:	2003d016 	blt	r4,zero,40010d70 <___vfprintf_internal_r+0x1b74>
4000fe30:	200d883a 	mov	r6,r4
4000fe34:	000b883a 	mov	r5,zero
4000fe38:	8009883a 	mov	r4,r16
4000fe3c:	da003d15 	stw	r8,244(sp)
4000fe40:	00142000 	call	40014200 <memchr>
4000fe44:	da003d17 	ldw	r8,244(sp)
4000fe48:	10045426 	beq	r2,zero,40010f9c <___vfprintf_internal_r+0x1da0>
4000fe4c:	1405c83a 	sub	r2,r2,r16
4000fe50:	d8802e15 	stw	r2,184(sp)
4000fe54:	1003cc16 	blt	r2,zero,40010d88 <___vfprintf_internal_r+0x1b8c>
4000fe58:	df002783 	ldbu	fp,158(sp)
4000fe5c:	d8802a15 	stw	r2,168(sp)
4000fe60:	dcc02d15 	stw	r19,180(sp)
4000fe64:	d8002915 	stw	zero,164(sp)
4000fe68:	d8003215 	stw	zero,200(sp)
4000fe6c:	003eb006 	br	4000f930 <__alt_data_end+0xc000f930>
4000fe70:	18c03fcc 	andi	r3,r3,255
4000fe74:	183f9b26 	beq	r3,zero,4000fce4 <__alt_data_end+0xc000fce4>
4000fe78:	d9c02785 	stb	r7,158(sp)
4000fe7c:	003f9906 	br	4000fce4 <__alt_data_end+0xc000fce4>
4000fe80:	18c03fcc 	andi	r3,r3,255
4000fe84:	1805551e 	bne	r3,zero,400113dc <___vfprintf_internal_r+0x21e0>
4000fe88:	015000b4 	movhi	r5,16386
4000fe8c:	296a3404 	addi	r5,r5,-22320
4000fe90:	d9403915 	stw	r5,228(sp)
4000fe94:	9080080c 	andi	r2,r18,32
4000fe98:	103fae1e 	bne	r2,zero,4000fd54 <__alt_data_end+0xc000fd54>
4000fe9c:	9080040c 	andi	r2,r18,16
4000fea0:	1002de26 	beq	r2,zero,40010a1c <___vfprintf_internal_r+0x1820>
4000fea4:	d8c02d17 	ldw	r3,180(sp)
4000fea8:	002d883a 	mov	r22,zero
4000feac:	1cc00017 	ldw	r19,0(r3)
4000feb0:	18c00104 	addi	r3,r3,4
4000feb4:	d8c02d15 	stw	r3,180(sp)
4000feb8:	003fab06 	br	4000fd68 <__alt_data_end+0xc000fd68>
4000febc:	38803fcc 	andi	r2,r7,255
4000fec0:	1080201c 	xori	r2,r2,128
4000fec4:	10bfe004 	addi	r2,r2,-128
4000fec8:	1002d21e 	bne	r2,zero,40010a14 <___vfprintf_internal_r+0x1818>
4000fecc:	00c00044 	movi	r3,1
4000fed0:	01c00804 	movi	r7,32
4000fed4:	ac400007 	ldb	r17,0(r21)
4000fed8:	003d2906 	br	4000f380 <__alt_data_end+0xc000f380>
4000fedc:	94800054 	ori	r18,r18,1
4000fee0:	ac400007 	ldb	r17,0(r21)
4000fee4:	003d2606 	br	4000f380 <__alt_data_end+0xc000f380>
4000fee8:	18c03fcc 	andi	r3,r3,255
4000feec:	183e0526 	beq	r3,zero,4000f704 <__alt_data_end+0xc000f704>
4000fef0:	d9c02785 	stb	r7,158(sp)
4000fef4:	003e0306 	br	4000f704 <__alt_data_end+0xc000f704>
4000fef8:	94801014 	ori	r18,r18,64
4000fefc:	ac400007 	ldb	r17,0(r21)
4000ff00:	003d1f06 	br	4000f380 <__alt_data_end+0xc000f380>
4000ff04:	ac400007 	ldb	r17,0(r21)
4000ff08:	8a438726 	beq	r17,r9,40010d28 <___vfprintf_internal_r+0x1b2c>
4000ff0c:	94800414 	ori	r18,r18,16
4000ff10:	003d1b06 	br	4000f380 <__alt_data_end+0xc000f380>
4000ff14:	18c03fcc 	andi	r3,r3,255
4000ff18:	1805341e 	bne	r3,zero,400113ec <___vfprintf_internal_r+0x21f0>
4000ff1c:	9080080c 	andi	r2,r18,32
4000ff20:	1002cd26 	beq	r2,zero,40010a58 <___vfprintf_internal_r+0x185c>
4000ff24:	d9402d17 	ldw	r5,180(sp)
4000ff28:	d9002f17 	ldw	r4,188(sp)
4000ff2c:	28800017 	ldw	r2,0(r5)
4000ff30:	2007d7fa 	srai	r3,r4,31
4000ff34:	29400104 	addi	r5,r5,4
4000ff38:	d9402d15 	stw	r5,180(sp)
4000ff3c:	11000015 	stw	r4,0(r2)
4000ff40:	10c00115 	stw	r3,4(r2)
4000ff44:	003ce506 	br	4000f2dc <__alt_data_end+0xc000f2dc>
4000ff48:	d8c02d17 	ldw	r3,180(sp)
4000ff4c:	d9002d17 	ldw	r4,180(sp)
4000ff50:	d8002785 	stb	zero,158(sp)
4000ff54:	18800017 	ldw	r2,0(r3)
4000ff58:	21000104 	addi	r4,r4,4
4000ff5c:	00c00044 	movi	r3,1
4000ff60:	d8c02a15 	stw	r3,168(sp)
4000ff64:	d8801405 	stb	r2,80(sp)
4000ff68:	d9002d15 	stw	r4,180(sp)
4000ff6c:	d8c02e15 	stw	r3,184(sp)
4000ff70:	d8002915 	stw	zero,164(sp)
4000ff74:	d8003215 	stw	zero,200(sp)
4000ff78:	dc001404 	addi	r16,sp,80
4000ff7c:	0039883a 	mov	fp,zero
4000ff80:	003e7206 	br	4000f94c <__alt_data_end+0xc000f94c>
4000ff84:	011000b4 	movhi	r4,16386
4000ff88:	212a3404 	addi	r4,r4,-22320
4000ff8c:	0039883a 	mov	fp,zero
4000ff90:	d9003915 	stw	r4,228(sp)
4000ff94:	04401e04 	movi	r17,120
4000ff98:	003f8206 	br	4000fda4 <__alt_data_end+0xc000fda4>
4000ff9c:	18c03fcc 	andi	r3,r3,255
4000ffa0:	1805061e 	bne	r3,zero,400113bc <___vfprintf_internal_r+0x21c0>
4000ffa4:	883d9126 	beq	r17,zero,4000f5ec <__alt_data_end+0xc000f5ec>
4000ffa8:	00c00044 	movi	r3,1
4000ffac:	d8c02a15 	stw	r3,168(sp)
4000ffb0:	dc401405 	stb	r17,80(sp)
4000ffb4:	d8002785 	stb	zero,158(sp)
4000ffb8:	003fec06 	br	4000ff6c <__alt_data_end+0xc000ff6c>
4000ffbc:	015000b4 	movhi	r5,16386
4000ffc0:	296a3404 	addi	r5,r5,-22320
4000ffc4:	d9403915 	stw	r5,228(sp)
4000ffc8:	d8c02d15 	stw	r3,180(sp)
4000ffcc:	1025883a 	mov	r18,r2
4000ffd0:	04401e04 	movi	r17,120
4000ffd4:	9d84b03a 	or	r2,r19,r22
4000ffd8:	1000fc1e 	bne	r2,zero,400103cc <___vfprintf_internal_r+0x11d0>
4000ffdc:	0039883a 	mov	fp,zero
4000ffe0:	00800084 	movi	r2,2
4000ffe4:	10803fcc 	andi	r2,r2,255
4000ffe8:	00c00044 	movi	r3,1
4000ffec:	10c20f26 	beq	r2,r3,4001082c <___vfprintf_internal_r+0x1630>
4000fff0:	00c00084 	movi	r3,2
4000fff4:	10fd6326 	beq	r2,r3,4000f584 <__alt_data_end+0xc000f584>
4000fff8:	003e2d06 	br	4000f8b0 <__alt_data_end+0xc000f8b0>
4000fffc:	d8c02017 	ldw	r3,128(sp)
40010000:	003e9306 	br	4000fa50 <__alt_data_end+0xc000fa50>
40010004:	00801944 	movi	r2,101
40010008:	14407e0e 	bge	r2,r17,40010204 <___vfprintf_internal_r+0x1008>
4001000c:	d9003617 	ldw	r4,216(sp)
40010010:	d9403817 	ldw	r5,224(sp)
40010014:	000d883a 	mov	r6,zero
40010018:	000f883a 	mov	r7,zero
4001001c:	d8c03c15 	stw	r3,240(sp)
40010020:	da003d15 	stw	r8,244(sp)
40010024:	00186fc0 	call	400186fc <__eqdf2>
40010028:	d8c03c17 	ldw	r3,240(sp)
4001002c:	da003d17 	ldw	r8,244(sp)
40010030:	1000f71e 	bne	r2,zero,40010410 <___vfprintf_internal_r+0x1214>
40010034:	d8801f17 	ldw	r2,124(sp)
40010038:	011000b4 	movhi	r4,16386
4001003c:	212a3b04 	addi	r4,r4,-22292
40010040:	18c00044 	addi	r3,r3,1
40010044:	10800044 	addi	r2,r2,1
40010048:	41000015 	stw	r4,0(r8)
4001004c:	01000044 	movi	r4,1
40010050:	41000115 	stw	r4,4(r8)
40010054:	d8c02015 	stw	r3,128(sp)
40010058:	d8801f15 	stw	r2,124(sp)
4001005c:	010001c4 	movi	r4,7
40010060:	2082b816 	blt	r4,r2,40010b44 <___vfprintf_internal_r+0x1948>
40010064:	42000204 	addi	r8,r8,8
40010068:	d8802617 	ldw	r2,152(sp)
4001006c:	d9403317 	ldw	r5,204(sp)
40010070:	11400216 	blt	r2,r5,4001007c <___vfprintf_internal_r+0xe80>
40010074:	9080004c 	andi	r2,r18,1
40010078:	103ed526 	beq	r2,zero,4000fbd0 <__alt_data_end+0xc000fbd0>
4001007c:	d8803717 	ldw	r2,220(sp)
40010080:	d9003417 	ldw	r4,208(sp)
40010084:	d9403717 	ldw	r5,220(sp)
40010088:	1887883a 	add	r3,r3,r2
4001008c:	d8801f17 	ldw	r2,124(sp)
40010090:	41000015 	stw	r4,0(r8)
40010094:	41400115 	stw	r5,4(r8)
40010098:	10800044 	addi	r2,r2,1
4001009c:	d8c02015 	stw	r3,128(sp)
400100a0:	d8801f15 	stw	r2,124(sp)
400100a4:	010001c4 	movi	r4,7
400100a8:	20832916 	blt	r4,r2,40010d50 <___vfprintf_internal_r+0x1b54>
400100ac:	42000204 	addi	r8,r8,8
400100b0:	d8803317 	ldw	r2,204(sp)
400100b4:	143fffc4 	addi	r16,r2,-1
400100b8:	043ec50e 	bge	zero,r16,4000fbd0 <__alt_data_end+0xc000fbd0>
400100bc:	04400404 	movi	r17,16
400100c0:	d8801f17 	ldw	r2,124(sp)
400100c4:	8c00880e 	bge	r17,r16,400102e8 <___vfprintf_internal_r+0x10ec>
400100c8:	015000b4 	movhi	r5,16386
400100cc:	296a3b84 	addi	r5,r5,-22290
400100d0:	d9402b15 	stw	r5,172(sp)
400100d4:	058001c4 	movi	r22,7
400100d8:	dcc02c17 	ldw	r19,176(sp)
400100dc:	00000306 	br	400100ec <___vfprintf_internal_r+0xef0>
400100e0:	42000204 	addi	r8,r8,8
400100e4:	843ffc04 	addi	r16,r16,-16
400100e8:	8c00820e 	bge	r17,r16,400102f4 <___vfprintf_internal_r+0x10f8>
400100ec:	18c00404 	addi	r3,r3,16
400100f0:	10800044 	addi	r2,r2,1
400100f4:	45000015 	stw	r20,0(r8)
400100f8:	44400115 	stw	r17,4(r8)
400100fc:	d8c02015 	stw	r3,128(sp)
40010100:	d8801f15 	stw	r2,124(sp)
40010104:	b0bff60e 	bge	r22,r2,400100e0 <__alt_data_end+0xc00100e0>
40010108:	d9801e04 	addi	r6,sp,120
4001010c:	b80b883a 	mov	r5,r23
40010110:	9809883a 	mov	r4,r19
40010114:	0015e900 	call	40015e90 <__sprint_r>
40010118:	103d3a1e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
4001011c:	d8c02017 	ldw	r3,128(sp)
40010120:	d8801f17 	ldw	r2,124(sp)
40010124:	da000404 	addi	r8,sp,16
40010128:	003fee06 	br	400100e4 <__alt_data_end+0xc00100e4>
4001012c:	d9403117 	ldw	r5,196(sp)
40010130:	d8802a17 	ldw	r2,168(sp)
40010134:	28adc83a 	sub	r22,r5,r2
40010138:	05be630e 	bge	zero,r22,4000fac8 <__alt_data_end+0xc000fac8>
4001013c:	07000404 	movi	fp,16
40010140:	d8801f17 	ldw	r2,124(sp)
40010144:	e5838f0e 	bge	fp,r22,40010f84 <___vfprintf_internal_r+0x1d88>
40010148:	015000b4 	movhi	r5,16386
4001014c:	296a3b84 	addi	r5,r5,-22290
40010150:	dc403015 	stw	r17,192(sp)
40010154:	d9402b15 	stw	r5,172(sp)
40010158:	b023883a 	mov	r17,r22
4001015c:	04c001c4 	movi	r19,7
40010160:	a82d883a 	mov	r22,r21
40010164:	902b883a 	mov	r21,r18
40010168:	8025883a 	mov	r18,r16
4001016c:	dc002c17 	ldw	r16,176(sp)
40010170:	00000306 	br	40010180 <___vfprintf_internal_r+0xf84>
40010174:	8c7ffc04 	addi	r17,r17,-16
40010178:	42000204 	addi	r8,r8,8
4001017c:	e440110e 	bge	fp,r17,400101c4 <___vfprintf_internal_r+0xfc8>
40010180:	18c00404 	addi	r3,r3,16
40010184:	10800044 	addi	r2,r2,1
40010188:	45000015 	stw	r20,0(r8)
4001018c:	47000115 	stw	fp,4(r8)
40010190:	d8c02015 	stw	r3,128(sp)
40010194:	d8801f15 	stw	r2,124(sp)
40010198:	98bff60e 	bge	r19,r2,40010174 <__alt_data_end+0xc0010174>
4001019c:	d9801e04 	addi	r6,sp,120
400101a0:	b80b883a 	mov	r5,r23
400101a4:	8009883a 	mov	r4,r16
400101a8:	0015e900 	call	40015e90 <__sprint_r>
400101ac:	103d151e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
400101b0:	8c7ffc04 	addi	r17,r17,-16
400101b4:	d8c02017 	ldw	r3,128(sp)
400101b8:	d8801f17 	ldw	r2,124(sp)
400101bc:	da000404 	addi	r8,sp,16
400101c0:	e47fef16 	blt	fp,r17,40010180 <__alt_data_end+0xc0010180>
400101c4:	9021883a 	mov	r16,r18
400101c8:	a825883a 	mov	r18,r21
400101cc:	b02b883a 	mov	r21,r22
400101d0:	882d883a 	mov	r22,r17
400101d4:	dc403017 	ldw	r17,192(sp)
400101d8:	d9002b17 	ldw	r4,172(sp)
400101dc:	1d87883a 	add	r3,r3,r22
400101e0:	10800044 	addi	r2,r2,1
400101e4:	41000015 	stw	r4,0(r8)
400101e8:	45800115 	stw	r22,4(r8)
400101ec:	d8c02015 	stw	r3,128(sp)
400101f0:	d8801f15 	stw	r2,124(sp)
400101f4:	010001c4 	movi	r4,7
400101f8:	20818e16 	blt	r4,r2,40010834 <___vfprintf_internal_r+0x1638>
400101fc:	42000204 	addi	r8,r8,8
40010200:	003e3106 	br	4000fac8 <__alt_data_end+0xc000fac8>
40010204:	d9403317 	ldw	r5,204(sp)
40010208:	00800044 	movi	r2,1
4001020c:	18c00044 	addi	r3,r3,1
40010210:	1141530e 	bge	r2,r5,40010760 <___vfprintf_internal_r+0x1564>
40010214:	dc401f17 	ldw	r17,124(sp)
40010218:	00800044 	movi	r2,1
4001021c:	40800115 	stw	r2,4(r8)
40010220:	8c400044 	addi	r17,r17,1
40010224:	44000015 	stw	r16,0(r8)
40010228:	d8c02015 	stw	r3,128(sp)
4001022c:	dc401f15 	stw	r17,124(sp)
40010230:	008001c4 	movi	r2,7
40010234:	14416b16 	blt	r2,r17,400107e4 <___vfprintf_internal_r+0x15e8>
40010238:	42000204 	addi	r8,r8,8
4001023c:	d8803717 	ldw	r2,220(sp)
40010240:	d9003417 	ldw	r4,208(sp)
40010244:	8c400044 	addi	r17,r17,1
40010248:	10c7883a 	add	r3,r2,r3
4001024c:	40800115 	stw	r2,4(r8)
40010250:	41000015 	stw	r4,0(r8)
40010254:	d8c02015 	stw	r3,128(sp)
40010258:	dc401f15 	stw	r17,124(sp)
4001025c:	008001c4 	movi	r2,7
40010260:	14416916 	blt	r2,r17,40010808 <___vfprintf_internal_r+0x160c>
40010264:	45800204 	addi	r22,r8,8
40010268:	d9003617 	ldw	r4,216(sp)
4001026c:	d9403817 	ldw	r5,224(sp)
40010270:	000d883a 	mov	r6,zero
40010274:	000f883a 	mov	r7,zero
40010278:	d8c03c15 	stw	r3,240(sp)
4001027c:	00186fc0 	call	400186fc <__eqdf2>
40010280:	d8c03c17 	ldw	r3,240(sp)
40010284:	1000bc26 	beq	r2,zero,40010578 <___vfprintf_internal_r+0x137c>
40010288:	d9403317 	ldw	r5,204(sp)
4001028c:	84000044 	addi	r16,r16,1
40010290:	8c400044 	addi	r17,r17,1
40010294:	28bfffc4 	addi	r2,r5,-1
40010298:	1887883a 	add	r3,r3,r2
4001029c:	b0800115 	stw	r2,4(r22)
400102a0:	b4000015 	stw	r16,0(r22)
400102a4:	d8c02015 	stw	r3,128(sp)
400102a8:	dc401f15 	stw	r17,124(sp)
400102ac:	008001c4 	movi	r2,7
400102b0:	14414316 	blt	r2,r17,400107c0 <___vfprintf_internal_r+0x15c4>
400102b4:	b5800204 	addi	r22,r22,8
400102b8:	d9003a17 	ldw	r4,232(sp)
400102bc:	df0022c4 	addi	fp,sp,139
400102c0:	8c400044 	addi	r17,r17,1
400102c4:	20c7883a 	add	r3,r4,r3
400102c8:	b7000015 	stw	fp,0(r22)
400102cc:	b1000115 	stw	r4,4(r22)
400102d0:	d8c02015 	stw	r3,128(sp)
400102d4:	dc401f15 	stw	r17,124(sp)
400102d8:	008001c4 	movi	r2,7
400102dc:	14400e16 	blt	r2,r17,40010318 <___vfprintf_internal_r+0x111c>
400102e0:	b2000204 	addi	r8,r22,8
400102e4:	003e3a06 	br	4000fbd0 <__alt_data_end+0xc000fbd0>
400102e8:	011000b4 	movhi	r4,16386
400102ec:	212a3b84 	addi	r4,r4,-22290
400102f0:	d9002b15 	stw	r4,172(sp)
400102f4:	d9002b17 	ldw	r4,172(sp)
400102f8:	1c07883a 	add	r3,r3,r16
400102fc:	44000115 	stw	r16,4(r8)
40010300:	41000015 	stw	r4,0(r8)
40010304:	10800044 	addi	r2,r2,1
40010308:	d8c02015 	stw	r3,128(sp)
4001030c:	d8801f15 	stw	r2,124(sp)
40010310:	010001c4 	movi	r4,7
40010314:	20be2d0e 	bge	r4,r2,4000fbcc <__alt_data_end+0xc000fbcc>
40010318:	d9002c17 	ldw	r4,176(sp)
4001031c:	d9801e04 	addi	r6,sp,120
40010320:	b80b883a 	mov	r5,r23
40010324:	0015e900 	call	40015e90 <__sprint_r>
40010328:	103cb61e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
4001032c:	d8c02017 	ldw	r3,128(sp)
40010330:	da000404 	addi	r8,sp,16
40010334:	003e2606 	br	4000fbd0 <__alt_data_end+0xc000fbd0>
40010338:	d9002c17 	ldw	r4,176(sp)
4001033c:	d9801e04 	addi	r6,sp,120
40010340:	b80b883a 	mov	r5,r23
40010344:	0015e900 	call	40015e90 <__sprint_r>
40010348:	103e5d26 	beq	r2,zero,4000fcc0 <__alt_data_end+0xc000fcc0>
4001034c:	003cad06 	br	4000f604 <__alt_data_end+0xc000f604>
40010350:	d9002c17 	ldw	r4,176(sp)
40010354:	d9801e04 	addi	r6,sp,120
40010358:	b80b883a 	mov	r5,r23
4001035c:	0015e900 	call	40015e90 <__sprint_r>
40010360:	103ca81e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
40010364:	d8c02017 	ldw	r3,128(sp)
40010368:	da000404 	addi	r8,sp,16
4001036c:	003e0b06 	br	4000fb9c <__alt_data_end+0xc000fb9c>
40010370:	d9002c17 	ldw	r4,176(sp)
40010374:	d9801e04 	addi	r6,sp,120
40010378:	b80b883a 	mov	r5,r23
4001037c:	0015e900 	call	40015e90 <__sprint_r>
40010380:	103ca01e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
40010384:	d8c02017 	ldw	r3,128(sp)
40010388:	da000404 	addi	r8,sp,16
4001038c:	003dbd06 	br	4000fa84 <__alt_data_end+0xc000fa84>
40010390:	d9002c17 	ldw	r4,176(sp)
40010394:	d9801e04 	addi	r6,sp,120
40010398:	b80b883a 	mov	r5,r23
4001039c:	0015e900 	call	40015e90 <__sprint_r>
400103a0:	103c981e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
400103a4:	d8c02017 	ldw	r3,128(sp)
400103a8:	da000404 	addi	r8,sp,16
400103ac:	003dc306 	br	4000fabc <__alt_data_end+0xc000fabc>
400103b0:	d8802917 	ldw	r2,164(sp)
400103b4:	d8002785 	stb	zero,158(sp)
400103b8:	103f0616 	blt	r2,zero,4000ffd4 <__alt_data_end+0xc000ffd4>
400103bc:	00ffdfc4 	movi	r3,-129
400103c0:	9d84b03a 	or	r2,r19,r22
400103c4:	90e4703a 	and	r18,r18,r3
400103c8:	103c6b26 	beq	r2,zero,4000f578 <__alt_data_end+0xc000f578>
400103cc:	0039883a 	mov	fp,zero
400103d0:	003e7406 	br	4000fda4 <__alt_data_end+0xc000fda4>
400103d4:	9080040c 	andi	r2,r18,16
400103d8:	1001b326 	beq	r2,zero,40010aa8 <___vfprintf_internal_r+0x18ac>
400103dc:	d9002d17 	ldw	r4,180(sp)
400103e0:	d9402917 	ldw	r5,164(sp)
400103e4:	d8002785 	stb	zero,158(sp)
400103e8:	20800104 	addi	r2,r4,4
400103ec:	24c00017 	ldw	r19,0(r4)
400103f0:	002d883a 	mov	r22,zero
400103f4:	2801b516 	blt	r5,zero,40010acc <___vfprintf_internal_r+0x18d0>
400103f8:	00ffdfc4 	movi	r3,-129
400103fc:	d8802d15 	stw	r2,180(sp)
40010400:	90e4703a 	and	r18,r18,r3
40010404:	983d2726 	beq	r19,zero,4000f8a4 <__alt_data_end+0xc000f8a4>
40010408:	0039883a 	mov	fp,zero
4001040c:	003d2a06 	br	4000f8b8 <__alt_data_end+0xc000f8b8>
40010410:	dc402617 	ldw	r17,152(sp)
40010414:	0441d30e 	bge	zero,r17,40010b64 <___vfprintf_internal_r+0x1968>
40010418:	dc403217 	ldw	r17,200(sp)
4001041c:	d8803317 	ldw	r2,204(sp)
40010420:	1440010e 	bge	r2,r17,40010428 <___vfprintf_internal_r+0x122c>
40010424:	1023883a 	mov	r17,r2
40010428:	04400a0e 	bge	zero,r17,40010454 <___vfprintf_internal_r+0x1258>
4001042c:	d8801f17 	ldw	r2,124(sp)
40010430:	1c47883a 	add	r3,r3,r17
40010434:	44000015 	stw	r16,0(r8)
40010438:	10800044 	addi	r2,r2,1
4001043c:	44400115 	stw	r17,4(r8)
40010440:	d8c02015 	stw	r3,128(sp)
40010444:	d8801f15 	stw	r2,124(sp)
40010448:	010001c4 	movi	r4,7
4001044c:	20826516 	blt	r4,r2,40010de4 <___vfprintf_internal_r+0x1be8>
40010450:	42000204 	addi	r8,r8,8
40010454:	88026116 	blt	r17,zero,40010ddc <___vfprintf_internal_r+0x1be0>
40010458:	d9003217 	ldw	r4,200(sp)
4001045c:	2463c83a 	sub	r17,r4,r17
40010460:	04407b0e 	bge	zero,r17,40010650 <___vfprintf_internal_r+0x1454>
40010464:	05800404 	movi	r22,16
40010468:	d8801f17 	ldw	r2,124(sp)
4001046c:	b4419d0e 	bge	r22,r17,40010ae4 <___vfprintf_internal_r+0x18e8>
40010470:	011000b4 	movhi	r4,16386
40010474:	212a3b84 	addi	r4,r4,-22290
40010478:	d9002b15 	stw	r4,172(sp)
4001047c:	070001c4 	movi	fp,7
40010480:	dcc02c17 	ldw	r19,176(sp)
40010484:	00000306 	br	40010494 <___vfprintf_internal_r+0x1298>
40010488:	42000204 	addi	r8,r8,8
4001048c:	8c7ffc04 	addi	r17,r17,-16
40010490:	b441970e 	bge	r22,r17,40010af0 <___vfprintf_internal_r+0x18f4>
40010494:	18c00404 	addi	r3,r3,16
40010498:	10800044 	addi	r2,r2,1
4001049c:	45000015 	stw	r20,0(r8)
400104a0:	45800115 	stw	r22,4(r8)
400104a4:	d8c02015 	stw	r3,128(sp)
400104a8:	d8801f15 	stw	r2,124(sp)
400104ac:	e0bff60e 	bge	fp,r2,40010488 <__alt_data_end+0xc0010488>
400104b0:	d9801e04 	addi	r6,sp,120
400104b4:	b80b883a 	mov	r5,r23
400104b8:	9809883a 	mov	r4,r19
400104bc:	0015e900 	call	40015e90 <__sprint_r>
400104c0:	103c501e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
400104c4:	d8c02017 	ldw	r3,128(sp)
400104c8:	d8801f17 	ldw	r2,124(sp)
400104cc:	da000404 	addi	r8,sp,16
400104d0:	003fee06 	br	4001048c <__alt_data_end+0xc001048c>
400104d4:	d9002c17 	ldw	r4,176(sp)
400104d8:	d9801e04 	addi	r6,sp,120
400104dc:	b80b883a 	mov	r5,r23
400104e0:	0015e900 	call	40015e90 <__sprint_r>
400104e4:	103c471e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
400104e8:	d8c02017 	ldw	r3,128(sp)
400104ec:	df002787 	ldb	fp,158(sp)
400104f0:	da000404 	addi	r8,sp,16
400104f4:	003d5606 	br	4000fa50 <__alt_data_end+0xc000fa50>
400104f8:	9080040c 	andi	r2,r18,16
400104fc:	10016126 	beq	r2,zero,40010a84 <___vfprintf_internal_r+0x1888>
40010500:	d8802d17 	ldw	r2,180(sp)
40010504:	14c00017 	ldw	r19,0(r2)
40010508:	10800104 	addi	r2,r2,4
4001050c:	d8802d15 	stw	r2,180(sp)
40010510:	982dd7fa 	srai	r22,r19,31
40010514:	b005883a 	mov	r2,r22
40010518:	003c8206 	br	4000f724 <__alt_data_end+0xc000f724>
4001051c:	9080040c 	andi	r2,r18,16
40010520:	10003526 	beq	r2,zero,400105f8 <___vfprintf_internal_r+0x13fc>
40010524:	d9402d17 	ldw	r5,180(sp)
40010528:	d8c02917 	ldw	r3,164(sp)
4001052c:	d8002785 	stb	zero,158(sp)
40010530:	28800104 	addi	r2,r5,4
40010534:	2cc00017 	ldw	r19,0(r5)
40010538:	002d883a 	mov	r22,zero
4001053c:	18003716 	blt	r3,zero,4001061c <___vfprintf_internal_r+0x1420>
40010540:	00ffdfc4 	movi	r3,-129
40010544:	d8802d15 	stw	r2,180(sp)
40010548:	90e4703a 	and	r18,r18,r3
4001054c:	0039883a 	mov	fp,zero
40010550:	983df326 	beq	r19,zero,4000fd20 <__alt_data_end+0xc000fd20>
40010554:	00800244 	movi	r2,9
40010558:	14fc7b36 	bltu	r2,r19,4000f748 <__alt_data_end+0xc000f748>
4001055c:	d8c02817 	ldw	r3,160(sp)
40010560:	dc001dc4 	addi	r16,sp,119
40010564:	9cc00c04 	addi	r19,r19,48
40010568:	1c07c83a 	sub	r3,r3,r16
4001056c:	dcc01dc5 	stb	r19,119(sp)
40010570:	d8c02e15 	stw	r3,184(sp)
40010574:	003ce806 	br	4000f918 <__alt_data_end+0xc000f918>
40010578:	d8803317 	ldw	r2,204(sp)
4001057c:	143fffc4 	addi	r16,r2,-1
40010580:	043f4d0e 	bge	zero,r16,400102b8 <__alt_data_end+0xc00102b8>
40010584:	07000404 	movi	fp,16
40010588:	e400810e 	bge	fp,r16,40010790 <___vfprintf_internal_r+0x1594>
4001058c:	015000b4 	movhi	r5,16386
40010590:	296a3b84 	addi	r5,r5,-22290
40010594:	d9402b15 	stw	r5,172(sp)
40010598:	01c001c4 	movi	r7,7
4001059c:	dcc02c17 	ldw	r19,176(sp)
400105a0:	00000306 	br	400105b0 <___vfprintf_internal_r+0x13b4>
400105a4:	b5800204 	addi	r22,r22,8
400105a8:	843ffc04 	addi	r16,r16,-16
400105ac:	e4007b0e 	bge	fp,r16,4001079c <___vfprintf_internal_r+0x15a0>
400105b0:	18c00404 	addi	r3,r3,16
400105b4:	8c400044 	addi	r17,r17,1
400105b8:	b5000015 	stw	r20,0(r22)
400105bc:	b7000115 	stw	fp,4(r22)
400105c0:	d8c02015 	stw	r3,128(sp)
400105c4:	dc401f15 	stw	r17,124(sp)
400105c8:	3c7ff60e 	bge	r7,r17,400105a4 <__alt_data_end+0xc00105a4>
400105cc:	d9801e04 	addi	r6,sp,120
400105d0:	b80b883a 	mov	r5,r23
400105d4:	9809883a 	mov	r4,r19
400105d8:	d9c03c15 	stw	r7,240(sp)
400105dc:	0015e900 	call	40015e90 <__sprint_r>
400105e0:	d9c03c17 	ldw	r7,240(sp)
400105e4:	103c071e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
400105e8:	d8c02017 	ldw	r3,128(sp)
400105ec:	dc401f17 	ldw	r17,124(sp)
400105f0:	dd800404 	addi	r22,sp,16
400105f4:	003fec06 	br	400105a8 <__alt_data_end+0xc00105a8>
400105f8:	9080100c 	andi	r2,r18,64
400105fc:	d8002785 	stb	zero,158(sp)
40010600:	10010e26 	beq	r2,zero,40010a3c <___vfprintf_internal_r+0x1840>
40010604:	d9002d17 	ldw	r4,180(sp)
40010608:	d9402917 	ldw	r5,164(sp)
4001060c:	002d883a 	mov	r22,zero
40010610:	20800104 	addi	r2,r4,4
40010614:	24c0000b 	ldhu	r19,0(r4)
40010618:	283fc90e 	bge	r5,zero,40010540 <__alt_data_end+0xc0010540>
4001061c:	d8802d15 	stw	r2,180(sp)
40010620:	0039883a 	mov	fp,zero
40010624:	9d84b03a 	or	r2,r19,r22
40010628:	103c461e 	bne	r2,zero,4000f744 <__alt_data_end+0xc000f744>
4001062c:	00800044 	movi	r2,1
40010630:	003e6c06 	br	4000ffe4 <__alt_data_end+0xc000ffe4>
40010634:	d9002c17 	ldw	r4,176(sp)
40010638:	d9801e04 	addi	r6,sp,120
4001063c:	b80b883a 	mov	r5,r23
40010640:	0015e900 	call	40015e90 <__sprint_r>
40010644:	103bef1e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
40010648:	d8c02017 	ldw	r3,128(sp)
4001064c:	da000404 	addi	r8,sp,16
40010650:	d9003217 	ldw	r4,200(sp)
40010654:	d8802617 	ldw	r2,152(sp)
40010658:	d9403317 	ldw	r5,204(sp)
4001065c:	8123883a 	add	r17,r16,r4
40010660:	11400216 	blt	r2,r5,4001066c <___vfprintf_internal_r+0x1470>
40010664:	9100004c 	andi	r4,r18,1
40010668:	20000d26 	beq	r4,zero,400106a0 <___vfprintf_internal_r+0x14a4>
4001066c:	d9003717 	ldw	r4,220(sp)
40010670:	d9403417 	ldw	r5,208(sp)
40010674:	1907883a 	add	r3,r3,r4
40010678:	d9001f17 	ldw	r4,124(sp)
4001067c:	41400015 	stw	r5,0(r8)
40010680:	d9403717 	ldw	r5,220(sp)
40010684:	21000044 	addi	r4,r4,1
40010688:	d8c02015 	stw	r3,128(sp)
4001068c:	41400115 	stw	r5,4(r8)
40010690:	d9001f15 	stw	r4,124(sp)
40010694:	014001c4 	movi	r5,7
40010698:	2901e816 	blt	r5,r4,40010e3c <___vfprintf_internal_r+0x1c40>
4001069c:	42000204 	addi	r8,r8,8
400106a0:	d9003317 	ldw	r4,204(sp)
400106a4:	8121883a 	add	r16,r16,r4
400106a8:	2085c83a 	sub	r2,r4,r2
400106ac:	8461c83a 	sub	r16,r16,r17
400106b0:	1400010e 	bge	r2,r16,400106b8 <___vfprintf_internal_r+0x14bc>
400106b4:	1021883a 	mov	r16,r2
400106b8:	04000a0e 	bge	zero,r16,400106e4 <___vfprintf_internal_r+0x14e8>
400106bc:	d9001f17 	ldw	r4,124(sp)
400106c0:	1c07883a 	add	r3,r3,r16
400106c4:	44400015 	stw	r17,0(r8)
400106c8:	21000044 	addi	r4,r4,1
400106cc:	44000115 	stw	r16,4(r8)
400106d0:	d8c02015 	stw	r3,128(sp)
400106d4:	d9001f15 	stw	r4,124(sp)
400106d8:	014001c4 	movi	r5,7
400106dc:	2901fb16 	blt	r5,r4,40010ecc <___vfprintf_internal_r+0x1cd0>
400106e0:	42000204 	addi	r8,r8,8
400106e4:	8001f716 	blt	r16,zero,40010ec4 <___vfprintf_internal_r+0x1cc8>
400106e8:	1421c83a 	sub	r16,r2,r16
400106ec:	043d380e 	bge	zero,r16,4000fbd0 <__alt_data_end+0xc000fbd0>
400106f0:	04400404 	movi	r17,16
400106f4:	d8801f17 	ldw	r2,124(sp)
400106f8:	8c3efb0e 	bge	r17,r16,400102e8 <__alt_data_end+0xc00102e8>
400106fc:	015000b4 	movhi	r5,16386
40010700:	296a3b84 	addi	r5,r5,-22290
40010704:	d9402b15 	stw	r5,172(sp)
40010708:	058001c4 	movi	r22,7
4001070c:	dcc02c17 	ldw	r19,176(sp)
40010710:	00000306 	br	40010720 <___vfprintf_internal_r+0x1524>
40010714:	42000204 	addi	r8,r8,8
40010718:	843ffc04 	addi	r16,r16,-16
4001071c:	8c3ef50e 	bge	r17,r16,400102f4 <__alt_data_end+0xc00102f4>
40010720:	18c00404 	addi	r3,r3,16
40010724:	10800044 	addi	r2,r2,1
40010728:	45000015 	stw	r20,0(r8)
4001072c:	44400115 	stw	r17,4(r8)
40010730:	d8c02015 	stw	r3,128(sp)
40010734:	d8801f15 	stw	r2,124(sp)
40010738:	b0bff60e 	bge	r22,r2,40010714 <__alt_data_end+0xc0010714>
4001073c:	d9801e04 	addi	r6,sp,120
40010740:	b80b883a 	mov	r5,r23
40010744:	9809883a 	mov	r4,r19
40010748:	0015e900 	call	40015e90 <__sprint_r>
4001074c:	103bad1e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
40010750:	d8c02017 	ldw	r3,128(sp)
40010754:	d8801f17 	ldw	r2,124(sp)
40010758:	da000404 	addi	r8,sp,16
4001075c:	003fee06 	br	40010718 <__alt_data_end+0xc0010718>
40010760:	9088703a 	and	r4,r18,r2
40010764:	203eab1e 	bne	r4,zero,40010214 <__alt_data_end+0xc0010214>
40010768:	dc401f17 	ldw	r17,124(sp)
4001076c:	40800115 	stw	r2,4(r8)
40010770:	44000015 	stw	r16,0(r8)
40010774:	8c400044 	addi	r17,r17,1
40010778:	d8c02015 	stw	r3,128(sp)
4001077c:	dc401f15 	stw	r17,124(sp)
40010780:	008001c4 	movi	r2,7
40010784:	14400e16 	blt	r2,r17,400107c0 <___vfprintf_internal_r+0x15c4>
40010788:	45800204 	addi	r22,r8,8
4001078c:	003eca06 	br	400102b8 <__alt_data_end+0xc00102b8>
40010790:	011000b4 	movhi	r4,16386
40010794:	212a3b84 	addi	r4,r4,-22290
40010798:	d9002b15 	stw	r4,172(sp)
4001079c:	d8802b17 	ldw	r2,172(sp)
400107a0:	1c07883a 	add	r3,r3,r16
400107a4:	8c400044 	addi	r17,r17,1
400107a8:	b0800015 	stw	r2,0(r22)
400107ac:	b4000115 	stw	r16,4(r22)
400107b0:	d8c02015 	stw	r3,128(sp)
400107b4:	dc401f15 	stw	r17,124(sp)
400107b8:	008001c4 	movi	r2,7
400107bc:	147ebd0e 	bge	r2,r17,400102b4 <__alt_data_end+0xc00102b4>
400107c0:	d9002c17 	ldw	r4,176(sp)
400107c4:	d9801e04 	addi	r6,sp,120
400107c8:	b80b883a 	mov	r5,r23
400107cc:	0015e900 	call	40015e90 <__sprint_r>
400107d0:	103b8c1e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
400107d4:	d8c02017 	ldw	r3,128(sp)
400107d8:	dc401f17 	ldw	r17,124(sp)
400107dc:	dd800404 	addi	r22,sp,16
400107e0:	003eb506 	br	400102b8 <__alt_data_end+0xc00102b8>
400107e4:	d9002c17 	ldw	r4,176(sp)
400107e8:	d9801e04 	addi	r6,sp,120
400107ec:	b80b883a 	mov	r5,r23
400107f0:	0015e900 	call	40015e90 <__sprint_r>
400107f4:	103b831e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
400107f8:	d8c02017 	ldw	r3,128(sp)
400107fc:	dc401f17 	ldw	r17,124(sp)
40010800:	da000404 	addi	r8,sp,16
40010804:	003e8d06 	br	4001023c <__alt_data_end+0xc001023c>
40010808:	d9002c17 	ldw	r4,176(sp)
4001080c:	d9801e04 	addi	r6,sp,120
40010810:	b80b883a 	mov	r5,r23
40010814:	0015e900 	call	40015e90 <__sprint_r>
40010818:	103b7a1e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
4001081c:	d8c02017 	ldw	r3,128(sp)
40010820:	dc401f17 	ldw	r17,124(sp)
40010824:	dd800404 	addi	r22,sp,16
40010828:	003e8f06 	br	40010268 <__alt_data_end+0xc0010268>
4001082c:	0027883a 	mov	r19,zero
40010830:	003f4a06 	br	4001055c <__alt_data_end+0xc001055c>
40010834:	d9002c17 	ldw	r4,176(sp)
40010838:	d9801e04 	addi	r6,sp,120
4001083c:	b80b883a 	mov	r5,r23
40010840:	0015e900 	call	40015e90 <__sprint_r>
40010844:	103b6f1e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
40010848:	d8c02017 	ldw	r3,128(sp)
4001084c:	da000404 	addi	r8,sp,16
40010850:	003c9d06 	br	4000fac8 <__alt_data_end+0xc000fac8>
40010854:	04e7c83a 	sub	r19,zero,r19
40010858:	9804c03a 	cmpne	r2,r19,zero
4001085c:	05adc83a 	sub	r22,zero,r22
40010860:	b0adc83a 	sub	r22,r22,r2
40010864:	d8802917 	ldw	r2,164(sp)
40010868:	07000b44 	movi	fp,45
4001086c:	df002785 	stb	fp,158(sp)
40010870:	10017b16 	blt	r2,zero,40010e60 <___vfprintf_internal_r+0x1c64>
40010874:	00bfdfc4 	movi	r2,-129
40010878:	90a4703a 	and	r18,r18,r2
4001087c:	003bb106 	br	4000f744 <__alt_data_end+0xc000f744>
40010880:	d9003617 	ldw	r4,216(sp)
40010884:	d9403817 	ldw	r5,224(sp)
40010888:	da003d15 	stw	r8,244(sp)
4001088c:	0015b080 	call	40015b08 <__fpclassifyd>
40010890:	da003d17 	ldw	r8,244(sp)
40010894:	1000f026 	beq	r2,zero,40010c58 <___vfprintf_internal_r+0x1a5c>
40010898:	d9002917 	ldw	r4,164(sp)
4001089c:	05bff7c4 	movi	r22,-33
400108a0:	00bfffc4 	movi	r2,-1
400108a4:	8dac703a 	and	r22,r17,r22
400108a8:	20820026 	beq	r4,r2,400110ac <___vfprintf_internal_r+0x1eb0>
400108ac:	008011c4 	movi	r2,71
400108b0:	b081f726 	beq	r22,r2,40011090 <___vfprintf_internal_r+0x1e94>
400108b4:	d9003817 	ldw	r4,224(sp)
400108b8:	90c04014 	ori	r3,r18,256
400108bc:	d8c02b15 	stw	r3,172(sp)
400108c0:	20021516 	blt	r4,zero,40011118 <___vfprintf_internal_r+0x1f1c>
400108c4:	dcc03817 	ldw	r19,224(sp)
400108c8:	d8002a05 	stb	zero,168(sp)
400108cc:	00801984 	movi	r2,102
400108d0:	8881f926 	beq	r17,r2,400110b8 <___vfprintf_internal_r+0x1ebc>
400108d4:	00801184 	movi	r2,70
400108d8:	88821c26 	beq	r17,r2,4001114c <___vfprintf_internal_r+0x1f50>
400108dc:	00801144 	movi	r2,69
400108e0:	b081ef26 	beq	r22,r2,400110a0 <___vfprintf_internal_r+0x1ea4>
400108e4:	d8c02917 	ldw	r3,164(sp)
400108e8:	d8802104 	addi	r2,sp,132
400108ec:	d8800315 	stw	r2,12(sp)
400108f0:	d9403617 	ldw	r5,216(sp)
400108f4:	d8802504 	addi	r2,sp,148
400108f8:	d9002c17 	ldw	r4,176(sp)
400108fc:	d8800215 	stw	r2,8(sp)
40010900:	d8802604 	addi	r2,sp,152
40010904:	d8c00015 	stw	r3,0(sp)
40010908:	d8800115 	stw	r2,4(sp)
4001090c:	01c00084 	movi	r7,2
40010910:	980d883a 	mov	r6,r19
40010914:	d8c03c15 	stw	r3,240(sp)
40010918:	da003d15 	stw	r8,244(sp)
4001091c:	00118200 	call	40011820 <_dtoa_r>
40010920:	1021883a 	mov	r16,r2
40010924:	008019c4 	movi	r2,103
40010928:	d8c03c17 	ldw	r3,240(sp)
4001092c:	da003d17 	ldw	r8,244(sp)
40010930:	88817126 	beq	r17,r2,40010ef8 <___vfprintf_internal_r+0x1cfc>
40010934:	008011c4 	movi	r2,71
40010938:	88829226 	beq	r17,r2,40011384 <___vfprintf_internal_r+0x2188>
4001093c:	80f9883a 	add	fp,r16,r3
40010940:	d9003617 	ldw	r4,216(sp)
40010944:	000d883a 	mov	r6,zero
40010948:	000f883a 	mov	r7,zero
4001094c:	980b883a 	mov	r5,r19
40010950:	da003d15 	stw	r8,244(sp)
40010954:	00186fc0 	call	400186fc <__eqdf2>
40010958:	da003d17 	ldw	r8,244(sp)
4001095c:	10018d26 	beq	r2,zero,40010f94 <___vfprintf_internal_r+0x1d98>
40010960:	d8802117 	ldw	r2,132(sp)
40010964:	1700062e 	bgeu	r2,fp,40010980 <___vfprintf_internal_r+0x1784>
40010968:	01000c04 	movi	r4,48
4001096c:	10c00044 	addi	r3,r2,1
40010970:	d8c02115 	stw	r3,132(sp)
40010974:	11000005 	stb	r4,0(r2)
40010978:	d8802117 	ldw	r2,132(sp)
4001097c:	173ffb36 	bltu	r2,fp,4001096c <__alt_data_end+0xc001096c>
40010980:	1405c83a 	sub	r2,r2,r16
40010984:	d8803315 	stw	r2,204(sp)
40010988:	008011c4 	movi	r2,71
4001098c:	b0817626 	beq	r22,r2,40010f68 <___vfprintf_internal_r+0x1d6c>
40010990:	00801944 	movi	r2,101
40010994:	1442810e 	bge	r2,r17,4001139c <___vfprintf_internal_r+0x21a0>
40010998:	d8c02617 	ldw	r3,152(sp)
4001099c:	00801984 	movi	r2,102
400109a0:	d8c03215 	stw	r3,200(sp)
400109a4:	8881fe26 	beq	r17,r2,400111a0 <___vfprintf_internal_r+0x1fa4>
400109a8:	d8c03217 	ldw	r3,200(sp)
400109ac:	d9003317 	ldw	r4,204(sp)
400109b0:	1901dd16 	blt	r3,r4,40011128 <___vfprintf_internal_r+0x1f2c>
400109b4:	9480004c 	andi	r18,r18,1
400109b8:	90022b1e 	bne	r18,zero,40011268 <___vfprintf_internal_r+0x206c>
400109bc:	1805883a 	mov	r2,r3
400109c0:	18028016 	blt	r3,zero,400113c4 <___vfprintf_internal_r+0x21c8>
400109c4:	d8c03217 	ldw	r3,200(sp)
400109c8:	044019c4 	movi	r17,103
400109cc:	d8c02e15 	stw	r3,184(sp)
400109d0:	df002a07 	ldb	fp,168(sp)
400109d4:	e001531e 	bne	fp,zero,40010f24 <___vfprintf_internal_r+0x1d28>
400109d8:	df002783 	ldbu	fp,158(sp)
400109dc:	d8802a15 	stw	r2,168(sp)
400109e0:	dc802b17 	ldw	r18,172(sp)
400109e4:	d8002915 	stw	zero,164(sp)
400109e8:	003bd106 	br	4000f930 <__alt_data_end+0xc000f930>
400109ec:	d8802d17 	ldw	r2,180(sp)
400109f0:	d8c02d17 	ldw	r3,180(sp)
400109f4:	d9002d17 	ldw	r4,180(sp)
400109f8:	10800017 	ldw	r2,0(r2)
400109fc:	18c00117 	ldw	r3,4(r3)
40010a00:	21000204 	addi	r4,r4,8
40010a04:	d8803615 	stw	r2,216(sp)
40010a08:	d8c03815 	stw	r3,224(sp)
40010a0c:	d9002d15 	stw	r4,180(sp)
40010a10:	003b7506 	br	4000f7e8 <__alt_data_end+0xc000f7e8>
40010a14:	ac400007 	ldb	r17,0(r21)
40010a18:	003a5906 	br	4000f380 <__alt_data_end+0xc000f380>
40010a1c:	9080100c 	andi	r2,r18,64
40010a20:	1000a826 	beq	r2,zero,40010cc4 <___vfprintf_internal_r+0x1ac8>
40010a24:	d9002d17 	ldw	r4,180(sp)
40010a28:	002d883a 	mov	r22,zero
40010a2c:	24c0000b 	ldhu	r19,0(r4)
40010a30:	21000104 	addi	r4,r4,4
40010a34:	d9002d15 	stw	r4,180(sp)
40010a38:	003ccb06 	br	4000fd68 <__alt_data_end+0xc000fd68>
40010a3c:	d8c02d17 	ldw	r3,180(sp)
40010a40:	d9002917 	ldw	r4,164(sp)
40010a44:	002d883a 	mov	r22,zero
40010a48:	18800104 	addi	r2,r3,4
40010a4c:	1cc00017 	ldw	r19,0(r3)
40010a50:	203ebb0e 	bge	r4,zero,40010540 <__alt_data_end+0xc0010540>
40010a54:	003ef106 	br	4001061c <__alt_data_end+0xc001061c>
40010a58:	9080040c 	andi	r2,r18,16
40010a5c:	1000921e 	bne	r2,zero,40010ca8 <___vfprintf_internal_r+0x1aac>
40010a60:	9480100c 	andi	r18,r18,64
40010a64:	90013926 	beq	r18,zero,40010f4c <___vfprintf_internal_r+0x1d50>
40010a68:	d9002d17 	ldw	r4,180(sp)
40010a6c:	d9402f17 	ldw	r5,188(sp)
40010a70:	20800017 	ldw	r2,0(r4)
40010a74:	21000104 	addi	r4,r4,4
40010a78:	d9002d15 	stw	r4,180(sp)
40010a7c:	1140000d 	sth	r5,0(r2)
40010a80:	003a1606 	br	4000f2dc <__alt_data_end+0xc000f2dc>
40010a84:	9080100c 	andi	r2,r18,64
40010a88:	10008026 	beq	r2,zero,40010c8c <___vfprintf_internal_r+0x1a90>
40010a8c:	d8c02d17 	ldw	r3,180(sp)
40010a90:	1cc0000f 	ldh	r19,0(r3)
40010a94:	18c00104 	addi	r3,r3,4
40010a98:	d8c02d15 	stw	r3,180(sp)
40010a9c:	982dd7fa 	srai	r22,r19,31
40010aa0:	b005883a 	mov	r2,r22
40010aa4:	003b1f06 	br	4000f724 <__alt_data_end+0xc000f724>
40010aa8:	9080100c 	andi	r2,r18,64
40010aac:	d8002785 	stb	zero,158(sp)
40010ab0:	10008a1e 	bne	r2,zero,40010cdc <___vfprintf_internal_r+0x1ae0>
40010ab4:	d9402d17 	ldw	r5,180(sp)
40010ab8:	d8c02917 	ldw	r3,164(sp)
40010abc:	002d883a 	mov	r22,zero
40010ac0:	28800104 	addi	r2,r5,4
40010ac4:	2cc00017 	ldw	r19,0(r5)
40010ac8:	183e4b0e 	bge	r3,zero,400103f8 <__alt_data_end+0xc00103f8>
40010acc:	9d86b03a 	or	r3,r19,r22
40010ad0:	d8802d15 	stw	r2,180(sp)
40010ad4:	183e4c1e 	bne	r3,zero,40010408 <__alt_data_end+0xc0010408>
40010ad8:	0039883a 	mov	fp,zero
40010adc:	0005883a 	mov	r2,zero
40010ae0:	003d4006 	br	4000ffe4 <__alt_data_end+0xc000ffe4>
40010ae4:	015000b4 	movhi	r5,16386
40010ae8:	296a3b84 	addi	r5,r5,-22290
40010aec:	d9402b15 	stw	r5,172(sp)
40010af0:	d9402b17 	ldw	r5,172(sp)
40010af4:	1c47883a 	add	r3,r3,r17
40010af8:	10800044 	addi	r2,r2,1
40010afc:	41400015 	stw	r5,0(r8)
40010b00:	44400115 	stw	r17,4(r8)
40010b04:	d8c02015 	stw	r3,128(sp)
40010b08:	d8801f15 	stw	r2,124(sp)
40010b0c:	010001c4 	movi	r4,7
40010b10:	20bec816 	blt	r4,r2,40010634 <__alt_data_end+0xc0010634>
40010b14:	42000204 	addi	r8,r8,8
40010b18:	003ecd06 	br	40010650 <__alt_data_end+0xc0010650>
40010b1c:	d9002917 	ldw	r4,164(sp)
40010b20:	d8002785 	stb	zero,158(sp)
40010b24:	203d2d16 	blt	r4,zero,4000ffdc <__alt_data_end+0xc000ffdc>
40010b28:	00bfdfc4 	movi	r2,-129
40010b2c:	90a4703a 	and	r18,r18,r2
40010b30:	003a9106 	br	4000f578 <__alt_data_end+0xc000f578>
40010b34:	011000b4 	movhi	r4,16386
40010b38:	212a3b84 	addi	r4,r4,-22290
40010b3c:	d9002b15 	stw	r4,172(sp)
40010b40:	003c0c06 	br	4000fb74 <__alt_data_end+0xc000fb74>
40010b44:	d9002c17 	ldw	r4,176(sp)
40010b48:	d9801e04 	addi	r6,sp,120
40010b4c:	b80b883a 	mov	r5,r23
40010b50:	0015e900 	call	40015e90 <__sprint_r>
40010b54:	103aab1e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
40010b58:	d8c02017 	ldw	r3,128(sp)
40010b5c:	da000404 	addi	r8,sp,16
40010b60:	003d4106 	br	40010068 <__alt_data_end+0xc0010068>
40010b64:	d8801f17 	ldw	r2,124(sp)
40010b68:	015000b4 	movhi	r5,16386
40010b6c:	01000044 	movi	r4,1
40010b70:	18c00044 	addi	r3,r3,1
40010b74:	10800044 	addi	r2,r2,1
40010b78:	296a3b04 	addi	r5,r5,-22292
40010b7c:	41000115 	stw	r4,4(r8)
40010b80:	41400015 	stw	r5,0(r8)
40010b84:	d8c02015 	stw	r3,128(sp)
40010b88:	d8801f15 	stw	r2,124(sp)
40010b8c:	010001c4 	movi	r4,7
40010b90:	20805c16 	blt	r4,r2,40010d04 <___vfprintf_internal_r+0x1b08>
40010b94:	42000204 	addi	r8,r8,8
40010b98:	8800041e 	bne	r17,zero,40010bac <___vfprintf_internal_r+0x19b0>
40010b9c:	d8803317 	ldw	r2,204(sp)
40010ba0:	1000021e 	bne	r2,zero,40010bac <___vfprintf_internal_r+0x19b0>
40010ba4:	9080004c 	andi	r2,r18,1
40010ba8:	103c0926 	beq	r2,zero,4000fbd0 <__alt_data_end+0xc000fbd0>
40010bac:	d9003717 	ldw	r4,220(sp)
40010bb0:	d8801f17 	ldw	r2,124(sp)
40010bb4:	d9403417 	ldw	r5,208(sp)
40010bb8:	20c7883a 	add	r3,r4,r3
40010bbc:	10800044 	addi	r2,r2,1
40010bc0:	41000115 	stw	r4,4(r8)
40010bc4:	41400015 	stw	r5,0(r8)
40010bc8:	d8c02015 	stw	r3,128(sp)
40010bcc:	d8801f15 	stw	r2,124(sp)
40010bd0:	010001c4 	movi	r4,7
40010bd4:	20812116 	blt	r4,r2,4001105c <___vfprintf_internal_r+0x1e60>
40010bd8:	42000204 	addi	r8,r8,8
40010bdc:	0463c83a 	sub	r17,zero,r17
40010be0:	0440730e 	bge	zero,r17,40010db0 <___vfprintf_internal_r+0x1bb4>
40010be4:	05800404 	movi	r22,16
40010be8:	b440860e 	bge	r22,r17,40010e04 <___vfprintf_internal_r+0x1c08>
40010bec:	015000b4 	movhi	r5,16386
40010bf0:	296a3b84 	addi	r5,r5,-22290
40010bf4:	d9402b15 	stw	r5,172(sp)
40010bf8:	070001c4 	movi	fp,7
40010bfc:	dcc02c17 	ldw	r19,176(sp)
40010c00:	00000306 	br	40010c10 <___vfprintf_internal_r+0x1a14>
40010c04:	42000204 	addi	r8,r8,8
40010c08:	8c7ffc04 	addi	r17,r17,-16
40010c0c:	b440800e 	bge	r22,r17,40010e10 <___vfprintf_internal_r+0x1c14>
40010c10:	18c00404 	addi	r3,r3,16
40010c14:	10800044 	addi	r2,r2,1
40010c18:	45000015 	stw	r20,0(r8)
40010c1c:	45800115 	stw	r22,4(r8)
40010c20:	d8c02015 	stw	r3,128(sp)
40010c24:	d8801f15 	stw	r2,124(sp)
40010c28:	e0bff60e 	bge	fp,r2,40010c04 <__alt_data_end+0xc0010c04>
40010c2c:	d9801e04 	addi	r6,sp,120
40010c30:	b80b883a 	mov	r5,r23
40010c34:	9809883a 	mov	r4,r19
40010c38:	0015e900 	call	40015e90 <__sprint_r>
40010c3c:	103a711e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
40010c40:	d8c02017 	ldw	r3,128(sp)
40010c44:	d8801f17 	ldw	r2,124(sp)
40010c48:	da000404 	addi	r8,sp,16
40010c4c:	003fee06 	br	40010c08 <__alt_data_end+0xc0010c08>
40010c50:	00bfffc4 	movi	r2,-1
40010c54:	003a6f06 	br	4000f614 <__alt_data_end+0xc000f614>
40010c58:	008011c4 	movi	r2,71
40010c5c:	1440b816 	blt	r2,r17,40010f40 <___vfprintf_internal_r+0x1d44>
40010c60:	041000b4 	movhi	r16,16386
40010c64:	842a2d04 	addi	r16,r16,-22348
40010c68:	00c000c4 	movi	r3,3
40010c6c:	00bfdfc4 	movi	r2,-129
40010c70:	d8c02a15 	stw	r3,168(sp)
40010c74:	90a4703a 	and	r18,r18,r2
40010c78:	df002783 	ldbu	fp,158(sp)
40010c7c:	d8c02e15 	stw	r3,184(sp)
40010c80:	d8002915 	stw	zero,164(sp)
40010c84:	d8003215 	stw	zero,200(sp)
40010c88:	003b2906 	br	4000f930 <__alt_data_end+0xc000f930>
40010c8c:	d9002d17 	ldw	r4,180(sp)
40010c90:	24c00017 	ldw	r19,0(r4)
40010c94:	21000104 	addi	r4,r4,4
40010c98:	d9002d15 	stw	r4,180(sp)
40010c9c:	982dd7fa 	srai	r22,r19,31
40010ca0:	b005883a 	mov	r2,r22
40010ca4:	003a9f06 	br	4000f724 <__alt_data_end+0xc000f724>
40010ca8:	d9402d17 	ldw	r5,180(sp)
40010cac:	d8c02f17 	ldw	r3,188(sp)
40010cb0:	28800017 	ldw	r2,0(r5)
40010cb4:	29400104 	addi	r5,r5,4
40010cb8:	d9402d15 	stw	r5,180(sp)
40010cbc:	10c00015 	stw	r3,0(r2)
40010cc0:	00398606 	br	4000f2dc <__alt_data_end+0xc000f2dc>
40010cc4:	d9402d17 	ldw	r5,180(sp)
40010cc8:	002d883a 	mov	r22,zero
40010ccc:	2cc00017 	ldw	r19,0(r5)
40010cd0:	29400104 	addi	r5,r5,4
40010cd4:	d9402d15 	stw	r5,180(sp)
40010cd8:	003c2306 	br	4000fd68 <__alt_data_end+0xc000fd68>
40010cdc:	d8c02d17 	ldw	r3,180(sp)
40010ce0:	d9002917 	ldw	r4,164(sp)
40010ce4:	002d883a 	mov	r22,zero
40010ce8:	18800104 	addi	r2,r3,4
40010cec:	1cc0000b 	ldhu	r19,0(r3)
40010cf0:	203dc10e 	bge	r4,zero,400103f8 <__alt_data_end+0xc00103f8>
40010cf4:	003f7506 	br	40010acc <__alt_data_end+0xc0010acc>
40010cf8:	041000b4 	movhi	r16,16386
40010cfc:	842a2b04 	addi	r16,r16,-22356
40010d00:	003acc06 	br	4000f834 <__alt_data_end+0xc000f834>
40010d04:	d9002c17 	ldw	r4,176(sp)
40010d08:	d9801e04 	addi	r6,sp,120
40010d0c:	b80b883a 	mov	r5,r23
40010d10:	0015e900 	call	40015e90 <__sprint_r>
40010d14:	103a3b1e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
40010d18:	dc402617 	ldw	r17,152(sp)
40010d1c:	d8c02017 	ldw	r3,128(sp)
40010d20:	da000404 	addi	r8,sp,16
40010d24:	003f9c06 	br	40010b98 <__alt_data_end+0xc0010b98>
40010d28:	ac400043 	ldbu	r17,1(r21)
40010d2c:	94800814 	ori	r18,r18,32
40010d30:	ad400044 	addi	r21,r21,1
40010d34:	8c403fcc 	andi	r17,r17,255
40010d38:	8c40201c 	xori	r17,r17,128
40010d3c:	8c7fe004 	addi	r17,r17,-128
40010d40:	00398f06 	br	4000f380 <__alt_data_end+0xc000f380>
40010d44:	d8c02d15 	stw	r3,180(sp)
40010d48:	0039883a 	mov	fp,zero
40010d4c:	003e3506 	br	40010624 <__alt_data_end+0xc0010624>
40010d50:	d9002c17 	ldw	r4,176(sp)
40010d54:	d9801e04 	addi	r6,sp,120
40010d58:	b80b883a 	mov	r5,r23
40010d5c:	0015e900 	call	40015e90 <__sprint_r>
40010d60:	103a281e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
40010d64:	d8c02017 	ldw	r3,128(sp)
40010d68:	da000404 	addi	r8,sp,16
40010d6c:	003cd006 	br	400100b0 <__alt_data_end+0xc00100b0>
40010d70:	8009883a 	mov	r4,r16
40010d74:	da003d15 	stw	r8,244(sp)
40010d78:	000f1640 	call	4000f164 <strlen>
40010d7c:	d8802e15 	stw	r2,184(sp)
40010d80:	da003d17 	ldw	r8,244(sp)
40010d84:	103c340e 	bge	r2,zero,4000fe58 <__alt_data_end+0xc000fe58>
40010d88:	0005883a 	mov	r2,zero
40010d8c:	003c3206 	br	4000fe58 <__alt_data_end+0xc000fe58>
40010d90:	d9002c17 	ldw	r4,176(sp)
40010d94:	d9801e04 	addi	r6,sp,120
40010d98:	b80b883a 	mov	r5,r23
40010d9c:	0015e900 	call	40015e90 <__sprint_r>
40010da0:	103a181e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
40010da4:	d8c02017 	ldw	r3,128(sp)
40010da8:	d8801f17 	ldw	r2,124(sp)
40010dac:	da000404 	addi	r8,sp,16
40010db0:	d9403317 	ldw	r5,204(sp)
40010db4:	10800044 	addi	r2,r2,1
40010db8:	44000015 	stw	r16,0(r8)
40010dbc:	28c7883a 	add	r3,r5,r3
40010dc0:	003b7d06 	br	4000fbb8 <__alt_data_end+0xc000fbb8>
40010dc4:	011000b4 	movhi	r4,16386
40010dc8:	212a3f84 	addi	r4,r4,-22274
40010dcc:	d9003515 	stw	r4,212(sp)
40010dd0:	003b1406 	br	4000fa24 <__alt_data_end+0xc000fa24>
40010dd4:	013fffc4 	movi	r4,-1
40010dd8:	003a3506 	br	4000f6b0 <__alt_data_end+0xc000f6b0>
40010ddc:	0023883a 	mov	r17,zero
40010de0:	003d9d06 	br	40010458 <__alt_data_end+0xc0010458>
40010de4:	d9002c17 	ldw	r4,176(sp)
40010de8:	d9801e04 	addi	r6,sp,120
40010dec:	b80b883a 	mov	r5,r23
40010df0:	0015e900 	call	40015e90 <__sprint_r>
40010df4:	103a031e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
40010df8:	d8c02017 	ldw	r3,128(sp)
40010dfc:	da000404 	addi	r8,sp,16
40010e00:	003d9406 	br	40010454 <__alt_data_end+0xc0010454>
40010e04:	011000b4 	movhi	r4,16386
40010e08:	212a3b84 	addi	r4,r4,-22290
40010e0c:	d9002b15 	stw	r4,172(sp)
40010e10:	d9002b17 	ldw	r4,172(sp)
40010e14:	1c47883a 	add	r3,r3,r17
40010e18:	10800044 	addi	r2,r2,1
40010e1c:	41000015 	stw	r4,0(r8)
40010e20:	44400115 	stw	r17,4(r8)
40010e24:	d8c02015 	stw	r3,128(sp)
40010e28:	d8801f15 	stw	r2,124(sp)
40010e2c:	010001c4 	movi	r4,7
40010e30:	20bfd716 	blt	r4,r2,40010d90 <__alt_data_end+0xc0010d90>
40010e34:	42000204 	addi	r8,r8,8
40010e38:	003fdd06 	br	40010db0 <__alt_data_end+0xc0010db0>
40010e3c:	d9002c17 	ldw	r4,176(sp)
40010e40:	d9801e04 	addi	r6,sp,120
40010e44:	b80b883a 	mov	r5,r23
40010e48:	0015e900 	call	40015e90 <__sprint_r>
40010e4c:	1039ed1e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
40010e50:	d8802617 	ldw	r2,152(sp)
40010e54:	d8c02017 	ldw	r3,128(sp)
40010e58:	da000404 	addi	r8,sp,16
40010e5c:	003e1006 	br	400106a0 <__alt_data_end+0xc00106a0>
40010e60:	00800044 	movi	r2,1
40010e64:	10803fcc 	andi	r2,r2,255
40010e68:	00c00044 	movi	r3,1
40010e6c:	10fa3526 	beq	r2,r3,4000f744 <__alt_data_end+0xc000f744>
40010e70:	00c00084 	movi	r3,2
40010e74:	10fbcb26 	beq	r2,r3,4000fda4 <__alt_data_end+0xc000fda4>
40010e78:	003a8f06 	br	4000f8b8 <__alt_data_end+0xc000f8b8>
40010e7c:	011000b4 	movhi	r4,16386
40010e80:	212a3f84 	addi	r4,r4,-22274
40010e84:	d9003515 	stw	r4,212(sp)
40010e88:	003b7606 	br	4000fc64 <__alt_data_end+0xc000fc64>
40010e8c:	d8802917 	ldw	r2,164(sp)
40010e90:	00c00184 	movi	r3,6
40010e94:	1880012e 	bgeu	r3,r2,40010e9c <___vfprintf_internal_r+0x1ca0>
40010e98:	1805883a 	mov	r2,r3
40010e9c:	d8802e15 	stw	r2,184(sp)
40010ea0:	1000ef16 	blt	r2,zero,40011260 <___vfprintf_internal_r+0x2064>
40010ea4:	041000b4 	movhi	r16,16386
40010ea8:	d8802a15 	stw	r2,168(sp)
40010eac:	dcc02d15 	stw	r19,180(sp)
40010eb0:	d8002915 	stw	zero,164(sp)
40010eb4:	d8003215 	stw	zero,200(sp)
40010eb8:	842a3904 	addi	r16,r16,-22300
40010ebc:	0039883a 	mov	fp,zero
40010ec0:	003aa206 	br	4000f94c <__alt_data_end+0xc000f94c>
40010ec4:	0021883a 	mov	r16,zero
40010ec8:	003e0706 	br	400106e8 <__alt_data_end+0xc00106e8>
40010ecc:	d9002c17 	ldw	r4,176(sp)
40010ed0:	d9801e04 	addi	r6,sp,120
40010ed4:	b80b883a 	mov	r5,r23
40010ed8:	0015e900 	call	40015e90 <__sprint_r>
40010edc:	1039c91e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
40010ee0:	d8802617 	ldw	r2,152(sp)
40010ee4:	d9403317 	ldw	r5,204(sp)
40010ee8:	d8c02017 	ldw	r3,128(sp)
40010eec:	da000404 	addi	r8,sp,16
40010ef0:	2885c83a 	sub	r2,r5,r2
40010ef4:	003dfb06 	br	400106e4 <__alt_data_end+0xc00106e4>
40010ef8:	9080004c 	andi	r2,r18,1
40010efc:	103e8f1e 	bne	r2,zero,4001093c <__alt_data_end+0xc001093c>
40010f00:	d8802117 	ldw	r2,132(sp)
40010f04:	003e9e06 	br	40010980 <__alt_data_end+0xc0010980>
40010f08:	1025883a 	mov	r18,r2
40010f0c:	0039883a 	mov	fp,zero
40010f10:	00800084 	movi	r2,2
40010f14:	003fd306 	br	40010e64 <__alt_data_end+0xc0010e64>
40010f18:	07000b44 	movi	fp,45
40010f1c:	df002785 	stb	fp,158(sp)
40010f20:	003a4006 	br	4000f824 <__alt_data_end+0xc000f824>
40010f24:	00c00b44 	movi	r3,45
40010f28:	d8c02785 	stb	r3,158(sp)
40010f2c:	d8802a15 	stw	r2,168(sp)
40010f30:	dc802b17 	ldw	r18,172(sp)
40010f34:	d8002915 	stw	zero,164(sp)
40010f38:	07000b44 	movi	fp,45
40010f3c:	003a8006 	br	4000f940 <__alt_data_end+0xc000f940>
40010f40:	041000b4 	movhi	r16,16386
40010f44:	842a2e04 	addi	r16,r16,-22344
40010f48:	003f4706 	br	40010c68 <__alt_data_end+0xc0010c68>
40010f4c:	d8c02d17 	ldw	r3,180(sp)
40010f50:	d9002f17 	ldw	r4,188(sp)
40010f54:	18800017 	ldw	r2,0(r3)
40010f58:	18c00104 	addi	r3,r3,4
40010f5c:	d8c02d15 	stw	r3,180(sp)
40010f60:	11000015 	stw	r4,0(r2)
40010f64:	0038dd06 	br	4000f2dc <__alt_data_end+0xc000f2dc>
40010f68:	dd802617 	ldw	r22,152(sp)
40010f6c:	00bfff44 	movi	r2,-3
40010f70:	b0801c16 	blt	r22,r2,40010fe4 <___vfprintf_internal_r+0x1de8>
40010f74:	d9402917 	ldw	r5,164(sp)
40010f78:	2d801a16 	blt	r5,r22,40010fe4 <___vfprintf_internal_r+0x1de8>
40010f7c:	dd803215 	stw	r22,200(sp)
40010f80:	003e8906 	br	400109a8 <__alt_data_end+0xc00109a8>
40010f84:	011000b4 	movhi	r4,16386
40010f88:	212a3b84 	addi	r4,r4,-22290
40010f8c:	d9002b15 	stw	r4,172(sp)
40010f90:	003c9106 	br	400101d8 <__alt_data_end+0xc00101d8>
40010f94:	e005883a 	mov	r2,fp
40010f98:	003e7906 	br	40010980 <__alt_data_end+0xc0010980>
40010f9c:	d9402917 	ldw	r5,164(sp)
40010fa0:	df002783 	ldbu	fp,158(sp)
40010fa4:	dcc02d15 	stw	r19,180(sp)
40010fa8:	d9402a15 	stw	r5,168(sp)
40010fac:	d9402e15 	stw	r5,184(sp)
40010fb0:	d8002915 	stw	zero,164(sp)
40010fb4:	d8003215 	stw	zero,200(sp)
40010fb8:	003a5d06 	br	4000f930 <__alt_data_end+0xc000f930>
40010fbc:	9080004c 	andi	r2,r18,1
40010fc0:	0039883a 	mov	fp,zero
40010fc4:	10000426 	beq	r2,zero,40010fd8 <___vfprintf_internal_r+0x1ddc>
40010fc8:	00800c04 	movi	r2,48
40010fcc:	dc001dc4 	addi	r16,sp,119
40010fd0:	d8801dc5 	stb	r2,119(sp)
40010fd4:	003b8006 	br	4000fdd8 <__alt_data_end+0xc000fdd8>
40010fd8:	d8002e15 	stw	zero,184(sp)
40010fdc:	dc001e04 	addi	r16,sp,120
40010fe0:	003a4d06 	br	4000f918 <__alt_data_end+0xc000f918>
40010fe4:	8c7fff84 	addi	r17,r17,-2
40010fe8:	b5bfffc4 	addi	r22,r22,-1
40010fec:	dd802615 	stw	r22,152(sp)
40010ff0:	dc4022c5 	stb	r17,139(sp)
40010ff4:	b000bf16 	blt	r22,zero,400112f4 <___vfprintf_internal_r+0x20f8>
40010ff8:	00800ac4 	movi	r2,43
40010ffc:	d8802305 	stb	r2,140(sp)
40011000:	00800244 	movi	r2,9
40011004:	15807016 	blt	r2,r22,400111c8 <___vfprintf_internal_r+0x1fcc>
40011008:	00800c04 	movi	r2,48
4001100c:	b5800c04 	addi	r22,r22,48
40011010:	d8802345 	stb	r2,141(sp)
40011014:	dd802385 	stb	r22,142(sp)
40011018:	d88023c4 	addi	r2,sp,143
4001101c:	df0022c4 	addi	fp,sp,139
40011020:	d8c03317 	ldw	r3,204(sp)
40011024:	1739c83a 	sub	fp,r2,fp
40011028:	d9003317 	ldw	r4,204(sp)
4001102c:	e0c7883a 	add	r3,fp,r3
40011030:	df003a15 	stw	fp,232(sp)
40011034:	d8c02e15 	stw	r3,184(sp)
40011038:	00800044 	movi	r2,1
4001103c:	1100b30e 	bge	r2,r4,4001130c <___vfprintf_internal_r+0x2110>
40011040:	d8c02e17 	ldw	r3,184(sp)
40011044:	18c00044 	addi	r3,r3,1
40011048:	d8c02e15 	stw	r3,184(sp)
4001104c:	1805883a 	mov	r2,r3
40011050:	1800ac16 	blt	r3,zero,40011304 <___vfprintf_internal_r+0x2108>
40011054:	d8003215 	stw	zero,200(sp)
40011058:	003e5d06 	br	400109d0 <__alt_data_end+0xc00109d0>
4001105c:	d9002c17 	ldw	r4,176(sp)
40011060:	d9801e04 	addi	r6,sp,120
40011064:	b80b883a 	mov	r5,r23
40011068:	0015e900 	call	40015e90 <__sprint_r>
4001106c:	1039651e 	bne	r2,zero,4000f604 <__alt_data_end+0xc000f604>
40011070:	dc402617 	ldw	r17,152(sp)
40011074:	d8c02017 	ldw	r3,128(sp)
40011078:	d8801f17 	ldw	r2,124(sp)
4001107c:	da000404 	addi	r8,sp,16
40011080:	003ed606 	br	40010bdc <__alt_data_end+0xc0010bdc>
40011084:	582b883a 	mov	r21,r11
40011088:	d8002915 	stw	zero,164(sp)
4001108c:	0038bd06 	br	4000f384 <__alt_data_end+0xc000f384>
40011090:	d8802917 	ldw	r2,164(sp)
40011094:	103e071e 	bne	r2,zero,400108b4 <__alt_data_end+0xc00108b4>
40011098:	dc002915 	stw	r16,164(sp)
4001109c:	003e0506 	br	400108b4 <__alt_data_end+0xc00108b4>
400110a0:	d9002917 	ldw	r4,164(sp)
400110a4:	20c00044 	addi	r3,r4,1
400110a8:	003e0f06 	br	400108e8 <__alt_data_end+0xc00108e8>
400110ac:	01400184 	movi	r5,6
400110b0:	d9402915 	stw	r5,164(sp)
400110b4:	003dff06 	br	400108b4 <__alt_data_end+0xc00108b4>
400110b8:	d8802104 	addi	r2,sp,132
400110bc:	d8800315 	stw	r2,12(sp)
400110c0:	d8802504 	addi	r2,sp,148
400110c4:	d8800215 	stw	r2,8(sp)
400110c8:	d8802604 	addi	r2,sp,152
400110cc:	d8800115 	stw	r2,4(sp)
400110d0:	d8802917 	ldw	r2,164(sp)
400110d4:	d9403617 	ldw	r5,216(sp)
400110d8:	d9002c17 	ldw	r4,176(sp)
400110dc:	d8800015 	stw	r2,0(sp)
400110e0:	01c000c4 	movi	r7,3
400110e4:	980d883a 	mov	r6,r19
400110e8:	da003d15 	stw	r8,244(sp)
400110ec:	00118200 	call	40011820 <_dtoa_r>
400110f0:	d8c02917 	ldw	r3,164(sp)
400110f4:	da003d17 	ldw	r8,244(sp)
400110f8:	1021883a 	mov	r16,r2
400110fc:	10f9883a 	add	fp,r2,r3
40011100:	81000007 	ldb	r4,0(r16)
40011104:	00800c04 	movi	r2,48
40011108:	20805e26 	beq	r4,r2,40011284 <___vfprintf_internal_r+0x2088>
4001110c:	d8c02617 	ldw	r3,152(sp)
40011110:	e0f9883a 	add	fp,fp,r3
40011114:	003e0a06 	br	40010940 <__alt_data_end+0xc0010940>
40011118:	00c00b44 	movi	r3,45
4001111c:	24e0003c 	xorhi	r19,r4,32768
40011120:	d8c02a05 	stb	r3,168(sp)
40011124:	003de906 	br	400108cc <__alt_data_end+0xc00108cc>
40011128:	d8c03217 	ldw	r3,200(sp)
4001112c:	00c07a0e 	bge	zero,r3,40011318 <___vfprintf_internal_r+0x211c>
40011130:	00800044 	movi	r2,1
40011134:	d9003317 	ldw	r4,204(sp)
40011138:	1105883a 	add	r2,r2,r4
4001113c:	d8802e15 	stw	r2,184(sp)
40011140:	10004e16 	blt	r2,zero,4001127c <___vfprintf_internal_r+0x2080>
40011144:	044019c4 	movi	r17,103
40011148:	003e2106 	br	400109d0 <__alt_data_end+0xc00109d0>
4001114c:	d9002917 	ldw	r4,164(sp)
40011150:	d8802104 	addi	r2,sp,132
40011154:	d8800315 	stw	r2,12(sp)
40011158:	d9000015 	stw	r4,0(sp)
4001115c:	d8802504 	addi	r2,sp,148
40011160:	d9403617 	ldw	r5,216(sp)
40011164:	d9002c17 	ldw	r4,176(sp)
40011168:	d8800215 	stw	r2,8(sp)
4001116c:	d8802604 	addi	r2,sp,152
40011170:	d8800115 	stw	r2,4(sp)
40011174:	01c000c4 	movi	r7,3
40011178:	980d883a 	mov	r6,r19
4001117c:	da003d15 	stw	r8,244(sp)
40011180:	00118200 	call	40011820 <_dtoa_r>
40011184:	d8c02917 	ldw	r3,164(sp)
40011188:	da003d17 	ldw	r8,244(sp)
4001118c:	1021883a 	mov	r16,r2
40011190:	00801184 	movi	r2,70
40011194:	80f9883a 	add	fp,r16,r3
40011198:	88bfd926 	beq	r17,r2,40011100 <__alt_data_end+0xc0011100>
4001119c:	003de806 	br	40010940 <__alt_data_end+0xc0010940>
400111a0:	d9002917 	ldw	r4,164(sp)
400111a4:	00c04d0e 	bge	zero,r3,400112dc <___vfprintf_internal_r+0x20e0>
400111a8:	2000441e 	bne	r4,zero,400112bc <___vfprintf_internal_r+0x20c0>
400111ac:	9480004c 	andi	r18,r18,1
400111b0:	9000421e 	bne	r18,zero,400112bc <___vfprintf_internal_r+0x20c0>
400111b4:	1805883a 	mov	r2,r3
400111b8:	18007016 	blt	r3,zero,4001137c <___vfprintf_internal_r+0x2180>
400111bc:	d8c03217 	ldw	r3,200(sp)
400111c0:	d8c02e15 	stw	r3,184(sp)
400111c4:	003e0206 	br	400109d0 <__alt_data_end+0xc00109d0>
400111c8:	df0022c4 	addi	fp,sp,139
400111cc:	dc002915 	stw	r16,164(sp)
400111d0:	4027883a 	mov	r19,r8
400111d4:	e021883a 	mov	r16,fp
400111d8:	b009883a 	mov	r4,r22
400111dc:	01400284 	movi	r5,10
400111e0:	000c8d00 	call	4000c8d0 <__modsi3>
400111e4:	10800c04 	addi	r2,r2,48
400111e8:	843fffc4 	addi	r16,r16,-1
400111ec:	b009883a 	mov	r4,r22
400111f0:	01400284 	movi	r5,10
400111f4:	80800005 	stb	r2,0(r16)
400111f8:	000c84c0 	call	4000c84c <__divsi3>
400111fc:	102d883a 	mov	r22,r2
40011200:	00800244 	movi	r2,9
40011204:	15bff416 	blt	r2,r22,400111d8 <__alt_data_end+0xc00111d8>
40011208:	9811883a 	mov	r8,r19
4001120c:	b0800c04 	addi	r2,r22,48
40011210:	8027883a 	mov	r19,r16
40011214:	997fffc4 	addi	r5,r19,-1
40011218:	98bfffc5 	stb	r2,-1(r19)
4001121c:	dc002917 	ldw	r16,164(sp)
40011220:	2f006a2e 	bgeu	r5,fp,400113cc <___vfprintf_internal_r+0x21d0>
40011224:	d9c02384 	addi	r7,sp,142
40011228:	3ccfc83a 	sub	r7,r7,r19
4001122c:	d9002344 	addi	r4,sp,141
40011230:	e1cf883a 	add	r7,fp,r7
40011234:	00000106 	br	4001123c <___vfprintf_internal_r+0x2040>
40011238:	28800003 	ldbu	r2,0(r5)
4001123c:	20800005 	stb	r2,0(r4)
40011240:	21000044 	addi	r4,r4,1
40011244:	29400044 	addi	r5,r5,1
40011248:	393ffb1e 	bne	r7,r4,40011238 <__alt_data_end+0xc0011238>
4001124c:	d8802304 	addi	r2,sp,140
40011250:	14c5c83a 	sub	r2,r2,r19
40011254:	d8c02344 	addi	r3,sp,141
40011258:	1885883a 	add	r2,r3,r2
4001125c:	003f7006 	br	40011020 <__alt_data_end+0xc0011020>
40011260:	0005883a 	mov	r2,zero
40011264:	003f0f06 	br	40010ea4 <__alt_data_end+0xc0010ea4>
40011268:	d8c03217 	ldw	r3,200(sp)
4001126c:	18c00044 	addi	r3,r3,1
40011270:	d8c02e15 	stw	r3,184(sp)
40011274:	1805883a 	mov	r2,r3
40011278:	183fb20e 	bge	r3,zero,40011144 <__alt_data_end+0xc0011144>
4001127c:	0005883a 	mov	r2,zero
40011280:	003fb006 	br	40011144 <__alt_data_end+0xc0011144>
40011284:	d9003617 	ldw	r4,216(sp)
40011288:	000d883a 	mov	r6,zero
4001128c:	000f883a 	mov	r7,zero
40011290:	980b883a 	mov	r5,r19
40011294:	d8c03c15 	stw	r3,240(sp)
40011298:	da003d15 	stw	r8,244(sp)
4001129c:	00186fc0 	call	400186fc <__eqdf2>
400112a0:	d8c03c17 	ldw	r3,240(sp)
400112a4:	da003d17 	ldw	r8,244(sp)
400112a8:	103f9826 	beq	r2,zero,4001110c <__alt_data_end+0xc001110c>
400112ac:	00800044 	movi	r2,1
400112b0:	10c7c83a 	sub	r3,r2,r3
400112b4:	d8c02615 	stw	r3,152(sp)
400112b8:	003f9506 	br	40011110 <__alt_data_end+0xc0011110>
400112bc:	d9002917 	ldw	r4,164(sp)
400112c0:	d8c03217 	ldw	r3,200(sp)
400112c4:	20800044 	addi	r2,r4,1
400112c8:	1885883a 	add	r2,r3,r2
400112cc:	d8802e15 	stw	r2,184(sp)
400112d0:	103dbf0e 	bge	r2,zero,400109d0 <__alt_data_end+0xc00109d0>
400112d4:	0005883a 	mov	r2,zero
400112d8:	003dbd06 	br	400109d0 <__alt_data_end+0xc00109d0>
400112dc:	2000211e 	bne	r4,zero,40011364 <___vfprintf_internal_r+0x2168>
400112e0:	9480004c 	andi	r18,r18,1
400112e4:	90001f1e 	bne	r18,zero,40011364 <___vfprintf_internal_r+0x2168>
400112e8:	00800044 	movi	r2,1
400112ec:	d8802e15 	stw	r2,184(sp)
400112f0:	003db706 	br	400109d0 <__alt_data_end+0xc00109d0>
400112f4:	00800b44 	movi	r2,45
400112f8:	05adc83a 	sub	r22,zero,r22
400112fc:	d8802305 	stb	r2,140(sp)
40011300:	003f3f06 	br	40011000 <__alt_data_end+0xc0011000>
40011304:	0005883a 	mov	r2,zero
40011308:	003f5206 	br	40011054 <__alt_data_end+0xc0011054>
4001130c:	90a4703a 	and	r18,r18,r2
40011310:	903f4e26 	beq	r18,zero,4001104c <__alt_data_end+0xc001104c>
40011314:	003f4a06 	br	40011040 <__alt_data_end+0xc0011040>
40011318:	00800084 	movi	r2,2
4001131c:	10c5c83a 	sub	r2,r2,r3
40011320:	003f8406 	br	40011134 <__alt_data_end+0xc0011134>
40011324:	d8802d17 	ldw	r2,180(sp)
40011328:	d9002d17 	ldw	r4,180(sp)
4001132c:	ac400043 	ldbu	r17,1(r21)
40011330:	10800017 	ldw	r2,0(r2)
40011334:	582b883a 	mov	r21,r11
40011338:	d8802915 	stw	r2,164(sp)
4001133c:	20800104 	addi	r2,r4,4
40011340:	d9002917 	ldw	r4,164(sp)
40011344:	d8802d15 	stw	r2,180(sp)
40011348:	203e7a0e 	bge	r4,zero,40010d34 <__alt_data_end+0xc0010d34>
4001134c:	8c403fcc 	andi	r17,r17,255
40011350:	00bfffc4 	movi	r2,-1
40011354:	8c40201c 	xori	r17,r17,128
40011358:	d8802915 	stw	r2,164(sp)
4001135c:	8c7fe004 	addi	r17,r17,-128
40011360:	00380706 	br	4000f380 <__alt_data_end+0xc000f380>
40011364:	d8c02917 	ldw	r3,164(sp)
40011368:	18c00084 	addi	r3,r3,2
4001136c:	d8c02e15 	stw	r3,184(sp)
40011370:	1805883a 	mov	r2,r3
40011374:	183d960e 	bge	r3,zero,400109d0 <__alt_data_end+0xc00109d0>
40011378:	003fd606 	br	400112d4 <__alt_data_end+0xc00112d4>
4001137c:	0005883a 	mov	r2,zero
40011380:	003f8e06 	br	400111bc <__alt_data_end+0xc00111bc>
40011384:	9080004c 	andi	r2,r18,1
40011388:	103f811e 	bne	r2,zero,40011190 <__alt_data_end+0xc0011190>
4001138c:	d8802117 	ldw	r2,132(sp)
40011390:	1405c83a 	sub	r2,r2,r16
40011394:	d8803315 	stw	r2,204(sp)
40011398:	b47ef326 	beq	r22,r17,40010f68 <__alt_data_end+0xc0010f68>
4001139c:	dd802617 	ldw	r22,152(sp)
400113a0:	003f1106 	br	40010fe8 <__alt_data_end+0xc0010fe8>
400113a4:	d9c02785 	stb	r7,158(sp)
400113a8:	00390406 	br	4000f7bc <__alt_data_end+0xc000f7bc>
400113ac:	d9c02785 	stb	r7,158(sp)
400113b0:	0038d306 	br	4000f700 <__alt_data_end+0xc000f700>
400113b4:	d9c02785 	stb	r7,158(sp)
400113b8:	003a6106 	br	4000fd40 <__alt_data_end+0xc000fd40>
400113bc:	d9c02785 	stb	r7,158(sp)
400113c0:	003af806 	br	4000ffa4 <__alt_data_end+0xc000ffa4>
400113c4:	0005883a 	mov	r2,zero
400113c8:	003d7e06 	br	400109c4 <__alt_data_end+0xc00109c4>
400113cc:	d8802344 	addi	r2,sp,141
400113d0:	003f1306 	br	40011020 <__alt_data_end+0xc0011020>
400113d4:	d9c02785 	stb	r7,158(sp)
400113d8:	00392306 	br	4000f868 <__alt_data_end+0xc000f868>
400113dc:	d9c02785 	stb	r7,158(sp)
400113e0:	003aa906 	br	4000fe88 <__alt_data_end+0xc000fe88>
400113e4:	d9c02785 	stb	r7,158(sp)
400113e8:	003a3d06 	br	4000fce0 <__alt_data_end+0xc000fce0>
400113ec:	d9c02785 	stb	r7,158(sp)
400113f0:	003aca06 	br	4000ff1c <__alt_data_end+0xc000ff1c>

400113f4 <__vfprintf_internal>:
400113f4:	009000b4 	movhi	r2,16386
400113f8:	10ad4704 	addi	r2,r2,-19172
400113fc:	300f883a 	mov	r7,r6
40011400:	280d883a 	mov	r6,r5
40011404:	200b883a 	mov	r5,r4
40011408:	11000017 	ldw	r4,0(r2)
4001140c:	000f1fc1 	jmpi	4000f1fc <___vfprintf_internal_r>

40011410 <__sbprintf>:
40011410:	2880030b 	ldhu	r2,12(r5)
40011414:	2ac01917 	ldw	r11,100(r5)
40011418:	2a80038b 	ldhu	r10,14(r5)
4001141c:	2a400717 	ldw	r9,28(r5)
40011420:	2a000917 	ldw	r8,36(r5)
40011424:	defee204 	addi	sp,sp,-1144
40011428:	00c10004 	movi	r3,1024
4001142c:	dc011a15 	stw	r16,1128(sp)
40011430:	10bfff4c 	andi	r2,r2,65533
40011434:	2821883a 	mov	r16,r5
40011438:	d8cb883a 	add	r5,sp,r3
4001143c:	dc811c15 	stw	r18,1136(sp)
40011440:	dc411b15 	stw	r17,1132(sp)
40011444:	dfc11d15 	stw	ra,1140(sp)
40011448:	2025883a 	mov	r18,r4
4001144c:	d881030d 	sth	r2,1036(sp)
40011450:	dac11915 	stw	r11,1124(sp)
40011454:	da81038d 	sth	r10,1038(sp)
40011458:	da410715 	stw	r9,1052(sp)
4001145c:	da010915 	stw	r8,1060(sp)
40011460:	dec10015 	stw	sp,1024(sp)
40011464:	dec10415 	stw	sp,1040(sp)
40011468:	d8c10215 	stw	r3,1032(sp)
4001146c:	d8c10515 	stw	r3,1044(sp)
40011470:	d8010615 	stw	zero,1048(sp)
40011474:	000f1fc0 	call	4000f1fc <___vfprintf_internal_r>
40011478:	1023883a 	mov	r17,r2
4001147c:	10000416 	blt	r2,zero,40011490 <__sbprintf+0x80>
40011480:	d9410004 	addi	r5,sp,1024
40011484:	9009883a 	mov	r4,r18
40011488:	00130c40 	call	400130c4 <_fflush_r>
4001148c:	10000d1e 	bne	r2,zero,400114c4 <__sbprintf+0xb4>
40011490:	d881030b 	ldhu	r2,1036(sp)
40011494:	1080100c 	andi	r2,r2,64
40011498:	10000326 	beq	r2,zero,400114a8 <__sbprintf+0x98>
4001149c:	8080030b 	ldhu	r2,12(r16)
400114a0:	10801014 	ori	r2,r2,64
400114a4:	8080030d 	sth	r2,12(r16)
400114a8:	8805883a 	mov	r2,r17
400114ac:	dfc11d17 	ldw	ra,1140(sp)
400114b0:	dc811c17 	ldw	r18,1136(sp)
400114b4:	dc411b17 	ldw	r17,1132(sp)
400114b8:	dc011a17 	ldw	r16,1128(sp)
400114bc:	dec11e04 	addi	sp,sp,1144
400114c0:	f800283a 	ret
400114c4:	047fffc4 	movi	r17,-1
400114c8:	003ff106 	br	40011490 <__alt_data_end+0xc0011490>

400114cc <__swsetup_r>:
400114cc:	009000b4 	movhi	r2,16386
400114d0:	defffd04 	addi	sp,sp,-12
400114d4:	10ad4704 	addi	r2,r2,-19172
400114d8:	dc400115 	stw	r17,4(sp)
400114dc:	2023883a 	mov	r17,r4
400114e0:	11000017 	ldw	r4,0(r2)
400114e4:	dc000015 	stw	r16,0(sp)
400114e8:	dfc00215 	stw	ra,8(sp)
400114ec:	2821883a 	mov	r16,r5
400114f0:	20000226 	beq	r4,zero,400114fc <__swsetup_r+0x30>
400114f4:	20800e17 	ldw	r2,56(r4)
400114f8:	10003126 	beq	r2,zero,400115c0 <__swsetup_r+0xf4>
400114fc:	8080030b 	ldhu	r2,12(r16)
40011500:	10c0020c 	andi	r3,r2,8
40011504:	1009883a 	mov	r4,r2
40011508:	18000f26 	beq	r3,zero,40011548 <__swsetup_r+0x7c>
4001150c:	80c00417 	ldw	r3,16(r16)
40011510:	18001526 	beq	r3,zero,40011568 <__swsetup_r+0x9c>
40011514:	1100004c 	andi	r4,r2,1
40011518:	20001c1e 	bne	r4,zero,4001158c <__swsetup_r+0xc0>
4001151c:	1080008c 	andi	r2,r2,2
40011520:	1000291e 	bne	r2,zero,400115c8 <__swsetup_r+0xfc>
40011524:	80800517 	ldw	r2,20(r16)
40011528:	80800215 	stw	r2,8(r16)
4001152c:	18001c26 	beq	r3,zero,400115a0 <__swsetup_r+0xd4>
40011530:	0005883a 	mov	r2,zero
40011534:	dfc00217 	ldw	ra,8(sp)
40011538:	dc400117 	ldw	r17,4(sp)
4001153c:	dc000017 	ldw	r16,0(sp)
40011540:	dec00304 	addi	sp,sp,12
40011544:	f800283a 	ret
40011548:	2080040c 	andi	r2,r4,16
4001154c:	10002e26 	beq	r2,zero,40011608 <__swsetup_r+0x13c>
40011550:	2080010c 	andi	r2,r4,4
40011554:	10001e1e 	bne	r2,zero,400115d0 <__swsetup_r+0x104>
40011558:	80c00417 	ldw	r3,16(r16)
4001155c:	20800214 	ori	r2,r4,8
40011560:	8080030d 	sth	r2,12(r16)
40011564:	183feb1e 	bne	r3,zero,40011514 <__alt_data_end+0xc0011514>
40011568:	1100a00c 	andi	r4,r2,640
4001156c:	01408004 	movi	r5,512
40011570:	217fe826 	beq	r4,r5,40011514 <__alt_data_end+0xc0011514>
40011574:	800b883a 	mov	r5,r16
40011578:	8809883a 	mov	r4,r17
4001157c:	00140440 	call	40014044 <__smakebuf_r>
40011580:	8080030b 	ldhu	r2,12(r16)
40011584:	80c00417 	ldw	r3,16(r16)
40011588:	003fe206 	br	40011514 <__alt_data_end+0xc0011514>
4001158c:	80800517 	ldw	r2,20(r16)
40011590:	80000215 	stw	zero,8(r16)
40011594:	0085c83a 	sub	r2,zero,r2
40011598:	80800615 	stw	r2,24(r16)
4001159c:	183fe41e 	bne	r3,zero,40011530 <__alt_data_end+0xc0011530>
400115a0:	80c0030b 	ldhu	r3,12(r16)
400115a4:	0005883a 	mov	r2,zero
400115a8:	1900200c 	andi	r4,r3,128
400115ac:	203fe126 	beq	r4,zero,40011534 <__alt_data_end+0xc0011534>
400115b0:	18c01014 	ori	r3,r3,64
400115b4:	80c0030d 	sth	r3,12(r16)
400115b8:	00bfffc4 	movi	r2,-1
400115bc:	003fdd06 	br	40011534 <__alt_data_end+0xc0011534>
400115c0:	00134a00 	call	400134a0 <__sinit>
400115c4:	003fcd06 	br	400114fc <__alt_data_end+0xc00114fc>
400115c8:	0005883a 	mov	r2,zero
400115cc:	003fd606 	br	40011528 <__alt_data_end+0xc0011528>
400115d0:	81400c17 	ldw	r5,48(r16)
400115d4:	28000626 	beq	r5,zero,400115f0 <__swsetup_r+0x124>
400115d8:	80801004 	addi	r2,r16,64
400115dc:	28800326 	beq	r5,r2,400115ec <__swsetup_r+0x120>
400115e0:	8809883a 	mov	r4,r17
400115e4:	00136140 	call	40013614 <_free_r>
400115e8:	8100030b 	ldhu	r4,12(r16)
400115ec:	80000c15 	stw	zero,48(r16)
400115f0:	80c00417 	ldw	r3,16(r16)
400115f4:	00bff6c4 	movi	r2,-37
400115f8:	1108703a 	and	r4,r2,r4
400115fc:	80000115 	stw	zero,4(r16)
40011600:	80c00015 	stw	r3,0(r16)
40011604:	003fd506 	br	4001155c <__alt_data_end+0xc001155c>
40011608:	00800244 	movi	r2,9
4001160c:	88800015 	stw	r2,0(r17)
40011610:	20801014 	ori	r2,r4,64
40011614:	8080030d 	sth	r2,12(r16)
40011618:	00bfffc4 	movi	r2,-1
4001161c:	003fc506 	br	40011534 <__alt_data_end+0xc0011534>

40011620 <quorem>:
40011620:	defff704 	addi	sp,sp,-36
40011624:	dc800215 	stw	r18,8(sp)
40011628:	20800417 	ldw	r2,16(r4)
4001162c:	2c800417 	ldw	r18,16(r5)
40011630:	dfc00815 	stw	ra,32(sp)
40011634:	ddc00715 	stw	r23,28(sp)
40011638:	dd800615 	stw	r22,24(sp)
4001163c:	dd400515 	stw	r21,20(sp)
40011640:	dd000415 	stw	r20,16(sp)
40011644:	dcc00315 	stw	r19,12(sp)
40011648:	dc400115 	stw	r17,4(sp)
4001164c:	dc000015 	stw	r16,0(sp)
40011650:	14807116 	blt	r2,r18,40011818 <quorem+0x1f8>
40011654:	94bfffc4 	addi	r18,r18,-1
40011658:	94ad883a 	add	r22,r18,r18
4001165c:	b5ad883a 	add	r22,r22,r22
40011660:	2c400504 	addi	r17,r5,20
40011664:	8da9883a 	add	r20,r17,r22
40011668:	25400504 	addi	r21,r4,20
4001166c:	282f883a 	mov	r23,r5
40011670:	adad883a 	add	r22,r21,r22
40011674:	a1400017 	ldw	r5,0(r20)
40011678:	2021883a 	mov	r16,r4
4001167c:	b1000017 	ldw	r4,0(r22)
40011680:	29400044 	addi	r5,r5,1
40011684:	000c9440 	call	4000c944 <__udivsi3>
40011688:	1027883a 	mov	r19,r2
4001168c:	10002c26 	beq	r2,zero,40011740 <quorem+0x120>
40011690:	a813883a 	mov	r9,r21
40011694:	880b883a 	mov	r5,r17
40011698:	0009883a 	mov	r4,zero
4001169c:	000d883a 	mov	r6,zero
400116a0:	2a000017 	ldw	r8,0(r5)
400116a4:	49c00017 	ldw	r7,0(r9)
400116a8:	29400104 	addi	r5,r5,4
400116ac:	40bfffcc 	andi	r2,r8,65535
400116b0:	14c5383a 	mul	r2,r2,r19
400116b4:	4010d43a 	srli	r8,r8,16
400116b8:	38ffffcc 	andi	r3,r7,65535
400116bc:	1105883a 	add	r2,r2,r4
400116c0:	1008d43a 	srli	r4,r2,16
400116c4:	44d1383a 	mul	r8,r8,r19
400116c8:	198d883a 	add	r6,r3,r6
400116cc:	10ffffcc 	andi	r3,r2,65535
400116d0:	30c7c83a 	sub	r3,r6,r3
400116d4:	380ed43a 	srli	r7,r7,16
400116d8:	4105883a 	add	r2,r8,r4
400116dc:	180dd43a 	srai	r6,r3,16
400116e0:	113fffcc 	andi	r4,r2,65535
400116e4:	390fc83a 	sub	r7,r7,r4
400116e8:	398d883a 	add	r6,r7,r6
400116ec:	300e943a 	slli	r7,r6,16
400116f0:	18ffffcc 	andi	r3,r3,65535
400116f4:	1008d43a 	srli	r4,r2,16
400116f8:	38ceb03a 	or	r7,r7,r3
400116fc:	49c00015 	stw	r7,0(r9)
40011700:	300dd43a 	srai	r6,r6,16
40011704:	4a400104 	addi	r9,r9,4
40011708:	a17fe52e 	bgeu	r20,r5,400116a0 <__alt_data_end+0xc00116a0>
4001170c:	b0800017 	ldw	r2,0(r22)
40011710:	10000b1e 	bne	r2,zero,40011740 <quorem+0x120>
40011714:	b0bfff04 	addi	r2,r22,-4
40011718:	a880082e 	bgeu	r21,r2,4001173c <quorem+0x11c>
4001171c:	b0ffff17 	ldw	r3,-4(r22)
40011720:	18000326 	beq	r3,zero,40011730 <quorem+0x110>
40011724:	00000506 	br	4001173c <quorem+0x11c>
40011728:	10c00017 	ldw	r3,0(r2)
4001172c:	1800031e 	bne	r3,zero,4001173c <quorem+0x11c>
40011730:	10bfff04 	addi	r2,r2,-4
40011734:	94bfffc4 	addi	r18,r18,-1
40011738:	a8bffb36 	bltu	r21,r2,40011728 <__alt_data_end+0xc0011728>
4001173c:	84800415 	stw	r18,16(r16)
40011740:	b80b883a 	mov	r5,r23
40011744:	8009883a 	mov	r4,r16
40011748:	0014d080 	call	40014d08 <__mcmp>
4001174c:	10002616 	blt	r2,zero,400117e8 <quorem+0x1c8>
40011750:	9cc00044 	addi	r19,r19,1
40011754:	a805883a 	mov	r2,r21
40011758:	000b883a 	mov	r5,zero
4001175c:	11000017 	ldw	r4,0(r2)
40011760:	89800017 	ldw	r6,0(r17)
40011764:	10800104 	addi	r2,r2,4
40011768:	20ffffcc 	andi	r3,r4,65535
4001176c:	194b883a 	add	r5,r3,r5
40011770:	30ffffcc 	andi	r3,r6,65535
40011774:	28c7c83a 	sub	r3,r5,r3
40011778:	300cd43a 	srli	r6,r6,16
4001177c:	2008d43a 	srli	r4,r4,16
40011780:	180bd43a 	srai	r5,r3,16
40011784:	18ffffcc 	andi	r3,r3,65535
40011788:	2189c83a 	sub	r4,r4,r6
4001178c:	2149883a 	add	r4,r4,r5
40011790:	200c943a 	slli	r6,r4,16
40011794:	8c400104 	addi	r17,r17,4
40011798:	200bd43a 	srai	r5,r4,16
4001179c:	30c6b03a 	or	r3,r6,r3
400117a0:	10ffff15 	stw	r3,-4(r2)
400117a4:	a47fed2e 	bgeu	r20,r17,4001175c <__alt_data_end+0xc001175c>
400117a8:	9485883a 	add	r2,r18,r18
400117ac:	1085883a 	add	r2,r2,r2
400117b0:	a887883a 	add	r3,r21,r2
400117b4:	18800017 	ldw	r2,0(r3)
400117b8:	10000b1e 	bne	r2,zero,400117e8 <quorem+0x1c8>
400117bc:	18bfff04 	addi	r2,r3,-4
400117c0:	a880082e 	bgeu	r21,r2,400117e4 <quorem+0x1c4>
400117c4:	18ffff17 	ldw	r3,-4(r3)
400117c8:	18000326 	beq	r3,zero,400117d8 <quorem+0x1b8>
400117cc:	00000506 	br	400117e4 <quorem+0x1c4>
400117d0:	10c00017 	ldw	r3,0(r2)
400117d4:	1800031e 	bne	r3,zero,400117e4 <quorem+0x1c4>
400117d8:	10bfff04 	addi	r2,r2,-4
400117dc:	94bfffc4 	addi	r18,r18,-1
400117e0:	a8bffb36 	bltu	r21,r2,400117d0 <__alt_data_end+0xc00117d0>
400117e4:	84800415 	stw	r18,16(r16)
400117e8:	9805883a 	mov	r2,r19
400117ec:	dfc00817 	ldw	ra,32(sp)
400117f0:	ddc00717 	ldw	r23,28(sp)
400117f4:	dd800617 	ldw	r22,24(sp)
400117f8:	dd400517 	ldw	r21,20(sp)
400117fc:	dd000417 	ldw	r20,16(sp)
40011800:	dcc00317 	ldw	r19,12(sp)
40011804:	dc800217 	ldw	r18,8(sp)
40011808:	dc400117 	ldw	r17,4(sp)
4001180c:	dc000017 	ldw	r16,0(sp)
40011810:	dec00904 	addi	sp,sp,36
40011814:	f800283a 	ret
40011818:	0005883a 	mov	r2,zero
4001181c:	003ff306 	br	400117ec <__alt_data_end+0xc00117ec>

40011820 <_dtoa_r>:
40011820:	20801017 	ldw	r2,64(r4)
40011824:	deffde04 	addi	sp,sp,-136
40011828:	df002015 	stw	fp,128(sp)
4001182c:	dcc01b15 	stw	r19,108(sp)
40011830:	dc801a15 	stw	r18,104(sp)
40011834:	dc401915 	stw	r17,100(sp)
40011838:	dc001815 	stw	r16,96(sp)
4001183c:	dfc02115 	stw	ra,132(sp)
40011840:	ddc01f15 	stw	r23,124(sp)
40011844:	dd801e15 	stw	r22,120(sp)
40011848:	dd401d15 	stw	r21,116(sp)
4001184c:	dd001c15 	stw	r20,112(sp)
40011850:	d9c00315 	stw	r7,12(sp)
40011854:	2039883a 	mov	fp,r4
40011858:	3023883a 	mov	r17,r6
4001185c:	2825883a 	mov	r18,r5
40011860:	dc002417 	ldw	r16,144(sp)
40011864:	3027883a 	mov	r19,r6
40011868:	10000826 	beq	r2,zero,4001188c <_dtoa_r+0x6c>
4001186c:	21801117 	ldw	r6,68(r4)
40011870:	00c00044 	movi	r3,1
40011874:	100b883a 	mov	r5,r2
40011878:	1986983a 	sll	r3,r3,r6
4001187c:	11800115 	stw	r6,4(r2)
40011880:	10c00215 	stw	r3,8(r2)
40011884:	00144e80 	call	400144e8 <_Bfree>
40011888:	e0001015 	stw	zero,64(fp)
4001188c:	88002e16 	blt	r17,zero,40011948 <_dtoa_r+0x128>
40011890:	80000015 	stw	zero,0(r16)
40011894:	889ffc2c 	andhi	r2,r17,32752
40011898:	00dffc34 	movhi	r3,32752
4001189c:	10c01c26 	beq	r2,r3,40011910 <_dtoa_r+0xf0>
400118a0:	000d883a 	mov	r6,zero
400118a4:	000f883a 	mov	r7,zero
400118a8:	9009883a 	mov	r4,r18
400118ac:	980b883a 	mov	r5,r19
400118b0:	00186fc0 	call	400186fc <__eqdf2>
400118b4:	10002b1e 	bne	r2,zero,40011964 <_dtoa_r+0x144>
400118b8:	d9c02317 	ldw	r7,140(sp)
400118bc:	00800044 	movi	r2,1
400118c0:	38800015 	stw	r2,0(r7)
400118c4:	d8802517 	ldw	r2,148(sp)
400118c8:	10019e26 	beq	r2,zero,40011f44 <_dtoa_r+0x724>
400118cc:	d8c02517 	ldw	r3,148(sp)
400118d0:	009000b4 	movhi	r2,16386
400118d4:	10aa3b44 	addi	r2,r2,-22291
400118d8:	18800015 	stw	r2,0(r3)
400118dc:	10bfffc4 	addi	r2,r2,-1
400118e0:	dfc02117 	ldw	ra,132(sp)
400118e4:	df002017 	ldw	fp,128(sp)
400118e8:	ddc01f17 	ldw	r23,124(sp)
400118ec:	dd801e17 	ldw	r22,120(sp)
400118f0:	dd401d17 	ldw	r21,116(sp)
400118f4:	dd001c17 	ldw	r20,112(sp)
400118f8:	dcc01b17 	ldw	r19,108(sp)
400118fc:	dc801a17 	ldw	r18,104(sp)
40011900:	dc401917 	ldw	r17,100(sp)
40011904:	dc001817 	ldw	r16,96(sp)
40011908:	dec02204 	addi	sp,sp,136
4001190c:	f800283a 	ret
40011910:	d8c02317 	ldw	r3,140(sp)
40011914:	0089c3c4 	movi	r2,9999
40011918:	18800015 	stw	r2,0(r3)
4001191c:	90017726 	beq	r18,zero,40011efc <_dtoa_r+0x6dc>
40011920:	009000b4 	movhi	r2,16386
40011924:	10aa4704 	addi	r2,r2,-22244
40011928:	d9002517 	ldw	r4,148(sp)
4001192c:	203fec26 	beq	r4,zero,400118e0 <__alt_data_end+0xc00118e0>
40011930:	10c000c7 	ldb	r3,3(r2)
40011934:	1801781e 	bne	r3,zero,40011f18 <_dtoa_r+0x6f8>
40011938:	10c000c4 	addi	r3,r2,3
4001193c:	d9802517 	ldw	r6,148(sp)
40011940:	30c00015 	stw	r3,0(r6)
40011944:	003fe606 	br	400118e0 <__alt_data_end+0xc00118e0>
40011948:	04e00034 	movhi	r19,32768
4001194c:	9cffffc4 	addi	r19,r19,-1
40011950:	00800044 	movi	r2,1
40011954:	8ce6703a 	and	r19,r17,r19
40011958:	80800015 	stw	r2,0(r16)
4001195c:	9823883a 	mov	r17,r19
40011960:	003fcc06 	br	40011894 <__alt_data_end+0xc0011894>
40011964:	d8800204 	addi	r2,sp,8
40011968:	d8800015 	stw	r2,0(sp)
4001196c:	d9c00104 	addi	r7,sp,4
40011970:	900b883a 	mov	r5,r18
40011974:	980d883a 	mov	r6,r19
40011978:	e009883a 	mov	r4,fp
4001197c:	8820d53a 	srli	r16,r17,20
40011980:	00150d40 	call	400150d4 <__d2b>
40011984:	d8800915 	stw	r2,36(sp)
40011988:	8001651e 	bne	r16,zero,40011f20 <_dtoa_r+0x700>
4001198c:	dd800217 	ldw	r22,8(sp)
40011990:	dc000117 	ldw	r16,4(sp)
40011994:	00800804 	movi	r2,32
40011998:	b421883a 	add	r16,r22,r16
4001199c:	80c10c84 	addi	r3,r16,1074
400119a0:	10c2d10e 	bge	r2,r3,400124e8 <_dtoa_r+0xcc8>
400119a4:	00801004 	movi	r2,64
400119a8:	81010484 	addi	r4,r16,1042
400119ac:	10c7c83a 	sub	r3,r2,r3
400119b0:	9108d83a 	srl	r4,r18,r4
400119b4:	88e2983a 	sll	r17,r17,r3
400119b8:	2448b03a 	or	r4,r4,r17
400119bc:	000e2ac0 	call	4000e2ac <__floatunsidf>
400119c0:	017f8434 	movhi	r5,65040
400119c4:	01800044 	movi	r6,1
400119c8:	1009883a 	mov	r4,r2
400119cc:	194b883a 	add	r5,r3,r5
400119d0:	843fffc4 	addi	r16,r16,-1
400119d4:	d9801115 	stw	r6,68(sp)
400119d8:	000d883a 	mov	r6,zero
400119dc:	01cffe34 	movhi	r7,16376
400119e0:	00189540 	call	40018954 <__subdf3>
400119e4:	0198dbf4 	movhi	r6,25455
400119e8:	01cff4f4 	movhi	r7,16339
400119ec:	3190d844 	addi	r6,r6,17249
400119f0:	39e1e9c4 	addi	r7,r7,-30809
400119f4:	1009883a 	mov	r4,r2
400119f8:	180b883a 	mov	r5,r3
400119fc:	000db940 	call	4000db94 <__muldf3>
40011a00:	01a2d874 	movhi	r6,35681
40011a04:	01cff1f4 	movhi	r7,16327
40011a08:	31b22cc4 	addi	r6,r6,-14157
40011a0c:	39e28a04 	addi	r7,r7,-30168
40011a10:	180b883a 	mov	r5,r3
40011a14:	1009883a 	mov	r4,r2
40011a18:	000ca000 	call	4000ca00 <__adddf3>
40011a1c:	8009883a 	mov	r4,r16
40011a20:	1029883a 	mov	r20,r2
40011a24:	1823883a 	mov	r17,r3
40011a28:	00192d00 	call	400192d0 <__floatsidf>
40011a2c:	019427f4 	movhi	r6,20639
40011a30:	01cff4f4 	movhi	r7,16339
40011a34:	319e7ec4 	addi	r6,r6,31227
40011a38:	39d104c4 	addi	r7,r7,17427
40011a3c:	1009883a 	mov	r4,r2
40011a40:	180b883a 	mov	r5,r3
40011a44:	000db940 	call	4000db94 <__muldf3>
40011a48:	100d883a 	mov	r6,r2
40011a4c:	180f883a 	mov	r7,r3
40011a50:	a009883a 	mov	r4,r20
40011a54:	880b883a 	mov	r5,r17
40011a58:	000ca000 	call	4000ca00 <__adddf3>
40011a5c:	1009883a 	mov	r4,r2
40011a60:	180b883a 	mov	r5,r3
40011a64:	1029883a 	mov	r20,r2
40011a68:	1823883a 	mov	r17,r3
40011a6c:	00192500 	call	40019250 <__fixdfsi>
40011a70:	000d883a 	mov	r6,zero
40011a74:	000f883a 	mov	r7,zero
40011a78:	a009883a 	mov	r4,r20
40011a7c:	880b883a 	mov	r5,r17
40011a80:	d8800515 	stw	r2,20(sp)
40011a84:	00188600 	call	40018860 <__ledf2>
40011a88:	10028716 	blt	r2,zero,400124a8 <_dtoa_r+0xc88>
40011a8c:	d8c00517 	ldw	r3,20(sp)
40011a90:	00800584 	movi	r2,22
40011a94:	10c27536 	bltu	r2,r3,4001246c <_dtoa_r+0xc4c>
40011a98:	180490fa 	slli	r2,r3,3
40011a9c:	00d000b4 	movhi	r3,16386
40011aa0:	18ea6204 	addi	r3,r3,-22136
40011aa4:	1885883a 	add	r2,r3,r2
40011aa8:	11000017 	ldw	r4,0(r2)
40011aac:	11400117 	ldw	r5,4(r2)
40011ab0:	900d883a 	mov	r6,r18
40011ab4:	980f883a 	mov	r7,r19
40011ab8:	00187840 	call	40018784 <__gedf2>
40011abc:	00828d0e 	bge	zero,r2,400124f4 <_dtoa_r+0xcd4>
40011ac0:	d9000517 	ldw	r4,20(sp)
40011ac4:	d8000e15 	stw	zero,56(sp)
40011ac8:	213fffc4 	addi	r4,r4,-1
40011acc:	d9000515 	stw	r4,20(sp)
40011ad0:	b42dc83a 	sub	r22,r22,r16
40011ad4:	b5bfffc4 	addi	r22,r22,-1
40011ad8:	b0026f16 	blt	r22,zero,40012498 <_dtoa_r+0xc78>
40011adc:	d8000815 	stw	zero,32(sp)
40011ae0:	d9c00517 	ldw	r7,20(sp)
40011ae4:	38026416 	blt	r7,zero,40012478 <_dtoa_r+0xc58>
40011ae8:	b1ed883a 	add	r22,r22,r7
40011aec:	d9c00d15 	stw	r7,52(sp)
40011af0:	d8000a15 	stw	zero,40(sp)
40011af4:	d9800317 	ldw	r6,12(sp)
40011af8:	00800244 	movi	r2,9
40011afc:	11811436 	bltu	r2,r6,40011f50 <_dtoa_r+0x730>
40011b00:	00800144 	movi	r2,5
40011b04:	1184e10e 	bge	r2,r6,40012e8c <_dtoa_r+0x166c>
40011b08:	31bfff04 	addi	r6,r6,-4
40011b0c:	d9800315 	stw	r6,12(sp)
40011b10:	0023883a 	mov	r17,zero
40011b14:	d9800317 	ldw	r6,12(sp)
40011b18:	008000c4 	movi	r2,3
40011b1c:	30836726 	beq	r6,r2,400128bc <_dtoa_r+0x109c>
40011b20:	1183410e 	bge	r2,r6,40012828 <_dtoa_r+0x1008>
40011b24:	d9c00317 	ldw	r7,12(sp)
40011b28:	00800104 	movi	r2,4
40011b2c:	38827c26 	beq	r7,r2,40012520 <_dtoa_r+0xd00>
40011b30:	00800144 	movi	r2,5
40011b34:	3884c41e 	bne	r7,r2,40012e48 <_dtoa_r+0x1628>
40011b38:	00800044 	movi	r2,1
40011b3c:	d8800b15 	stw	r2,44(sp)
40011b40:	d8c00517 	ldw	r3,20(sp)
40011b44:	d9002217 	ldw	r4,136(sp)
40011b48:	1907883a 	add	r3,r3,r4
40011b4c:	19800044 	addi	r6,r3,1
40011b50:	d8c00c15 	stw	r3,48(sp)
40011b54:	d9800615 	stw	r6,24(sp)
40011b58:	0183a40e 	bge	zero,r6,400129ec <_dtoa_r+0x11cc>
40011b5c:	d9800617 	ldw	r6,24(sp)
40011b60:	3021883a 	mov	r16,r6
40011b64:	e0001115 	stw	zero,68(fp)
40011b68:	008005c4 	movi	r2,23
40011b6c:	1184c92e 	bgeu	r2,r6,40012e94 <_dtoa_r+0x1674>
40011b70:	00c00044 	movi	r3,1
40011b74:	00800104 	movi	r2,4
40011b78:	1085883a 	add	r2,r2,r2
40011b7c:	11000504 	addi	r4,r2,20
40011b80:	180b883a 	mov	r5,r3
40011b84:	18c00044 	addi	r3,r3,1
40011b88:	313ffb2e 	bgeu	r6,r4,40011b78 <__alt_data_end+0xc0011b78>
40011b8c:	e1401115 	stw	r5,68(fp)
40011b90:	e009883a 	mov	r4,fp
40011b94:	00144400 	call	40014440 <_Balloc>
40011b98:	d8800715 	stw	r2,28(sp)
40011b9c:	e0801015 	stw	r2,64(fp)
40011ba0:	00800384 	movi	r2,14
40011ba4:	1400f736 	bltu	r2,r16,40011f84 <_dtoa_r+0x764>
40011ba8:	8800f626 	beq	r17,zero,40011f84 <_dtoa_r+0x764>
40011bac:	d9c00517 	ldw	r7,20(sp)
40011bb0:	01c39a0e 	bge	zero,r7,40012a1c <_dtoa_r+0x11fc>
40011bb4:	388003cc 	andi	r2,r7,15
40011bb8:	100490fa 	slli	r2,r2,3
40011bbc:	382bd13a 	srai	r21,r7,4
40011bc0:	00d000b4 	movhi	r3,16386
40011bc4:	18ea6204 	addi	r3,r3,-22136
40011bc8:	1885883a 	add	r2,r3,r2
40011bcc:	a8c0040c 	andi	r3,r21,16
40011bd0:	12400017 	ldw	r9,0(r2)
40011bd4:	12000117 	ldw	r8,4(r2)
40011bd8:	18037926 	beq	r3,zero,400129c0 <_dtoa_r+0x11a0>
40011bdc:	009000b4 	movhi	r2,16386
40011be0:	10aa5804 	addi	r2,r2,-22176
40011be4:	11800817 	ldw	r6,32(r2)
40011be8:	11c00917 	ldw	r7,36(r2)
40011bec:	9009883a 	mov	r4,r18
40011bf0:	980b883a 	mov	r5,r19
40011bf4:	da001715 	stw	r8,92(sp)
40011bf8:	da401615 	stw	r9,88(sp)
40011bfc:	000d2ac0 	call	4000d2ac <__divdf3>
40011c00:	da001717 	ldw	r8,92(sp)
40011c04:	da401617 	ldw	r9,88(sp)
40011c08:	ad4003cc 	andi	r21,r21,15
40011c0c:	040000c4 	movi	r16,3
40011c10:	1023883a 	mov	r17,r2
40011c14:	1829883a 	mov	r20,r3
40011c18:	a8001126 	beq	r21,zero,40011c60 <_dtoa_r+0x440>
40011c1c:	05d000b4 	movhi	r23,16386
40011c20:	bdea5804 	addi	r23,r23,-22176
40011c24:	4805883a 	mov	r2,r9
40011c28:	4007883a 	mov	r3,r8
40011c2c:	a980004c 	andi	r6,r21,1
40011c30:	1009883a 	mov	r4,r2
40011c34:	a82bd07a 	srai	r21,r21,1
40011c38:	180b883a 	mov	r5,r3
40011c3c:	30000426 	beq	r6,zero,40011c50 <_dtoa_r+0x430>
40011c40:	b9800017 	ldw	r6,0(r23)
40011c44:	b9c00117 	ldw	r7,4(r23)
40011c48:	84000044 	addi	r16,r16,1
40011c4c:	000db940 	call	4000db94 <__muldf3>
40011c50:	bdc00204 	addi	r23,r23,8
40011c54:	a83ff51e 	bne	r21,zero,40011c2c <__alt_data_end+0xc0011c2c>
40011c58:	1013883a 	mov	r9,r2
40011c5c:	1811883a 	mov	r8,r3
40011c60:	480d883a 	mov	r6,r9
40011c64:	400f883a 	mov	r7,r8
40011c68:	8809883a 	mov	r4,r17
40011c6c:	a00b883a 	mov	r5,r20
40011c70:	000d2ac0 	call	4000d2ac <__divdf3>
40011c74:	d8800f15 	stw	r2,60(sp)
40011c78:	d8c01015 	stw	r3,64(sp)
40011c7c:	d8c00e17 	ldw	r3,56(sp)
40011c80:	18000626 	beq	r3,zero,40011c9c <_dtoa_r+0x47c>
40011c84:	d9000f17 	ldw	r4,60(sp)
40011c88:	d9401017 	ldw	r5,64(sp)
40011c8c:	000d883a 	mov	r6,zero
40011c90:	01cffc34 	movhi	r7,16368
40011c94:	00188600 	call	40018860 <__ledf2>
40011c98:	10040b16 	blt	r2,zero,40012cc8 <_dtoa_r+0x14a8>
40011c9c:	8009883a 	mov	r4,r16
40011ca0:	00192d00 	call	400192d0 <__floatsidf>
40011ca4:	d9800f17 	ldw	r6,60(sp)
40011ca8:	d9c01017 	ldw	r7,64(sp)
40011cac:	1009883a 	mov	r4,r2
40011cb0:	180b883a 	mov	r5,r3
40011cb4:	000db940 	call	4000db94 <__muldf3>
40011cb8:	000d883a 	mov	r6,zero
40011cbc:	01d00734 	movhi	r7,16412
40011cc0:	1009883a 	mov	r4,r2
40011cc4:	180b883a 	mov	r5,r3
40011cc8:	000ca000 	call	4000ca00 <__adddf3>
40011ccc:	1021883a 	mov	r16,r2
40011cd0:	d8800617 	ldw	r2,24(sp)
40011cd4:	047f3034 	movhi	r17,64704
40011cd8:	1c63883a 	add	r17,r3,r17
40011cdc:	10031826 	beq	r2,zero,40012940 <_dtoa_r+0x1120>
40011ce0:	d8c00517 	ldw	r3,20(sp)
40011ce4:	db000617 	ldw	r12,24(sp)
40011ce8:	d8c01315 	stw	r3,76(sp)
40011cec:	d9000b17 	ldw	r4,44(sp)
40011cf0:	20038f26 	beq	r4,zero,40012b30 <_dtoa_r+0x1310>
40011cf4:	60bfffc4 	addi	r2,r12,-1
40011cf8:	100490fa 	slli	r2,r2,3
40011cfc:	00d000b4 	movhi	r3,16386
40011d00:	18ea6204 	addi	r3,r3,-22136
40011d04:	1885883a 	add	r2,r3,r2
40011d08:	11800017 	ldw	r6,0(r2)
40011d0c:	11c00117 	ldw	r7,4(r2)
40011d10:	d8800717 	ldw	r2,28(sp)
40011d14:	0009883a 	mov	r4,zero
40011d18:	014ff834 	movhi	r5,16352
40011d1c:	db001615 	stw	r12,88(sp)
40011d20:	15c00044 	addi	r23,r2,1
40011d24:	000d2ac0 	call	4000d2ac <__divdf3>
40011d28:	800d883a 	mov	r6,r16
40011d2c:	880f883a 	mov	r7,r17
40011d30:	1009883a 	mov	r4,r2
40011d34:	180b883a 	mov	r5,r3
40011d38:	00189540 	call	40018954 <__subdf3>
40011d3c:	d9401017 	ldw	r5,64(sp)
40011d40:	d9000f17 	ldw	r4,60(sp)
40011d44:	102b883a 	mov	r21,r2
40011d48:	d8c01215 	stw	r3,72(sp)
40011d4c:	00192500 	call	40019250 <__fixdfsi>
40011d50:	1009883a 	mov	r4,r2
40011d54:	1029883a 	mov	r20,r2
40011d58:	00192d00 	call	400192d0 <__floatsidf>
40011d5c:	d9000f17 	ldw	r4,60(sp)
40011d60:	d9401017 	ldw	r5,64(sp)
40011d64:	100d883a 	mov	r6,r2
40011d68:	180f883a 	mov	r7,r3
40011d6c:	00189540 	call	40018954 <__subdf3>
40011d70:	1823883a 	mov	r17,r3
40011d74:	d8c00717 	ldw	r3,28(sp)
40011d78:	d9401217 	ldw	r5,72(sp)
40011d7c:	a2000c04 	addi	r8,r20,48
40011d80:	1021883a 	mov	r16,r2
40011d84:	1a000005 	stb	r8,0(r3)
40011d88:	800d883a 	mov	r6,r16
40011d8c:	880f883a 	mov	r7,r17
40011d90:	a809883a 	mov	r4,r21
40011d94:	4029883a 	mov	r20,r8
40011d98:	00187840 	call	40018784 <__gedf2>
40011d9c:	00841d16 	blt	zero,r2,40012e14 <_dtoa_r+0x15f4>
40011da0:	800d883a 	mov	r6,r16
40011da4:	880f883a 	mov	r7,r17
40011da8:	0009883a 	mov	r4,zero
40011dac:	014ffc34 	movhi	r5,16368
40011db0:	00189540 	call	40018954 <__subdf3>
40011db4:	d9401217 	ldw	r5,72(sp)
40011db8:	100d883a 	mov	r6,r2
40011dbc:	180f883a 	mov	r7,r3
40011dc0:	a809883a 	mov	r4,r21
40011dc4:	00187840 	call	40018784 <__gedf2>
40011dc8:	db001617 	ldw	r12,88(sp)
40011dcc:	00840e16 	blt	zero,r2,40012e08 <_dtoa_r+0x15e8>
40011dd0:	00800044 	movi	r2,1
40011dd4:	13006b0e 	bge	r2,r12,40011f84 <_dtoa_r+0x764>
40011dd8:	d9000717 	ldw	r4,28(sp)
40011ddc:	dd800f15 	stw	r22,60(sp)
40011de0:	dcc01015 	stw	r19,64(sp)
40011de4:	2319883a 	add	r12,r4,r12
40011de8:	dcc01217 	ldw	r19,72(sp)
40011dec:	602d883a 	mov	r22,r12
40011df0:	dc801215 	stw	r18,72(sp)
40011df4:	b825883a 	mov	r18,r23
40011df8:	00000906 	br	40011e20 <_dtoa_r+0x600>
40011dfc:	00189540 	call	40018954 <__subdf3>
40011e00:	a80d883a 	mov	r6,r21
40011e04:	980f883a 	mov	r7,r19
40011e08:	1009883a 	mov	r4,r2
40011e0c:	180b883a 	mov	r5,r3
40011e10:	00188600 	call	40018860 <__ledf2>
40011e14:	1003e816 	blt	r2,zero,40012db8 <_dtoa_r+0x1598>
40011e18:	b825883a 	mov	r18,r23
40011e1c:	bd83e926 	beq	r23,r22,40012dc4 <_dtoa_r+0x15a4>
40011e20:	a809883a 	mov	r4,r21
40011e24:	980b883a 	mov	r5,r19
40011e28:	000d883a 	mov	r6,zero
40011e2c:	01d00934 	movhi	r7,16420
40011e30:	000db940 	call	4000db94 <__muldf3>
40011e34:	000d883a 	mov	r6,zero
40011e38:	01d00934 	movhi	r7,16420
40011e3c:	8009883a 	mov	r4,r16
40011e40:	880b883a 	mov	r5,r17
40011e44:	102b883a 	mov	r21,r2
40011e48:	1827883a 	mov	r19,r3
40011e4c:	000db940 	call	4000db94 <__muldf3>
40011e50:	180b883a 	mov	r5,r3
40011e54:	1009883a 	mov	r4,r2
40011e58:	1821883a 	mov	r16,r3
40011e5c:	1023883a 	mov	r17,r2
40011e60:	00192500 	call	40019250 <__fixdfsi>
40011e64:	1009883a 	mov	r4,r2
40011e68:	1029883a 	mov	r20,r2
40011e6c:	00192d00 	call	400192d0 <__floatsidf>
40011e70:	8809883a 	mov	r4,r17
40011e74:	800b883a 	mov	r5,r16
40011e78:	100d883a 	mov	r6,r2
40011e7c:	180f883a 	mov	r7,r3
40011e80:	00189540 	call	40018954 <__subdf3>
40011e84:	a5000c04 	addi	r20,r20,48
40011e88:	a80d883a 	mov	r6,r21
40011e8c:	980f883a 	mov	r7,r19
40011e90:	1009883a 	mov	r4,r2
40011e94:	180b883a 	mov	r5,r3
40011e98:	95000005 	stb	r20,0(r18)
40011e9c:	1021883a 	mov	r16,r2
40011ea0:	1823883a 	mov	r17,r3
40011ea4:	00188600 	call	40018860 <__ledf2>
40011ea8:	bdc00044 	addi	r23,r23,1
40011eac:	800d883a 	mov	r6,r16
40011eb0:	880f883a 	mov	r7,r17
40011eb4:	0009883a 	mov	r4,zero
40011eb8:	014ffc34 	movhi	r5,16368
40011ebc:	103fcf0e 	bge	r2,zero,40011dfc <__alt_data_end+0xc0011dfc>
40011ec0:	d8c01317 	ldw	r3,76(sp)
40011ec4:	d8c00515 	stw	r3,20(sp)
40011ec8:	d9400917 	ldw	r5,36(sp)
40011ecc:	e009883a 	mov	r4,fp
40011ed0:	00144e80 	call	400144e8 <_Bfree>
40011ed4:	d9000517 	ldw	r4,20(sp)
40011ed8:	d9802317 	ldw	r6,140(sp)
40011edc:	d9c02517 	ldw	r7,148(sp)
40011ee0:	b8000005 	stb	zero,0(r23)
40011ee4:	20800044 	addi	r2,r4,1
40011ee8:	30800015 	stw	r2,0(r6)
40011eec:	3802aa26 	beq	r7,zero,40012998 <_dtoa_r+0x1178>
40011ef0:	3dc00015 	stw	r23,0(r7)
40011ef4:	d8800717 	ldw	r2,28(sp)
40011ef8:	003e7906 	br	400118e0 <__alt_data_end+0xc00118e0>
40011efc:	00800434 	movhi	r2,16
40011f00:	10bfffc4 	addi	r2,r2,-1
40011f04:	88a2703a 	and	r17,r17,r2
40011f08:	883e851e 	bne	r17,zero,40011920 <__alt_data_end+0xc0011920>
40011f0c:	009000b4 	movhi	r2,16386
40011f10:	10aa4404 	addi	r2,r2,-22256
40011f14:	003e8406 	br	40011928 <__alt_data_end+0xc0011928>
40011f18:	10c00204 	addi	r3,r2,8
40011f1c:	003e8706 	br	4001193c <__alt_data_end+0xc001193c>
40011f20:	01400434 	movhi	r5,16
40011f24:	297fffc4 	addi	r5,r5,-1
40011f28:	994a703a 	and	r5,r19,r5
40011f2c:	9009883a 	mov	r4,r18
40011f30:	843f0044 	addi	r16,r16,-1023
40011f34:	294ffc34 	orhi	r5,r5,16368
40011f38:	dd800217 	ldw	r22,8(sp)
40011f3c:	d8001115 	stw	zero,68(sp)
40011f40:	003ea506 	br	400119d8 <__alt_data_end+0xc00119d8>
40011f44:	009000b4 	movhi	r2,16386
40011f48:	10aa3b04 	addi	r2,r2,-22292
40011f4c:	003e6406 	br	400118e0 <__alt_data_end+0xc00118e0>
40011f50:	e0001115 	stw	zero,68(fp)
40011f54:	000b883a 	mov	r5,zero
40011f58:	e009883a 	mov	r4,fp
40011f5c:	00144400 	call	40014440 <_Balloc>
40011f60:	01bfffc4 	movi	r6,-1
40011f64:	01c00044 	movi	r7,1
40011f68:	d8800715 	stw	r2,28(sp)
40011f6c:	d9800c15 	stw	r6,48(sp)
40011f70:	e0801015 	stw	r2,64(fp)
40011f74:	d8000315 	stw	zero,12(sp)
40011f78:	d9c00b15 	stw	r7,44(sp)
40011f7c:	d9800615 	stw	r6,24(sp)
40011f80:	d8002215 	stw	zero,136(sp)
40011f84:	d8800117 	ldw	r2,4(sp)
40011f88:	10008916 	blt	r2,zero,400121b0 <_dtoa_r+0x990>
40011f8c:	d9000517 	ldw	r4,20(sp)
40011f90:	00c00384 	movi	r3,14
40011f94:	19008616 	blt	r3,r4,400121b0 <_dtoa_r+0x990>
40011f98:	200490fa 	slli	r2,r4,3
40011f9c:	00d000b4 	movhi	r3,16386
40011fa0:	d9802217 	ldw	r6,136(sp)
40011fa4:	18ea6204 	addi	r3,r3,-22136
40011fa8:	1885883a 	add	r2,r3,r2
40011fac:	14000017 	ldw	r16,0(r2)
40011fb0:	14400117 	ldw	r17,4(r2)
40011fb4:	30016316 	blt	r6,zero,40012544 <_dtoa_r+0xd24>
40011fb8:	800d883a 	mov	r6,r16
40011fbc:	880f883a 	mov	r7,r17
40011fc0:	9009883a 	mov	r4,r18
40011fc4:	980b883a 	mov	r5,r19
40011fc8:	000d2ac0 	call	4000d2ac <__divdf3>
40011fcc:	180b883a 	mov	r5,r3
40011fd0:	1009883a 	mov	r4,r2
40011fd4:	00192500 	call	40019250 <__fixdfsi>
40011fd8:	1009883a 	mov	r4,r2
40011fdc:	102b883a 	mov	r21,r2
40011fe0:	00192d00 	call	400192d0 <__floatsidf>
40011fe4:	800d883a 	mov	r6,r16
40011fe8:	880f883a 	mov	r7,r17
40011fec:	1009883a 	mov	r4,r2
40011ff0:	180b883a 	mov	r5,r3
40011ff4:	000db940 	call	4000db94 <__muldf3>
40011ff8:	100d883a 	mov	r6,r2
40011ffc:	180f883a 	mov	r7,r3
40012000:	9009883a 	mov	r4,r18
40012004:	980b883a 	mov	r5,r19
40012008:	00189540 	call	40018954 <__subdf3>
4001200c:	d9c00717 	ldw	r7,28(sp)
40012010:	1009883a 	mov	r4,r2
40012014:	a8800c04 	addi	r2,r21,48
40012018:	38800005 	stb	r2,0(r7)
4001201c:	3dc00044 	addi	r23,r7,1
40012020:	d9c00617 	ldw	r7,24(sp)
40012024:	01800044 	movi	r6,1
40012028:	180b883a 	mov	r5,r3
4001202c:	2005883a 	mov	r2,r4
40012030:	39803826 	beq	r7,r6,40012114 <_dtoa_r+0x8f4>
40012034:	000d883a 	mov	r6,zero
40012038:	01d00934 	movhi	r7,16420
4001203c:	000db940 	call	4000db94 <__muldf3>
40012040:	000d883a 	mov	r6,zero
40012044:	000f883a 	mov	r7,zero
40012048:	1009883a 	mov	r4,r2
4001204c:	180b883a 	mov	r5,r3
40012050:	1025883a 	mov	r18,r2
40012054:	1827883a 	mov	r19,r3
40012058:	00186fc0 	call	400186fc <__eqdf2>
4001205c:	103f9a26 	beq	r2,zero,40011ec8 <__alt_data_end+0xc0011ec8>
40012060:	d9c00617 	ldw	r7,24(sp)
40012064:	d8c00717 	ldw	r3,28(sp)
40012068:	b829883a 	mov	r20,r23
4001206c:	38bfffc4 	addi	r2,r7,-1
40012070:	18ad883a 	add	r22,r3,r2
40012074:	00000a06 	br	400120a0 <_dtoa_r+0x880>
40012078:	000db940 	call	4000db94 <__muldf3>
4001207c:	000d883a 	mov	r6,zero
40012080:	000f883a 	mov	r7,zero
40012084:	1009883a 	mov	r4,r2
40012088:	180b883a 	mov	r5,r3
4001208c:	1025883a 	mov	r18,r2
40012090:	1827883a 	mov	r19,r3
40012094:	b829883a 	mov	r20,r23
40012098:	00186fc0 	call	400186fc <__eqdf2>
4001209c:	103f8a26 	beq	r2,zero,40011ec8 <__alt_data_end+0xc0011ec8>
400120a0:	800d883a 	mov	r6,r16
400120a4:	880f883a 	mov	r7,r17
400120a8:	9009883a 	mov	r4,r18
400120ac:	980b883a 	mov	r5,r19
400120b0:	000d2ac0 	call	4000d2ac <__divdf3>
400120b4:	180b883a 	mov	r5,r3
400120b8:	1009883a 	mov	r4,r2
400120bc:	00192500 	call	40019250 <__fixdfsi>
400120c0:	1009883a 	mov	r4,r2
400120c4:	102b883a 	mov	r21,r2
400120c8:	00192d00 	call	400192d0 <__floatsidf>
400120cc:	800d883a 	mov	r6,r16
400120d0:	880f883a 	mov	r7,r17
400120d4:	1009883a 	mov	r4,r2
400120d8:	180b883a 	mov	r5,r3
400120dc:	000db940 	call	4000db94 <__muldf3>
400120e0:	100d883a 	mov	r6,r2
400120e4:	180f883a 	mov	r7,r3
400120e8:	9009883a 	mov	r4,r18
400120ec:	980b883a 	mov	r5,r19
400120f0:	00189540 	call	40018954 <__subdf3>
400120f4:	aa000c04 	addi	r8,r21,48
400120f8:	a2000005 	stb	r8,0(r20)
400120fc:	000d883a 	mov	r6,zero
40012100:	01d00934 	movhi	r7,16420
40012104:	1009883a 	mov	r4,r2
40012108:	180b883a 	mov	r5,r3
4001210c:	a5c00044 	addi	r23,r20,1
40012110:	b53fd91e 	bne	r22,r20,40012078 <__alt_data_end+0xc0012078>
40012114:	100d883a 	mov	r6,r2
40012118:	180f883a 	mov	r7,r3
4001211c:	1009883a 	mov	r4,r2
40012120:	180b883a 	mov	r5,r3
40012124:	000ca000 	call	4000ca00 <__adddf3>
40012128:	100d883a 	mov	r6,r2
4001212c:	180f883a 	mov	r7,r3
40012130:	8009883a 	mov	r4,r16
40012134:	880b883a 	mov	r5,r17
40012138:	1027883a 	mov	r19,r2
4001213c:	1825883a 	mov	r18,r3
40012140:	00188600 	call	40018860 <__ledf2>
40012144:	10000816 	blt	r2,zero,40012168 <_dtoa_r+0x948>
40012148:	980d883a 	mov	r6,r19
4001214c:	900f883a 	mov	r7,r18
40012150:	8009883a 	mov	r4,r16
40012154:	880b883a 	mov	r5,r17
40012158:	00186fc0 	call	400186fc <__eqdf2>
4001215c:	103f5a1e 	bne	r2,zero,40011ec8 <__alt_data_end+0xc0011ec8>
40012160:	ad40004c 	andi	r21,r21,1
40012164:	a83f5826 	beq	r21,zero,40011ec8 <__alt_data_end+0xc0011ec8>
40012168:	bd3fffc3 	ldbu	r20,-1(r23)
4001216c:	b8bfffc4 	addi	r2,r23,-1
40012170:	1007883a 	mov	r3,r2
40012174:	01400e44 	movi	r5,57
40012178:	d9800717 	ldw	r6,28(sp)
4001217c:	00000506 	br	40012194 <_dtoa_r+0x974>
40012180:	18ffffc4 	addi	r3,r3,-1
40012184:	11824726 	beq	r2,r6,40012aa4 <_dtoa_r+0x1284>
40012188:	1d000003 	ldbu	r20,0(r3)
4001218c:	102f883a 	mov	r23,r2
40012190:	10bfffc4 	addi	r2,r2,-1
40012194:	a1003fcc 	andi	r4,r20,255
40012198:	2100201c 	xori	r4,r4,128
4001219c:	213fe004 	addi	r4,r4,-128
400121a0:	217ff726 	beq	r4,r5,40012180 <__alt_data_end+0xc0012180>
400121a4:	a2000044 	addi	r8,r20,1
400121a8:	12000005 	stb	r8,0(r2)
400121ac:	003f4606 	br	40011ec8 <__alt_data_end+0xc0011ec8>
400121b0:	d9000b17 	ldw	r4,44(sp)
400121b4:	2000c826 	beq	r4,zero,400124d8 <_dtoa_r+0xcb8>
400121b8:	d9800317 	ldw	r6,12(sp)
400121bc:	00c00044 	movi	r3,1
400121c0:	1980f90e 	bge	r3,r6,400125a8 <_dtoa_r+0xd88>
400121c4:	d8800617 	ldw	r2,24(sp)
400121c8:	d8c00a17 	ldw	r3,40(sp)
400121cc:	157fffc4 	addi	r21,r2,-1
400121d0:	1d41f316 	blt	r3,r21,400129a0 <_dtoa_r+0x1180>
400121d4:	1d6bc83a 	sub	r21,r3,r21
400121d8:	d9c00617 	ldw	r7,24(sp)
400121dc:	3802aa16 	blt	r7,zero,40012c88 <_dtoa_r+0x1468>
400121e0:	dd000817 	ldw	r20,32(sp)
400121e4:	d8800617 	ldw	r2,24(sp)
400121e8:	d8c00817 	ldw	r3,32(sp)
400121ec:	01400044 	movi	r5,1
400121f0:	e009883a 	mov	r4,fp
400121f4:	1887883a 	add	r3,r3,r2
400121f8:	d8c00815 	stw	r3,32(sp)
400121fc:	b0ad883a 	add	r22,r22,r2
40012200:	001484c0 	call	4001484c <__i2b>
40012204:	1023883a 	mov	r17,r2
40012208:	a0000826 	beq	r20,zero,4001222c <_dtoa_r+0xa0c>
4001220c:	0580070e 	bge	zero,r22,4001222c <_dtoa_r+0xa0c>
40012210:	a005883a 	mov	r2,r20
40012214:	b500b916 	blt	r22,r20,400124fc <_dtoa_r+0xcdc>
40012218:	d9000817 	ldw	r4,32(sp)
4001221c:	a0a9c83a 	sub	r20,r20,r2
40012220:	b0adc83a 	sub	r22,r22,r2
40012224:	2089c83a 	sub	r4,r4,r2
40012228:	d9000815 	stw	r4,32(sp)
4001222c:	d9800a17 	ldw	r6,40(sp)
40012230:	0181810e 	bge	zero,r6,40012838 <_dtoa_r+0x1018>
40012234:	d9c00b17 	ldw	r7,44(sp)
40012238:	3800b326 	beq	r7,zero,40012508 <_dtoa_r+0xce8>
4001223c:	a800b226 	beq	r21,zero,40012508 <_dtoa_r+0xce8>
40012240:	880b883a 	mov	r5,r17
40012244:	a80d883a 	mov	r6,r21
40012248:	e009883a 	mov	r4,fp
4001224c:	0014a800 	call	40014a80 <__pow5mult>
40012250:	d9800917 	ldw	r6,36(sp)
40012254:	100b883a 	mov	r5,r2
40012258:	e009883a 	mov	r4,fp
4001225c:	1023883a 	mov	r17,r2
40012260:	00148880 	call	40014888 <__multiply>
40012264:	1021883a 	mov	r16,r2
40012268:	d8800a17 	ldw	r2,40(sp)
4001226c:	d9400917 	ldw	r5,36(sp)
40012270:	e009883a 	mov	r4,fp
40012274:	1545c83a 	sub	r2,r2,r21
40012278:	d8800a15 	stw	r2,40(sp)
4001227c:	00144e80 	call	400144e8 <_Bfree>
40012280:	d8c00a17 	ldw	r3,40(sp)
40012284:	18009f1e 	bne	r3,zero,40012504 <_dtoa_r+0xce4>
40012288:	05c00044 	movi	r23,1
4001228c:	e009883a 	mov	r4,fp
40012290:	b80b883a 	mov	r5,r23
40012294:	001484c0 	call	4001484c <__i2b>
40012298:	d9000d17 	ldw	r4,52(sp)
4001229c:	102b883a 	mov	r21,r2
400122a0:	2000ce26 	beq	r4,zero,400125dc <_dtoa_r+0xdbc>
400122a4:	200d883a 	mov	r6,r4
400122a8:	100b883a 	mov	r5,r2
400122ac:	e009883a 	mov	r4,fp
400122b0:	0014a800 	call	40014a80 <__pow5mult>
400122b4:	d9800317 	ldw	r6,12(sp)
400122b8:	102b883a 	mov	r21,r2
400122bc:	b981810e 	bge	r23,r6,400128c4 <_dtoa_r+0x10a4>
400122c0:	0027883a 	mov	r19,zero
400122c4:	a8800417 	ldw	r2,16(r21)
400122c8:	05c00804 	movi	r23,32
400122cc:	10800104 	addi	r2,r2,4
400122d0:	1085883a 	add	r2,r2,r2
400122d4:	1085883a 	add	r2,r2,r2
400122d8:	a885883a 	add	r2,r21,r2
400122dc:	11000017 	ldw	r4,0(r2)
400122e0:	00147340 	call	40014734 <__hi0bits>
400122e4:	b885c83a 	sub	r2,r23,r2
400122e8:	1585883a 	add	r2,r2,r22
400122ec:	108007cc 	andi	r2,r2,31
400122f0:	1000b326 	beq	r2,zero,400125c0 <_dtoa_r+0xda0>
400122f4:	00c00804 	movi	r3,32
400122f8:	1887c83a 	sub	r3,r3,r2
400122fc:	01000104 	movi	r4,4
40012300:	20c2cd0e 	bge	r4,r3,40012e38 <_dtoa_r+0x1618>
40012304:	00c00704 	movi	r3,28
40012308:	1885c83a 	sub	r2,r3,r2
4001230c:	d8c00817 	ldw	r3,32(sp)
40012310:	a0a9883a 	add	r20,r20,r2
40012314:	b0ad883a 	add	r22,r22,r2
40012318:	1887883a 	add	r3,r3,r2
4001231c:	d8c00815 	stw	r3,32(sp)
40012320:	d9800817 	ldw	r6,32(sp)
40012324:	0180040e 	bge	zero,r6,40012338 <_dtoa_r+0xb18>
40012328:	800b883a 	mov	r5,r16
4001232c:	e009883a 	mov	r4,fp
40012330:	0014bc00 	call	40014bc0 <__lshift>
40012334:	1021883a 	mov	r16,r2
40012338:	0580050e 	bge	zero,r22,40012350 <_dtoa_r+0xb30>
4001233c:	a80b883a 	mov	r5,r21
40012340:	b00d883a 	mov	r6,r22
40012344:	e009883a 	mov	r4,fp
40012348:	0014bc00 	call	40014bc0 <__lshift>
4001234c:	102b883a 	mov	r21,r2
40012350:	d9c00e17 	ldw	r7,56(sp)
40012354:	3801211e 	bne	r7,zero,400127dc <_dtoa_r+0xfbc>
40012358:	d9800617 	ldw	r6,24(sp)
4001235c:	0181380e 	bge	zero,r6,40012840 <_dtoa_r+0x1020>
40012360:	d8c00b17 	ldw	r3,44(sp)
40012364:	1800ab1e 	bne	r3,zero,40012614 <_dtoa_r+0xdf4>
40012368:	dc800717 	ldw	r18,28(sp)
4001236c:	dcc00617 	ldw	r19,24(sp)
40012370:	9029883a 	mov	r20,r18
40012374:	00000206 	br	40012380 <_dtoa_r+0xb60>
40012378:	00145100 	call	40014510 <__multadd>
4001237c:	1021883a 	mov	r16,r2
40012380:	a80b883a 	mov	r5,r21
40012384:	8009883a 	mov	r4,r16
40012388:	00116200 	call	40011620 <quorem>
4001238c:	10800c04 	addi	r2,r2,48
40012390:	90800005 	stb	r2,0(r18)
40012394:	94800044 	addi	r18,r18,1
40012398:	9507c83a 	sub	r3,r18,r20
4001239c:	000f883a 	mov	r7,zero
400123a0:	01800284 	movi	r6,10
400123a4:	800b883a 	mov	r5,r16
400123a8:	e009883a 	mov	r4,fp
400123ac:	1cfff216 	blt	r3,r19,40012378 <__alt_data_end+0xc0012378>
400123b0:	1011883a 	mov	r8,r2
400123b4:	d8800617 	ldw	r2,24(sp)
400123b8:	0082370e 	bge	zero,r2,40012c98 <_dtoa_r+0x1478>
400123bc:	d9000717 	ldw	r4,28(sp)
400123c0:	0025883a 	mov	r18,zero
400123c4:	20af883a 	add	r23,r4,r2
400123c8:	01800044 	movi	r6,1
400123cc:	800b883a 	mov	r5,r16
400123d0:	e009883a 	mov	r4,fp
400123d4:	da001715 	stw	r8,92(sp)
400123d8:	0014bc00 	call	40014bc0 <__lshift>
400123dc:	a80b883a 	mov	r5,r21
400123e0:	1009883a 	mov	r4,r2
400123e4:	d8800915 	stw	r2,36(sp)
400123e8:	0014d080 	call	40014d08 <__mcmp>
400123ec:	da001717 	ldw	r8,92(sp)
400123f0:	0081800e 	bge	zero,r2,400129f4 <_dtoa_r+0x11d4>
400123f4:	b93fffc3 	ldbu	r4,-1(r23)
400123f8:	b8bfffc4 	addi	r2,r23,-1
400123fc:	1007883a 	mov	r3,r2
40012400:	01800e44 	movi	r6,57
40012404:	d9c00717 	ldw	r7,28(sp)
40012408:	00000506 	br	40012420 <_dtoa_r+0xc00>
4001240c:	18ffffc4 	addi	r3,r3,-1
40012410:	11c12326 	beq	r2,r7,400128a0 <_dtoa_r+0x1080>
40012414:	19000003 	ldbu	r4,0(r3)
40012418:	102f883a 	mov	r23,r2
4001241c:	10bfffc4 	addi	r2,r2,-1
40012420:	21403fcc 	andi	r5,r4,255
40012424:	2940201c 	xori	r5,r5,128
40012428:	297fe004 	addi	r5,r5,-128
4001242c:	29bff726 	beq	r5,r6,4001240c <__alt_data_end+0xc001240c>
40012430:	21000044 	addi	r4,r4,1
40012434:	11000005 	stb	r4,0(r2)
40012438:	a80b883a 	mov	r5,r21
4001243c:	e009883a 	mov	r4,fp
40012440:	00144e80 	call	400144e8 <_Bfree>
40012444:	883ea026 	beq	r17,zero,40011ec8 <__alt_data_end+0xc0011ec8>
40012448:	90000426 	beq	r18,zero,4001245c <_dtoa_r+0xc3c>
4001244c:	94400326 	beq	r18,r17,4001245c <_dtoa_r+0xc3c>
40012450:	900b883a 	mov	r5,r18
40012454:	e009883a 	mov	r4,fp
40012458:	00144e80 	call	400144e8 <_Bfree>
4001245c:	880b883a 	mov	r5,r17
40012460:	e009883a 	mov	r4,fp
40012464:	00144e80 	call	400144e8 <_Bfree>
40012468:	003e9706 	br	40011ec8 <__alt_data_end+0xc0011ec8>
4001246c:	01800044 	movi	r6,1
40012470:	d9800e15 	stw	r6,56(sp)
40012474:	003d9606 	br	40011ad0 <__alt_data_end+0xc0011ad0>
40012478:	d8800817 	ldw	r2,32(sp)
4001247c:	d8c00517 	ldw	r3,20(sp)
40012480:	d8000d15 	stw	zero,52(sp)
40012484:	10c5c83a 	sub	r2,r2,r3
40012488:	00c9c83a 	sub	r4,zero,r3
4001248c:	d8800815 	stw	r2,32(sp)
40012490:	d9000a15 	stw	r4,40(sp)
40012494:	003d9706 	br	40011af4 <__alt_data_end+0xc0011af4>
40012498:	05adc83a 	sub	r22,zero,r22
4001249c:	dd800815 	stw	r22,32(sp)
400124a0:	002d883a 	mov	r22,zero
400124a4:	003d8e06 	br	40011ae0 <__alt_data_end+0xc0011ae0>
400124a8:	d9000517 	ldw	r4,20(sp)
400124ac:	00192d00 	call	400192d0 <__floatsidf>
400124b0:	100d883a 	mov	r6,r2
400124b4:	180f883a 	mov	r7,r3
400124b8:	a009883a 	mov	r4,r20
400124bc:	880b883a 	mov	r5,r17
400124c0:	00186fc0 	call	400186fc <__eqdf2>
400124c4:	103d7126 	beq	r2,zero,40011a8c <__alt_data_end+0xc0011a8c>
400124c8:	d9c00517 	ldw	r7,20(sp)
400124cc:	39ffffc4 	addi	r7,r7,-1
400124d0:	d9c00515 	stw	r7,20(sp)
400124d4:	003d6d06 	br	40011a8c <__alt_data_end+0xc0011a8c>
400124d8:	dd400a17 	ldw	r21,40(sp)
400124dc:	dd000817 	ldw	r20,32(sp)
400124e0:	0023883a 	mov	r17,zero
400124e4:	003f4806 	br	40012208 <__alt_data_end+0xc0012208>
400124e8:	10e3c83a 	sub	r17,r2,r3
400124ec:	9448983a 	sll	r4,r18,r17
400124f0:	003d3206 	br	400119bc <__alt_data_end+0xc00119bc>
400124f4:	d8000e15 	stw	zero,56(sp)
400124f8:	003d7506 	br	40011ad0 <__alt_data_end+0xc0011ad0>
400124fc:	b005883a 	mov	r2,r22
40012500:	003f4506 	br	40012218 <__alt_data_end+0xc0012218>
40012504:	dc000915 	stw	r16,36(sp)
40012508:	d9800a17 	ldw	r6,40(sp)
4001250c:	d9400917 	ldw	r5,36(sp)
40012510:	e009883a 	mov	r4,fp
40012514:	0014a800 	call	40014a80 <__pow5mult>
40012518:	1021883a 	mov	r16,r2
4001251c:	003f5a06 	br	40012288 <__alt_data_end+0xc0012288>
40012520:	01c00044 	movi	r7,1
40012524:	d9c00b15 	stw	r7,44(sp)
40012528:	d8802217 	ldw	r2,136(sp)
4001252c:	0081280e 	bge	zero,r2,400129d0 <_dtoa_r+0x11b0>
40012530:	100d883a 	mov	r6,r2
40012534:	1021883a 	mov	r16,r2
40012538:	d8800c15 	stw	r2,48(sp)
4001253c:	d8800615 	stw	r2,24(sp)
40012540:	003d8806 	br	40011b64 <__alt_data_end+0xc0011b64>
40012544:	d8800617 	ldw	r2,24(sp)
40012548:	00be9b16 	blt	zero,r2,40011fb8 <__alt_data_end+0xc0011fb8>
4001254c:	10010f1e 	bne	r2,zero,4001298c <_dtoa_r+0x116c>
40012550:	880b883a 	mov	r5,r17
40012554:	000d883a 	mov	r6,zero
40012558:	01d00534 	movhi	r7,16404
4001255c:	8009883a 	mov	r4,r16
40012560:	000db940 	call	4000db94 <__muldf3>
40012564:	900d883a 	mov	r6,r18
40012568:	980f883a 	mov	r7,r19
4001256c:	1009883a 	mov	r4,r2
40012570:	180b883a 	mov	r5,r3
40012574:	00187840 	call	40018784 <__gedf2>
40012578:	002b883a 	mov	r21,zero
4001257c:	0023883a 	mov	r17,zero
40012580:	1000bf16 	blt	r2,zero,40012880 <_dtoa_r+0x1060>
40012584:	d9802217 	ldw	r6,136(sp)
40012588:	ddc00717 	ldw	r23,28(sp)
4001258c:	018c303a 	nor	r6,zero,r6
40012590:	d9800515 	stw	r6,20(sp)
40012594:	a80b883a 	mov	r5,r21
40012598:	e009883a 	mov	r4,fp
4001259c:	00144e80 	call	400144e8 <_Bfree>
400125a0:	883e4926 	beq	r17,zero,40011ec8 <__alt_data_end+0xc0011ec8>
400125a4:	003fad06 	br	4001245c <__alt_data_end+0xc001245c>
400125a8:	d9c01117 	ldw	r7,68(sp)
400125ac:	3801bc26 	beq	r7,zero,40012ca0 <_dtoa_r+0x1480>
400125b0:	10810cc4 	addi	r2,r2,1075
400125b4:	dd400a17 	ldw	r21,40(sp)
400125b8:	dd000817 	ldw	r20,32(sp)
400125bc:	003f0a06 	br	400121e8 <__alt_data_end+0xc00121e8>
400125c0:	00800704 	movi	r2,28
400125c4:	d9000817 	ldw	r4,32(sp)
400125c8:	a0a9883a 	add	r20,r20,r2
400125cc:	b0ad883a 	add	r22,r22,r2
400125d0:	2089883a 	add	r4,r4,r2
400125d4:	d9000815 	stw	r4,32(sp)
400125d8:	003f5106 	br	40012320 <__alt_data_end+0xc0012320>
400125dc:	d8c00317 	ldw	r3,12(sp)
400125e0:	b8c1fc0e 	bge	r23,r3,40012dd4 <_dtoa_r+0x15b4>
400125e4:	0027883a 	mov	r19,zero
400125e8:	b805883a 	mov	r2,r23
400125ec:	003f3e06 	br	400122e8 <__alt_data_end+0xc00122e8>
400125f0:	880b883a 	mov	r5,r17
400125f4:	e009883a 	mov	r4,fp
400125f8:	000f883a 	mov	r7,zero
400125fc:	01800284 	movi	r6,10
40012600:	00145100 	call	40014510 <__multadd>
40012604:	d9000c17 	ldw	r4,48(sp)
40012608:	1023883a 	mov	r17,r2
4001260c:	0102040e 	bge	zero,r4,40012e20 <_dtoa_r+0x1600>
40012610:	d9000615 	stw	r4,24(sp)
40012614:	0500050e 	bge	zero,r20,4001262c <_dtoa_r+0xe0c>
40012618:	880b883a 	mov	r5,r17
4001261c:	a00d883a 	mov	r6,r20
40012620:	e009883a 	mov	r4,fp
40012624:	0014bc00 	call	40014bc0 <__lshift>
40012628:	1023883a 	mov	r17,r2
4001262c:	9801241e 	bne	r19,zero,40012ac0 <_dtoa_r+0x12a0>
40012630:	8829883a 	mov	r20,r17
40012634:	d9000617 	ldw	r4,24(sp)
40012638:	dcc00717 	ldw	r19,28(sp)
4001263c:	9480004c 	andi	r18,r18,1
40012640:	20bfffc4 	addi	r2,r4,-1
40012644:	9885883a 	add	r2,r19,r2
40012648:	d8800415 	stw	r2,16(sp)
4001264c:	dc800615 	stw	r18,24(sp)
40012650:	a80b883a 	mov	r5,r21
40012654:	8009883a 	mov	r4,r16
40012658:	00116200 	call	40011620 <quorem>
4001265c:	880b883a 	mov	r5,r17
40012660:	8009883a 	mov	r4,r16
40012664:	102f883a 	mov	r23,r2
40012668:	0014d080 	call	40014d08 <__mcmp>
4001266c:	a80b883a 	mov	r5,r21
40012670:	a00d883a 	mov	r6,r20
40012674:	e009883a 	mov	r4,fp
40012678:	102d883a 	mov	r22,r2
4001267c:	0014d680 	call	40014d68 <__mdiff>
40012680:	1007883a 	mov	r3,r2
40012684:	10800317 	ldw	r2,12(r2)
40012688:	bc800c04 	addi	r18,r23,48
4001268c:	180b883a 	mov	r5,r3
40012690:	10004e1e 	bne	r2,zero,400127cc <_dtoa_r+0xfac>
40012694:	8009883a 	mov	r4,r16
40012698:	d8c01615 	stw	r3,88(sp)
4001269c:	0014d080 	call	40014d08 <__mcmp>
400126a0:	d8c01617 	ldw	r3,88(sp)
400126a4:	e009883a 	mov	r4,fp
400126a8:	d8801615 	stw	r2,88(sp)
400126ac:	180b883a 	mov	r5,r3
400126b0:	00144e80 	call	400144e8 <_Bfree>
400126b4:	d8801617 	ldw	r2,88(sp)
400126b8:	1000041e 	bne	r2,zero,400126cc <_dtoa_r+0xeac>
400126bc:	d9800317 	ldw	r6,12(sp)
400126c0:	3000021e 	bne	r6,zero,400126cc <_dtoa_r+0xeac>
400126c4:	d8c00617 	ldw	r3,24(sp)
400126c8:	18003726 	beq	r3,zero,400127a8 <_dtoa_r+0xf88>
400126cc:	b0002016 	blt	r22,zero,40012750 <_dtoa_r+0xf30>
400126d0:	b000041e 	bne	r22,zero,400126e4 <_dtoa_r+0xec4>
400126d4:	d9000317 	ldw	r4,12(sp)
400126d8:	2000021e 	bne	r4,zero,400126e4 <_dtoa_r+0xec4>
400126dc:	d8c00617 	ldw	r3,24(sp)
400126e0:	18001b26 	beq	r3,zero,40012750 <_dtoa_r+0xf30>
400126e4:	00810716 	blt	zero,r2,40012b04 <_dtoa_r+0x12e4>
400126e8:	d8c00417 	ldw	r3,16(sp)
400126ec:	9d800044 	addi	r22,r19,1
400126f0:	9c800005 	stb	r18,0(r19)
400126f4:	b02f883a 	mov	r23,r22
400126f8:	98c10626 	beq	r19,r3,40012b14 <_dtoa_r+0x12f4>
400126fc:	800b883a 	mov	r5,r16
40012700:	000f883a 	mov	r7,zero
40012704:	01800284 	movi	r6,10
40012708:	e009883a 	mov	r4,fp
4001270c:	00145100 	call	40014510 <__multadd>
40012710:	1021883a 	mov	r16,r2
40012714:	000f883a 	mov	r7,zero
40012718:	01800284 	movi	r6,10
4001271c:	880b883a 	mov	r5,r17
40012720:	e009883a 	mov	r4,fp
40012724:	8d002526 	beq	r17,r20,400127bc <_dtoa_r+0xf9c>
40012728:	00145100 	call	40014510 <__multadd>
4001272c:	a00b883a 	mov	r5,r20
40012730:	000f883a 	mov	r7,zero
40012734:	01800284 	movi	r6,10
40012738:	e009883a 	mov	r4,fp
4001273c:	1023883a 	mov	r17,r2
40012740:	00145100 	call	40014510 <__multadd>
40012744:	1029883a 	mov	r20,r2
40012748:	b027883a 	mov	r19,r22
4001274c:	003fc006 	br	40012650 <__alt_data_end+0xc0012650>
40012750:	9011883a 	mov	r8,r18
40012754:	00800e0e 	bge	zero,r2,40012790 <_dtoa_r+0xf70>
40012758:	800b883a 	mov	r5,r16
4001275c:	01800044 	movi	r6,1
40012760:	e009883a 	mov	r4,fp
40012764:	da001715 	stw	r8,92(sp)
40012768:	0014bc00 	call	40014bc0 <__lshift>
4001276c:	a80b883a 	mov	r5,r21
40012770:	1009883a 	mov	r4,r2
40012774:	1021883a 	mov	r16,r2
40012778:	0014d080 	call	40014d08 <__mcmp>
4001277c:	da001717 	ldw	r8,92(sp)
40012780:	0081960e 	bge	zero,r2,40012ddc <_dtoa_r+0x15bc>
40012784:	00800e44 	movi	r2,57
40012788:	40817026 	beq	r8,r2,40012d4c <_dtoa_r+0x152c>
4001278c:	ba000c44 	addi	r8,r23,49
40012790:	8825883a 	mov	r18,r17
40012794:	9dc00044 	addi	r23,r19,1
40012798:	9a000005 	stb	r8,0(r19)
4001279c:	a023883a 	mov	r17,r20
400127a0:	dc000915 	stw	r16,36(sp)
400127a4:	003f2406 	br	40012438 <__alt_data_end+0xc0012438>
400127a8:	00800e44 	movi	r2,57
400127ac:	9011883a 	mov	r8,r18
400127b0:	90816626 	beq	r18,r2,40012d4c <_dtoa_r+0x152c>
400127b4:	05bff516 	blt	zero,r22,4001278c <__alt_data_end+0xc001278c>
400127b8:	003ff506 	br	40012790 <__alt_data_end+0xc0012790>
400127bc:	00145100 	call	40014510 <__multadd>
400127c0:	1023883a 	mov	r17,r2
400127c4:	1029883a 	mov	r20,r2
400127c8:	003fdf06 	br	40012748 <__alt_data_end+0xc0012748>
400127cc:	e009883a 	mov	r4,fp
400127d0:	00144e80 	call	400144e8 <_Bfree>
400127d4:	00800044 	movi	r2,1
400127d8:	003fbc06 	br	400126cc <__alt_data_end+0xc00126cc>
400127dc:	a80b883a 	mov	r5,r21
400127e0:	8009883a 	mov	r4,r16
400127e4:	0014d080 	call	40014d08 <__mcmp>
400127e8:	103edb0e 	bge	r2,zero,40012358 <__alt_data_end+0xc0012358>
400127ec:	800b883a 	mov	r5,r16
400127f0:	000f883a 	mov	r7,zero
400127f4:	01800284 	movi	r6,10
400127f8:	e009883a 	mov	r4,fp
400127fc:	00145100 	call	40014510 <__multadd>
40012800:	1021883a 	mov	r16,r2
40012804:	d8800517 	ldw	r2,20(sp)
40012808:	d8c00b17 	ldw	r3,44(sp)
4001280c:	10bfffc4 	addi	r2,r2,-1
40012810:	d8800515 	stw	r2,20(sp)
40012814:	183f761e 	bne	r3,zero,400125f0 <__alt_data_end+0xc00125f0>
40012818:	d9000c17 	ldw	r4,48(sp)
4001281c:	0101730e 	bge	zero,r4,40012dec <_dtoa_r+0x15cc>
40012820:	d9000615 	stw	r4,24(sp)
40012824:	003ed006 	br	40012368 <__alt_data_end+0xc0012368>
40012828:	00800084 	movi	r2,2
4001282c:	3081861e 	bne	r6,r2,40012e48 <_dtoa_r+0x1628>
40012830:	d8000b15 	stw	zero,44(sp)
40012834:	003f3c06 	br	40012528 <__alt_data_end+0xc0012528>
40012838:	dc000917 	ldw	r16,36(sp)
4001283c:	003e9206 	br	40012288 <__alt_data_end+0xc0012288>
40012840:	d9c00317 	ldw	r7,12(sp)
40012844:	00800084 	movi	r2,2
40012848:	11fec50e 	bge	r2,r7,40012360 <__alt_data_end+0xc0012360>
4001284c:	d9000617 	ldw	r4,24(sp)
40012850:	20013c1e 	bne	r4,zero,40012d44 <_dtoa_r+0x1524>
40012854:	a80b883a 	mov	r5,r21
40012858:	000f883a 	mov	r7,zero
4001285c:	01800144 	movi	r6,5
40012860:	e009883a 	mov	r4,fp
40012864:	00145100 	call	40014510 <__multadd>
40012868:	100b883a 	mov	r5,r2
4001286c:	8009883a 	mov	r4,r16
40012870:	102b883a 	mov	r21,r2
40012874:	0014d080 	call	40014d08 <__mcmp>
40012878:	dc000915 	stw	r16,36(sp)
4001287c:	00bf410e 	bge	zero,r2,40012584 <__alt_data_end+0xc0012584>
40012880:	d9c00717 	ldw	r7,28(sp)
40012884:	00800c44 	movi	r2,49
40012888:	38800005 	stb	r2,0(r7)
4001288c:	d8800517 	ldw	r2,20(sp)
40012890:	3dc00044 	addi	r23,r7,1
40012894:	10800044 	addi	r2,r2,1
40012898:	d8800515 	stw	r2,20(sp)
4001289c:	003f3d06 	br	40012594 <__alt_data_end+0xc0012594>
400128a0:	d9800517 	ldw	r6,20(sp)
400128a4:	d9c00717 	ldw	r7,28(sp)
400128a8:	00800c44 	movi	r2,49
400128ac:	31800044 	addi	r6,r6,1
400128b0:	d9800515 	stw	r6,20(sp)
400128b4:	38800005 	stb	r2,0(r7)
400128b8:	003edf06 	br	40012438 <__alt_data_end+0xc0012438>
400128bc:	d8000b15 	stw	zero,44(sp)
400128c0:	003c9f06 	br	40011b40 <__alt_data_end+0xc0011b40>
400128c4:	903e7e1e 	bne	r18,zero,400122c0 <__alt_data_end+0xc00122c0>
400128c8:	00800434 	movhi	r2,16
400128cc:	10bfffc4 	addi	r2,r2,-1
400128d0:	9884703a 	and	r2,r19,r2
400128d4:	1000ea1e 	bne	r2,zero,40012c80 <_dtoa_r+0x1460>
400128d8:	9cdffc2c 	andhi	r19,r19,32752
400128dc:	9800e826 	beq	r19,zero,40012c80 <_dtoa_r+0x1460>
400128e0:	d9c00817 	ldw	r7,32(sp)
400128e4:	b5800044 	addi	r22,r22,1
400128e8:	04c00044 	movi	r19,1
400128ec:	39c00044 	addi	r7,r7,1
400128f0:	d9c00815 	stw	r7,32(sp)
400128f4:	d8800d17 	ldw	r2,52(sp)
400128f8:	103e721e 	bne	r2,zero,400122c4 <__alt_data_end+0xc00122c4>
400128fc:	00800044 	movi	r2,1
40012900:	003e7906 	br	400122e8 <__alt_data_end+0xc00122e8>
40012904:	8009883a 	mov	r4,r16
40012908:	00192d00 	call	400192d0 <__floatsidf>
4001290c:	d9800f17 	ldw	r6,60(sp)
40012910:	d9c01017 	ldw	r7,64(sp)
40012914:	1009883a 	mov	r4,r2
40012918:	180b883a 	mov	r5,r3
4001291c:	000db940 	call	4000db94 <__muldf3>
40012920:	000d883a 	mov	r6,zero
40012924:	01d00734 	movhi	r7,16412
40012928:	1009883a 	mov	r4,r2
4001292c:	180b883a 	mov	r5,r3
40012930:	000ca000 	call	4000ca00 <__adddf3>
40012934:	047f3034 	movhi	r17,64704
40012938:	1021883a 	mov	r16,r2
4001293c:	1c63883a 	add	r17,r3,r17
40012940:	d9000f17 	ldw	r4,60(sp)
40012944:	d9401017 	ldw	r5,64(sp)
40012948:	000d883a 	mov	r6,zero
4001294c:	01d00534 	movhi	r7,16404
40012950:	00189540 	call	40018954 <__subdf3>
40012954:	800d883a 	mov	r6,r16
40012958:	880f883a 	mov	r7,r17
4001295c:	1009883a 	mov	r4,r2
40012960:	180b883a 	mov	r5,r3
40012964:	102b883a 	mov	r21,r2
40012968:	1829883a 	mov	r20,r3
4001296c:	00187840 	call	40018784 <__gedf2>
40012970:	00806c16 	blt	zero,r2,40012b24 <_dtoa_r+0x1304>
40012974:	89e0003c 	xorhi	r7,r17,32768
40012978:	800d883a 	mov	r6,r16
4001297c:	a809883a 	mov	r4,r21
40012980:	a00b883a 	mov	r5,r20
40012984:	00188600 	call	40018860 <__ledf2>
40012988:	103d7e0e 	bge	r2,zero,40011f84 <__alt_data_end+0xc0011f84>
4001298c:	002b883a 	mov	r21,zero
40012990:	0023883a 	mov	r17,zero
40012994:	003efb06 	br	40012584 <__alt_data_end+0xc0012584>
40012998:	d8800717 	ldw	r2,28(sp)
4001299c:	003bd006 	br	400118e0 <__alt_data_end+0xc00118e0>
400129a0:	d9000a17 	ldw	r4,40(sp)
400129a4:	d9800d17 	ldw	r6,52(sp)
400129a8:	dd400a15 	stw	r21,40(sp)
400129ac:	a905c83a 	sub	r2,r21,r4
400129b0:	308d883a 	add	r6,r6,r2
400129b4:	d9800d15 	stw	r6,52(sp)
400129b8:	002b883a 	mov	r21,zero
400129bc:	003e0606 	br	400121d8 <__alt_data_end+0xc00121d8>
400129c0:	9023883a 	mov	r17,r18
400129c4:	9829883a 	mov	r20,r19
400129c8:	04000084 	movi	r16,2
400129cc:	003c9206 	br	40011c18 <__alt_data_end+0xc0011c18>
400129d0:	04000044 	movi	r16,1
400129d4:	dc000c15 	stw	r16,48(sp)
400129d8:	dc000615 	stw	r16,24(sp)
400129dc:	dc002215 	stw	r16,136(sp)
400129e0:	e0001115 	stw	zero,68(fp)
400129e4:	000b883a 	mov	r5,zero
400129e8:	003c6906 	br	40011b90 <__alt_data_end+0xc0011b90>
400129ec:	3021883a 	mov	r16,r6
400129f0:	003ffb06 	br	400129e0 <__alt_data_end+0xc00129e0>
400129f4:	1000021e 	bne	r2,zero,40012a00 <_dtoa_r+0x11e0>
400129f8:	4200004c 	andi	r8,r8,1
400129fc:	403e7d1e 	bne	r8,zero,400123f4 <__alt_data_end+0xc00123f4>
40012a00:	01000c04 	movi	r4,48
40012a04:	00000106 	br	40012a0c <_dtoa_r+0x11ec>
40012a08:	102f883a 	mov	r23,r2
40012a0c:	b8bfffc4 	addi	r2,r23,-1
40012a10:	10c00007 	ldb	r3,0(r2)
40012a14:	193ffc26 	beq	r3,r4,40012a08 <__alt_data_end+0xc0012a08>
40012a18:	003e8706 	br	40012438 <__alt_data_end+0xc0012438>
40012a1c:	d8800517 	ldw	r2,20(sp)
40012a20:	00a3c83a 	sub	r17,zero,r2
40012a24:	8800a426 	beq	r17,zero,40012cb8 <_dtoa_r+0x1498>
40012a28:	888003cc 	andi	r2,r17,15
40012a2c:	100490fa 	slli	r2,r2,3
40012a30:	00d000b4 	movhi	r3,16386
40012a34:	18ea6204 	addi	r3,r3,-22136
40012a38:	1885883a 	add	r2,r3,r2
40012a3c:	11800017 	ldw	r6,0(r2)
40012a40:	11c00117 	ldw	r7,4(r2)
40012a44:	9009883a 	mov	r4,r18
40012a48:	980b883a 	mov	r5,r19
40012a4c:	8823d13a 	srai	r17,r17,4
40012a50:	000db940 	call	4000db94 <__muldf3>
40012a54:	d8800f15 	stw	r2,60(sp)
40012a58:	d8c01015 	stw	r3,64(sp)
40012a5c:	8800e826 	beq	r17,zero,40012e00 <_dtoa_r+0x15e0>
40012a60:	051000b4 	movhi	r20,16386
40012a64:	a52a5804 	addi	r20,r20,-22176
40012a68:	04000084 	movi	r16,2
40012a6c:	8980004c 	andi	r6,r17,1
40012a70:	1009883a 	mov	r4,r2
40012a74:	8823d07a 	srai	r17,r17,1
40012a78:	180b883a 	mov	r5,r3
40012a7c:	30000426 	beq	r6,zero,40012a90 <_dtoa_r+0x1270>
40012a80:	a1800017 	ldw	r6,0(r20)
40012a84:	a1c00117 	ldw	r7,4(r20)
40012a88:	84000044 	addi	r16,r16,1
40012a8c:	000db940 	call	4000db94 <__muldf3>
40012a90:	a5000204 	addi	r20,r20,8
40012a94:	883ff51e 	bne	r17,zero,40012a6c <__alt_data_end+0xc0012a6c>
40012a98:	d8800f15 	stw	r2,60(sp)
40012a9c:	d8c01015 	stw	r3,64(sp)
40012aa0:	003c7606 	br	40011c7c <__alt_data_end+0xc0011c7c>
40012aa4:	00c00c04 	movi	r3,48
40012aa8:	10c00005 	stb	r3,0(r2)
40012aac:	d8c00517 	ldw	r3,20(sp)
40012ab0:	bd3fffc3 	ldbu	r20,-1(r23)
40012ab4:	18c00044 	addi	r3,r3,1
40012ab8:	d8c00515 	stw	r3,20(sp)
40012abc:	003db906 	br	400121a4 <__alt_data_end+0xc00121a4>
40012ac0:	89400117 	ldw	r5,4(r17)
40012ac4:	e009883a 	mov	r4,fp
40012ac8:	00144400 	call	40014440 <_Balloc>
40012acc:	89800417 	ldw	r6,16(r17)
40012ad0:	89400304 	addi	r5,r17,12
40012ad4:	11000304 	addi	r4,r2,12
40012ad8:	31800084 	addi	r6,r6,2
40012adc:	318d883a 	add	r6,r6,r6
40012ae0:	318d883a 	add	r6,r6,r6
40012ae4:	1027883a 	mov	r19,r2
40012ae8:	000ecc80 	call	4000ecc8 <memcpy>
40012aec:	01800044 	movi	r6,1
40012af0:	980b883a 	mov	r5,r19
40012af4:	e009883a 	mov	r4,fp
40012af8:	0014bc00 	call	40014bc0 <__lshift>
40012afc:	1029883a 	mov	r20,r2
40012b00:	003ecc06 	br	40012634 <__alt_data_end+0xc0012634>
40012b04:	00800e44 	movi	r2,57
40012b08:	90809026 	beq	r18,r2,40012d4c <_dtoa_r+0x152c>
40012b0c:	92000044 	addi	r8,r18,1
40012b10:	003f1f06 	br	40012790 <__alt_data_end+0xc0012790>
40012b14:	9011883a 	mov	r8,r18
40012b18:	8825883a 	mov	r18,r17
40012b1c:	a023883a 	mov	r17,r20
40012b20:	003e2906 	br	400123c8 <__alt_data_end+0xc00123c8>
40012b24:	002b883a 	mov	r21,zero
40012b28:	0023883a 	mov	r17,zero
40012b2c:	003f5406 	br	40012880 <__alt_data_end+0xc0012880>
40012b30:	61bfffc4 	addi	r6,r12,-1
40012b34:	300490fa 	slli	r2,r6,3
40012b38:	00d000b4 	movhi	r3,16386
40012b3c:	18ea6204 	addi	r3,r3,-22136
40012b40:	1885883a 	add	r2,r3,r2
40012b44:	11000017 	ldw	r4,0(r2)
40012b48:	11400117 	ldw	r5,4(r2)
40012b4c:	d8800717 	ldw	r2,28(sp)
40012b50:	880f883a 	mov	r7,r17
40012b54:	d9801215 	stw	r6,72(sp)
40012b58:	800d883a 	mov	r6,r16
40012b5c:	db001615 	stw	r12,88(sp)
40012b60:	15c00044 	addi	r23,r2,1
40012b64:	000db940 	call	4000db94 <__muldf3>
40012b68:	d9401017 	ldw	r5,64(sp)
40012b6c:	d9000f17 	ldw	r4,60(sp)
40012b70:	d8c01515 	stw	r3,84(sp)
40012b74:	d8801415 	stw	r2,80(sp)
40012b78:	00192500 	call	40019250 <__fixdfsi>
40012b7c:	1009883a 	mov	r4,r2
40012b80:	1021883a 	mov	r16,r2
40012b84:	00192d00 	call	400192d0 <__floatsidf>
40012b88:	d9000f17 	ldw	r4,60(sp)
40012b8c:	d9401017 	ldw	r5,64(sp)
40012b90:	100d883a 	mov	r6,r2
40012b94:	180f883a 	mov	r7,r3
40012b98:	00189540 	call	40018954 <__subdf3>
40012b9c:	1829883a 	mov	r20,r3
40012ba0:	d8c00717 	ldw	r3,28(sp)
40012ba4:	84000c04 	addi	r16,r16,48
40012ba8:	1023883a 	mov	r17,r2
40012bac:	1c000005 	stb	r16,0(r3)
40012bb0:	db001617 	ldw	r12,88(sp)
40012bb4:	00800044 	movi	r2,1
40012bb8:	60802226 	beq	r12,r2,40012c44 <_dtoa_r+0x1424>
40012bbc:	d9c00717 	ldw	r7,28(sp)
40012bc0:	8805883a 	mov	r2,r17
40012bc4:	b82b883a 	mov	r21,r23
40012bc8:	3b19883a 	add	r12,r7,r12
40012bcc:	6023883a 	mov	r17,r12
40012bd0:	a007883a 	mov	r3,r20
40012bd4:	dc800f15 	stw	r18,60(sp)
40012bd8:	000d883a 	mov	r6,zero
40012bdc:	01d00934 	movhi	r7,16420
40012be0:	1009883a 	mov	r4,r2
40012be4:	180b883a 	mov	r5,r3
40012be8:	000db940 	call	4000db94 <__muldf3>
40012bec:	180b883a 	mov	r5,r3
40012bf0:	1009883a 	mov	r4,r2
40012bf4:	1829883a 	mov	r20,r3
40012bf8:	1025883a 	mov	r18,r2
40012bfc:	00192500 	call	40019250 <__fixdfsi>
40012c00:	1009883a 	mov	r4,r2
40012c04:	1021883a 	mov	r16,r2
40012c08:	00192d00 	call	400192d0 <__floatsidf>
40012c0c:	100d883a 	mov	r6,r2
40012c10:	180f883a 	mov	r7,r3
40012c14:	9009883a 	mov	r4,r18
40012c18:	a00b883a 	mov	r5,r20
40012c1c:	84000c04 	addi	r16,r16,48
40012c20:	00189540 	call	40018954 <__subdf3>
40012c24:	ad400044 	addi	r21,r21,1
40012c28:	ac3fffc5 	stb	r16,-1(r21)
40012c2c:	ac7fea1e 	bne	r21,r17,40012bd8 <__alt_data_end+0xc0012bd8>
40012c30:	1023883a 	mov	r17,r2
40012c34:	d8801217 	ldw	r2,72(sp)
40012c38:	dc800f17 	ldw	r18,60(sp)
40012c3c:	1829883a 	mov	r20,r3
40012c40:	b8af883a 	add	r23,r23,r2
40012c44:	d9001417 	ldw	r4,80(sp)
40012c48:	d9401517 	ldw	r5,84(sp)
40012c4c:	000d883a 	mov	r6,zero
40012c50:	01cff834 	movhi	r7,16352
40012c54:	000ca000 	call	4000ca00 <__adddf3>
40012c58:	880d883a 	mov	r6,r17
40012c5c:	a00f883a 	mov	r7,r20
40012c60:	1009883a 	mov	r4,r2
40012c64:	180b883a 	mov	r5,r3
40012c68:	00188600 	call	40018860 <__ledf2>
40012c6c:	10003e0e 	bge	r2,zero,40012d68 <_dtoa_r+0x1548>
40012c70:	d9001317 	ldw	r4,76(sp)
40012c74:	bd3fffc3 	ldbu	r20,-1(r23)
40012c78:	d9000515 	stw	r4,20(sp)
40012c7c:	003d3b06 	br	4001216c <__alt_data_end+0xc001216c>
40012c80:	0027883a 	mov	r19,zero
40012c84:	003f1b06 	br	400128f4 <__alt_data_end+0xc00128f4>
40012c88:	d8800817 	ldw	r2,32(sp)
40012c8c:	11e9c83a 	sub	r20,r2,r7
40012c90:	0005883a 	mov	r2,zero
40012c94:	003d5406 	br	400121e8 <__alt_data_end+0xc00121e8>
40012c98:	00800044 	movi	r2,1
40012c9c:	003dc706 	br	400123bc <__alt_data_end+0xc00123bc>
40012ca0:	d8c00217 	ldw	r3,8(sp)
40012ca4:	00800d84 	movi	r2,54
40012ca8:	dd400a17 	ldw	r21,40(sp)
40012cac:	10c5c83a 	sub	r2,r2,r3
40012cb0:	dd000817 	ldw	r20,32(sp)
40012cb4:	003d4c06 	br	400121e8 <__alt_data_end+0xc00121e8>
40012cb8:	dc800f15 	stw	r18,60(sp)
40012cbc:	dcc01015 	stw	r19,64(sp)
40012cc0:	04000084 	movi	r16,2
40012cc4:	003bed06 	br	40011c7c <__alt_data_end+0xc0011c7c>
40012cc8:	d9000617 	ldw	r4,24(sp)
40012ccc:	203f0d26 	beq	r4,zero,40012904 <__alt_data_end+0xc0012904>
40012cd0:	d9800c17 	ldw	r6,48(sp)
40012cd4:	01bcab0e 	bge	zero,r6,40011f84 <__alt_data_end+0xc0011f84>
40012cd8:	d9401017 	ldw	r5,64(sp)
40012cdc:	d9000f17 	ldw	r4,60(sp)
40012ce0:	000d883a 	mov	r6,zero
40012ce4:	01d00934 	movhi	r7,16420
40012ce8:	000db940 	call	4000db94 <__muldf3>
40012cec:	81000044 	addi	r4,r16,1
40012cf0:	d8800f15 	stw	r2,60(sp)
40012cf4:	d8c01015 	stw	r3,64(sp)
40012cf8:	00192d00 	call	400192d0 <__floatsidf>
40012cfc:	d9800f17 	ldw	r6,60(sp)
40012d00:	d9c01017 	ldw	r7,64(sp)
40012d04:	1009883a 	mov	r4,r2
40012d08:	180b883a 	mov	r5,r3
40012d0c:	000db940 	call	4000db94 <__muldf3>
40012d10:	01d00734 	movhi	r7,16412
40012d14:	000d883a 	mov	r6,zero
40012d18:	1009883a 	mov	r4,r2
40012d1c:	180b883a 	mov	r5,r3
40012d20:	000ca000 	call	4000ca00 <__adddf3>
40012d24:	d9c00517 	ldw	r7,20(sp)
40012d28:	047f3034 	movhi	r17,64704
40012d2c:	1021883a 	mov	r16,r2
40012d30:	39ffffc4 	addi	r7,r7,-1
40012d34:	d9c01315 	stw	r7,76(sp)
40012d38:	1c63883a 	add	r17,r3,r17
40012d3c:	db000c17 	ldw	r12,48(sp)
40012d40:	003bea06 	br	40011cec <__alt_data_end+0xc0011cec>
40012d44:	dc000915 	stw	r16,36(sp)
40012d48:	003e0e06 	br	40012584 <__alt_data_end+0xc0012584>
40012d4c:	01000e44 	movi	r4,57
40012d50:	8825883a 	mov	r18,r17
40012d54:	9dc00044 	addi	r23,r19,1
40012d58:	99000005 	stb	r4,0(r19)
40012d5c:	a023883a 	mov	r17,r20
40012d60:	dc000915 	stw	r16,36(sp)
40012d64:	003da406 	br	400123f8 <__alt_data_end+0xc00123f8>
40012d68:	d9801417 	ldw	r6,80(sp)
40012d6c:	d9c01517 	ldw	r7,84(sp)
40012d70:	0009883a 	mov	r4,zero
40012d74:	014ff834 	movhi	r5,16352
40012d78:	00189540 	call	40018954 <__subdf3>
40012d7c:	880d883a 	mov	r6,r17
40012d80:	a00f883a 	mov	r7,r20
40012d84:	1009883a 	mov	r4,r2
40012d88:	180b883a 	mov	r5,r3
40012d8c:	00187840 	call	40018784 <__gedf2>
40012d90:	00bc7c0e 	bge	zero,r2,40011f84 <__alt_data_end+0xc0011f84>
40012d94:	01000c04 	movi	r4,48
40012d98:	00000106 	br	40012da0 <_dtoa_r+0x1580>
40012d9c:	102f883a 	mov	r23,r2
40012da0:	b8bfffc4 	addi	r2,r23,-1
40012da4:	10c00007 	ldb	r3,0(r2)
40012da8:	193ffc26 	beq	r3,r4,40012d9c <__alt_data_end+0xc0012d9c>
40012dac:	d9801317 	ldw	r6,76(sp)
40012db0:	d9800515 	stw	r6,20(sp)
40012db4:	003c4406 	br	40011ec8 <__alt_data_end+0xc0011ec8>
40012db8:	d9801317 	ldw	r6,76(sp)
40012dbc:	d9800515 	stw	r6,20(sp)
40012dc0:	003cea06 	br	4001216c <__alt_data_end+0xc001216c>
40012dc4:	dd800f17 	ldw	r22,60(sp)
40012dc8:	dcc01017 	ldw	r19,64(sp)
40012dcc:	dc801217 	ldw	r18,72(sp)
40012dd0:	003c6c06 	br	40011f84 <__alt_data_end+0xc0011f84>
40012dd4:	903e031e 	bne	r18,zero,400125e4 <__alt_data_end+0xc00125e4>
40012dd8:	003ebb06 	br	400128c8 <__alt_data_end+0xc00128c8>
40012ddc:	103e6c1e 	bne	r2,zero,40012790 <__alt_data_end+0xc0012790>
40012de0:	4080004c 	andi	r2,r8,1
40012de4:	103e6a26 	beq	r2,zero,40012790 <__alt_data_end+0xc0012790>
40012de8:	003e6606 	br	40012784 <__alt_data_end+0xc0012784>
40012dec:	d8c00317 	ldw	r3,12(sp)
40012df0:	00800084 	movi	r2,2
40012df4:	10c02916 	blt	r2,r3,40012e9c <_dtoa_r+0x167c>
40012df8:	d9000c17 	ldw	r4,48(sp)
40012dfc:	003e8806 	br	40012820 <__alt_data_end+0xc0012820>
40012e00:	04000084 	movi	r16,2
40012e04:	003b9d06 	br	40011c7c <__alt_data_end+0xc0011c7c>
40012e08:	d9001317 	ldw	r4,76(sp)
40012e0c:	d9000515 	stw	r4,20(sp)
40012e10:	003cd606 	br	4001216c <__alt_data_end+0xc001216c>
40012e14:	d8801317 	ldw	r2,76(sp)
40012e18:	d8800515 	stw	r2,20(sp)
40012e1c:	003c2a06 	br	40011ec8 <__alt_data_end+0xc0011ec8>
40012e20:	d9800317 	ldw	r6,12(sp)
40012e24:	00800084 	movi	r2,2
40012e28:	11801516 	blt	r2,r6,40012e80 <_dtoa_r+0x1660>
40012e2c:	d9c00c17 	ldw	r7,48(sp)
40012e30:	d9c00615 	stw	r7,24(sp)
40012e34:	003df706 	br	40012614 <__alt_data_end+0xc0012614>
40012e38:	193d3926 	beq	r3,r4,40012320 <__alt_data_end+0xc0012320>
40012e3c:	00c00f04 	movi	r3,60
40012e40:	1885c83a 	sub	r2,r3,r2
40012e44:	003ddf06 	br	400125c4 <__alt_data_end+0xc00125c4>
40012e48:	e009883a 	mov	r4,fp
40012e4c:	e0001115 	stw	zero,68(fp)
40012e50:	000b883a 	mov	r5,zero
40012e54:	00144400 	call	40014440 <_Balloc>
40012e58:	d8800715 	stw	r2,28(sp)
40012e5c:	d8c00717 	ldw	r3,28(sp)
40012e60:	00bfffc4 	movi	r2,-1
40012e64:	01000044 	movi	r4,1
40012e68:	d8800c15 	stw	r2,48(sp)
40012e6c:	e0c01015 	stw	r3,64(fp)
40012e70:	d9000b15 	stw	r4,44(sp)
40012e74:	d8800615 	stw	r2,24(sp)
40012e78:	d8002215 	stw	zero,136(sp)
40012e7c:	003c4106 	br	40011f84 <__alt_data_end+0xc0011f84>
40012e80:	d8c00c17 	ldw	r3,48(sp)
40012e84:	d8c00615 	stw	r3,24(sp)
40012e88:	003e7006 	br	4001284c <__alt_data_end+0xc001284c>
40012e8c:	04400044 	movi	r17,1
40012e90:	003b2006 	br	40011b14 <__alt_data_end+0xc0011b14>
40012e94:	000b883a 	mov	r5,zero
40012e98:	003b3d06 	br	40011b90 <__alt_data_end+0xc0011b90>
40012e9c:	d8800c17 	ldw	r2,48(sp)
40012ea0:	d8800615 	stw	r2,24(sp)
40012ea4:	003e6906 	br	4001284c <__alt_data_end+0xc001284c>

40012ea8 <__sflush_r>:
40012ea8:	2880030b 	ldhu	r2,12(r5)
40012eac:	defffb04 	addi	sp,sp,-20
40012eb0:	dcc00315 	stw	r19,12(sp)
40012eb4:	dc400115 	stw	r17,4(sp)
40012eb8:	dfc00415 	stw	ra,16(sp)
40012ebc:	dc800215 	stw	r18,8(sp)
40012ec0:	dc000015 	stw	r16,0(sp)
40012ec4:	10c0020c 	andi	r3,r2,8
40012ec8:	2823883a 	mov	r17,r5
40012ecc:	2027883a 	mov	r19,r4
40012ed0:	1800311e 	bne	r3,zero,40012f98 <__sflush_r+0xf0>
40012ed4:	28c00117 	ldw	r3,4(r5)
40012ed8:	10820014 	ori	r2,r2,2048
40012edc:	2880030d 	sth	r2,12(r5)
40012ee0:	00c04b0e 	bge	zero,r3,40013010 <__sflush_r+0x168>
40012ee4:	8a000a17 	ldw	r8,40(r17)
40012ee8:	40002326 	beq	r8,zero,40012f78 <__sflush_r+0xd0>
40012eec:	9c000017 	ldw	r16,0(r19)
40012ef0:	10c4000c 	andi	r3,r2,4096
40012ef4:	98000015 	stw	zero,0(r19)
40012ef8:	18004826 	beq	r3,zero,4001301c <__sflush_r+0x174>
40012efc:	89801417 	ldw	r6,80(r17)
40012f00:	10c0010c 	andi	r3,r2,4
40012f04:	18000626 	beq	r3,zero,40012f20 <__sflush_r+0x78>
40012f08:	88c00117 	ldw	r3,4(r17)
40012f0c:	88800c17 	ldw	r2,48(r17)
40012f10:	30cdc83a 	sub	r6,r6,r3
40012f14:	10000226 	beq	r2,zero,40012f20 <__sflush_r+0x78>
40012f18:	88800f17 	ldw	r2,60(r17)
40012f1c:	308dc83a 	sub	r6,r6,r2
40012f20:	89400717 	ldw	r5,28(r17)
40012f24:	000f883a 	mov	r7,zero
40012f28:	9809883a 	mov	r4,r19
40012f2c:	403ee83a 	callr	r8
40012f30:	00ffffc4 	movi	r3,-1
40012f34:	10c04426 	beq	r2,r3,40013048 <__sflush_r+0x1a0>
40012f38:	88c0030b 	ldhu	r3,12(r17)
40012f3c:	89000417 	ldw	r4,16(r17)
40012f40:	88000115 	stw	zero,4(r17)
40012f44:	197dffcc 	andi	r5,r3,63487
40012f48:	8940030d 	sth	r5,12(r17)
40012f4c:	89000015 	stw	r4,0(r17)
40012f50:	18c4000c 	andi	r3,r3,4096
40012f54:	18002c1e 	bne	r3,zero,40013008 <__sflush_r+0x160>
40012f58:	89400c17 	ldw	r5,48(r17)
40012f5c:	9c000015 	stw	r16,0(r19)
40012f60:	28000526 	beq	r5,zero,40012f78 <__sflush_r+0xd0>
40012f64:	88801004 	addi	r2,r17,64
40012f68:	28800226 	beq	r5,r2,40012f74 <__sflush_r+0xcc>
40012f6c:	9809883a 	mov	r4,r19
40012f70:	00136140 	call	40013614 <_free_r>
40012f74:	88000c15 	stw	zero,48(r17)
40012f78:	0005883a 	mov	r2,zero
40012f7c:	dfc00417 	ldw	ra,16(sp)
40012f80:	dcc00317 	ldw	r19,12(sp)
40012f84:	dc800217 	ldw	r18,8(sp)
40012f88:	dc400117 	ldw	r17,4(sp)
40012f8c:	dc000017 	ldw	r16,0(sp)
40012f90:	dec00504 	addi	sp,sp,20
40012f94:	f800283a 	ret
40012f98:	2c800417 	ldw	r18,16(r5)
40012f9c:	903ff626 	beq	r18,zero,40012f78 <__alt_data_end+0xc0012f78>
40012fa0:	2c000017 	ldw	r16,0(r5)
40012fa4:	108000cc 	andi	r2,r2,3
40012fa8:	2c800015 	stw	r18,0(r5)
40012fac:	84a1c83a 	sub	r16,r16,r18
40012fb0:	1000131e 	bne	r2,zero,40013000 <__sflush_r+0x158>
40012fb4:	28800517 	ldw	r2,20(r5)
40012fb8:	88800215 	stw	r2,8(r17)
40012fbc:	04000316 	blt	zero,r16,40012fcc <__sflush_r+0x124>
40012fc0:	003fed06 	br	40012f78 <__alt_data_end+0xc0012f78>
40012fc4:	90a5883a 	add	r18,r18,r2
40012fc8:	043feb0e 	bge	zero,r16,40012f78 <__alt_data_end+0xc0012f78>
40012fcc:	88800917 	ldw	r2,36(r17)
40012fd0:	89400717 	ldw	r5,28(r17)
40012fd4:	800f883a 	mov	r7,r16
40012fd8:	900d883a 	mov	r6,r18
40012fdc:	9809883a 	mov	r4,r19
40012fe0:	103ee83a 	callr	r2
40012fe4:	80a1c83a 	sub	r16,r16,r2
40012fe8:	00bff616 	blt	zero,r2,40012fc4 <__alt_data_end+0xc0012fc4>
40012fec:	88c0030b 	ldhu	r3,12(r17)
40012ff0:	00bfffc4 	movi	r2,-1
40012ff4:	18c01014 	ori	r3,r3,64
40012ff8:	88c0030d 	sth	r3,12(r17)
40012ffc:	003fdf06 	br	40012f7c <__alt_data_end+0xc0012f7c>
40013000:	0005883a 	mov	r2,zero
40013004:	003fec06 	br	40012fb8 <__alt_data_end+0xc0012fb8>
40013008:	88801415 	stw	r2,80(r17)
4001300c:	003fd206 	br	40012f58 <__alt_data_end+0xc0012f58>
40013010:	28c00f17 	ldw	r3,60(r5)
40013014:	00ffb316 	blt	zero,r3,40012ee4 <__alt_data_end+0xc0012ee4>
40013018:	003fd706 	br	40012f78 <__alt_data_end+0xc0012f78>
4001301c:	89400717 	ldw	r5,28(r17)
40013020:	000d883a 	mov	r6,zero
40013024:	01c00044 	movi	r7,1
40013028:	9809883a 	mov	r4,r19
4001302c:	403ee83a 	callr	r8
40013030:	100d883a 	mov	r6,r2
40013034:	00bfffc4 	movi	r2,-1
40013038:	30801426 	beq	r6,r2,4001308c <__sflush_r+0x1e4>
4001303c:	8880030b 	ldhu	r2,12(r17)
40013040:	8a000a17 	ldw	r8,40(r17)
40013044:	003fae06 	br	40012f00 <__alt_data_end+0xc0012f00>
40013048:	98c00017 	ldw	r3,0(r19)
4001304c:	183fba26 	beq	r3,zero,40012f38 <__alt_data_end+0xc0012f38>
40013050:	01000744 	movi	r4,29
40013054:	19000626 	beq	r3,r4,40013070 <__sflush_r+0x1c8>
40013058:	01000584 	movi	r4,22
4001305c:	19000426 	beq	r3,r4,40013070 <__sflush_r+0x1c8>
40013060:	88c0030b 	ldhu	r3,12(r17)
40013064:	18c01014 	ori	r3,r3,64
40013068:	88c0030d 	sth	r3,12(r17)
4001306c:	003fc306 	br	40012f7c <__alt_data_end+0xc0012f7c>
40013070:	8880030b 	ldhu	r2,12(r17)
40013074:	88c00417 	ldw	r3,16(r17)
40013078:	88000115 	stw	zero,4(r17)
4001307c:	10bdffcc 	andi	r2,r2,63487
40013080:	8880030d 	sth	r2,12(r17)
40013084:	88c00015 	stw	r3,0(r17)
40013088:	003fb306 	br	40012f58 <__alt_data_end+0xc0012f58>
4001308c:	98800017 	ldw	r2,0(r19)
40013090:	103fea26 	beq	r2,zero,4001303c <__alt_data_end+0xc001303c>
40013094:	00c00744 	movi	r3,29
40013098:	10c00226 	beq	r2,r3,400130a4 <__sflush_r+0x1fc>
4001309c:	00c00584 	movi	r3,22
400130a0:	10c0031e 	bne	r2,r3,400130b0 <__sflush_r+0x208>
400130a4:	9c000015 	stw	r16,0(r19)
400130a8:	0005883a 	mov	r2,zero
400130ac:	003fb306 	br	40012f7c <__alt_data_end+0xc0012f7c>
400130b0:	88c0030b 	ldhu	r3,12(r17)
400130b4:	3005883a 	mov	r2,r6
400130b8:	18c01014 	ori	r3,r3,64
400130bc:	88c0030d 	sth	r3,12(r17)
400130c0:	003fae06 	br	40012f7c <__alt_data_end+0xc0012f7c>

400130c4 <_fflush_r>:
400130c4:	defffd04 	addi	sp,sp,-12
400130c8:	dc000115 	stw	r16,4(sp)
400130cc:	dfc00215 	stw	ra,8(sp)
400130d0:	2021883a 	mov	r16,r4
400130d4:	20000226 	beq	r4,zero,400130e0 <_fflush_r+0x1c>
400130d8:	20800e17 	ldw	r2,56(r4)
400130dc:	10000c26 	beq	r2,zero,40013110 <_fflush_r+0x4c>
400130e0:	2880030f 	ldh	r2,12(r5)
400130e4:	1000051e 	bne	r2,zero,400130fc <_fflush_r+0x38>
400130e8:	0005883a 	mov	r2,zero
400130ec:	dfc00217 	ldw	ra,8(sp)
400130f0:	dc000117 	ldw	r16,4(sp)
400130f4:	dec00304 	addi	sp,sp,12
400130f8:	f800283a 	ret
400130fc:	8009883a 	mov	r4,r16
40013100:	dfc00217 	ldw	ra,8(sp)
40013104:	dc000117 	ldw	r16,4(sp)
40013108:	dec00304 	addi	sp,sp,12
4001310c:	0012ea81 	jmpi	40012ea8 <__sflush_r>
40013110:	d9400015 	stw	r5,0(sp)
40013114:	00134a00 	call	400134a0 <__sinit>
40013118:	d9400017 	ldw	r5,0(sp)
4001311c:	003ff006 	br	400130e0 <__alt_data_end+0xc00130e0>

40013120 <fflush>:
40013120:	20000526 	beq	r4,zero,40013138 <fflush+0x18>
40013124:	009000b4 	movhi	r2,16386
40013128:	10ad4704 	addi	r2,r2,-19172
4001312c:	200b883a 	mov	r5,r4
40013130:	11000017 	ldw	r4,0(r2)
40013134:	00130c41 	jmpi	400130c4 <_fflush_r>
40013138:	009000b4 	movhi	r2,16386
4001313c:	10ad4604 	addi	r2,r2,-19176
40013140:	11000017 	ldw	r4,0(r2)
40013144:	01500074 	movhi	r5,16385
40013148:	294c3104 	addi	r5,r5,12484
4001314c:	0013ea41 	jmpi	40013ea4 <_fwalk_reent>

40013150 <__fp_unlock>:
40013150:	0005883a 	mov	r2,zero
40013154:	f800283a 	ret

40013158 <_cleanup_r>:
40013158:	01500074 	movhi	r5,16385
4001315c:	295d7a04 	addi	r5,r5,30184
40013160:	0013ea41 	jmpi	40013ea4 <_fwalk_reent>

40013164 <__sinit.part.1>:
40013164:	defff704 	addi	sp,sp,-36
40013168:	00d00074 	movhi	r3,16385
4001316c:	dfc00815 	stw	ra,32(sp)
40013170:	ddc00715 	stw	r23,28(sp)
40013174:	dd800615 	stw	r22,24(sp)
40013178:	dd400515 	stw	r21,20(sp)
4001317c:	dd000415 	stw	r20,16(sp)
40013180:	dcc00315 	stw	r19,12(sp)
40013184:	dc800215 	stw	r18,8(sp)
40013188:	dc400115 	stw	r17,4(sp)
4001318c:	dc000015 	stw	r16,0(sp)
40013190:	18cc5604 	addi	r3,r3,12632
40013194:	24000117 	ldw	r16,4(r4)
40013198:	20c00f15 	stw	r3,60(r4)
4001319c:	2080bb04 	addi	r2,r4,748
400131a0:	00c000c4 	movi	r3,3
400131a4:	20c0b915 	stw	r3,740(r4)
400131a8:	2080ba15 	stw	r2,744(r4)
400131ac:	2000b815 	stw	zero,736(r4)
400131b0:	05c00204 	movi	r23,8
400131b4:	00800104 	movi	r2,4
400131b8:	2025883a 	mov	r18,r4
400131bc:	b80d883a 	mov	r6,r23
400131c0:	81001704 	addi	r4,r16,92
400131c4:	000b883a 	mov	r5,zero
400131c8:	80000015 	stw	zero,0(r16)
400131cc:	80000115 	stw	zero,4(r16)
400131d0:	80000215 	stw	zero,8(r16)
400131d4:	8080030d 	sth	r2,12(r16)
400131d8:	80001915 	stw	zero,100(r16)
400131dc:	8000038d 	sth	zero,14(r16)
400131e0:	80000415 	stw	zero,16(r16)
400131e4:	80000515 	stw	zero,20(r16)
400131e8:	80000615 	stw	zero,24(r16)
400131ec:	000ee100 	call	4000ee10 <memset>
400131f0:	05900074 	movhi	r22,16385
400131f4:	94400217 	ldw	r17,8(r18)
400131f8:	05500074 	movhi	r21,16385
400131fc:	05100074 	movhi	r20,16385
40013200:	04d00074 	movhi	r19,16385
40013204:	b596df04 	addi	r22,r22,23420
40013208:	ad56f604 	addi	r21,r21,23512
4001320c:	a5171504 	addi	r20,r20,23636
40013210:	9cd72c04 	addi	r19,r19,23728
40013214:	85800815 	stw	r22,32(r16)
40013218:	85400915 	stw	r21,36(r16)
4001321c:	85000a15 	stw	r20,40(r16)
40013220:	84c00b15 	stw	r19,44(r16)
40013224:	84000715 	stw	r16,28(r16)
40013228:	00800284 	movi	r2,10
4001322c:	8880030d 	sth	r2,12(r17)
40013230:	00800044 	movi	r2,1
40013234:	b80d883a 	mov	r6,r23
40013238:	89001704 	addi	r4,r17,92
4001323c:	000b883a 	mov	r5,zero
40013240:	88000015 	stw	zero,0(r17)
40013244:	88000115 	stw	zero,4(r17)
40013248:	88000215 	stw	zero,8(r17)
4001324c:	88001915 	stw	zero,100(r17)
40013250:	8880038d 	sth	r2,14(r17)
40013254:	88000415 	stw	zero,16(r17)
40013258:	88000515 	stw	zero,20(r17)
4001325c:	88000615 	stw	zero,24(r17)
40013260:	000ee100 	call	4000ee10 <memset>
40013264:	94000317 	ldw	r16,12(r18)
40013268:	00800484 	movi	r2,18
4001326c:	8c400715 	stw	r17,28(r17)
40013270:	8d800815 	stw	r22,32(r17)
40013274:	8d400915 	stw	r21,36(r17)
40013278:	8d000a15 	stw	r20,40(r17)
4001327c:	8cc00b15 	stw	r19,44(r17)
40013280:	8080030d 	sth	r2,12(r16)
40013284:	00800084 	movi	r2,2
40013288:	80000015 	stw	zero,0(r16)
4001328c:	80000115 	stw	zero,4(r16)
40013290:	80000215 	stw	zero,8(r16)
40013294:	80001915 	stw	zero,100(r16)
40013298:	8080038d 	sth	r2,14(r16)
4001329c:	80000415 	stw	zero,16(r16)
400132a0:	80000515 	stw	zero,20(r16)
400132a4:	80000615 	stw	zero,24(r16)
400132a8:	b80d883a 	mov	r6,r23
400132ac:	000b883a 	mov	r5,zero
400132b0:	81001704 	addi	r4,r16,92
400132b4:	000ee100 	call	4000ee10 <memset>
400132b8:	00800044 	movi	r2,1
400132bc:	84000715 	stw	r16,28(r16)
400132c0:	85800815 	stw	r22,32(r16)
400132c4:	85400915 	stw	r21,36(r16)
400132c8:	85000a15 	stw	r20,40(r16)
400132cc:	84c00b15 	stw	r19,44(r16)
400132d0:	90800e15 	stw	r2,56(r18)
400132d4:	dfc00817 	ldw	ra,32(sp)
400132d8:	ddc00717 	ldw	r23,28(sp)
400132dc:	dd800617 	ldw	r22,24(sp)
400132e0:	dd400517 	ldw	r21,20(sp)
400132e4:	dd000417 	ldw	r20,16(sp)
400132e8:	dcc00317 	ldw	r19,12(sp)
400132ec:	dc800217 	ldw	r18,8(sp)
400132f0:	dc400117 	ldw	r17,4(sp)
400132f4:	dc000017 	ldw	r16,0(sp)
400132f8:	dec00904 	addi	sp,sp,36
400132fc:	f800283a 	ret

40013300 <__fp_lock>:
40013300:	0005883a 	mov	r2,zero
40013304:	f800283a 	ret

40013308 <__sfmoreglue>:
40013308:	defffc04 	addi	sp,sp,-16
4001330c:	dc400115 	stw	r17,4(sp)
40013310:	2c7fffc4 	addi	r17,r5,-1
40013314:	8c401a24 	muli	r17,r17,104
40013318:	dc800215 	stw	r18,8(sp)
4001331c:	2825883a 	mov	r18,r5
40013320:	89401d04 	addi	r5,r17,116
40013324:	dc000015 	stw	r16,0(sp)
40013328:	dfc00315 	stw	ra,12(sp)
4001332c:	000e4bc0 	call	4000e4bc <_malloc_r>
40013330:	1021883a 	mov	r16,r2
40013334:	10000726 	beq	r2,zero,40013354 <__sfmoreglue+0x4c>
40013338:	11000304 	addi	r4,r2,12
4001333c:	10000015 	stw	zero,0(r2)
40013340:	14800115 	stw	r18,4(r2)
40013344:	11000215 	stw	r4,8(r2)
40013348:	89801a04 	addi	r6,r17,104
4001334c:	000b883a 	mov	r5,zero
40013350:	000ee100 	call	4000ee10 <memset>
40013354:	8005883a 	mov	r2,r16
40013358:	dfc00317 	ldw	ra,12(sp)
4001335c:	dc800217 	ldw	r18,8(sp)
40013360:	dc400117 	ldw	r17,4(sp)
40013364:	dc000017 	ldw	r16,0(sp)
40013368:	dec00404 	addi	sp,sp,16
4001336c:	f800283a 	ret

40013370 <__sfp>:
40013370:	defffb04 	addi	sp,sp,-20
40013374:	dc000015 	stw	r16,0(sp)
40013378:	041000b4 	movhi	r16,16386
4001337c:	842d4604 	addi	r16,r16,-19176
40013380:	dcc00315 	stw	r19,12(sp)
40013384:	2027883a 	mov	r19,r4
40013388:	81000017 	ldw	r4,0(r16)
4001338c:	dfc00415 	stw	ra,16(sp)
40013390:	dc800215 	stw	r18,8(sp)
40013394:	20800e17 	ldw	r2,56(r4)
40013398:	dc400115 	stw	r17,4(sp)
4001339c:	1000021e 	bne	r2,zero,400133a8 <__sfp+0x38>
400133a0:	00131640 	call	40013164 <__sinit.part.1>
400133a4:	81000017 	ldw	r4,0(r16)
400133a8:	2480b804 	addi	r18,r4,736
400133ac:	047fffc4 	movi	r17,-1
400133b0:	91000117 	ldw	r4,4(r18)
400133b4:	94000217 	ldw	r16,8(r18)
400133b8:	213fffc4 	addi	r4,r4,-1
400133bc:	20000a16 	blt	r4,zero,400133e8 <__sfp+0x78>
400133c0:	8080030f 	ldh	r2,12(r16)
400133c4:	10000c26 	beq	r2,zero,400133f8 <__sfp+0x88>
400133c8:	80c01d04 	addi	r3,r16,116
400133cc:	00000206 	br	400133d8 <__sfp+0x68>
400133d0:	18bfe60f 	ldh	r2,-104(r3)
400133d4:	10000826 	beq	r2,zero,400133f8 <__sfp+0x88>
400133d8:	213fffc4 	addi	r4,r4,-1
400133dc:	1c3ffd04 	addi	r16,r3,-12
400133e0:	18c01a04 	addi	r3,r3,104
400133e4:	247ffa1e 	bne	r4,r17,400133d0 <__alt_data_end+0xc00133d0>
400133e8:	90800017 	ldw	r2,0(r18)
400133ec:	10001d26 	beq	r2,zero,40013464 <__sfp+0xf4>
400133f0:	1025883a 	mov	r18,r2
400133f4:	003fee06 	br	400133b0 <__alt_data_end+0xc00133b0>
400133f8:	00bfffc4 	movi	r2,-1
400133fc:	8080038d 	sth	r2,14(r16)
40013400:	00800044 	movi	r2,1
40013404:	8080030d 	sth	r2,12(r16)
40013408:	80001915 	stw	zero,100(r16)
4001340c:	80000015 	stw	zero,0(r16)
40013410:	80000215 	stw	zero,8(r16)
40013414:	80000115 	stw	zero,4(r16)
40013418:	80000415 	stw	zero,16(r16)
4001341c:	80000515 	stw	zero,20(r16)
40013420:	80000615 	stw	zero,24(r16)
40013424:	01800204 	movi	r6,8
40013428:	000b883a 	mov	r5,zero
4001342c:	81001704 	addi	r4,r16,92
40013430:	000ee100 	call	4000ee10 <memset>
40013434:	8005883a 	mov	r2,r16
40013438:	80000c15 	stw	zero,48(r16)
4001343c:	80000d15 	stw	zero,52(r16)
40013440:	80001115 	stw	zero,68(r16)
40013444:	80001215 	stw	zero,72(r16)
40013448:	dfc00417 	ldw	ra,16(sp)
4001344c:	dcc00317 	ldw	r19,12(sp)
40013450:	dc800217 	ldw	r18,8(sp)
40013454:	dc400117 	ldw	r17,4(sp)
40013458:	dc000017 	ldw	r16,0(sp)
4001345c:	dec00504 	addi	sp,sp,20
40013460:	f800283a 	ret
40013464:	01400104 	movi	r5,4
40013468:	9809883a 	mov	r4,r19
4001346c:	00133080 	call	40013308 <__sfmoreglue>
40013470:	90800015 	stw	r2,0(r18)
40013474:	103fde1e 	bne	r2,zero,400133f0 <__alt_data_end+0xc00133f0>
40013478:	00800304 	movi	r2,12
4001347c:	98800015 	stw	r2,0(r19)
40013480:	0005883a 	mov	r2,zero
40013484:	003ff006 	br	40013448 <__alt_data_end+0xc0013448>

40013488 <_cleanup>:
40013488:	009000b4 	movhi	r2,16386
4001348c:	10ad4604 	addi	r2,r2,-19176
40013490:	11000017 	ldw	r4,0(r2)
40013494:	01500074 	movhi	r5,16385
40013498:	295d7a04 	addi	r5,r5,30184
4001349c:	0013ea41 	jmpi	40013ea4 <_fwalk_reent>

400134a0 <__sinit>:
400134a0:	20800e17 	ldw	r2,56(r4)
400134a4:	10000126 	beq	r2,zero,400134ac <__sinit+0xc>
400134a8:	f800283a 	ret
400134ac:	00131641 	jmpi	40013164 <__sinit.part.1>

400134b0 <__sfp_lock_acquire>:
400134b0:	f800283a 	ret

400134b4 <__sfp_lock_release>:
400134b4:	f800283a 	ret

400134b8 <__sinit_lock_acquire>:
400134b8:	f800283a 	ret

400134bc <__sinit_lock_release>:
400134bc:	f800283a 	ret

400134c0 <__fp_lock_all>:
400134c0:	009000b4 	movhi	r2,16386
400134c4:	10ad4704 	addi	r2,r2,-19172
400134c8:	11000017 	ldw	r4,0(r2)
400134cc:	01500074 	movhi	r5,16385
400134d0:	294cc004 	addi	r5,r5,13056
400134d4:	0013de01 	jmpi	40013de0 <_fwalk>

400134d8 <__fp_unlock_all>:
400134d8:	009000b4 	movhi	r2,16386
400134dc:	10ad4704 	addi	r2,r2,-19172
400134e0:	11000017 	ldw	r4,0(r2)
400134e4:	01500074 	movhi	r5,16385
400134e8:	294c5404 	addi	r5,r5,12624
400134ec:	0013de01 	jmpi	40013de0 <_fwalk>

400134f0 <_malloc_trim_r>:
400134f0:	defffb04 	addi	sp,sp,-20
400134f4:	dcc00315 	stw	r19,12(sp)
400134f8:	04d000b4 	movhi	r19,16386
400134fc:	dc800215 	stw	r18,8(sp)
40013500:	dc400115 	stw	r17,4(sp)
40013504:	dc000015 	stw	r16,0(sp)
40013508:	dfc00415 	stw	ra,16(sp)
4001350c:	2821883a 	mov	r16,r5
40013510:	9cebad04 	addi	r19,r19,-20812
40013514:	2025883a 	mov	r18,r4
40013518:	00197140 	call	40019714 <__malloc_lock>
4001351c:	98800217 	ldw	r2,8(r19)
40013520:	14400117 	ldw	r17,4(r2)
40013524:	00bfff04 	movi	r2,-4
40013528:	88a2703a 	and	r17,r17,r2
4001352c:	8c21c83a 	sub	r16,r17,r16
40013530:	8403fbc4 	addi	r16,r16,4079
40013534:	8020d33a 	srli	r16,r16,12
40013538:	0083ffc4 	movi	r2,4095
4001353c:	843fffc4 	addi	r16,r16,-1
40013540:	8020933a 	slli	r16,r16,12
40013544:	1400060e 	bge	r2,r16,40013560 <_malloc_trim_r+0x70>
40013548:	000b883a 	mov	r5,zero
4001354c:	9009883a 	mov	r4,r18
40013550:	000f1100 	call	4000f110 <_sbrk_r>
40013554:	98c00217 	ldw	r3,8(r19)
40013558:	1c47883a 	add	r3,r3,r17
4001355c:	10c00a26 	beq	r2,r3,40013588 <_malloc_trim_r+0x98>
40013560:	9009883a 	mov	r4,r18
40013564:	00197180 	call	40019718 <__malloc_unlock>
40013568:	0005883a 	mov	r2,zero
4001356c:	dfc00417 	ldw	ra,16(sp)
40013570:	dcc00317 	ldw	r19,12(sp)
40013574:	dc800217 	ldw	r18,8(sp)
40013578:	dc400117 	ldw	r17,4(sp)
4001357c:	dc000017 	ldw	r16,0(sp)
40013580:	dec00504 	addi	sp,sp,20
40013584:	f800283a 	ret
40013588:	040bc83a 	sub	r5,zero,r16
4001358c:	9009883a 	mov	r4,r18
40013590:	000f1100 	call	4000f110 <_sbrk_r>
40013594:	00ffffc4 	movi	r3,-1
40013598:	10c00d26 	beq	r2,r3,400135d0 <_malloc_trim_r+0xe0>
4001359c:	00d000f4 	movhi	r3,16387
400135a0:	18f52d04 	addi	r3,r3,-11084
400135a4:	18800017 	ldw	r2,0(r3)
400135a8:	99000217 	ldw	r4,8(r19)
400135ac:	8c23c83a 	sub	r17,r17,r16
400135b0:	8c400054 	ori	r17,r17,1
400135b4:	1421c83a 	sub	r16,r2,r16
400135b8:	24400115 	stw	r17,4(r4)
400135bc:	9009883a 	mov	r4,r18
400135c0:	1c000015 	stw	r16,0(r3)
400135c4:	00197180 	call	40019718 <__malloc_unlock>
400135c8:	00800044 	movi	r2,1
400135cc:	003fe706 	br	4001356c <__alt_data_end+0xc001356c>
400135d0:	000b883a 	mov	r5,zero
400135d4:	9009883a 	mov	r4,r18
400135d8:	000f1100 	call	4000f110 <_sbrk_r>
400135dc:	99000217 	ldw	r4,8(r19)
400135e0:	014003c4 	movi	r5,15
400135e4:	1107c83a 	sub	r3,r2,r4
400135e8:	28ffdd0e 	bge	r5,r3,40013560 <__alt_data_end+0xc0013560>
400135ec:	015000b4 	movhi	r5,16386
400135f0:	296d4804 	addi	r5,r5,-19168
400135f4:	29400017 	ldw	r5,0(r5)
400135f8:	18c00054 	ori	r3,r3,1
400135fc:	20c00115 	stw	r3,4(r4)
40013600:	00d000f4 	movhi	r3,16387
40013604:	1145c83a 	sub	r2,r2,r5
40013608:	18f52d04 	addi	r3,r3,-11084
4001360c:	18800015 	stw	r2,0(r3)
40013610:	003fd306 	br	40013560 <__alt_data_end+0xc0013560>

40013614 <_free_r>:
40013614:	28004126 	beq	r5,zero,4001371c <_free_r+0x108>
40013618:	defffd04 	addi	sp,sp,-12
4001361c:	dc400115 	stw	r17,4(sp)
40013620:	dc000015 	stw	r16,0(sp)
40013624:	2023883a 	mov	r17,r4
40013628:	2821883a 	mov	r16,r5
4001362c:	dfc00215 	stw	ra,8(sp)
40013630:	00197140 	call	40019714 <__malloc_lock>
40013634:	81ffff17 	ldw	r7,-4(r16)
40013638:	00bfff84 	movi	r2,-2
4001363c:	011000b4 	movhi	r4,16386
40013640:	81bffe04 	addi	r6,r16,-8
40013644:	3884703a 	and	r2,r7,r2
40013648:	212bad04 	addi	r4,r4,-20812
4001364c:	308b883a 	add	r5,r6,r2
40013650:	2a400117 	ldw	r9,4(r5)
40013654:	22000217 	ldw	r8,8(r4)
40013658:	00ffff04 	movi	r3,-4
4001365c:	48c6703a 	and	r3,r9,r3
40013660:	2a005726 	beq	r5,r8,400137c0 <_free_r+0x1ac>
40013664:	28c00115 	stw	r3,4(r5)
40013668:	39c0004c 	andi	r7,r7,1
4001366c:	3800091e 	bne	r7,zero,40013694 <_free_r+0x80>
40013670:	823ffe17 	ldw	r8,-8(r16)
40013674:	22400204 	addi	r9,r4,8
40013678:	320dc83a 	sub	r6,r6,r8
4001367c:	31c00217 	ldw	r7,8(r6)
40013680:	1205883a 	add	r2,r2,r8
40013684:	3a406526 	beq	r7,r9,4001381c <_free_r+0x208>
40013688:	32000317 	ldw	r8,12(r6)
4001368c:	3a000315 	stw	r8,12(r7)
40013690:	41c00215 	stw	r7,8(r8)
40013694:	28cf883a 	add	r7,r5,r3
40013698:	39c00117 	ldw	r7,4(r7)
4001369c:	39c0004c 	andi	r7,r7,1
400136a0:	38003a26 	beq	r7,zero,4001378c <_free_r+0x178>
400136a4:	10c00054 	ori	r3,r2,1
400136a8:	30c00115 	stw	r3,4(r6)
400136ac:	3087883a 	add	r3,r6,r2
400136b0:	18800015 	stw	r2,0(r3)
400136b4:	00c07fc4 	movi	r3,511
400136b8:	18801936 	bltu	r3,r2,40013720 <_free_r+0x10c>
400136bc:	1004d0fa 	srli	r2,r2,3
400136c0:	01c00044 	movi	r7,1
400136c4:	21400117 	ldw	r5,4(r4)
400136c8:	10c00044 	addi	r3,r2,1
400136cc:	18c7883a 	add	r3,r3,r3
400136d0:	1005d0ba 	srai	r2,r2,2
400136d4:	18c7883a 	add	r3,r3,r3
400136d8:	18c7883a 	add	r3,r3,r3
400136dc:	1907883a 	add	r3,r3,r4
400136e0:	3884983a 	sll	r2,r7,r2
400136e4:	19c00017 	ldw	r7,0(r3)
400136e8:	1a3ffe04 	addi	r8,r3,-8
400136ec:	1144b03a 	or	r2,r2,r5
400136f0:	32000315 	stw	r8,12(r6)
400136f4:	31c00215 	stw	r7,8(r6)
400136f8:	20800115 	stw	r2,4(r4)
400136fc:	19800015 	stw	r6,0(r3)
40013700:	39800315 	stw	r6,12(r7)
40013704:	8809883a 	mov	r4,r17
40013708:	dfc00217 	ldw	ra,8(sp)
4001370c:	dc400117 	ldw	r17,4(sp)
40013710:	dc000017 	ldw	r16,0(sp)
40013714:	dec00304 	addi	sp,sp,12
40013718:	00197181 	jmpi	40019718 <__malloc_unlock>
4001371c:	f800283a 	ret
40013720:	100ad27a 	srli	r5,r2,9
40013724:	00c00104 	movi	r3,4
40013728:	19404a36 	bltu	r3,r5,40013854 <_free_r+0x240>
4001372c:	100ad1ba 	srli	r5,r2,6
40013730:	28c00e44 	addi	r3,r5,57
40013734:	18c7883a 	add	r3,r3,r3
40013738:	29400e04 	addi	r5,r5,56
4001373c:	18c7883a 	add	r3,r3,r3
40013740:	18c7883a 	add	r3,r3,r3
40013744:	1909883a 	add	r4,r3,r4
40013748:	20c00017 	ldw	r3,0(r4)
4001374c:	01d000b4 	movhi	r7,16386
40013750:	213ffe04 	addi	r4,r4,-8
40013754:	39ebad04 	addi	r7,r7,-20812
40013758:	20c04426 	beq	r4,r3,4001386c <_free_r+0x258>
4001375c:	01ffff04 	movi	r7,-4
40013760:	19400117 	ldw	r5,4(r3)
40013764:	29ca703a 	and	r5,r5,r7
40013768:	1140022e 	bgeu	r2,r5,40013774 <_free_r+0x160>
4001376c:	18c00217 	ldw	r3,8(r3)
40013770:	20fffb1e 	bne	r4,r3,40013760 <__alt_data_end+0xc0013760>
40013774:	19000317 	ldw	r4,12(r3)
40013778:	31000315 	stw	r4,12(r6)
4001377c:	30c00215 	stw	r3,8(r6)
40013780:	21800215 	stw	r6,8(r4)
40013784:	19800315 	stw	r6,12(r3)
40013788:	003fde06 	br	40013704 <__alt_data_end+0xc0013704>
4001378c:	29c00217 	ldw	r7,8(r5)
40013790:	10c5883a 	add	r2,r2,r3
40013794:	00d000b4 	movhi	r3,16386
40013798:	18ebaf04 	addi	r3,r3,-20804
4001379c:	38c03b26 	beq	r7,r3,4001388c <_free_r+0x278>
400137a0:	2a000317 	ldw	r8,12(r5)
400137a4:	11400054 	ori	r5,r2,1
400137a8:	3087883a 	add	r3,r6,r2
400137ac:	3a000315 	stw	r8,12(r7)
400137b0:	41c00215 	stw	r7,8(r8)
400137b4:	31400115 	stw	r5,4(r6)
400137b8:	18800015 	stw	r2,0(r3)
400137bc:	003fbd06 	br	400136b4 <__alt_data_end+0xc00136b4>
400137c0:	39c0004c 	andi	r7,r7,1
400137c4:	10c5883a 	add	r2,r2,r3
400137c8:	3800071e 	bne	r7,zero,400137e8 <_free_r+0x1d4>
400137cc:	81fffe17 	ldw	r7,-8(r16)
400137d0:	31cdc83a 	sub	r6,r6,r7
400137d4:	30c00317 	ldw	r3,12(r6)
400137d8:	31400217 	ldw	r5,8(r6)
400137dc:	11c5883a 	add	r2,r2,r7
400137e0:	28c00315 	stw	r3,12(r5)
400137e4:	19400215 	stw	r5,8(r3)
400137e8:	10c00054 	ori	r3,r2,1
400137ec:	30c00115 	stw	r3,4(r6)
400137f0:	00d000b4 	movhi	r3,16386
400137f4:	18ed4904 	addi	r3,r3,-19164
400137f8:	18c00017 	ldw	r3,0(r3)
400137fc:	21800215 	stw	r6,8(r4)
40013800:	10ffc036 	bltu	r2,r3,40013704 <__alt_data_end+0xc0013704>
40013804:	009000b4 	movhi	r2,16386
40013808:	10b00f04 	addi	r2,r2,-16324
4001380c:	11400017 	ldw	r5,0(r2)
40013810:	8809883a 	mov	r4,r17
40013814:	00134f00 	call	400134f0 <_malloc_trim_r>
40013818:	003fba06 	br	40013704 <__alt_data_end+0xc0013704>
4001381c:	28c9883a 	add	r4,r5,r3
40013820:	21000117 	ldw	r4,4(r4)
40013824:	2100004c 	andi	r4,r4,1
40013828:	2000391e 	bne	r4,zero,40013910 <_free_r+0x2fc>
4001382c:	29c00217 	ldw	r7,8(r5)
40013830:	29000317 	ldw	r4,12(r5)
40013834:	1885883a 	add	r2,r3,r2
40013838:	10c00054 	ori	r3,r2,1
4001383c:	39000315 	stw	r4,12(r7)
40013840:	21c00215 	stw	r7,8(r4)
40013844:	30c00115 	stw	r3,4(r6)
40013848:	308d883a 	add	r6,r6,r2
4001384c:	30800015 	stw	r2,0(r6)
40013850:	003fac06 	br	40013704 <__alt_data_end+0xc0013704>
40013854:	00c00504 	movi	r3,20
40013858:	19401536 	bltu	r3,r5,400138b0 <_free_r+0x29c>
4001385c:	28c01704 	addi	r3,r5,92
40013860:	18c7883a 	add	r3,r3,r3
40013864:	294016c4 	addi	r5,r5,91
40013868:	003fb406 	br	4001373c <__alt_data_end+0xc001373c>
4001386c:	280bd0ba 	srai	r5,r5,2
40013870:	00c00044 	movi	r3,1
40013874:	38800117 	ldw	r2,4(r7)
40013878:	194a983a 	sll	r5,r3,r5
4001387c:	2007883a 	mov	r3,r4
40013880:	2884b03a 	or	r2,r5,r2
40013884:	38800115 	stw	r2,4(r7)
40013888:	003fbb06 	br	40013778 <__alt_data_end+0xc0013778>
4001388c:	21800515 	stw	r6,20(r4)
40013890:	21800415 	stw	r6,16(r4)
40013894:	10c00054 	ori	r3,r2,1
40013898:	31c00315 	stw	r7,12(r6)
4001389c:	31c00215 	stw	r7,8(r6)
400138a0:	30c00115 	stw	r3,4(r6)
400138a4:	308d883a 	add	r6,r6,r2
400138a8:	30800015 	stw	r2,0(r6)
400138ac:	003f9506 	br	40013704 <__alt_data_end+0xc0013704>
400138b0:	00c01504 	movi	r3,84
400138b4:	19400536 	bltu	r3,r5,400138cc <_free_r+0x2b8>
400138b8:	100ad33a 	srli	r5,r2,12
400138bc:	28c01bc4 	addi	r3,r5,111
400138c0:	18c7883a 	add	r3,r3,r3
400138c4:	29401b84 	addi	r5,r5,110
400138c8:	003f9c06 	br	4001373c <__alt_data_end+0xc001373c>
400138cc:	00c05504 	movi	r3,340
400138d0:	19400536 	bltu	r3,r5,400138e8 <_free_r+0x2d4>
400138d4:	100ad3fa 	srli	r5,r2,15
400138d8:	28c01e04 	addi	r3,r5,120
400138dc:	18c7883a 	add	r3,r3,r3
400138e0:	29401dc4 	addi	r5,r5,119
400138e4:	003f9506 	br	4001373c <__alt_data_end+0xc001373c>
400138e8:	00c15504 	movi	r3,1364
400138ec:	19400536 	bltu	r3,r5,40013904 <_free_r+0x2f0>
400138f0:	100ad4ba 	srli	r5,r2,18
400138f4:	28c01f44 	addi	r3,r5,125
400138f8:	18c7883a 	add	r3,r3,r3
400138fc:	29401f04 	addi	r5,r5,124
40013900:	003f8e06 	br	4001373c <__alt_data_end+0xc001373c>
40013904:	00c03f84 	movi	r3,254
40013908:	01401f84 	movi	r5,126
4001390c:	003f8b06 	br	4001373c <__alt_data_end+0xc001373c>
40013910:	10c00054 	ori	r3,r2,1
40013914:	30c00115 	stw	r3,4(r6)
40013918:	308d883a 	add	r6,r6,r2
4001391c:	30800015 	stw	r2,0(r6)
40013920:	003f7806 	br	40013704 <__alt_data_end+0xc0013704>

40013924 <__sfvwrite_r>:
40013924:	30800217 	ldw	r2,8(r6)
40013928:	10006726 	beq	r2,zero,40013ac8 <__sfvwrite_r+0x1a4>
4001392c:	28c0030b 	ldhu	r3,12(r5)
40013930:	defff404 	addi	sp,sp,-48
40013934:	dd400715 	stw	r21,28(sp)
40013938:	dd000615 	stw	r20,24(sp)
4001393c:	dc000215 	stw	r16,8(sp)
40013940:	dfc00b15 	stw	ra,44(sp)
40013944:	df000a15 	stw	fp,40(sp)
40013948:	ddc00915 	stw	r23,36(sp)
4001394c:	dd800815 	stw	r22,32(sp)
40013950:	dcc00515 	stw	r19,20(sp)
40013954:	dc800415 	stw	r18,16(sp)
40013958:	dc400315 	stw	r17,12(sp)
4001395c:	1880020c 	andi	r2,r3,8
40013960:	2821883a 	mov	r16,r5
40013964:	202b883a 	mov	r21,r4
40013968:	3029883a 	mov	r20,r6
4001396c:	10002726 	beq	r2,zero,40013a0c <__sfvwrite_r+0xe8>
40013970:	28800417 	ldw	r2,16(r5)
40013974:	10002526 	beq	r2,zero,40013a0c <__sfvwrite_r+0xe8>
40013978:	1880008c 	andi	r2,r3,2
4001397c:	a4400017 	ldw	r17,0(r20)
40013980:	10002a26 	beq	r2,zero,40013a2c <__sfvwrite_r+0x108>
40013984:	05a00034 	movhi	r22,32768
40013988:	0027883a 	mov	r19,zero
4001398c:	0025883a 	mov	r18,zero
40013990:	b5bf0004 	addi	r22,r22,-1024
40013994:	980d883a 	mov	r6,r19
40013998:	a809883a 	mov	r4,r21
4001399c:	90004626 	beq	r18,zero,40013ab8 <__sfvwrite_r+0x194>
400139a0:	900f883a 	mov	r7,r18
400139a4:	b480022e 	bgeu	r22,r18,400139b0 <__sfvwrite_r+0x8c>
400139a8:	01e00034 	movhi	r7,32768
400139ac:	39ff0004 	addi	r7,r7,-1024
400139b0:	80800917 	ldw	r2,36(r16)
400139b4:	81400717 	ldw	r5,28(r16)
400139b8:	103ee83a 	callr	r2
400139bc:	0080570e 	bge	zero,r2,40013b1c <__sfvwrite_r+0x1f8>
400139c0:	a0c00217 	ldw	r3,8(r20)
400139c4:	98a7883a 	add	r19,r19,r2
400139c8:	90a5c83a 	sub	r18,r18,r2
400139cc:	1885c83a 	sub	r2,r3,r2
400139d0:	a0800215 	stw	r2,8(r20)
400139d4:	103fef1e 	bne	r2,zero,40013994 <__alt_data_end+0xc0013994>
400139d8:	0005883a 	mov	r2,zero
400139dc:	dfc00b17 	ldw	ra,44(sp)
400139e0:	df000a17 	ldw	fp,40(sp)
400139e4:	ddc00917 	ldw	r23,36(sp)
400139e8:	dd800817 	ldw	r22,32(sp)
400139ec:	dd400717 	ldw	r21,28(sp)
400139f0:	dd000617 	ldw	r20,24(sp)
400139f4:	dcc00517 	ldw	r19,20(sp)
400139f8:	dc800417 	ldw	r18,16(sp)
400139fc:	dc400317 	ldw	r17,12(sp)
40013a00:	dc000217 	ldw	r16,8(sp)
40013a04:	dec00c04 	addi	sp,sp,48
40013a08:	f800283a 	ret
40013a0c:	800b883a 	mov	r5,r16
40013a10:	a809883a 	mov	r4,r21
40013a14:	00114cc0 	call	400114cc <__swsetup_r>
40013a18:	1000eb1e 	bne	r2,zero,40013dc8 <__sfvwrite_r+0x4a4>
40013a1c:	80c0030b 	ldhu	r3,12(r16)
40013a20:	a4400017 	ldw	r17,0(r20)
40013a24:	1880008c 	andi	r2,r3,2
40013a28:	103fd61e 	bne	r2,zero,40013984 <__alt_data_end+0xc0013984>
40013a2c:	1880004c 	andi	r2,r3,1
40013a30:	10003f1e 	bne	r2,zero,40013b30 <__sfvwrite_r+0x20c>
40013a34:	0039883a 	mov	fp,zero
40013a38:	0025883a 	mov	r18,zero
40013a3c:	90001a26 	beq	r18,zero,40013aa8 <__sfvwrite_r+0x184>
40013a40:	1880800c 	andi	r2,r3,512
40013a44:	84c00217 	ldw	r19,8(r16)
40013a48:	10002126 	beq	r2,zero,40013ad0 <__sfvwrite_r+0x1ac>
40013a4c:	982f883a 	mov	r23,r19
40013a50:	94c09336 	bltu	r18,r19,40013ca0 <__sfvwrite_r+0x37c>
40013a54:	1881200c 	andi	r2,r3,1152
40013a58:	10009e1e 	bne	r2,zero,40013cd4 <__sfvwrite_r+0x3b0>
40013a5c:	81000017 	ldw	r4,0(r16)
40013a60:	b80d883a 	mov	r6,r23
40013a64:	e00b883a 	mov	r5,fp
40013a68:	00142e40 	call	400142e4 <memmove>
40013a6c:	80c00217 	ldw	r3,8(r16)
40013a70:	81000017 	ldw	r4,0(r16)
40013a74:	9005883a 	mov	r2,r18
40013a78:	1ce7c83a 	sub	r19,r3,r19
40013a7c:	25cf883a 	add	r7,r4,r23
40013a80:	84c00215 	stw	r19,8(r16)
40013a84:	81c00015 	stw	r7,0(r16)
40013a88:	a0c00217 	ldw	r3,8(r20)
40013a8c:	e0b9883a 	add	fp,fp,r2
40013a90:	90a5c83a 	sub	r18,r18,r2
40013a94:	18a7c83a 	sub	r19,r3,r2
40013a98:	a4c00215 	stw	r19,8(r20)
40013a9c:	983fce26 	beq	r19,zero,400139d8 <__alt_data_end+0xc00139d8>
40013aa0:	80c0030b 	ldhu	r3,12(r16)
40013aa4:	903fe61e 	bne	r18,zero,40013a40 <__alt_data_end+0xc0013a40>
40013aa8:	8f000017 	ldw	fp,0(r17)
40013aac:	8c800117 	ldw	r18,4(r17)
40013ab0:	8c400204 	addi	r17,r17,8
40013ab4:	003fe106 	br	40013a3c <__alt_data_end+0xc0013a3c>
40013ab8:	8cc00017 	ldw	r19,0(r17)
40013abc:	8c800117 	ldw	r18,4(r17)
40013ac0:	8c400204 	addi	r17,r17,8
40013ac4:	003fb306 	br	40013994 <__alt_data_end+0xc0013994>
40013ac8:	0005883a 	mov	r2,zero
40013acc:	f800283a 	ret
40013ad0:	81000017 	ldw	r4,0(r16)
40013ad4:	80800417 	ldw	r2,16(r16)
40013ad8:	11005736 	bltu	r2,r4,40013c38 <__sfvwrite_r+0x314>
40013adc:	85c00517 	ldw	r23,20(r16)
40013ae0:	95c05536 	bltu	r18,r23,40013c38 <__sfvwrite_r+0x314>
40013ae4:	00a00034 	movhi	r2,32768
40013ae8:	10bfffc4 	addi	r2,r2,-1
40013aec:	9009883a 	mov	r4,r18
40013af0:	1480012e 	bgeu	r2,r18,40013af8 <__sfvwrite_r+0x1d4>
40013af4:	1009883a 	mov	r4,r2
40013af8:	b80b883a 	mov	r5,r23
40013afc:	000c84c0 	call	4000c84c <__divsi3>
40013b00:	15cf383a 	mul	r7,r2,r23
40013b04:	81400717 	ldw	r5,28(r16)
40013b08:	80800917 	ldw	r2,36(r16)
40013b0c:	e00d883a 	mov	r6,fp
40013b10:	a809883a 	mov	r4,r21
40013b14:	103ee83a 	callr	r2
40013b18:	00bfdb16 	blt	zero,r2,40013a88 <__alt_data_end+0xc0013a88>
40013b1c:	8080030b 	ldhu	r2,12(r16)
40013b20:	10801014 	ori	r2,r2,64
40013b24:	8080030d 	sth	r2,12(r16)
40013b28:	00bfffc4 	movi	r2,-1
40013b2c:	003fab06 	br	400139dc <__alt_data_end+0xc00139dc>
40013b30:	0027883a 	mov	r19,zero
40013b34:	0011883a 	mov	r8,zero
40013b38:	0039883a 	mov	fp,zero
40013b3c:	0025883a 	mov	r18,zero
40013b40:	90001f26 	beq	r18,zero,40013bc0 <__sfvwrite_r+0x29c>
40013b44:	40005a26 	beq	r8,zero,40013cb0 <__sfvwrite_r+0x38c>
40013b48:	982d883a 	mov	r22,r19
40013b4c:	94c0012e 	bgeu	r18,r19,40013b54 <__sfvwrite_r+0x230>
40013b50:	902d883a 	mov	r22,r18
40013b54:	81000017 	ldw	r4,0(r16)
40013b58:	80800417 	ldw	r2,16(r16)
40013b5c:	b02f883a 	mov	r23,r22
40013b60:	81c00517 	ldw	r7,20(r16)
40013b64:	1100032e 	bgeu	r2,r4,40013b74 <__sfvwrite_r+0x250>
40013b68:	80c00217 	ldw	r3,8(r16)
40013b6c:	38c7883a 	add	r3,r7,r3
40013b70:	1d801816 	blt	r3,r22,40013bd4 <__sfvwrite_r+0x2b0>
40013b74:	b1c03e16 	blt	r22,r7,40013c70 <__sfvwrite_r+0x34c>
40013b78:	80800917 	ldw	r2,36(r16)
40013b7c:	81400717 	ldw	r5,28(r16)
40013b80:	e00d883a 	mov	r6,fp
40013b84:	da000115 	stw	r8,4(sp)
40013b88:	a809883a 	mov	r4,r21
40013b8c:	103ee83a 	callr	r2
40013b90:	102f883a 	mov	r23,r2
40013b94:	da000117 	ldw	r8,4(sp)
40013b98:	00bfe00e 	bge	zero,r2,40013b1c <__alt_data_end+0xc0013b1c>
40013b9c:	9de7c83a 	sub	r19,r19,r23
40013ba0:	98001f26 	beq	r19,zero,40013c20 <__sfvwrite_r+0x2fc>
40013ba4:	a0800217 	ldw	r2,8(r20)
40013ba8:	e5f9883a 	add	fp,fp,r23
40013bac:	95e5c83a 	sub	r18,r18,r23
40013bb0:	15efc83a 	sub	r23,r2,r23
40013bb4:	a5c00215 	stw	r23,8(r20)
40013bb8:	b83f8726 	beq	r23,zero,400139d8 <__alt_data_end+0xc00139d8>
40013bbc:	903fe11e 	bne	r18,zero,40013b44 <__alt_data_end+0xc0013b44>
40013bc0:	8f000017 	ldw	fp,0(r17)
40013bc4:	8c800117 	ldw	r18,4(r17)
40013bc8:	0011883a 	mov	r8,zero
40013bcc:	8c400204 	addi	r17,r17,8
40013bd0:	003fdb06 	br	40013b40 <__alt_data_end+0xc0013b40>
40013bd4:	180d883a 	mov	r6,r3
40013bd8:	e00b883a 	mov	r5,fp
40013bdc:	da000115 	stw	r8,4(sp)
40013be0:	d8c00015 	stw	r3,0(sp)
40013be4:	00142e40 	call	400142e4 <memmove>
40013be8:	d8c00017 	ldw	r3,0(sp)
40013bec:	80800017 	ldw	r2,0(r16)
40013bf0:	800b883a 	mov	r5,r16
40013bf4:	a809883a 	mov	r4,r21
40013bf8:	10c5883a 	add	r2,r2,r3
40013bfc:	80800015 	stw	r2,0(r16)
40013c00:	d8c00015 	stw	r3,0(sp)
40013c04:	00130c40 	call	400130c4 <_fflush_r>
40013c08:	d8c00017 	ldw	r3,0(sp)
40013c0c:	da000117 	ldw	r8,4(sp)
40013c10:	103fc21e 	bne	r2,zero,40013b1c <__alt_data_end+0xc0013b1c>
40013c14:	182f883a 	mov	r23,r3
40013c18:	9de7c83a 	sub	r19,r19,r23
40013c1c:	983fe11e 	bne	r19,zero,40013ba4 <__alt_data_end+0xc0013ba4>
40013c20:	800b883a 	mov	r5,r16
40013c24:	a809883a 	mov	r4,r21
40013c28:	00130c40 	call	400130c4 <_fflush_r>
40013c2c:	103fbb1e 	bne	r2,zero,40013b1c <__alt_data_end+0xc0013b1c>
40013c30:	0011883a 	mov	r8,zero
40013c34:	003fdb06 	br	40013ba4 <__alt_data_end+0xc0013ba4>
40013c38:	94c0012e 	bgeu	r18,r19,40013c40 <__sfvwrite_r+0x31c>
40013c3c:	9027883a 	mov	r19,r18
40013c40:	980d883a 	mov	r6,r19
40013c44:	e00b883a 	mov	r5,fp
40013c48:	00142e40 	call	400142e4 <memmove>
40013c4c:	80800217 	ldw	r2,8(r16)
40013c50:	80c00017 	ldw	r3,0(r16)
40013c54:	14c5c83a 	sub	r2,r2,r19
40013c58:	1cc7883a 	add	r3,r3,r19
40013c5c:	80800215 	stw	r2,8(r16)
40013c60:	80c00015 	stw	r3,0(r16)
40013c64:	10004326 	beq	r2,zero,40013d74 <__sfvwrite_r+0x450>
40013c68:	9805883a 	mov	r2,r19
40013c6c:	003f8606 	br	40013a88 <__alt_data_end+0xc0013a88>
40013c70:	b00d883a 	mov	r6,r22
40013c74:	e00b883a 	mov	r5,fp
40013c78:	da000115 	stw	r8,4(sp)
40013c7c:	00142e40 	call	400142e4 <memmove>
40013c80:	80800217 	ldw	r2,8(r16)
40013c84:	80c00017 	ldw	r3,0(r16)
40013c88:	da000117 	ldw	r8,4(sp)
40013c8c:	1585c83a 	sub	r2,r2,r22
40013c90:	1dad883a 	add	r22,r3,r22
40013c94:	80800215 	stw	r2,8(r16)
40013c98:	85800015 	stw	r22,0(r16)
40013c9c:	003fbf06 	br	40013b9c <__alt_data_end+0xc0013b9c>
40013ca0:	81000017 	ldw	r4,0(r16)
40013ca4:	9027883a 	mov	r19,r18
40013ca8:	902f883a 	mov	r23,r18
40013cac:	003f6c06 	br	40013a60 <__alt_data_end+0xc0013a60>
40013cb0:	900d883a 	mov	r6,r18
40013cb4:	01400284 	movi	r5,10
40013cb8:	e009883a 	mov	r4,fp
40013cbc:	00142000 	call	40014200 <memchr>
40013cc0:	10003e26 	beq	r2,zero,40013dbc <__sfvwrite_r+0x498>
40013cc4:	10800044 	addi	r2,r2,1
40013cc8:	1727c83a 	sub	r19,r2,fp
40013ccc:	02000044 	movi	r8,1
40013cd0:	003f9d06 	br	40013b48 <__alt_data_end+0xc0013b48>
40013cd4:	80800517 	ldw	r2,20(r16)
40013cd8:	81400417 	ldw	r5,16(r16)
40013cdc:	81c00017 	ldw	r7,0(r16)
40013ce0:	10a7883a 	add	r19,r2,r2
40013ce4:	9885883a 	add	r2,r19,r2
40013ce8:	1026d7fa 	srli	r19,r2,31
40013cec:	396dc83a 	sub	r22,r7,r5
40013cf0:	b1000044 	addi	r4,r22,1
40013cf4:	9885883a 	add	r2,r19,r2
40013cf8:	1027d07a 	srai	r19,r2,1
40013cfc:	2485883a 	add	r2,r4,r18
40013d00:	980d883a 	mov	r6,r19
40013d04:	9880022e 	bgeu	r19,r2,40013d10 <__sfvwrite_r+0x3ec>
40013d08:	1027883a 	mov	r19,r2
40013d0c:	100d883a 	mov	r6,r2
40013d10:	18c1000c 	andi	r3,r3,1024
40013d14:	18001c26 	beq	r3,zero,40013d88 <__sfvwrite_r+0x464>
40013d18:	300b883a 	mov	r5,r6
40013d1c:	a809883a 	mov	r4,r21
40013d20:	000e4bc0 	call	4000e4bc <_malloc_r>
40013d24:	102f883a 	mov	r23,r2
40013d28:	10002926 	beq	r2,zero,40013dd0 <__sfvwrite_r+0x4ac>
40013d2c:	81400417 	ldw	r5,16(r16)
40013d30:	b00d883a 	mov	r6,r22
40013d34:	1009883a 	mov	r4,r2
40013d38:	000ecc80 	call	4000ecc8 <memcpy>
40013d3c:	8080030b 	ldhu	r2,12(r16)
40013d40:	00fedfc4 	movi	r3,-1153
40013d44:	10c4703a 	and	r2,r2,r3
40013d48:	10802014 	ori	r2,r2,128
40013d4c:	8080030d 	sth	r2,12(r16)
40013d50:	bd89883a 	add	r4,r23,r22
40013d54:	9d8fc83a 	sub	r7,r19,r22
40013d58:	85c00415 	stw	r23,16(r16)
40013d5c:	84c00515 	stw	r19,20(r16)
40013d60:	81000015 	stw	r4,0(r16)
40013d64:	9027883a 	mov	r19,r18
40013d68:	81c00215 	stw	r7,8(r16)
40013d6c:	902f883a 	mov	r23,r18
40013d70:	003f3b06 	br	40013a60 <__alt_data_end+0xc0013a60>
40013d74:	800b883a 	mov	r5,r16
40013d78:	a809883a 	mov	r4,r21
40013d7c:	00130c40 	call	400130c4 <_fflush_r>
40013d80:	103fb926 	beq	r2,zero,40013c68 <__alt_data_end+0xc0013c68>
40013d84:	003f6506 	br	40013b1c <__alt_data_end+0xc0013b1c>
40013d88:	a809883a 	mov	r4,r21
40013d8c:	00155a40 	call	400155a4 <_realloc_r>
40013d90:	102f883a 	mov	r23,r2
40013d94:	103fee1e 	bne	r2,zero,40013d50 <__alt_data_end+0xc0013d50>
40013d98:	81400417 	ldw	r5,16(r16)
40013d9c:	a809883a 	mov	r4,r21
40013da0:	00136140 	call	40013614 <_free_r>
40013da4:	8080030b 	ldhu	r2,12(r16)
40013da8:	00ffdfc4 	movi	r3,-129
40013dac:	1884703a 	and	r2,r3,r2
40013db0:	00c00304 	movi	r3,12
40013db4:	a8c00015 	stw	r3,0(r21)
40013db8:	003f5906 	br	40013b20 <__alt_data_end+0xc0013b20>
40013dbc:	94c00044 	addi	r19,r18,1
40013dc0:	02000044 	movi	r8,1
40013dc4:	003f6006 	br	40013b48 <__alt_data_end+0xc0013b48>
40013dc8:	00bfffc4 	movi	r2,-1
40013dcc:	003f0306 	br	400139dc <__alt_data_end+0xc00139dc>
40013dd0:	00800304 	movi	r2,12
40013dd4:	a8800015 	stw	r2,0(r21)
40013dd8:	8080030b 	ldhu	r2,12(r16)
40013ddc:	003f5006 	br	40013b20 <__alt_data_end+0xc0013b20>

40013de0 <_fwalk>:
40013de0:	defff704 	addi	sp,sp,-36
40013de4:	dd000415 	stw	r20,16(sp)
40013de8:	dfc00815 	stw	ra,32(sp)
40013dec:	ddc00715 	stw	r23,28(sp)
40013df0:	dd800615 	stw	r22,24(sp)
40013df4:	dd400515 	stw	r21,20(sp)
40013df8:	dcc00315 	stw	r19,12(sp)
40013dfc:	dc800215 	stw	r18,8(sp)
40013e00:	dc400115 	stw	r17,4(sp)
40013e04:	dc000015 	stw	r16,0(sp)
40013e08:	2500b804 	addi	r20,r4,736
40013e0c:	a0002326 	beq	r20,zero,40013e9c <_fwalk+0xbc>
40013e10:	282b883a 	mov	r21,r5
40013e14:	002f883a 	mov	r23,zero
40013e18:	05800044 	movi	r22,1
40013e1c:	04ffffc4 	movi	r19,-1
40013e20:	a4400117 	ldw	r17,4(r20)
40013e24:	a4800217 	ldw	r18,8(r20)
40013e28:	8c7fffc4 	addi	r17,r17,-1
40013e2c:	88000d16 	blt	r17,zero,40013e64 <_fwalk+0x84>
40013e30:	94000304 	addi	r16,r18,12
40013e34:	94800384 	addi	r18,r18,14
40013e38:	8080000b 	ldhu	r2,0(r16)
40013e3c:	8c7fffc4 	addi	r17,r17,-1
40013e40:	813ffd04 	addi	r4,r16,-12
40013e44:	b080042e 	bgeu	r22,r2,40013e58 <_fwalk+0x78>
40013e48:	9080000f 	ldh	r2,0(r18)
40013e4c:	14c00226 	beq	r2,r19,40013e58 <_fwalk+0x78>
40013e50:	a83ee83a 	callr	r21
40013e54:	b8aeb03a 	or	r23,r23,r2
40013e58:	84001a04 	addi	r16,r16,104
40013e5c:	94801a04 	addi	r18,r18,104
40013e60:	8cfff51e 	bne	r17,r19,40013e38 <__alt_data_end+0xc0013e38>
40013e64:	a5000017 	ldw	r20,0(r20)
40013e68:	a03fed1e 	bne	r20,zero,40013e20 <__alt_data_end+0xc0013e20>
40013e6c:	b805883a 	mov	r2,r23
40013e70:	dfc00817 	ldw	ra,32(sp)
40013e74:	ddc00717 	ldw	r23,28(sp)
40013e78:	dd800617 	ldw	r22,24(sp)
40013e7c:	dd400517 	ldw	r21,20(sp)
40013e80:	dd000417 	ldw	r20,16(sp)
40013e84:	dcc00317 	ldw	r19,12(sp)
40013e88:	dc800217 	ldw	r18,8(sp)
40013e8c:	dc400117 	ldw	r17,4(sp)
40013e90:	dc000017 	ldw	r16,0(sp)
40013e94:	dec00904 	addi	sp,sp,36
40013e98:	f800283a 	ret
40013e9c:	002f883a 	mov	r23,zero
40013ea0:	003ff206 	br	40013e6c <__alt_data_end+0xc0013e6c>

40013ea4 <_fwalk_reent>:
40013ea4:	defff704 	addi	sp,sp,-36
40013ea8:	dd000415 	stw	r20,16(sp)
40013eac:	dfc00815 	stw	ra,32(sp)
40013eb0:	ddc00715 	stw	r23,28(sp)
40013eb4:	dd800615 	stw	r22,24(sp)
40013eb8:	dd400515 	stw	r21,20(sp)
40013ebc:	dcc00315 	stw	r19,12(sp)
40013ec0:	dc800215 	stw	r18,8(sp)
40013ec4:	dc400115 	stw	r17,4(sp)
40013ec8:	dc000015 	stw	r16,0(sp)
40013ecc:	2500b804 	addi	r20,r4,736
40013ed0:	a0002326 	beq	r20,zero,40013f60 <_fwalk_reent+0xbc>
40013ed4:	282b883a 	mov	r21,r5
40013ed8:	2027883a 	mov	r19,r4
40013edc:	002f883a 	mov	r23,zero
40013ee0:	05800044 	movi	r22,1
40013ee4:	04bfffc4 	movi	r18,-1
40013ee8:	a4400117 	ldw	r17,4(r20)
40013eec:	a4000217 	ldw	r16,8(r20)
40013ef0:	8c7fffc4 	addi	r17,r17,-1
40013ef4:	88000c16 	blt	r17,zero,40013f28 <_fwalk_reent+0x84>
40013ef8:	84000304 	addi	r16,r16,12
40013efc:	8080000b 	ldhu	r2,0(r16)
40013f00:	8c7fffc4 	addi	r17,r17,-1
40013f04:	817ffd04 	addi	r5,r16,-12
40013f08:	b080052e 	bgeu	r22,r2,40013f20 <_fwalk_reent+0x7c>
40013f0c:	8080008f 	ldh	r2,2(r16)
40013f10:	9809883a 	mov	r4,r19
40013f14:	14800226 	beq	r2,r18,40013f20 <_fwalk_reent+0x7c>
40013f18:	a83ee83a 	callr	r21
40013f1c:	b8aeb03a 	or	r23,r23,r2
40013f20:	84001a04 	addi	r16,r16,104
40013f24:	8cbff51e 	bne	r17,r18,40013efc <__alt_data_end+0xc0013efc>
40013f28:	a5000017 	ldw	r20,0(r20)
40013f2c:	a03fee1e 	bne	r20,zero,40013ee8 <__alt_data_end+0xc0013ee8>
40013f30:	b805883a 	mov	r2,r23
40013f34:	dfc00817 	ldw	ra,32(sp)
40013f38:	ddc00717 	ldw	r23,28(sp)
40013f3c:	dd800617 	ldw	r22,24(sp)
40013f40:	dd400517 	ldw	r21,20(sp)
40013f44:	dd000417 	ldw	r20,16(sp)
40013f48:	dcc00317 	ldw	r19,12(sp)
40013f4c:	dc800217 	ldw	r18,8(sp)
40013f50:	dc400117 	ldw	r17,4(sp)
40013f54:	dc000017 	ldw	r16,0(sp)
40013f58:	dec00904 	addi	sp,sp,36
40013f5c:	f800283a 	ret
40013f60:	002f883a 	mov	r23,zero
40013f64:	003ff206 	br	40013f30 <__alt_data_end+0xc0013f30>

40013f68 <_setlocale_r>:
40013f68:	30001b26 	beq	r6,zero,40013fd8 <_setlocale_r+0x70>
40013f6c:	015000b4 	movhi	r5,16386
40013f70:	defffe04 	addi	sp,sp,-8
40013f74:	296a4804 	addi	r5,r5,-22240
40013f78:	3009883a 	mov	r4,r6
40013f7c:	dc000015 	stw	r16,0(sp)
40013f80:	dfc00115 	stw	ra,4(sp)
40013f84:	3021883a 	mov	r16,r6
40013f88:	0015cb80 	call	40015cb8 <strcmp>
40013f8c:	1000061e 	bne	r2,zero,40013fa8 <_setlocale_r+0x40>
40013f90:	009000b4 	movhi	r2,16386
40013f94:	10aa2a04 	addi	r2,r2,-22360
40013f98:	dfc00117 	ldw	ra,4(sp)
40013f9c:	dc000017 	ldw	r16,0(sp)
40013fa0:	dec00204 	addi	sp,sp,8
40013fa4:	f800283a 	ret
40013fa8:	015000b4 	movhi	r5,16386
40013fac:	296a2a04 	addi	r5,r5,-22360
40013fb0:	8009883a 	mov	r4,r16
40013fb4:	0015cb80 	call	40015cb8 <strcmp>
40013fb8:	103ff526 	beq	r2,zero,40013f90 <__alt_data_end+0xc0013f90>
40013fbc:	015000b4 	movhi	r5,16386
40013fc0:	2969c404 	addi	r5,r5,-22768
40013fc4:	8009883a 	mov	r4,r16
40013fc8:	0015cb80 	call	40015cb8 <strcmp>
40013fcc:	103ff026 	beq	r2,zero,40013f90 <__alt_data_end+0xc0013f90>
40013fd0:	0005883a 	mov	r2,zero
40013fd4:	003ff006 	br	40013f98 <__alt_data_end+0xc0013f98>
40013fd8:	009000b4 	movhi	r2,16386
40013fdc:	10aa2a04 	addi	r2,r2,-22360
40013fe0:	f800283a 	ret

40013fe4 <__locale_charset>:
40013fe4:	009000b4 	movhi	r2,16386
40013fe8:	10acb704 	addi	r2,r2,-19748
40013fec:	f800283a 	ret

40013ff0 <__locale_mb_cur_max>:
40013ff0:	009000b4 	movhi	r2,16386
40013ff4:	10ad4a04 	addi	r2,r2,-19160
40013ff8:	10800017 	ldw	r2,0(r2)
40013ffc:	f800283a 	ret

40014000 <__locale_msgcharset>:
40014000:	009000b4 	movhi	r2,16386
40014004:	10acaf04 	addi	r2,r2,-19780
40014008:	f800283a 	ret

4001400c <__locale_cjk_lang>:
4001400c:	0005883a 	mov	r2,zero
40014010:	f800283a 	ret

40014014 <_localeconv_r>:
40014014:	009000b4 	movhi	r2,16386
40014018:	10acbf04 	addi	r2,r2,-19716
4001401c:	f800283a 	ret

40014020 <setlocale>:
40014020:	009000b4 	movhi	r2,16386
40014024:	10ad4704 	addi	r2,r2,-19172
40014028:	280d883a 	mov	r6,r5
4001402c:	200b883a 	mov	r5,r4
40014030:	11000017 	ldw	r4,0(r2)
40014034:	0013f681 	jmpi	40013f68 <_setlocale_r>

40014038 <localeconv>:
40014038:	009000b4 	movhi	r2,16386
4001403c:	10acbf04 	addi	r2,r2,-19716
40014040:	f800283a 	ret

40014044 <__smakebuf_r>:
40014044:	2880030b 	ldhu	r2,12(r5)
40014048:	10c0008c 	andi	r3,r2,2
4001404c:	1800411e 	bne	r3,zero,40014154 <__smakebuf_r+0x110>
40014050:	deffec04 	addi	sp,sp,-80
40014054:	dc000f15 	stw	r16,60(sp)
40014058:	2821883a 	mov	r16,r5
4001405c:	2940038f 	ldh	r5,14(r5)
40014060:	dc401015 	stw	r17,64(sp)
40014064:	dfc01315 	stw	ra,76(sp)
40014068:	dcc01215 	stw	r19,72(sp)
4001406c:	dc801115 	stw	r18,68(sp)
40014070:	2023883a 	mov	r17,r4
40014074:	28001c16 	blt	r5,zero,400140e8 <__smakebuf_r+0xa4>
40014078:	d80d883a 	mov	r6,sp
4001407c:	00178f40 	call	400178f4 <_fstat_r>
40014080:	10001816 	blt	r2,zero,400140e4 <__smakebuf_r+0xa0>
40014084:	d8800117 	ldw	r2,4(sp)
40014088:	00e00014 	movui	r3,32768
4001408c:	10bc000c 	andi	r2,r2,61440
40014090:	14c80020 	cmpeqi	r19,r2,8192
40014094:	10c03726 	beq	r2,r3,40014174 <__smakebuf_r+0x130>
40014098:	80c0030b 	ldhu	r3,12(r16)
4001409c:	18c20014 	ori	r3,r3,2048
400140a0:	80c0030d 	sth	r3,12(r16)
400140a4:	00c80004 	movi	r3,8192
400140a8:	10c0521e 	bne	r2,r3,400141f4 <__smakebuf_r+0x1b0>
400140ac:	8140038f 	ldh	r5,14(r16)
400140b0:	8809883a 	mov	r4,r17
400140b4:	00179500 	call	40017950 <_isatty_r>
400140b8:	10004c26 	beq	r2,zero,400141ec <__smakebuf_r+0x1a8>
400140bc:	8080030b 	ldhu	r2,12(r16)
400140c0:	80c010c4 	addi	r3,r16,67
400140c4:	80c00015 	stw	r3,0(r16)
400140c8:	10800054 	ori	r2,r2,1
400140cc:	8080030d 	sth	r2,12(r16)
400140d0:	00800044 	movi	r2,1
400140d4:	80c00415 	stw	r3,16(r16)
400140d8:	80800515 	stw	r2,20(r16)
400140dc:	04810004 	movi	r18,1024
400140e0:	00000706 	br	40014100 <__smakebuf_r+0xbc>
400140e4:	8080030b 	ldhu	r2,12(r16)
400140e8:	10c0200c 	andi	r3,r2,128
400140ec:	18001f1e 	bne	r3,zero,4001416c <__smakebuf_r+0x128>
400140f0:	04810004 	movi	r18,1024
400140f4:	10820014 	ori	r2,r2,2048
400140f8:	8080030d 	sth	r2,12(r16)
400140fc:	0027883a 	mov	r19,zero
40014100:	900b883a 	mov	r5,r18
40014104:	8809883a 	mov	r4,r17
40014108:	000e4bc0 	call	4000e4bc <_malloc_r>
4001410c:	10002c26 	beq	r2,zero,400141c0 <__smakebuf_r+0x17c>
40014110:	80c0030b 	ldhu	r3,12(r16)
40014114:	01100074 	movhi	r4,16385
40014118:	210c5604 	addi	r4,r4,12632
4001411c:	89000f15 	stw	r4,60(r17)
40014120:	18c02014 	ori	r3,r3,128
40014124:	80c0030d 	sth	r3,12(r16)
40014128:	80800015 	stw	r2,0(r16)
4001412c:	80800415 	stw	r2,16(r16)
40014130:	84800515 	stw	r18,20(r16)
40014134:	98001a1e 	bne	r19,zero,400141a0 <__smakebuf_r+0x15c>
40014138:	dfc01317 	ldw	ra,76(sp)
4001413c:	dcc01217 	ldw	r19,72(sp)
40014140:	dc801117 	ldw	r18,68(sp)
40014144:	dc401017 	ldw	r17,64(sp)
40014148:	dc000f17 	ldw	r16,60(sp)
4001414c:	dec01404 	addi	sp,sp,80
40014150:	f800283a 	ret
40014154:	288010c4 	addi	r2,r5,67
40014158:	28800015 	stw	r2,0(r5)
4001415c:	28800415 	stw	r2,16(r5)
40014160:	00800044 	movi	r2,1
40014164:	28800515 	stw	r2,20(r5)
40014168:	f800283a 	ret
4001416c:	04801004 	movi	r18,64
40014170:	003fe006 	br	400140f4 <__alt_data_end+0xc00140f4>
40014174:	81000a17 	ldw	r4,40(r16)
40014178:	00d00074 	movhi	r3,16385
4001417c:	18d71504 	addi	r3,r3,23636
40014180:	20ffc51e 	bne	r4,r3,40014098 <__alt_data_end+0xc0014098>
40014184:	8080030b 	ldhu	r2,12(r16)
40014188:	04810004 	movi	r18,1024
4001418c:	84801315 	stw	r18,76(r16)
40014190:	1484b03a 	or	r2,r2,r18
40014194:	8080030d 	sth	r2,12(r16)
40014198:	0027883a 	mov	r19,zero
4001419c:	003fd806 	br	40014100 <__alt_data_end+0xc0014100>
400141a0:	8140038f 	ldh	r5,14(r16)
400141a4:	8809883a 	mov	r4,r17
400141a8:	00179500 	call	40017950 <_isatty_r>
400141ac:	103fe226 	beq	r2,zero,40014138 <__alt_data_end+0xc0014138>
400141b0:	8080030b 	ldhu	r2,12(r16)
400141b4:	10800054 	ori	r2,r2,1
400141b8:	8080030d 	sth	r2,12(r16)
400141bc:	003fde06 	br	40014138 <__alt_data_end+0xc0014138>
400141c0:	8080030b 	ldhu	r2,12(r16)
400141c4:	10c0800c 	andi	r3,r2,512
400141c8:	183fdb1e 	bne	r3,zero,40014138 <__alt_data_end+0xc0014138>
400141cc:	10800094 	ori	r2,r2,2
400141d0:	80c010c4 	addi	r3,r16,67
400141d4:	8080030d 	sth	r2,12(r16)
400141d8:	00800044 	movi	r2,1
400141dc:	80c00015 	stw	r3,0(r16)
400141e0:	80c00415 	stw	r3,16(r16)
400141e4:	80800515 	stw	r2,20(r16)
400141e8:	003fd306 	br	40014138 <__alt_data_end+0xc0014138>
400141ec:	04810004 	movi	r18,1024
400141f0:	003fc306 	br	40014100 <__alt_data_end+0xc0014100>
400141f4:	0027883a 	mov	r19,zero
400141f8:	04810004 	movi	r18,1024
400141fc:	003fc006 	br	40014100 <__alt_data_end+0xc0014100>

40014200 <memchr>:
40014200:	208000cc 	andi	r2,r4,3
40014204:	280f883a 	mov	r7,r5
40014208:	10003426 	beq	r2,zero,400142dc <memchr+0xdc>
4001420c:	30bfffc4 	addi	r2,r6,-1
40014210:	30001a26 	beq	r6,zero,4001427c <memchr+0x7c>
40014214:	20c00003 	ldbu	r3,0(r4)
40014218:	29803fcc 	andi	r6,r5,255
4001421c:	30c0051e 	bne	r6,r3,40014234 <memchr+0x34>
40014220:	00001806 	br	40014284 <memchr+0x84>
40014224:	10001526 	beq	r2,zero,4001427c <memchr+0x7c>
40014228:	20c00003 	ldbu	r3,0(r4)
4001422c:	10bfffc4 	addi	r2,r2,-1
40014230:	30c01426 	beq	r6,r3,40014284 <memchr+0x84>
40014234:	21000044 	addi	r4,r4,1
40014238:	20c000cc 	andi	r3,r4,3
4001423c:	183ff91e 	bne	r3,zero,40014224 <__alt_data_end+0xc0014224>
40014240:	020000c4 	movi	r8,3
40014244:	40801136 	bltu	r8,r2,4001428c <memchr+0x8c>
40014248:	10000c26 	beq	r2,zero,4001427c <memchr+0x7c>
4001424c:	20c00003 	ldbu	r3,0(r4)
40014250:	29403fcc 	andi	r5,r5,255
40014254:	28c00b26 	beq	r5,r3,40014284 <memchr+0x84>
40014258:	20c00044 	addi	r3,r4,1
4001425c:	39803fcc 	andi	r6,r7,255
40014260:	2089883a 	add	r4,r4,r2
40014264:	00000306 	br	40014274 <memchr+0x74>
40014268:	18c00044 	addi	r3,r3,1
4001426c:	197fffc3 	ldbu	r5,-1(r3)
40014270:	31400526 	beq	r6,r5,40014288 <memchr+0x88>
40014274:	1805883a 	mov	r2,r3
40014278:	20fffb1e 	bne	r4,r3,40014268 <__alt_data_end+0xc0014268>
4001427c:	0005883a 	mov	r2,zero
40014280:	f800283a 	ret
40014284:	2005883a 	mov	r2,r4
40014288:	f800283a 	ret
4001428c:	28c03fcc 	andi	r3,r5,255
40014290:	1812923a 	slli	r9,r3,8
40014294:	02ffbff4 	movhi	r11,65279
40014298:	02a02074 	movhi	r10,32897
4001429c:	48d2b03a 	or	r9,r9,r3
400142a0:	4806943a 	slli	r3,r9,16
400142a4:	5affbfc4 	addi	r11,r11,-257
400142a8:	52a02004 	addi	r10,r10,-32640
400142ac:	48d2b03a 	or	r9,r9,r3
400142b0:	20c00017 	ldw	r3,0(r4)
400142b4:	48c6f03a 	xor	r3,r9,r3
400142b8:	1acd883a 	add	r6,r3,r11
400142bc:	00c6303a 	nor	r3,zero,r3
400142c0:	30c6703a 	and	r3,r6,r3
400142c4:	1a86703a 	and	r3,r3,r10
400142c8:	183fe01e 	bne	r3,zero,4001424c <__alt_data_end+0xc001424c>
400142cc:	10bfff04 	addi	r2,r2,-4
400142d0:	21000104 	addi	r4,r4,4
400142d4:	40bff636 	bltu	r8,r2,400142b0 <__alt_data_end+0xc00142b0>
400142d8:	003fdb06 	br	40014248 <__alt_data_end+0xc0014248>
400142dc:	3005883a 	mov	r2,r6
400142e0:	003fd706 	br	40014240 <__alt_data_end+0xc0014240>

400142e4 <memmove>:
400142e4:	2005883a 	mov	r2,r4
400142e8:	29000b2e 	bgeu	r5,r4,40014318 <memmove+0x34>
400142ec:	298f883a 	add	r7,r5,r6
400142f0:	21c0092e 	bgeu	r4,r7,40014318 <memmove+0x34>
400142f4:	2187883a 	add	r3,r4,r6
400142f8:	198bc83a 	sub	r5,r3,r6
400142fc:	30004826 	beq	r6,zero,40014420 <memmove+0x13c>
40014300:	39ffffc4 	addi	r7,r7,-1
40014304:	39000003 	ldbu	r4,0(r7)
40014308:	18ffffc4 	addi	r3,r3,-1
4001430c:	19000005 	stb	r4,0(r3)
40014310:	28fffb1e 	bne	r5,r3,40014300 <__alt_data_end+0xc0014300>
40014314:	f800283a 	ret
40014318:	00c003c4 	movi	r3,15
4001431c:	1980412e 	bgeu	r3,r6,40014424 <memmove+0x140>
40014320:	2886b03a 	or	r3,r5,r2
40014324:	18c000cc 	andi	r3,r3,3
40014328:	1800401e 	bne	r3,zero,4001442c <memmove+0x148>
4001432c:	33fffc04 	addi	r15,r6,-16
40014330:	781ed13a 	srli	r15,r15,4
40014334:	28c00104 	addi	r3,r5,4
40014338:	13400104 	addi	r13,r2,4
4001433c:	781c913a 	slli	r14,r15,4
40014340:	2b000204 	addi	r12,r5,8
40014344:	12c00204 	addi	r11,r2,8
40014348:	73800504 	addi	r14,r14,20
4001434c:	2a800304 	addi	r10,r5,12
40014350:	12400304 	addi	r9,r2,12
40014354:	2b9d883a 	add	r14,r5,r14
40014358:	2811883a 	mov	r8,r5
4001435c:	100f883a 	mov	r7,r2
40014360:	41000017 	ldw	r4,0(r8)
40014364:	39c00404 	addi	r7,r7,16
40014368:	18c00404 	addi	r3,r3,16
4001436c:	393ffc15 	stw	r4,-16(r7)
40014370:	193ffc17 	ldw	r4,-16(r3)
40014374:	6b400404 	addi	r13,r13,16
40014378:	5ac00404 	addi	r11,r11,16
4001437c:	693ffc15 	stw	r4,-16(r13)
40014380:	61000017 	ldw	r4,0(r12)
40014384:	4a400404 	addi	r9,r9,16
40014388:	42000404 	addi	r8,r8,16
4001438c:	593ffc15 	stw	r4,-16(r11)
40014390:	51000017 	ldw	r4,0(r10)
40014394:	63000404 	addi	r12,r12,16
40014398:	52800404 	addi	r10,r10,16
4001439c:	493ffc15 	stw	r4,-16(r9)
400143a0:	1bbfef1e 	bne	r3,r14,40014360 <__alt_data_end+0xc0014360>
400143a4:	79000044 	addi	r4,r15,1
400143a8:	2008913a 	slli	r4,r4,4
400143ac:	328003cc 	andi	r10,r6,15
400143b0:	02c000c4 	movi	r11,3
400143b4:	1107883a 	add	r3,r2,r4
400143b8:	290b883a 	add	r5,r5,r4
400143bc:	5a801e2e 	bgeu	r11,r10,40014438 <memmove+0x154>
400143c0:	1813883a 	mov	r9,r3
400143c4:	2811883a 	mov	r8,r5
400143c8:	500f883a 	mov	r7,r10
400143cc:	41000017 	ldw	r4,0(r8)
400143d0:	4a400104 	addi	r9,r9,4
400143d4:	39ffff04 	addi	r7,r7,-4
400143d8:	493fff15 	stw	r4,-4(r9)
400143dc:	42000104 	addi	r8,r8,4
400143e0:	59fffa36 	bltu	r11,r7,400143cc <__alt_data_end+0xc00143cc>
400143e4:	513fff04 	addi	r4,r10,-4
400143e8:	2008d0ba 	srli	r4,r4,2
400143ec:	318000cc 	andi	r6,r6,3
400143f0:	21000044 	addi	r4,r4,1
400143f4:	2109883a 	add	r4,r4,r4
400143f8:	2109883a 	add	r4,r4,r4
400143fc:	1907883a 	add	r3,r3,r4
40014400:	290b883a 	add	r5,r5,r4
40014404:	30000b26 	beq	r6,zero,40014434 <memmove+0x150>
40014408:	198d883a 	add	r6,r3,r6
4001440c:	29c00003 	ldbu	r7,0(r5)
40014410:	18c00044 	addi	r3,r3,1
40014414:	29400044 	addi	r5,r5,1
40014418:	19ffffc5 	stb	r7,-1(r3)
4001441c:	19bffb1e 	bne	r3,r6,4001440c <__alt_data_end+0xc001440c>
40014420:	f800283a 	ret
40014424:	1007883a 	mov	r3,r2
40014428:	003ff606 	br	40014404 <__alt_data_end+0xc0014404>
4001442c:	1007883a 	mov	r3,r2
40014430:	003ff506 	br	40014408 <__alt_data_end+0xc0014408>
40014434:	f800283a 	ret
40014438:	500d883a 	mov	r6,r10
4001443c:	003ff106 	br	40014404 <__alt_data_end+0xc0014404>

40014440 <_Balloc>:
40014440:	20801317 	ldw	r2,76(r4)
40014444:	defffc04 	addi	sp,sp,-16
40014448:	dc400115 	stw	r17,4(sp)
4001444c:	dc000015 	stw	r16,0(sp)
40014450:	dfc00315 	stw	ra,12(sp)
40014454:	dc800215 	stw	r18,8(sp)
40014458:	2023883a 	mov	r17,r4
4001445c:	2821883a 	mov	r16,r5
40014460:	10000f26 	beq	r2,zero,400144a0 <_Balloc+0x60>
40014464:	8407883a 	add	r3,r16,r16
40014468:	18c7883a 	add	r3,r3,r3
4001446c:	10c7883a 	add	r3,r2,r3
40014470:	18800017 	ldw	r2,0(r3)
40014474:	10001126 	beq	r2,zero,400144bc <_Balloc+0x7c>
40014478:	11000017 	ldw	r4,0(r2)
4001447c:	19000015 	stw	r4,0(r3)
40014480:	10000415 	stw	zero,16(r2)
40014484:	10000315 	stw	zero,12(r2)
40014488:	dfc00317 	ldw	ra,12(sp)
4001448c:	dc800217 	ldw	r18,8(sp)
40014490:	dc400117 	ldw	r17,4(sp)
40014494:	dc000017 	ldw	r16,0(sp)
40014498:	dec00404 	addi	sp,sp,16
4001449c:	f800283a 	ret
400144a0:	01800844 	movi	r6,33
400144a4:	01400104 	movi	r5,4
400144a8:	000e3d00 	call	4000e3d0 <_calloc_r>
400144ac:	88801315 	stw	r2,76(r17)
400144b0:	103fec1e 	bne	r2,zero,40014464 <__alt_data_end+0xc0014464>
400144b4:	0005883a 	mov	r2,zero
400144b8:	003ff306 	br	40014488 <__alt_data_end+0xc0014488>
400144bc:	01400044 	movi	r5,1
400144c0:	2c24983a 	sll	r18,r5,r16
400144c4:	8809883a 	mov	r4,r17
400144c8:	91800144 	addi	r6,r18,5
400144cc:	318d883a 	add	r6,r6,r6
400144d0:	318d883a 	add	r6,r6,r6
400144d4:	000e3d00 	call	4000e3d0 <_calloc_r>
400144d8:	103ff626 	beq	r2,zero,400144b4 <__alt_data_end+0xc00144b4>
400144dc:	14000115 	stw	r16,4(r2)
400144e0:	14800215 	stw	r18,8(r2)
400144e4:	003fe606 	br	40014480 <__alt_data_end+0xc0014480>

400144e8 <_Bfree>:
400144e8:	28000826 	beq	r5,zero,4001450c <_Bfree+0x24>
400144ec:	28c00117 	ldw	r3,4(r5)
400144f0:	20801317 	ldw	r2,76(r4)
400144f4:	18c7883a 	add	r3,r3,r3
400144f8:	18c7883a 	add	r3,r3,r3
400144fc:	10c5883a 	add	r2,r2,r3
40014500:	10c00017 	ldw	r3,0(r2)
40014504:	28c00015 	stw	r3,0(r5)
40014508:	11400015 	stw	r5,0(r2)
4001450c:	f800283a 	ret

40014510 <__multadd>:
40014510:	defffa04 	addi	sp,sp,-24
40014514:	dc800315 	stw	r18,12(sp)
40014518:	dc400215 	stw	r17,8(sp)
4001451c:	dc000115 	stw	r16,4(sp)
40014520:	2823883a 	mov	r17,r5
40014524:	2c000417 	ldw	r16,16(r5)
40014528:	dfc00515 	stw	ra,20(sp)
4001452c:	dcc00415 	stw	r19,16(sp)
40014530:	2025883a 	mov	r18,r4
40014534:	29400504 	addi	r5,r5,20
40014538:	0011883a 	mov	r8,zero
4001453c:	28c00017 	ldw	r3,0(r5)
40014540:	29400104 	addi	r5,r5,4
40014544:	42000044 	addi	r8,r8,1
40014548:	18bfffcc 	andi	r2,r3,65535
4001454c:	1185383a 	mul	r2,r2,r6
40014550:	1806d43a 	srli	r3,r3,16
40014554:	11cf883a 	add	r7,r2,r7
40014558:	3808d43a 	srli	r4,r7,16
4001455c:	1987383a 	mul	r3,r3,r6
40014560:	38bfffcc 	andi	r2,r7,65535
40014564:	1907883a 	add	r3,r3,r4
40014568:	1808943a 	slli	r4,r3,16
4001456c:	180ed43a 	srli	r7,r3,16
40014570:	2085883a 	add	r2,r4,r2
40014574:	28bfff15 	stw	r2,-4(r5)
40014578:	443ff016 	blt	r8,r16,4001453c <__alt_data_end+0xc001453c>
4001457c:	38000926 	beq	r7,zero,400145a4 <__multadd+0x94>
40014580:	88800217 	ldw	r2,8(r17)
40014584:	80800f0e 	bge	r16,r2,400145c4 <__multadd+0xb4>
40014588:	80800144 	addi	r2,r16,5
4001458c:	1085883a 	add	r2,r2,r2
40014590:	1085883a 	add	r2,r2,r2
40014594:	8885883a 	add	r2,r17,r2
40014598:	11c00015 	stw	r7,0(r2)
4001459c:	84000044 	addi	r16,r16,1
400145a0:	8c000415 	stw	r16,16(r17)
400145a4:	8805883a 	mov	r2,r17
400145a8:	dfc00517 	ldw	ra,20(sp)
400145ac:	dcc00417 	ldw	r19,16(sp)
400145b0:	dc800317 	ldw	r18,12(sp)
400145b4:	dc400217 	ldw	r17,8(sp)
400145b8:	dc000117 	ldw	r16,4(sp)
400145bc:	dec00604 	addi	sp,sp,24
400145c0:	f800283a 	ret
400145c4:	89400117 	ldw	r5,4(r17)
400145c8:	9009883a 	mov	r4,r18
400145cc:	d9c00015 	stw	r7,0(sp)
400145d0:	29400044 	addi	r5,r5,1
400145d4:	00144400 	call	40014440 <_Balloc>
400145d8:	89800417 	ldw	r6,16(r17)
400145dc:	89400304 	addi	r5,r17,12
400145e0:	11000304 	addi	r4,r2,12
400145e4:	31800084 	addi	r6,r6,2
400145e8:	318d883a 	add	r6,r6,r6
400145ec:	318d883a 	add	r6,r6,r6
400145f0:	1027883a 	mov	r19,r2
400145f4:	000ecc80 	call	4000ecc8 <memcpy>
400145f8:	d9c00017 	ldw	r7,0(sp)
400145fc:	88000a26 	beq	r17,zero,40014628 <__multadd+0x118>
40014600:	88c00117 	ldw	r3,4(r17)
40014604:	90801317 	ldw	r2,76(r18)
40014608:	18c7883a 	add	r3,r3,r3
4001460c:	18c7883a 	add	r3,r3,r3
40014610:	10c5883a 	add	r2,r2,r3
40014614:	10c00017 	ldw	r3,0(r2)
40014618:	88c00015 	stw	r3,0(r17)
4001461c:	14400015 	stw	r17,0(r2)
40014620:	9823883a 	mov	r17,r19
40014624:	003fd806 	br	40014588 <__alt_data_end+0xc0014588>
40014628:	9823883a 	mov	r17,r19
4001462c:	003fd606 	br	40014588 <__alt_data_end+0xc0014588>

40014630 <__s2b>:
40014630:	defff904 	addi	sp,sp,-28
40014634:	dc400115 	stw	r17,4(sp)
40014638:	dc000015 	stw	r16,0(sp)
4001463c:	2023883a 	mov	r17,r4
40014640:	2821883a 	mov	r16,r5
40014644:	39000204 	addi	r4,r7,8
40014648:	01400244 	movi	r5,9
4001464c:	dcc00315 	stw	r19,12(sp)
40014650:	dc800215 	stw	r18,8(sp)
40014654:	dfc00615 	stw	ra,24(sp)
40014658:	dd400515 	stw	r21,20(sp)
4001465c:	dd000415 	stw	r20,16(sp)
40014660:	3825883a 	mov	r18,r7
40014664:	3027883a 	mov	r19,r6
40014668:	000c84c0 	call	4000c84c <__divsi3>
4001466c:	00c00044 	movi	r3,1
40014670:	000b883a 	mov	r5,zero
40014674:	1880030e 	bge	r3,r2,40014684 <__s2b+0x54>
40014678:	18c7883a 	add	r3,r3,r3
4001467c:	29400044 	addi	r5,r5,1
40014680:	18bffd16 	blt	r3,r2,40014678 <__alt_data_end+0xc0014678>
40014684:	8809883a 	mov	r4,r17
40014688:	00144400 	call	40014440 <_Balloc>
4001468c:	d8c00717 	ldw	r3,28(sp)
40014690:	10c00515 	stw	r3,20(r2)
40014694:	00c00044 	movi	r3,1
40014698:	10c00415 	stw	r3,16(r2)
4001469c:	00c00244 	movi	r3,9
400146a0:	1cc0210e 	bge	r3,r19,40014728 <__s2b+0xf8>
400146a4:	80eb883a 	add	r21,r16,r3
400146a8:	a829883a 	mov	r20,r21
400146ac:	84e1883a 	add	r16,r16,r19
400146b0:	a1c00007 	ldb	r7,0(r20)
400146b4:	01800284 	movi	r6,10
400146b8:	a5000044 	addi	r20,r20,1
400146bc:	100b883a 	mov	r5,r2
400146c0:	39fff404 	addi	r7,r7,-48
400146c4:	8809883a 	mov	r4,r17
400146c8:	00145100 	call	40014510 <__multadd>
400146cc:	a43ff81e 	bne	r20,r16,400146b0 <__alt_data_end+0xc00146b0>
400146d0:	ace1883a 	add	r16,r21,r19
400146d4:	843ffe04 	addi	r16,r16,-8
400146d8:	9c800a0e 	bge	r19,r18,40014704 <__s2b+0xd4>
400146dc:	94e5c83a 	sub	r18,r18,r19
400146e0:	84a5883a 	add	r18,r16,r18
400146e4:	81c00007 	ldb	r7,0(r16)
400146e8:	01800284 	movi	r6,10
400146ec:	84000044 	addi	r16,r16,1
400146f0:	100b883a 	mov	r5,r2
400146f4:	39fff404 	addi	r7,r7,-48
400146f8:	8809883a 	mov	r4,r17
400146fc:	00145100 	call	40014510 <__multadd>
40014700:	84bff81e 	bne	r16,r18,400146e4 <__alt_data_end+0xc00146e4>
40014704:	dfc00617 	ldw	ra,24(sp)
40014708:	dd400517 	ldw	r21,20(sp)
4001470c:	dd000417 	ldw	r20,16(sp)
40014710:	dcc00317 	ldw	r19,12(sp)
40014714:	dc800217 	ldw	r18,8(sp)
40014718:	dc400117 	ldw	r17,4(sp)
4001471c:	dc000017 	ldw	r16,0(sp)
40014720:	dec00704 	addi	sp,sp,28
40014724:	f800283a 	ret
40014728:	84000284 	addi	r16,r16,10
4001472c:	1827883a 	mov	r19,r3
40014730:	003fe906 	br	400146d8 <__alt_data_end+0xc00146d8>

40014734 <__hi0bits>:
40014734:	20bfffec 	andhi	r2,r4,65535
40014738:	1000141e 	bne	r2,zero,4001478c <__hi0bits+0x58>
4001473c:	2008943a 	slli	r4,r4,16
40014740:	00800404 	movi	r2,16
40014744:	20ffc02c 	andhi	r3,r4,65280
40014748:	1800021e 	bne	r3,zero,40014754 <__hi0bits+0x20>
4001474c:	2008923a 	slli	r4,r4,8
40014750:	10800204 	addi	r2,r2,8
40014754:	20fc002c 	andhi	r3,r4,61440
40014758:	1800021e 	bne	r3,zero,40014764 <__hi0bits+0x30>
4001475c:	2008913a 	slli	r4,r4,4
40014760:	10800104 	addi	r2,r2,4
40014764:	20f0002c 	andhi	r3,r4,49152
40014768:	1800031e 	bne	r3,zero,40014778 <__hi0bits+0x44>
4001476c:	2109883a 	add	r4,r4,r4
40014770:	10800084 	addi	r2,r2,2
40014774:	2109883a 	add	r4,r4,r4
40014778:	20000316 	blt	r4,zero,40014788 <__hi0bits+0x54>
4001477c:	2110002c 	andhi	r4,r4,16384
40014780:	2000041e 	bne	r4,zero,40014794 <__hi0bits+0x60>
40014784:	00800804 	movi	r2,32
40014788:	f800283a 	ret
4001478c:	0005883a 	mov	r2,zero
40014790:	003fec06 	br	40014744 <__alt_data_end+0xc0014744>
40014794:	10800044 	addi	r2,r2,1
40014798:	f800283a 	ret

4001479c <__lo0bits>:
4001479c:	20c00017 	ldw	r3,0(r4)
400147a0:	188001cc 	andi	r2,r3,7
400147a4:	10000826 	beq	r2,zero,400147c8 <__lo0bits+0x2c>
400147a8:	1880004c 	andi	r2,r3,1
400147ac:	1000211e 	bne	r2,zero,40014834 <__lo0bits+0x98>
400147b0:	1880008c 	andi	r2,r3,2
400147b4:	1000211e 	bne	r2,zero,4001483c <__lo0bits+0xa0>
400147b8:	1806d0ba 	srli	r3,r3,2
400147bc:	00800084 	movi	r2,2
400147c0:	20c00015 	stw	r3,0(r4)
400147c4:	f800283a 	ret
400147c8:	18bfffcc 	andi	r2,r3,65535
400147cc:	10001326 	beq	r2,zero,4001481c <__lo0bits+0x80>
400147d0:	0005883a 	mov	r2,zero
400147d4:	19403fcc 	andi	r5,r3,255
400147d8:	2800021e 	bne	r5,zero,400147e4 <__lo0bits+0x48>
400147dc:	1806d23a 	srli	r3,r3,8
400147e0:	10800204 	addi	r2,r2,8
400147e4:	194003cc 	andi	r5,r3,15
400147e8:	2800021e 	bne	r5,zero,400147f4 <__lo0bits+0x58>
400147ec:	1806d13a 	srli	r3,r3,4
400147f0:	10800104 	addi	r2,r2,4
400147f4:	194000cc 	andi	r5,r3,3
400147f8:	2800021e 	bne	r5,zero,40014804 <__lo0bits+0x68>
400147fc:	1806d0ba 	srli	r3,r3,2
40014800:	10800084 	addi	r2,r2,2
40014804:	1940004c 	andi	r5,r3,1
40014808:	2800081e 	bne	r5,zero,4001482c <__lo0bits+0x90>
4001480c:	1806d07a 	srli	r3,r3,1
40014810:	1800051e 	bne	r3,zero,40014828 <__lo0bits+0x8c>
40014814:	00800804 	movi	r2,32
40014818:	f800283a 	ret
4001481c:	1806d43a 	srli	r3,r3,16
40014820:	00800404 	movi	r2,16
40014824:	003feb06 	br	400147d4 <__alt_data_end+0xc00147d4>
40014828:	10800044 	addi	r2,r2,1
4001482c:	20c00015 	stw	r3,0(r4)
40014830:	f800283a 	ret
40014834:	0005883a 	mov	r2,zero
40014838:	f800283a 	ret
4001483c:	1806d07a 	srli	r3,r3,1
40014840:	00800044 	movi	r2,1
40014844:	20c00015 	stw	r3,0(r4)
40014848:	f800283a 	ret

4001484c <__i2b>:
4001484c:	defffd04 	addi	sp,sp,-12
40014850:	dc000015 	stw	r16,0(sp)
40014854:	04000044 	movi	r16,1
40014858:	dc400115 	stw	r17,4(sp)
4001485c:	2823883a 	mov	r17,r5
40014860:	800b883a 	mov	r5,r16
40014864:	dfc00215 	stw	ra,8(sp)
40014868:	00144400 	call	40014440 <_Balloc>
4001486c:	14400515 	stw	r17,20(r2)
40014870:	14000415 	stw	r16,16(r2)
40014874:	dfc00217 	ldw	ra,8(sp)
40014878:	dc400117 	ldw	r17,4(sp)
4001487c:	dc000017 	ldw	r16,0(sp)
40014880:	dec00304 	addi	sp,sp,12
40014884:	f800283a 	ret

40014888 <__multiply>:
40014888:	defffa04 	addi	sp,sp,-24
4001488c:	dcc00315 	stw	r19,12(sp)
40014890:	dc800215 	stw	r18,8(sp)
40014894:	34c00417 	ldw	r19,16(r6)
40014898:	2c800417 	ldw	r18,16(r5)
4001489c:	dd000415 	stw	r20,16(sp)
400148a0:	dc400115 	stw	r17,4(sp)
400148a4:	dfc00515 	stw	ra,20(sp)
400148a8:	dc000015 	stw	r16,0(sp)
400148ac:	2829883a 	mov	r20,r5
400148b0:	3023883a 	mov	r17,r6
400148b4:	94c0050e 	bge	r18,r19,400148cc <__multiply+0x44>
400148b8:	9007883a 	mov	r3,r18
400148bc:	3029883a 	mov	r20,r6
400148c0:	9825883a 	mov	r18,r19
400148c4:	2823883a 	mov	r17,r5
400148c8:	1827883a 	mov	r19,r3
400148cc:	a0800217 	ldw	r2,8(r20)
400148d0:	94e1883a 	add	r16,r18,r19
400148d4:	a1400117 	ldw	r5,4(r20)
400148d8:	1400010e 	bge	r2,r16,400148e0 <__multiply+0x58>
400148dc:	29400044 	addi	r5,r5,1
400148e0:	00144400 	call	40014440 <_Balloc>
400148e4:	8415883a 	add	r10,r16,r16
400148e8:	12c00504 	addi	r11,r2,20
400148ec:	5295883a 	add	r10,r10,r10
400148f0:	5a95883a 	add	r10,r11,r10
400148f4:	5807883a 	mov	r3,r11
400148f8:	5a80032e 	bgeu	r11,r10,40014908 <__multiply+0x80>
400148fc:	18000015 	stw	zero,0(r3)
40014900:	18c00104 	addi	r3,r3,4
40014904:	1abffd36 	bltu	r3,r10,400148fc <__alt_data_end+0xc00148fc>
40014908:	9ce7883a 	add	r19,r19,r19
4001490c:	94a5883a 	add	r18,r18,r18
40014910:	89800504 	addi	r6,r17,20
40014914:	9ce7883a 	add	r19,r19,r19
40014918:	a3400504 	addi	r13,r20,20
4001491c:	94a5883a 	add	r18,r18,r18
40014920:	34d9883a 	add	r12,r6,r19
40014924:	6c93883a 	add	r9,r13,r18
40014928:	3300422e 	bgeu	r6,r12,40014a34 <__multiply+0x1ac>
4001492c:	37c00017 	ldw	ra,0(r6)
40014930:	fbffffcc 	andi	r15,ra,65535
40014934:	78001b26 	beq	r15,zero,400149a4 <__multiply+0x11c>
40014938:	5811883a 	mov	r8,r11
4001493c:	681d883a 	mov	r14,r13
40014940:	000f883a 	mov	r7,zero
40014944:	71000017 	ldw	r4,0(r14)
40014948:	40c00017 	ldw	r3,0(r8)
4001494c:	73800104 	addi	r14,r14,4
40014950:	217fffcc 	andi	r5,r4,65535
40014954:	2bcb383a 	mul	r5,r5,r15
40014958:	2008d43a 	srli	r4,r4,16
4001495c:	1c7fffcc 	andi	r17,r3,65535
40014960:	2c4b883a 	add	r5,r5,r17
40014964:	29cb883a 	add	r5,r5,r7
40014968:	23c9383a 	mul	r4,r4,r15
4001496c:	1806d43a 	srli	r3,r3,16
40014970:	280ed43a 	srli	r7,r5,16
40014974:	297fffcc 	andi	r5,r5,65535
40014978:	20c7883a 	add	r3,r4,r3
4001497c:	19c7883a 	add	r3,r3,r7
40014980:	1808943a 	slli	r4,r3,16
40014984:	4023883a 	mov	r17,r8
40014988:	180ed43a 	srli	r7,r3,16
4001498c:	214ab03a 	or	r5,r4,r5
40014990:	41400015 	stw	r5,0(r8)
40014994:	42000104 	addi	r8,r8,4
40014998:	727fea36 	bltu	r14,r9,40014944 <__alt_data_end+0xc0014944>
4001499c:	89c00115 	stw	r7,4(r17)
400149a0:	37c00017 	ldw	ra,0(r6)
400149a4:	f83ed43a 	srli	ra,ra,16
400149a8:	f8001f26 	beq	ra,zero,40014a28 <__multiply+0x1a0>
400149ac:	58c00017 	ldw	r3,0(r11)
400149b0:	681d883a 	mov	r14,r13
400149b4:	581f883a 	mov	r15,r11
400149b8:	1811883a 	mov	r8,r3
400149bc:	5825883a 	mov	r18,r11
400149c0:	000f883a 	mov	r7,zero
400149c4:	00000106 	br	400149cc <__multiply+0x144>
400149c8:	8825883a 	mov	r18,r17
400149cc:	7140000b 	ldhu	r5,0(r14)
400149d0:	4010d43a 	srli	r8,r8,16
400149d4:	193fffcc 	andi	r4,r3,65535
400149d8:	2fcb383a 	mul	r5,r5,ra
400149dc:	7bc00104 	addi	r15,r15,4
400149e0:	73800104 	addi	r14,r14,4
400149e4:	2a0b883a 	add	r5,r5,r8
400149e8:	29cb883a 	add	r5,r5,r7
400149ec:	2806943a 	slli	r3,r5,16
400149f0:	94400104 	addi	r17,r18,4
400149f4:	280ad43a 	srli	r5,r5,16
400149f8:	1908b03a 	or	r4,r3,r4
400149fc:	793fff15 	stw	r4,-4(r15)
40014a00:	70ffff17 	ldw	r3,-4(r14)
40014a04:	8a000017 	ldw	r8,0(r17)
40014a08:	1806d43a 	srli	r3,r3,16
40014a0c:	413fffcc 	andi	r4,r8,65535
40014a10:	1fc7383a 	mul	r3,r3,ra
40014a14:	1907883a 	add	r3,r3,r4
40014a18:	1947883a 	add	r3,r3,r5
40014a1c:	180ed43a 	srli	r7,r3,16
40014a20:	727fe936 	bltu	r14,r9,400149c8 <__alt_data_end+0xc00149c8>
40014a24:	90c00115 	stw	r3,4(r18)
40014a28:	31800104 	addi	r6,r6,4
40014a2c:	5ac00104 	addi	r11,r11,4
40014a30:	333fbe36 	bltu	r6,r12,4001492c <__alt_data_end+0xc001492c>
40014a34:	0400090e 	bge	zero,r16,40014a5c <__multiply+0x1d4>
40014a38:	50ffff17 	ldw	r3,-4(r10)
40014a3c:	52bfff04 	addi	r10,r10,-4
40014a40:	18000326 	beq	r3,zero,40014a50 <__multiply+0x1c8>
40014a44:	00000506 	br	40014a5c <__multiply+0x1d4>
40014a48:	50c00017 	ldw	r3,0(r10)
40014a4c:	1800031e 	bne	r3,zero,40014a5c <__multiply+0x1d4>
40014a50:	843fffc4 	addi	r16,r16,-1
40014a54:	52bfff04 	addi	r10,r10,-4
40014a58:	803ffb1e 	bne	r16,zero,40014a48 <__alt_data_end+0xc0014a48>
40014a5c:	14000415 	stw	r16,16(r2)
40014a60:	dfc00517 	ldw	ra,20(sp)
40014a64:	dd000417 	ldw	r20,16(sp)
40014a68:	dcc00317 	ldw	r19,12(sp)
40014a6c:	dc800217 	ldw	r18,8(sp)
40014a70:	dc400117 	ldw	r17,4(sp)
40014a74:	dc000017 	ldw	r16,0(sp)
40014a78:	dec00604 	addi	sp,sp,24
40014a7c:	f800283a 	ret

40014a80 <__pow5mult>:
40014a80:	defffa04 	addi	sp,sp,-24
40014a84:	dcc00315 	stw	r19,12(sp)
40014a88:	dc000015 	stw	r16,0(sp)
40014a8c:	dfc00515 	stw	ra,20(sp)
40014a90:	dd000415 	stw	r20,16(sp)
40014a94:	dc800215 	stw	r18,8(sp)
40014a98:	dc400115 	stw	r17,4(sp)
40014a9c:	308000cc 	andi	r2,r6,3
40014aa0:	3021883a 	mov	r16,r6
40014aa4:	2027883a 	mov	r19,r4
40014aa8:	10002f1e 	bne	r2,zero,40014b68 <__pow5mult+0xe8>
40014aac:	2825883a 	mov	r18,r5
40014ab0:	8021d0ba 	srai	r16,r16,2
40014ab4:	80001a26 	beq	r16,zero,40014b20 <__pow5mult+0xa0>
40014ab8:	9c401217 	ldw	r17,72(r19)
40014abc:	8800061e 	bne	r17,zero,40014ad8 <__pow5mult+0x58>
40014ac0:	00003406 	br	40014b94 <__pow5mult+0x114>
40014ac4:	8021d07a 	srai	r16,r16,1
40014ac8:	80001526 	beq	r16,zero,40014b20 <__pow5mult+0xa0>
40014acc:	88800017 	ldw	r2,0(r17)
40014ad0:	10001c26 	beq	r2,zero,40014b44 <__pow5mult+0xc4>
40014ad4:	1023883a 	mov	r17,r2
40014ad8:	8080004c 	andi	r2,r16,1
40014adc:	103ff926 	beq	r2,zero,40014ac4 <__alt_data_end+0xc0014ac4>
40014ae0:	880d883a 	mov	r6,r17
40014ae4:	900b883a 	mov	r5,r18
40014ae8:	9809883a 	mov	r4,r19
40014aec:	00148880 	call	40014888 <__multiply>
40014af0:	90001b26 	beq	r18,zero,40014b60 <__pow5mult+0xe0>
40014af4:	91000117 	ldw	r4,4(r18)
40014af8:	98c01317 	ldw	r3,76(r19)
40014afc:	8021d07a 	srai	r16,r16,1
40014b00:	2109883a 	add	r4,r4,r4
40014b04:	2109883a 	add	r4,r4,r4
40014b08:	1907883a 	add	r3,r3,r4
40014b0c:	19000017 	ldw	r4,0(r3)
40014b10:	91000015 	stw	r4,0(r18)
40014b14:	1c800015 	stw	r18,0(r3)
40014b18:	1025883a 	mov	r18,r2
40014b1c:	803feb1e 	bne	r16,zero,40014acc <__alt_data_end+0xc0014acc>
40014b20:	9005883a 	mov	r2,r18
40014b24:	dfc00517 	ldw	ra,20(sp)
40014b28:	dd000417 	ldw	r20,16(sp)
40014b2c:	dcc00317 	ldw	r19,12(sp)
40014b30:	dc800217 	ldw	r18,8(sp)
40014b34:	dc400117 	ldw	r17,4(sp)
40014b38:	dc000017 	ldw	r16,0(sp)
40014b3c:	dec00604 	addi	sp,sp,24
40014b40:	f800283a 	ret
40014b44:	880d883a 	mov	r6,r17
40014b48:	880b883a 	mov	r5,r17
40014b4c:	9809883a 	mov	r4,r19
40014b50:	00148880 	call	40014888 <__multiply>
40014b54:	88800015 	stw	r2,0(r17)
40014b58:	10000015 	stw	zero,0(r2)
40014b5c:	003fdd06 	br	40014ad4 <__alt_data_end+0xc0014ad4>
40014b60:	1025883a 	mov	r18,r2
40014b64:	003fd706 	br	40014ac4 <__alt_data_end+0xc0014ac4>
40014b68:	10bfffc4 	addi	r2,r2,-1
40014b6c:	1085883a 	add	r2,r2,r2
40014b70:	00d000b4 	movhi	r3,16386
40014b74:	18ea4b04 	addi	r3,r3,-22228
40014b78:	1085883a 	add	r2,r2,r2
40014b7c:	1885883a 	add	r2,r3,r2
40014b80:	11800017 	ldw	r6,0(r2)
40014b84:	000f883a 	mov	r7,zero
40014b88:	00145100 	call	40014510 <__multadd>
40014b8c:	1025883a 	mov	r18,r2
40014b90:	003fc706 	br	40014ab0 <__alt_data_end+0xc0014ab0>
40014b94:	05000044 	movi	r20,1
40014b98:	a00b883a 	mov	r5,r20
40014b9c:	9809883a 	mov	r4,r19
40014ba0:	00144400 	call	40014440 <_Balloc>
40014ba4:	1023883a 	mov	r17,r2
40014ba8:	00809c44 	movi	r2,625
40014bac:	88800515 	stw	r2,20(r17)
40014bb0:	8d000415 	stw	r20,16(r17)
40014bb4:	9c401215 	stw	r17,72(r19)
40014bb8:	88000015 	stw	zero,0(r17)
40014bbc:	003fc606 	br	40014ad8 <__alt_data_end+0xc0014ad8>

40014bc0 <__lshift>:
40014bc0:	defff904 	addi	sp,sp,-28
40014bc4:	dd400515 	stw	r21,20(sp)
40014bc8:	dcc00315 	stw	r19,12(sp)
40014bcc:	302bd17a 	srai	r21,r6,5
40014bd0:	2cc00417 	ldw	r19,16(r5)
40014bd4:	28800217 	ldw	r2,8(r5)
40014bd8:	dd000415 	stw	r20,16(sp)
40014bdc:	ace7883a 	add	r19,r21,r19
40014be0:	dc800215 	stw	r18,8(sp)
40014be4:	dc400115 	stw	r17,4(sp)
40014be8:	dc000015 	stw	r16,0(sp)
40014bec:	dfc00615 	stw	ra,24(sp)
40014bf0:	9c000044 	addi	r16,r19,1
40014bf4:	2823883a 	mov	r17,r5
40014bf8:	3029883a 	mov	r20,r6
40014bfc:	2025883a 	mov	r18,r4
40014c00:	29400117 	ldw	r5,4(r5)
40014c04:	1400030e 	bge	r2,r16,40014c14 <__lshift+0x54>
40014c08:	1085883a 	add	r2,r2,r2
40014c0c:	29400044 	addi	r5,r5,1
40014c10:	143ffd16 	blt	r2,r16,40014c08 <__alt_data_end+0xc0014c08>
40014c14:	9009883a 	mov	r4,r18
40014c18:	00144400 	call	40014440 <_Balloc>
40014c1c:	10c00504 	addi	r3,r2,20
40014c20:	0540070e 	bge	zero,r21,40014c40 <__lshift+0x80>
40014c24:	ad6b883a 	add	r21,r21,r21
40014c28:	ad6b883a 	add	r21,r21,r21
40014c2c:	1809883a 	mov	r4,r3
40014c30:	1d47883a 	add	r3,r3,r21
40014c34:	20000015 	stw	zero,0(r4)
40014c38:	21000104 	addi	r4,r4,4
40014c3c:	193ffd1e 	bne	r3,r4,40014c34 <__alt_data_end+0xc0014c34>
40014c40:	8a000417 	ldw	r8,16(r17)
40014c44:	89000504 	addi	r4,r17,20
40014c48:	a18007cc 	andi	r6,r20,31
40014c4c:	4211883a 	add	r8,r8,r8
40014c50:	4211883a 	add	r8,r8,r8
40014c54:	2211883a 	add	r8,r4,r8
40014c58:	30002326 	beq	r6,zero,40014ce8 <__lshift+0x128>
40014c5c:	02400804 	movi	r9,32
40014c60:	4993c83a 	sub	r9,r9,r6
40014c64:	000b883a 	mov	r5,zero
40014c68:	21c00017 	ldw	r7,0(r4)
40014c6c:	1815883a 	mov	r10,r3
40014c70:	18c00104 	addi	r3,r3,4
40014c74:	398e983a 	sll	r7,r7,r6
40014c78:	21000104 	addi	r4,r4,4
40014c7c:	394ab03a 	or	r5,r7,r5
40014c80:	197fff15 	stw	r5,-4(r3)
40014c84:	217fff17 	ldw	r5,-4(r4)
40014c88:	2a4ad83a 	srl	r5,r5,r9
40014c8c:	223ff636 	bltu	r4,r8,40014c68 <__alt_data_end+0xc0014c68>
40014c90:	51400115 	stw	r5,4(r10)
40014c94:	28001a1e 	bne	r5,zero,40014d00 <__lshift+0x140>
40014c98:	843fffc4 	addi	r16,r16,-1
40014c9c:	14000415 	stw	r16,16(r2)
40014ca0:	88000826 	beq	r17,zero,40014cc4 <__lshift+0x104>
40014ca4:	89000117 	ldw	r4,4(r17)
40014ca8:	90c01317 	ldw	r3,76(r18)
40014cac:	2109883a 	add	r4,r4,r4
40014cb0:	2109883a 	add	r4,r4,r4
40014cb4:	1907883a 	add	r3,r3,r4
40014cb8:	19000017 	ldw	r4,0(r3)
40014cbc:	89000015 	stw	r4,0(r17)
40014cc0:	1c400015 	stw	r17,0(r3)
40014cc4:	dfc00617 	ldw	ra,24(sp)
40014cc8:	dd400517 	ldw	r21,20(sp)
40014ccc:	dd000417 	ldw	r20,16(sp)
40014cd0:	dcc00317 	ldw	r19,12(sp)
40014cd4:	dc800217 	ldw	r18,8(sp)
40014cd8:	dc400117 	ldw	r17,4(sp)
40014cdc:	dc000017 	ldw	r16,0(sp)
40014ce0:	dec00704 	addi	sp,sp,28
40014ce4:	f800283a 	ret
40014ce8:	21400017 	ldw	r5,0(r4)
40014cec:	18c00104 	addi	r3,r3,4
40014cf0:	21000104 	addi	r4,r4,4
40014cf4:	197fff15 	stw	r5,-4(r3)
40014cf8:	223ffb36 	bltu	r4,r8,40014ce8 <__alt_data_end+0xc0014ce8>
40014cfc:	003fe606 	br	40014c98 <__alt_data_end+0xc0014c98>
40014d00:	9c000084 	addi	r16,r19,2
40014d04:	003fe406 	br	40014c98 <__alt_data_end+0xc0014c98>

40014d08 <__mcmp>:
40014d08:	20800417 	ldw	r2,16(r4)
40014d0c:	28c00417 	ldw	r3,16(r5)
40014d10:	10c5c83a 	sub	r2,r2,r3
40014d14:	1000111e 	bne	r2,zero,40014d5c <__mcmp+0x54>
40014d18:	18c7883a 	add	r3,r3,r3
40014d1c:	18c7883a 	add	r3,r3,r3
40014d20:	21000504 	addi	r4,r4,20
40014d24:	29400504 	addi	r5,r5,20
40014d28:	20c5883a 	add	r2,r4,r3
40014d2c:	28cb883a 	add	r5,r5,r3
40014d30:	00000106 	br	40014d38 <__mcmp+0x30>
40014d34:	20800a2e 	bgeu	r4,r2,40014d60 <__mcmp+0x58>
40014d38:	10bfff04 	addi	r2,r2,-4
40014d3c:	297fff04 	addi	r5,r5,-4
40014d40:	11800017 	ldw	r6,0(r2)
40014d44:	28c00017 	ldw	r3,0(r5)
40014d48:	30fffa26 	beq	r6,r3,40014d34 <__alt_data_end+0xc0014d34>
40014d4c:	30c00236 	bltu	r6,r3,40014d58 <__mcmp+0x50>
40014d50:	00800044 	movi	r2,1
40014d54:	f800283a 	ret
40014d58:	00bfffc4 	movi	r2,-1
40014d5c:	f800283a 	ret
40014d60:	0005883a 	mov	r2,zero
40014d64:	f800283a 	ret

40014d68 <__mdiff>:
40014d68:	28c00417 	ldw	r3,16(r5)
40014d6c:	30800417 	ldw	r2,16(r6)
40014d70:	defffa04 	addi	sp,sp,-24
40014d74:	dcc00315 	stw	r19,12(sp)
40014d78:	dc800215 	stw	r18,8(sp)
40014d7c:	dfc00515 	stw	ra,20(sp)
40014d80:	dd000415 	stw	r20,16(sp)
40014d84:	dc400115 	stw	r17,4(sp)
40014d88:	dc000015 	stw	r16,0(sp)
40014d8c:	1887c83a 	sub	r3,r3,r2
40014d90:	2825883a 	mov	r18,r5
40014d94:	3027883a 	mov	r19,r6
40014d98:	1800141e 	bne	r3,zero,40014dec <__mdiff+0x84>
40014d9c:	1085883a 	add	r2,r2,r2
40014da0:	1085883a 	add	r2,r2,r2
40014da4:	2a000504 	addi	r8,r5,20
40014da8:	34000504 	addi	r16,r6,20
40014dac:	4087883a 	add	r3,r8,r2
40014db0:	8085883a 	add	r2,r16,r2
40014db4:	00000106 	br	40014dbc <__mdiff+0x54>
40014db8:	40c0592e 	bgeu	r8,r3,40014f20 <__mdiff+0x1b8>
40014dbc:	18ffff04 	addi	r3,r3,-4
40014dc0:	10bfff04 	addi	r2,r2,-4
40014dc4:	19c00017 	ldw	r7,0(r3)
40014dc8:	11400017 	ldw	r5,0(r2)
40014dcc:	397ffa26 	beq	r7,r5,40014db8 <__alt_data_end+0xc0014db8>
40014dd0:	3940592e 	bgeu	r7,r5,40014f38 <__mdiff+0x1d0>
40014dd4:	9005883a 	mov	r2,r18
40014dd8:	4023883a 	mov	r17,r8
40014ddc:	9825883a 	mov	r18,r19
40014de0:	05000044 	movi	r20,1
40014de4:	1027883a 	mov	r19,r2
40014de8:	00000406 	br	40014dfc <__mdiff+0x94>
40014dec:	18005616 	blt	r3,zero,40014f48 <__mdiff+0x1e0>
40014df0:	34400504 	addi	r17,r6,20
40014df4:	2c000504 	addi	r16,r5,20
40014df8:	0029883a 	mov	r20,zero
40014dfc:	91400117 	ldw	r5,4(r18)
40014e00:	00144400 	call	40014440 <_Balloc>
40014e04:	92400417 	ldw	r9,16(r18)
40014e08:	9b000417 	ldw	r12,16(r19)
40014e0c:	12c00504 	addi	r11,r2,20
40014e10:	4a51883a 	add	r8,r9,r9
40014e14:	6319883a 	add	r12,r12,r12
40014e18:	4211883a 	add	r8,r8,r8
40014e1c:	6319883a 	add	r12,r12,r12
40014e20:	15000315 	stw	r20,12(r2)
40014e24:	8211883a 	add	r8,r16,r8
40014e28:	8b19883a 	add	r12,r17,r12
40014e2c:	0007883a 	mov	r3,zero
40014e30:	81400017 	ldw	r5,0(r16)
40014e34:	89c00017 	ldw	r7,0(r17)
40014e38:	59800104 	addi	r6,r11,4
40014e3c:	293fffcc 	andi	r4,r5,65535
40014e40:	20c7883a 	add	r3,r4,r3
40014e44:	393fffcc 	andi	r4,r7,65535
40014e48:	1909c83a 	sub	r4,r3,r4
40014e4c:	280ad43a 	srli	r5,r5,16
40014e50:	380ed43a 	srli	r7,r7,16
40014e54:	2007d43a 	srai	r3,r4,16
40014e58:	213fffcc 	andi	r4,r4,65535
40014e5c:	29cbc83a 	sub	r5,r5,r7
40014e60:	28c7883a 	add	r3,r5,r3
40014e64:	180a943a 	slli	r5,r3,16
40014e68:	8c400104 	addi	r17,r17,4
40014e6c:	84000104 	addi	r16,r16,4
40014e70:	2908b03a 	or	r4,r5,r4
40014e74:	59000015 	stw	r4,0(r11)
40014e78:	1807d43a 	srai	r3,r3,16
40014e7c:	3015883a 	mov	r10,r6
40014e80:	3017883a 	mov	r11,r6
40014e84:	8b3fea36 	bltu	r17,r12,40014e30 <__alt_data_end+0xc0014e30>
40014e88:	8200162e 	bgeu	r16,r8,40014ee4 <__mdiff+0x17c>
40014e8c:	8017883a 	mov	r11,r16
40014e90:	59400017 	ldw	r5,0(r11)
40014e94:	31800104 	addi	r6,r6,4
40014e98:	5ac00104 	addi	r11,r11,4
40014e9c:	293fffcc 	andi	r4,r5,65535
40014ea0:	20c7883a 	add	r3,r4,r3
40014ea4:	280ed43a 	srli	r7,r5,16
40014ea8:	180bd43a 	srai	r5,r3,16
40014eac:	193fffcc 	andi	r4,r3,65535
40014eb0:	3947883a 	add	r3,r7,r5
40014eb4:	180a943a 	slli	r5,r3,16
40014eb8:	1807d43a 	srai	r3,r3,16
40014ebc:	2908b03a 	or	r4,r5,r4
40014ec0:	313fff15 	stw	r4,-4(r6)
40014ec4:	5a3ff236 	bltu	r11,r8,40014e90 <__alt_data_end+0xc0014e90>
40014ec8:	0406303a 	nor	r3,zero,r16
40014ecc:	1a07883a 	add	r3,r3,r8
40014ed0:	1806d0ba 	srli	r3,r3,2
40014ed4:	18c00044 	addi	r3,r3,1
40014ed8:	18c7883a 	add	r3,r3,r3
40014edc:	18c7883a 	add	r3,r3,r3
40014ee0:	50d5883a 	add	r10,r10,r3
40014ee4:	50ffff04 	addi	r3,r10,-4
40014ee8:	2000041e 	bne	r4,zero,40014efc <__mdiff+0x194>
40014eec:	18ffff04 	addi	r3,r3,-4
40014ef0:	19000017 	ldw	r4,0(r3)
40014ef4:	4a7fffc4 	addi	r9,r9,-1
40014ef8:	203ffc26 	beq	r4,zero,40014eec <__alt_data_end+0xc0014eec>
40014efc:	12400415 	stw	r9,16(r2)
40014f00:	dfc00517 	ldw	ra,20(sp)
40014f04:	dd000417 	ldw	r20,16(sp)
40014f08:	dcc00317 	ldw	r19,12(sp)
40014f0c:	dc800217 	ldw	r18,8(sp)
40014f10:	dc400117 	ldw	r17,4(sp)
40014f14:	dc000017 	ldw	r16,0(sp)
40014f18:	dec00604 	addi	sp,sp,24
40014f1c:	f800283a 	ret
40014f20:	000b883a 	mov	r5,zero
40014f24:	00144400 	call	40014440 <_Balloc>
40014f28:	00c00044 	movi	r3,1
40014f2c:	10c00415 	stw	r3,16(r2)
40014f30:	10000515 	stw	zero,20(r2)
40014f34:	003ff206 	br	40014f00 <__alt_data_end+0xc0014f00>
40014f38:	8023883a 	mov	r17,r16
40014f3c:	0029883a 	mov	r20,zero
40014f40:	4021883a 	mov	r16,r8
40014f44:	003fad06 	br	40014dfc <__alt_data_end+0xc0014dfc>
40014f48:	9005883a 	mov	r2,r18
40014f4c:	94400504 	addi	r17,r18,20
40014f50:	9c000504 	addi	r16,r19,20
40014f54:	9825883a 	mov	r18,r19
40014f58:	05000044 	movi	r20,1
40014f5c:	1027883a 	mov	r19,r2
40014f60:	003fa606 	br	40014dfc <__alt_data_end+0xc0014dfc>

40014f64 <__ulp>:
40014f64:	295ffc2c 	andhi	r5,r5,32752
40014f68:	00bf3034 	movhi	r2,64704
40014f6c:	2887883a 	add	r3,r5,r2
40014f70:	00c0020e 	bge	zero,r3,40014f7c <__ulp+0x18>
40014f74:	0005883a 	mov	r2,zero
40014f78:	f800283a 	ret
40014f7c:	00c7c83a 	sub	r3,zero,r3
40014f80:	1807d53a 	srai	r3,r3,20
40014f84:	008004c4 	movi	r2,19
40014f88:	10c00b0e 	bge	r2,r3,40014fb8 <__ulp+0x54>
40014f8c:	18bffb04 	addi	r2,r3,-20
40014f90:	01000784 	movi	r4,30
40014f94:	0007883a 	mov	r3,zero
40014f98:	20800516 	blt	r4,r2,40014fb0 <__ulp+0x4c>
40014f9c:	010007c4 	movi	r4,31
40014fa0:	2089c83a 	sub	r4,r4,r2
40014fa4:	00800044 	movi	r2,1
40014fa8:	1104983a 	sll	r2,r2,r4
40014fac:	f800283a 	ret
40014fb0:	00800044 	movi	r2,1
40014fb4:	f800283a 	ret
40014fb8:	01400234 	movhi	r5,8
40014fbc:	28c7d83a 	sra	r3,r5,r3
40014fc0:	0005883a 	mov	r2,zero
40014fc4:	f800283a 	ret

40014fc8 <__b2d>:
40014fc8:	defffa04 	addi	sp,sp,-24
40014fcc:	dc000015 	stw	r16,0(sp)
40014fd0:	24000417 	ldw	r16,16(r4)
40014fd4:	dc400115 	stw	r17,4(sp)
40014fd8:	24400504 	addi	r17,r4,20
40014fdc:	8421883a 	add	r16,r16,r16
40014fe0:	8421883a 	add	r16,r16,r16
40014fe4:	8c21883a 	add	r16,r17,r16
40014fe8:	dc800215 	stw	r18,8(sp)
40014fec:	84bfff17 	ldw	r18,-4(r16)
40014ff0:	dd000415 	stw	r20,16(sp)
40014ff4:	dcc00315 	stw	r19,12(sp)
40014ff8:	9009883a 	mov	r4,r18
40014ffc:	2829883a 	mov	r20,r5
40015000:	dfc00515 	stw	ra,20(sp)
40015004:	00147340 	call	40014734 <__hi0bits>
40015008:	00c00804 	movi	r3,32
4001500c:	1889c83a 	sub	r4,r3,r2
40015010:	a1000015 	stw	r4,0(r20)
40015014:	01000284 	movi	r4,10
40015018:	84ffff04 	addi	r19,r16,-4
4001501c:	20801216 	blt	r4,r2,40015068 <__b2d+0xa0>
40015020:	018002c4 	movi	r6,11
40015024:	308dc83a 	sub	r6,r6,r2
40015028:	9186d83a 	srl	r3,r18,r6
4001502c:	18cffc34 	orhi	r3,r3,16368
40015030:	8cc0212e 	bgeu	r17,r19,400150b8 <__b2d+0xf0>
40015034:	813ffe17 	ldw	r4,-8(r16)
40015038:	218cd83a 	srl	r6,r4,r6
4001503c:	10800544 	addi	r2,r2,21
40015040:	9084983a 	sll	r2,r18,r2
40015044:	1184b03a 	or	r2,r2,r6
40015048:	dfc00517 	ldw	ra,20(sp)
4001504c:	dd000417 	ldw	r20,16(sp)
40015050:	dcc00317 	ldw	r19,12(sp)
40015054:	dc800217 	ldw	r18,8(sp)
40015058:	dc400117 	ldw	r17,4(sp)
4001505c:	dc000017 	ldw	r16,0(sp)
40015060:	dec00604 	addi	sp,sp,24
40015064:	f800283a 	ret
40015068:	8cc00f2e 	bgeu	r17,r19,400150a8 <__b2d+0xe0>
4001506c:	117ffd44 	addi	r5,r2,-11
40015070:	80bffe17 	ldw	r2,-8(r16)
40015074:	28000e26 	beq	r5,zero,400150b0 <__b2d+0xe8>
40015078:	1949c83a 	sub	r4,r3,r5
4001507c:	9164983a 	sll	r18,r18,r5
40015080:	1106d83a 	srl	r3,r2,r4
40015084:	81bffe04 	addi	r6,r16,-8
40015088:	948ffc34 	orhi	r18,r18,16368
4001508c:	90c6b03a 	or	r3,r18,r3
40015090:	89800e2e 	bgeu	r17,r6,400150cc <__b2d+0x104>
40015094:	81bffd17 	ldw	r6,-12(r16)
40015098:	1144983a 	sll	r2,r2,r5
4001509c:	310ad83a 	srl	r5,r6,r4
400150a0:	2884b03a 	or	r2,r5,r2
400150a4:	003fe806 	br	40015048 <__alt_data_end+0xc0015048>
400150a8:	10bffd44 	addi	r2,r2,-11
400150ac:	1000041e 	bne	r2,zero,400150c0 <__b2d+0xf8>
400150b0:	90cffc34 	orhi	r3,r18,16368
400150b4:	003fe406 	br	40015048 <__alt_data_end+0xc0015048>
400150b8:	000d883a 	mov	r6,zero
400150bc:	003fdf06 	br	4001503c <__alt_data_end+0xc001503c>
400150c0:	90a4983a 	sll	r18,r18,r2
400150c4:	0005883a 	mov	r2,zero
400150c8:	003ff906 	br	400150b0 <__alt_data_end+0xc00150b0>
400150cc:	1144983a 	sll	r2,r2,r5
400150d0:	003fdd06 	br	40015048 <__alt_data_end+0xc0015048>

400150d4 <__d2b>:
400150d4:	defff804 	addi	sp,sp,-32
400150d8:	dc000215 	stw	r16,8(sp)
400150dc:	3021883a 	mov	r16,r6
400150e0:	dc400315 	stw	r17,12(sp)
400150e4:	8022907a 	slli	r17,r16,1
400150e8:	dd000615 	stw	r20,24(sp)
400150ec:	2829883a 	mov	r20,r5
400150f0:	01400044 	movi	r5,1
400150f4:	dcc00515 	stw	r19,20(sp)
400150f8:	dc800415 	stw	r18,16(sp)
400150fc:	dfc00715 	stw	ra,28(sp)
40015100:	3825883a 	mov	r18,r7
40015104:	8822d57a 	srli	r17,r17,21
40015108:	00144400 	call	40014440 <_Balloc>
4001510c:	1027883a 	mov	r19,r2
40015110:	00800434 	movhi	r2,16
40015114:	10bfffc4 	addi	r2,r2,-1
40015118:	808c703a 	and	r6,r16,r2
4001511c:	88000126 	beq	r17,zero,40015124 <__d2b+0x50>
40015120:	31800434 	orhi	r6,r6,16
40015124:	d9800015 	stw	r6,0(sp)
40015128:	a0002426 	beq	r20,zero,400151bc <__d2b+0xe8>
4001512c:	d9000104 	addi	r4,sp,4
40015130:	dd000115 	stw	r20,4(sp)
40015134:	001479c0 	call	4001479c <__lo0bits>
40015138:	d8c00017 	ldw	r3,0(sp)
4001513c:	10002f1e 	bne	r2,zero,400151fc <__d2b+0x128>
40015140:	d9000117 	ldw	r4,4(sp)
40015144:	99000515 	stw	r4,20(r19)
40015148:	1821003a 	cmpeq	r16,r3,zero
4001514c:	01000084 	movi	r4,2
40015150:	2421c83a 	sub	r16,r4,r16
40015154:	98c00615 	stw	r3,24(r19)
40015158:	9c000415 	stw	r16,16(r19)
4001515c:	88001f1e 	bne	r17,zero,400151dc <__d2b+0x108>
40015160:	10bef384 	addi	r2,r2,-1074
40015164:	90800015 	stw	r2,0(r18)
40015168:	00900034 	movhi	r2,16384
4001516c:	10bfffc4 	addi	r2,r2,-1
40015170:	8085883a 	add	r2,r16,r2
40015174:	1085883a 	add	r2,r2,r2
40015178:	1085883a 	add	r2,r2,r2
4001517c:	9885883a 	add	r2,r19,r2
40015180:	11000517 	ldw	r4,20(r2)
40015184:	8020917a 	slli	r16,r16,5
40015188:	00147340 	call	40014734 <__hi0bits>
4001518c:	d8c00817 	ldw	r3,32(sp)
40015190:	8085c83a 	sub	r2,r16,r2
40015194:	18800015 	stw	r2,0(r3)
40015198:	9805883a 	mov	r2,r19
4001519c:	dfc00717 	ldw	ra,28(sp)
400151a0:	dd000617 	ldw	r20,24(sp)
400151a4:	dcc00517 	ldw	r19,20(sp)
400151a8:	dc800417 	ldw	r18,16(sp)
400151ac:	dc400317 	ldw	r17,12(sp)
400151b0:	dc000217 	ldw	r16,8(sp)
400151b4:	dec00804 	addi	sp,sp,32
400151b8:	f800283a 	ret
400151bc:	d809883a 	mov	r4,sp
400151c0:	001479c0 	call	4001479c <__lo0bits>
400151c4:	d8c00017 	ldw	r3,0(sp)
400151c8:	04000044 	movi	r16,1
400151cc:	9c000415 	stw	r16,16(r19)
400151d0:	98c00515 	stw	r3,20(r19)
400151d4:	10800804 	addi	r2,r2,32
400151d8:	883fe126 	beq	r17,zero,40015160 <__alt_data_end+0xc0015160>
400151dc:	00c00d44 	movi	r3,53
400151e0:	8c7ef344 	addi	r17,r17,-1075
400151e4:	88a3883a 	add	r17,r17,r2
400151e8:	1885c83a 	sub	r2,r3,r2
400151ec:	d8c00817 	ldw	r3,32(sp)
400151f0:	94400015 	stw	r17,0(r18)
400151f4:	18800015 	stw	r2,0(r3)
400151f8:	003fe706 	br	40015198 <__alt_data_end+0xc0015198>
400151fc:	01000804 	movi	r4,32
40015200:	2089c83a 	sub	r4,r4,r2
40015204:	1908983a 	sll	r4,r3,r4
40015208:	d9400117 	ldw	r5,4(sp)
4001520c:	1886d83a 	srl	r3,r3,r2
40015210:	2148b03a 	or	r4,r4,r5
40015214:	99000515 	stw	r4,20(r19)
40015218:	d8c00015 	stw	r3,0(sp)
4001521c:	003fca06 	br	40015148 <__alt_data_end+0xc0015148>

40015220 <__ratio>:
40015220:	defff904 	addi	sp,sp,-28
40015224:	dc400315 	stw	r17,12(sp)
40015228:	2823883a 	mov	r17,r5
4001522c:	d9400104 	addi	r5,sp,4
40015230:	dfc00615 	stw	ra,24(sp)
40015234:	dcc00515 	stw	r19,20(sp)
40015238:	dc800415 	stw	r18,16(sp)
4001523c:	2027883a 	mov	r19,r4
40015240:	dc000215 	stw	r16,8(sp)
40015244:	0014fc80 	call	40014fc8 <__b2d>
40015248:	d80b883a 	mov	r5,sp
4001524c:	8809883a 	mov	r4,r17
40015250:	1025883a 	mov	r18,r2
40015254:	1821883a 	mov	r16,r3
40015258:	0014fc80 	call	40014fc8 <__b2d>
4001525c:	8a000417 	ldw	r8,16(r17)
40015260:	99000417 	ldw	r4,16(r19)
40015264:	d9400117 	ldw	r5,4(sp)
40015268:	2209c83a 	sub	r4,r4,r8
4001526c:	2010917a 	slli	r8,r4,5
40015270:	d9000017 	ldw	r4,0(sp)
40015274:	2909c83a 	sub	r4,r5,r4
40015278:	4109883a 	add	r4,r8,r4
4001527c:	01000e0e 	bge	zero,r4,400152b8 <__ratio+0x98>
40015280:	2008953a 	slli	r4,r4,20
40015284:	2421883a 	add	r16,r4,r16
40015288:	100d883a 	mov	r6,r2
4001528c:	180f883a 	mov	r7,r3
40015290:	9009883a 	mov	r4,r18
40015294:	800b883a 	mov	r5,r16
40015298:	000d2ac0 	call	4000d2ac <__divdf3>
4001529c:	dfc00617 	ldw	ra,24(sp)
400152a0:	dcc00517 	ldw	r19,20(sp)
400152a4:	dc800417 	ldw	r18,16(sp)
400152a8:	dc400317 	ldw	r17,12(sp)
400152ac:	dc000217 	ldw	r16,8(sp)
400152b0:	dec00704 	addi	sp,sp,28
400152b4:	f800283a 	ret
400152b8:	2008953a 	slli	r4,r4,20
400152bc:	1907c83a 	sub	r3,r3,r4
400152c0:	003ff106 	br	40015288 <__alt_data_end+0xc0015288>

400152c4 <_mprec_log10>:
400152c4:	defffe04 	addi	sp,sp,-8
400152c8:	dc000015 	stw	r16,0(sp)
400152cc:	dfc00115 	stw	ra,4(sp)
400152d0:	008005c4 	movi	r2,23
400152d4:	2021883a 	mov	r16,r4
400152d8:	11000d0e 	bge	r2,r4,40015310 <_mprec_log10+0x4c>
400152dc:	0005883a 	mov	r2,zero
400152e0:	00cffc34 	movhi	r3,16368
400152e4:	843fffc4 	addi	r16,r16,-1
400152e8:	000d883a 	mov	r6,zero
400152ec:	01d00934 	movhi	r7,16420
400152f0:	1009883a 	mov	r4,r2
400152f4:	180b883a 	mov	r5,r3
400152f8:	000db940 	call	4000db94 <__muldf3>
400152fc:	803ff91e 	bne	r16,zero,400152e4 <__alt_data_end+0xc00152e4>
40015300:	dfc00117 	ldw	ra,4(sp)
40015304:	dc000017 	ldw	r16,0(sp)
40015308:	dec00204 	addi	sp,sp,8
4001530c:	f800283a 	ret
40015310:	202090fa 	slli	r16,r4,3
40015314:	009000b4 	movhi	r2,16386
40015318:	10aa6204 	addi	r2,r2,-22136
4001531c:	1421883a 	add	r16,r2,r16
40015320:	80800017 	ldw	r2,0(r16)
40015324:	80c00117 	ldw	r3,4(r16)
40015328:	dfc00117 	ldw	ra,4(sp)
4001532c:	dc000017 	ldw	r16,0(sp)
40015330:	dec00204 	addi	sp,sp,8
40015334:	f800283a 	ret

40015338 <__copybits>:
40015338:	297fffc4 	addi	r5,r5,-1
4001533c:	280fd17a 	srai	r7,r5,5
40015340:	30c00417 	ldw	r3,16(r6)
40015344:	30800504 	addi	r2,r6,20
40015348:	39c00044 	addi	r7,r7,1
4001534c:	18c7883a 	add	r3,r3,r3
40015350:	39cf883a 	add	r7,r7,r7
40015354:	18c7883a 	add	r3,r3,r3
40015358:	39cf883a 	add	r7,r7,r7
4001535c:	10c7883a 	add	r3,r2,r3
40015360:	21cf883a 	add	r7,r4,r7
40015364:	10c00d2e 	bgeu	r2,r3,4001539c <__copybits+0x64>
40015368:	200b883a 	mov	r5,r4
4001536c:	12000017 	ldw	r8,0(r2)
40015370:	29400104 	addi	r5,r5,4
40015374:	10800104 	addi	r2,r2,4
40015378:	2a3fff15 	stw	r8,-4(r5)
4001537c:	10fffb36 	bltu	r2,r3,4001536c <__alt_data_end+0xc001536c>
40015380:	1985c83a 	sub	r2,r3,r6
40015384:	10bffac4 	addi	r2,r2,-21
40015388:	1004d0ba 	srli	r2,r2,2
4001538c:	10800044 	addi	r2,r2,1
40015390:	1085883a 	add	r2,r2,r2
40015394:	1085883a 	add	r2,r2,r2
40015398:	2089883a 	add	r4,r4,r2
4001539c:	21c0032e 	bgeu	r4,r7,400153ac <__copybits+0x74>
400153a0:	20000015 	stw	zero,0(r4)
400153a4:	21000104 	addi	r4,r4,4
400153a8:	21fffd36 	bltu	r4,r7,400153a0 <__alt_data_end+0xc00153a0>
400153ac:	f800283a 	ret

400153b0 <__any_on>:
400153b0:	20c00417 	ldw	r3,16(r4)
400153b4:	2805d17a 	srai	r2,r5,5
400153b8:	21000504 	addi	r4,r4,20
400153bc:	18800d0e 	bge	r3,r2,400153f4 <__any_on+0x44>
400153c0:	18c7883a 	add	r3,r3,r3
400153c4:	18c7883a 	add	r3,r3,r3
400153c8:	20c7883a 	add	r3,r4,r3
400153cc:	20c0192e 	bgeu	r4,r3,40015434 <__any_on+0x84>
400153d0:	18bfff17 	ldw	r2,-4(r3)
400153d4:	18ffff04 	addi	r3,r3,-4
400153d8:	1000041e 	bne	r2,zero,400153ec <__any_on+0x3c>
400153dc:	20c0142e 	bgeu	r4,r3,40015430 <__any_on+0x80>
400153e0:	18ffff04 	addi	r3,r3,-4
400153e4:	19400017 	ldw	r5,0(r3)
400153e8:	283ffc26 	beq	r5,zero,400153dc <__alt_data_end+0xc00153dc>
400153ec:	00800044 	movi	r2,1
400153f0:	f800283a 	ret
400153f4:	10c00a0e 	bge	r2,r3,40015420 <__any_on+0x70>
400153f8:	1085883a 	add	r2,r2,r2
400153fc:	1085883a 	add	r2,r2,r2
40015400:	294007cc 	andi	r5,r5,31
40015404:	2087883a 	add	r3,r4,r2
40015408:	283ff026 	beq	r5,zero,400153cc <__alt_data_end+0xc00153cc>
4001540c:	19800017 	ldw	r6,0(r3)
40015410:	3144d83a 	srl	r2,r6,r5
40015414:	114a983a 	sll	r5,r2,r5
40015418:	317ff41e 	bne	r6,r5,400153ec <__alt_data_end+0xc00153ec>
4001541c:	003feb06 	br	400153cc <__alt_data_end+0xc00153cc>
40015420:	1085883a 	add	r2,r2,r2
40015424:	1085883a 	add	r2,r2,r2
40015428:	2087883a 	add	r3,r4,r2
4001542c:	003fe706 	br	400153cc <__alt_data_end+0xc00153cc>
40015430:	f800283a 	ret
40015434:	0005883a 	mov	r2,zero
40015438:	f800283a 	ret

4001543c <_putc_r>:
4001543c:	defffc04 	addi	sp,sp,-16
40015440:	dc000215 	stw	r16,8(sp)
40015444:	dfc00315 	stw	ra,12(sp)
40015448:	2021883a 	mov	r16,r4
4001544c:	20000226 	beq	r4,zero,40015458 <_putc_r+0x1c>
40015450:	20800e17 	ldw	r2,56(r4)
40015454:	10001b26 	beq	r2,zero,400154c4 <_putc_r+0x88>
40015458:	30800217 	ldw	r2,8(r6)
4001545c:	10bfffc4 	addi	r2,r2,-1
40015460:	30800215 	stw	r2,8(r6)
40015464:	10000a16 	blt	r2,zero,40015490 <_putc_r+0x54>
40015468:	30800017 	ldw	r2,0(r6)
4001546c:	11400005 	stb	r5,0(r2)
40015470:	30800017 	ldw	r2,0(r6)
40015474:	10c00044 	addi	r3,r2,1
40015478:	30c00015 	stw	r3,0(r6)
4001547c:	10800003 	ldbu	r2,0(r2)
40015480:	dfc00317 	ldw	ra,12(sp)
40015484:	dc000217 	ldw	r16,8(sp)
40015488:	dec00404 	addi	sp,sp,16
4001548c:	f800283a 	ret
40015490:	30c00617 	ldw	r3,24(r6)
40015494:	10c00616 	blt	r2,r3,400154b0 <_putc_r+0x74>
40015498:	30800017 	ldw	r2,0(r6)
4001549c:	00c00284 	movi	r3,10
400154a0:	11400005 	stb	r5,0(r2)
400154a4:	30800017 	ldw	r2,0(r6)
400154a8:	11400003 	ldbu	r5,0(r2)
400154ac:	28fff11e 	bne	r5,r3,40015474 <__alt_data_end+0xc0015474>
400154b0:	8009883a 	mov	r4,r16
400154b4:	dfc00317 	ldw	ra,12(sp)
400154b8:	dc000217 	ldw	r16,8(sp)
400154bc:	dec00404 	addi	sp,sp,16
400154c0:	00173dc1 	jmpi	400173dc <__swbuf_r>
400154c4:	d9400015 	stw	r5,0(sp)
400154c8:	d9800115 	stw	r6,4(sp)
400154cc:	00134a00 	call	400134a0 <__sinit>
400154d0:	d9800117 	ldw	r6,4(sp)
400154d4:	d9400017 	ldw	r5,0(sp)
400154d8:	003fdf06 	br	40015458 <__alt_data_end+0xc0015458>

400154dc <putc>:
400154dc:	009000b4 	movhi	r2,16386
400154e0:	defffc04 	addi	sp,sp,-16
400154e4:	10ad4704 	addi	r2,r2,-19172
400154e8:	dc000115 	stw	r16,4(sp)
400154ec:	14000017 	ldw	r16,0(r2)
400154f0:	dc400215 	stw	r17,8(sp)
400154f4:	dfc00315 	stw	ra,12(sp)
400154f8:	2023883a 	mov	r17,r4
400154fc:	80000226 	beq	r16,zero,40015508 <putc+0x2c>
40015500:	80800e17 	ldw	r2,56(r16)
40015504:	10001a26 	beq	r2,zero,40015570 <putc+0x94>
40015508:	28800217 	ldw	r2,8(r5)
4001550c:	10bfffc4 	addi	r2,r2,-1
40015510:	28800215 	stw	r2,8(r5)
40015514:	10000b16 	blt	r2,zero,40015544 <putc+0x68>
40015518:	28800017 	ldw	r2,0(r5)
4001551c:	14400005 	stb	r17,0(r2)
40015520:	28800017 	ldw	r2,0(r5)
40015524:	10c00044 	addi	r3,r2,1
40015528:	28c00015 	stw	r3,0(r5)
4001552c:	10800003 	ldbu	r2,0(r2)
40015530:	dfc00317 	ldw	ra,12(sp)
40015534:	dc400217 	ldw	r17,8(sp)
40015538:	dc000117 	ldw	r16,4(sp)
4001553c:	dec00404 	addi	sp,sp,16
40015540:	f800283a 	ret
40015544:	28c00617 	ldw	r3,24(r5)
40015548:	10c00e16 	blt	r2,r3,40015584 <putc+0xa8>
4001554c:	28800017 	ldw	r2,0(r5)
40015550:	01000284 	movi	r4,10
40015554:	14400005 	stb	r17,0(r2)
40015558:	28800017 	ldw	r2,0(r5)
4001555c:	10c00003 	ldbu	r3,0(r2)
40015560:	193ff01e 	bne	r3,r4,40015524 <__alt_data_end+0xc0015524>
40015564:	280d883a 	mov	r6,r5
40015568:	180b883a 	mov	r5,r3
4001556c:	00000706 	br	4001558c <putc+0xb0>
40015570:	8009883a 	mov	r4,r16
40015574:	d9400015 	stw	r5,0(sp)
40015578:	00134a00 	call	400134a0 <__sinit>
4001557c:	d9400017 	ldw	r5,0(sp)
40015580:	003fe106 	br	40015508 <__alt_data_end+0xc0015508>
40015584:	280d883a 	mov	r6,r5
40015588:	880b883a 	mov	r5,r17
4001558c:	8009883a 	mov	r4,r16
40015590:	dfc00317 	ldw	ra,12(sp)
40015594:	dc400217 	ldw	r17,8(sp)
40015598:	dc000117 	ldw	r16,4(sp)
4001559c:	dec00404 	addi	sp,sp,16
400155a0:	00173dc1 	jmpi	400173dc <__swbuf_r>

400155a4 <_realloc_r>:
400155a4:	defff604 	addi	sp,sp,-40
400155a8:	dc800215 	stw	r18,8(sp)
400155ac:	dfc00915 	stw	ra,36(sp)
400155b0:	df000815 	stw	fp,32(sp)
400155b4:	ddc00715 	stw	r23,28(sp)
400155b8:	dd800615 	stw	r22,24(sp)
400155bc:	dd400515 	stw	r21,20(sp)
400155c0:	dd000415 	stw	r20,16(sp)
400155c4:	dcc00315 	stw	r19,12(sp)
400155c8:	dc400115 	stw	r17,4(sp)
400155cc:	dc000015 	stw	r16,0(sp)
400155d0:	3025883a 	mov	r18,r6
400155d4:	2800b726 	beq	r5,zero,400158b4 <_realloc_r+0x310>
400155d8:	282b883a 	mov	r21,r5
400155dc:	2029883a 	mov	r20,r4
400155e0:	00197140 	call	40019714 <__malloc_lock>
400155e4:	a8bfff17 	ldw	r2,-4(r21)
400155e8:	043fff04 	movi	r16,-4
400155ec:	90c002c4 	addi	r3,r18,11
400155f0:	01000584 	movi	r4,22
400155f4:	acfffe04 	addi	r19,r21,-8
400155f8:	1420703a 	and	r16,r2,r16
400155fc:	20c0332e 	bgeu	r4,r3,400156cc <_realloc_r+0x128>
40015600:	047ffe04 	movi	r17,-8
40015604:	1c62703a 	and	r17,r3,r17
40015608:	8807883a 	mov	r3,r17
4001560c:	88005816 	blt	r17,zero,40015770 <_realloc_r+0x1cc>
40015610:	8c805736 	bltu	r17,r18,40015770 <_realloc_r+0x1cc>
40015614:	80c0300e 	bge	r16,r3,400156d8 <_realloc_r+0x134>
40015618:	071000b4 	movhi	fp,16386
4001561c:	e72bad04 	addi	fp,fp,-20812
40015620:	e1c00217 	ldw	r7,8(fp)
40015624:	9c09883a 	add	r4,r19,r16
40015628:	22000117 	ldw	r8,4(r4)
4001562c:	21c06326 	beq	r4,r7,400157bc <_realloc_r+0x218>
40015630:	017fff84 	movi	r5,-2
40015634:	414a703a 	and	r5,r8,r5
40015638:	214b883a 	add	r5,r4,r5
4001563c:	29800117 	ldw	r6,4(r5)
40015640:	3180004c 	andi	r6,r6,1
40015644:	30003f26 	beq	r6,zero,40015744 <_realloc_r+0x1a0>
40015648:	1080004c 	andi	r2,r2,1
4001564c:	10008326 	beq	r2,zero,4001585c <_realloc_r+0x2b8>
40015650:	900b883a 	mov	r5,r18
40015654:	a009883a 	mov	r4,r20
40015658:	000e4bc0 	call	4000e4bc <_malloc_r>
4001565c:	1025883a 	mov	r18,r2
40015660:	10011e26 	beq	r2,zero,40015adc <_realloc_r+0x538>
40015664:	a93fff17 	ldw	r4,-4(r21)
40015668:	10fffe04 	addi	r3,r2,-8
4001566c:	00bfff84 	movi	r2,-2
40015670:	2084703a 	and	r2,r4,r2
40015674:	9885883a 	add	r2,r19,r2
40015678:	1880ee26 	beq	r3,r2,40015a34 <_realloc_r+0x490>
4001567c:	81bfff04 	addi	r6,r16,-4
40015680:	00800904 	movi	r2,36
40015684:	1180b836 	bltu	r2,r6,40015968 <_realloc_r+0x3c4>
40015688:	00c004c4 	movi	r3,19
4001568c:	19809636 	bltu	r3,r6,400158e8 <_realloc_r+0x344>
40015690:	9005883a 	mov	r2,r18
40015694:	a807883a 	mov	r3,r21
40015698:	19000017 	ldw	r4,0(r3)
4001569c:	11000015 	stw	r4,0(r2)
400156a0:	19000117 	ldw	r4,4(r3)
400156a4:	11000115 	stw	r4,4(r2)
400156a8:	18c00217 	ldw	r3,8(r3)
400156ac:	10c00215 	stw	r3,8(r2)
400156b0:	a80b883a 	mov	r5,r21
400156b4:	a009883a 	mov	r4,r20
400156b8:	00136140 	call	40013614 <_free_r>
400156bc:	a009883a 	mov	r4,r20
400156c0:	00197180 	call	40019718 <__malloc_unlock>
400156c4:	9005883a 	mov	r2,r18
400156c8:	00001206 	br	40015714 <_realloc_r+0x170>
400156cc:	00c00404 	movi	r3,16
400156d0:	1823883a 	mov	r17,r3
400156d4:	003fce06 	br	40015610 <__alt_data_end+0xc0015610>
400156d8:	a825883a 	mov	r18,r21
400156dc:	8445c83a 	sub	r2,r16,r17
400156e0:	00c003c4 	movi	r3,15
400156e4:	18802636 	bltu	r3,r2,40015780 <_realloc_r+0x1dc>
400156e8:	99800117 	ldw	r6,4(r19)
400156ec:	9c07883a 	add	r3,r19,r16
400156f0:	3180004c 	andi	r6,r6,1
400156f4:	3420b03a 	or	r16,r6,r16
400156f8:	9c000115 	stw	r16,4(r19)
400156fc:	18800117 	ldw	r2,4(r3)
40015700:	10800054 	ori	r2,r2,1
40015704:	18800115 	stw	r2,4(r3)
40015708:	a009883a 	mov	r4,r20
4001570c:	00197180 	call	40019718 <__malloc_unlock>
40015710:	9005883a 	mov	r2,r18
40015714:	dfc00917 	ldw	ra,36(sp)
40015718:	df000817 	ldw	fp,32(sp)
4001571c:	ddc00717 	ldw	r23,28(sp)
40015720:	dd800617 	ldw	r22,24(sp)
40015724:	dd400517 	ldw	r21,20(sp)
40015728:	dd000417 	ldw	r20,16(sp)
4001572c:	dcc00317 	ldw	r19,12(sp)
40015730:	dc800217 	ldw	r18,8(sp)
40015734:	dc400117 	ldw	r17,4(sp)
40015738:	dc000017 	ldw	r16,0(sp)
4001573c:	dec00a04 	addi	sp,sp,40
40015740:	f800283a 	ret
40015744:	017fff04 	movi	r5,-4
40015748:	414a703a 	and	r5,r8,r5
4001574c:	814d883a 	add	r6,r16,r5
40015750:	30c01f16 	blt	r6,r3,400157d0 <_realloc_r+0x22c>
40015754:	20800317 	ldw	r2,12(r4)
40015758:	20c00217 	ldw	r3,8(r4)
4001575c:	a825883a 	mov	r18,r21
40015760:	3021883a 	mov	r16,r6
40015764:	18800315 	stw	r2,12(r3)
40015768:	10c00215 	stw	r3,8(r2)
4001576c:	003fdb06 	br	400156dc <__alt_data_end+0xc00156dc>
40015770:	00800304 	movi	r2,12
40015774:	a0800015 	stw	r2,0(r20)
40015778:	0005883a 	mov	r2,zero
4001577c:	003fe506 	br	40015714 <__alt_data_end+0xc0015714>
40015780:	98c00117 	ldw	r3,4(r19)
40015784:	9c4b883a 	add	r5,r19,r17
40015788:	11000054 	ori	r4,r2,1
4001578c:	18c0004c 	andi	r3,r3,1
40015790:	1c62b03a 	or	r17,r3,r17
40015794:	9c400115 	stw	r17,4(r19)
40015798:	29000115 	stw	r4,4(r5)
4001579c:	2885883a 	add	r2,r5,r2
400157a0:	10c00117 	ldw	r3,4(r2)
400157a4:	29400204 	addi	r5,r5,8
400157a8:	a009883a 	mov	r4,r20
400157ac:	18c00054 	ori	r3,r3,1
400157b0:	10c00115 	stw	r3,4(r2)
400157b4:	00136140 	call	40013614 <_free_r>
400157b8:	003fd306 	br	40015708 <__alt_data_end+0xc0015708>
400157bc:	017fff04 	movi	r5,-4
400157c0:	414a703a 	and	r5,r8,r5
400157c4:	89800404 	addi	r6,r17,16
400157c8:	8151883a 	add	r8,r16,r5
400157cc:	4180590e 	bge	r8,r6,40015934 <_realloc_r+0x390>
400157d0:	1080004c 	andi	r2,r2,1
400157d4:	103f9e1e 	bne	r2,zero,40015650 <__alt_data_end+0xc0015650>
400157d8:	adbffe17 	ldw	r22,-8(r21)
400157dc:	00bfff04 	movi	r2,-4
400157e0:	9dadc83a 	sub	r22,r19,r22
400157e4:	b1800117 	ldw	r6,4(r22)
400157e8:	3084703a 	and	r2,r6,r2
400157ec:	20002026 	beq	r4,zero,40015870 <_realloc_r+0x2cc>
400157f0:	80af883a 	add	r23,r16,r2
400157f4:	b96f883a 	add	r23,r23,r5
400157f8:	21c05f26 	beq	r4,r7,40015978 <_realloc_r+0x3d4>
400157fc:	b8c01c16 	blt	r23,r3,40015870 <_realloc_r+0x2cc>
40015800:	20800317 	ldw	r2,12(r4)
40015804:	20c00217 	ldw	r3,8(r4)
40015808:	81bfff04 	addi	r6,r16,-4
4001580c:	01000904 	movi	r4,36
40015810:	18800315 	stw	r2,12(r3)
40015814:	10c00215 	stw	r3,8(r2)
40015818:	b0c00217 	ldw	r3,8(r22)
4001581c:	b0800317 	ldw	r2,12(r22)
40015820:	b4800204 	addi	r18,r22,8
40015824:	18800315 	stw	r2,12(r3)
40015828:	10c00215 	stw	r3,8(r2)
4001582c:	21801b36 	bltu	r4,r6,4001589c <_realloc_r+0x2f8>
40015830:	008004c4 	movi	r2,19
40015834:	1180352e 	bgeu	r2,r6,4001590c <_realloc_r+0x368>
40015838:	a8800017 	ldw	r2,0(r21)
4001583c:	b0800215 	stw	r2,8(r22)
40015840:	a8800117 	ldw	r2,4(r21)
40015844:	b0800315 	stw	r2,12(r22)
40015848:	008006c4 	movi	r2,27
4001584c:	11807f36 	bltu	r2,r6,40015a4c <_realloc_r+0x4a8>
40015850:	b0800404 	addi	r2,r22,16
40015854:	ad400204 	addi	r21,r21,8
40015858:	00002d06 	br	40015910 <_realloc_r+0x36c>
4001585c:	adbffe17 	ldw	r22,-8(r21)
40015860:	00bfff04 	movi	r2,-4
40015864:	9dadc83a 	sub	r22,r19,r22
40015868:	b1000117 	ldw	r4,4(r22)
4001586c:	2084703a 	and	r2,r4,r2
40015870:	b03f7726 	beq	r22,zero,40015650 <__alt_data_end+0xc0015650>
40015874:	80af883a 	add	r23,r16,r2
40015878:	b8ff7516 	blt	r23,r3,40015650 <__alt_data_end+0xc0015650>
4001587c:	b0800317 	ldw	r2,12(r22)
40015880:	b0c00217 	ldw	r3,8(r22)
40015884:	81bfff04 	addi	r6,r16,-4
40015888:	01000904 	movi	r4,36
4001588c:	18800315 	stw	r2,12(r3)
40015890:	10c00215 	stw	r3,8(r2)
40015894:	b4800204 	addi	r18,r22,8
40015898:	21bfe52e 	bgeu	r4,r6,40015830 <__alt_data_end+0xc0015830>
4001589c:	a80b883a 	mov	r5,r21
400158a0:	9009883a 	mov	r4,r18
400158a4:	00142e40 	call	400142e4 <memmove>
400158a8:	b821883a 	mov	r16,r23
400158ac:	b027883a 	mov	r19,r22
400158b0:	003f8a06 	br	400156dc <__alt_data_end+0xc00156dc>
400158b4:	300b883a 	mov	r5,r6
400158b8:	dfc00917 	ldw	ra,36(sp)
400158bc:	df000817 	ldw	fp,32(sp)
400158c0:	ddc00717 	ldw	r23,28(sp)
400158c4:	dd800617 	ldw	r22,24(sp)
400158c8:	dd400517 	ldw	r21,20(sp)
400158cc:	dd000417 	ldw	r20,16(sp)
400158d0:	dcc00317 	ldw	r19,12(sp)
400158d4:	dc800217 	ldw	r18,8(sp)
400158d8:	dc400117 	ldw	r17,4(sp)
400158dc:	dc000017 	ldw	r16,0(sp)
400158e0:	dec00a04 	addi	sp,sp,40
400158e4:	000e4bc1 	jmpi	4000e4bc <_malloc_r>
400158e8:	a8c00017 	ldw	r3,0(r21)
400158ec:	90c00015 	stw	r3,0(r18)
400158f0:	a8c00117 	ldw	r3,4(r21)
400158f4:	90c00115 	stw	r3,4(r18)
400158f8:	00c006c4 	movi	r3,27
400158fc:	19804536 	bltu	r3,r6,40015a14 <_realloc_r+0x470>
40015900:	90800204 	addi	r2,r18,8
40015904:	a8c00204 	addi	r3,r21,8
40015908:	003f6306 	br	40015698 <__alt_data_end+0xc0015698>
4001590c:	9005883a 	mov	r2,r18
40015910:	a8c00017 	ldw	r3,0(r21)
40015914:	b821883a 	mov	r16,r23
40015918:	b027883a 	mov	r19,r22
4001591c:	10c00015 	stw	r3,0(r2)
40015920:	a8c00117 	ldw	r3,4(r21)
40015924:	10c00115 	stw	r3,4(r2)
40015928:	a8c00217 	ldw	r3,8(r21)
4001592c:	10c00215 	stw	r3,8(r2)
40015930:	003f6a06 	br	400156dc <__alt_data_end+0xc00156dc>
40015934:	9c67883a 	add	r19,r19,r17
40015938:	4445c83a 	sub	r2,r8,r17
4001593c:	e4c00215 	stw	r19,8(fp)
40015940:	10800054 	ori	r2,r2,1
40015944:	98800115 	stw	r2,4(r19)
40015948:	a8bfff17 	ldw	r2,-4(r21)
4001594c:	a009883a 	mov	r4,r20
40015950:	1080004c 	andi	r2,r2,1
40015954:	1462b03a 	or	r17,r2,r17
40015958:	ac7fff15 	stw	r17,-4(r21)
4001595c:	00197180 	call	40019718 <__malloc_unlock>
40015960:	a805883a 	mov	r2,r21
40015964:	003f6b06 	br	40015714 <__alt_data_end+0xc0015714>
40015968:	a80b883a 	mov	r5,r21
4001596c:	9009883a 	mov	r4,r18
40015970:	00142e40 	call	400142e4 <memmove>
40015974:	003f4e06 	br	400156b0 <__alt_data_end+0xc00156b0>
40015978:	89000404 	addi	r4,r17,16
4001597c:	b93fbc16 	blt	r23,r4,40015870 <__alt_data_end+0xc0015870>
40015980:	b0800317 	ldw	r2,12(r22)
40015984:	b0c00217 	ldw	r3,8(r22)
40015988:	81bfff04 	addi	r6,r16,-4
4001598c:	01000904 	movi	r4,36
40015990:	18800315 	stw	r2,12(r3)
40015994:	10c00215 	stw	r3,8(r2)
40015998:	b4800204 	addi	r18,r22,8
4001599c:	21804336 	bltu	r4,r6,40015aac <_realloc_r+0x508>
400159a0:	008004c4 	movi	r2,19
400159a4:	11803f2e 	bgeu	r2,r6,40015aa4 <_realloc_r+0x500>
400159a8:	a8800017 	ldw	r2,0(r21)
400159ac:	b0800215 	stw	r2,8(r22)
400159b0:	a8800117 	ldw	r2,4(r21)
400159b4:	b0800315 	stw	r2,12(r22)
400159b8:	008006c4 	movi	r2,27
400159bc:	11803f36 	bltu	r2,r6,40015abc <_realloc_r+0x518>
400159c0:	b0800404 	addi	r2,r22,16
400159c4:	ad400204 	addi	r21,r21,8
400159c8:	a8c00017 	ldw	r3,0(r21)
400159cc:	10c00015 	stw	r3,0(r2)
400159d0:	a8c00117 	ldw	r3,4(r21)
400159d4:	10c00115 	stw	r3,4(r2)
400159d8:	a8c00217 	ldw	r3,8(r21)
400159dc:	10c00215 	stw	r3,8(r2)
400159e0:	b447883a 	add	r3,r22,r17
400159e4:	bc45c83a 	sub	r2,r23,r17
400159e8:	e0c00215 	stw	r3,8(fp)
400159ec:	10800054 	ori	r2,r2,1
400159f0:	18800115 	stw	r2,4(r3)
400159f4:	b0800117 	ldw	r2,4(r22)
400159f8:	a009883a 	mov	r4,r20
400159fc:	1080004c 	andi	r2,r2,1
40015a00:	1462b03a 	or	r17,r2,r17
40015a04:	b4400115 	stw	r17,4(r22)
40015a08:	00197180 	call	40019718 <__malloc_unlock>
40015a0c:	9005883a 	mov	r2,r18
40015a10:	003f4006 	br	40015714 <__alt_data_end+0xc0015714>
40015a14:	a8c00217 	ldw	r3,8(r21)
40015a18:	90c00215 	stw	r3,8(r18)
40015a1c:	a8c00317 	ldw	r3,12(r21)
40015a20:	90c00315 	stw	r3,12(r18)
40015a24:	30801126 	beq	r6,r2,40015a6c <_realloc_r+0x4c8>
40015a28:	90800404 	addi	r2,r18,16
40015a2c:	a8c00404 	addi	r3,r21,16
40015a30:	003f1906 	br	40015698 <__alt_data_end+0xc0015698>
40015a34:	90ffff17 	ldw	r3,-4(r18)
40015a38:	00bfff04 	movi	r2,-4
40015a3c:	a825883a 	mov	r18,r21
40015a40:	1884703a 	and	r2,r3,r2
40015a44:	80a1883a 	add	r16,r16,r2
40015a48:	003f2406 	br	400156dc <__alt_data_end+0xc00156dc>
40015a4c:	a8800217 	ldw	r2,8(r21)
40015a50:	b0800415 	stw	r2,16(r22)
40015a54:	a8800317 	ldw	r2,12(r21)
40015a58:	b0800515 	stw	r2,20(r22)
40015a5c:	31000a26 	beq	r6,r4,40015a88 <_realloc_r+0x4e4>
40015a60:	b0800604 	addi	r2,r22,24
40015a64:	ad400404 	addi	r21,r21,16
40015a68:	003fa906 	br	40015910 <__alt_data_end+0xc0015910>
40015a6c:	a9000417 	ldw	r4,16(r21)
40015a70:	90800604 	addi	r2,r18,24
40015a74:	a8c00604 	addi	r3,r21,24
40015a78:	91000415 	stw	r4,16(r18)
40015a7c:	a9000517 	ldw	r4,20(r21)
40015a80:	91000515 	stw	r4,20(r18)
40015a84:	003f0406 	br	40015698 <__alt_data_end+0xc0015698>
40015a88:	a8c00417 	ldw	r3,16(r21)
40015a8c:	ad400604 	addi	r21,r21,24
40015a90:	b0800804 	addi	r2,r22,32
40015a94:	b0c00615 	stw	r3,24(r22)
40015a98:	a8ffff17 	ldw	r3,-4(r21)
40015a9c:	b0c00715 	stw	r3,28(r22)
40015aa0:	003f9b06 	br	40015910 <__alt_data_end+0xc0015910>
40015aa4:	9005883a 	mov	r2,r18
40015aa8:	003fc706 	br	400159c8 <__alt_data_end+0xc00159c8>
40015aac:	a80b883a 	mov	r5,r21
40015ab0:	9009883a 	mov	r4,r18
40015ab4:	00142e40 	call	400142e4 <memmove>
40015ab8:	003fc906 	br	400159e0 <__alt_data_end+0xc00159e0>
40015abc:	a8800217 	ldw	r2,8(r21)
40015ac0:	b0800415 	stw	r2,16(r22)
40015ac4:	a8800317 	ldw	r2,12(r21)
40015ac8:	b0800515 	stw	r2,20(r22)
40015acc:	31000726 	beq	r6,r4,40015aec <_realloc_r+0x548>
40015ad0:	b0800604 	addi	r2,r22,24
40015ad4:	ad400404 	addi	r21,r21,16
40015ad8:	003fbb06 	br	400159c8 <__alt_data_end+0xc00159c8>
40015adc:	a009883a 	mov	r4,r20
40015ae0:	00197180 	call	40019718 <__malloc_unlock>
40015ae4:	0005883a 	mov	r2,zero
40015ae8:	003f0a06 	br	40015714 <__alt_data_end+0xc0015714>
40015aec:	a8c00417 	ldw	r3,16(r21)
40015af0:	ad400604 	addi	r21,r21,24
40015af4:	b0800804 	addi	r2,r22,32
40015af8:	b0c00615 	stw	r3,24(r22)
40015afc:	a8ffff17 	ldw	r3,-4(r21)
40015b00:	b0c00715 	stw	r3,28(r22)
40015b04:	003fb006 	br	400159c8 <__alt_data_end+0xc00159c8>

40015b08 <__fpclassifyd>:
40015b08:	00a00034 	movhi	r2,32768
40015b0c:	10bfffc4 	addi	r2,r2,-1
40015b10:	2884703a 	and	r2,r5,r2
40015b14:	10000726 	beq	r2,zero,40015b34 <__fpclassifyd+0x2c>
40015b18:	00fffc34 	movhi	r3,65520
40015b1c:	019ff834 	movhi	r6,32736
40015b20:	28c7883a 	add	r3,r5,r3
40015b24:	31bfffc4 	addi	r6,r6,-1
40015b28:	30c00536 	bltu	r6,r3,40015b40 <__fpclassifyd+0x38>
40015b2c:	00800104 	movi	r2,4
40015b30:	f800283a 	ret
40015b34:	2000021e 	bne	r4,zero,40015b40 <__fpclassifyd+0x38>
40015b38:	00800084 	movi	r2,2
40015b3c:	f800283a 	ret
40015b40:	00dffc34 	movhi	r3,32752
40015b44:	019ff834 	movhi	r6,32736
40015b48:	28cb883a 	add	r5,r5,r3
40015b4c:	31bfffc4 	addi	r6,r6,-1
40015b50:	317ff62e 	bgeu	r6,r5,40015b2c <__alt_data_end+0xc0015b2c>
40015b54:	01400434 	movhi	r5,16
40015b58:	297fffc4 	addi	r5,r5,-1
40015b5c:	28800236 	bltu	r5,r2,40015b68 <__fpclassifyd+0x60>
40015b60:	008000c4 	movi	r2,3
40015b64:	f800283a 	ret
40015b68:	10c00226 	beq	r2,r3,40015b74 <__fpclassifyd+0x6c>
40015b6c:	0005883a 	mov	r2,zero
40015b70:	f800283a 	ret
40015b74:	2005003a 	cmpeq	r2,r4,zero
40015b78:	f800283a 	ret

40015b7c <__sread>:
40015b7c:	defffe04 	addi	sp,sp,-8
40015b80:	dc000015 	stw	r16,0(sp)
40015b84:	2821883a 	mov	r16,r5
40015b88:	2940038f 	ldh	r5,14(r5)
40015b8c:	dfc00115 	stw	ra,4(sp)
40015b90:	0017a040 	call	40017a04 <_read_r>
40015b94:	10000716 	blt	r2,zero,40015bb4 <__sread+0x38>
40015b98:	80c01417 	ldw	r3,80(r16)
40015b9c:	1887883a 	add	r3,r3,r2
40015ba0:	80c01415 	stw	r3,80(r16)
40015ba4:	dfc00117 	ldw	ra,4(sp)
40015ba8:	dc000017 	ldw	r16,0(sp)
40015bac:	dec00204 	addi	sp,sp,8
40015bb0:	f800283a 	ret
40015bb4:	80c0030b 	ldhu	r3,12(r16)
40015bb8:	18fbffcc 	andi	r3,r3,61439
40015bbc:	80c0030d 	sth	r3,12(r16)
40015bc0:	dfc00117 	ldw	ra,4(sp)
40015bc4:	dc000017 	ldw	r16,0(sp)
40015bc8:	dec00204 	addi	sp,sp,8
40015bcc:	f800283a 	ret

40015bd0 <__seofread>:
40015bd0:	0005883a 	mov	r2,zero
40015bd4:	f800283a 	ret

40015bd8 <__swrite>:
40015bd8:	2880030b 	ldhu	r2,12(r5)
40015bdc:	defffb04 	addi	sp,sp,-20
40015be0:	dcc00315 	stw	r19,12(sp)
40015be4:	dc800215 	stw	r18,8(sp)
40015be8:	dc400115 	stw	r17,4(sp)
40015bec:	dc000015 	stw	r16,0(sp)
40015bf0:	dfc00415 	stw	ra,16(sp)
40015bf4:	10c0400c 	andi	r3,r2,256
40015bf8:	2821883a 	mov	r16,r5
40015bfc:	2023883a 	mov	r17,r4
40015c00:	3025883a 	mov	r18,r6
40015c04:	3827883a 	mov	r19,r7
40015c08:	18000526 	beq	r3,zero,40015c20 <__swrite+0x48>
40015c0c:	2940038f 	ldh	r5,14(r5)
40015c10:	01c00084 	movi	r7,2
40015c14:	000d883a 	mov	r6,zero
40015c18:	00179a40 	call	400179a4 <_lseek_r>
40015c1c:	8080030b 	ldhu	r2,12(r16)
40015c20:	8140038f 	ldh	r5,14(r16)
40015c24:	10bbffcc 	andi	r2,r2,61439
40015c28:	980f883a 	mov	r7,r19
40015c2c:	900d883a 	mov	r6,r18
40015c30:	8809883a 	mov	r4,r17
40015c34:	8080030d 	sth	r2,12(r16)
40015c38:	dfc00417 	ldw	ra,16(sp)
40015c3c:	dcc00317 	ldw	r19,12(sp)
40015c40:	dc800217 	ldw	r18,8(sp)
40015c44:	dc400117 	ldw	r17,4(sp)
40015c48:	dc000017 	ldw	r16,0(sp)
40015c4c:	dec00504 	addi	sp,sp,20
40015c50:	00175341 	jmpi	40017534 <_write_r>

40015c54 <__sseek>:
40015c54:	defffe04 	addi	sp,sp,-8
40015c58:	dc000015 	stw	r16,0(sp)
40015c5c:	2821883a 	mov	r16,r5
40015c60:	2940038f 	ldh	r5,14(r5)
40015c64:	dfc00115 	stw	ra,4(sp)
40015c68:	00179a40 	call	400179a4 <_lseek_r>
40015c6c:	00ffffc4 	movi	r3,-1
40015c70:	10c00826 	beq	r2,r3,40015c94 <__sseek+0x40>
40015c74:	80c0030b 	ldhu	r3,12(r16)
40015c78:	80801415 	stw	r2,80(r16)
40015c7c:	18c40014 	ori	r3,r3,4096
40015c80:	80c0030d 	sth	r3,12(r16)
40015c84:	dfc00117 	ldw	ra,4(sp)
40015c88:	dc000017 	ldw	r16,0(sp)
40015c8c:	dec00204 	addi	sp,sp,8
40015c90:	f800283a 	ret
40015c94:	80c0030b 	ldhu	r3,12(r16)
40015c98:	18fbffcc 	andi	r3,r3,61439
40015c9c:	80c0030d 	sth	r3,12(r16)
40015ca0:	dfc00117 	ldw	ra,4(sp)
40015ca4:	dc000017 	ldw	r16,0(sp)
40015ca8:	dec00204 	addi	sp,sp,8
40015cac:	f800283a 	ret

40015cb0 <__sclose>:
40015cb0:	2940038f 	ldh	r5,14(r5)
40015cb4:	00175941 	jmpi	40017594 <_close_r>

40015cb8 <strcmp>:
40015cb8:	2144b03a 	or	r2,r4,r5
40015cbc:	108000cc 	andi	r2,r2,3
40015cc0:	1000171e 	bne	r2,zero,40015d20 <strcmp+0x68>
40015cc4:	20800017 	ldw	r2,0(r4)
40015cc8:	28c00017 	ldw	r3,0(r5)
40015ccc:	10c0141e 	bne	r2,r3,40015d20 <strcmp+0x68>
40015cd0:	027fbff4 	movhi	r9,65279
40015cd4:	4a7fbfc4 	addi	r9,r9,-257
40015cd8:	0086303a 	nor	r3,zero,r2
40015cdc:	02202074 	movhi	r8,32897
40015ce0:	1245883a 	add	r2,r2,r9
40015ce4:	42202004 	addi	r8,r8,-32640
40015ce8:	10c4703a 	and	r2,r2,r3
40015cec:	1204703a 	and	r2,r2,r8
40015cf0:	10000226 	beq	r2,zero,40015cfc <strcmp+0x44>
40015cf4:	00002306 	br	40015d84 <strcmp+0xcc>
40015cf8:	1000221e 	bne	r2,zero,40015d84 <strcmp+0xcc>
40015cfc:	21000104 	addi	r4,r4,4
40015d00:	20c00017 	ldw	r3,0(r4)
40015d04:	29400104 	addi	r5,r5,4
40015d08:	29800017 	ldw	r6,0(r5)
40015d0c:	1a4f883a 	add	r7,r3,r9
40015d10:	00c4303a 	nor	r2,zero,r3
40015d14:	3884703a 	and	r2,r7,r2
40015d18:	1204703a 	and	r2,r2,r8
40015d1c:	19bff626 	beq	r3,r6,40015cf8 <__alt_data_end+0xc0015cf8>
40015d20:	20800003 	ldbu	r2,0(r4)
40015d24:	10c03fcc 	andi	r3,r2,255
40015d28:	18c0201c 	xori	r3,r3,128
40015d2c:	18ffe004 	addi	r3,r3,-128
40015d30:	18000c26 	beq	r3,zero,40015d64 <strcmp+0xac>
40015d34:	29800007 	ldb	r6,0(r5)
40015d38:	19800326 	beq	r3,r6,40015d48 <strcmp+0x90>
40015d3c:	00001306 	br	40015d8c <strcmp+0xd4>
40015d40:	29800007 	ldb	r6,0(r5)
40015d44:	11800b1e 	bne	r2,r6,40015d74 <strcmp+0xbc>
40015d48:	21000044 	addi	r4,r4,1
40015d4c:	20c00003 	ldbu	r3,0(r4)
40015d50:	29400044 	addi	r5,r5,1
40015d54:	18803fcc 	andi	r2,r3,255
40015d58:	1080201c 	xori	r2,r2,128
40015d5c:	10bfe004 	addi	r2,r2,-128
40015d60:	103ff71e 	bne	r2,zero,40015d40 <__alt_data_end+0xc0015d40>
40015d64:	0007883a 	mov	r3,zero
40015d68:	28800003 	ldbu	r2,0(r5)
40015d6c:	1885c83a 	sub	r2,r3,r2
40015d70:	f800283a 	ret
40015d74:	28800003 	ldbu	r2,0(r5)
40015d78:	18c03fcc 	andi	r3,r3,255
40015d7c:	1885c83a 	sub	r2,r3,r2
40015d80:	f800283a 	ret
40015d84:	0005883a 	mov	r2,zero
40015d88:	f800283a 	ret
40015d8c:	10c03fcc 	andi	r3,r2,255
40015d90:	003ff506 	br	40015d68 <__alt_data_end+0xc0015d68>

40015d94 <__sprint_r.part.0>:
40015d94:	28801917 	ldw	r2,100(r5)
40015d98:	defff604 	addi	sp,sp,-40
40015d9c:	dd400515 	stw	r21,20(sp)
40015da0:	dfc00915 	stw	ra,36(sp)
40015da4:	df000815 	stw	fp,32(sp)
40015da8:	ddc00715 	stw	r23,28(sp)
40015dac:	dd800615 	stw	r22,24(sp)
40015db0:	dd000415 	stw	r20,16(sp)
40015db4:	dcc00315 	stw	r19,12(sp)
40015db8:	dc800215 	stw	r18,8(sp)
40015dbc:	dc400115 	stw	r17,4(sp)
40015dc0:	dc000015 	stw	r16,0(sp)
40015dc4:	1088000c 	andi	r2,r2,8192
40015dc8:	302b883a 	mov	r21,r6
40015dcc:	10002e26 	beq	r2,zero,40015e88 <__sprint_r.part.0+0xf4>
40015dd0:	30800217 	ldw	r2,8(r6)
40015dd4:	35800017 	ldw	r22,0(r6)
40015dd8:	10002926 	beq	r2,zero,40015e80 <__sprint_r.part.0+0xec>
40015ddc:	2827883a 	mov	r19,r5
40015de0:	2029883a 	mov	r20,r4
40015de4:	b5c00104 	addi	r23,r22,4
40015de8:	04bfffc4 	movi	r18,-1
40015dec:	bc400017 	ldw	r17,0(r23)
40015df0:	b4000017 	ldw	r16,0(r22)
40015df4:	0039883a 	mov	fp,zero
40015df8:	8822d0ba 	srli	r17,r17,2
40015dfc:	8800031e 	bne	r17,zero,40015e0c <__sprint_r.part.0+0x78>
40015e00:	00001806 	br	40015e64 <__sprint_r.part.0+0xd0>
40015e04:	84000104 	addi	r16,r16,4
40015e08:	8f001526 	beq	r17,fp,40015e60 <__sprint_r.part.0+0xcc>
40015e0c:	81400017 	ldw	r5,0(r16)
40015e10:	980d883a 	mov	r6,r19
40015e14:	a009883a 	mov	r4,r20
40015e18:	00178500 	call	40017850 <_fputwc_r>
40015e1c:	e7000044 	addi	fp,fp,1
40015e20:	14bff81e 	bne	r2,r18,40015e04 <__alt_data_end+0xc0015e04>
40015e24:	9005883a 	mov	r2,r18
40015e28:	a8000215 	stw	zero,8(r21)
40015e2c:	a8000115 	stw	zero,4(r21)
40015e30:	dfc00917 	ldw	ra,36(sp)
40015e34:	df000817 	ldw	fp,32(sp)
40015e38:	ddc00717 	ldw	r23,28(sp)
40015e3c:	dd800617 	ldw	r22,24(sp)
40015e40:	dd400517 	ldw	r21,20(sp)
40015e44:	dd000417 	ldw	r20,16(sp)
40015e48:	dcc00317 	ldw	r19,12(sp)
40015e4c:	dc800217 	ldw	r18,8(sp)
40015e50:	dc400117 	ldw	r17,4(sp)
40015e54:	dc000017 	ldw	r16,0(sp)
40015e58:	dec00a04 	addi	sp,sp,40
40015e5c:	f800283a 	ret
40015e60:	a8800217 	ldw	r2,8(r21)
40015e64:	8c63883a 	add	r17,r17,r17
40015e68:	8c63883a 	add	r17,r17,r17
40015e6c:	1445c83a 	sub	r2,r2,r17
40015e70:	a8800215 	stw	r2,8(r21)
40015e74:	b5800204 	addi	r22,r22,8
40015e78:	bdc00204 	addi	r23,r23,8
40015e7c:	103fdb1e 	bne	r2,zero,40015dec <__alt_data_end+0xc0015dec>
40015e80:	0005883a 	mov	r2,zero
40015e84:	003fe806 	br	40015e28 <__alt_data_end+0xc0015e28>
40015e88:	00139240 	call	40013924 <__sfvwrite_r>
40015e8c:	003fe606 	br	40015e28 <__alt_data_end+0xc0015e28>

40015e90 <__sprint_r>:
40015e90:	30c00217 	ldw	r3,8(r6)
40015e94:	18000126 	beq	r3,zero,40015e9c <__sprint_r+0xc>
40015e98:	0015d941 	jmpi	40015d94 <__sprint_r.part.0>
40015e9c:	30000115 	stw	zero,4(r6)
40015ea0:	0005883a 	mov	r2,zero
40015ea4:	f800283a 	ret

40015ea8 <___vfiprintf_internal_r>:
40015ea8:	deffc904 	addi	sp,sp,-220
40015eac:	df003515 	stw	fp,212(sp)
40015eb0:	dd003115 	stw	r20,196(sp)
40015eb4:	dfc03615 	stw	ra,216(sp)
40015eb8:	ddc03415 	stw	r23,208(sp)
40015ebc:	dd803315 	stw	r22,204(sp)
40015ec0:	dd403215 	stw	r21,200(sp)
40015ec4:	dcc03015 	stw	r19,192(sp)
40015ec8:	dc802f15 	stw	r18,188(sp)
40015ecc:	dc402e15 	stw	r17,184(sp)
40015ed0:	dc002d15 	stw	r16,180(sp)
40015ed4:	d9002015 	stw	r4,128(sp)
40015ed8:	d9c02215 	stw	r7,136(sp)
40015edc:	2829883a 	mov	r20,r5
40015ee0:	3039883a 	mov	fp,r6
40015ee4:	20000226 	beq	r4,zero,40015ef0 <___vfiprintf_internal_r+0x48>
40015ee8:	20800e17 	ldw	r2,56(r4)
40015eec:	1000cf26 	beq	r2,zero,4001622c <___vfiprintf_internal_r+0x384>
40015ef0:	a080030b 	ldhu	r2,12(r20)
40015ef4:	10c8000c 	andi	r3,r2,8192
40015ef8:	1800061e 	bne	r3,zero,40015f14 <___vfiprintf_internal_r+0x6c>
40015efc:	a1001917 	ldw	r4,100(r20)
40015f00:	00f7ffc4 	movi	r3,-8193
40015f04:	10880014 	ori	r2,r2,8192
40015f08:	20c6703a 	and	r3,r4,r3
40015f0c:	a080030d 	sth	r2,12(r20)
40015f10:	a0c01915 	stw	r3,100(r20)
40015f14:	10c0020c 	andi	r3,r2,8
40015f18:	1800a926 	beq	r3,zero,400161c0 <___vfiprintf_internal_r+0x318>
40015f1c:	a0c00417 	ldw	r3,16(r20)
40015f20:	1800a726 	beq	r3,zero,400161c0 <___vfiprintf_internal_r+0x318>
40015f24:	1080068c 	andi	r2,r2,26
40015f28:	00c00284 	movi	r3,10
40015f2c:	10c0ac26 	beq	r2,r3,400161e0 <___vfiprintf_internal_r+0x338>
40015f30:	da801a04 	addi	r10,sp,104
40015f34:	da801e15 	stw	r10,120(sp)
40015f38:	d8801e17 	ldw	r2,120(sp)
40015f3c:	da8019c4 	addi	r10,sp,103
40015f40:	059000b4 	movhi	r22,16386
40015f44:	05d000b4 	movhi	r23,16386
40015f48:	da801f15 	stw	r10,124(sp)
40015f4c:	1295c83a 	sub	r10,r2,r10
40015f50:	b5aa9804 	addi	r22,r22,-21920
40015f54:	bdea9404 	addi	r23,r23,-21936
40015f58:	dec01a15 	stw	sp,104(sp)
40015f5c:	d8001c15 	stw	zero,112(sp)
40015f60:	d8001b15 	stw	zero,108(sp)
40015f64:	d8002615 	stw	zero,152(sp)
40015f68:	d8002315 	stw	zero,140(sp)
40015f6c:	da802715 	stw	r10,156(sp)
40015f70:	d811883a 	mov	r8,sp
40015f74:	dd002115 	stw	r20,132(sp)
40015f78:	e021883a 	mov	r16,fp
40015f7c:	80800007 	ldb	r2,0(r16)
40015f80:	1003ea26 	beq	r2,zero,40016f2c <___vfiprintf_internal_r+0x1084>
40015f84:	00c00944 	movi	r3,37
40015f88:	8025883a 	mov	r18,r16
40015f8c:	10c0021e 	bne	r2,r3,40015f98 <___vfiprintf_internal_r+0xf0>
40015f90:	00001606 	br	40015fec <___vfiprintf_internal_r+0x144>
40015f94:	10c00326 	beq	r2,r3,40015fa4 <___vfiprintf_internal_r+0xfc>
40015f98:	94800044 	addi	r18,r18,1
40015f9c:	90800007 	ldb	r2,0(r18)
40015fa0:	103ffc1e 	bne	r2,zero,40015f94 <__alt_data_end+0xc0015f94>
40015fa4:	9423c83a 	sub	r17,r18,r16
40015fa8:	88001026 	beq	r17,zero,40015fec <___vfiprintf_internal_r+0x144>
40015fac:	d8c01c17 	ldw	r3,112(sp)
40015fb0:	d8801b17 	ldw	r2,108(sp)
40015fb4:	44000015 	stw	r16,0(r8)
40015fb8:	88c7883a 	add	r3,r17,r3
40015fbc:	10800044 	addi	r2,r2,1
40015fc0:	44400115 	stw	r17,4(r8)
40015fc4:	d8c01c15 	stw	r3,112(sp)
40015fc8:	d8801b15 	stw	r2,108(sp)
40015fcc:	010001c4 	movi	r4,7
40015fd0:	2080760e 	bge	r4,r2,400161ac <___vfiprintf_internal_r+0x304>
40015fd4:	1803821e 	bne	r3,zero,40016de0 <___vfiprintf_internal_r+0xf38>
40015fd8:	da802317 	ldw	r10,140(sp)
40015fdc:	d8001b15 	stw	zero,108(sp)
40015fe0:	d811883a 	mov	r8,sp
40015fe4:	5455883a 	add	r10,r10,r17
40015fe8:	da802315 	stw	r10,140(sp)
40015fec:	90800007 	ldb	r2,0(r18)
40015ff0:	10044626 	beq	r2,zero,4001710c <___vfiprintf_internal_r+0x1264>
40015ff4:	90c00047 	ldb	r3,1(r18)
40015ff8:	94000044 	addi	r16,r18,1
40015ffc:	d8001d85 	stb	zero,118(sp)
40016000:	0009883a 	mov	r4,zero
40016004:	000f883a 	mov	r7,zero
40016008:	027fffc4 	movi	r9,-1
4001600c:	0023883a 	mov	r17,zero
40016010:	0029883a 	mov	r20,zero
40016014:	01401604 	movi	r5,88
40016018:	01800244 	movi	r6,9
4001601c:	03400a84 	movi	r13,42
40016020:	03001b04 	movi	r12,108
40016024:	84000044 	addi	r16,r16,1
40016028:	18bff804 	addi	r2,r3,-32
4001602c:	28827336 	bltu	r5,r2,400169fc <___vfiprintf_internal_r+0xb54>
40016030:	100490ba 	slli	r2,r2,2
40016034:	02900074 	movhi	r10,16385
40016038:	52981204 	addi	r10,r10,24648
4001603c:	1285883a 	add	r2,r2,r10
40016040:	10800017 	ldw	r2,0(r2)
40016044:	1000683a 	jmp	r2
40016048:	40016730 	cmpltui	zero,r8,1436
4001604c:	400169fc 	xorhi	zero,r8,1447
40016050:	400169fc 	xorhi	zero,r8,1447
40016054:	40016750 	cmplti	zero,r8,1437
40016058:	400169fc 	xorhi	zero,r8,1447
4001605c:	400169fc 	xorhi	zero,r8,1447
40016060:	400169fc 	xorhi	zero,r8,1447
40016064:	400169fc 	xorhi	zero,r8,1447
40016068:	400169fc 	xorhi	zero,r8,1447
4001606c:	400169fc 	xorhi	zero,r8,1447
40016070:	40016938 	rdprs	zero,r8,1444
40016074:	40016954 	ori	zero,r8,1445
40016078:	400169fc 	xorhi	zero,r8,1447
4001607c:	4001623c 	xorhi	zero,r8,1416
40016080:	40016964 	muli	zero,r8,1445
40016084:	400169fc 	xorhi	zero,r8,1447
40016088:	4001675c 	xori	zero,r8,1437
4001608c:	40016768 	cmpgeui	zero,r8,1437
40016090:	40016768 	cmpgeui	zero,r8,1437
40016094:	40016768 	cmpgeui	zero,r8,1437
40016098:	40016768 	cmpgeui	zero,r8,1437
4001609c:	40016768 	cmpgeui	zero,r8,1437
400160a0:	40016768 	cmpgeui	zero,r8,1437
400160a4:	40016768 	cmpgeui	zero,r8,1437
400160a8:	40016768 	cmpgeui	zero,r8,1437
400160ac:	40016768 	cmpgeui	zero,r8,1437
400160b0:	400169fc 	xorhi	zero,r8,1447
400160b4:	400169fc 	xorhi	zero,r8,1447
400160b8:	400169fc 	xorhi	zero,r8,1447
400160bc:	400169fc 	xorhi	zero,r8,1447
400160c0:	400169fc 	xorhi	zero,r8,1447
400160c4:	400169fc 	xorhi	zero,r8,1447
400160c8:	400169fc 	xorhi	zero,r8,1447
400160cc:	400169fc 	xorhi	zero,r8,1447
400160d0:	400169fc 	xorhi	zero,r8,1447
400160d4:	400169fc 	xorhi	zero,r8,1447
400160d8:	40016794 	ori	zero,r8,1438
400160dc:	400169fc 	xorhi	zero,r8,1447
400160e0:	400169fc 	xorhi	zero,r8,1447
400160e4:	400169fc 	xorhi	zero,r8,1447
400160e8:	400169fc 	xorhi	zero,r8,1447
400160ec:	400169fc 	xorhi	zero,r8,1447
400160f0:	400169fc 	xorhi	zero,r8,1447
400160f4:	400169fc 	xorhi	zero,r8,1447
400160f8:	400169fc 	xorhi	zero,r8,1447
400160fc:	400169fc 	xorhi	zero,r8,1447
40016100:	400169fc 	xorhi	zero,r8,1447
40016104:	400167cc 	andi	zero,r8,1439
40016108:	400169fc 	xorhi	zero,r8,1447
4001610c:	400169fc 	xorhi	zero,r8,1447
40016110:	400169fc 	xorhi	zero,r8,1447
40016114:	400169fc 	xorhi	zero,r8,1447
40016118:	400169fc 	xorhi	zero,r8,1447
4001611c:	40016824 	muli	zero,r8,1440
40016120:	400169fc 	xorhi	zero,r8,1447
40016124:	400169fc 	xorhi	zero,r8,1447
40016128:	40016894 	ori	zero,r8,1442
4001612c:	400169fc 	xorhi	zero,r8,1447
40016130:	400169fc 	xorhi	zero,r8,1447
40016134:	400169fc 	xorhi	zero,r8,1447
40016138:	400169fc 	xorhi	zero,r8,1447
4001613c:	400169fc 	xorhi	zero,r8,1447
40016140:	400169fc 	xorhi	zero,r8,1447
40016144:	400169fc 	xorhi	zero,r8,1447
40016148:	400169fc 	xorhi	zero,r8,1447
4001614c:	400169fc 	xorhi	zero,r8,1447
40016150:	400169fc 	xorhi	zero,r8,1447
40016154:	40016640 	call	44001664 <__alt_heap_start+0x3fd4188>
40016158:	4001666c 	andhi	zero,r8,1433
4001615c:	400169fc 	xorhi	zero,r8,1447
40016160:	400169fc 	xorhi	zero,r8,1447
40016164:	400169fc 	xorhi	zero,r8,1447
40016168:	400169a4 	muli	zero,r8,1446
4001616c:	4001666c 	andhi	zero,r8,1433
40016170:	400169fc 	xorhi	zero,r8,1447
40016174:	400169fc 	xorhi	zero,r8,1447
40016178:	40016500 	call	44001650 <__alt_heap_start+0x3fd4174>
4001617c:	400169fc 	xorhi	zero,r8,1447
40016180:	40016510 	cmplti	zero,r8,1428
40016184:	4001654c 	andi	zero,r8,1429
40016188:	40016248 	cmpgei	zero,r8,1417
4001618c:	400164f4 	orhi	zero,r8,1427
40016190:	400169fc 	xorhi	zero,r8,1447
40016194:	400168d0 	cmplti	zero,r8,1443
40016198:	400169fc 	xorhi	zero,r8,1447
4001619c:	40016928 	cmpgeui	zero,r8,1444
400161a0:	400169fc 	xorhi	zero,r8,1447
400161a4:	400169fc 	xorhi	zero,r8,1447
400161a8:	400165ec 	andhi	zero,r8,1431
400161ac:	42000204 	addi	r8,r8,8
400161b0:	da802317 	ldw	r10,140(sp)
400161b4:	5455883a 	add	r10,r10,r17
400161b8:	da802315 	stw	r10,140(sp)
400161bc:	003f8b06 	br	40015fec <__alt_data_end+0xc0015fec>
400161c0:	d9002017 	ldw	r4,128(sp)
400161c4:	a00b883a 	mov	r5,r20
400161c8:	00114cc0 	call	400114cc <__swsetup_r>
400161cc:	1003b11e 	bne	r2,zero,40017094 <___vfiprintf_internal_r+0x11ec>
400161d0:	a080030b 	ldhu	r2,12(r20)
400161d4:	00c00284 	movi	r3,10
400161d8:	1080068c 	andi	r2,r2,26
400161dc:	10ff541e 	bne	r2,r3,40015f30 <__alt_data_end+0xc0015f30>
400161e0:	a080038f 	ldh	r2,14(r20)
400161e4:	103f5216 	blt	r2,zero,40015f30 <__alt_data_end+0xc0015f30>
400161e8:	d9c02217 	ldw	r7,136(sp)
400161ec:	d9002017 	ldw	r4,128(sp)
400161f0:	e00d883a 	mov	r6,fp
400161f4:	a00b883a 	mov	r5,r20
400161f8:	00173200 	call	40017320 <__sbprintf>
400161fc:	dfc03617 	ldw	ra,216(sp)
40016200:	df003517 	ldw	fp,212(sp)
40016204:	ddc03417 	ldw	r23,208(sp)
40016208:	dd803317 	ldw	r22,204(sp)
4001620c:	dd403217 	ldw	r21,200(sp)
40016210:	dd003117 	ldw	r20,196(sp)
40016214:	dcc03017 	ldw	r19,192(sp)
40016218:	dc802f17 	ldw	r18,188(sp)
4001621c:	dc402e17 	ldw	r17,184(sp)
40016220:	dc002d17 	ldw	r16,180(sp)
40016224:	dec03704 	addi	sp,sp,220
40016228:	f800283a 	ret
4001622c:	00134a00 	call	400134a0 <__sinit>
40016230:	003f2f06 	br	40015ef0 <__alt_data_end+0xc0015ef0>
40016234:	0463c83a 	sub	r17,zero,r17
40016238:	d8802215 	stw	r2,136(sp)
4001623c:	a5000114 	ori	r20,r20,4
40016240:	80c00007 	ldb	r3,0(r16)
40016244:	003f7706 	br	40016024 <__alt_data_end+0xc0016024>
40016248:	00800c04 	movi	r2,48
4001624c:	da802217 	ldw	r10,136(sp)
40016250:	d8801d05 	stb	r2,116(sp)
40016254:	00801e04 	movi	r2,120
40016258:	d8801d45 	stb	r2,117(sp)
4001625c:	d8001d85 	stb	zero,118(sp)
40016260:	50c00104 	addi	r3,r10,4
40016264:	54800017 	ldw	r18,0(r10)
40016268:	0027883a 	mov	r19,zero
4001626c:	a0800094 	ori	r2,r20,2
40016270:	48030b16 	blt	r9,zero,40016ea0 <___vfiprintf_internal_r+0xff8>
40016274:	00bfdfc4 	movi	r2,-129
40016278:	a096703a 	and	r11,r20,r2
4001627c:	d8c02215 	stw	r3,136(sp)
40016280:	5d000094 	ori	r20,r11,2
40016284:	90032b1e 	bne	r18,zero,40016f34 <___vfiprintf_internal_r+0x108c>
40016288:	009000b4 	movhi	r2,16386
4001628c:	10aa3404 	addi	r2,r2,-22320
40016290:	d8802615 	stw	r2,152(sp)
40016294:	0039883a 	mov	fp,zero
40016298:	48017b1e 	bne	r9,zero,40016888 <___vfiprintf_internal_r+0x9e0>
4001629c:	0013883a 	mov	r9,zero
400162a0:	0027883a 	mov	r19,zero
400162a4:	dd401a04 	addi	r21,sp,104
400162a8:	4825883a 	mov	r18,r9
400162ac:	4cc0010e 	bge	r9,r19,400162b4 <___vfiprintf_internal_r+0x40c>
400162b0:	9825883a 	mov	r18,r19
400162b4:	e7003fcc 	andi	fp,fp,255
400162b8:	e700201c 	xori	fp,fp,128
400162bc:	e73fe004 	addi	fp,fp,-128
400162c0:	e0000126 	beq	fp,zero,400162c8 <___vfiprintf_internal_r+0x420>
400162c4:	94800044 	addi	r18,r18,1
400162c8:	a380008c 	andi	r14,r20,2
400162cc:	70000126 	beq	r14,zero,400162d4 <___vfiprintf_internal_r+0x42c>
400162d0:	94800084 	addi	r18,r18,2
400162d4:	a700210c 	andi	fp,r20,132
400162d8:	e001df1e 	bne	fp,zero,40016a58 <___vfiprintf_internal_r+0xbb0>
400162dc:	8c87c83a 	sub	r3,r17,r18
400162e0:	00c1dd0e 	bge	zero,r3,40016a58 <___vfiprintf_internal_r+0xbb0>
400162e4:	01c00404 	movi	r7,16
400162e8:	d8801c17 	ldw	r2,112(sp)
400162ec:	38c3ad0e 	bge	r7,r3,400171a4 <___vfiprintf_internal_r+0x12fc>
400162f0:	029000b4 	movhi	r10,16386
400162f4:	52aa9804 	addi	r10,r10,-21920
400162f8:	dc002915 	stw	r16,164(sp)
400162fc:	d9801b17 	ldw	r6,108(sp)
40016300:	da802415 	stw	r10,144(sp)
40016304:	03c001c4 	movi	r15,7
40016308:	da402515 	stw	r9,148(sp)
4001630c:	db802815 	stw	r14,160(sp)
40016310:	1821883a 	mov	r16,r3
40016314:	00000506 	br	4001632c <___vfiprintf_internal_r+0x484>
40016318:	31400084 	addi	r5,r6,2
4001631c:	42000204 	addi	r8,r8,8
40016320:	200d883a 	mov	r6,r4
40016324:	843ffc04 	addi	r16,r16,-16
40016328:	3c000d0e 	bge	r7,r16,40016360 <___vfiprintf_internal_r+0x4b8>
4001632c:	10800404 	addi	r2,r2,16
40016330:	31000044 	addi	r4,r6,1
40016334:	45800015 	stw	r22,0(r8)
40016338:	41c00115 	stw	r7,4(r8)
4001633c:	d8801c15 	stw	r2,112(sp)
40016340:	d9001b15 	stw	r4,108(sp)
40016344:	793ff40e 	bge	r15,r4,40016318 <__alt_data_end+0xc0016318>
40016348:	1001b51e 	bne	r2,zero,40016a20 <___vfiprintf_internal_r+0xb78>
4001634c:	843ffc04 	addi	r16,r16,-16
40016350:	000d883a 	mov	r6,zero
40016354:	01400044 	movi	r5,1
40016358:	d811883a 	mov	r8,sp
4001635c:	3c3ff316 	blt	r7,r16,4001632c <__alt_data_end+0xc001632c>
40016360:	8007883a 	mov	r3,r16
40016364:	da402517 	ldw	r9,148(sp)
40016368:	db802817 	ldw	r14,160(sp)
4001636c:	dc002917 	ldw	r16,164(sp)
40016370:	da802417 	ldw	r10,144(sp)
40016374:	1885883a 	add	r2,r3,r2
40016378:	40c00115 	stw	r3,4(r8)
4001637c:	42800015 	stw	r10,0(r8)
40016380:	d8801c15 	stw	r2,112(sp)
40016384:	d9401b15 	stw	r5,108(sp)
40016388:	00c001c4 	movi	r3,7
4001638c:	19426016 	blt	r3,r5,40016d10 <___vfiprintf_internal_r+0xe68>
40016390:	d8c01d87 	ldb	r3,118(sp)
40016394:	42000204 	addi	r8,r8,8
40016398:	29000044 	addi	r4,r5,1
4001639c:	1801b31e 	bne	r3,zero,40016a6c <___vfiprintf_internal_r+0xbc4>
400163a0:	7001c026 	beq	r14,zero,40016aa4 <___vfiprintf_internal_r+0xbfc>
400163a4:	d8c01d04 	addi	r3,sp,116
400163a8:	10800084 	addi	r2,r2,2
400163ac:	40c00015 	stw	r3,0(r8)
400163b0:	00c00084 	movi	r3,2
400163b4:	40c00115 	stw	r3,4(r8)
400163b8:	d8801c15 	stw	r2,112(sp)
400163bc:	d9001b15 	stw	r4,108(sp)
400163c0:	00c001c4 	movi	r3,7
400163c4:	1902650e 	bge	r3,r4,40016d5c <___vfiprintf_internal_r+0xeb4>
400163c8:	10029a1e 	bne	r2,zero,40016e34 <___vfiprintf_internal_r+0xf8c>
400163cc:	00c02004 	movi	r3,128
400163d0:	01000044 	movi	r4,1
400163d4:	000b883a 	mov	r5,zero
400163d8:	d811883a 	mov	r8,sp
400163dc:	e0c1b31e 	bne	fp,r3,40016aac <___vfiprintf_internal_r+0xc04>
400163e0:	8cb9c83a 	sub	fp,r17,r18
400163e4:	0701b10e 	bge	zero,fp,40016aac <___vfiprintf_internal_r+0xc04>
400163e8:	01c00404 	movi	r7,16
400163ec:	3f03890e 	bge	r7,fp,40017214 <___vfiprintf_internal_r+0x136c>
400163f0:	00d000b4 	movhi	r3,16386
400163f4:	18ea9404 	addi	r3,r3,-21936
400163f8:	d8c02415 	stw	r3,144(sp)
400163fc:	8007883a 	mov	r3,r16
40016400:	034001c4 	movi	r13,7
40016404:	e021883a 	mov	r16,fp
40016408:	da402515 	stw	r9,148(sp)
4001640c:	1839883a 	mov	fp,r3
40016410:	00000506 	br	40016428 <___vfiprintf_internal_r+0x580>
40016414:	29800084 	addi	r6,r5,2
40016418:	42000204 	addi	r8,r8,8
4001641c:	180b883a 	mov	r5,r3
40016420:	843ffc04 	addi	r16,r16,-16
40016424:	3c000d0e 	bge	r7,r16,4001645c <___vfiprintf_internal_r+0x5b4>
40016428:	10800404 	addi	r2,r2,16
4001642c:	28c00044 	addi	r3,r5,1
40016430:	45c00015 	stw	r23,0(r8)
40016434:	41c00115 	stw	r7,4(r8)
40016438:	d8801c15 	stw	r2,112(sp)
4001643c:	d8c01b15 	stw	r3,108(sp)
40016440:	68fff40e 	bge	r13,r3,40016414 <__alt_data_end+0xc0016414>
40016444:	1002241e 	bne	r2,zero,40016cd8 <___vfiprintf_internal_r+0xe30>
40016448:	843ffc04 	addi	r16,r16,-16
4001644c:	01800044 	movi	r6,1
40016450:	000b883a 	mov	r5,zero
40016454:	d811883a 	mov	r8,sp
40016458:	3c3ff316 	blt	r7,r16,40016428 <__alt_data_end+0xc0016428>
4001645c:	da402517 	ldw	r9,148(sp)
40016460:	e007883a 	mov	r3,fp
40016464:	8039883a 	mov	fp,r16
40016468:	1821883a 	mov	r16,r3
4001646c:	d8c02417 	ldw	r3,144(sp)
40016470:	1705883a 	add	r2,r2,fp
40016474:	47000115 	stw	fp,4(r8)
40016478:	40c00015 	stw	r3,0(r8)
4001647c:	d8801c15 	stw	r2,112(sp)
40016480:	d9801b15 	stw	r6,108(sp)
40016484:	00c001c4 	movi	r3,7
40016488:	19827616 	blt	r3,r6,40016e64 <___vfiprintf_internal_r+0xfbc>
4001648c:	4cf9c83a 	sub	fp,r9,r19
40016490:	42000204 	addi	r8,r8,8
40016494:	31000044 	addi	r4,r6,1
40016498:	300b883a 	mov	r5,r6
4001649c:	07018516 	blt	zero,fp,40016ab4 <___vfiprintf_internal_r+0xc0c>
400164a0:	9885883a 	add	r2,r19,r2
400164a4:	45400015 	stw	r21,0(r8)
400164a8:	44c00115 	stw	r19,4(r8)
400164ac:	d8801c15 	stw	r2,112(sp)
400164b0:	d9001b15 	stw	r4,108(sp)
400164b4:	00c001c4 	movi	r3,7
400164b8:	1901dd0e 	bge	r3,r4,40016c30 <___vfiprintf_internal_r+0xd88>
400164bc:	1002401e 	bne	r2,zero,40016dc0 <___vfiprintf_internal_r+0xf18>
400164c0:	d8001b15 	stw	zero,108(sp)
400164c4:	a2c0010c 	andi	r11,r20,4
400164c8:	58000226 	beq	r11,zero,400164d4 <___vfiprintf_internal_r+0x62c>
400164cc:	8ca7c83a 	sub	r19,r17,r18
400164d0:	04c2f216 	blt	zero,r19,4001709c <___vfiprintf_internal_r+0x11f4>
400164d4:	8c80010e 	bge	r17,r18,400164dc <___vfiprintf_internal_r+0x634>
400164d8:	9023883a 	mov	r17,r18
400164dc:	da802317 	ldw	r10,140(sp)
400164e0:	5455883a 	add	r10,r10,r17
400164e4:	da802315 	stw	r10,140(sp)
400164e8:	d8001b15 	stw	zero,108(sp)
400164ec:	d811883a 	mov	r8,sp
400164f0:	003ea206 	br	40015f7c <__alt_data_end+0xc0015f7c>
400164f4:	a5000814 	ori	r20,r20,32
400164f8:	80c00007 	ldb	r3,0(r16)
400164fc:	003ec906 	br	40016024 <__alt_data_end+0xc0016024>
40016500:	80c00007 	ldb	r3,0(r16)
40016504:	1b030926 	beq	r3,r12,4001712c <___vfiprintf_internal_r+0x1284>
40016508:	a5000414 	ori	r20,r20,16
4001650c:	003ec506 	br	40016024 <__alt_data_end+0xc0016024>
40016510:	21003fcc 	andi	r4,r4,255
40016514:	20035e1e 	bne	r4,zero,40017290 <___vfiprintf_internal_r+0x13e8>
40016518:	a080080c 	andi	r2,r20,32
4001651c:	1002a526 	beq	r2,zero,40016fb4 <___vfiprintf_internal_r+0x110c>
40016520:	da802217 	ldw	r10,136(sp)
40016524:	50800017 	ldw	r2,0(r10)
40016528:	da802317 	ldw	r10,140(sp)
4001652c:	5007d7fa 	srai	r3,r10,31
40016530:	da802217 	ldw	r10,136(sp)
40016534:	10c00115 	stw	r3,4(r2)
40016538:	52800104 	addi	r10,r10,4
4001653c:	da802215 	stw	r10,136(sp)
40016540:	da802317 	ldw	r10,140(sp)
40016544:	12800015 	stw	r10,0(r2)
40016548:	003e8c06 	br	40015f7c <__alt_data_end+0xc0015f7c>
4001654c:	21003fcc 	andi	r4,r4,255
40016550:	2003511e 	bne	r4,zero,40017298 <___vfiprintf_internal_r+0x13f0>
40016554:	a080080c 	andi	r2,r20,32
40016558:	1000a126 	beq	r2,zero,400167e0 <___vfiprintf_internal_r+0x938>
4001655c:	da802217 	ldw	r10,136(sp)
40016560:	d8001d85 	stb	zero,118(sp)
40016564:	50800204 	addi	r2,r10,8
40016568:	54800017 	ldw	r18,0(r10)
4001656c:	54c00117 	ldw	r19,4(r10)
40016570:	4802b416 	blt	r9,zero,40017044 <___vfiprintf_internal_r+0x119c>
40016574:	013fdfc4 	movi	r4,-129
40016578:	94c6b03a 	or	r3,r18,r19
4001657c:	d8802215 	stw	r2,136(sp)
40016580:	a128703a 	and	r20,r20,r4
40016584:	1800a226 	beq	r3,zero,40016810 <___vfiprintf_internal_r+0x968>
40016588:	0039883a 	mov	fp,zero
4001658c:	dd401a04 	addi	r21,sp,104
40016590:	9006d0fa 	srli	r3,r18,3
40016594:	9808977a 	slli	r4,r19,29
40016598:	9826d0fa 	srli	r19,r19,3
4001659c:	948001cc 	andi	r18,r18,7
400165a0:	90800c04 	addi	r2,r18,48
400165a4:	ad7fffc4 	addi	r21,r21,-1
400165a8:	20e4b03a 	or	r18,r4,r3
400165ac:	a8800005 	stb	r2,0(r21)
400165b0:	94c6b03a 	or	r3,r18,r19
400165b4:	183ff61e 	bne	r3,zero,40016590 <__alt_data_end+0xc0016590>
400165b8:	a0c0004c 	andi	r3,r20,1
400165bc:	18005926 	beq	r3,zero,40016724 <___vfiprintf_internal_r+0x87c>
400165c0:	10803fcc 	andi	r2,r2,255
400165c4:	1080201c 	xori	r2,r2,128
400165c8:	10bfe004 	addi	r2,r2,-128
400165cc:	00c00c04 	movi	r3,48
400165d0:	10c05426 	beq	r2,r3,40016724 <___vfiprintf_internal_r+0x87c>
400165d4:	da801e17 	ldw	r10,120(sp)
400165d8:	a8bfffc4 	addi	r2,r21,-1
400165dc:	a8ffffc5 	stb	r3,-1(r21)
400165e0:	50a7c83a 	sub	r19,r10,r2
400165e4:	102b883a 	mov	r21,r2
400165e8:	003f2f06 	br	400162a8 <__alt_data_end+0xc00162a8>
400165ec:	21003fcc 	andi	r4,r4,255
400165f0:	2003421e 	bne	r4,zero,400172fc <___vfiprintf_internal_r+0x1454>
400165f4:	009000b4 	movhi	r2,16386
400165f8:	10aa3404 	addi	r2,r2,-22320
400165fc:	d8802615 	stw	r2,152(sp)
40016600:	a080080c 	andi	r2,r20,32
40016604:	1000aa26 	beq	r2,zero,400168b0 <___vfiprintf_internal_r+0xa08>
40016608:	da802217 	ldw	r10,136(sp)
4001660c:	54800017 	ldw	r18,0(r10)
40016610:	54c00117 	ldw	r19,4(r10)
40016614:	52800204 	addi	r10,r10,8
40016618:	da802215 	stw	r10,136(sp)
4001661c:	a080004c 	andi	r2,r20,1
40016620:	1001d226 	beq	r2,zero,40016d6c <___vfiprintf_internal_r+0xec4>
40016624:	94c4b03a 	or	r2,r18,r19
40016628:	1002351e 	bne	r2,zero,40016f00 <___vfiprintf_internal_r+0x1058>
4001662c:	d8001d85 	stb	zero,118(sp)
40016630:	48022216 	blt	r9,zero,40016ebc <___vfiprintf_internal_r+0x1014>
40016634:	00bfdfc4 	movi	r2,-129
40016638:	a0a8703a 	and	r20,r20,r2
4001663c:	003f1506 	br	40016294 <__alt_data_end+0xc0016294>
40016640:	da802217 	ldw	r10,136(sp)
40016644:	04800044 	movi	r18,1
40016648:	d8001d85 	stb	zero,118(sp)
4001664c:	50800017 	ldw	r2,0(r10)
40016650:	52800104 	addi	r10,r10,4
40016654:	da802215 	stw	r10,136(sp)
40016658:	d8801005 	stb	r2,64(sp)
4001665c:	9027883a 	mov	r19,r18
40016660:	dd401004 	addi	r21,sp,64
40016664:	0013883a 	mov	r9,zero
40016668:	003f1706 	br	400162c8 <__alt_data_end+0xc00162c8>
4001666c:	21003fcc 	andi	r4,r4,255
40016670:	2003201e 	bne	r4,zero,400172f4 <___vfiprintf_internal_r+0x144c>
40016674:	a080080c 	andi	r2,r20,32
40016678:	10004b26 	beq	r2,zero,400167a8 <___vfiprintf_internal_r+0x900>
4001667c:	da802217 	ldw	r10,136(sp)
40016680:	50800117 	ldw	r2,4(r10)
40016684:	54800017 	ldw	r18,0(r10)
40016688:	52800204 	addi	r10,r10,8
4001668c:	da802215 	stw	r10,136(sp)
40016690:	1027883a 	mov	r19,r2
40016694:	10022c16 	blt	r2,zero,40016f48 <___vfiprintf_internal_r+0x10a0>
40016698:	df001d83 	ldbu	fp,118(sp)
4001669c:	48007216 	blt	r9,zero,40016868 <___vfiprintf_internal_r+0x9c0>
400166a0:	00ffdfc4 	movi	r3,-129
400166a4:	94c4b03a 	or	r2,r18,r19
400166a8:	a0e8703a 	and	r20,r20,r3
400166ac:	1000cc26 	beq	r2,zero,400169e0 <___vfiprintf_internal_r+0xb38>
400166b0:	98021026 	beq	r19,zero,40016ef4 <___vfiprintf_internal_r+0x104c>
400166b4:	dc402415 	stw	r17,144(sp)
400166b8:	dc002515 	stw	r16,148(sp)
400166bc:	9823883a 	mov	r17,r19
400166c0:	9021883a 	mov	r16,r18
400166c4:	dd401a04 	addi	r21,sp,104
400166c8:	4825883a 	mov	r18,r9
400166cc:	4027883a 	mov	r19,r8
400166d0:	8009883a 	mov	r4,r16
400166d4:	880b883a 	mov	r5,r17
400166d8:	01800284 	movi	r6,10
400166dc:	000f883a 	mov	r7,zero
400166e0:	00181c40 	call	400181c4 <__umoddi3>
400166e4:	10800c04 	addi	r2,r2,48
400166e8:	ad7fffc4 	addi	r21,r21,-1
400166ec:	8009883a 	mov	r4,r16
400166f0:	880b883a 	mov	r5,r17
400166f4:	a8800005 	stb	r2,0(r21)
400166f8:	01800284 	movi	r6,10
400166fc:	000f883a 	mov	r7,zero
40016700:	0017c4c0 	call	40017c4c <__udivdi3>
40016704:	1021883a 	mov	r16,r2
40016708:	10c4b03a 	or	r2,r2,r3
4001670c:	1823883a 	mov	r17,r3
40016710:	103fef1e 	bne	r2,zero,400166d0 <__alt_data_end+0xc00166d0>
40016714:	dc402417 	ldw	r17,144(sp)
40016718:	dc002517 	ldw	r16,148(sp)
4001671c:	9013883a 	mov	r9,r18
40016720:	9811883a 	mov	r8,r19
40016724:	da801e17 	ldw	r10,120(sp)
40016728:	5567c83a 	sub	r19,r10,r21
4001672c:	003ede06 	br	400162a8 <__alt_data_end+0xc00162a8>
40016730:	38803fcc 	andi	r2,r7,255
40016734:	1080201c 	xori	r2,r2,128
40016738:	10bfe004 	addi	r2,r2,-128
4001673c:	1002371e 	bne	r2,zero,4001701c <___vfiprintf_internal_r+0x1174>
40016740:	01000044 	movi	r4,1
40016744:	01c00804 	movi	r7,32
40016748:	80c00007 	ldb	r3,0(r16)
4001674c:	003e3506 	br	40016024 <__alt_data_end+0xc0016024>
40016750:	a5000054 	ori	r20,r20,1
40016754:	80c00007 	ldb	r3,0(r16)
40016758:	003e3206 	br	40016024 <__alt_data_end+0xc0016024>
4001675c:	a5002014 	ori	r20,r20,128
40016760:	80c00007 	ldb	r3,0(r16)
40016764:	003e2f06 	br	40016024 <__alt_data_end+0xc0016024>
40016768:	8015883a 	mov	r10,r16
4001676c:	0023883a 	mov	r17,zero
40016770:	18bff404 	addi	r2,r3,-48
40016774:	50c00007 	ldb	r3,0(r10)
40016778:	8c4002a4 	muli	r17,r17,10
4001677c:	84000044 	addi	r16,r16,1
40016780:	8015883a 	mov	r10,r16
40016784:	1463883a 	add	r17,r2,r17
40016788:	18bff404 	addi	r2,r3,-48
4001678c:	30bff92e 	bgeu	r6,r2,40016774 <__alt_data_end+0xc0016774>
40016790:	003e2506 	br	40016028 <__alt_data_end+0xc0016028>
40016794:	21003fcc 	andi	r4,r4,255
40016798:	2002d41e 	bne	r4,zero,400172ec <___vfiprintf_internal_r+0x1444>
4001679c:	a5000414 	ori	r20,r20,16
400167a0:	a080080c 	andi	r2,r20,32
400167a4:	103fb51e 	bne	r2,zero,4001667c <__alt_data_end+0xc001667c>
400167a8:	a080040c 	andi	r2,r20,16
400167ac:	1001f826 	beq	r2,zero,40016f90 <___vfiprintf_internal_r+0x10e8>
400167b0:	da802217 	ldw	r10,136(sp)
400167b4:	54800017 	ldw	r18,0(r10)
400167b8:	52800104 	addi	r10,r10,4
400167bc:	da802215 	stw	r10,136(sp)
400167c0:	9027d7fa 	srai	r19,r18,31
400167c4:	9805883a 	mov	r2,r19
400167c8:	003fb206 	br	40016694 <__alt_data_end+0xc0016694>
400167cc:	21003fcc 	andi	r4,r4,255
400167d0:	2002c41e 	bne	r4,zero,400172e4 <___vfiprintf_internal_r+0x143c>
400167d4:	a5000414 	ori	r20,r20,16
400167d8:	a080080c 	andi	r2,r20,32
400167dc:	103f5f1e 	bne	r2,zero,4001655c <__alt_data_end+0xc001655c>
400167e0:	a080040c 	andi	r2,r20,16
400167e4:	10020f26 	beq	r2,zero,40017024 <___vfiprintf_internal_r+0x117c>
400167e8:	da802217 	ldw	r10,136(sp)
400167ec:	d8001d85 	stb	zero,118(sp)
400167f0:	0027883a 	mov	r19,zero
400167f4:	50800104 	addi	r2,r10,4
400167f8:	54800017 	ldw	r18,0(r10)
400167fc:	48021116 	blt	r9,zero,40017044 <___vfiprintf_internal_r+0x119c>
40016800:	00ffdfc4 	movi	r3,-129
40016804:	d8802215 	stw	r2,136(sp)
40016808:	a0e8703a 	and	r20,r20,r3
4001680c:	903f5e1e 	bne	r18,zero,40016588 <__alt_data_end+0xc0016588>
40016810:	0039883a 	mov	fp,zero
40016814:	4802a626 	beq	r9,zero,400172b0 <___vfiprintf_internal_r+0x1408>
40016818:	0025883a 	mov	r18,zero
4001681c:	0027883a 	mov	r19,zero
40016820:	003f5a06 	br	4001658c <__alt_data_end+0xc001658c>
40016824:	21003fcc 	andi	r4,r4,255
40016828:	20029f1e 	bne	r4,zero,400172a8 <___vfiprintf_internal_r+0x1400>
4001682c:	a5000414 	ori	r20,r20,16
40016830:	a080080c 	andi	r2,r20,32
40016834:	10005e1e 	bne	r2,zero,400169b0 <___vfiprintf_internal_r+0xb08>
40016838:	a080040c 	andi	r2,r20,16
4001683c:	1001a21e 	bne	r2,zero,40016ec8 <___vfiprintf_internal_r+0x1020>
40016840:	a080100c 	andi	r2,r20,64
40016844:	d8001d85 	stb	zero,118(sp)
40016848:	da802217 	ldw	r10,136(sp)
4001684c:	1002231e 	bne	r2,zero,400170dc <___vfiprintf_internal_r+0x1234>
40016850:	50800104 	addi	r2,r10,4
40016854:	54800017 	ldw	r18,0(r10)
40016858:	0027883a 	mov	r19,zero
4001685c:	4801a00e 	bge	r9,zero,40016ee0 <___vfiprintf_internal_r+0x1038>
40016860:	d8802215 	stw	r2,136(sp)
40016864:	0039883a 	mov	fp,zero
40016868:	94c4b03a 	or	r2,r18,r19
4001686c:	103f901e 	bne	r2,zero,400166b0 <__alt_data_end+0xc00166b0>
40016870:	00800044 	movi	r2,1
40016874:	10803fcc 	andi	r2,r2,255
40016878:	00c00044 	movi	r3,1
4001687c:	10c05926 	beq	r2,r3,400169e4 <___vfiprintf_internal_r+0xb3c>
40016880:	00c00084 	movi	r3,2
40016884:	10ffe41e 	bne	r2,r3,40016818 <__alt_data_end+0xc0016818>
40016888:	0025883a 	mov	r18,zero
4001688c:	0027883a 	mov	r19,zero
40016890:	00013d06 	br	40016d88 <___vfiprintf_internal_r+0xee0>
40016894:	21003fcc 	andi	r4,r4,255
40016898:	2002811e 	bne	r4,zero,400172a0 <___vfiprintf_internal_r+0x13f8>
4001689c:	009000b4 	movhi	r2,16386
400168a0:	10aa2f04 	addi	r2,r2,-22340
400168a4:	d8802615 	stw	r2,152(sp)
400168a8:	a080080c 	andi	r2,r20,32
400168ac:	103f561e 	bne	r2,zero,40016608 <__alt_data_end+0xc0016608>
400168b0:	a080040c 	andi	r2,r20,16
400168b4:	1001d126 	beq	r2,zero,40016ffc <___vfiprintf_internal_r+0x1154>
400168b8:	da802217 	ldw	r10,136(sp)
400168bc:	0027883a 	mov	r19,zero
400168c0:	54800017 	ldw	r18,0(r10)
400168c4:	52800104 	addi	r10,r10,4
400168c8:	da802215 	stw	r10,136(sp)
400168cc:	003f5306 	br	4001661c <__alt_data_end+0xc001661c>
400168d0:	da802217 	ldw	r10,136(sp)
400168d4:	d8001d85 	stb	zero,118(sp)
400168d8:	55400017 	ldw	r21,0(r10)
400168dc:	50c00104 	addi	r3,r10,4
400168e0:	a8024226 	beq	r21,zero,400171ec <___vfiprintf_internal_r+0x1344>
400168e4:	48021816 	blt	r9,zero,40017148 <___vfiprintf_internal_r+0x12a0>
400168e8:	480d883a 	mov	r6,r9
400168ec:	000b883a 	mov	r5,zero
400168f0:	a809883a 	mov	r4,r21
400168f4:	d8c02a15 	stw	r3,168(sp)
400168f8:	da002b15 	stw	r8,172(sp)
400168fc:	da402c15 	stw	r9,176(sp)
40016900:	00142000 	call	40014200 <memchr>
40016904:	d8c02a17 	ldw	r3,168(sp)
40016908:	da002b17 	ldw	r8,172(sp)
4001690c:	da402c17 	ldw	r9,176(sp)
40016910:	10024826 	beq	r2,zero,40017234 <___vfiprintf_internal_r+0x138c>
40016914:	1567c83a 	sub	r19,r2,r21
40016918:	df001d83 	ldbu	fp,118(sp)
4001691c:	d8c02215 	stw	r3,136(sp)
40016920:	0013883a 	mov	r9,zero
40016924:	003e6006 	br	400162a8 <__alt_data_end+0xc00162a8>
40016928:	21003fcc 	andi	r4,r4,255
4001692c:	203fc026 	beq	r4,zero,40016830 <__alt_data_end+0xc0016830>
40016930:	d9c01d85 	stb	r7,118(sp)
40016934:	003fbe06 	br	40016830 <__alt_data_end+0xc0016830>
40016938:	da802217 	ldw	r10,136(sp)
4001693c:	54400017 	ldw	r17,0(r10)
40016940:	50800104 	addi	r2,r10,4
40016944:	883e3b16 	blt	r17,zero,40016234 <__alt_data_end+0xc0016234>
40016948:	d8802215 	stw	r2,136(sp)
4001694c:	80c00007 	ldb	r3,0(r16)
40016950:	003db406 	br	40016024 <__alt_data_end+0xc0016024>
40016954:	01000044 	movi	r4,1
40016958:	01c00ac4 	movi	r7,43
4001695c:	80c00007 	ldb	r3,0(r16)
40016960:	003db006 	br	40016024 <__alt_data_end+0xc0016024>
40016964:	80c00007 	ldb	r3,0(r16)
40016968:	82800044 	addi	r10,r16,1
4001696c:	1b423c26 	beq	r3,r13,40017260 <___vfiprintf_internal_r+0x13b8>
40016970:	18bff404 	addi	r2,r3,-48
40016974:	0013883a 	mov	r9,zero
40016978:	30822b36 	bltu	r6,r2,40017228 <___vfiprintf_internal_r+0x1380>
4001697c:	50c00007 	ldb	r3,0(r10)
40016980:	4a4002a4 	muli	r9,r9,10
40016984:	54000044 	addi	r16,r10,1
40016988:	8015883a 	mov	r10,r16
4001698c:	4893883a 	add	r9,r9,r2
40016990:	18bff404 	addi	r2,r3,-48
40016994:	30bff92e 	bgeu	r6,r2,4001697c <__alt_data_end+0xc001697c>
40016998:	483da30e 	bge	r9,zero,40016028 <__alt_data_end+0xc0016028>
4001699c:	027fffc4 	movi	r9,-1
400169a0:	003da106 	br	40016028 <__alt_data_end+0xc0016028>
400169a4:	a5001014 	ori	r20,r20,64
400169a8:	80c00007 	ldb	r3,0(r16)
400169ac:	003d9d06 	br	40016024 <__alt_data_end+0xc0016024>
400169b0:	da802217 	ldw	r10,136(sp)
400169b4:	d8001d85 	stb	zero,118(sp)
400169b8:	50c00204 	addi	r3,r10,8
400169bc:	54800017 	ldw	r18,0(r10)
400169c0:	54c00117 	ldw	r19,4(r10)
400169c4:	4801ca16 	blt	r9,zero,400170f0 <___vfiprintf_internal_r+0x1248>
400169c8:	013fdfc4 	movi	r4,-129
400169cc:	94c4b03a 	or	r2,r18,r19
400169d0:	d8c02215 	stw	r3,136(sp)
400169d4:	a128703a 	and	r20,r20,r4
400169d8:	0039883a 	mov	fp,zero
400169dc:	103f341e 	bne	r2,zero,400166b0 <__alt_data_end+0xc00166b0>
400169e0:	483e2e26 	beq	r9,zero,4001629c <__alt_data_end+0xc001629c>
400169e4:	0025883a 	mov	r18,zero
400169e8:	94800c04 	addi	r18,r18,48
400169ec:	dc8019c5 	stb	r18,103(sp)
400169f0:	dcc02717 	ldw	r19,156(sp)
400169f4:	dd4019c4 	addi	r21,sp,103
400169f8:	003e2b06 	br	400162a8 <__alt_data_end+0xc00162a8>
400169fc:	21003fcc 	andi	r4,r4,255
40016a00:	2002361e 	bne	r4,zero,400172dc <___vfiprintf_internal_r+0x1434>
40016a04:	1801c126 	beq	r3,zero,4001710c <___vfiprintf_internal_r+0x1264>
40016a08:	04800044 	movi	r18,1
40016a0c:	d8c01005 	stb	r3,64(sp)
40016a10:	d8001d85 	stb	zero,118(sp)
40016a14:	9027883a 	mov	r19,r18
40016a18:	dd401004 	addi	r21,sp,64
40016a1c:	003f1106 	br	40016664 <__alt_data_end+0xc0016664>
40016a20:	d9402117 	ldw	r5,132(sp)
40016a24:	d9002017 	ldw	r4,128(sp)
40016a28:	d9801a04 	addi	r6,sp,104
40016a2c:	d9c02b15 	stw	r7,172(sp)
40016a30:	dbc02a15 	stw	r15,168(sp)
40016a34:	0015d940 	call	40015d94 <__sprint_r.part.0>
40016a38:	d9c02b17 	ldw	r7,172(sp)
40016a3c:	dbc02a17 	ldw	r15,168(sp)
40016a40:	10006d1e 	bne	r2,zero,40016bf8 <___vfiprintf_internal_r+0xd50>
40016a44:	d9801b17 	ldw	r6,108(sp)
40016a48:	d8801c17 	ldw	r2,112(sp)
40016a4c:	d811883a 	mov	r8,sp
40016a50:	31400044 	addi	r5,r6,1
40016a54:	003e3306 	br	40016324 <__alt_data_end+0xc0016324>
40016a58:	d9401b17 	ldw	r5,108(sp)
40016a5c:	d8801c17 	ldw	r2,112(sp)
40016a60:	29000044 	addi	r4,r5,1
40016a64:	d8c01d87 	ldb	r3,118(sp)
40016a68:	183e4d26 	beq	r3,zero,400163a0 <__alt_data_end+0xc00163a0>
40016a6c:	00c00044 	movi	r3,1
40016a70:	d9401d84 	addi	r5,sp,118
40016a74:	10c5883a 	add	r2,r2,r3
40016a78:	41400015 	stw	r5,0(r8)
40016a7c:	40c00115 	stw	r3,4(r8)
40016a80:	d8801c15 	stw	r2,112(sp)
40016a84:	d9001b15 	stw	r4,108(sp)
40016a88:	014001c4 	movi	r5,7
40016a8c:	2900a90e 	bge	r5,r4,40016d34 <___vfiprintf_internal_r+0xe8c>
40016a90:	1000da1e 	bne	r2,zero,40016dfc <___vfiprintf_internal_r+0xf54>
40016a94:	7000ab1e 	bne	r14,zero,40016d44 <___vfiprintf_internal_r+0xe9c>
40016a98:	000b883a 	mov	r5,zero
40016a9c:	1809883a 	mov	r4,r3
40016aa0:	d811883a 	mov	r8,sp
40016aa4:	00c02004 	movi	r3,128
40016aa8:	e0fe4d26 	beq	fp,r3,400163e0 <__alt_data_end+0xc00163e0>
40016aac:	4cf9c83a 	sub	fp,r9,r19
40016ab0:	073e7b0e 	bge	zero,fp,400164a0 <__alt_data_end+0xc00164a0>
40016ab4:	01c00404 	movi	r7,16
40016ab8:	3f01900e 	bge	r7,fp,400170fc <___vfiprintf_internal_r+0x1254>
40016abc:	00d000b4 	movhi	r3,16386
40016ac0:	18ea9404 	addi	r3,r3,-21936
40016ac4:	d8c02415 	stw	r3,144(sp)
40016ac8:	034001c4 	movi	r13,7
40016acc:	00000506 	br	40016ae4 <___vfiprintf_internal_r+0xc3c>
40016ad0:	29000084 	addi	r4,r5,2
40016ad4:	42000204 	addi	r8,r8,8
40016ad8:	180b883a 	mov	r5,r3
40016adc:	e73ffc04 	addi	fp,fp,-16
40016ae0:	3f000d0e 	bge	r7,fp,40016b18 <___vfiprintf_internal_r+0xc70>
40016ae4:	10800404 	addi	r2,r2,16
40016ae8:	28c00044 	addi	r3,r5,1
40016aec:	45c00015 	stw	r23,0(r8)
40016af0:	41c00115 	stw	r7,4(r8)
40016af4:	d8801c15 	stw	r2,112(sp)
40016af8:	d8c01b15 	stw	r3,108(sp)
40016afc:	68fff40e 	bge	r13,r3,40016ad0 <__alt_data_end+0xc0016ad0>
40016b00:	1000101e 	bne	r2,zero,40016b44 <___vfiprintf_internal_r+0xc9c>
40016b04:	e73ffc04 	addi	fp,fp,-16
40016b08:	01000044 	movi	r4,1
40016b0c:	000b883a 	mov	r5,zero
40016b10:	d811883a 	mov	r8,sp
40016b14:	3f3ff316 	blt	r7,fp,40016ae4 <__alt_data_end+0xc0016ae4>
40016b18:	da802417 	ldw	r10,144(sp)
40016b1c:	1705883a 	add	r2,r2,fp
40016b20:	47000115 	stw	fp,4(r8)
40016b24:	42800015 	stw	r10,0(r8)
40016b28:	d8801c15 	stw	r2,112(sp)
40016b2c:	d9001b15 	stw	r4,108(sp)
40016b30:	00c001c4 	movi	r3,7
40016b34:	19003616 	blt	r3,r4,40016c10 <___vfiprintf_internal_r+0xd68>
40016b38:	42000204 	addi	r8,r8,8
40016b3c:	21000044 	addi	r4,r4,1
40016b40:	003e5706 	br	400164a0 <__alt_data_end+0xc00164a0>
40016b44:	d9402117 	ldw	r5,132(sp)
40016b48:	d9002017 	ldw	r4,128(sp)
40016b4c:	d9801a04 	addi	r6,sp,104
40016b50:	d9c02b15 	stw	r7,172(sp)
40016b54:	db402a15 	stw	r13,168(sp)
40016b58:	0015d940 	call	40015d94 <__sprint_r.part.0>
40016b5c:	d9c02b17 	ldw	r7,172(sp)
40016b60:	db402a17 	ldw	r13,168(sp)
40016b64:	1000241e 	bne	r2,zero,40016bf8 <___vfiprintf_internal_r+0xd50>
40016b68:	d9401b17 	ldw	r5,108(sp)
40016b6c:	d8801c17 	ldw	r2,112(sp)
40016b70:	d811883a 	mov	r8,sp
40016b74:	29000044 	addi	r4,r5,1
40016b78:	003fd806 	br	40016adc <__alt_data_end+0xc0016adc>
40016b7c:	d9401b17 	ldw	r5,108(sp)
40016b80:	00d000b4 	movhi	r3,16386
40016b84:	18ea9804 	addi	r3,r3,-21920
40016b88:	d8c02415 	stw	r3,144(sp)
40016b8c:	29400044 	addi	r5,r5,1
40016b90:	d8c02417 	ldw	r3,144(sp)
40016b94:	14c5883a 	add	r2,r2,r19
40016b98:	44c00115 	stw	r19,4(r8)
40016b9c:	40c00015 	stw	r3,0(r8)
40016ba0:	d8801c15 	stw	r2,112(sp)
40016ba4:	d9401b15 	stw	r5,108(sp)
40016ba8:	00c001c4 	movi	r3,7
40016bac:	1940070e 	bge	r3,r5,40016bcc <___vfiprintf_internal_r+0xd24>
40016bb0:	103e4826 	beq	r2,zero,400164d4 <__alt_data_end+0xc00164d4>
40016bb4:	d9402117 	ldw	r5,132(sp)
40016bb8:	d9002017 	ldw	r4,128(sp)
40016bbc:	d9801a04 	addi	r6,sp,104
40016bc0:	0015d940 	call	40015d94 <__sprint_r.part.0>
40016bc4:	10000c1e 	bne	r2,zero,40016bf8 <___vfiprintf_internal_r+0xd50>
40016bc8:	d8801c17 	ldw	r2,112(sp)
40016bcc:	8c80010e 	bge	r17,r18,40016bd4 <___vfiprintf_internal_r+0xd2c>
40016bd0:	9023883a 	mov	r17,r18
40016bd4:	da802317 	ldw	r10,140(sp)
40016bd8:	5455883a 	add	r10,r10,r17
40016bdc:	da802315 	stw	r10,140(sp)
40016be0:	103e4126 	beq	r2,zero,400164e8 <__alt_data_end+0xc00164e8>
40016be4:	d9402117 	ldw	r5,132(sp)
40016be8:	d9002017 	ldw	r4,128(sp)
40016bec:	d9801a04 	addi	r6,sp,104
40016bf0:	0015d940 	call	40015d94 <__sprint_r.part.0>
40016bf4:	103e3c26 	beq	r2,zero,400164e8 <__alt_data_end+0xc00164e8>
40016bf8:	dd002117 	ldw	r20,132(sp)
40016bfc:	a080030b 	ldhu	r2,12(r20)
40016c00:	1080100c 	andi	r2,r2,64
40016c04:	1001231e 	bne	r2,zero,40017094 <___vfiprintf_internal_r+0x11ec>
40016c08:	d8802317 	ldw	r2,140(sp)
40016c0c:	003d7b06 	br	400161fc <__alt_data_end+0xc00161fc>
40016c10:	1000991e 	bne	r2,zero,40016e78 <___vfiprintf_internal_r+0xfd0>
40016c14:	00c00044 	movi	r3,1
40016c18:	9805883a 	mov	r2,r19
40016c1c:	dd400015 	stw	r21,0(sp)
40016c20:	dcc00115 	stw	r19,4(sp)
40016c24:	dcc01c15 	stw	r19,112(sp)
40016c28:	d8c01b15 	stw	r3,108(sp)
40016c2c:	d811883a 	mov	r8,sp
40016c30:	42000204 	addi	r8,r8,8
40016c34:	a2c0010c 	andi	r11,r20,4
40016c38:	583fe426 	beq	r11,zero,40016bcc <__alt_data_end+0xc0016bcc>
40016c3c:	8ca7c83a 	sub	r19,r17,r18
40016c40:	04ffe20e 	bge	zero,r19,40016bcc <__alt_data_end+0xc0016bcc>
40016c44:	01c00404 	movi	r7,16
40016c48:	3cffcc0e 	bge	r7,r19,40016b7c <__alt_data_end+0xc0016b7c>
40016c4c:	029000b4 	movhi	r10,16386
40016c50:	52aa9804 	addi	r10,r10,-21920
40016c54:	d9001b17 	ldw	r4,108(sp)
40016c58:	da802415 	stw	r10,144(sp)
40016c5c:	382b883a 	mov	r21,r7
40016c60:	050001c4 	movi	r20,7
40016c64:	df002017 	ldw	fp,128(sp)
40016c68:	00000506 	br	40016c80 <___vfiprintf_internal_r+0xdd8>
40016c6c:	21400084 	addi	r5,r4,2
40016c70:	42000204 	addi	r8,r8,8
40016c74:	1809883a 	mov	r4,r3
40016c78:	9cfffc04 	addi	r19,r19,-16
40016c7c:	acffc40e 	bge	r21,r19,40016b90 <__alt_data_end+0xc0016b90>
40016c80:	10800404 	addi	r2,r2,16
40016c84:	20c00044 	addi	r3,r4,1
40016c88:	45800015 	stw	r22,0(r8)
40016c8c:	45400115 	stw	r21,4(r8)
40016c90:	d8801c15 	stw	r2,112(sp)
40016c94:	d8c01b15 	stw	r3,108(sp)
40016c98:	a0fff40e 	bge	r20,r3,40016c6c <__alt_data_end+0xc0016c6c>
40016c9c:	1000041e 	bne	r2,zero,40016cb0 <___vfiprintf_internal_r+0xe08>
40016ca0:	01400044 	movi	r5,1
40016ca4:	0009883a 	mov	r4,zero
40016ca8:	d811883a 	mov	r8,sp
40016cac:	003ff206 	br	40016c78 <__alt_data_end+0xc0016c78>
40016cb0:	d9402117 	ldw	r5,132(sp)
40016cb4:	d9801a04 	addi	r6,sp,104
40016cb8:	e009883a 	mov	r4,fp
40016cbc:	0015d940 	call	40015d94 <__sprint_r.part.0>
40016cc0:	103fcd1e 	bne	r2,zero,40016bf8 <__alt_data_end+0xc0016bf8>
40016cc4:	d9001b17 	ldw	r4,108(sp)
40016cc8:	d8801c17 	ldw	r2,112(sp)
40016ccc:	d811883a 	mov	r8,sp
40016cd0:	21400044 	addi	r5,r4,1
40016cd4:	003fe806 	br	40016c78 <__alt_data_end+0xc0016c78>
40016cd8:	d9402117 	ldw	r5,132(sp)
40016cdc:	d9002017 	ldw	r4,128(sp)
40016ce0:	d9801a04 	addi	r6,sp,104
40016ce4:	d9c02b15 	stw	r7,172(sp)
40016ce8:	db402a15 	stw	r13,168(sp)
40016cec:	0015d940 	call	40015d94 <__sprint_r.part.0>
40016cf0:	d9c02b17 	ldw	r7,172(sp)
40016cf4:	db402a17 	ldw	r13,168(sp)
40016cf8:	103fbf1e 	bne	r2,zero,40016bf8 <__alt_data_end+0xc0016bf8>
40016cfc:	d9401b17 	ldw	r5,108(sp)
40016d00:	d8801c17 	ldw	r2,112(sp)
40016d04:	d811883a 	mov	r8,sp
40016d08:	29800044 	addi	r6,r5,1
40016d0c:	003dc406 	br	40016420 <__alt_data_end+0xc0016420>
40016d10:	1000d21e 	bne	r2,zero,4001705c <___vfiprintf_internal_r+0x11b4>
40016d14:	d8c01d87 	ldb	r3,118(sp)
40016d18:	18009526 	beq	r3,zero,40016f70 <___vfiprintf_internal_r+0x10c8>
40016d1c:	00800044 	movi	r2,1
40016d20:	d8c01d84 	addi	r3,sp,118
40016d24:	1009883a 	mov	r4,r2
40016d28:	d8c00015 	stw	r3,0(sp)
40016d2c:	d8800115 	stw	r2,4(sp)
40016d30:	d811883a 	mov	r8,sp
40016d34:	200b883a 	mov	r5,r4
40016d38:	42000204 	addi	r8,r8,8
40016d3c:	21000044 	addi	r4,r4,1
40016d40:	003d9706 	br	400163a0 <__alt_data_end+0xc00163a0>
40016d44:	d9001d04 	addi	r4,sp,116
40016d48:	00800084 	movi	r2,2
40016d4c:	d9000015 	stw	r4,0(sp)
40016d50:	d8800115 	stw	r2,4(sp)
40016d54:	1809883a 	mov	r4,r3
40016d58:	d811883a 	mov	r8,sp
40016d5c:	200b883a 	mov	r5,r4
40016d60:	42000204 	addi	r8,r8,8
40016d64:	21000044 	addi	r4,r4,1
40016d68:	003f4e06 	br	40016aa4 <__alt_data_end+0xc0016aa4>
40016d6c:	d8001d85 	stb	zero,118(sp)
40016d70:	48005016 	blt	r9,zero,40016eb4 <___vfiprintf_internal_r+0x100c>
40016d74:	00ffdfc4 	movi	r3,-129
40016d78:	94c4b03a 	or	r2,r18,r19
40016d7c:	a0e8703a 	and	r20,r20,r3
40016d80:	103d4426 	beq	r2,zero,40016294 <__alt_data_end+0xc0016294>
40016d84:	0039883a 	mov	fp,zero
40016d88:	d9002617 	ldw	r4,152(sp)
40016d8c:	dd401a04 	addi	r21,sp,104
40016d90:	908003cc 	andi	r2,r18,15
40016d94:	9806973a 	slli	r3,r19,28
40016d98:	2085883a 	add	r2,r4,r2
40016d9c:	9024d13a 	srli	r18,r18,4
40016da0:	10800003 	ldbu	r2,0(r2)
40016da4:	9826d13a 	srli	r19,r19,4
40016da8:	ad7fffc4 	addi	r21,r21,-1
40016dac:	1ca4b03a 	or	r18,r3,r18
40016db0:	a8800005 	stb	r2,0(r21)
40016db4:	94c4b03a 	or	r2,r18,r19
40016db8:	103ff51e 	bne	r2,zero,40016d90 <__alt_data_end+0xc0016d90>
40016dbc:	003e5906 	br	40016724 <__alt_data_end+0xc0016724>
40016dc0:	d9402117 	ldw	r5,132(sp)
40016dc4:	d9002017 	ldw	r4,128(sp)
40016dc8:	d9801a04 	addi	r6,sp,104
40016dcc:	0015d940 	call	40015d94 <__sprint_r.part.0>
40016dd0:	103f891e 	bne	r2,zero,40016bf8 <__alt_data_end+0xc0016bf8>
40016dd4:	d8801c17 	ldw	r2,112(sp)
40016dd8:	d811883a 	mov	r8,sp
40016ddc:	003f9506 	br	40016c34 <__alt_data_end+0xc0016c34>
40016de0:	d9402117 	ldw	r5,132(sp)
40016de4:	d9002017 	ldw	r4,128(sp)
40016de8:	d9801a04 	addi	r6,sp,104
40016dec:	0015d940 	call	40015d94 <__sprint_r.part.0>
40016df0:	103f811e 	bne	r2,zero,40016bf8 <__alt_data_end+0xc0016bf8>
40016df4:	d811883a 	mov	r8,sp
40016df8:	003ced06 	br	400161b0 <__alt_data_end+0xc00161b0>
40016dfc:	d9402117 	ldw	r5,132(sp)
40016e00:	d9002017 	ldw	r4,128(sp)
40016e04:	d9801a04 	addi	r6,sp,104
40016e08:	da402c15 	stw	r9,176(sp)
40016e0c:	db802a15 	stw	r14,168(sp)
40016e10:	0015d940 	call	40015d94 <__sprint_r.part.0>
40016e14:	da402c17 	ldw	r9,176(sp)
40016e18:	db802a17 	ldw	r14,168(sp)
40016e1c:	103f761e 	bne	r2,zero,40016bf8 <__alt_data_end+0xc0016bf8>
40016e20:	d9401b17 	ldw	r5,108(sp)
40016e24:	d8801c17 	ldw	r2,112(sp)
40016e28:	d811883a 	mov	r8,sp
40016e2c:	29000044 	addi	r4,r5,1
40016e30:	003d5b06 	br	400163a0 <__alt_data_end+0xc00163a0>
40016e34:	d9402117 	ldw	r5,132(sp)
40016e38:	d9002017 	ldw	r4,128(sp)
40016e3c:	d9801a04 	addi	r6,sp,104
40016e40:	da402c15 	stw	r9,176(sp)
40016e44:	0015d940 	call	40015d94 <__sprint_r.part.0>
40016e48:	da402c17 	ldw	r9,176(sp)
40016e4c:	103f6a1e 	bne	r2,zero,40016bf8 <__alt_data_end+0xc0016bf8>
40016e50:	d9401b17 	ldw	r5,108(sp)
40016e54:	d8801c17 	ldw	r2,112(sp)
40016e58:	d811883a 	mov	r8,sp
40016e5c:	29000044 	addi	r4,r5,1
40016e60:	003f1006 	br	40016aa4 <__alt_data_end+0xc0016aa4>
40016e64:	1000c31e 	bne	r2,zero,40017174 <___vfiprintf_internal_r+0x12cc>
40016e68:	01000044 	movi	r4,1
40016e6c:	000b883a 	mov	r5,zero
40016e70:	d811883a 	mov	r8,sp
40016e74:	003f0d06 	br	40016aac <__alt_data_end+0xc0016aac>
40016e78:	d9402117 	ldw	r5,132(sp)
40016e7c:	d9002017 	ldw	r4,128(sp)
40016e80:	d9801a04 	addi	r6,sp,104
40016e84:	0015d940 	call	40015d94 <__sprint_r.part.0>
40016e88:	103f5b1e 	bne	r2,zero,40016bf8 <__alt_data_end+0xc0016bf8>
40016e8c:	d9001b17 	ldw	r4,108(sp)
40016e90:	d8801c17 	ldw	r2,112(sp)
40016e94:	d811883a 	mov	r8,sp
40016e98:	21000044 	addi	r4,r4,1
40016e9c:	003d8006 	br	400164a0 <__alt_data_end+0xc00164a0>
40016ea0:	011000b4 	movhi	r4,16386
40016ea4:	212a3404 	addi	r4,r4,-22320
40016ea8:	d9002615 	stw	r4,152(sp)
40016eac:	d8c02215 	stw	r3,136(sp)
40016eb0:	1029883a 	mov	r20,r2
40016eb4:	94c4b03a 	or	r2,r18,r19
40016eb8:	103fb21e 	bne	r2,zero,40016d84 <__alt_data_end+0xc0016d84>
40016ebc:	0039883a 	mov	fp,zero
40016ec0:	00800084 	movi	r2,2
40016ec4:	003e6b06 	br	40016874 <__alt_data_end+0xc0016874>
40016ec8:	da802217 	ldw	r10,136(sp)
40016ecc:	d8001d85 	stb	zero,118(sp)
40016ed0:	0027883a 	mov	r19,zero
40016ed4:	50800104 	addi	r2,r10,4
40016ed8:	54800017 	ldw	r18,0(r10)
40016edc:	483e6016 	blt	r9,zero,40016860 <__alt_data_end+0xc0016860>
40016ee0:	00ffdfc4 	movi	r3,-129
40016ee4:	d8802215 	stw	r2,136(sp)
40016ee8:	a0e8703a 	and	r20,r20,r3
40016eec:	0039883a 	mov	fp,zero
40016ef0:	903ebb26 	beq	r18,zero,400169e0 <__alt_data_end+0xc00169e0>
40016ef4:	00800244 	movi	r2,9
40016ef8:	14bdee36 	bltu	r2,r18,400166b4 <__alt_data_end+0xc00166b4>
40016efc:	003eba06 	br	400169e8 <__alt_data_end+0xc00169e8>
40016f00:	00800c04 	movi	r2,48
40016f04:	d8c01d45 	stb	r3,117(sp)
40016f08:	d8801d05 	stb	r2,116(sp)
40016f0c:	d8001d85 	stb	zero,118(sp)
40016f10:	a0c00094 	ori	r3,r20,2
40016f14:	4800a916 	blt	r9,zero,400171bc <___vfiprintf_internal_r+0x1314>
40016f18:	00bfdfc4 	movi	r2,-129
40016f1c:	a096703a 	and	r11,r20,r2
40016f20:	5d000094 	ori	r20,r11,2
40016f24:	0039883a 	mov	fp,zero
40016f28:	003f9706 	br	40016d88 <__alt_data_end+0xc0016d88>
40016f2c:	8025883a 	mov	r18,r16
40016f30:	003c2e06 	br	40015fec <__alt_data_end+0xc0015fec>
40016f34:	009000b4 	movhi	r2,16386
40016f38:	10aa3404 	addi	r2,r2,-22320
40016f3c:	0039883a 	mov	fp,zero
40016f40:	d8802615 	stw	r2,152(sp)
40016f44:	003f9006 	br	40016d88 <__alt_data_end+0xc0016d88>
40016f48:	04a5c83a 	sub	r18,zero,r18
40016f4c:	07000b44 	movi	fp,45
40016f50:	9004c03a 	cmpne	r2,r18,zero
40016f54:	04e7c83a 	sub	r19,zero,r19
40016f58:	df001d85 	stb	fp,118(sp)
40016f5c:	98a7c83a 	sub	r19,r19,r2
40016f60:	48009f16 	blt	r9,zero,400171e0 <___vfiprintf_internal_r+0x1338>
40016f64:	00bfdfc4 	movi	r2,-129
40016f68:	a0a8703a 	and	r20,r20,r2
40016f6c:	003dd006 	br	400166b0 <__alt_data_end+0xc00166b0>
40016f70:	70004c26 	beq	r14,zero,400170a4 <___vfiprintf_internal_r+0x11fc>
40016f74:	00800084 	movi	r2,2
40016f78:	d8c01d04 	addi	r3,sp,116
40016f7c:	d8c00015 	stw	r3,0(sp)
40016f80:	d8800115 	stw	r2,4(sp)
40016f84:	01000044 	movi	r4,1
40016f88:	d811883a 	mov	r8,sp
40016f8c:	003f7306 	br	40016d5c <__alt_data_end+0xc0016d5c>
40016f90:	a080100c 	andi	r2,r20,64
40016f94:	da802217 	ldw	r10,136(sp)
40016f98:	103e0626 	beq	r2,zero,400167b4 <__alt_data_end+0xc00167b4>
40016f9c:	5480000f 	ldh	r18,0(r10)
40016fa0:	52800104 	addi	r10,r10,4
40016fa4:	da802215 	stw	r10,136(sp)
40016fa8:	9027d7fa 	srai	r19,r18,31
40016fac:	9805883a 	mov	r2,r19
40016fb0:	003db806 	br	40016694 <__alt_data_end+0xc0016694>
40016fb4:	a080040c 	andi	r2,r20,16
40016fb8:	1000091e 	bne	r2,zero,40016fe0 <___vfiprintf_internal_r+0x1138>
40016fbc:	a2c0100c 	andi	r11,r20,64
40016fc0:	58000726 	beq	r11,zero,40016fe0 <___vfiprintf_internal_r+0x1138>
40016fc4:	da802217 	ldw	r10,136(sp)
40016fc8:	50800017 	ldw	r2,0(r10)
40016fcc:	52800104 	addi	r10,r10,4
40016fd0:	da802215 	stw	r10,136(sp)
40016fd4:	da802317 	ldw	r10,140(sp)
40016fd8:	1280000d 	sth	r10,0(r2)
40016fdc:	003be706 	br	40015f7c <__alt_data_end+0xc0015f7c>
40016fe0:	da802217 	ldw	r10,136(sp)
40016fe4:	50800017 	ldw	r2,0(r10)
40016fe8:	52800104 	addi	r10,r10,4
40016fec:	da802215 	stw	r10,136(sp)
40016ff0:	da802317 	ldw	r10,140(sp)
40016ff4:	12800015 	stw	r10,0(r2)
40016ff8:	003be006 	br	40015f7c <__alt_data_end+0xc0015f7c>
40016ffc:	a080100c 	andi	r2,r20,64
40017000:	da802217 	ldw	r10,136(sp)
40017004:	10003026 	beq	r2,zero,400170c8 <___vfiprintf_internal_r+0x1220>
40017008:	5480000b 	ldhu	r18,0(r10)
4001700c:	52800104 	addi	r10,r10,4
40017010:	0027883a 	mov	r19,zero
40017014:	da802215 	stw	r10,136(sp)
40017018:	003d8006 	br	4001661c <__alt_data_end+0xc001661c>
4001701c:	80c00007 	ldb	r3,0(r16)
40017020:	003c0006 	br	40016024 <__alt_data_end+0xc0016024>
40017024:	a080100c 	andi	r2,r20,64
40017028:	d8001d85 	stb	zero,118(sp)
4001702c:	da802217 	ldw	r10,136(sp)
40017030:	1000201e 	bne	r2,zero,400170b4 <___vfiprintf_internal_r+0x120c>
40017034:	50800104 	addi	r2,r10,4
40017038:	54800017 	ldw	r18,0(r10)
4001703c:	0027883a 	mov	r19,zero
40017040:	483def0e 	bge	r9,zero,40016800 <__alt_data_end+0xc0016800>
40017044:	94c6b03a 	or	r3,r18,r19
40017048:	d8802215 	stw	r2,136(sp)
4001704c:	183d4e1e 	bne	r3,zero,40016588 <__alt_data_end+0xc0016588>
40017050:	0039883a 	mov	fp,zero
40017054:	0005883a 	mov	r2,zero
40017058:	003e0606 	br	40016874 <__alt_data_end+0xc0016874>
4001705c:	d9402117 	ldw	r5,132(sp)
40017060:	d9002017 	ldw	r4,128(sp)
40017064:	d9801a04 	addi	r6,sp,104
40017068:	da402c15 	stw	r9,176(sp)
4001706c:	db802a15 	stw	r14,168(sp)
40017070:	0015d940 	call	40015d94 <__sprint_r.part.0>
40017074:	da402c17 	ldw	r9,176(sp)
40017078:	db802a17 	ldw	r14,168(sp)
4001707c:	103ede1e 	bne	r2,zero,40016bf8 <__alt_data_end+0xc0016bf8>
40017080:	d9401b17 	ldw	r5,108(sp)
40017084:	d8801c17 	ldw	r2,112(sp)
40017088:	d811883a 	mov	r8,sp
4001708c:	29000044 	addi	r4,r5,1
40017090:	003e7406 	br	40016a64 <__alt_data_end+0xc0016a64>
40017094:	00bfffc4 	movi	r2,-1
40017098:	003c5806 	br	400161fc <__alt_data_end+0xc00161fc>
4001709c:	d811883a 	mov	r8,sp
400170a0:	003ee806 	br	40016c44 <__alt_data_end+0xc0016c44>
400170a4:	000b883a 	mov	r5,zero
400170a8:	01000044 	movi	r4,1
400170ac:	d811883a 	mov	r8,sp
400170b0:	003e7c06 	br	40016aa4 <__alt_data_end+0xc0016aa4>
400170b4:	50800104 	addi	r2,r10,4
400170b8:	5480000b 	ldhu	r18,0(r10)
400170bc:	0027883a 	mov	r19,zero
400170c0:	483dcf0e 	bge	r9,zero,40016800 <__alt_data_end+0xc0016800>
400170c4:	003fdf06 	br	40017044 <__alt_data_end+0xc0017044>
400170c8:	54800017 	ldw	r18,0(r10)
400170cc:	52800104 	addi	r10,r10,4
400170d0:	0027883a 	mov	r19,zero
400170d4:	da802215 	stw	r10,136(sp)
400170d8:	003d5006 	br	4001661c <__alt_data_end+0xc001661c>
400170dc:	50800104 	addi	r2,r10,4
400170e0:	5480000b 	ldhu	r18,0(r10)
400170e4:	0027883a 	mov	r19,zero
400170e8:	483f7d0e 	bge	r9,zero,40016ee0 <__alt_data_end+0xc0016ee0>
400170ec:	003ddc06 	br	40016860 <__alt_data_end+0xc0016860>
400170f0:	d8c02215 	stw	r3,136(sp)
400170f4:	0039883a 	mov	fp,zero
400170f8:	003ddb06 	br	40016868 <__alt_data_end+0xc0016868>
400170fc:	029000b4 	movhi	r10,16386
40017100:	52aa9404 	addi	r10,r10,-21936
40017104:	da802415 	stw	r10,144(sp)
40017108:	003e8306 	br	40016b18 <__alt_data_end+0xc0016b18>
4001710c:	d8801c17 	ldw	r2,112(sp)
40017110:	dd002117 	ldw	r20,132(sp)
40017114:	103eb926 	beq	r2,zero,40016bfc <__alt_data_end+0xc0016bfc>
40017118:	d9002017 	ldw	r4,128(sp)
4001711c:	d9801a04 	addi	r6,sp,104
40017120:	a00b883a 	mov	r5,r20
40017124:	0015d940 	call	40015d94 <__sprint_r.part.0>
40017128:	003eb406 	br	40016bfc <__alt_data_end+0xc0016bfc>
4001712c:	80c00043 	ldbu	r3,1(r16)
40017130:	a5000814 	ori	r20,r20,32
40017134:	84000044 	addi	r16,r16,1
40017138:	18c03fcc 	andi	r3,r3,255
4001713c:	18c0201c 	xori	r3,r3,128
40017140:	18ffe004 	addi	r3,r3,-128
40017144:	003bb706 	br	40016024 <__alt_data_end+0xc0016024>
40017148:	a809883a 	mov	r4,r21
4001714c:	d8c02a15 	stw	r3,168(sp)
40017150:	da002b15 	stw	r8,172(sp)
40017154:	000f1640 	call	4000f164 <strlen>
40017158:	d8c02a17 	ldw	r3,168(sp)
4001715c:	1027883a 	mov	r19,r2
40017160:	df001d83 	ldbu	fp,118(sp)
40017164:	d8c02215 	stw	r3,136(sp)
40017168:	0013883a 	mov	r9,zero
4001716c:	da002b17 	ldw	r8,172(sp)
40017170:	003c4d06 	br	400162a8 <__alt_data_end+0xc00162a8>
40017174:	d9402117 	ldw	r5,132(sp)
40017178:	d9002017 	ldw	r4,128(sp)
4001717c:	d9801a04 	addi	r6,sp,104
40017180:	da402c15 	stw	r9,176(sp)
40017184:	0015d940 	call	40015d94 <__sprint_r.part.0>
40017188:	da402c17 	ldw	r9,176(sp)
4001718c:	103e9a1e 	bne	r2,zero,40016bf8 <__alt_data_end+0xc0016bf8>
40017190:	d9401b17 	ldw	r5,108(sp)
40017194:	d8801c17 	ldw	r2,112(sp)
40017198:	d811883a 	mov	r8,sp
4001719c:	29000044 	addi	r4,r5,1
400171a0:	003e4206 	br	40016aac <__alt_data_end+0xc0016aac>
400171a4:	d9401b17 	ldw	r5,108(sp)
400171a8:	011000b4 	movhi	r4,16386
400171ac:	212a9804 	addi	r4,r4,-21920
400171b0:	d9002415 	stw	r4,144(sp)
400171b4:	29400044 	addi	r5,r5,1
400171b8:	003c6d06 	br	40016370 <__alt_data_end+0xc0016370>
400171bc:	0039883a 	mov	fp,zero
400171c0:	00800084 	movi	r2,2
400171c4:	10803fcc 	andi	r2,r2,255
400171c8:	01000044 	movi	r4,1
400171cc:	11001e26 	beq	r2,r4,40017248 <___vfiprintf_internal_r+0x13a0>
400171d0:	01000084 	movi	r4,2
400171d4:	11001e1e 	bne	r2,r4,40017250 <___vfiprintf_internal_r+0x13a8>
400171d8:	1829883a 	mov	r20,r3
400171dc:	003eea06 	br	40016d88 <__alt_data_end+0xc0016d88>
400171e0:	a007883a 	mov	r3,r20
400171e4:	00800044 	movi	r2,1
400171e8:	003ff606 	br	400171c4 <__alt_data_end+0xc00171c4>
400171ec:	00800184 	movi	r2,6
400171f0:	1240012e 	bgeu	r2,r9,400171f8 <___vfiprintf_internal_r+0x1350>
400171f4:	1013883a 	mov	r9,r2
400171f8:	4827883a 	mov	r19,r9
400171fc:	4825883a 	mov	r18,r9
40017200:	48001516 	blt	r9,zero,40017258 <___vfiprintf_internal_r+0x13b0>
40017204:	055000b4 	movhi	r21,16386
40017208:	d8c02215 	stw	r3,136(sp)
4001720c:	ad6a3904 	addi	r21,r21,-22300
40017210:	003d1406 	br	40016664 <__alt_data_end+0xc0016664>
40017214:	029000b4 	movhi	r10,16386
40017218:	52aa9404 	addi	r10,r10,-21936
4001721c:	da802415 	stw	r10,144(sp)
40017220:	200d883a 	mov	r6,r4
40017224:	003c9106 	br	4001646c <__alt_data_end+0xc001646c>
40017228:	5021883a 	mov	r16,r10
4001722c:	0013883a 	mov	r9,zero
40017230:	003b7d06 	br	40016028 <__alt_data_end+0xc0016028>
40017234:	4827883a 	mov	r19,r9
40017238:	df001d83 	ldbu	fp,118(sp)
4001723c:	d8c02215 	stw	r3,136(sp)
40017240:	0013883a 	mov	r9,zero
40017244:	003c1806 	br	400162a8 <__alt_data_end+0xc00162a8>
40017248:	1829883a 	mov	r20,r3
4001724c:	003d1806 	br	400166b0 <__alt_data_end+0xc00166b0>
40017250:	1829883a 	mov	r20,r3
40017254:	003ccd06 	br	4001658c <__alt_data_end+0xc001658c>
40017258:	0025883a 	mov	r18,zero
4001725c:	003fe906 	br	40017204 <__alt_data_end+0xc0017204>
40017260:	d8802217 	ldw	r2,136(sp)
40017264:	80c00043 	ldbu	r3,1(r16)
40017268:	5021883a 	mov	r16,r10
4001726c:	12400017 	ldw	r9,0(r2)
40017270:	10800104 	addi	r2,r2,4
40017274:	d8802215 	stw	r2,136(sp)
40017278:	483faf0e 	bge	r9,zero,40017138 <__alt_data_end+0xc0017138>
4001727c:	18c03fcc 	andi	r3,r3,255
40017280:	18c0201c 	xori	r3,r3,128
40017284:	027fffc4 	movi	r9,-1
40017288:	18ffe004 	addi	r3,r3,-128
4001728c:	003b6506 	br	40016024 <__alt_data_end+0xc0016024>
40017290:	d9c01d85 	stb	r7,118(sp)
40017294:	003ca006 	br	40016518 <__alt_data_end+0xc0016518>
40017298:	d9c01d85 	stb	r7,118(sp)
4001729c:	003cad06 	br	40016554 <__alt_data_end+0xc0016554>
400172a0:	d9c01d85 	stb	r7,118(sp)
400172a4:	003d7d06 	br	4001689c <__alt_data_end+0xc001689c>
400172a8:	d9c01d85 	stb	r7,118(sp)
400172ac:	003d5f06 	br	4001682c <__alt_data_end+0xc001682c>
400172b0:	a080004c 	andi	r2,r20,1
400172b4:	0039883a 	mov	fp,zero
400172b8:	10000526 	beq	r2,zero,400172d0 <___vfiprintf_internal_r+0x1428>
400172bc:	00800c04 	movi	r2,48
400172c0:	d88019c5 	stb	r2,103(sp)
400172c4:	dcc02717 	ldw	r19,156(sp)
400172c8:	dd4019c4 	addi	r21,sp,103
400172cc:	003bf606 	br	400162a8 <__alt_data_end+0xc00162a8>
400172d0:	0027883a 	mov	r19,zero
400172d4:	dd401a04 	addi	r21,sp,104
400172d8:	003bf306 	br	400162a8 <__alt_data_end+0xc00162a8>
400172dc:	d9c01d85 	stb	r7,118(sp)
400172e0:	003dc806 	br	40016a04 <__alt_data_end+0xc0016a04>
400172e4:	d9c01d85 	stb	r7,118(sp)
400172e8:	003d3a06 	br	400167d4 <__alt_data_end+0xc00167d4>
400172ec:	d9c01d85 	stb	r7,118(sp)
400172f0:	003d2a06 	br	4001679c <__alt_data_end+0xc001679c>
400172f4:	d9c01d85 	stb	r7,118(sp)
400172f8:	003cde06 	br	40016674 <__alt_data_end+0xc0016674>
400172fc:	d9c01d85 	stb	r7,118(sp)
40017300:	003cbc06 	br	400165f4 <__alt_data_end+0xc00165f4>

40017304 <__vfiprintf_internal>:
40017304:	009000b4 	movhi	r2,16386
40017308:	10ad4704 	addi	r2,r2,-19172
4001730c:	300f883a 	mov	r7,r6
40017310:	280d883a 	mov	r6,r5
40017314:	200b883a 	mov	r5,r4
40017318:	11000017 	ldw	r4,0(r2)
4001731c:	0015ea81 	jmpi	40015ea8 <___vfiprintf_internal_r>

40017320 <__sbprintf>:
40017320:	2880030b 	ldhu	r2,12(r5)
40017324:	2ac01917 	ldw	r11,100(r5)
40017328:	2a80038b 	ldhu	r10,14(r5)
4001732c:	2a400717 	ldw	r9,28(r5)
40017330:	2a000917 	ldw	r8,36(r5)
40017334:	defee204 	addi	sp,sp,-1144
40017338:	00c10004 	movi	r3,1024
4001733c:	dc011a15 	stw	r16,1128(sp)
40017340:	10bfff4c 	andi	r2,r2,65533
40017344:	2821883a 	mov	r16,r5
40017348:	d8cb883a 	add	r5,sp,r3
4001734c:	dc811c15 	stw	r18,1136(sp)
40017350:	dc411b15 	stw	r17,1132(sp)
40017354:	dfc11d15 	stw	ra,1140(sp)
40017358:	2025883a 	mov	r18,r4
4001735c:	d881030d 	sth	r2,1036(sp)
40017360:	dac11915 	stw	r11,1124(sp)
40017364:	da81038d 	sth	r10,1038(sp)
40017368:	da410715 	stw	r9,1052(sp)
4001736c:	da010915 	stw	r8,1060(sp)
40017370:	dec10015 	stw	sp,1024(sp)
40017374:	dec10415 	stw	sp,1040(sp)
40017378:	d8c10215 	stw	r3,1032(sp)
4001737c:	d8c10515 	stw	r3,1044(sp)
40017380:	d8010615 	stw	zero,1048(sp)
40017384:	0015ea80 	call	40015ea8 <___vfiprintf_internal_r>
40017388:	1023883a 	mov	r17,r2
4001738c:	10000416 	blt	r2,zero,400173a0 <__sbprintf+0x80>
40017390:	d9410004 	addi	r5,sp,1024
40017394:	9009883a 	mov	r4,r18
40017398:	00130c40 	call	400130c4 <_fflush_r>
4001739c:	10000d1e 	bne	r2,zero,400173d4 <__sbprintf+0xb4>
400173a0:	d881030b 	ldhu	r2,1036(sp)
400173a4:	1080100c 	andi	r2,r2,64
400173a8:	10000326 	beq	r2,zero,400173b8 <__sbprintf+0x98>
400173ac:	8080030b 	ldhu	r2,12(r16)
400173b0:	10801014 	ori	r2,r2,64
400173b4:	8080030d 	sth	r2,12(r16)
400173b8:	8805883a 	mov	r2,r17
400173bc:	dfc11d17 	ldw	ra,1140(sp)
400173c0:	dc811c17 	ldw	r18,1136(sp)
400173c4:	dc411b17 	ldw	r17,1132(sp)
400173c8:	dc011a17 	ldw	r16,1128(sp)
400173cc:	dec11e04 	addi	sp,sp,1144
400173d0:	f800283a 	ret
400173d4:	047fffc4 	movi	r17,-1
400173d8:	003ff106 	br	400173a0 <__alt_data_end+0xc00173a0>

400173dc <__swbuf_r>:
400173dc:	defffb04 	addi	sp,sp,-20
400173e0:	dcc00315 	stw	r19,12(sp)
400173e4:	dc800215 	stw	r18,8(sp)
400173e8:	dc000015 	stw	r16,0(sp)
400173ec:	dfc00415 	stw	ra,16(sp)
400173f0:	dc400115 	stw	r17,4(sp)
400173f4:	2025883a 	mov	r18,r4
400173f8:	2827883a 	mov	r19,r5
400173fc:	3021883a 	mov	r16,r6
40017400:	20000226 	beq	r4,zero,4001740c <__swbuf_r+0x30>
40017404:	20800e17 	ldw	r2,56(r4)
40017408:	10004226 	beq	r2,zero,40017514 <__swbuf_r+0x138>
4001740c:	80800617 	ldw	r2,24(r16)
40017410:	8100030b 	ldhu	r4,12(r16)
40017414:	80800215 	stw	r2,8(r16)
40017418:	2080020c 	andi	r2,r4,8
4001741c:	10003626 	beq	r2,zero,400174f8 <__swbuf_r+0x11c>
40017420:	80c00417 	ldw	r3,16(r16)
40017424:	18003426 	beq	r3,zero,400174f8 <__swbuf_r+0x11c>
40017428:	2088000c 	andi	r2,r4,8192
4001742c:	9c403fcc 	andi	r17,r19,255
40017430:	10001a26 	beq	r2,zero,4001749c <__swbuf_r+0xc0>
40017434:	80800017 	ldw	r2,0(r16)
40017438:	81000517 	ldw	r4,20(r16)
4001743c:	10c7c83a 	sub	r3,r2,r3
40017440:	1900200e 	bge	r3,r4,400174c4 <__swbuf_r+0xe8>
40017444:	18c00044 	addi	r3,r3,1
40017448:	81000217 	ldw	r4,8(r16)
4001744c:	11400044 	addi	r5,r2,1
40017450:	81400015 	stw	r5,0(r16)
40017454:	213fffc4 	addi	r4,r4,-1
40017458:	81000215 	stw	r4,8(r16)
4001745c:	14c00005 	stb	r19,0(r2)
40017460:	80800517 	ldw	r2,20(r16)
40017464:	10c01e26 	beq	r2,r3,400174e0 <__swbuf_r+0x104>
40017468:	8080030b 	ldhu	r2,12(r16)
4001746c:	1080004c 	andi	r2,r2,1
40017470:	10000226 	beq	r2,zero,4001747c <__swbuf_r+0xa0>
40017474:	00800284 	movi	r2,10
40017478:	88801926 	beq	r17,r2,400174e0 <__swbuf_r+0x104>
4001747c:	8805883a 	mov	r2,r17
40017480:	dfc00417 	ldw	ra,16(sp)
40017484:	dcc00317 	ldw	r19,12(sp)
40017488:	dc800217 	ldw	r18,8(sp)
4001748c:	dc400117 	ldw	r17,4(sp)
40017490:	dc000017 	ldw	r16,0(sp)
40017494:	dec00504 	addi	sp,sp,20
40017498:	f800283a 	ret
4001749c:	81401917 	ldw	r5,100(r16)
400174a0:	00b7ffc4 	movi	r2,-8193
400174a4:	21080014 	ori	r4,r4,8192
400174a8:	2884703a 	and	r2,r5,r2
400174ac:	80801915 	stw	r2,100(r16)
400174b0:	80800017 	ldw	r2,0(r16)
400174b4:	8100030d 	sth	r4,12(r16)
400174b8:	81000517 	ldw	r4,20(r16)
400174bc:	10c7c83a 	sub	r3,r2,r3
400174c0:	193fe016 	blt	r3,r4,40017444 <__alt_data_end+0xc0017444>
400174c4:	800b883a 	mov	r5,r16
400174c8:	9009883a 	mov	r4,r18
400174cc:	00130c40 	call	400130c4 <_fflush_r>
400174d0:	1000071e 	bne	r2,zero,400174f0 <__swbuf_r+0x114>
400174d4:	80800017 	ldw	r2,0(r16)
400174d8:	00c00044 	movi	r3,1
400174dc:	003fda06 	br	40017448 <__alt_data_end+0xc0017448>
400174e0:	800b883a 	mov	r5,r16
400174e4:	9009883a 	mov	r4,r18
400174e8:	00130c40 	call	400130c4 <_fflush_r>
400174ec:	103fe326 	beq	r2,zero,4001747c <__alt_data_end+0xc001747c>
400174f0:	00bfffc4 	movi	r2,-1
400174f4:	003fe206 	br	40017480 <__alt_data_end+0xc0017480>
400174f8:	800b883a 	mov	r5,r16
400174fc:	9009883a 	mov	r4,r18
40017500:	00114cc0 	call	400114cc <__swsetup_r>
40017504:	103ffa1e 	bne	r2,zero,400174f0 <__alt_data_end+0xc00174f0>
40017508:	8100030b 	ldhu	r4,12(r16)
4001750c:	80c00417 	ldw	r3,16(r16)
40017510:	003fc506 	br	40017428 <__alt_data_end+0xc0017428>
40017514:	00134a00 	call	400134a0 <__sinit>
40017518:	003fbc06 	br	4001740c <__alt_data_end+0xc001740c>

4001751c <__swbuf>:
4001751c:	009000b4 	movhi	r2,16386
40017520:	10ad4704 	addi	r2,r2,-19172
40017524:	280d883a 	mov	r6,r5
40017528:	200b883a 	mov	r5,r4
4001752c:	11000017 	ldw	r4,0(r2)
40017530:	00173dc1 	jmpi	400173dc <__swbuf_r>

40017534 <_write_r>:
40017534:	defffd04 	addi	sp,sp,-12
40017538:	2805883a 	mov	r2,r5
4001753c:	dc000015 	stw	r16,0(sp)
40017540:	041000b4 	movhi	r16,16386
40017544:	dc400115 	stw	r17,4(sp)
40017548:	300b883a 	mov	r5,r6
4001754c:	84301004 	addi	r16,r16,-16320
40017550:	2023883a 	mov	r17,r4
40017554:	380d883a 	mov	r6,r7
40017558:	1009883a 	mov	r4,r2
4001755c:	dfc00215 	stw	ra,8(sp)
40017560:	80000015 	stw	zero,0(r16)
40017564:	00198580 	call	40019858 <write>
40017568:	00ffffc4 	movi	r3,-1
4001756c:	10c00526 	beq	r2,r3,40017584 <_write_r+0x50>
40017570:	dfc00217 	ldw	ra,8(sp)
40017574:	dc400117 	ldw	r17,4(sp)
40017578:	dc000017 	ldw	r16,0(sp)
4001757c:	dec00304 	addi	sp,sp,12
40017580:	f800283a 	ret
40017584:	80c00017 	ldw	r3,0(r16)
40017588:	183ff926 	beq	r3,zero,40017570 <__alt_data_end+0xc0017570>
4001758c:	88c00015 	stw	r3,0(r17)
40017590:	003ff706 	br	40017570 <__alt_data_end+0xc0017570>

40017594 <_close_r>:
40017594:	defffd04 	addi	sp,sp,-12
40017598:	dc000015 	stw	r16,0(sp)
4001759c:	041000b4 	movhi	r16,16386
400175a0:	dc400115 	stw	r17,4(sp)
400175a4:	84301004 	addi	r16,r16,-16320
400175a8:	2023883a 	mov	r17,r4
400175ac:	2809883a 	mov	r4,r5
400175b0:	dfc00215 	stw	ra,8(sp)
400175b4:	80000015 	stw	zero,0(r16)
400175b8:	00193ac0 	call	400193ac <close>
400175bc:	00ffffc4 	movi	r3,-1
400175c0:	10c00526 	beq	r2,r3,400175d8 <_close_r+0x44>
400175c4:	dfc00217 	ldw	ra,8(sp)
400175c8:	dc400117 	ldw	r17,4(sp)
400175cc:	dc000017 	ldw	r16,0(sp)
400175d0:	dec00304 	addi	sp,sp,12
400175d4:	f800283a 	ret
400175d8:	80c00017 	ldw	r3,0(r16)
400175dc:	183ff926 	beq	r3,zero,400175c4 <__alt_data_end+0xc00175c4>
400175e0:	88c00015 	stw	r3,0(r17)
400175e4:	003ff706 	br	400175c4 <__alt_data_end+0xc00175c4>

400175e8 <_fclose_r>:
400175e8:	28003926 	beq	r5,zero,400176d0 <_fclose_r+0xe8>
400175ec:	defffc04 	addi	sp,sp,-16
400175f0:	dc400115 	stw	r17,4(sp)
400175f4:	dc000015 	stw	r16,0(sp)
400175f8:	dfc00315 	stw	ra,12(sp)
400175fc:	dc800215 	stw	r18,8(sp)
40017600:	2023883a 	mov	r17,r4
40017604:	2821883a 	mov	r16,r5
40017608:	20000226 	beq	r4,zero,40017614 <_fclose_r+0x2c>
4001760c:	20800e17 	ldw	r2,56(r4)
40017610:	10002726 	beq	r2,zero,400176b0 <_fclose_r+0xc8>
40017614:	8080030f 	ldh	r2,12(r16)
40017618:	1000071e 	bne	r2,zero,40017638 <_fclose_r+0x50>
4001761c:	0005883a 	mov	r2,zero
40017620:	dfc00317 	ldw	ra,12(sp)
40017624:	dc800217 	ldw	r18,8(sp)
40017628:	dc400117 	ldw	r17,4(sp)
4001762c:	dc000017 	ldw	r16,0(sp)
40017630:	dec00404 	addi	sp,sp,16
40017634:	f800283a 	ret
40017638:	800b883a 	mov	r5,r16
4001763c:	8809883a 	mov	r4,r17
40017640:	0012ea80 	call	40012ea8 <__sflush_r>
40017644:	1025883a 	mov	r18,r2
40017648:	80800b17 	ldw	r2,44(r16)
4001764c:	10000426 	beq	r2,zero,40017660 <_fclose_r+0x78>
40017650:	81400717 	ldw	r5,28(r16)
40017654:	8809883a 	mov	r4,r17
40017658:	103ee83a 	callr	r2
4001765c:	10001616 	blt	r2,zero,400176b8 <_fclose_r+0xd0>
40017660:	8080030b 	ldhu	r2,12(r16)
40017664:	1080200c 	andi	r2,r2,128
40017668:	1000151e 	bne	r2,zero,400176c0 <_fclose_r+0xd8>
4001766c:	81400c17 	ldw	r5,48(r16)
40017670:	28000526 	beq	r5,zero,40017688 <_fclose_r+0xa0>
40017674:	80801004 	addi	r2,r16,64
40017678:	28800226 	beq	r5,r2,40017684 <_fclose_r+0x9c>
4001767c:	8809883a 	mov	r4,r17
40017680:	00136140 	call	40013614 <_free_r>
40017684:	80000c15 	stw	zero,48(r16)
40017688:	81401117 	ldw	r5,68(r16)
4001768c:	28000326 	beq	r5,zero,4001769c <_fclose_r+0xb4>
40017690:	8809883a 	mov	r4,r17
40017694:	00136140 	call	40013614 <_free_r>
40017698:	80001115 	stw	zero,68(r16)
4001769c:	00134b00 	call	400134b0 <__sfp_lock_acquire>
400176a0:	8000030d 	sth	zero,12(r16)
400176a4:	00134b40 	call	400134b4 <__sfp_lock_release>
400176a8:	9005883a 	mov	r2,r18
400176ac:	003fdc06 	br	40017620 <__alt_data_end+0xc0017620>
400176b0:	00134a00 	call	400134a0 <__sinit>
400176b4:	003fd706 	br	40017614 <__alt_data_end+0xc0017614>
400176b8:	04bfffc4 	movi	r18,-1
400176bc:	003fe806 	br	40017660 <__alt_data_end+0xc0017660>
400176c0:	81400417 	ldw	r5,16(r16)
400176c4:	8809883a 	mov	r4,r17
400176c8:	00136140 	call	40013614 <_free_r>
400176cc:	003fe706 	br	4001766c <__alt_data_end+0xc001766c>
400176d0:	0005883a 	mov	r2,zero
400176d4:	f800283a 	ret

400176d8 <fclose>:
400176d8:	009000b4 	movhi	r2,16386
400176dc:	10ad4704 	addi	r2,r2,-19172
400176e0:	200b883a 	mov	r5,r4
400176e4:	11000017 	ldw	r4,0(r2)
400176e8:	00175e81 	jmpi	400175e8 <_fclose_r>

400176ec <__fputwc>:
400176ec:	defff804 	addi	sp,sp,-32
400176f0:	dcc00415 	stw	r19,16(sp)
400176f4:	dc800315 	stw	r18,12(sp)
400176f8:	dc000115 	stw	r16,4(sp)
400176fc:	dfc00715 	stw	ra,28(sp)
40017700:	dd400615 	stw	r21,24(sp)
40017704:	dd000515 	stw	r20,20(sp)
40017708:	dc400215 	stw	r17,8(sp)
4001770c:	2027883a 	mov	r19,r4
40017710:	2825883a 	mov	r18,r5
40017714:	3021883a 	mov	r16,r6
40017718:	0013ff00 	call	40013ff0 <__locale_mb_cur_max>
4001771c:	00c00044 	movi	r3,1
40017720:	10c03e26 	beq	r2,r3,4001781c <__fputwc+0x130>
40017724:	81c01704 	addi	r7,r16,92
40017728:	900d883a 	mov	r6,r18
4001772c:	d80b883a 	mov	r5,sp
40017730:	9809883a 	mov	r4,r19
40017734:	0017a640 	call	40017a64 <_wcrtomb_r>
40017738:	1029883a 	mov	r20,r2
4001773c:	00bfffc4 	movi	r2,-1
40017740:	a0802026 	beq	r20,r2,400177c4 <__fputwc+0xd8>
40017744:	d9400003 	ldbu	r5,0(sp)
40017748:	a0001c26 	beq	r20,zero,400177bc <__fputwc+0xd0>
4001774c:	0023883a 	mov	r17,zero
40017750:	05400284 	movi	r21,10
40017754:	00000906 	br	4001777c <__fputwc+0x90>
40017758:	80800017 	ldw	r2,0(r16)
4001775c:	11400005 	stb	r5,0(r2)
40017760:	80c00017 	ldw	r3,0(r16)
40017764:	18c00044 	addi	r3,r3,1
40017768:	80c00015 	stw	r3,0(r16)
4001776c:	8c400044 	addi	r17,r17,1
40017770:	dc45883a 	add	r2,sp,r17
40017774:	8d00112e 	bgeu	r17,r20,400177bc <__fputwc+0xd0>
40017778:	11400003 	ldbu	r5,0(r2)
4001777c:	80c00217 	ldw	r3,8(r16)
40017780:	18ffffc4 	addi	r3,r3,-1
40017784:	80c00215 	stw	r3,8(r16)
40017788:	183ff30e 	bge	r3,zero,40017758 <__alt_data_end+0xc0017758>
4001778c:	80800617 	ldw	r2,24(r16)
40017790:	18801916 	blt	r3,r2,400177f8 <__fputwc+0x10c>
40017794:	80800017 	ldw	r2,0(r16)
40017798:	11400005 	stb	r5,0(r2)
4001779c:	80800017 	ldw	r2,0(r16)
400177a0:	10c00003 	ldbu	r3,0(r2)
400177a4:	10800044 	addi	r2,r2,1
400177a8:	1d402326 	beq	r3,r21,40017838 <__fputwc+0x14c>
400177ac:	80800015 	stw	r2,0(r16)
400177b0:	8c400044 	addi	r17,r17,1
400177b4:	dc45883a 	add	r2,sp,r17
400177b8:	8d3fef36 	bltu	r17,r20,40017778 <__alt_data_end+0xc0017778>
400177bc:	9005883a 	mov	r2,r18
400177c0:	00000406 	br	400177d4 <__fputwc+0xe8>
400177c4:	80c0030b 	ldhu	r3,12(r16)
400177c8:	a005883a 	mov	r2,r20
400177cc:	18c01014 	ori	r3,r3,64
400177d0:	80c0030d 	sth	r3,12(r16)
400177d4:	dfc00717 	ldw	ra,28(sp)
400177d8:	dd400617 	ldw	r21,24(sp)
400177dc:	dd000517 	ldw	r20,20(sp)
400177e0:	dcc00417 	ldw	r19,16(sp)
400177e4:	dc800317 	ldw	r18,12(sp)
400177e8:	dc400217 	ldw	r17,8(sp)
400177ec:	dc000117 	ldw	r16,4(sp)
400177f0:	dec00804 	addi	sp,sp,32
400177f4:	f800283a 	ret
400177f8:	800d883a 	mov	r6,r16
400177fc:	29403fcc 	andi	r5,r5,255
40017800:	9809883a 	mov	r4,r19
40017804:	00173dc0 	call	400173dc <__swbuf_r>
40017808:	10bfffe0 	cmpeqi	r2,r2,-1
4001780c:	10803fcc 	andi	r2,r2,255
40017810:	103fd626 	beq	r2,zero,4001776c <__alt_data_end+0xc001776c>
40017814:	00bfffc4 	movi	r2,-1
40017818:	003fee06 	br	400177d4 <__alt_data_end+0xc00177d4>
4001781c:	90ffffc4 	addi	r3,r18,-1
40017820:	01003f84 	movi	r4,254
40017824:	20ffbf36 	bltu	r4,r3,40017724 <__alt_data_end+0xc0017724>
40017828:	900b883a 	mov	r5,r18
4001782c:	dc800005 	stb	r18,0(sp)
40017830:	1029883a 	mov	r20,r2
40017834:	003fc506 	br	4001774c <__alt_data_end+0xc001774c>
40017838:	800d883a 	mov	r6,r16
4001783c:	a80b883a 	mov	r5,r21
40017840:	9809883a 	mov	r4,r19
40017844:	00173dc0 	call	400173dc <__swbuf_r>
40017848:	10bfffe0 	cmpeqi	r2,r2,-1
4001784c:	003fef06 	br	4001780c <__alt_data_end+0xc001780c>

40017850 <_fputwc_r>:
40017850:	3080030b 	ldhu	r2,12(r6)
40017854:	10c8000c 	andi	r3,r2,8192
40017858:	1800051e 	bne	r3,zero,40017870 <_fputwc_r+0x20>
4001785c:	30c01917 	ldw	r3,100(r6)
40017860:	10880014 	ori	r2,r2,8192
40017864:	3080030d 	sth	r2,12(r6)
40017868:	18880014 	ori	r2,r3,8192
4001786c:	30801915 	stw	r2,100(r6)
40017870:	00176ec1 	jmpi	400176ec <__fputwc>

40017874 <fputwc>:
40017874:	009000b4 	movhi	r2,16386
40017878:	defffc04 	addi	sp,sp,-16
4001787c:	10ad4704 	addi	r2,r2,-19172
40017880:	dc000115 	stw	r16,4(sp)
40017884:	14000017 	ldw	r16,0(r2)
40017888:	dc400215 	stw	r17,8(sp)
4001788c:	dfc00315 	stw	ra,12(sp)
40017890:	2023883a 	mov	r17,r4
40017894:	80000226 	beq	r16,zero,400178a0 <fputwc+0x2c>
40017898:	80800e17 	ldw	r2,56(r16)
4001789c:	10001026 	beq	r2,zero,400178e0 <fputwc+0x6c>
400178a0:	2880030b 	ldhu	r2,12(r5)
400178a4:	10c8000c 	andi	r3,r2,8192
400178a8:	1800051e 	bne	r3,zero,400178c0 <fputwc+0x4c>
400178ac:	28c01917 	ldw	r3,100(r5)
400178b0:	10880014 	ori	r2,r2,8192
400178b4:	2880030d 	sth	r2,12(r5)
400178b8:	18880014 	ori	r2,r3,8192
400178bc:	28801915 	stw	r2,100(r5)
400178c0:	280d883a 	mov	r6,r5
400178c4:	8009883a 	mov	r4,r16
400178c8:	880b883a 	mov	r5,r17
400178cc:	dfc00317 	ldw	ra,12(sp)
400178d0:	dc400217 	ldw	r17,8(sp)
400178d4:	dc000117 	ldw	r16,4(sp)
400178d8:	dec00404 	addi	sp,sp,16
400178dc:	00176ec1 	jmpi	400176ec <__fputwc>
400178e0:	8009883a 	mov	r4,r16
400178e4:	d9400015 	stw	r5,0(sp)
400178e8:	00134a00 	call	400134a0 <__sinit>
400178ec:	d9400017 	ldw	r5,0(sp)
400178f0:	003feb06 	br	400178a0 <__alt_data_end+0xc00178a0>

400178f4 <_fstat_r>:
400178f4:	defffd04 	addi	sp,sp,-12
400178f8:	2805883a 	mov	r2,r5
400178fc:	dc000015 	stw	r16,0(sp)
40017900:	041000b4 	movhi	r16,16386
40017904:	dc400115 	stw	r17,4(sp)
40017908:	84301004 	addi	r16,r16,-16320
4001790c:	2023883a 	mov	r17,r4
40017910:	300b883a 	mov	r5,r6
40017914:	1009883a 	mov	r4,r2
40017918:	dfc00215 	stw	ra,8(sp)
4001791c:	80000015 	stw	zero,0(r16)
40017920:	00194700 	call	40019470 <fstat>
40017924:	00ffffc4 	movi	r3,-1
40017928:	10c00526 	beq	r2,r3,40017940 <_fstat_r+0x4c>
4001792c:	dfc00217 	ldw	ra,8(sp)
40017930:	dc400117 	ldw	r17,4(sp)
40017934:	dc000017 	ldw	r16,0(sp)
40017938:	dec00304 	addi	sp,sp,12
4001793c:	f800283a 	ret
40017940:	80c00017 	ldw	r3,0(r16)
40017944:	183ff926 	beq	r3,zero,4001792c <__alt_data_end+0xc001792c>
40017948:	88c00015 	stw	r3,0(r17)
4001794c:	003ff706 	br	4001792c <__alt_data_end+0xc001792c>

40017950 <_isatty_r>:
40017950:	defffd04 	addi	sp,sp,-12
40017954:	dc000015 	stw	r16,0(sp)
40017958:	041000b4 	movhi	r16,16386
4001795c:	dc400115 	stw	r17,4(sp)
40017960:	84301004 	addi	r16,r16,-16320
40017964:	2023883a 	mov	r17,r4
40017968:	2809883a 	mov	r4,r5
4001796c:	dfc00215 	stw	ra,8(sp)
40017970:	80000015 	stw	zero,0(r16)
40017974:	00194e80 	call	400194e8 <isatty>
40017978:	00ffffc4 	movi	r3,-1
4001797c:	10c00526 	beq	r2,r3,40017994 <_isatty_r+0x44>
40017980:	dfc00217 	ldw	ra,8(sp)
40017984:	dc400117 	ldw	r17,4(sp)
40017988:	dc000017 	ldw	r16,0(sp)
4001798c:	dec00304 	addi	sp,sp,12
40017990:	f800283a 	ret
40017994:	80c00017 	ldw	r3,0(r16)
40017998:	183ff926 	beq	r3,zero,40017980 <__alt_data_end+0xc0017980>
4001799c:	88c00015 	stw	r3,0(r17)
400179a0:	003ff706 	br	40017980 <__alt_data_end+0xc0017980>

400179a4 <_lseek_r>:
400179a4:	defffd04 	addi	sp,sp,-12
400179a8:	2805883a 	mov	r2,r5
400179ac:	dc000015 	stw	r16,0(sp)
400179b0:	041000b4 	movhi	r16,16386
400179b4:	dc400115 	stw	r17,4(sp)
400179b8:	300b883a 	mov	r5,r6
400179bc:	84301004 	addi	r16,r16,-16320
400179c0:	2023883a 	mov	r17,r4
400179c4:	380d883a 	mov	r6,r7
400179c8:	1009883a 	mov	r4,r2
400179cc:	dfc00215 	stw	ra,8(sp)
400179d0:	80000015 	stw	zero,0(r16)
400179d4:	00196380 	call	40019638 <lseek>
400179d8:	00ffffc4 	movi	r3,-1
400179dc:	10c00526 	beq	r2,r3,400179f4 <_lseek_r+0x50>
400179e0:	dfc00217 	ldw	ra,8(sp)
400179e4:	dc400117 	ldw	r17,4(sp)
400179e8:	dc000017 	ldw	r16,0(sp)
400179ec:	dec00304 	addi	sp,sp,12
400179f0:	f800283a 	ret
400179f4:	80c00017 	ldw	r3,0(r16)
400179f8:	183ff926 	beq	r3,zero,400179e0 <__alt_data_end+0xc00179e0>
400179fc:	88c00015 	stw	r3,0(r17)
40017a00:	003ff706 	br	400179e0 <__alt_data_end+0xc00179e0>

40017a04 <_read_r>:
40017a04:	defffd04 	addi	sp,sp,-12
40017a08:	2805883a 	mov	r2,r5
40017a0c:	dc000015 	stw	r16,0(sp)
40017a10:	041000b4 	movhi	r16,16386
40017a14:	dc400115 	stw	r17,4(sp)
40017a18:	300b883a 	mov	r5,r6
40017a1c:	84301004 	addi	r16,r16,-16320
40017a20:	2023883a 	mov	r17,r4
40017a24:	380d883a 	mov	r6,r7
40017a28:	1009883a 	mov	r4,r2
40017a2c:	dfc00215 	stw	ra,8(sp)
40017a30:	80000015 	stw	zero,0(r16)
40017a34:	001971c0 	call	4001971c <read>
40017a38:	00ffffc4 	movi	r3,-1
40017a3c:	10c00526 	beq	r2,r3,40017a54 <_read_r+0x50>
40017a40:	dfc00217 	ldw	ra,8(sp)
40017a44:	dc400117 	ldw	r17,4(sp)
40017a48:	dc000017 	ldw	r16,0(sp)
40017a4c:	dec00304 	addi	sp,sp,12
40017a50:	f800283a 	ret
40017a54:	80c00017 	ldw	r3,0(r16)
40017a58:	183ff926 	beq	r3,zero,40017a40 <__alt_data_end+0xc0017a40>
40017a5c:	88c00015 	stw	r3,0(r17)
40017a60:	003ff706 	br	40017a40 <__alt_data_end+0xc0017a40>

40017a64 <_wcrtomb_r>:
40017a64:	defff604 	addi	sp,sp,-40
40017a68:	009000b4 	movhi	r2,16386
40017a6c:	dc800815 	stw	r18,32(sp)
40017a70:	dc400715 	stw	r17,28(sp)
40017a74:	dc000615 	stw	r16,24(sp)
40017a78:	10ad4b04 	addi	r2,r2,-19156
40017a7c:	dfc00915 	stw	ra,36(sp)
40017a80:	2021883a 	mov	r16,r4
40017a84:	3823883a 	mov	r17,r7
40017a88:	14800017 	ldw	r18,0(r2)
40017a8c:	28001426 	beq	r5,zero,40017ae0 <_wcrtomb_r+0x7c>
40017a90:	d9400415 	stw	r5,16(sp)
40017a94:	d9800515 	stw	r6,20(sp)
40017a98:	0013fe40 	call	40013fe4 <__locale_charset>
40017a9c:	d9800517 	ldw	r6,20(sp)
40017aa0:	d9400417 	ldw	r5,16(sp)
40017aa4:	100f883a 	mov	r7,r2
40017aa8:	dc400015 	stw	r17,0(sp)
40017aac:	8009883a 	mov	r4,r16
40017ab0:	903ee83a 	callr	r18
40017ab4:	00ffffc4 	movi	r3,-1
40017ab8:	10c0031e 	bne	r2,r3,40017ac8 <_wcrtomb_r+0x64>
40017abc:	88000015 	stw	zero,0(r17)
40017ac0:	00c02284 	movi	r3,138
40017ac4:	80c00015 	stw	r3,0(r16)
40017ac8:	dfc00917 	ldw	ra,36(sp)
40017acc:	dc800817 	ldw	r18,32(sp)
40017ad0:	dc400717 	ldw	r17,28(sp)
40017ad4:	dc000617 	ldw	r16,24(sp)
40017ad8:	dec00a04 	addi	sp,sp,40
40017adc:	f800283a 	ret
40017ae0:	0013fe40 	call	40013fe4 <__locale_charset>
40017ae4:	100f883a 	mov	r7,r2
40017ae8:	dc400015 	stw	r17,0(sp)
40017aec:	000d883a 	mov	r6,zero
40017af0:	d9400104 	addi	r5,sp,4
40017af4:	8009883a 	mov	r4,r16
40017af8:	903ee83a 	callr	r18
40017afc:	003fed06 	br	40017ab4 <__alt_data_end+0xc0017ab4>

40017b00 <wcrtomb>:
40017b00:	defff604 	addi	sp,sp,-40
40017b04:	009000b4 	movhi	r2,16386
40017b08:	dc800615 	stw	r18,24(sp)
40017b0c:	dc400515 	stw	r17,20(sp)
40017b10:	10ad4704 	addi	r2,r2,-19172
40017b14:	dfc00915 	stw	ra,36(sp)
40017b18:	dd000815 	stw	r20,32(sp)
40017b1c:	dcc00715 	stw	r19,28(sp)
40017b20:	dc000415 	stw	r16,16(sp)
40017b24:	3025883a 	mov	r18,r6
40017b28:	14400017 	ldw	r17,0(r2)
40017b2c:	20001926 	beq	r4,zero,40017b94 <wcrtomb+0x94>
40017b30:	009000b4 	movhi	r2,16386
40017b34:	10ad4b04 	addi	r2,r2,-19156
40017b38:	15000017 	ldw	r20,0(r2)
40017b3c:	2021883a 	mov	r16,r4
40017b40:	2827883a 	mov	r19,r5
40017b44:	0013fe40 	call	40013fe4 <__locale_charset>
40017b48:	100f883a 	mov	r7,r2
40017b4c:	dc800015 	stw	r18,0(sp)
40017b50:	980d883a 	mov	r6,r19
40017b54:	800b883a 	mov	r5,r16
40017b58:	8809883a 	mov	r4,r17
40017b5c:	a03ee83a 	callr	r20
40017b60:	00ffffc4 	movi	r3,-1
40017b64:	10c0031e 	bne	r2,r3,40017b74 <wcrtomb+0x74>
40017b68:	90000015 	stw	zero,0(r18)
40017b6c:	00c02284 	movi	r3,138
40017b70:	88c00015 	stw	r3,0(r17)
40017b74:	dfc00917 	ldw	ra,36(sp)
40017b78:	dd000817 	ldw	r20,32(sp)
40017b7c:	dcc00717 	ldw	r19,28(sp)
40017b80:	dc800617 	ldw	r18,24(sp)
40017b84:	dc400517 	ldw	r17,20(sp)
40017b88:	dc000417 	ldw	r16,16(sp)
40017b8c:	dec00a04 	addi	sp,sp,40
40017b90:	f800283a 	ret
40017b94:	009000b4 	movhi	r2,16386
40017b98:	10ad4b04 	addi	r2,r2,-19156
40017b9c:	14000017 	ldw	r16,0(r2)
40017ba0:	0013fe40 	call	40013fe4 <__locale_charset>
40017ba4:	100f883a 	mov	r7,r2
40017ba8:	dc800015 	stw	r18,0(sp)
40017bac:	000d883a 	mov	r6,zero
40017bb0:	d9400104 	addi	r5,sp,4
40017bb4:	8809883a 	mov	r4,r17
40017bb8:	803ee83a 	callr	r16
40017bbc:	003fe806 	br	40017b60 <__alt_data_end+0xc0017b60>

40017bc0 <__ascii_wctomb>:
40017bc0:	28000526 	beq	r5,zero,40017bd8 <__ascii_wctomb+0x18>
40017bc4:	00803fc4 	movi	r2,255
40017bc8:	11800536 	bltu	r2,r6,40017be0 <__ascii_wctomb+0x20>
40017bcc:	29800005 	stb	r6,0(r5)
40017bd0:	00800044 	movi	r2,1
40017bd4:	f800283a 	ret
40017bd8:	0005883a 	mov	r2,zero
40017bdc:	f800283a 	ret
40017be0:	00802284 	movi	r2,138
40017be4:	20800015 	stw	r2,0(r4)
40017be8:	00bfffc4 	movi	r2,-1
40017bec:	f800283a 	ret

40017bf0 <_wctomb_r>:
40017bf0:	009000b4 	movhi	r2,16386
40017bf4:	defff904 	addi	sp,sp,-28
40017bf8:	10ad4b04 	addi	r2,r2,-19156
40017bfc:	dfc00615 	stw	ra,24(sp)
40017c00:	dc400515 	stw	r17,20(sp)
40017c04:	dc000415 	stw	r16,16(sp)
40017c08:	3823883a 	mov	r17,r7
40017c0c:	14000017 	ldw	r16,0(r2)
40017c10:	d9000115 	stw	r4,4(sp)
40017c14:	d9400215 	stw	r5,8(sp)
40017c18:	d9800315 	stw	r6,12(sp)
40017c1c:	0013fe40 	call	40013fe4 <__locale_charset>
40017c20:	d9800317 	ldw	r6,12(sp)
40017c24:	d9400217 	ldw	r5,8(sp)
40017c28:	d9000117 	ldw	r4,4(sp)
40017c2c:	100f883a 	mov	r7,r2
40017c30:	dc400015 	stw	r17,0(sp)
40017c34:	803ee83a 	callr	r16
40017c38:	dfc00617 	ldw	ra,24(sp)
40017c3c:	dc400517 	ldw	r17,20(sp)
40017c40:	dc000417 	ldw	r16,16(sp)
40017c44:	dec00704 	addi	sp,sp,28
40017c48:	f800283a 	ret

40017c4c <__udivdi3>:
40017c4c:	defff504 	addi	sp,sp,-44
40017c50:	dcc00415 	stw	r19,16(sp)
40017c54:	dc000115 	stw	r16,4(sp)
40017c58:	dfc00a15 	stw	ra,40(sp)
40017c5c:	df000915 	stw	fp,36(sp)
40017c60:	ddc00815 	stw	r23,32(sp)
40017c64:	dd800715 	stw	r22,28(sp)
40017c68:	dd400615 	stw	r21,24(sp)
40017c6c:	dd000515 	stw	r20,20(sp)
40017c70:	dc800315 	stw	r18,12(sp)
40017c74:	dc400215 	stw	r17,8(sp)
40017c78:	2027883a 	mov	r19,r4
40017c7c:	2821883a 	mov	r16,r5
40017c80:	3800411e 	bne	r7,zero,40017d88 <__udivdi3+0x13c>
40017c84:	3023883a 	mov	r17,r6
40017c88:	2025883a 	mov	r18,r4
40017c8c:	2980522e 	bgeu	r5,r6,40017dd8 <__udivdi3+0x18c>
40017c90:	00bfffd4 	movui	r2,65535
40017c94:	282d883a 	mov	r22,r5
40017c98:	1180a836 	bltu	r2,r6,40017f3c <__udivdi3+0x2f0>
40017c9c:	00803fc4 	movi	r2,255
40017ca0:	1185803a 	cmpltu	r2,r2,r6
40017ca4:	100490fa 	slli	r2,r2,3
40017ca8:	3086d83a 	srl	r3,r6,r2
40017cac:	011000b4 	movhi	r4,16386
40017cb0:	2129e984 	addi	r4,r4,-22618
40017cb4:	20c7883a 	add	r3,r4,r3
40017cb8:	18c00003 	ldbu	r3,0(r3)
40017cbc:	1885883a 	add	r2,r3,r2
40017cc0:	00c00804 	movi	r3,32
40017cc4:	1887c83a 	sub	r3,r3,r2
40017cc8:	18000526 	beq	r3,zero,40017ce0 <__udivdi3+0x94>
40017ccc:	80e0983a 	sll	r16,r16,r3
40017cd0:	9884d83a 	srl	r2,r19,r2
40017cd4:	30e2983a 	sll	r17,r6,r3
40017cd8:	98e4983a 	sll	r18,r19,r3
40017cdc:	142cb03a 	or	r22,r2,r16
40017ce0:	882ad43a 	srli	r21,r17,16
40017ce4:	b009883a 	mov	r4,r22
40017ce8:	8d3fffcc 	andi	r20,r17,65535
40017cec:	a80b883a 	mov	r5,r21
40017cf0:	000c9a80 	call	4000c9a8 <__umodsi3>
40017cf4:	b009883a 	mov	r4,r22
40017cf8:	a80b883a 	mov	r5,r21
40017cfc:	1027883a 	mov	r19,r2
40017d00:	000c9440 	call	4000c944 <__udivsi3>
40017d04:	102d883a 	mov	r22,r2
40017d08:	9826943a 	slli	r19,r19,16
40017d0c:	9004d43a 	srli	r2,r18,16
40017d10:	a5a1383a 	mul	r16,r20,r22
40017d14:	14c4b03a 	or	r2,r2,r19
40017d18:	1400052e 	bgeu	r2,r16,40017d30 <__udivdi3+0xe4>
40017d1c:	1445883a 	add	r2,r2,r17
40017d20:	b0ffffc4 	addi	r3,r22,-1
40017d24:	14400136 	bltu	r2,r17,40017d2c <__udivdi3+0xe0>
40017d28:	14012336 	bltu	r2,r16,400181b8 <__udivdi3+0x56c>
40017d2c:	182d883a 	mov	r22,r3
40017d30:	1421c83a 	sub	r16,r2,r16
40017d34:	a80b883a 	mov	r5,r21
40017d38:	8009883a 	mov	r4,r16
40017d3c:	000c9a80 	call	4000c9a8 <__umodsi3>
40017d40:	1027883a 	mov	r19,r2
40017d44:	a80b883a 	mov	r5,r21
40017d48:	8009883a 	mov	r4,r16
40017d4c:	000c9440 	call	4000c944 <__udivsi3>
40017d50:	9826943a 	slli	r19,r19,16
40017d54:	a0a9383a 	mul	r20,r20,r2
40017d58:	94bfffcc 	andi	r18,r18,65535
40017d5c:	94e4b03a 	or	r18,r18,r19
40017d60:	9500052e 	bgeu	r18,r20,40017d78 <__udivdi3+0x12c>
40017d64:	8ca5883a 	add	r18,r17,r18
40017d68:	10ffffc4 	addi	r3,r2,-1
40017d6c:	9440f136 	bltu	r18,r17,40018134 <__udivdi3+0x4e8>
40017d70:	9500f02e 	bgeu	r18,r20,40018134 <__udivdi3+0x4e8>
40017d74:	10bfff84 	addi	r2,r2,-2
40017d78:	b00c943a 	slli	r6,r22,16
40017d7c:	0007883a 	mov	r3,zero
40017d80:	3084b03a 	or	r2,r6,r2
40017d84:	00005906 	br	40017eec <__udivdi3+0x2a0>
40017d88:	29c05636 	bltu	r5,r7,40017ee4 <__udivdi3+0x298>
40017d8c:	00bfffd4 	movui	r2,65535
40017d90:	11c0622e 	bgeu	r2,r7,40017f1c <__udivdi3+0x2d0>
40017d94:	00804034 	movhi	r2,256
40017d98:	10bfffc4 	addi	r2,r2,-1
40017d9c:	11c0ee36 	bltu	r2,r7,40018158 <__udivdi3+0x50c>
40017da0:	00800404 	movi	r2,16
40017da4:	3886d83a 	srl	r3,r7,r2
40017da8:	011000b4 	movhi	r4,16386
40017dac:	2129e984 	addi	r4,r4,-22618
40017db0:	20c7883a 	add	r3,r4,r3
40017db4:	18c00003 	ldbu	r3,0(r3)
40017db8:	05400804 	movi	r21,32
40017dbc:	1885883a 	add	r2,r3,r2
40017dc0:	a8abc83a 	sub	r21,r21,r2
40017dc4:	a800621e 	bne	r21,zero,40017f50 <__udivdi3+0x304>
40017dc8:	3c00e936 	bltu	r7,r16,40018170 <__udivdi3+0x524>
40017dcc:	9985403a 	cmpgeu	r2,r19,r6
40017dd0:	0007883a 	mov	r3,zero
40017dd4:	00004506 	br	40017eec <__udivdi3+0x2a0>
40017dd8:	3000041e 	bne	r6,zero,40017dec <__udivdi3+0x1a0>
40017ddc:	000b883a 	mov	r5,zero
40017de0:	01000044 	movi	r4,1
40017de4:	000c9440 	call	4000c944 <__udivsi3>
40017de8:	1023883a 	mov	r17,r2
40017dec:	00bfffd4 	movui	r2,65535
40017df0:	14404e2e 	bgeu	r2,r17,40017f2c <__udivdi3+0x2e0>
40017df4:	00804034 	movhi	r2,256
40017df8:	10bfffc4 	addi	r2,r2,-1
40017dfc:	1440d836 	bltu	r2,r17,40018160 <__udivdi3+0x514>
40017e00:	00800404 	movi	r2,16
40017e04:	8886d83a 	srl	r3,r17,r2
40017e08:	011000b4 	movhi	r4,16386
40017e0c:	2129e984 	addi	r4,r4,-22618
40017e10:	20c7883a 	add	r3,r4,r3
40017e14:	18c00003 	ldbu	r3,0(r3)
40017e18:	1885883a 	add	r2,r3,r2
40017e1c:	00c00804 	movi	r3,32
40017e20:	1887c83a 	sub	r3,r3,r2
40017e24:	18008f1e 	bne	r3,zero,40018064 <__udivdi3+0x418>
40017e28:	882ad43a 	srli	r21,r17,16
40017e2c:	8461c83a 	sub	r16,r16,r17
40017e30:	8d3fffcc 	andi	r20,r17,65535
40017e34:	00c00044 	movi	r3,1
40017e38:	8009883a 	mov	r4,r16
40017e3c:	a80b883a 	mov	r5,r21
40017e40:	d8c00015 	stw	r3,0(sp)
40017e44:	000c9a80 	call	4000c9a8 <__umodsi3>
40017e48:	8009883a 	mov	r4,r16
40017e4c:	a80b883a 	mov	r5,r21
40017e50:	1027883a 	mov	r19,r2
40017e54:	000c9440 	call	4000c944 <__udivsi3>
40017e58:	9826943a 	slli	r19,r19,16
40017e5c:	9008d43a 	srli	r4,r18,16
40017e60:	1521383a 	mul	r16,r2,r20
40017e64:	102d883a 	mov	r22,r2
40017e68:	24c8b03a 	or	r4,r4,r19
40017e6c:	d8c00017 	ldw	r3,0(sp)
40017e70:	2400052e 	bgeu	r4,r16,40017e88 <__udivdi3+0x23c>
40017e74:	2449883a 	add	r4,r4,r17
40017e78:	b0bfffc4 	addi	r2,r22,-1
40017e7c:	24400136 	bltu	r4,r17,40017e84 <__udivdi3+0x238>
40017e80:	2400ca36 	bltu	r4,r16,400181ac <__udivdi3+0x560>
40017e84:	102d883a 	mov	r22,r2
40017e88:	2421c83a 	sub	r16,r4,r16
40017e8c:	a80b883a 	mov	r5,r21
40017e90:	8009883a 	mov	r4,r16
40017e94:	d8c00015 	stw	r3,0(sp)
40017e98:	000c9a80 	call	4000c9a8 <__umodsi3>
40017e9c:	1027883a 	mov	r19,r2
40017ea0:	a80b883a 	mov	r5,r21
40017ea4:	8009883a 	mov	r4,r16
40017ea8:	000c9440 	call	4000c944 <__udivsi3>
40017eac:	9826943a 	slli	r19,r19,16
40017eb0:	1529383a 	mul	r20,r2,r20
40017eb4:	94bfffcc 	andi	r18,r18,65535
40017eb8:	94e4b03a 	or	r18,r18,r19
40017ebc:	d8c00017 	ldw	r3,0(sp)
40017ec0:	9500052e 	bgeu	r18,r20,40017ed8 <__udivdi3+0x28c>
40017ec4:	8ca5883a 	add	r18,r17,r18
40017ec8:	113fffc4 	addi	r4,r2,-1
40017ecc:	94409736 	bltu	r18,r17,4001812c <__udivdi3+0x4e0>
40017ed0:	9500962e 	bgeu	r18,r20,4001812c <__udivdi3+0x4e0>
40017ed4:	10bfff84 	addi	r2,r2,-2
40017ed8:	b00c943a 	slli	r6,r22,16
40017edc:	3084b03a 	or	r2,r6,r2
40017ee0:	00000206 	br	40017eec <__udivdi3+0x2a0>
40017ee4:	0007883a 	mov	r3,zero
40017ee8:	0005883a 	mov	r2,zero
40017eec:	dfc00a17 	ldw	ra,40(sp)
40017ef0:	df000917 	ldw	fp,36(sp)
40017ef4:	ddc00817 	ldw	r23,32(sp)
40017ef8:	dd800717 	ldw	r22,28(sp)
40017efc:	dd400617 	ldw	r21,24(sp)
40017f00:	dd000517 	ldw	r20,20(sp)
40017f04:	dcc00417 	ldw	r19,16(sp)
40017f08:	dc800317 	ldw	r18,12(sp)
40017f0c:	dc400217 	ldw	r17,8(sp)
40017f10:	dc000117 	ldw	r16,4(sp)
40017f14:	dec00b04 	addi	sp,sp,44
40017f18:	f800283a 	ret
40017f1c:	00803fc4 	movi	r2,255
40017f20:	11c5803a 	cmpltu	r2,r2,r7
40017f24:	100490fa 	slli	r2,r2,3
40017f28:	003f9e06 	br	40017da4 <__alt_data_end+0xc0017da4>
40017f2c:	00803fc4 	movi	r2,255
40017f30:	1445803a 	cmpltu	r2,r2,r17
40017f34:	100490fa 	slli	r2,r2,3
40017f38:	003fb206 	br	40017e04 <__alt_data_end+0xc0017e04>
40017f3c:	00804034 	movhi	r2,256
40017f40:	10bfffc4 	addi	r2,r2,-1
40017f44:	11808836 	bltu	r2,r6,40018168 <__udivdi3+0x51c>
40017f48:	00800404 	movi	r2,16
40017f4c:	003f5606 	br	40017ca8 <__alt_data_end+0xc0017ca8>
40017f50:	30aed83a 	srl	r23,r6,r2
40017f54:	3d4e983a 	sll	r7,r7,r21
40017f58:	80acd83a 	srl	r22,r16,r2
40017f5c:	9884d83a 	srl	r2,r19,r2
40017f60:	3deeb03a 	or	r23,r7,r23
40017f64:	b824d43a 	srli	r18,r23,16
40017f68:	8560983a 	sll	r16,r16,r21
40017f6c:	b009883a 	mov	r4,r22
40017f70:	900b883a 	mov	r5,r18
40017f74:	3568983a 	sll	r20,r6,r21
40017f78:	1420b03a 	or	r16,r2,r16
40017f7c:	000c9a80 	call	4000c9a8 <__umodsi3>
40017f80:	b009883a 	mov	r4,r22
40017f84:	900b883a 	mov	r5,r18
40017f88:	1023883a 	mov	r17,r2
40017f8c:	000c9440 	call	4000c944 <__udivsi3>
40017f90:	8808943a 	slli	r4,r17,16
40017f94:	bf3fffcc 	andi	fp,r23,65535
40017f98:	8006d43a 	srli	r3,r16,16
40017f9c:	e0a3383a 	mul	r17,fp,r2
40017fa0:	100d883a 	mov	r6,r2
40017fa4:	1906b03a 	or	r3,r3,r4
40017fa8:	1c40042e 	bgeu	r3,r17,40017fbc <__udivdi3+0x370>
40017fac:	1dc7883a 	add	r3,r3,r23
40017fb0:	10bfffc4 	addi	r2,r2,-1
40017fb4:	1dc0752e 	bgeu	r3,r23,4001818c <__udivdi3+0x540>
40017fb8:	100d883a 	mov	r6,r2
40017fbc:	1c63c83a 	sub	r17,r3,r17
40017fc0:	900b883a 	mov	r5,r18
40017fc4:	8809883a 	mov	r4,r17
40017fc8:	d9800015 	stw	r6,0(sp)
40017fcc:	000c9a80 	call	4000c9a8 <__umodsi3>
40017fd0:	102d883a 	mov	r22,r2
40017fd4:	8809883a 	mov	r4,r17
40017fd8:	900b883a 	mov	r5,r18
40017fdc:	000c9440 	call	4000c944 <__udivsi3>
40017fe0:	b02c943a 	slli	r22,r22,16
40017fe4:	e089383a 	mul	r4,fp,r2
40017fe8:	843fffcc 	andi	r16,r16,65535
40017fec:	85a0b03a 	or	r16,r16,r22
40017ff0:	d9800017 	ldw	r6,0(sp)
40017ff4:	8100042e 	bgeu	r16,r4,40018008 <__udivdi3+0x3bc>
40017ff8:	85e1883a 	add	r16,r16,r23
40017ffc:	10ffffc4 	addi	r3,r2,-1
40018000:	85c05e2e 	bgeu	r16,r23,4001817c <__udivdi3+0x530>
40018004:	1805883a 	mov	r2,r3
40018008:	300c943a 	slli	r6,r6,16
4001800c:	a17fffcc 	andi	r5,r20,65535
40018010:	a028d43a 	srli	r20,r20,16
40018014:	3084b03a 	or	r2,r6,r2
40018018:	10ffffcc 	andi	r3,r2,65535
4001801c:	100cd43a 	srli	r6,r2,16
40018020:	194f383a 	mul	r7,r3,r5
40018024:	1d07383a 	mul	r3,r3,r20
40018028:	314b383a 	mul	r5,r6,r5
4001802c:	3810d43a 	srli	r8,r7,16
40018030:	8121c83a 	sub	r16,r16,r4
40018034:	1947883a 	add	r3,r3,r5
40018038:	40c7883a 	add	r3,r8,r3
4001803c:	350d383a 	mul	r6,r6,r20
40018040:	1940022e 	bgeu	r3,r5,4001804c <__udivdi3+0x400>
40018044:	01000074 	movhi	r4,1
40018048:	310d883a 	add	r6,r6,r4
4001804c:	1828d43a 	srli	r20,r3,16
40018050:	a18d883a 	add	r6,r20,r6
40018054:	81803e36 	bltu	r16,r6,40018150 <__udivdi3+0x504>
40018058:	81803826 	beq	r16,r6,4001813c <__udivdi3+0x4f0>
4001805c:	0007883a 	mov	r3,zero
40018060:	003fa206 	br	40017eec <__alt_data_end+0xc0017eec>
40018064:	88e2983a 	sll	r17,r17,r3
40018068:	80a8d83a 	srl	r20,r16,r2
4001806c:	80e0983a 	sll	r16,r16,r3
40018070:	882ad43a 	srli	r21,r17,16
40018074:	9884d83a 	srl	r2,r19,r2
40018078:	a009883a 	mov	r4,r20
4001807c:	a80b883a 	mov	r5,r21
40018080:	142eb03a 	or	r23,r2,r16
40018084:	98e4983a 	sll	r18,r19,r3
40018088:	000c9a80 	call	4000c9a8 <__umodsi3>
4001808c:	a009883a 	mov	r4,r20
40018090:	a80b883a 	mov	r5,r21
40018094:	1021883a 	mov	r16,r2
40018098:	000c9440 	call	4000c944 <__udivsi3>
4001809c:	1039883a 	mov	fp,r2
400180a0:	8d3fffcc 	andi	r20,r17,65535
400180a4:	8020943a 	slli	r16,r16,16
400180a8:	b804d43a 	srli	r2,r23,16
400180ac:	a72d383a 	mul	r22,r20,fp
400180b0:	1404b03a 	or	r2,r2,r16
400180b4:	1580062e 	bgeu	r2,r22,400180d0 <__udivdi3+0x484>
400180b8:	1445883a 	add	r2,r2,r17
400180bc:	e0ffffc4 	addi	r3,fp,-1
400180c0:	14403836 	bltu	r2,r17,400181a4 <__udivdi3+0x558>
400180c4:	1580372e 	bgeu	r2,r22,400181a4 <__udivdi3+0x558>
400180c8:	e73fff84 	addi	fp,fp,-2
400180cc:	1445883a 	add	r2,r2,r17
400180d0:	15adc83a 	sub	r22,r2,r22
400180d4:	a80b883a 	mov	r5,r21
400180d8:	b009883a 	mov	r4,r22
400180dc:	000c9a80 	call	4000c9a8 <__umodsi3>
400180e0:	1027883a 	mov	r19,r2
400180e4:	b009883a 	mov	r4,r22
400180e8:	a80b883a 	mov	r5,r21
400180ec:	000c9440 	call	4000c944 <__udivsi3>
400180f0:	9826943a 	slli	r19,r19,16
400180f4:	a0a1383a 	mul	r16,r20,r2
400180f8:	b93fffcc 	andi	r4,r23,65535
400180fc:	24c8b03a 	or	r4,r4,r19
40018100:	2400062e 	bgeu	r4,r16,4001811c <__udivdi3+0x4d0>
40018104:	2449883a 	add	r4,r4,r17
40018108:	10ffffc4 	addi	r3,r2,-1
4001810c:	24402336 	bltu	r4,r17,4001819c <__udivdi3+0x550>
40018110:	2400222e 	bgeu	r4,r16,4001819c <__udivdi3+0x550>
40018114:	10bfff84 	addi	r2,r2,-2
40018118:	2449883a 	add	r4,r4,r17
4001811c:	e038943a 	slli	fp,fp,16
40018120:	2421c83a 	sub	r16,r4,r16
40018124:	e086b03a 	or	r3,fp,r2
40018128:	003f4306 	br	40017e38 <__alt_data_end+0xc0017e38>
4001812c:	2005883a 	mov	r2,r4
40018130:	003f6906 	br	40017ed8 <__alt_data_end+0xc0017ed8>
40018134:	1805883a 	mov	r2,r3
40018138:	003f0f06 	br	40017d78 <__alt_data_end+0xc0017d78>
4001813c:	1806943a 	slli	r3,r3,16
40018140:	9d66983a 	sll	r19,r19,r21
40018144:	39ffffcc 	andi	r7,r7,65535
40018148:	19c7883a 	add	r3,r3,r7
4001814c:	98ffc32e 	bgeu	r19,r3,4001805c <__alt_data_end+0xc001805c>
40018150:	10bfffc4 	addi	r2,r2,-1
40018154:	003fc106 	br	4001805c <__alt_data_end+0xc001805c>
40018158:	00800604 	movi	r2,24
4001815c:	003f1106 	br	40017da4 <__alt_data_end+0xc0017da4>
40018160:	00800604 	movi	r2,24
40018164:	003f2706 	br	40017e04 <__alt_data_end+0xc0017e04>
40018168:	00800604 	movi	r2,24
4001816c:	003ece06 	br	40017ca8 <__alt_data_end+0xc0017ca8>
40018170:	0007883a 	mov	r3,zero
40018174:	00800044 	movi	r2,1
40018178:	003f5c06 	br	40017eec <__alt_data_end+0xc0017eec>
4001817c:	813fa12e 	bgeu	r16,r4,40018004 <__alt_data_end+0xc0018004>
40018180:	10bfff84 	addi	r2,r2,-2
40018184:	85e1883a 	add	r16,r16,r23
40018188:	003f9f06 	br	40018008 <__alt_data_end+0xc0018008>
4001818c:	1c7f8a2e 	bgeu	r3,r17,40017fb8 <__alt_data_end+0xc0017fb8>
40018190:	31bfff84 	addi	r6,r6,-2
40018194:	1dc7883a 	add	r3,r3,r23
40018198:	003f8806 	br	40017fbc <__alt_data_end+0xc0017fbc>
4001819c:	1805883a 	mov	r2,r3
400181a0:	003fde06 	br	4001811c <__alt_data_end+0xc001811c>
400181a4:	1839883a 	mov	fp,r3
400181a8:	003fc906 	br	400180d0 <__alt_data_end+0xc00180d0>
400181ac:	b5bfff84 	addi	r22,r22,-2
400181b0:	2449883a 	add	r4,r4,r17
400181b4:	003f3406 	br	40017e88 <__alt_data_end+0xc0017e88>
400181b8:	b5bfff84 	addi	r22,r22,-2
400181bc:	1445883a 	add	r2,r2,r17
400181c0:	003edb06 	br	40017d30 <__alt_data_end+0xc0017d30>

400181c4 <__umoddi3>:
400181c4:	defff404 	addi	sp,sp,-48
400181c8:	df000a15 	stw	fp,40(sp)
400181cc:	dc400315 	stw	r17,12(sp)
400181d0:	dc000215 	stw	r16,8(sp)
400181d4:	dfc00b15 	stw	ra,44(sp)
400181d8:	ddc00915 	stw	r23,36(sp)
400181dc:	dd800815 	stw	r22,32(sp)
400181e0:	dd400715 	stw	r21,28(sp)
400181e4:	dd000615 	stw	r20,24(sp)
400181e8:	dcc00515 	stw	r19,20(sp)
400181ec:	dc800415 	stw	r18,16(sp)
400181f0:	2021883a 	mov	r16,r4
400181f4:	2823883a 	mov	r17,r5
400181f8:	2839883a 	mov	fp,r5
400181fc:	38003c1e 	bne	r7,zero,400182f0 <__umoddi3+0x12c>
40018200:	3027883a 	mov	r19,r6
40018204:	2029883a 	mov	r20,r4
40018208:	2980512e 	bgeu	r5,r6,40018350 <__umoddi3+0x18c>
4001820c:	00bfffd4 	movui	r2,65535
40018210:	11809a36 	bltu	r2,r6,4001847c <__umoddi3+0x2b8>
40018214:	01003fc4 	movi	r4,255
40018218:	2189803a 	cmpltu	r4,r4,r6
4001821c:	200890fa 	slli	r4,r4,3
40018220:	3104d83a 	srl	r2,r6,r4
40018224:	00d000b4 	movhi	r3,16386
40018228:	18e9e984 	addi	r3,r3,-22618
4001822c:	1885883a 	add	r2,r3,r2
40018230:	10c00003 	ldbu	r3,0(r2)
40018234:	00800804 	movi	r2,32
40018238:	1909883a 	add	r4,r3,r4
4001823c:	1125c83a 	sub	r18,r2,r4
40018240:	90000526 	beq	r18,zero,40018258 <__umoddi3+0x94>
40018244:	8ca2983a 	sll	r17,r17,r18
40018248:	8108d83a 	srl	r4,r16,r4
4001824c:	34a6983a 	sll	r19,r6,r18
40018250:	84a8983a 	sll	r20,r16,r18
40018254:	2478b03a 	or	fp,r4,r17
40018258:	982ed43a 	srli	r23,r19,16
4001825c:	e009883a 	mov	r4,fp
40018260:	9dbfffcc 	andi	r22,r19,65535
40018264:	b80b883a 	mov	r5,r23
40018268:	000c9a80 	call	4000c9a8 <__umodsi3>
4001826c:	e009883a 	mov	r4,fp
40018270:	b80b883a 	mov	r5,r23
40018274:	102b883a 	mov	r21,r2
40018278:	000c9440 	call	4000c944 <__udivsi3>
4001827c:	a806943a 	slli	r3,r21,16
40018280:	a008d43a 	srli	r4,r20,16
40018284:	b085383a 	mul	r2,r22,r2
40018288:	20c8b03a 	or	r4,r4,r3
4001828c:	2080032e 	bgeu	r4,r2,4001829c <__umoddi3+0xd8>
40018290:	24c9883a 	add	r4,r4,r19
40018294:	24c00136 	bltu	r4,r19,4001829c <__umoddi3+0xd8>
40018298:	20811036 	bltu	r4,r2,400186dc <__umoddi3+0x518>
4001829c:	20abc83a 	sub	r21,r4,r2
400182a0:	b80b883a 	mov	r5,r23
400182a4:	a809883a 	mov	r4,r21
400182a8:	000c9a80 	call	4000c9a8 <__umodsi3>
400182ac:	1023883a 	mov	r17,r2
400182b0:	b80b883a 	mov	r5,r23
400182b4:	a809883a 	mov	r4,r21
400182b8:	000c9440 	call	4000c944 <__udivsi3>
400182bc:	8822943a 	slli	r17,r17,16
400182c0:	b085383a 	mul	r2,r22,r2
400182c4:	a0ffffcc 	andi	r3,r20,65535
400182c8:	1c46b03a 	or	r3,r3,r17
400182cc:	1880042e 	bgeu	r3,r2,400182e0 <__umoddi3+0x11c>
400182d0:	1cc7883a 	add	r3,r3,r19
400182d4:	1cc00236 	bltu	r3,r19,400182e0 <__umoddi3+0x11c>
400182d8:	1880012e 	bgeu	r3,r2,400182e0 <__umoddi3+0x11c>
400182dc:	1cc7883a 	add	r3,r3,r19
400182e0:	1885c83a 	sub	r2,r3,r2
400182e4:	1484d83a 	srl	r2,r2,r18
400182e8:	0007883a 	mov	r3,zero
400182ec:	00004f06 	br	4001842c <__umoddi3+0x268>
400182f0:	29c04c36 	bltu	r5,r7,40018424 <__umoddi3+0x260>
400182f4:	00bfffd4 	movui	r2,65535
400182f8:	11c0582e 	bgeu	r2,r7,4001845c <__umoddi3+0x298>
400182fc:	00804034 	movhi	r2,256
40018300:	10bfffc4 	addi	r2,r2,-1
40018304:	11c0e736 	bltu	r2,r7,400186a4 <__umoddi3+0x4e0>
40018308:	01000404 	movi	r4,16
4001830c:	3904d83a 	srl	r2,r7,r4
40018310:	00d000b4 	movhi	r3,16386
40018314:	18e9e984 	addi	r3,r3,-22618
40018318:	1885883a 	add	r2,r3,r2
4001831c:	14c00003 	ldbu	r19,0(r2)
40018320:	00c00804 	movi	r3,32
40018324:	9927883a 	add	r19,r19,r4
40018328:	1ce9c83a 	sub	r20,r3,r19
4001832c:	a000581e 	bne	r20,zero,40018490 <__umoddi3+0x2cc>
40018330:	3c400136 	bltu	r7,r17,40018338 <__umoddi3+0x174>
40018334:	8180eb36 	bltu	r16,r6,400186e4 <__umoddi3+0x520>
40018338:	8185c83a 	sub	r2,r16,r6
4001833c:	89e3c83a 	sub	r17,r17,r7
40018340:	8089803a 	cmpltu	r4,r16,r2
40018344:	8939c83a 	sub	fp,r17,r4
40018348:	e007883a 	mov	r3,fp
4001834c:	00003706 	br	4001842c <__umoddi3+0x268>
40018350:	3000041e 	bne	r6,zero,40018364 <__umoddi3+0x1a0>
40018354:	000b883a 	mov	r5,zero
40018358:	01000044 	movi	r4,1
4001835c:	000c9440 	call	4000c944 <__udivsi3>
40018360:	1027883a 	mov	r19,r2
40018364:	00bfffd4 	movui	r2,65535
40018368:	14c0402e 	bgeu	r2,r19,4001846c <__umoddi3+0x2a8>
4001836c:	00804034 	movhi	r2,256
40018370:	10bfffc4 	addi	r2,r2,-1
40018374:	14c0cd36 	bltu	r2,r19,400186ac <__umoddi3+0x4e8>
40018378:	00800404 	movi	r2,16
4001837c:	9886d83a 	srl	r3,r19,r2
40018380:	011000b4 	movhi	r4,16386
40018384:	2129e984 	addi	r4,r4,-22618
40018388:	20c7883a 	add	r3,r4,r3
4001838c:	18c00003 	ldbu	r3,0(r3)
40018390:	1887883a 	add	r3,r3,r2
40018394:	00800804 	movi	r2,32
40018398:	10e5c83a 	sub	r18,r2,r3
4001839c:	9000901e 	bne	r18,zero,400185e0 <__umoddi3+0x41c>
400183a0:	982cd43a 	srli	r22,r19,16
400183a4:	8ce3c83a 	sub	r17,r17,r19
400183a8:	9d7fffcc 	andi	r21,r19,65535
400183ac:	b00b883a 	mov	r5,r22
400183b0:	8809883a 	mov	r4,r17
400183b4:	000c9a80 	call	4000c9a8 <__umodsi3>
400183b8:	8809883a 	mov	r4,r17
400183bc:	b00b883a 	mov	r5,r22
400183c0:	1021883a 	mov	r16,r2
400183c4:	000c9440 	call	4000c944 <__udivsi3>
400183c8:	8006943a 	slli	r3,r16,16
400183cc:	a008d43a 	srli	r4,r20,16
400183d0:	1545383a 	mul	r2,r2,r21
400183d4:	20c8b03a 	or	r4,r4,r3
400183d8:	2080042e 	bgeu	r4,r2,400183ec <__umoddi3+0x228>
400183dc:	24c9883a 	add	r4,r4,r19
400183e0:	24c00236 	bltu	r4,r19,400183ec <__umoddi3+0x228>
400183e4:	2080012e 	bgeu	r4,r2,400183ec <__umoddi3+0x228>
400183e8:	24c9883a 	add	r4,r4,r19
400183ec:	20a1c83a 	sub	r16,r4,r2
400183f0:	b00b883a 	mov	r5,r22
400183f4:	8009883a 	mov	r4,r16
400183f8:	000c9a80 	call	4000c9a8 <__umodsi3>
400183fc:	1023883a 	mov	r17,r2
40018400:	b00b883a 	mov	r5,r22
40018404:	8009883a 	mov	r4,r16
40018408:	000c9440 	call	4000c944 <__udivsi3>
4001840c:	8822943a 	slli	r17,r17,16
40018410:	1545383a 	mul	r2,r2,r21
40018414:	a53fffcc 	andi	r20,r20,65535
40018418:	a446b03a 	or	r3,r20,r17
4001841c:	18bfb02e 	bgeu	r3,r2,400182e0 <__alt_data_end+0xc00182e0>
40018420:	003fab06 	br	400182d0 <__alt_data_end+0xc00182d0>
40018424:	2005883a 	mov	r2,r4
40018428:	2807883a 	mov	r3,r5
4001842c:	dfc00b17 	ldw	ra,44(sp)
40018430:	df000a17 	ldw	fp,40(sp)
40018434:	ddc00917 	ldw	r23,36(sp)
40018438:	dd800817 	ldw	r22,32(sp)
4001843c:	dd400717 	ldw	r21,28(sp)
40018440:	dd000617 	ldw	r20,24(sp)
40018444:	dcc00517 	ldw	r19,20(sp)
40018448:	dc800417 	ldw	r18,16(sp)
4001844c:	dc400317 	ldw	r17,12(sp)
40018450:	dc000217 	ldw	r16,8(sp)
40018454:	dec00c04 	addi	sp,sp,48
40018458:	f800283a 	ret
4001845c:	04c03fc4 	movi	r19,255
40018460:	99c9803a 	cmpltu	r4,r19,r7
40018464:	200890fa 	slli	r4,r4,3
40018468:	003fa806 	br	4001830c <__alt_data_end+0xc001830c>
4001846c:	00803fc4 	movi	r2,255
40018470:	14c5803a 	cmpltu	r2,r2,r19
40018474:	100490fa 	slli	r2,r2,3
40018478:	003fc006 	br	4001837c <__alt_data_end+0xc001837c>
4001847c:	00804034 	movhi	r2,256
40018480:	10bfffc4 	addi	r2,r2,-1
40018484:	11808b36 	bltu	r2,r6,400186b4 <__umoddi3+0x4f0>
40018488:	01000404 	movi	r4,16
4001848c:	003f6406 	br	40018220 <__alt_data_end+0xc0018220>
40018490:	34c4d83a 	srl	r2,r6,r19
40018494:	3d0e983a 	sll	r7,r7,r20
40018498:	8cf8d83a 	srl	fp,r17,r19
4001849c:	8d10983a 	sll	r8,r17,r20
400184a0:	38aab03a 	or	r21,r7,r2
400184a4:	a82cd43a 	srli	r22,r21,16
400184a8:	84e2d83a 	srl	r17,r16,r19
400184ac:	e009883a 	mov	r4,fp
400184b0:	b00b883a 	mov	r5,r22
400184b4:	8a22b03a 	or	r17,r17,r8
400184b8:	3524983a 	sll	r18,r6,r20
400184bc:	000c9a80 	call	4000c9a8 <__umodsi3>
400184c0:	e009883a 	mov	r4,fp
400184c4:	b00b883a 	mov	r5,r22
400184c8:	102f883a 	mov	r23,r2
400184cc:	000c9440 	call	4000c944 <__udivsi3>
400184d0:	100d883a 	mov	r6,r2
400184d4:	b808943a 	slli	r4,r23,16
400184d8:	aa3fffcc 	andi	r8,r21,65535
400184dc:	8804d43a 	srli	r2,r17,16
400184e0:	41af383a 	mul	r23,r8,r6
400184e4:	8520983a 	sll	r16,r16,r20
400184e8:	1104b03a 	or	r2,r2,r4
400184ec:	15c0042e 	bgeu	r2,r23,40018500 <__umoddi3+0x33c>
400184f0:	1545883a 	add	r2,r2,r21
400184f4:	30ffffc4 	addi	r3,r6,-1
400184f8:	1540742e 	bgeu	r2,r21,400186cc <__umoddi3+0x508>
400184fc:	180d883a 	mov	r6,r3
40018500:	15efc83a 	sub	r23,r2,r23
40018504:	b00b883a 	mov	r5,r22
40018508:	b809883a 	mov	r4,r23
4001850c:	d9800115 	stw	r6,4(sp)
40018510:	da000015 	stw	r8,0(sp)
40018514:	000c9a80 	call	4000c9a8 <__umodsi3>
40018518:	b00b883a 	mov	r5,r22
4001851c:	b809883a 	mov	r4,r23
40018520:	1039883a 	mov	fp,r2
40018524:	000c9440 	call	4000c944 <__udivsi3>
40018528:	da000017 	ldw	r8,0(sp)
4001852c:	e038943a 	slli	fp,fp,16
40018530:	100b883a 	mov	r5,r2
40018534:	4089383a 	mul	r4,r8,r2
40018538:	8a3fffcc 	andi	r8,r17,65535
4001853c:	4710b03a 	or	r8,r8,fp
40018540:	d9800117 	ldw	r6,4(sp)
40018544:	4100042e 	bgeu	r8,r4,40018558 <__umoddi3+0x394>
40018548:	4551883a 	add	r8,r8,r21
4001854c:	10bfffc4 	addi	r2,r2,-1
40018550:	45405a2e 	bgeu	r8,r21,400186bc <__umoddi3+0x4f8>
40018554:	100b883a 	mov	r5,r2
40018558:	300c943a 	slli	r6,r6,16
4001855c:	91ffffcc 	andi	r7,r18,65535
40018560:	9004d43a 	srli	r2,r18,16
40018564:	314cb03a 	or	r6,r6,r5
40018568:	317fffcc 	andi	r5,r6,65535
4001856c:	300cd43a 	srli	r6,r6,16
40018570:	29d3383a 	mul	r9,r5,r7
40018574:	288b383a 	mul	r5,r5,r2
40018578:	31cf383a 	mul	r7,r6,r7
4001857c:	4806d43a 	srli	r3,r9,16
40018580:	4111c83a 	sub	r8,r8,r4
40018584:	29cb883a 	add	r5,r5,r7
40018588:	194b883a 	add	r5,r3,r5
4001858c:	3085383a 	mul	r2,r6,r2
40018590:	29c0022e 	bgeu	r5,r7,4001859c <__umoddi3+0x3d8>
40018594:	00c00074 	movhi	r3,1
40018598:	10c5883a 	add	r2,r2,r3
4001859c:	2808d43a 	srli	r4,r5,16
400185a0:	280a943a 	slli	r5,r5,16
400185a4:	4a7fffcc 	andi	r9,r9,65535
400185a8:	2085883a 	add	r2,r4,r2
400185ac:	2a4b883a 	add	r5,r5,r9
400185b0:	40803636 	bltu	r8,r2,4001868c <__umoddi3+0x4c8>
400185b4:	40804d26 	beq	r8,r2,400186ec <__umoddi3+0x528>
400185b8:	4089c83a 	sub	r4,r8,r2
400185bc:	280f883a 	mov	r7,r5
400185c0:	81cfc83a 	sub	r7,r16,r7
400185c4:	81c7803a 	cmpltu	r3,r16,r7
400185c8:	20c7c83a 	sub	r3,r4,r3
400185cc:	1cc4983a 	sll	r2,r3,r19
400185d0:	3d0ed83a 	srl	r7,r7,r20
400185d4:	1d06d83a 	srl	r3,r3,r20
400185d8:	11c4b03a 	or	r2,r2,r7
400185dc:	003f9306 	br	4001842c <__alt_data_end+0xc001842c>
400185e0:	9ca6983a 	sll	r19,r19,r18
400185e4:	88e8d83a 	srl	r20,r17,r3
400185e8:	80c4d83a 	srl	r2,r16,r3
400185ec:	982cd43a 	srli	r22,r19,16
400185f0:	8ca2983a 	sll	r17,r17,r18
400185f4:	a009883a 	mov	r4,r20
400185f8:	b00b883a 	mov	r5,r22
400185fc:	1478b03a 	or	fp,r2,r17
40018600:	000c9a80 	call	4000c9a8 <__umodsi3>
40018604:	a009883a 	mov	r4,r20
40018608:	b00b883a 	mov	r5,r22
4001860c:	1023883a 	mov	r17,r2
40018610:	000c9440 	call	4000c944 <__udivsi3>
40018614:	9d7fffcc 	andi	r21,r19,65535
40018618:	880a943a 	slli	r5,r17,16
4001861c:	e008d43a 	srli	r4,fp,16
40018620:	a885383a 	mul	r2,r21,r2
40018624:	84a8983a 	sll	r20,r16,r18
40018628:	2148b03a 	or	r4,r4,r5
4001862c:	2080042e 	bgeu	r4,r2,40018640 <__umoddi3+0x47c>
40018630:	24c9883a 	add	r4,r4,r19
40018634:	24c00236 	bltu	r4,r19,40018640 <__umoddi3+0x47c>
40018638:	2080012e 	bgeu	r4,r2,40018640 <__umoddi3+0x47c>
4001863c:	24c9883a 	add	r4,r4,r19
40018640:	20a3c83a 	sub	r17,r4,r2
40018644:	b00b883a 	mov	r5,r22
40018648:	8809883a 	mov	r4,r17
4001864c:	000c9a80 	call	4000c9a8 <__umodsi3>
40018650:	102f883a 	mov	r23,r2
40018654:	8809883a 	mov	r4,r17
40018658:	b00b883a 	mov	r5,r22
4001865c:	000c9440 	call	4000c944 <__udivsi3>
40018660:	b82e943a 	slli	r23,r23,16
40018664:	a885383a 	mul	r2,r21,r2
40018668:	e13fffcc 	andi	r4,fp,65535
4001866c:	25c8b03a 	or	r4,r4,r23
40018670:	2080042e 	bgeu	r4,r2,40018684 <__umoddi3+0x4c0>
40018674:	24c9883a 	add	r4,r4,r19
40018678:	24c00236 	bltu	r4,r19,40018684 <__umoddi3+0x4c0>
4001867c:	2080012e 	bgeu	r4,r2,40018684 <__umoddi3+0x4c0>
40018680:	24c9883a 	add	r4,r4,r19
40018684:	20a3c83a 	sub	r17,r4,r2
40018688:	003f4806 	br	400183ac <__alt_data_end+0xc00183ac>
4001868c:	2c8fc83a 	sub	r7,r5,r18
40018690:	1545c83a 	sub	r2,r2,r21
40018694:	29cb803a 	cmpltu	r5,r5,r7
40018698:	1145c83a 	sub	r2,r2,r5
4001869c:	4089c83a 	sub	r4,r8,r2
400186a0:	003fc706 	br	400185c0 <__alt_data_end+0xc00185c0>
400186a4:	01000604 	movi	r4,24
400186a8:	003f1806 	br	4001830c <__alt_data_end+0xc001830c>
400186ac:	00800604 	movi	r2,24
400186b0:	003f3206 	br	4001837c <__alt_data_end+0xc001837c>
400186b4:	01000604 	movi	r4,24
400186b8:	003ed906 	br	40018220 <__alt_data_end+0xc0018220>
400186bc:	413fa52e 	bgeu	r8,r4,40018554 <__alt_data_end+0xc0018554>
400186c0:	297fff84 	addi	r5,r5,-2
400186c4:	4551883a 	add	r8,r8,r21
400186c8:	003fa306 	br	40018558 <__alt_data_end+0xc0018558>
400186cc:	15ff8b2e 	bgeu	r2,r23,400184fc <__alt_data_end+0xc00184fc>
400186d0:	31bfff84 	addi	r6,r6,-2
400186d4:	1545883a 	add	r2,r2,r21
400186d8:	003f8906 	br	40018500 <__alt_data_end+0xc0018500>
400186dc:	24c9883a 	add	r4,r4,r19
400186e0:	003eee06 	br	4001829c <__alt_data_end+0xc001829c>
400186e4:	8005883a 	mov	r2,r16
400186e8:	003f1706 	br	40018348 <__alt_data_end+0xc0018348>
400186ec:	817fe736 	bltu	r16,r5,4001868c <__alt_data_end+0xc001868c>
400186f0:	280f883a 	mov	r7,r5
400186f4:	0009883a 	mov	r4,zero
400186f8:	003fb106 	br	400185c0 <__alt_data_end+0xc00185c0>

400186fc <__eqdf2>:
400186fc:	2804d53a 	srli	r2,r5,20
40018700:	3806d53a 	srli	r3,r7,20
40018704:	02000434 	movhi	r8,16
40018708:	423fffc4 	addi	r8,r8,-1
4001870c:	1081ffcc 	andi	r2,r2,2047
40018710:	0281ffc4 	movi	r10,2047
40018714:	2a12703a 	and	r9,r5,r8
40018718:	18c1ffcc 	andi	r3,r3,2047
4001871c:	3a10703a 	and	r8,r7,r8
40018720:	280ad7fa 	srli	r5,r5,31
40018724:	380ed7fa 	srli	r7,r7,31
40018728:	12801026 	beq	r2,r10,4001876c <__eqdf2+0x70>
4001872c:	0281ffc4 	movi	r10,2047
40018730:	1a800a26 	beq	r3,r10,4001875c <__eqdf2+0x60>
40018734:	10c00226 	beq	r2,r3,40018740 <__eqdf2+0x44>
40018738:	00800044 	movi	r2,1
4001873c:	f800283a 	ret
40018740:	4a3ffd1e 	bne	r9,r8,40018738 <__alt_data_end+0xc0018738>
40018744:	21bffc1e 	bne	r4,r6,40018738 <__alt_data_end+0xc0018738>
40018748:	29c00c26 	beq	r5,r7,4001877c <__eqdf2+0x80>
4001874c:	103ffa1e 	bne	r2,zero,40018738 <__alt_data_end+0xc0018738>
40018750:	2244b03a 	or	r2,r4,r9
40018754:	1004c03a 	cmpne	r2,r2,zero
40018758:	f800283a 	ret
4001875c:	3214b03a 	or	r10,r6,r8
40018760:	503ff426 	beq	r10,zero,40018734 <__alt_data_end+0xc0018734>
40018764:	00800044 	movi	r2,1
40018768:	f800283a 	ret
4001876c:	2254b03a 	or	r10,r4,r9
40018770:	503fee26 	beq	r10,zero,4001872c <__alt_data_end+0xc001872c>
40018774:	00800044 	movi	r2,1
40018778:	f800283a 	ret
4001877c:	0005883a 	mov	r2,zero
40018780:	f800283a 	ret

40018784 <__gedf2>:
40018784:	2804d53a 	srli	r2,r5,20
40018788:	3806d53a 	srli	r3,r7,20
4001878c:	02000434 	movhi	r8,16
40018790:	423fffc4 	addi	r8,r8,-1
40018794:	1081ffcc 	andi	r2,r2,2047
40018798:	0241ffc4 	movi	r9,2047
4001879c:	2a14703a 	and	r10,r5,r8
400187a0:	18c1ffcc 	andi	r3,r3,2047
400187a4:	3a10703a 	and	r8,r7,r8
400187a8:	280ad7fa 	srli	r5,r5,31
400187ac:	380ed7fa 	srli	r7,r7,31
400187b0:	12401d26 	beq	r2,r9,40018828 <__gedf2+0xa4>
400187b4:	0241ffc4 	movi	r9,2047
400187b8:	1a401226 	beq	r3,r9,40018804 <__gedf2+0x80>
400187bc:	1000081e 	bne	r2,zero,400187e0 <__gedf2+0x5c>
400187c0:	2296b03a 	or	r11,r4,r10
400187c4:	5813003a 	cmpeq	r9,r11,zero
400187c8:	1800091e 	bne	r3,zero,400187f0 <__gedf2+0x6c>
400187cc:	3218b03a 	or	r12,r6,r8
400187d0:	6000071e 	bne	r12,zero,400187f0 <__gedf2+0x6c>
400187d4:	0005883a 	mov	r2,zero
400187d8:	5800101e 	bne	r11,zero,4001881c <__gedf2+0x98>
400187dc:	f800283a 	ret
400187e0:	18000c1e 	bne	r3,zero,40018814 <__gedf2+0x90>
400187e4:	3212b03a 	or	r9,r6,r8
400187e8:	48000c26 	beq	r9,zero,4001881c <__gedf2+0x98>
400187ec:	0013883a 	mov	r9,zero
400187f0:	39c03fcc 	andi	r7,r7,255
400187f4:	48000826 	beq	r9,zero,40018818 <__gedf2+0x94>
400187f8:	38000926 	beq	r7,zero,40018820 <__gedf2+0x9c>
400187fc:	00800044 	movi	r2,1
40018800:	f800283a 	ret
40018804:	3212b03a 	or	r9,r6,r8
40018808:	483fec26 	beq	r9,zero,400187bc <__alt_data_end+0xc00187bc>
4001880c:	00bfff84 	movi	r2,-2
40018810:	f800283a 	ret
40018814:	39c03fcc 	andi	r7,r7,255
40018818:	29c00626 	beq	r5,r7,40018834 <__gedf2+0xb0>
4001881c:	283ff726 	beq	r5,zero,400187fc <__alt_data_end+0xc00187fc>
40018820:	00bfffc4 	movi	r2,-1
40018824:	f800283a 	ret
40018828:	2292b03a 	or	r9,r4,r10
4001882c:	483fe126 	beq	r9,zero,400187b4 <__alt_data_end+0xc00187b4>
40018830:	003ff606 	br	4001880c <__alt_data_end+0xc001880c>
40018834:	18bff916 	blt	r3,r2,4001881c <__alt_data_end+0xc001881c>
40018838:	10c00316 	blt	r2,r3,40018848 <__gedf2+0xc4>
4001883c:	42bff736 	bltu	r8,r10,4001881c <__alt_data_end+0xc001881c>
40018840:	52000326 	beq	r10,r8,40018850 <__gedf2+0xcc>
40018844:	5200042e 	bgeu	r10,r8,40018858 <__gedf2+0xd4>
40018848:	283fec1e 	bne	r5,zero,400187fc <__alt_data_end+0xc00187fc>
4001884c:	003ff406 	br	40018820 <__alt_data_end+0xc0018820>
40018850:	313ff236 	bltu	r6,r4,4001881c <__alt_data_end+0xc001881c>
40018854:	21bffc36 	bltu	r4,r6,40018848 <__alt_data_end+0xc0018848>
40018858:	0005883a 	mov	r2,zero
4001885c:	f800283a 	ret

40018860 <__ledf2>:
40018860:	2804d53a 	srli	r2,r5,20
40018864:	3810d53a 	srli	r8,r7,20
40018868:	00c00434 	movhi	r3,16
4001886c:	18ffffc4 	addi	r3,r3,-1
40018870:	1081ffcc 	andi	r2,r2,2047
40018874:	0241ffc4 	movi	r9,2047
40018878:	28d4703a 	and	r10,r5,r3
4001887c:	4201ffcc 	andi	r8,r8,2047
40018880:	38c6703a 	and	r3,r7,r3
40018884:	280ad7fa 	srli	r5,r5,31
40018888:	380ed7fa 	srli	r7,r7,31
4001888c:	12401f26 	beq	r2,r9,4001890c <__ledf2+0xac>
40018890:	0241ffc4 	movi	r9,2047
40018894:	42401426 	beq	r8,r9,400188e8 <__ledf2+0x88>
40018898:	1000091e 	bne	r2,zero,400188c0 <__ledf2+0x60>
4001889c:	2296b03a 	or	r11,r4,r10
400188a0:	5813003a 	cmpeq	r9,r11,zero
400188a4:	29403fcc 	andi	r5,r5,255
400188a8:	40000a1e 	bne	r8,zero,400188d4 <__ledf2+0x74>
400188ac:	30d8b03a 	or	r12,r6,r3
400188b0:	6000081e 	bne	r12,zero,400188d4 <__ledf2+0x74>
400188b4:	0005883a 	mov	r2,zero
400188b8:	5800111e 	bne	r11,zero,40018900 <__ledf2+0xa0>
400188bc:	f800283a 	ret
400188c0:	29403fcc 	andi	r5,r5,255
400188c4:	40000c1e 	bne	r8,zero,400188f8 <__ledf2+0x98>
400188c8:	30d2b03a 	or	r9,r6,r3
400188cc:	48000c26 	beq	r9,zero,40018900 <__ledf2+0xa0>
400188d0:	0013883a 	mov	r9,zero
400188d4:	39c03fcc 	andi	r7,r7,255
400188d8:	48000826 	beq	r9,zero,400188fc <__ledf2+0x9c>
400188dc:	38001126 	beq	r7,zero,40018924 <__ledf2+0xc4>
400188e0:	00800044 	movi	r2,1
400188e4:	f800283a 	ret
400188e8:	30d2b03a 	or	r9,r6,r3
400188ec:	483fea26 	beq	r9,zero,40018898 <__alt_data_end+0xc0018898>
400188f0:	00800084 	movi	r2,2
400188f4:	f800283a 	ret
400188f8:	39c03fcc 	andi	r7,r7,255
400188fc:	39400726 	beq	r7,r5,4001891c <__ledf2+0xbc>
40018900:	2800081e 	bne	r5,zero,40018924 <__ledf2+0xc4>
40018904:	00800044 	movi	r2,1
40018908:	f800283a 	ret
4001890c:	2292b03a 	or	r9,r4,r10
40018910:	483fdf26 	beq	r9,zero,40018890 <__alt_data_end+0xc0018890>
40018914:	00800084 	movi	r2,2
40018918:	f800283a 	ret
4001891c:	4080030e 	bge	r8,r2,4001892c <__ledf2+0xcc>
40018920:	383fef26 	beq	r7,zero,400188e0 <__alt_data_end+0xc00188e0>
40018924:	00bfffc4 	movi	r2,-1
40018928:	f800283a 	ret
4001892c:	123feb16 	blt	r2,r8,400188dc <__alt_data_end+0xc00188dc>
40018930:	1abff336 	bltu	r3,r10,40018900 <__alt_data_end+0xc0018900>
40018934:	50c00326 	beq	r10,r3,40018944 <__ledf2+0xe4>
40018938:	50c0042e 	bgeu	r10,r3,4001894c <__ledf2+0xec>
4001893c:	283fe81e 	bne	r5,zero,400188e0 <__alt_data_end+0xc00188e0>
40018940:	003ff806 	br	40018924 <__alt_data_end+0xc0018924>
40018944:	313fee36 	bltu	r6,r4,40018900 <__alt_data_end+0xc0018900>
40018948:	21bffc36 	bltu	r4,r6,4001893c <__alt_data_end+0xc001893c>
4001894c:	0005883a 	mov	r2,zero
40018950:	f800283a 	ret

40018954 <__subdf3>:
40018954:	02000434 	movhi	r8,16
40018958:	423fffc4 	addi	r8,r8,-1
4001895c:	defffb04 	addi	sp,sp,-20
40018960:	2a14703a 	and	r10,r5,r8
40018964:	3812d53a 	srli	r9,r7,20
40018968:	3a10703a 	and	r8,r7,r8
4001896c:	2006d77a 	srli	r3,r4,29
40018970:	3004d77a 	srli	r2,r6,29
40018974:	dc000015 	stw	r16,0(sp)
40018978:	501490fa 	slli	r10,r10,3
4001897c:	2820d53a 	srli	r16,r5,20
40018980:	401090fa 	slli	r8,r8,3
40018984:	dc800215 	stw	r18,8(sp)
40018988:	dc400115 	stw	r17,4(sp)
4001898c:	dfc00415 	stw	ra,16(sp)
40018990:	202290fa 	slli	r17,r4,3
40018994:	dcc00315 	stw	r19,12(sp)
40018998:	4a41ffcc 	andi	r9,r9,2047
4001899c:	0101ffc4 	movi	r4,2047
400189a0:	2824d7fa 	srli	r18,r5,31
400189a4:	8401ffcc 	andi	r16,r16,2047
400189a8:	50c6b03a 	or	r3,r10,r3
400189ac:	380ed7fa 	srli	r7,r7,31
400189b0:	408ab03a 	or	r5,r8,r2
400189b4:	300c90fa 	slli	r6,r6,3
400189b8:	49009626 	beq	r9,r4,40018c14 <__subdf3+0x2c0>
400189bc:	39c0005c 	xori	r7,r7,1
400189c0:	8245c83a 	sub	r2,r16,r9
400189c4:	3c807426 	beq	r7,r18,40018b98 <__subdf3+0x244>
400189c8:	0080af0e 	bge	zero,r2,40018c88 <__subdf3+0x334>
400189cc:	48002a1e 	bne	r9,zero,40018a78 <__subdf3+0x124>
400189d0:	2988b03a 	or	r4,r5,r6
400189d4:	20009a1e 	bne	r4,zero,40018c40 <__subdf3+0x2ec>
400189d8:	888001cc 	andi	r2,r17,7
400189dc:	10000726 	beq	r2,zero,400189fc <__subdf3+0xa8>
400189e0:	888003cc 	andi	r2,r17,15
400189e4:	01000104 	movi	r4,4
400189e8:	11000426 	beq	r2,r4,400189fc <__subdf3+0xa8>
400189ec:	890b883a 	add	r5,r17,r4
400189f0:	2c63803a 	cmpltu	r17,r5,r17
400189f4:	1c47883a 	add	r3,r3,r17
400189f8:	2823883a 	mov	r17,r5
400189fc:	1880202c 	andhi	r2,r3,128
40018a00:	10005926 	beq	r2,zero,40018b68 <__subdf3+0x214>
40018a04:	84000044 	addi	r16,r16,1
40018a08:	0081ffc4 	movi	r2,2047
40018a0c:	8080be26 	beq	r16,r2,40018d08 <__subdf3+0x3b4>
40018a10:	017fe034 	movhi	r5,65408
40018a14:	297fffc4 	addi	r5,r5,-1
40018a18:	1946703a 	and	r3,r3,r5
40018a1c:	1804977a 	slli	r2,r3,29
40018a20:	1806927a 	slli	r3,r3,9
40018a24:	8822d0fa 	srli	r17,r17,3
40018a28:	8401ffcc 	andi	r16,r16,2047
40018a2c:	180ad33a 	srli	r5,r3,12
40018a30:	9100004c 	andi	r4,r18,1
40018a34:	1444b03a 	or	r2,r2,r17
40018a38:	80c1ffcc 	andi	r3,r16,2047
40018a3c:	1820953a 	slli	r16,r3,20
40018a40:	20c03fcc 	andi	r3,r4,255
40018a44:	180897fa 	slli	r4,r3,31
40018a48:	00c00434 	movhi	r3,16
40018a4c:	18ffffc4 	addi	r3,r3,-1
40018a50:	28c6703a 	and	r3,r5,r3
40018a54:	1c06b03a 	or	r3,r3,r16
40018a58:	1906b03a 	or	r3,r3,r4
40018a5c:	dfc00417 	ldw	ra,16(sp)
40018a60:	dcc00317 	ldw	r19,12(sp)
40018a64:	dc800217 	ldw	r18,8(sp)
40018a68:	dc400117 	ldw	r17,4(sp)
40018a6c:	dc000017 	ldw	r16,0(sp)
40018a70:	dec00504 	addi	sp,sp,20
40018a74:	f800283a 	ret
40018a78:	0101ffc4 	movi	r4,2047
40018a7c:	813fd626 	beq	r16,r4,400189d8 <__alt_data_end+0xc00189d8>
40018a80:	29402034 	orhi	r5,r5,128
40018a84:	01000e04 	movi	r4,56
40018a88:	2080a316 	blt	r4,r2,40018d18 <__subdf3+0x3c4>
40018a8c:	010007c4 	movi	r4,31
40018a90:	2080c616 	blt	r4,r2,40018dac <__subdf3+0x458>
40018a94:	01000804 	movi	r4,32
40018a98:	2089c83a 	sub	r4,r4,r2
40018a9c:	2910983a 	sll	r8,r5,r4
40018aa0:	308ed83a 	srl	r7,r6,r2
40018aa4:	3108983a 	sll	r4,r6,r4
40018aa8:	2884d83a 	srl	r2,r5,r2
40018aac:	41ccb03a 	or	r6,r8,r7
40018ab0:	2008c03a 	cmpne	r4,r4,zero
40018ab4:	310cb03a 	or	r6,r6,r4
40018ab8:	898dc83a 	sub	r6,r17,r6
40018abc:	89a3803a 	cmpltu	r17,r17,r6
40018ac0:	1887c83a 	sub	r3,r3,r2
40018ac4:	1c47c83a 	sub	r3,r3,r17
40018ac8:	3023883a 	mov	r17,r6
40018acc:	1880202c 	andhi	r2,r3,128
40018ad0:	10002326 	beq	r2,zero,40018b60 <__subdf3+0x20c>
40018ad4:	04c02034 	movhi	r19,128
40018ad8:	9cffffc4 	addi	r19,r19,-1
40018adc:	1ce6703a 	and	r19,r3,r19
40018ae0:	98007a26 	beq	r19,zero,40018ccc <__subdf3+0x378>
40018ae4:	9809883a 	mov	r4,r19
40018ae8:	000e3540 	call	4000e354 <__clzsi2>
40018aec:	113ffe04 	addi	r4,r2,-8
40018af0:	00c007c4 	movi	r3,31
40018af4:	19007b16 	blt	r3,r4,40018ce4 <__subdf3+0x390>
40018af8:	00800804 	movi	r2,32
40018afc:	1105c83a 	sub	r2,r2,r4
40018b00:	8884d83a 	srl	r2,r17,r2
40018b04:	9906983a 	sll	r3,r19,r4
40018b08:	8922983a 	sll	r17,r17,r4
40018b0c:	10c4b03a 	or	r2,r2,r3
40018b10:	24007816 	blt	r4,r16,40018cf4 <__subdf3+0x3a0>
40018b14:	2421c83a 	sub	r16,r4,r16
40018b18:	80c00044 	addi	r3,r16,1
40018b1c:	010007c4 	movi	r4,31
40018b20:	20c09516 	blt	r4,r3,40018d78 <__subdf3+0x424>
40018b24:	01400804 	movi	r5,32
40018b28:	28cbc83a 	sub	r5,r5,r3
40018b2c:	88c8d83a 	srl	r4,r17,r3
40018b30:	8962983a 	sll	r17,r17,r5
40018b34:	114a983a 	sll	r5,r2,r5
40018b38:	10c6d83a 	srl	r3,r2,r3
40018b3c:	8804c03a 	cmpne	r2,r17,zero
40018b40:	290ab03a 	or	r5,r5,r4
40018b44:	28a2b03a 	or	r17,r5,r2
40018b48:	0021883a 	mov	r16,zero
40018b4c:	003fa206 	br	400189d8 <__alt_data_end+0xc00189d8>
40018b50:	2090b03a 	or	r8,r4,r2
40018b54:	40018e26 	beq	r8,zero,40019190 <__subdf3+0x83c>
40018b58:	1007883a 	mov	r3,r2
40018b5c:	2023883a 	mov	r17,r4
40018b60:	888001cc 	andi	r2,r17,7
40018b64:	103f9e1e 	bne	r2,zero,400189e0 <__alt_data_end+0xc00189e0>
40018b68:	1804977a 	slli	r2,r3,29
40018b6c:	8822d0fa 	srli	r17,r17,3
40018b70:	1810d0fa 	srli	r8,r3,3
40018b74:	9100004c 	andi	r4,r18,1
40018b78:	1444b03a 	or	r2,r2,r17
40018b7c:	00c1ffc4 	movi	r3,2047
40018b80:	80c02826 	beq	r16,r3,40018c24 <__subdf3+0x2d0>
40018b84:	01400434 	movhi	r5,16
40018b88:	297fffc4 	addi	r5,r5,-1
40018b8c:	80e0703a 	and	r16,r16,r3
40018b90:	414a703a 	and	r5,r8,r5
40018b94:	003fa806 	br	40018a38 <__alt_data_end+0xc0018a38>
40018b98:	0080630e 	bge	zero,r2,40018d28 <__subdf3+0x3d4>
40018b9c:	48003026 	beq	r9,zero,40018c60 <__subdf3+0x30c>
40018ba0:	0101ffc4 	movi	r4,2047
40018ba4:	813f8c26 	beq	r16,r4,400189d8 <__alt_data_end+0xc00189d8>
40018ba8:	29402034 	orhi	r5,r5,128
40018bac:	01000e04 	movi	r4,56
40018bb0:	2080a90e 	bge	r4,r2,40018e58 <__subdf3+0x504>
40018bb4:	298cb03a 	or	r6,r5,r6
40018bb8:	3012c03a 	cmpne	r9,r6,zero
40018bbc:	0005883a 	mov	r2,zero
40018bc0:	4c53883a 	add	r9,r9,r17
40018bc4:	4c63803a 	cmpltu	r17,r9,r17
40018bc8:	10c7883a 	add	r3,r2,r3
40018bcc:	88c7883a 	add	r3,r17,r3
40018bd0:	4823883a 	mov	r17,r9
40018bd4:	1880202c 	andhi	r2,r3,128
40018bd8:	1000d026 	beq	r2,zero,40018f1c <__subdf3+0x5c8>
40018bdc:	84000044 	addi	r16,r16,1
40018be0:	0081ffc4 	movi	r2,2047
40018be4:	8080fe26 	beq	r16,r2,40018fe0 <__subdf3+0x68c>
40018be8:	00bfe034 	movhi	r2,65408
40018bec:	10bfffc4 	addi	r2,r2,-1
40018bf0:	1886703a 	and	r3,r3,r2
40018bf4:	880ad07a 	srli	r5,r17,1
40018bf8:	180497fa 	slli	r2,r3,31
40018bfc:	8900004c 	andi	r4,r17,1
40018c00:	2922b03a 	or	r17,r5,r4
40018c04:	1806d07a 	srli	r3,r3,1
40018c08:	1462b03a 	or	r17,r2,r17
40018c0c:	3825883a 	mov	r18,r7
40018c10:	003f7106 	br	400189d8 <__alt_data_end+0xc00189d8>
40018c14:	2984b03a 	or	r2,r5,r6
40018c18:	103f6826 	beq	r2,zero,400189bc <__alt_data_end+0xc00189bc>
40018c1c:	39c03fcc 	andi	r7,r7,255
40018c20:	003f6706 	br	400189c0 <__alt_data_end+0xc00189c0>
40018c24:	4086b03a 	or	r3,r8,r2
40018c28:	18015226 	beq	r3,zero,40019174 <__subdf3+0x820>
40018c2c:	00c00434 	movhi	r3,16
40018c30:	41400234 	orhi	r5,r8,8
40018c34:	18ffffc4 	addi	r3,r3,-1
40018c38:	28ca703a 	and	r5,r5,r3
40018c3c:	003f7e06 	br	40018a38 <__alt_data_end+0xc0018a38>
40018c40:	10bfffc4 	addi	r2,r2,-1
40018c44:	1000491e 	bne	r2,zero,40018d6c <__subdf3+0x418>
40018c48:	898fc83a 	sub	r7,r17,r6
40018c4c:	89e3803a 	cmpltu	r17,r17,r7
40018c50:	1947c83a 	sub	r3,r3,r5
40018c54:	1c47c83a 	sub	r3,r3,r17
40018c58:	3823883a 	mov	r17,r7
40018c5c:	003f9b06 	br	40018acc <__alt_data_end+0xc0018acc>
40018c60:	2988b03a 	or	r4,r5,r6
40018c64:	203f5c26 	beq	r4,zero,400189d8 <__alt_data_end+0xc00189d8>
40018c68:	10bfffc4 	addi	r2,r2,-1
40018c6c:	1000931e 	bne	r2,zero,40018ebc <__subdf3+0x568>
40018c70:	898d883a 	add	r6,r17,r6
40018c74:	3463803a 	cmpltu	r17,r6,r17
40018c78:	1947883a 	add	r3,r3,r5
40018c7c:	88c7883a 	add	r3,r17,r3
40018c80:	3023883a 	mov	r17,r6
40018c84:	003fd306 	br	40018bd4 <__alt_data_end+0xc0018bd4>
40018c88:	1000541e 	bne	r2,zero,40018ddc <__subdf3+0x488>
40018c8c:	80800044 	addi	r2,r16,1
40018c90:	1081ffcc 	andi	r2,r2,2047
40018c94:	01000044 	movi	r4,1
40018c98:	2080a20e 	bge	r4,r2,40018f24 <__subdf3+0x5d0>
40018c9c:	8989c83a 	sub	r4,r17,r6
40018ca0:	8905803a 	cmpltu	r2,r17,r4
40018ca4:	1967c83a 	sub	r19,r3,r5
40018ca8:	98a7c83a 	sub	r19,r19,r2
40018cac:	9880202c 	andhi	r2,r19,128
40018cb0:	10006326 	beq	r2,zero,40018e40 <__subdf3+0x4ec>
40018cb4:	3463c83a 	sub	r17,r6,r17
40018cb8:	28c7c83a 	sub	r3,r5,r3
40018cbc:	344d803a 	cmpltu	r6,r6,r17
40018cc0:	19a7c83a 	sub	r19,r3,r6
40018cc4:	3825883a 	mov	r18,r7
40018cc8:	983f861e 	bne	r19,zero,40018ae4 <__alt_data_end+0xc0018ae4>
40018ccc:	8809883a 	mov	r4,r17
40018cd0:	000e3540 	call	4000e354 <__clzsi2>
40018cd4:	10800804 	addi	r2,r2,32
40018cd8:	113ffe04 	addi	r4,r2,-8
40018cdc:	00c007c4 	movi	r3,31
40018ce0:	193f850e 	bge	r3,r4,40018af8 <__alt_data_end+0xc0018af8>
40018ce4:	10bff604 	addi	r2,r2,-40
40018ce8:	8884983a 	sll	r2,r17,r2
40018cec:	0023883a 	mov	r17,zero
40018cf0:	243f880e 	bge	r4,r16,40018b14 <__alt_data_end+0xc0018b14>
40018cf4:	00ffe034 	movhi	r3,65408
40018cf8:	18ffffc4 	addi	r3,r3,-1
40018cfc:	8121c83a 	sub	r16,r16,r4
40018d00:	10c6703a 	and	r3,r2,r3
40018d04:	003f3406 	br	400189d8 <__alt_data_end+0xc00189d8>
40018d08:	9100004c 	andi	r4,r18,1
40018d0c:	000b883a 	mov	r5,zero
40018d10:	0005883a 	mov	r2,zero
40018d14:	003f4806 	br	40018a38 <__alt_data_end+0xc0018a38>
40018d18:	298cb03a 	or	r6,r5,r6
40018d1c:	300cc03a 	cmpne	r6,r6,zero
40018d20:	0005883a 	mov	r2,zero
40018d24:	003f6406 	br	40018ab8 <__alt_data_end+0xc0018ab8>
40018d28:	10009a1e 	bne	r2,zero,40018f94 <__subdf3+0x640>
40018d2c:	82400044 	addi	r9,r16,1
40018d30:	4881ffcc 	andi	r2,r9,2047
40018d34:	02800044 	movi	r10,1
40018d38:	5080670e 	bge	r10,r2,40018ed8 <__subdf3+0x584>
40018d3c:	0081ffc4 	movi	r2,2047
40018d40:	4880af26 	beq	r9,r2,40019000 <__subdf3+0x6ac>
40018d44:	898d883a 	add	r6,r17,r6
40018d48:	1945883a 	add	r2,r3,r5
40018d4c:	3447803a 	cmpltu	r3,r6,r17
40018d50:	1887883a 	add	r3,r3,r2
40018d54:	182297fa 	slli	r17,r3,31
40018d58:	300cd07a 	srli	r6,r6,1
40018d5c:	1806d07a 	srli	r3,r3,1
40018d60:	4821883a 	mov	r16,r9
40018d64:	89a2b03a 	or	r17,r17,r6
40018d68:	003f1b06 	br	400189d8 <__alt_data_end+0xc00189d8>
40018d6c:	0101ffc4 	movi	r4,2047
40018d70:	813f441e 	bne	r16,r4,40018a84 <__alt_data_end+0xc0018a84>
40018d74:	003f1806 	br	400189d8 <__alt_data_end+0xc00189d8>
40018d78:	843ff844 	addi	r16,r16,-31
40018d7c:	01400804 	movi	r5,32
40018d80:	1408d83a 	srl	r4,r2,r16
40018d84:	19405026 	beq	r3,r5,40018ec8 <__subdf3+0x574>
40018d88:	01401004 	movi	r5,64
40018d8c:	28c7c83a 	sub	r3,r5,r3
40018d90:	10c4983a 	sll	r2,r2,r3
40018d94:	88a2b03a 	or	r17,r17,r2
40018d98:	8822c03a 	cmpne	r17,r17,zero
40018d9c:	2462b03a 	or	r17,r4,r17
40018da0:	0007883a 	mov	r3,zero
40018da4:	0021883a 	mov	r16,zero
40018da8:	003f6d06 	br	40018b60 <__alt_data_end+0xc0018b60>
40018dac:	11fff804 	addi	r7,r2,-32
40018db0:	01000804 	movi	r4,32
40018db4:	29ced83a 	srl	r7,r5,r7
40018db8:	11004526 	beq	r2,r4,40018ed0 <__subdf3+0x57c>
40018dbc:	01001004 	movi	r4,64
40018dc0:	2089c83a 	sub	r4,r4,r2
40018dc4:	2904983a 	sll	r2,r5,r4
40018dc8:	118cb03a 	or	r6,r2,r6
40018dcc:	300cc03a 	cmpne	r6,r6,zero
40018dd0:	398cb03a 	or	r6,r7,r6
40018dd4:	0005883a 	mov	r2,zero
40018dd8:	003f3706 	br	40018ab8 <__alt_data_end+0xc0018ab8>
40018ddc:	80002a26 	beq	r16,zero,40018e88 <__subdf3+0x534>
40018de0:	0101ffc4 	movi	r4,2047
40018de4:	49006626 	beq	r9,r4,40018f80 <__subdf3+0x62c>
40018de8:	0085c83a 	sub	r2,zero,r2
40018dec:	18c02034 	orhi	r3,r3,128
40018df0:	01000e04 	movi	r4,56
40018df4:	20807e16 	blt	r4,r2,40018ff0 <__subdf3+0x69c>
40018df8:	010007c4 	movi	r4,31
40018dfc:	2080e716 	blt	r4,r2,4001919c <__subdf3+0x848>
40018e00:	01000804 	movi	r4,32
40018e04:	2089c83a 	sub	r4,r4,r2
40018e08:	1914983a 	sll	r10,r3,r4
40018e0c:	8890d83a 	srl	r8,r17,r2
40018e10:	8908983a 	sll	r4,r17,r4
40018e14:	1884d83a 	srl	r2,r3,r2
40018e18:	5222b03a 	or	r17,r10,r8
40018e1c:	2006c03a 	cmpne	r3,r4,zero
40018e20:	88e2b03a 	or	r17,r17,r3
40018e24:	3463c83a 	sub	r17,r6,r17
40018e28:	2885c83a 	sub	r2,r5,r2
40018e2c:	344d803a 	cmpltu	r6,r6,r17
40018e30:	1187c83a 	sub	r3,r2,r6
40018e34:	4821883a 	mov	r16,r9
40018e38:	3825883a 	mov	r18,r7
40018e3c:	003f2306 	br	40018acc <__alt_data_end+0xc0018acc>
40018e40:	24d0b03a 	or	r8,r4,r19
40018e44:	40001b1e 	bne	r8,zero,40018eb4 <__subdf3+0x560>
40018e48:	0005883a 	mov	r2,zero
40018e4c:	0009883a 	mov	r4,zero
40018e50:	0021883a 	mov	r16,zero
40018e54:	003f4906 	br	40018b7c <__alt_data_end+0xc0018b7c>
40018e58:	010007c4 	movi	r4,31
40018e5c:	20803a16 	blt	r4,r2,40018f48 <__subdf3+0x5f4>
40018e60:	01000804 	movi	r4,32
40018e64:	2089c83a 	sub	r4,r4,r2
40018e68:	2912983a 	sll	r9,r5,r4
40018e6c:	3090d83a 	srl	r8,r6,r2
40018e70:	3108983a 	sll	r4,r6,r4
40018e74:	2884d83a 	srl	r2,r5,r2
40018e78:	4a12b03a 	or	r9,r9,r8
40018e7c:	2008c03a 	cmpne	r4,r4,zero
40018e80:	4912b03a 	or	r9,r9,r4
40018e84:	003f4e06 	br	40018bc0 <__alt_data_end+0xc0018bc0>
40018e88:	1c48b03a 	or	r4,r3,r17
40018e8c:	20003c26 	beq	r4,zero,40018f80 <__subdf3+0x62c>
40018e90:	0084303a 	nor	r2,zero,r2
40018e94:	1000381e 	bne	r2,zero,40018f78 <__subdf3+0x624>
40018e98:	3463c83a 	sub	r17,r6,r17
40018e9c:	28c5c83a 	sub	r2,r5,r3
40018ea0:	344d803a 	cmpltu	r6,r6,r17
40018ea4:	1187c83a 	sub	r3,r2,r6
40018ea8:	4821883a 	mov	r16,r9
40018eac:	3825883a 	mov	r18,r7
40018eb0:	003f0606 	br	40018acc <__alt_data_end+0xc0018acc>
40018eb4:	2023883a 	mov	r17,r4
40018eb8:	003f0906 	br	40018ae0 <__alt_data_end+0xc0018ae0>
40018ebc:	0101ffc4 	movi	r4,2047
40018ec0:	813f3a1e 	bne	r16,r4,40018bac <__alt_data_end+0xc0018bac>
40018ec4:	003ec406 	br	400189d8 <__alt_data_end+0xc00189d8>
40018ec8:	0005883a 	mov	r2,zero
40018ecc:	003fb106 	br	40018d94 <__alt_data_end+0xc0018d94>
40018ed0:	0005883a 	mov	r2,zero
40018ed4:	003fbc06 	br	40018dc8 <__alt_data_end+0xc0018dc8>
40018ed8:	1c44b03a 	or	r2,r3,r17
40018edc:	80008e1e 	bne	r16,zero,40019118 <__subdf3+0x7c4>
40018ee0:	1000c826 	beq	r2,zero,40019204 <__subdf3+0x8b0>
40018ee4:	2984b03a 	or	r2,r5,r6
40018ee8:	103ebb26 	beq	r2,zero,400189d8 <__alt_data_end+0xc00189d8>
40018eec:	8989883a 	add	r4,r17,r6
40018ef0:	1945883a 	add	r2,r3,r5
40018ef4:	2447803a 	cmpltu	r3,r4,r17
40018ef8:	1887883a 	add	r3,r3,r2
40018efc:	1880202c 	andhi	r2,r3,128
40018f00:	2023883a 	mov	r17,r4
40018f04:	103f1626 	beq	r2,zero,40018b60 <__alt_data_end+0xc0018b60>
40018f08:	00bfe034 	movhi	r2,65408
40018f0c:	10bfffc4 	addi	r2,r2,-1
40018f10:	5021883a 	mov	r16,r10
40018f14:	1886703a 	and	r3,r3,r2
40018f18:	003eaf06 	br	400189d8 <__alt_data_end+0xc00189d8>
40018f1c:	3825883a 	mov	r18,r7
40018f20:	003f0f06 	br	40018b60 <__alt_data_end+0xc0018b60>
40018f24:	1c44b03a 	or	r2,r3,r17
40018f28:	8000251e 	bne	r16,zero,40018fc0 <__subdf3+0x66c>
40018f2c:	1000661e 	bne	r2,zero,400190c8 <__subdf3+0x774>
40018f30:	2990b03a 	or	r8,r5,r6
40018f34:	40009626 	beq	r8,zero,40019190 <__subdf3+0x83c>
40018f38:	2807883a 	mov	r3,r5
40018f3c:	3023883a 	mov	r17,r6
40018f40:	3825883a 	mov	r18,r7
40018f44:	003ea406 	br	400189d8 <__alt_data_end+0xc00189d8>
40018f48:	127ff804 	addi	r9,r2,-32
40018f4c:	01000804 	movi	r4,32
40018f50:	2a52d83a 	srl	r9,r5,r9
40018f54:	11008c26 	beq	r2,r4,40019188 <__subdf3+0x834>
40018f58:	01001004 	movi	r4,64
40018f5c:	2085c83a 	sub	r2,r4,r2
40018f60:	2884983a 	sll	r2,r5,r2
40018f64:	118cb03a 	or	r6,r2,r6
40018f68:	300cc03a 	cmpne	r6,r6,zero
40018f6c:	4992b03a 	or	r9,r9,r6
40018f70:	0005883a 	mov	r2,zero
40018f74:	003f1206 	br	40018bc0 <__alt_data_end+0xc0018bc0>
40018f78:	0101ffc4 	movi	r4,2047
40018f7c:	493f9c1e 	bne	r9,r4,40018df0 <__alt_data_end+0xc0018df0>
40018f80:	2807883a 	mov	r3,r5
40018f84:	3023883a 	mov	r17,r6
40018f88:	4821883a 	mov	r16,r9
40018f8c:	3825883a 	mov	r18,r7
40018f90:	003e9106 	br	400189d8 <__alt_data_end+0xc00189d8>
40018f94:	80001f1e 	bne	r16,zero,40019014 <__subdf3+0x6c0>
40018f98:	1c48b03a 	or	r4,r3,r17
40018f9c:	20005a26 	beq	r4,zero,40019108 <__subdf3+0x7b4>
40018fa0:	0084303a 	nor	r2,zero,r2
40018fa4:	1000561e 	bne	r2,zero,40019100 <__subdf3+0x7ac>
40018fa8:	89a3883a 	add	r17,r17,r6
40018fac:	1945883a 	add	r2,r3,r5
40018fb0:	898d803a 	cmpltu	r6,r17,r6
40018fb4:	3087883a 	add	r3,r6,r2
40018fb8:	4821883a 	mov	r16,r9
40018fbc:	003f0506 	br	40018bd4 <__alt_data_end+0xc0018bd4>
40018fc0:	10002b1e 	bne	r2,zero,40019070 <__subdf3+0x71c>
40018fc4:	2984b03a 	or	r2,r5,r6
40018fc8:	10008026 	beq	r2,zero,400191cc <__subdf3+0x878>
40018fcc:	2807883a 	mov	r3,r5
40018fd0:	3023883a 	mov	r17,r6
40018fd4:	3825883a 	mov	r18,r7
40018fd8:	0401ffc4 	movi	r16,2047
40018fdc:	003e7e06 	br	400189d8 <__alt_data_end+0xc00189d8>
40018fe0:	3809883a 	mov	r4,r7
40018fe4:	0011883a 	mov	r8,zero
40018fe8:	0005883a 	mov	r2,zero
40018fec:	003ee306 	br	40018b7c <__alt_data_end+0xc0018b7c>
40018ff0:	1c62b03a 	or	r17,r3,r17
40018ff4:	8822c03a 	cmpne	r17,r17,zero
40018ff8:	0005883a 	mov	r2,zero
40018ffc:	003f8906 	br	40018e24 <__alt_data_end+0xc0018e24>
40019000:	3809883a 	mov	r4,r7
40019004:	4821883a 	mov	r16,r9
40019008:	0011883a 	mov	r8,zero
4001900c:	0005883a 	mov	r2,zero
40019010:	003eda06 	br	40018b7c <__alt_data_end+0xc0018b7c>
40019014:	0101ffc4 	movi	r4,2047
40019018:	49003b26 	beq	r9,r4,40019108 <__subdf3+0x7b4>
4001901c:	0085c83a 	sub	r2,zero,r2
40019020:	18c02034 	orhi	r3,r3,128
40019024:	01000e04 	movi	r4,56
40019028:	20806e16 	blt	r4,r2,400191e4 <__subdf3+0x890>
4001902c:	010007c4 	movi	r4,31
40019030:	20807716 	blt	r4,r2,40019210 <__subdf3+0x8bc>
40019034:	01000804 	movi	r4,32
40019038:	2089c83a 	sub	r4,r4,r2
4001903c:	1914983a 	sll	r10,r3,r4
40019040:	8890d83a 	srl	r8,r17,r2
40019044:	8908983a 	sll	r4,r17,r4
40019048:	1884d83a 	srl	r2,r3,r2
4001904c:	5222b03a 	or	r17,r10,r8
40019050:	2006c03a 	cmpne	r3,r4,zero
40019054:	88e2b03a 	or	r17,r17,r3
40019058:	89a3883a 	add	r17,r17,r6
4001905c:	1145883a 	add	r2,r2,r5
40019060:	898d803a 	cmpltu	r6,r17,r6
40019064:	3087883a 	add	r3,r6,r2
40019068:	4821883a 	mov	r16,r9
4001906c:	003ed906 	br	40018bd4 <__alt_data_end+0xc0018bd4>
40019070:	2984b03a 	or	r2,r5,r6
40019074:	10004226 	beq	r2,zero,40019180 <__subdf3+0x82c>
40019078:	1808d0fa 	srli	r4,r3,3
4001907c:	8822d0fa 	srli	r17,r17,3
40019080:	1806977a 	slli	r3,r3,29
40019084:	2080022c 	andhi	r2,r4,8
40019088:	1c62b03a 	or	r17,r3,r17
4001908c:	10000826 	beq	r2,zero,400190b0 <__subdf3+0x75c>
40019090:	2812d0fa 	srli	r9,r5,3
40019094:	4880022c 	andhi	r2,r9,8
40019098:	1000051e 	bne	r2,zero,400190b0 <__subdf3+0x75c>
4001909c:	300cd0fa 	srli	r6,r6,3
400190a0:	2804977a 	slli	r2,r5,29
400190a4:	4809883a 	mov	r4,r9
400190a8:	3825883a 	mov	r18,r7
400190ac:	11a2b03a 	or	r17,r2,r6
400190b0:	8806d77a 	srli	r3,r17,29
400190b4:	200890fa 	slli	r4,r4,3
400190b8:	882290fa 	slli	r17,r17,3
400190bc:	0401ffc4 	movi	r16,2047
400190c0:	1906b03a 	or	r3,r3,r4
400190c4:	003e4406 	br	400189d8 <__alt_data_end+0xc00189d8>
400190c8:	2984b03a 	or	r2,r5,r6
400190cc:	103e4226 	beq	r2,zero,400189d8 <__alt_data_end+0xc00189d8>
400190d0:	8989c83a 	sub	r4,r17,r6
400190d4:	8911803a 	cmpltu	r8,r17,r4
400190d8:	1945c83a 	sub	r2,r3,r5
400190dc:	1205c83a 	sub	r2,r2,r8
400190e0:	1200202c 	andhi	r8,r2,128
400190e4:	403e9a26 	beq	r8,zero,40018b50 <__alt_data_end+0xc0018b50>
400190e8:	3463c83a 	sub	r17,r6,r17
400190ec:	28c5c83a 	sub	r2,r5,r3
400190f0:	344d803a 	cmpltu	r6,r6,r17
400190f4:	1187c83a 	sub	r3,r2,r6
400190f8:	3825883a 	mov	r18,r7
400190fc:	003e3606 	br	400189d8 <__alt_data_end+0xc00189d8>
40019100:	0101ffc4 	movi	r4,2047
40019104:	493fc71e 	bne	r9,r4,40019024 <__alt_data_end+0xc0019024>
40019108:	2807883a 	mov	r3,r5
4001910c:	3023883a 	mov	r17,r6
40019110:	4821883a 	mov	r16,r9
40019114:	003e3006 	br	400189d8 <__alt_data_end+0xc00189d8>
40019118:	10003626 	beq	r2,zero,400191f4 <__subdf3+0x8a0>
4001911c:	2984b03a 	or	r2,r5,r6
40019120:	10001726 	beq	r2,zero,40019180 <__subdf3+0x82c>
40019124:	1808d0fa 	srli	r4,r3,3
40019128:	8822d0fa 	srli	r17,r17,3
4001912c:	1806977a 	slli	r3,r3,29
40019130:	2080022c 	andhi	r2,r4,8
40019134:	1c62b03a 	or	r17,r3,r17
40019138:	10000726 	beq	r2,zero,40019158 <__subdf3+0x804>
4001913c:	2812d0fa 	srli	r9,r5,3
40019140:	4880022c 	andhi	r2,r9,8
40019144:	1000041e 	bne	r2,zero,40019158 <__subdf3+0x804>
40019148:	300cd0fa 	srli	r6,r6,3
4001914c:	2804977a 	slli	r2,r5,29
40019150:	4809883a 	mov	r4,r9
40019154:	11a2b03a 	or	r17,r2,r6
40019158:	8806d77a 	srli	r3,r17,29
4001915c:	200890fa 	slli	r4,r4,3
40019160:	882290fa 	slli	r17,r17,3
40019164:	3825883a 	mov	r18,r7
40019168:	1906b03a 	or	r3,r3,r4
4001916c:	0401ffc4 	movi	r16,2047
40019170:	003e1906 	br	400189d8 <__alt_data_end+0xc00189d8>
40019174:	000b883a 	mov	r5,zero
40019178:	0005883a 	mov	r2,zero
4001917c:	003e2e06 	br	40018a38 <__alt_data_end+0xc0018a38>
40019180:	0401ffc4 	movi	r16,2047
40019184:	003e1406 	br	400189d8 <__alt_data_end+0xc00189d8>
40019188:	0005883a 	mov	r2,zero
4001918c:	003f7506 	br	40018f64 <__alt_data_end+0xc0018f64>
40019190:	0005883a 	mov	r2,zero
40019194:	0009883a 	mov	r4,zero
40019198:	003e7806 	br	40018b7c <__alt_data_end+0xc0018b7c>
4001919c:	123ff804 	addi	r8,r2,-32
400191a0:	01000804 	movi	r4,32
400191a4:	1a10d83a 	srl	r8,r3,r8
400191a8:	11002526 	beq	r2,r4,40019240 <__subdf3+0x8ec>
400191ac:	01001004 	movi	r4,64
400191b0:	2085c83a 	sub	r2,r4,r2
400191b4:	1884983a 	sll	r2,r3,r2
400191b8:	1444b03a 	or	r2,r2,r17
400191bc:	1004c03a 	cmpne	r2,r2,zero
400191c0:	40a2b03a 	or	r17,r8,r2
400191c4:	0005883a 	mov	r2,zero
400191c8:	003f1606 	br	40018e24 <__alt_data_end+0xc0018e24>
400191cc:	02000434 	movhi	r8,16
400191d0:	0009883a 	mov	r4,zero
400191d4:	423fffc4 	addi	r8,r8,-1
400191d8:	00bfffc4 	movi	r2,-1
400191dc:	0401ffc4 	movi	r16,2047
400191e0:	003e6606 	br	40018b7c <__alt_data_end+0xc0018b7c>
400191e4:	1c62b03a 	or	r17,r3,r17
400191e8:	8822c03a 	cmpne	r17,r17,zero
400191ec:	0005883a 	mov	r2,zero
400191f0:	003f9906 	br	40019058 <__alt_data_end+0xc0019058>
400191f4:	2807883a 	mov	r3,r5
400191f8:	3023883a 	mov	r17,r6
400191fc:	0401ffc4 	movi	r16,2047
40019200:	003df506 	br	400189d8 <__alt_data_end+0xc00189d8>
40019204:	2807883a 	mov	r3,r5
40019208:	3023883a 	mov	r17,r6
4001920c:	003df206 	br	400189d8 <__alt_data_end+0xc00189d8>
40019210:	123ff804 	addi	r8,r2,-32
40019214:	01000804 	movi	r4,32
40019218:	1a10d83a 	srl	r8,r3,r8
4001921c:	11000a26 	beq	r2,r4,40019248 <__subdf3+0x8f4>
40019220:	01001004 	movi	r4,64
40019224:	2085c83a 	sub	r2,r4,r2
40019228:	1884983a 	sll	r2,r3,r2
4001922c:	1444b03a 	or	r2,r2,r17
40019230:	1004c03a 	cmpne	r2,r2,zero
40019234:	40a2b03a 	or	r17,r8,r2
40019238:	0005883a 	mov	r2,zero
4001923c:	003f8606 	br	40019058 <__alt_data_end+0xc0019058>
40019240:	0005883a 	mov	r2,zero
40019244:	003fdc06 	br	400191b8 <__alt_data_end+0xc00191b8>
40019248:	0005883a 	mov	r2,zero
4001924c:	003ff706 	br	4001922c <__alt_data_end+0xc001922c>

40019250 <__fixdfsi>:
40019250:	280cd53a 	srli	r6,r5,20
40019254:	00c00434 	movhi	r3,16
40019258:	18ffffc4 	addi	r3,r3,-1
4001925c:	3181ffcc 	andi	r6,r6,2047
40019260:	01c0ff84 	movi	r7,1022
40019264:	28c6703a 	and	r3,r5,r3
40019268:	280ad7fa 	srli	r5,r5,31
4001926c:	3980120e 	bge	r7,r6,400192b8 <__fixdfsi+0x68>
40019270:	00810744 	movi	r2,1053
40019274:	11800c16 	blt	r2,r6,400192a8 <__fixdfsi+0x58>
40019278:	00810cc4 	movi	r2,1075
4001927c:	1185c83a 	sub	r2,r2,r6
40019280:	01c007c4 	movi	r7,31
40019284:	18c00434 	orhi	r3,r3,16
40019288:	38800d16 	blt	r7,r2,400192c0 <__fixdfsi+0x70>
4001928c:	31befb44 	addi	r6,r6,-1043
40019290:	2084d83a 	srl	r2,r4,r2
40019294:	1986983a 	sll	r3,r3,r6
40019298:	1884b03a 	or	r2,r3,r2
4001929c:	28000726 	beq	r5,zero,400192bc <__fixdfsi+0x6c>
400192a0:	0085c83a 	sub	r2,zero,r2
400192a4:	f800283a 	ret
400192a8:	00a00034 	movhi	r2,32768
400192ac:	10bfffc4 	addi	r2,r2,-1
400192b0:	2885883a 	add	r2,r5,r2
400192b4:	f800283a 	ret
400192b8:	0005883a 	mov	r2,zero
400192bc:	f800283a 	ret
400192c0:	008104c4 	movi	r2,1043
400192c4:	1185c83a 	sub	r2,r2,r6
400192c8:	1884d83a 	srl	r2,r3,r2
400192cc:	003ff306 	br	4001929c <__alt_data_end+0xc001929c>

400192d0 <__floatsidf>:
400192d0:	defffd04 	addi	sp,sp,-12
400192d4:	dfc00215 	stw	ra,8(sp)
400192d8:	dc400115 	stw	r17,4(sp)
400192dc:	dc000015 	stw	r16,0(sp)
400192e0:	20002b26 	beq	r4,zero,40019390 <__floatsidf+0xc0>
400192e4:	2023883a 	mov	r17,r4
400192e8:	2020d7fa 	srli	r16,r4,31
400192ec:	20002d16 	blt	r4,zero,400193a4 <__floatsidf+0xd4>
400192f0:	8809883a 	mov	r4,r17
400192f4:	000e3540 	call	4000e354 <__clzsi2>
400192f8:	01410784 	movi	r5,1054
400192fc:	288bc83a 	sub	r5,r5,r2
40019300:	01010cc4 	movi	r4,1075
40019304:	2149c83a 	sub	r4,r4,r5
40019308:	00c007c4 	movi	r3,31
4001930c:	1900160e 	bge	r3,r4,40019368 <__floatsidf+0x98>
40019310:	00c104c4 	movi	r3,1043
40019314:	1947c83a 	sub	r3,r3,r5
40019318:	88c6983a 	sll	r3,r17,r3
4001931c:	00800434 	movhi	r2,16
40019320:	10bfffc4 	addi	r2,r2,-1
40019324:	1886703a 	and	r3,r3,r2
40019328:	2941ffcc 	andi	r5,r5,2047
4001932c:	800d883a 	mov	r6,r16
40019330:	0005883a 	mov	r2,zero
40019334:	280a953a 	slli	r5,r5,20
40019338:	31803fcc 	andi	r6,r6,255
4001933c:	01000434 	movhi	r4,16
40019340:	300c97fa 	slli	r6,r6,31
40019344:	213fffc4 	addi	r4,r4,-1
40019348:	1906703a 	and	r3,r3,r4
4001934c:	1946b03a 	or	r3,r3,r5
40019350:	1986b03a 	or	r3,r3,r6
40019354:	dfc00217 	ldw	ra,8(sp)
40019358:	dc400117 	ldw	r17,4(sp)
4001935c:	dc000017 	ldw	r16,0(sp)
40019360:	dec00304 	addi	sp,sp,12
40019364:	f800283a 	ret
40019368:	00c002c4 	movi	r3,11
4001936c:	1887c83a 	sub	r3,r3,r2
40019370:	88c6d83a 	srl	r3,r17,r3
40019374:	8904983a 	sll	r2,r17,r4
40019378:	01000434 	movhi	r4,16
4001937c:	213fffc4 	addi	r4,r4,-1
40019380:	2941ffcc 	andi	r5,r5,2047
40019384:	1906703a 	and	r3,r3,r4
40019388:	800d883a 	mov	r6,r16
4001938c:	003fe906 	br	40019334 <__alt_data_end+0xc0019334>
40019390:	000d883a 	mov	r6,zero
40019394:	000b883a 	mov	r5,zero
40019398:	0007883a 	mov	r3,zero
4001939c:	0005883a 	mov	r2,zero
400193a0:	003fe406 	br	40019334 <__alt_data_end+0xc0019334>
400193a4:	0123c83a 	sub	r17,zero,r4
400193a8:	003fd106 	br	400192f0 <__alt_data_end+0xc00192f0>

400193ac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
400193ac:	defffd04 	addi	sp,sp,-12
400193b0:	dfc00215 	stw	ra,8(sp)
400193b4:	dc400115 	stw	r17,4(sp)
400193b8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
400193bc:	20001f16 	blt	r4,zero,4001943c <close+0x90>
400193c0:	20c00324 	muli	r3,r4,12
400193c4:	009000b4 	movhi	r2,16386
400193c8:	10accd04 	addi	r2,r2,-19660
400193cc:	1885883a 	add	r2,r3,r2
400193d0:	2021883a 	mov	r16,r4

  if (fd)
400193d4:	10001926 	beq	r2,zero,4001943c <close+0x90>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
400193d8:	10c00017 	ldw	r3,0(r2)
400193dc:	18c00417 	ldw	r3,16(r3)
400193e0:	18000c26 	beq	r3,zero,40019414 <close+0x68>
400193e4:	1009883a 	mov	r4,r2
400193e8:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
400193ec:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
400193f0:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
400193f4:	00197e40 	call	400197e4 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
400193f8:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
400193fc:	88000816 	blt	r17,zero,40019420 <close+0x74>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
40019400:	dfc00217 	ldw	ra,8(sp)
40019404:	dc400117 	ldw	r17,4(sp)
40019408:	dc000017 	ldw	r16,0(sp)
4001940c:	dec00304 	addi	sp,sp,12
40019410:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
40019414:	00197e40 	call	400197e4 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
40019418:	0005883a 	mov	r2,zero
4001941c:	003ff806 	br	40019400 <__alt_data_end+0xc0019400>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
40019420:	d0a00f17 	ldw	r2,-32708(gp)
40019424:	10000c26 	beq	r2,zero,40019458 <close+0xac>
40019428:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
4001942c:	0463c83a 	sub	r17,zero,r17
40019430:	14400015 	stw	r17,0(r2)
      return -1;
40019434:	00bfffc4 	movi	r2,-1
40019438:	003ff106 	br	40019400 <__alt_data_end+0xc0019400>
4001943c:	d0a00f17 	ldw	r2,-32708(gp)
40019440:	10000726 	beq	r2,zero,40019460 <close+0xb4>
40019444:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
40019448:	00c01444 	movi	r3,81
4001944c:	10c00015 	stw	r3,0(r2)
    return -1;
40019450:	00bfffc4 	movi	r2,-1
40019454:	003fea06 	br	40019400 <__alt_data_end+0xc0019400>
40019458:	d0a2ce04 	addi	r2,gp,-29896
4001945c:	003ff306 	br	4001942c <__alt_data_end+0xc001942c>
40019460:	d0a2ce04 	addi	r2,gp,-29896
40019464:	003ff806 	br	40019448 <__alt_data_end+0xc0019448>

40019468 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
40019468:	3005883a 	mov	r2,r6
4001946c:	f800283a 	ret

40019470 <fstat>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
40019470:	20000d16 	blt	r4,zero,400194a8 <fstat+0x38>
40019474:	21000324 	muli	r4,r4,12
40019478:	009000b4 	movhi	r2,16386
4001947c:	10accd04 	addi	r2,r2,-19660
40019480:	2089883a 	add	r4,r4,r2
  
  if (fd)
40019484:	20000826 	beq	r4,zero,400194a8 <fstat+0x38>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
40019488:	20800017 	ldw	r2,0(r4)
4001948c:	10800817 	ldw	r2,32(r2)
40019490:	10000126 	beq	r2,zero,40019498 <fstat+0x28>
    {
      return fd->dev->fstat(fd, st);
40019494:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
40019498:	00880004 	movi	r2,8192
4001949c:	28800115 	stw	r2,4(r5)
      return 0;
400194a0:	0005883a 	mov	r2,zero
400194a4:	f800283a 	ret
400194a8:	d0a00f17 	ldw	r2,-32708(gp)
400194ac:	10000926 	beq	r2,zero,400194d4 <fstat+0x64>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
400194b0:	deffff04 	addi	sp,sp,-4
400194b4:	dfc00015 	stw	ra,0(sp)
400194b8:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
400194bc:	00c01444 	movi	r3,81
400194c0:	10c00015 	stw	r3,0(r2)
    return -1;
400194c4:	00bfffc4 	movi	r2,-1
  }
}
400194c8:	dfc00017 	ldw	ra,0(sp)
400194cc:	dec00104 	addi	sp,sp,4
400194d0:	f800283a 	ret
400194d4:	d0a2ce04 	addi	r2,gp,-29896
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
400194d8:	00c01444 	movi	r3,81
400194dc:	10c00015 	stw	r3,0(r2)
    return -1;
400194e0:	00bfffc4 	movi	r2,-1
  }
}
400194e4:	f800283a 	ret

400194e8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
400194e8:	defff004 	addi	sp,sp,-64
400194ec:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
400194f0:	20001316 	blt	r4,zero,40019540 <isatty+0x58>
400194f4:	20800324 	muli	r2,r4,12
400194f8:	00d000b4 	movhi	r3,16386
400194fc:	18eccd04 	addi	r3,r3,-19660
40019500:	10c5883a 	add	r2,r2,r3
  
  if (fd)
40019504:	10000e26 	beq	r2,zero,40019540 <isatty+0x58>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
40019508:	10800017 	ldw	r2,0(r2)
4001950c:	10800817 	ldw	r2,32(r2)
40019510:	10000726 	beq	r2,zero,40019530 <isatty+0x48>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
40019514:	d80b883a 	mov	r5,sp
40019518:	00194700 	call	40019470 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
4001951c:	d8800117 	ldw	r2,4(sp)
40019520:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
40019524:	dfc00f17 	ldw	ra,60(sp)
40019528:	dec01004 	addi	sp,sp,64
4001952c:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
40019530:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
40019534:	dfc00f17 	ldw	ra,60(sp)
40019538:	dec01004 	addi	sp,sp,64
4001953c:	f800283a 	ret
40019540:	d0a00f17 	ldw	r2,-32708(gp)
40019544:	10000726 	beq	r2,zero,40019564 <isatty+0x7c>
40019548:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
4001954c:	00c01444 	movi	r3,81
40019550:	10c00015 	stw	r3,0(r2)
    return 0;
40019554:	0005883a 	mov	r2,zero
  }
}
40019558:	dfc00f17 	ldw	ra,60(sp)
4001955c:	dec01004 	addi	sp,sp,64
40019560:	f800283a 	ret
40019564:	d0a2ce04 	addi	r2,gp,-29896
40019568:	003ff806 	br	4001954c <__alt_data_end+0xc001954c>

4001956c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
4001956c:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
40019570:	011000b4 	movhi	r4,16386
40019574:	015000b4 	movhi	r5,16386
40019578:	dfc00015 	stw	ra,0(sp)
4001957c:	212aa404 	addi	r4,r4,-21872
40019580:	296d5304 	addi	r5,r5,-19124
40019584:	21400a26 	beq	r4,r5,400195b0 <alt_load+0x44>
  {
    while( to != end )
40019588:	009000b4 	movhi	r2,16386
4001958c:	10ad5304 	addi	r2,r2,-19124
40019590:	20800726 	beq	r4,r2,400195b0 <alt_load+0x44>
    {
      *to++ = *from++;
40019594:	21800104 	addi	r6,r4,4
40019598:	118dc83a 	sub	r6,r2,r6
4001959c:	300cd0ba 	srli	r6,r6,2
400195a0:	31800044 	addi	r6,r6,1
400195a4:	318d883a 	add	r6,r6,r6
400195a8:	318d883a 	add	r6,r6,r6
400195ac:	000ecc80 	call	4000ecc8 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
400195b0:	01100034 	movhi	r4,16384
400195b4:	01500034 	movhi	r5,16384
400195b8:	21000804 	addi	r4,r4,32
400195bc:	29400804 	addi	r5,r5,32
400195c0:	21400a26 	beq	r4,r5,400195ec <alt_load+0x80>
  {
    while( to != end )
400195c4:	00900034 	movhi	r2,16384
400195c8:	10800804 	addi	r2,r2,32
400195cc:	20800726 	beq	r4,r2,400195ec <alt_load+0x80>
    {
      *to++ = *from++;
400195d0:	21800104 	addi	r6,r4,4
400195d4:	118dc83a 	sub	r6,r2,r6
400195d8:	300cd0ba 	srli	r6,r6,2
400195dc:	31800044 	addi	r6,r6,1
400195e0:	318d883a 	add	r6,r6,r6
400195e4:	318d883a 	add	r6,r6,r6
400195e8:	000ecc80 	call	4000ecc8 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
400195ec:	011000b4 	movhi	r4,16386
400195f0:	015000b4 	movhi	r5,16386
400195f4:	2128ee04 	addi	r4,r4,-23624
400195f8:	2968ee04 	addi	r5,r5,-23624
400195fc:	21400a26 	beq	r4,r5,40019628 <alt_load+0xbc>
  {
    while( to != end )
40019600:	009000b4 	movhi	r2,16386
40019604:	10aaa404 	addi	r2,r2,-21872
40019608:	20800726 	beq	r4,r2,40019628 <alt_load+0xbc>
    {
      *to++ = *from++;
4001960c:	21800104 	addi	r6,r4,4
40019610:	118dc83a 	sub	r6,r2,r6
40019614:	300cd0ba 	srli	r6,r6,2
40019618:	31800044 	addi	r6,r6,1
4001961c:	318d883a 	add	r6,r6,r6
40019620:	318d883a 	add	r6,r6,r6
40019624:	000ecc80 	call	4000ecc8 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
40019628:	0019aa40 	call	40019aa4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
4001962c:	dfc00017 	ldw	ra,0(sp)
40019630:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
40019634:	0019bf01 	jmpi	40019bf0 <alt_icache_flush_all>

40019638 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
40019638:	defffe04 	addi	sp,sp,-8
4001963c:	dfc00115 	stw	ra,4(sp)
40019640:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
40019644:	20000e16 	blt	r4,zero,40019680 <lseek+0x48>
40019648:	21000324 	muli	r4,r4,12
4001964c:	009000b4 	movhi	r2,16386
40019650:	10accd04 	addi	r2,r2,-19660
40019654:	2089883a 	add	r4,r4,r2
  
  if (fd) 
40019658:	20000926 	beq	r4,zero,40019680 <lseek+0x48>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
4001965c:	20800017 	ldw	r2,0(r4)
40019660:	10800717 	ldw	r2,28(r2)
40019664:	10000d26 	beq	r2,zero,4001969c <lseek+0x64>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
40019668:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
4001966c:	10000f16 	blt	r2,zero,400196ac <lseek+0x74>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
40019670:	dfc00117 	ldw	ra,4(sp)
40019674:	dc000017 	ldw	r16,0(sp)
40019678:	dec00204 	addi	sp,sp,8
4001967c:	f800283a 	ret
40019680:	04001444 	movi	r16,81
40019684:	d0a00f17 	ldw	r2,-32708(gp)
40019688:	10000626 	beq	r2,zero,400196a4 <lseek+0x6c>
4001968c:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
40019690:	14000015 	stw	r16,0(r2)
    rc = -1;
40019694:	00bfffc4 	movi	r2,-1
  }

  return rc;
40019698:	003ff506 	br	40019670 <__alt_data_end+0xc0019670>
4001969c:	04002184 	movi	r16,134
400196a0:	003ff806 	br	40019684 <__alt_data_end+0xc0019684>
400196a4:	d0a2ce04 	addi	r2,gp,-29896
400196a8:	003ff906 	br	40019690 <__alt_data_end+0xc0019690>
400196ac:	00a1c83a 	sub	r16,zero,r2
400196b0:	003ff406 	br	40019684 <__alt_data_end+0xc0019684>

400196b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
400196b4:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
400196b8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
400196bc:	dfc00115 	stw	ra,4(sp)
400196c0:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
400196c4:	001991c0 	call	4001991c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
400196c8:	001993c0 	call	4001993c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
400196cc:	019000b4 	movhi	r6,16386
400196d0:	31aa9f04 	addi	r6,r6,-21892
400196d4:	300b883a 	mov	r5,r6
400196d8:	3009883a 	mov	r4,r6
400196dc:	0019bfc0 	call	40019bfc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
400196e0:	0019b280 	call	40019b28 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
400196e4:	011000b4 	movhi	r4,16386
400196e8:	2126e304 	addi	r4,r4,-25716
400196ec:	001a0440 	call	4001a044 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
400196f0:	d1a2d217 	ldw	r6,-29880(gp)
400196f4:	d162d317 	ldw	r5,-29876(gp)
400196f8:	d122d417 	ldw	r4,-29872(gp)
400196fc:	0008f280 	call	40008f28 <main>
  close(STDOUT_FILENO);
40019700:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
40019704:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
40019708:	00193ac0 	call	400193ac <close>
  exit (result);
4001970c:	8009883a 	mov	r4,r16
40019710:	001a0580 	call	4001a058 <exit>

40019714 <__malloc_lock>:
40019714:	f800283a 	ret

40019718 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
40019718:	f800283a 	ret

4001971c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
4001971c:	defffe04 	addi	sp,sp,-8
40019720:	dfc00115 	stw	ra,4(sp)
40019724:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
40019728:	20002116 	blt	r4,zero,400197b0 <read+0x94>
4001972c:	21000324 	muli	r4,r4,12
40019730:	009000b4 	movhi	r2,16386
40019734:	10accd04 	addi	r2,r2,-19660
40019738:	2089883a 	add	r4,r4,r2
  
  if (fd)
4001973c:	20001c26 	beq	r4,zero,400197b0 <read+0x94>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
40019740:	20800217 	ldw	r2,8(r4)
40019744:	00c00044 	movi	r3,1
40019748:	108000cc 	andi	r2,r2,3
4001974c:	10c00a26 	beq	r2,r3,40019778 <read+0x5c>
        (fd->dev->read))
40019750:	20800017 	ldw	r2,0(r4)
40019754:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
40019758:	10000726 	beq	r2,zero,40019778 <read+0x5c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
4001975c:	103ee83a 	callr	r2
40019760:	1021883a 	mov	r16,r2
40019764:	10000b16 	blt	r2,zero,40019794 <read+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
40019768:	dfc00117 	ldw	ra,4(sp)
4001976c:	dc000017 	ldw	r16,0(sp)
40019770:	dec00204 	addi	sp,sp,8
40019774:	f800283a 	ret
40019778:	d0a00f17 	ldw	r2,-32708(gp)
4001977c:	10001326 	beq	r2,zero,400197cc <read+0xb0>
40019780:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
40019784:	00c00344 	movi	r3,13
40019788:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
4001978c:	00bfffc4 	movi	r2,-1
40019790:	003ff506 	br	40019768 <__alt_data_end+0xc0019768>
40019794:	d0a00f17 	ldw	r2,-32708(gp)
40019798:	10000e26 	beq	r2,zero,400197d4 <read+0xb8>
4001979c:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
400197a0:	0421c83a 	sub	r16,zero,r16
400197a4:	14000015 	stw	r16,0(r2)
          return -1;
400197a8:	00bfffc4 	movi	r2,-1
400197ac:	003fee06 	br	40019768 <__alt_data_end+0xc0019768>
400197b0:	d0a00f17 	ldw	r2,-32708(gp)
400197b4:	10000926 	beq	r2,zero,400197dc <read+0xc0>
400197b8:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
400197bc:	00c01444 	movi	r3,81
400197c0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
400197c4:	00bfffc4 	movi	r2,-1
400197c8:	003fe706 	br	40019768 <__alt_data_end+0xc0019768>
400197cc:	d0a2ce04 	addi	r2,gp,-29896
400197d0:	003fec06 	br	40019784 <__alt_data_end+0xc0019784>
400197d4:	d0a2ce04 	addi	r2,gp,-29896
400197d8:	003ff106 	br	400197a0 <__alt_data_end+0xc00197a0>
400197dc:	d0a2ce04 	addi	r2,gp,-29896
400197e0:	003ff606 	br	400197bc <__alt_data_end+0xc00197bc>

400197e4 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
400197e4:	00800084 	movi	r2,2
400197e8:	1100060e 	bge	r2,r4,40019804 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
400197ec:	21000324 	muli	r4,r4,12
400197f0:	009000b4 	movhi	r2,16386
400197f4:	10accd04 	addi	r2,r2,-19660
400197f8:	1109883a 	add	r4,r2,r4
400197fc:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
40019800:	20000015 	stw	zero,0(r4)
40019804:	f800283a 	ret

40019808 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40019808:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4001980c:	00bfff84 	movi	r2,-2
40019810:	2884703a 	and	r2,r5,r2
40019814:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
40019818:	d0a01017 	ldw	r2,-32704(gp)
4001981c:	00ffff04 	movi	r3,-4
40019820:	108000c4 	addi	r2,r2,3
40019824:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
40019828:	00e00034 	movhi	r3,32768
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
4001982c:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
40019830:	1109883a 	add	r4,r2,r4
40019834:	18c00004 	addi	r3,r3,0
40019838:	19000336 	bltu	r3,r4,40019848 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
4001983c:	d1201015 	stw	r4,-32704(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40019840:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
40019844:	f800283a 	ret
40019848:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
4001984c:	00bfffc4 	movi	r2,-1
40019850:	f800283a 	ret

40019854 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
40019854:	0019a2c1 	jmpi	40019a2c <alt_busy_sleep>

40019858 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
40019858:	defffe04 	addi	sp,sp,-8
4001985c:	dfc00115 	stw	ra,4(sp)
40019860:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
40019864:	20002216 	blt	r4,zero,400198f0 <write+0x98>
40019868:	21000324 	muli	r4,r4,12
4001986c:	009000b4 	movhi	r2,16386
40019870:	10accd04 	addi	r2,r2,-19660
40019874:	2089883a 	add	r4,r4,r2
  
  if (fd)
40019878:	20001d26 	beq	r4,zero,400198f0 <write+0x98>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
4001987c:	20800217 	ldw	r2,8(r4)
40019880:	108000cc 	andi	r2,r2,3
40019884:	10000a26 	beq	r2,zero,400198b0 <write+0x58>
40019888:	20800017 	ldw	r2,0(r4)
4001988c:	10800617 	ldw	r2,24(r2)
40019890:	10000726 	beq	r2,zero,400198b0 <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
40019894:	103ee83a 	callr	r2
40019898:	1021883a 	mov	r16,r2
4001989c:	10000d16 	blt	r2,zero,400198d4 <write+0x7c>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
400198a0:	dfc00117 	ldw	ra,4(sp)
400198a4:	dc000017 	ldw	r16,0(sp)
400198a8:	dec00204 	addi	sp,sp,8
400198ac:	f800283a 	ret
400198b0:	d0a00f17 	ldw	r2,-32708(gp)
400198b4:	10000526 	beq	r2,zero,400198cc <write+0x74>
400198b8:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
400198bc:	00c00344 	movi	r3,13
400198c0:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
400198c4:	00bfffc4 	movi	r2,-1
400198c8:	003ff506 	br	400198a0 <__alt_data_end+0xc00198a0>
400198cc:	d0a2ce04 	addi	r2,gp,-29896
400198d0:	003ffa06 	br	400198bc <__alt_data_end+0xc00198bc>
400198d4:	d0a00f17 	ldw	r2,-32708(gp)
400198d8:	10000c26 	beq	r2,zero,4001990c <write+0xb4>
400198dc:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
400198e0:	0421c83a 	sub	r16,zero,r16
400198e4:	14000015 	stw	r16,0(r2)
        return -1;
400198e8:	00bfffc4 	movi	r2,-1
400198ec:	003fec06 	br	400198a0 <__alt_data_end+0xc00198a0>
400198f0:	d0a00f17 	ldw	r2,-32708(gp)
400198f4:	10000726 	beq	r2,zero,40019914 <write+0xbc>
400198f8:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
400198fc:	00c01444 	movi	r3,81
40019900:	10c00015 	stw	r3,0(r2)
  }
  return -1;
40019904:	00bfffc4 	movi	r2,-1
40019908:	003fe506 	br	400198a0 <__alt_data_end+0xc00198a0>
4001990c:	d0a2ce04 	addi	r2,gp,-29896
40019910:	003ff306 	br	400198e0 <__alt_data_end+0xc00198e0>
40019914:	d0a2ce04 	addi	r2,gp,-29896
40019918:	003ff806 	br	400198fc <__alt_data_end+0xc00198fc>

4001991c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
4001991c:	deffff04 	addi	sp,sp,-4
40019920:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_1, nios2_gen2_1);
40019924:	0019e780 	call	40019e78 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
40019928:	00800044 	movi	r2,1
4001992c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
40019930:	dfc00017 	ldw	ra,0(sp)
40019934:	dec00104 	addi	sp,sp,4
40019938:	f800283a 	ret

4001993c <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
4001993c:	011000b4 	movhi	r4,16386
40019940:	212d3704 	addi	r4,r4,-19236
40019944:	d1600b04 	addi	r5,gp,-32724
40019948:	0019abc1 	jmpi	40019abc <alt_dev_llist_insert>

4001994c <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
4001994c:	20800017 	ldw	r2,0(r4)
40019950:	21c00217 	ldw	r7,8(r4)
40019954:	11000a04 	addi	r4,r2,40
40019958:	001996c1 	jmpi	4001996c <altera_avalon_jtag_uart_read>

4001995c <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
4001995c:	20800017 	ldw	r2,0(r4)
40019960:	21c00217 	ldw	r7,8(r4)
40019964:	11000a04 	addi	r4,r2,40
40019968:	00199f81 	jmpi	400199f8 <altera_avalon_jtag_uart_write>

4001996c <altera_avalon_jtag_uart_read>:
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;
4001996c:	298d883a 	add	r6,r5,r6

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
40019970:	22000017 	ldw	r8,0(r4)
40019974:	39d0000c 	andi	r7,r7,16384

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
40019978:	29801d2e 	bgeu	r5,r6,400199f0 <altera_avalon_jtag_uart_read+0x84>

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
4001997c:	2807883a 	mov	r3,r5
40019980:	38000c1e 	bne	r7,zero,400199b4 <altera_avalon_jtag_uart_read+0x48>
  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
40019984:	41000037 	ldwio	r4,0(r8)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
40019988:	21e0000c 	andi	r7,r4,32768
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
4001998c:	18800044 	addi	r2,r3,1

  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
40019990:	3800041e 	bne	r7,zero,400199a4 <altera_avalon_jtag_uart_read+0x38>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
40019994:	28fffb26 	beq	r5,r3,40019984 <__alt_data_end+0xc0019984>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
40019998:	1805883a 	mov	r2,r3
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
4001999c:	1145c83a 	sub	r2,r2,r5
400199a0:	f800283a 	ret
  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
400199a4:	19000005 	stb	r4,0(r3)
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
400199a8:	11800b2e 	bgeu	r2,r6,400199d8 <altera_avalon_jtag_uart_read+0x6c>
400199ac:	1007883a 	mov	r3,r2
400199b0:	003ff406 	br	40019984 <__alt_data_end+0xc0019984>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
400199b4:	41000037 	ldwio	r4,0(r8)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
400199b8:	21e0000c 	andi	r7,r4,32768
400199bc:	18800044 	addi	r2,r3,1
400199c0:	38000826 	beq	r7,zero,400199e4 <altera_avalon_jtag_uart_read+0x78>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
400199c4:	19000005 	stb	r4,0(r3)
400199c8:	1007883a 	mov	r3,r2
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
400199cc:	11bff91e 	bne	r2,r6,400199b4 <__alt_data_end+0xc00199b4>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
400199d0:	29bff21e 	bne	r5,r6,4001999c <__alt_data_end+0xc001999c>
400199d4:	00000406 	br	400199e8 <altera_avalon_jtag_uart_read+0x7c>
400199d8:	28bff01e 	bne	r5,r2,4001999c <__alt_data_end+0xc001999c>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
400199dc:	00bffec4 	movi	r2,-5
400199e0:	f800283a 	ret
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
400199e4:	28ffec1e 	bne	r5,r3,40019998 <__alt_data_end+0xc0019998>
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
400199e8:	00bffd44 	movi	r2,-11
400199ec:	f800283a 	ret
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
400199f0:	383ffa26 	beq	r7,zero,400199dc <__alt_data_end+0xc00199dc>
400199f4:	003ffc06 	br	400199e8 <__alt_data_end+0xc00199e8>

400199f8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
400199f8:	21c00017 	ldw	r7,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
400199fc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
40019a00:	298d883a 	add	r6,r5,r6
40019a04:	39000104 	addi	r4,r7,4

  while (ptr < end)
40019a08:	2980072e 	bgeu	r5,r6,40019a28 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
40019a0c:	20c00037 	ldwio	r3,0(r4)
40019a10:	18ffffec 	andhi	r3,r3,65535
40019a14:	183ffd26 	beq	r3,zero,40019a0c <__alt_data_end+0xc0019a0c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
40019a18:	28c00007 	ldb	r3,0(r5)
40019a1c:	38c00035 	stwio	r3,0(r7)
40019a20:	29400044 	addi	r5,r5,1
40019a24:	003ff806 	br	40019a08 <__alt_data_end+0xc0019a08>

  return count;
}
40019a28:	f800283a 	ret

40019a2c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
40019a2c:	01407c34 	movhi	r5,496
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
40019a30:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
40019a34:	295f07c4 	addi	r5,r5,31775
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
40019a38:	dc000015 	stw	r16,0(sp)
40019a3c:	dfc00115 	stw	ra,4(sp)
40019a40:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
40019a44:	000c9440 	call	4000c944 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
40019a48:	10001226 	beq	r2,zero,40019a94 <alt_busy_sleep+0x68>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
40019a4c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
40019a50:	013f8434 	movhi	r4,65040
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
40019a54:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
40019a58:	2120f844 	addi	r4,r4,-31775
40019a5c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
40019a60:	297fffc4 	addi	r5,r5,-1
40019a64:	283ffe1e 	bne	r5,zero,40019a60 <__alt_data_end+0xc0019a60>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
40019a68:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
40019a6c:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
40019a70:	18bffb16 	blt	r3,r2,40019a60 <__alt_data_end+0xc0019a60>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
40019a74:	840010a4 	muli	r16,r16,66
40019a78:	843fffc4 	addi	r16,r16,-1
40019a7c:	803ffe1e 	bne	r16,zero,40019a78 <__alt_data_end+0xc0019a78>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
40019a80:	0005883a 	mov	r2,zero
40019a84:	dfc00117 	ldw	ra,4(sp)
40019a88:	dc000017 	ldw	r16,0(sp)
40019a8c:	dec00204 	addi	sp,sp,8
40019a90:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
40019a94:	840010a4 	muli	r16,r16,66
40019a98:	843fffc4 	addi	r16,r16,-1
40019a9c:	043ffe16 	blt	zero,r16,40019a98 <__alt_data_end+0xc0019a98>
40019aa0:	003ff706 	br	40019a80 <__alt_data_end+0xc0019a80>

40019aa4 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
40019aa4:	0005883a 	mov	r2,zero
40019aa8:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
40019aac:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
40019ab0:	10800804 	addi	r2,r2,32
40019ab4:	10fffd1e 	bne	r2,r3,40019aac <__alt_data_end+0xc0019aac>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
40019ab8:	f800283a 	ret

40019abc <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
40019abc:	20000a26 	beq	r4,zero,40019ae8 <alt_dev_llist_insert+0x2c>
40019ac0:	20800217 	ldw	r2,8(r4)
40019ac4:	10000826 	beq	r2,zero,40019ae8 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
40019ac8:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
40019acc:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
40019ad0:	0005883a 	mov	r2,zero
  entry->next     = list->next;
40019ad4:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
40019ad8:	28c00017 	ldw	r3,0(r5)
40019adc:	19000115 	stw	r4,4(r3)
  list->next           = entry;
40019ae0:	29000015 	stw	r4,0(r5)
40019ae4:	f800283a 	ret
40019ae8:	d0a00f17 	ldw	r2,-32708(gp)
40019aec:	10000926 	beq	r2,zero,40019b14 <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
40019af0:	deffff04 	addi	sp,sp,-4
40019af4:	dfc00015 	stw	ra,0(sp)
40019af8:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
40019afc:	00c00584 	movi	r3,22
40019b00:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
40019b04:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
40019b08:	dfc00017 	ldw	ra,0(sp)
40019b0c:	dec00104 	addi	sp,sp,4
40019b10:	f800283a 	ret
40019b14:	d0a2ce04 	addi	r2,gp,-29896
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
40019b18:	00c00584 	movi	r3,22
40019b1c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
40019b20:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
40019b24:	f800283a 	ret

40019b28 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
40019b28:	defffc04 	addi	sp,sp,-16
40019b2c:	dc800215 	stw	r18,8(sp)
40019b30:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
40019b34:	049000b4 	movhi	r18,16386
40019b38:	041000b4 	movhi	r16,16386
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
40019b3c:	dfc00315 	stw	ra,12(sp)
40019b40:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
40019b44:	8428ed04 	addi	r16,r16,-23628
40019b48:	94a8ee04 	addi	r18,r18,-23624
40019b4c:	84800936 	bltu	r16,r18,40019b74 <_do_ctors+0x4c>
40019b50:	84a5c83a 	sub	r18,r16,r18
40019b54:	9024d0ba 	srli	r18,r18,2
40019b58:	0023883a 	mov	r17,zero
40019b5c:	94800044 	addi	r18,r18,1
        (*ctor) (); 
40019b60:	80800017 	ldw	r2,0(r16)
40019b64:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
40019b68:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
40019b6c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
40019b70:	8cbffb1e 	bne	r17,r18,40019b60 <__alt_data_end+0xc0019b60>
        (*ctor) (); 
}
40019b74:	dfc00317 	ldw	ra,12(sp)
40019b78:	dc800217 	ldw	r18,8(sp)
40019b7c:	dc400117 	ldw	r17,4(sp)
40019b80:	dc000017 	ldw	r16,0(sp)
40019b84:	dec00404 	addi	sp,sp,16
40019b88:	f800283a 	ret

40019b8c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
40019b8c:	defffc04 	addi	sp,sp,-16
40019b90:	dc800215 	stw	r18,8(sp)
40019b94:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
40019b98:	049000b4 	movhi	r18,16386
40019b9c:	041000b4 	movhi	r16,16386
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
40019ba0:	dfc00315 	stw	ra,12(sp)
40019ba4:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
40019ba8:	8428ed04 	addi	r16,r16,-23628
40019bac:	94a8ee04 	addi	r18,r18,-23624
40019bb0:	84800936 	bltu	r16,r18,40019bd8 <_do_dtors+0x4c>
40019bb4:	84a5c83a 	sub	r18,r16,r18
40019bb8:	9024d0ba 	srli	r18,r18,2
40019bbc:	0023883a 	mov	r17,zero
40019bc0:	94800044 	addi	r18,r18,1
        (*dtor) (); 
40019bc4:	80800017 	ldw	r2,0(r16)
40019bc8:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
40019bcc:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
40019bd0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
40019bd4:	8cbffb1e 	bne	r17,r18,40019bc4 <__alt_data_end+0xc0019bc4>
        (*dtor) (); 
}
40019bd8:	dfc00317 	ldw	ra,12(sp)
40019bdc:	dc800217 	ldw	r18,8(sp)
40019be0:	dc400117 	ldw	r17,4(sp)
40019be4:	dc000017 	ldw	r16,0(sp)
40019be8:	dec00404 	addi	sp,sp,16
40019bec:	f800283a 	ret

40019bf0 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
40019bf0:	01440004 	movi	r5,4096
40019bf4:	0009883a 	mov	r4,zero
40019bf8:	0019ff41 	jmpi	40019ff4 <alt_icache_flush>

40019bfc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
40019bfc:	defffd04 	addi	sp,sp,-12
40019c00:	dc400115 	stw	r17,4(sp)
40019c04:	dc000015 	stw	r16,0(sp)
40019c08:	2823883a 	mov	r17,r5
40019c0c:	3021883a 	mov	r16,r6

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
40019c10:	01400044 	movi	r5,1
40019c14:	01807fc4 	movi	r6,511
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
40019c18:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
40019c1c:	0019d000 	call	40019d00 <open>

  if (old >= 0)
40019c20:	10000c16 	blt	r2,zero,40019c54 <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
40019c24:	10c00324 	muli	r3,r2,12
40019c28:	015000b4 	movhi	r5,16386
40019c2c:	296ccd04 	addi	r5,r5,-19660
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
40019c30:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
40019c34:	28c5883a 	add	r2,r5,r3
40019c38:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
40019c3c:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
40019c40:	29800315 	stw	r6,12(r5)
    fd->priv     = alt_fd_list[old].priv;
40019c44:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
40019c48:	28c00515 	stw	r3,20(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
40019c4c:	28800415 	stw	r2,16(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
40019c50:	00197e40 	call	400197e4 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
40019c54:	01807fc4 	movi	r6,511
40019c58:	000b883a 	mov	r5,zero
40019c5c:	8809883a 	mov	r4,r17
40019c60:	0019d000 	call	40019d00 <open>

  if (old >= 0)
40019c64:	10000c16 	blt	r2,zero,40019c98 <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
40019c68:	10c00324 	muli	r3,r2,12
40019c6c:	015000b4 	movhi	r5,16386
40019c70:	296ccd04 	addi	r5,r5,-19660
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
40019c74:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
40019c78:	28c5883a 	add	r2,r5,r3
40019c7c:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
40019c80:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
40019c84:	29800015 	stw	r6,0(r5)
    fd->priv     = alt_fd_list[old].priv;
40019c88:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
40019c8c:	28c00215 	stw	r3,8(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
40019c90:	28800115 	stw	r2,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
40019c94:	00197e40 	call	400197e4 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
40019c98:	01807fc4 	movi	r6,511
40019c9c:	01400044 	movi	r5,1
40019ca0:	8009883a 	mov	r4,r16
40019ca4:	0019d000 	call	40019d00 <open>

  if (old >= 0)
40019ca8:	10001016 	blt	r2,zero,40019cec <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
40019cac:	10c00324 	muli	r3,r2,12
40019cb0:	015000b4 	movhi	r5,16386
40019cb4:	296ccd04 	addi	r5,r5,-19660
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
40019cb8:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
40019cbc:	28c5883a 	add	r2,r5,r3
40019cc0:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
40019cc4:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
40019cc8:	29800615 	stw	r6,24(r5)
    fd->priv     = alt_fd_list[old].priv;
40019ccc:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
40019cd0:	28c00815 	stw	r3,32(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
40019cd4:	28800715 	stw	r2,28(r5)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
40019cd8:	dfc00217 	ldw	ra,8(sp)
40019cdc:	dc400117 	ldw	r17,4(sp)
40019ce0:	dc000017 	ldw	r16,0(sp)
40019ce4:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
40019ce8:	00197e41 	jmpi	400197e4 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
40019cec:	dfc00217 	ldw	ra,8(sp)
40019cf0:	dc400117 	ldw	r17,4(sp)
40019cf4:	dc000017 	ldw	r16,0(sp)
40019cf8:	dec00304 	addi	sp,sp,12
40019cfc:	f800283a 	ret

40019d00 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
40019d00:	defffa04 	addi	sp,sp,-24
40019d04:	dc000015 	stw	r16,0(sp)
40019d08:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
40019d0c:	d1600b04 	addi	r5,gp,-32724
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
40019d10:	dc800215 	stw	r18,8(sp)
40019d14:	dc400115 	stw	r17,4(sp)
40019d18:	dfc00515 	stw	ra,20(sp)
40019d1c:	dd000415 	stw	r20,16(sp)
40019d20:	dcc00315 	stw	r19,12(sp)
40019d24:	2023883a 	mov	r17,r4
40019d28:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
40019d2c:	0019e800 	call	40019e80 <alt_find_dev>
40019d30:	10004626 	beq	r2,zero,40019e4c <open+0x14c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
40019d34:	1009883a 	mov	r4,r2
40019d38:	1029883a 	mov	r20,r2
40019d3c:	0019fa40 	call	40019fa4 <alt_get_fd>
40019d40:	1027883a 	mov	r19,r2
40019d44:	1000090e 	bge	r2,zero,40019d6c <open+0x6c>
40019d48:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
40019d4c:	9809883a 	mov	r4,r19
40019d50:	00197e40 	call	400197e4 <alt_release_fd>
40019d54:	d0a00f17 	ldw	r2,-32708(gp)
40019d58:	10004326 	beq	r2,zero,40019e68 <open+0x168>
40019d5c:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
40019d60:	14000015 	stw	r16,0(r2)
    return -1;
40019d64:	00bfffc4 	movi	r2,-1
40019d68:	00002e06 	br	40019e24 <open+0x124>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
40019d6c:	99000324 	muli	r4,r19,12

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
40019d70:	00d00034 	movhi	r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
40019d74:	009000b4 	movhi	r2,16386

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
40019d78:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
40019d7c:	10accd04 	addi	r2,r2,-19660

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
40019d80:	80c6703a 	and	r3,r16,r3
40019d84:	18d00034 	orhi	r3,r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
40019d88:	2089883a 	add	r4,r4,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
40019d8c:	20c00215 	stw	r3,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
40019d90:	d2200a17 	ldw	r8,-32728(gp)
40019d94:	21c00017 	ldw	r7,0(r4)
40019d98:	11400204 	addi	r5,r2,8
40019d9c:	0007883a 	mov	r3,zero
40019da0:	00000306 	br	40019db0 <open+0xb0>
40019da4:	10800304 	addi	r2,r2,12
40019da8:	29400304 	addi	r5,r5,12
40019dac:	40c01436 	bltu	r8,r3,40019e00 <open+0x100>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
40019db0:	11800017 	ldw	r6,0(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
40019db4:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
40019db8:	31fffa1e 	bne	r6,r7,40019da4 <__alt_data_end+0xc0019da4>
40019dbc:	29800017 	ldw	r6,0(r5)
40019dc0:	303ff80e 	bge	r6,zero,40019da4 <__alt_data_end+0xc0019da4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
40019dc4:	20bff726 	beq	r4,r2,40019da4 <__alt_data_end+0xc0019da4>
40019dc8:	04000344 	movi	r16,13
40019dcc:	003fdf06 	br	40019d4c <__alt_data_end+0xc0019d4c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
40019dd0:	1009883a 	mov	r4,r2
40019dd4:	0019fa40 	call	40019fa4 <alt_get_fd>
40019dd8:	1027883a 	mov	r19,r2
40019ddc:	103fda16 	blt	r2,zero,40019d48 <__alt_data_end+0xc0019d48>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
40019de0:	99000324 	muli	r4,r19,12
40019de4:	009000b4 	movhi	r2,16386
40019de8:	10accd04 	addi	r2,r2,-19660
40019dec:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
40019df0:	00900034 	movhi	r2,16384
40019df4:	10bfffc4 	addi	r2,r2,-1
40019df8:	8084703a 	and	r2,r16,r2
40019dfc:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
40019e00:	a0800317 	ldw	r2,12(r20)
40019e04:	10000f26 	beq	r2,zero,40019e44 <open+0x144>
40019e08:	900f883a 	mov	r7,r18
40019e0c:	800d883a 	mov	r6,r16
40019e10:	880b883a 	mov	r5,r17
40019e14:	103ee83a 	callr	r2
40019e18:	1007883a 	mov	r3,r2
40019e1c:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
40019e20:	18001316 	blt	r3,zero,40019e70 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
}
40019e24:	dfc00517 	ldw	ra,20(sp)
40019e28:	dd000417 	ldw	r20,16(sp)
40019e2c:	dcc00317 	ldw	r19,12(sp)
40019e30:	dc800217 	ldw	r18,8(sp)
40019e34:	dc400117 	ldw	r17,4(sp)
40019e38:	dc000017 	ldw	r16,0(sp)
40019e3c:	dec00604 	addi	sp,sp,24
40019e40:	f800283a 	ret
40019e44:	9805883a 	mov	r2,r19
40019e48:	003ff606 	br	40019e24 <__alt_data_end+0xc0019e24>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
40019e4c:	8809883a 	mov	r4,r17
40019e50:	0019ef80 	call	40019ef8 <alt_find_file>
40019e54:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
40019e58:	103fdd1e 	bne	r2,zero,40019dd0 <__alt_data_end+0xc0019dd0>
40019e5c:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
40019e60:	04ffffc4 	movi	r19,-1
40019e64:	003fb906 	br	40019d4c <__alt_data_end+0xc0019d4c>
40019e68:	d0a2ce04 	addi	r2,gp,-29896
40019e6c:	003fbc06 	br	40019d60 <__alt_data_end+0xc0019d60>
40019e70:	00e1c83a 	sub	r16,zero,r3
40019e74:	003fb506 	br	40019d4c <__alt_data_end+0xc0019d4c>

40019e78 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
40019e78:	000170fa 	wrctl	ienable,zero
40019e7c:	f800283a 	ret

40019e80 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
40019e80:	defffb04 	addi	sp,sp,-20
40019e84:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
40019e88:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
40019e8c:	dc400115 	stw	r17,4(sp)
40019e90:	2823883a 	mov	r17,r5
40019e94:	dcc00315 	stw	r19,12(sp)
40019e98:	dfc00415 	stw	ra,16(sp)
40019e9c:	dc800215 	stw	r18,8(sp)
40019ea0:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
40019ea4:	000f1640 	call	4000f164 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
40019ea8:	8c000b26 	beq	r17,r16,40019ed8 <alt_find_dev+0x58>
40019eac:	14800044 	addi	r18,r2,1
40019eb0:	00000206 	br	40019ebc <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
40019eb4:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
40019eb8:	8c000726 	beq	r17,r16,40019ed8 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
40019ebc:	81000217 	ldw	r4,8(r16)
40019ec0:	900d883a 	mov	r6,r18
40019ec4:	980b883a 	mov	r5,r19
40019ec8:	001a0900 	call	4001a090 <memcmp>
40019ecc:	103ff91e 	bne	r2,zero,40019eb4 <__alt_data_end+0xc0019eb4>
40019ed0:	8005883a 	mov	r2,r16
40019ed4:	00000106 	br	40019edc <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
40019ed8:	0005883a 	mov	r2,zero
}
40019edc:	dfc00417 	ldw	ra,16(sp)
40019ee0:	dcc00317 	ldw	r19,12(sp)
40019ee4:	dc800217 	ldw	r18,8(sp)
40019ee8:	dc400117 	ldw	r17,4(sp)
40019eec:	dc000017 	ldw	r16,0(sp)
40019ef0:	dec00504 	addi	sp,sp,20
40019ef4:	f800283a 	ret

40019ef8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
40019ef8:	defffa04 	addi	sp,sp,-24
40019efc:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
40019f00:	d4200d17 	ldw	r16,-32716(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
40019f04:	dd000415 	stw	r20,16(sp)
40019f08:	dfc00515 	stw	ra,20(sp)
40019f0c:	dcc00315 	stw	r19,12(sp)
40019f10:	dc800215 	stw	r18,8(sp)
40019f14:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
40019f18:	d5200d04 	addi	r20,gp,-32716
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
40019f1c:	85001626 	beq	r16,r20,40019f78 <alt_find_file+0x80>
40019f20:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
40019f24:	04c00bc4 	movi	r19,47
40019f28:	00000806 	br	40019f4c <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
40019f2c:	9185883a 	add	r2,r18,r6
40019f30:	10800007 	ldb	r2,0(r2)
40019f34:	14c00126 	beq	r2,r19,40019f3c <alt_find_file+0x44>
40019f38:	1000021e 	bne	r2,zero,40019f44 <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
40019f3c:	001a0900 	call	4001a090 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
40019f40:	10001626 	beq	r2,zero,40019f9c <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
40019f44:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
40019f48:	85000b26 	beq	r16,r20,40019f78 <alt_find_file+0x80>
  {
    len = strlen(next->name);
40019f4c:	84400217 	ldw	r17,8(r16)
40019f50:	8809883a 	mov	r4,r17
40019f54:	000f1640 	call	4000f164 <strlen>
40019f58:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
40019f5c:	8885883a 	add	r2,r17,r2
40019f60:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
40019f64:	900b883a 	mov	r5,r18
40019f68:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
40019f6c:	14ffef1e 	bne	r2,r19,40019f2c <__alt_data_end+0xc0019f2c>
    {
      len -= 1;
40019f70:	31bfffc4 	addi	r6,r6,-1
40019f74:	003fed06 	br	40019f2c <__alt_data_end+0xc0019f2c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
40019f78:	0005883a 	mov	r2,zero
}
40019f7c:	dfc00517 	ldw	ra,20(sp)
40019f80:	dd000417 	ldw	r20,16(sp)
40019f84:	dcc00317 	ldw	r19,12(sp)
40019f88:	dc800217 	ldw	r18,8(sp)
40019f8c:	dc400117 	ldw	r17,4(sp)
40019f90:	dc000017 	ldw	r16,0(sp)
40019f94:	dec00604 	addi	sp,sp,24
40019f98:	f800283a 	ret
40019f9c:	8005883a 	mov	r2,r16
40019fa0:	003ff606 	br	40019f7c <__alt_data_end+0xc0019f7c>

40019fa4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
40019fa4:	01d000b4 	movhi	r7,16386
40019fa8:	39eccd04 	addi	r7,r7,-19660
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
40019fac:	0005883a 	mov	r2,zero
40019fb0:	3807883a 	mov	r3,r7
40019fb4:	01800804 	movi	r6,32
40019fb8:	00000206 	br	40019fc4 <alt_get_fd+0x20>
40019fbc:	10800044 	addi	r2,r2,1
40019fc0:	11800a26 	beq	r2,r6,40019fec <alt_get_fd+0x48>
  {
    if (!alt_fd_list[i].dev)
40019fc4:	19400017 	ldw	r5,0(r3)
40019fc8:	18c00304 	addi	r3,r3,12
40019fcc:	283ffb1e 	bne	r5,zero,40019fbc <__alt_data_end+0xc0019fbc>
    {
      alt_fd_list[i].dev = dev;
40019fd0:	10c00324 	muli	r3,r2,12
40019fd4:	38cf883a 	add	r7,r7,r3
      if (i > alt_max_fd)
40019fd8:	d0e00a17 	ldw	r3,-32728(gp)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
40019fdc:	39000015 	stw	r4,0(r7)
      if (i > alt_max_fd)
40019fe0:	1880030e 	bge	r3,r2,40019ff0 <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
40019fe4:	d0a00a15 	stw	r2,-32728(gp)
40019fe8:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
40019fec:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
40019ff0:	f800283a 	ret

40019ff4 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
40019ff4:	00840004 	movi	r2,4096
40019ff8:	1140012e 	bgeu	r2,r5,4001a000 <alt_icache_flush+0xc>
40019ffc:	100b883a 	mov	r5,r2
4001a000:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
4001a004:	2005883a 	mov	r2,r4
4001a008:	2140092e 	bgeu	r4,r5,4001a030 <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
4001a00c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
4001a010:	10800804 	addi	r2,r2,32
4001a014:	117ffd36 	bltu	r2,r5,4001a00c <__alt_data_end+0xc001a00c>
4001a018:	0104303a 	nor	r2,zero,r4
4001a01c:	2885883a 	add	r2,r5,r2
4001a020:	1004d17a 	srli	r2,r2,5
4001a024:	10800044 	addi	r2,r2,1
4001a028:	1004917a 	slli	r2,r2,5
4001a02c:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
4001a030:	210007cc 	andi	r4,r4,31
4001a034:	20000126 	beq	r4,zero,4001a03c <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
4001a038:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
4001a03c:	0000203a 	flushp
4001a040:	f800283a 	ret

4001a044 <atexit>:
4001a044:	200b883a 	mov	r5,r4
4001a048:	000f883a 	mov	r7,zero
4001a04c:	000d883a 	mov	r6,zero
4001a050:	0009883a 	mov	r4,zero
4001a054:	001a10c1 	jmpi	4001a10c <__register_exitproc>

4001a058 <exit>:
4001a058:	defffe04 	addi	sp,sp,-8
4001a05c:	000b883a 	mov	r5,zero
4001a060:	dc000015 	stw	r16,0(sp)
4001a064:	dfc00115 	stw	ra,4(sp)
4001a068:	2021883a 	mov	r16,r4
4001a06c:	001a2240 	call	4001a224 <__call_exitprocs>
4001a070:	009000b4 	movhi	r2,16386
4001a074:	10ad4604 	addi	r2,r2,-19176
4001a078:	11000017 	ldw	r4,0(r2)
4001a07c:	20800f17 	ldw	r2,60(r4)
4001a080:	10000126 	beq	r2,zero,4001a088 <exit+0x30>
4001a084:	103ee83a 	callr	r2
4001a088:	8009883a 	mov	r4,r16
4001a08c:	001a3a40 	call	4001a3a4 <_exit>

4001a090 <memcmp>:
4001a090:	01c000c4 	movi	r7,3
4001a094:	3980192e 	bgeu	r7,r6,4001a0fc <memcmp+0x6c>
4001a098:	2144b03a 	or	r2,r4,r5
4001a09c:	11c4703a 	and	r2,r2,r7
4001a0a0:	10000f26 	beq	r2,zero,4001a0e0 <memcmp+0x50>
4001a0a4:	20800003 	ldbu	r2,0(r4)
4001a0a8:	28c00003 	ldbu	r3,0(r5)
4001a0ac:	10c0151e 	bne	r2,r3,4001a104 <memcmp+0x74>
4001a0b0:	31bfff84 	addi	r6,r6,-2
4001a0b4:	01ffffc4 	movi	r7,-1
4001a0b8:	00000406 	br	4001a0cc <memcmp+0x3c>
4001a0bc:	20800003 	ldbu	r2,0(r4)
4001a0c0:	28c00003 	ldbu	r3,0(r5)
4001a0c4:	31bfffc4 	addi	r6,r6,-1
4001a0c8:	10c00e1e 	bne	r2,r3,4001a104 <memcmp+0x74>
4001a0cc:	21000044 	addi	r4,r4,1
4001a0d0:	29400044 	addi	r5,r5,1
4001a0d4:	31fff91e 	bne	r6,r7,4001a0bc <__alt_data_end+0xc001a0bc>
4001a0d8:	0005883a 	mov	r2,zero
4001a0dc:	f800283a 	ret
4001a0e0:	20c00017 	ldw	r3,0(r4)
4001a0e4:	28800017 	ldw	r2,0(r5)
4001a0e8:	18bfee1e 	bne	r3,r2,4001a0a4 <__alt_data_end+0xc001a0a4>
4001a0ec:	31bfff04 	addi	r6,r6,-4
4001a0f0:	21000104 	addi	r4,r4,4
4001a0f4:	29400104 	addi	r5,r5,4
4001a0f8:	39bff936 	bltu	r7,r6,4001a0e0 <__alt_data_end+0xc001a0e0>
4001a0fc:	303fe91e 	bne	r6,zero,4001a0a4 <__alt_data_end+0xc001a0a4>
4001a100:	003ff506 	br	4001a0d8 <__alt_data_end+0xc001a0d8>
4001a104:	10c5c83a 	sub	r2,r2,r3
4001a108:	f800283a 	ret

4001a10c <__register_exitproc>:
4001a10c:	defffa04 	addi	sp,sp,-24
4001a110:	dc000315 	stw	r16,12(sp)
4001a114:	041000b4 	movhi	r16,16386
4001a118:	842d4604 	addi	r16,r16,-19176
4001a11c:	80c00017 	ldw	r3,0(r16)
4001a120:	dc400415 	stw	r17,16(sp)
4001a124:	dfc00515 	stw	ra,20(sp)
4001a128:	18805217 	ldw	r2,328(r3)
4001a12c:	2023883a 	mov	r17,r4
4001a130:	10003726 	beq	r2,zero,4001a210 <__register_exitproc+0x104>
4001a134:	10c00117 	ldw	r3,4(r2)
4001a138:	010007c4 	movi	r4,31
4001a13c:	20c00e16 	blt	r4,r3,4001a178 <__register_exitproc+0x6c>
4001a140:	1a000044 	addi	r8,r3,1
4001a144:	8800221e 	bne	r17,zero,4001a1d0 <__register_exitproc+0xc4>
4001a148:	18c00084 	addi	r3,r3,2
4001a14c:	18c7883a 	add	r3,r3,r3
4001a150:	18c7883a 	add	r3,r3,r3
4001a154:	12000115 	stw	r8,4(r2)
4001a158:	10c7883a 	add	r3,r2,r3
4001a15c:	19400015 	stw	r5,0(r3)
4001a160:	0005883a 	mov	r2,zero
4001a164:	dfc00517 	ldw	ra,20(sp)
4001a168:	dc400417 	ldw	r17,16(sp)
4001a16c:	dc000317 	ldw	r16,12(sp)
4001a170:	dec00604 	addi	sp,sp,24
4001a174:	f800283a 	ret
4001a178:	00900074 	movhi	r2,16385
4001a17c:	10b92504 	addi	r2,r2,-7020
4001a180:	10002626 	beq	r2,zero,4001a21c <__register_exitproc+0x110>
4001a184:	01006404 	movi	r4,400
4001a188:	d9400015 	stw	r5,0(sp)
4001a18c:	d9800115 	stw	r6,4(sp)
4001a190:	d9c00215 	stw	r7,8(sp)
4001a194:	000e4940 	call	4000e494 <malloc>
4001a198:	d9400017 	ldw	r5,0(sp)
4001a19c:	d9800117 	ldw	r6,4(sp)
4001a1a0:	d9c00217 	ldw	r7,8(sp)
4001a1a4:	10001d26 	beq	r2,zero,4001a21c <__register_exitproc+0x110>
4001a1a8:	81000017 	ldw	r4,0(r16)
4001a1ac:	10000115 	stw	zero,4(r2)
4001a1b0:	02000044 	movi	r8,1
4001a1b4:	22405217 	ldw	r9,328(r4)
4001a1b8:	0007883a 	mov	r3,zero
4001a1bc:	12400015 	stw	r9,0(r2)
4001a1c0:	20805215 	stw	r2,328(r4)
4001a1c4:	10006215 	stw	zero,392(r2)
4001a1c8:	10006315 	stw	zero,396(r2)
4001a1cc:	883fde26 	beq	r17,zero,4001a148 <__alt_data_end+0xc001a148>
4001a1d0:	18c9883a 	add	r4,r3,r3
4001a1d4:	2109883a 	add	r4,r4,r4
4001a1d8:	1109883a 	add	r4,r2,r4
4001a1dc:	21802215 	stw	r6,136(r4)
4001a1e0:	01800044 	movi	r6,1
4001a1e4:	12406217 	ldw	r9,392(r2)
4001a1e8:	30cc983a 	sll	r6,r6,r3
4001a1ec:	4992b03a 	or	r9,r9,r6
4001a1f0:	12406215 	stw	r9,392(r2)
4001a1f4:	21c04215 	stw	r7,264(r4)
4001a1f8:	01000084 	movi	r4,2
4001a1fc:	893fd21e 	bne	r17,r4,4001a148 <__alt_data_end+0xc001a148>
4001a200:	11006317 	ldw	r4,396(r2)
4001a204:	218cb03a 	or	r6,r4,r6
4001a208:	11806315 	stw	r6,396(r2)
4001a20c:	003fce06 	br	4001a148 <__alt_data_end+0xc001a148>
4001a210:	18805304 	addi	r2,r3,332
4001a214:	18805215 	stw	r2,328(r3)
4001a218:	003fc606 	br	4001a134 <__alt_data_end+0xc001a134>
4001a21c:	00bfffc4 	movi	r2,-1
4001a220:	003fd006 	br	4001a164 <__alt_data_end+0xc001a164>

4001a224 <__call_exitprocs>:
4001a224:	defff504 	addi	sp,sp,-44
4001a228:	df000915 	stw	fp,36(sp)
4001a22c:	dd400615 	stw	r21,24(sp)
4001a230:	dc800315 	stw	r18,12(sp)
4001a234:	dfc00a15 	stw	ra,40(sp)
4001a238:	ddc00815 	stw	r23,32(sp)
4001a23c:	dd800715 	stw	r22,28(sp)
4001a240:	dd000515 	stw	r20,20(sp)
4001a244:	dcc00415 	stw	r19,16(sp)
4001a248:	dc400215 	stw	r17,8(sp)
4001a24c:	dc000115 	stw	r16,4(sp)
4001a250:	d9000015 	stw	r4,0(sp)
4001a254:	2839883a 	mov	fp,r5
4001a258:	04800044 	movi	r18,1
4001a25c:	057fffc4 	movi	r21,-1
4001a260:	009000b4 	movhi	r2,16386
4001a264:	10ad4604 	addi	r2,r2,-19176
4001a268:	12000017 	ldw	r8,0(r2)
4001a26c:	45005217 	ldw	r20,328(r8)
4001a270:	44c05204 	addi	r19,r8,328
4001a274:	a0001c26 	beq	r20,zero,4001a2e8 <__call_exitprocs+0xc4>
4001a278:	a0800117 	ldw	r2,4(r20)
4001a27c:	15ffffc4 	addi	r23,r2,-1
4001a280:	b8000d16 	blt	r23,zero,4001a2b8 <__call_exitprocs+0x94>
4001a284:	14000044 	addi	r16,r2,1
4001a288:	8421883a 	add	r16,r16,r16
4001a28c:	8421883a 	add	r16,r16,r16
4001a290:	84402004 	addi	r17,r16,128
4001a294:	a463883a 	add	r17,r20,r17
4001a298:	a421883a 	add	r16,r20,r16
4001a29c:	e0001e26 	beq	fp,zero,4001a318 <__call_exitprocs+0xf4>
4001a2a0:	80804017 	ldw	r2,256(r16)
4001a2a4:	e0801c26 	beq	fp,r2,4001a318 <__call_exitprocs+0xf4>
4001a2a8:	bdffffc4 	addi	r23,r23,-1
4001a2ac:	843fff04 	addi	r16,r16,-4
4001a2b0:	8c7fff04 	addi	r17,r17,-4
4001a2b4:	bd7ff91e 	bne	r23,r21,4001a29c <__alt_data_end+0xc001a29c>
4001a2b8:	00900074 	movhi	r2,16385
4001a2bc:	10b92a04 	addi	r2,r2,-7000
4001a2c0:	10000926 	beq	r2,zero,4001a2e8 <__call_exitprocs+0xc4>
4001a2c4:	a0800117 	ldw	r2,4(r20)
4001a2c8:	1000301e 	bne	r2,zero,4001a38c <__call_exitprocs+0x168>
4001a2cc:	a0800017 	ldw	r2,0(r20)
4001a2d0:	10003226 	beq	r2,zero,4001a39c <__call_exitprocs+0x178>
4001a2d4:	a009883a 	mov	r4,r20
4001a2d8:	98800015 	stw	r2,0(r19)
4001a2dc:	000e4a80 	call	4000e4a8 <free>
4001a2e0:	9d000017 	ldw	r20,0(r19)
4001a2e4:	a03fe41e 	bne	r20,zero,4001a278 <__alt_data_end+0xc001a278>
4001a2e8:	dfc00a17 	ldw	ra,40(sp)
4001a2ec:	df000917 	ldw	fp,36(sp)
4001a2f0:	ddc00817 	ldw	r23,32(sp)
4001a2f4:	dd800717 	ldw	r22,28(sp)
4001a2f8:	dd400617 	ldw	r21,24(sp)
4001a2fc:	dd000517 	ldw	r20,20(sp)
4001a300:	dcc00417 	ldw	r19,16(sp)
4001a304:	dc800317 	ldw	r18,12(sp)
4001a308:	dc400217 	ldw	r17,8(sp)
4001a30c:	dc000117 	ldw	r16,4(sp)
4001a310:	dec00b04 	addi	sp,sp,44
4001a314:	f800283a 	ret
4001a318:	a0800117 	ldw	r2,4(r20)
4001a31c:	80c00017 	ldw	r3,0(r16)
4001a320:	10bfffc4 	addi	r2,r2,-1
4001a324:	15c01426 	beq	r2,r23,4001a378 <__call_exitprocs+0x154>
4001a328:	80000015 	stw	zero,0(r16)
4001a32c:	183fde26 	beq	r3,zero,4001a2a8 <__alt_data_end+0xc001a2a8>
4001a330:	95c8983a 	sll	r4,r18,r23
4001a334:	a0806217 	ldw	r2,392(r20)
4001a338:	a5800117 	ldw	r22,4(r20)
4001a33c:	2084703a 	and	r2,r4,r2
4001a340:	10000b26 	beq	r2,zero,4001a370 <__call_exitprocs+0x14c>
4001a344:	a0806317 	ldw	r2,396(r20)
4001a348:	2088703a 	and	r4,r4,r2
4001a34c:	20000c1e 	bne	r4,zero,4001a380 <__call_exitprocs+0x15c>
4001a350:	89400017 	ldw	r5,0(r17)
4001a354:	d9000017 	ldw	r4,0(sp)
4001a358:	183ee83a 	callr	r3
4001a35c:	a0800117 	ldw	r2,4(r20)
4001a360:	15bfbf1e 	bne	r2,r22,4001a260 <__alt_data_end+0xc001a260>
4001a364:	98800017 	ldw	r2,0(r19)
4001a368:	153fcf26 	beq	r2,r20,4001a2a8 <__alt_data_end+0xc001a2a8>
4001a36c:	003fbc06 	br	4001a260 <__alt_data_end+0xc001a260>
4001a370:	183ee83a 	callr	r3
4001a374:	003ff906 	br	4001a35c <__alt_data_end+0xc001a35c>
4001a378:	a5c00115 	stw	r23,4(r20)
4001a37c:	003feb06 	br	4001a32c <__alt_data_end+0xc001a32c>
4001a380:	89000017 	ldw	r4,0(r17)
4001a384:	183ee83a 	callr	r3
4001a388:	003ff406 	br	4001a35c <__alt_data_end+0xc001a35c>
4001a38c:	a0800017 	ldw	r2,0(r20)
4001a390:	a027883a 	mov	r19,r20
4001a394:	1029883a 	mov	r20,r2
4001a398:	003fb606 	br	4001a274 <__alt_data_end+0xc001a274>
4001a39c:	0005883a 	mov	r2,zero
4001a3a0:	003ffb06 	br	4001a390 <__alt_data_end+0xc001a390>

4001a3a4 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
4001a3a4:	20000226 	beq	r4,zero,4001a3b0 <_exit+0xc>
    ALT_SIM_FAIL();
4001a3a8:	002af070 	cmpltui	zero,zero,43969
4001a3ac:	003fff06 	br	4001a3ac <__alt_data_end+0xc001a3ac>
  } else {
    ALT_SIM_PASS();
4001a3b0:	002af0b0 	cmpltui	zero,zero,43970
4001a3b4:	003ffd06 	br	4001a3ac <__alt_data_end+0xc001a3ac>
