
Parser_Node.elf:     file format elf32-littlenios2
Parser_Node.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x4000018c

Program Header:
    LOAD off    0x00001000 vaddr 0x40000000 paddr 0x40000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x40000020 paddr 0x40000020 align 2**12
         filesz 0x0001ee84 memsz 0x0001ee84 flags r-x
    LOAD off    0x0001fea4 vaddr 0x4001eea4 paddr 0x40022c5c align 2**12
         filesz 0x00003db8 memsz 0x00003db8 flags rw-
    LOAD off    0x00024a14 vaddr 0x40026a14 paddr 0x40026a14 align 2**12
         filesz 0x00000000 memsz 0x0001eef8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  40000000  40000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  40000020  40000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001d214  4000018c  4000018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001b04  4001d3a0  4001d3a0  0001e3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00003db8  4001eea4  40022c5c  0001fea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0001eef8  40026a14  40026a14  00024a14  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00001000  00001000  00023c5c  2**0
                  CONTENTS
  7 .DDR2_Controller 00000000  4004590c  4004590c  00023c5c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00023c5c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000014c0  00000000  00000000  00023c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003f212  00000000  00000000  00025140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ec03  00000000  00000000  00064352  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011c7c  00000000  00000000  00072f55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000351c  00000000  00000000  00084bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006275  00000000  00000000  000880f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000280e7  00000000  00000000  0008e365  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000b644c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000037a0  00000000  00000000  000b64b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000becca  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000beccd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000becd9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000becda  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000becdb  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  000bece6  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000becf1  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  000becfc  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000003a  00000000  00000000  000bed07  2**0
                  CONTENTS, READONLY
 27 .jdi          0000dd99  00000000  00000000  000bed41  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0026db6d  00000000  00000000  000ccada  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
40000000 l    d  .entry	00000000 .entry
40000020 l    d  .exceptions	00000000 .exceptions
4000018c l    d  .text	00000000 .text
4001d3a0 l    d  .rodata	00000000 .rodata
4001eea4 l    d  .rwdata	00000000 .rwdata
40026a14 l    d  .bss	00000000 .bss
00001000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
4004590c l    d  .DDR2_Controller	00000000 .DDR2_Controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Parser_Node_bsp//obj/HAL/src/crt0.o
400001d4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 block.c
4001d3a0 l     O .rodata	00000018 LevelScale
00000000 l    df *ABS*	00000000 cavlc.c
00000000 l    df *ABS*	00000000 common.c
00000000 l    df *ABS*	00000000 coretrans.c
4001d3b8 l     O .rodata	00000040 transform.3189
00000000 l    df *ABS*	00000000 in_file.c
00000000 l    df *ABS*	00000000 input.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mbmodes.c
4001de40 l     O .rodata	000001a0 ISliceMbModes
4001ddc8 l     O .rodata	00000078 PSliceMbModes
4001dd88 l     O .rodata	00000040 PSliceSubMbModes
4001d988 l     O .rodata	00000400 CSWTCH.3
4001d978 l     O .rodata	00000010 CSWTCH.5
4001d960 l     O .rodata	00000018 CSWTCH.7
00000000 l    df *ABS*	00000000 mode_pred.c
00000000 l    df *ABS*	00000000 nal.c
00000000 l    df *ABS*	00000000 noc_control.c
40026abc l     O .bss	00004184 the_buffer
00000000 l    df *ABS*	00000000 params.c
00000000 l    df *ABS*	00000000 parser_2_buffer.c
00000000 l    df *ABS*	00000000 perf.c
00000000 l    df *ABS*	00000000 residual.c
400202fc l     O .rwdata	00000c00 CoeffTokenCodes
40020248 l     O .rwdata	000000b4 CoeffTokenCodes_ChromaDC
4001f5a0 l     O .rwdata	00000ca8 TotalZerosCodes_4x4
4001f4ec l     O .rwdata	000000b4 TotalZerosCodes_ChromaDC
4001f024 l     O .rwdata	000004c8 RunBeforeCodes
00000000 l    df *ABS*	00000000 slice.c
00000000 l    df *ABS*	00000000 slicehdr.c
4001e460 l     O .rodata	00000028 CSWTCH.9
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
40009b04 l     F .text	00000008 __fp_unlock
40009b18 l     F .text	0000019c __sinit.part.1
40009cb4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 ftell.c
00000000 l    df *ABS*	00000000 ftello.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
400210d4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 perror.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 refill.c
4000be38 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfprintf.c
4001eccb l     O .rodata	00000010 zeroes.4404
4000eca0 l     F .text	000000bc __sbprintf
4001ecdb l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
4000f0e4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
40021920 l     O .rwdata	00000020 lc_ctype_charset
40021900 l     O .rwdata	00000020 lc_message_charset
40021940 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
4001ed08 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
40012c70 l     F .text	000000fc __sprint_r.part.0
4001ee3c l     O .rodata	00000010 blanks.4348
4001ee2c l     O .rodata	00000010 zeroes.4349
400141fc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
40015ec0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
40022c04 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
40021b74 l     O .rwdata	00001060 jtag_uart_0
40021b4c l     O .rwdata	00000028 altera_hostfs
40021b20 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
40016584 l     F .text	00000374 Check_for_DOS_FAT.part.5
400168f8 l     F .text	000001a0 Read_File_Record_At_Offset.part.6
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
4001bf20 l     F .text	0000004c altera_avalon_jtag_uart_timeout
4001bf6c l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
40022c44 l     O .rwdata	00000009 hcinfo.2538
40022c38 l     O .rwdata	0000000a hcinfo.2551
40022c2c l     O .rwdata	00000009 hcinfo.2560
40022c20 l     O .rwdata	0000000a hcinfo.2573
40022c14 l     O .rwdata	0000000a hcinfo.2586
40022c08 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
40026ab8 g     O .bss	00000004 alt_instruction_exception_handler
40026aa0 g     O .bss	00000004 aux_status_register
4000bcd4 g     F .text	00000018 putchar
4001227c g     F .text	00000074 _mprec_log10
40012368 g     F .text	0000008c __any_on
40011028 g     F .text	00000054 _isatty_r
4001ed14 g     O .rodata	00000028 __mprec_tinytens
40016120 g     F .text	00000060 alt_main
4000bcec g     F .text	000000c0 _puts_r
4004580c g     O .bss	00000100 alt_irq
40011158 g     F .text	00000060 _lseek_r
40022c5c g       *ABS*	00000000 __flash_rwdata_start
4001096c g     F .text	000000ac __sflags
400152b0 g     F .text	00000088 .hidden __eqdf2
40017084 g     F .text	0000033c Check_for_Master_Boot_Record
40001ae8 g     F .text	00000020 input_get_byte
4004590c g       *ABS*	00000000 __alt_heap_start
4001bd0c g     F .text	000001d8 alt_up_sd_card_fclose
4000bc90 g     F .text	0000003c printf
40014618 g     F .text	0000009c _wcrtomb_r
40005f30 g     F .text	00001498 decode_slice_data
4000c310 g     F .text	0000005c __sseek
40009e54 g     F .text	00000010 __sinit
400142b8 g     F .text	00000140 __swbuf_r
400029ec g     F .text	000000d0 get_chroma_nC
4001107c g     F .text	0000007c _setlocale_r
40009cbc g     F .text	00000068 __sfmoreglue
40016184 g     F .text	00000004 __malloc_unlock
40003da8 g     F .text	00000108 _str_nal_unit_type
4001eea4 g     O .rwdata	000000c0 CodedBlockPatternMapping_Inter
4001c4a0 g     F .text	00000060 alt_hostfs_open
40000bb0 g     F .text	00000060 get_unsigned_exp_golomb
40026a7c g     O .bss	00000004 current_sector_modified
4000c9d0 g     F .text	0000001c strerror
40026a18 g     O .bss	00000004 input_remain
4001129c g     F .text	0000015c memmove
40009e3c g     F .text	00000018 _cleanup
400113f8 g     F .text	000000a8 _Balloc
4001ace4 g     F .text	00000074 alt_up_sd_card_is_Present
40016b4c g     F .text	000000c4 Save_Modified_Sector
4003cc68 g     O .bss	00000014 nalu
40015338 g     F .text	000000dc .hidden __gtdf2
4001d12c g     F .text	00000008 altera_nios2_gen2_irq_init
40000000 g     F .entry	0000001c __reset
40026a84 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
40000020 g       *ABS*	00000000 __flash_exceptions_start
4000ab10 g     F .text	0000005c _fstat_r
40026a50 g     O .bss	00000004 errno
4000c28c g     F .text	00000008 __seofread
40026a70 g     O .bss	00000004 alt_argv
4002abd4 g       *ABS*	00000000 _gp
40016438 g     F .text	00000004 usleep
4001b600 g     F .text	00000240 alt_up_sd_card_fopen
4001b524 g     F .text	000000dc alt_up_sd_card_find_first
40005588 g     F .text	0000005c perf_enter
40026a90 g     O .bss	00000004 command_argument_register
40000000 g       *ABS*	00000000 __alt_mem_DDR2_Controller
400011d4 g     F .text	000005c8 hadamard
40021978 g     O .rwdata	00000180 alt_fd_list
4001c544 g     F .text	00000018 alt_hostfs_seek
4000bccc g     F .text	00000008 _putchar_r
4001a080 g     F .text	000000ec find_first_empty_record_in_root_directory
4001cc58 g     F .text	00000078 alt_find_dev
4000b8fc g     F .text	00000148 memcpy
4000c07c g     F .text	000001bc setvbuf
4003cc7c g     O .bss	00000088 sh
40009b0c g     F .text	0000000c _cleanup_r
4000945c g     F .text	000000dc .hidden __floatsidf
4000bc4c g     F .text	00000014 perror
4001cd7c g     F .text	00000034 alt_fs_reg
4001cf00 g     F .text	00000104 alt_io_redirect
40015414 g     F .text	000000f4 .hidden __ltdf2
400024e4 g     F .text	00000030 _str_mb_type
4001d3a0 g       *ABS*	00000000 __DTOR_END__
40001d04 g     F .text	000001dc h264_decode_frame
4000bdac g     F .text	00000014 puts
4001d184 g     F .text	00000074 alt_exception_cause_generated_bad_addr
40019c74 g     F .text	000001bc find_first_empty_cluster
4000c374 g     F .text	0000065c _strerror_r
40012b20 g     F .text	00000074 __fpclassifyd
400121d8 g     F .text	000000a4 __ratio
4001ac7c g     F .text	00000068 alt_up_sd_card_open_dev
400141e0 g     F .text	0000001c __vfiprintf_internal
4001c1ac g     F .text	00000154 altera_avalon_jtag_uart_read
4000b0c8 g     F .text	00000014 malloc
4000bc60 g     F .text	00000030 _printf_r
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
40007a74 g     F .text	00000064 .hidden __udivsi3
40015f54 g     F .text	00000084 isatty
40002908 g     F .text	00000034 get_mb_mode
4001ed64 g     O .rodata	000000c8 __mprec_tens
4000179c g     F .text	0000011c input_open
400110f8 g     F .text	0000000c __locale_charset
400040a0 g     F .text	0000016c buffers_loop
4001d134 g     F .text	00000050 alt_icache_flush
40026a5c g     O .bss	00000004 __malloc_top_pad
40022be4 g     O .rwdata	00000004 __mb_cur_max
40011128 g     F .text	0000000c _localeconv_r
40011804 g     F .text	0000003c __i2b
40010b6c g     F .text	000004bc __sfvwrite_r
40017b90 g     F .text	0000007c get_dir_divider_location
4000c028 g     F .text	00000054 _sbrk_r
40017a40 g     F .text	00000054 filename_to_upper_case
400043f0 g     F .text	00000108 get_packet_by_id
40000878 g     F .text	00000188 transform_chroma_dc
4001c514 g     F .text	00000018 alt_hostfs_read
4001b840 g     F .text	00000038 alt_up_sd_card_set_attributes
400018b8 g     F .text	00000030 input_read
400173c0 g     F .text	00000218 Read_File_Record_At_Offset
4001255c g     F .text	00000060 _read_r
40001acc g     F .text	0000001c input_align_to_next_byte
40022bec g     O .rwdata	00000004 alt_max_fd
40018ee0 g     F .text	00000d94 find_file_in_directory
40009758 g     F .text	000000f0 _fclose_r
40045234 g     O .bss	00000018 RunBeforeCodeTable
40009ad4 g     F .text	00000030 fflush
40026a58 g     O .bss	00000004 __malloc_max_sbrked_mem
4000555c g     F .text	0000002c perf_enable
400023c0 g     F .text	000000d4 decode_mb_mode
4001ad58 g     F .text	00000158 alt_up_sd_card_is_FAT16
40007b30 g     F .text	000008ac .hidden __adddf3
40011f80 g     F .text	0000010c __b2d
40026a14 g     O .bss	00000004 input_fd
40014d78 g     F .text	00000538 .hidden __umoddi3
400078dc g     F .text	00000030 _str_slice_type
400160a4 g     F .text	0000007c lseek
400044f8 g     F .text	000001b4 decode_seq_parameter_set
40022bd4 g     O .rwdata	00000004 _global_impure_ptr
40004308 g     F .text	000000e8 print_rx_buffer
40018014 g     F .text	00000ecc get_home_directory_cluster_for_file
400125bc g     F .text	00000564 _realloc_r
4004590c g       *ABS*	00000000 __bss_end
4001ce98 g     F .text	00000068 alt_iic_isr_register
4001d038 g     F .text	000000f4 alt_tick
40026a30 g     O .bss	00000004 ref
40014800 g     F .text	00000578 .hidden __udivdi3
40014574 g     F .text	00000024 _fputwc_r
40001f28 g     F .text	00000068 sd_fwrite
4001ed3c g     O .rodata	00000028 __mprec_bigtens
400115e8 g     F .text	00000104 __s2b
40009538 g     F .text	000000a8 .hidden __floatunsidf
40026a1c g     O .bss	00000004 input_size
4000293c g     F .text	000000b0 get_luma_nC
40011cc0 g     F .text	00000060 __mcmp
400048ac g     F .text	0000017c check_unsupported_features
40026a78 g     O .bss	00000004 current_sector_index
40009e74 g     F .text	00000018 __fp_lock_all
4001ce80 g     F .text	00000018 alt_ic_irq_enabled
4001d004 g     F .text	00000034 alt_alarm_stop
40016eec g     F .text	00000198 mark_cluster
40026aac g     O .bss	00000004 alt_irq_active
4000a6b0 g     F .text	00000444 _fseeko_r
40001980 g     F .text	00000060 input_peek_bits
4001c500 g     F .text	00000014 alt_hostfs_close
400000fc g     F .exceptions	00000064 alt_irq_handler
40021af8 g     O .rwdata	00000028 alt_dev_null
40000ab8 g     F .text	00000068 init_code_table
4001a16c g     F .text	000002e8 convert_filename_to_name_extension
4003cd04 g     O .bss	000080ac pps
4001cb0c g     F .text	00000018 alt_dcache_flush_all
400116ec g     F .text	00000068 __hi0bits
40026aa4 g     O .bss	00000004 is_sd_card_formated_as_FAT16
400093dc g     F .text	00000080 .hidden __fixdfsi
40009644 g     F .text	00000018 calloc
40002544 g     F .text	00000030 _str_pred_mode
4000405c g     F .text	00000034 set_cpu_read_flag
40019e30 g     F .text	00000250 find_first_empty_record_in_a_subdirectory
40022c5c g       *ABS*	00000000 __ram_rwdata_end
40022bf0 g     O .rwdata	00000008 alt_dev_list
40010a18 g     F .text	00000044 _fputc_r
4001643c g     F .text	000000c4 write
400033a0 g     F .text	00000098 FillMVs
40002b58 g     F .text	00000450 PredictMV
400123f4 g     F .text	000000a0 _putc_r
40026a80 g     O .bss	00000004 device_pointer
40000418 g     F .text	00000460 transform_luma_dc
4001eea4 g       *ABS*	00000000 __ram_rodata_end
40003eb0 g     F .text	00000060 noc_init
40015edc g     F .text	00000078 fstat
40009fd8 g     F .text	00000024 fprintf
40015414 g     F .text	000000f4 .hidden __ledf2
40011a38 g     F .text	00000140 __pow5mult
40003438 g     F .text	00000108 DeriveMVs
40012d84 g     F .text	0000145c ___vfiprintf_internal_r
40026a68 g     O .bss	00000004 __nlocale_changed
40007ad8 g     F .text	00000058 .hidden __umodsi3
4004590c g       *ABS*	00000000 end
4000aaf4 g     F .text	0000001c fseeko
40001a04 g     F .text	00000078 input_get_bits
400019e0 g     F .text	00000024 input_step_bits
4000a694 g     F .text	0000001c fseek
40003f10 g     F .text	00000098 send_flit
4001c074 g     F .text	00000078 altera_avalon_jtag_uart_init
40000160 g     F .exceptions	0000002c alt_instruction_exception_entry
40002494 g     F .text	00000050 decode_sub_mb_mode
4001d3a0 g       *ABS*	00000000 __CTOR_LIST__
80000000 g       *ABS*	00000000 __alt_stack_pointer
400095e0 g     F .text	00000064 .hidden __clzsi2
4004524c g     O .bss	0000000c TotalZerosCodeTable_ChromaDC
4001c300 g     F .text	000001a0 altera_avalon_jtag_uart_write
40009e64 g     F .text	00000004 __sfp_lock_acquire
400111b8 g     F .text	000000e4 memchr
4000ca8c g     F .text	000021f8 ___vfprintf_internal_r
4000a380 g     F .text	00000310 _free_r
40011104 g     F .text	00000010 __locale_mb_cur_max
4000ef64 g     F .text	00000180 __call_exitprocs
40026a64 g     O .bss	00000004 __mlocale_changed
40022bdc g     O .rwdata	00000004 __malloc_sbrk_base
4000018c g     F .text	0000004c _start
40026ab4 g     O .bss	00000004 _alt_tick_rate
40026a38 g     O .bss	00000004 frame_no
40003fa8 g     F .text	0000002c no_data_send
4000ca84 g     F .text	00000008 _user_strerror
4000790c g     F .text	00000070 .hidden __floatundidf
4000bdd8 g     F .text	00000060 rand
4000ac70 g     F .text	00000014 ftello
40011b78 g     F .text	00000148 __lshift
40026ab0 g     O .bss	00000004 _alt_nticks
40016300 g     F .text	000000c8 read
40016520 g     F .text	00000064 alt_sys_init
4000bb6c g     F .text	00000060 _open_r
400042f8 g     F .text	00000010 get_num_packets
4001d288 g     F .text	00000118 __register_exitproc
40011840 g     F .text	000001f8 __multiply
4001c0ec g     F .text	0000004c altera_avalon_jtag_uart_close
40002abc g     F .text	0000009c get_predIntra4x4PredMode
4001eea4 g       *ABS*	00000000 __ram_rwdata_start
4001d3a0 g       *ABS*	00000000 __ram_rodata_start
4002ac40 g     O .bss	00000028 __malloc_current_mallinfo
4000265c g     F .text	00000100 alloc_mode_pred_info
4001208c g     F .text	0000014c __d2b
4002ac68 g     O .bss	00002000 ring_buf
40026aa8 g     O .bss	00000004 initialized
4001bee4 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
4001cdb0 g     F .text	00000050 alt_get_fd
400452a4 g     O .bss	00000014 search_data
4001ca94 g     F .text	00000078 alt_busy_sleep
400039dc g     F .text	000003b0 get_next_nal_unit
4000ef10 g     F .text	00000054 _close_r
40005e30 g     F .text	00000100 init_code_tables
4001d20c g     F .text	0000007c memcmp
4001bf04 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
4004590c g       *ABS*	00000000 __alt_stack_base
4001bf14 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
40004a28 g     F .text	00000060 send_start_new_frame
40001958 g     F .text	00000028 input_close
4000ae0c g     F .text	000000cc _fwrite_r
40002fa8 g     F .text	000003f8 Predict_P_Skip_MV
4000ab84 g     F .text	000000ec _ftello_r
4000edbc g     F .text	00000154 __swsetup_r
400042c8 g     F .text	00000030 pop_rx_buffer
40044db0 g     O .bss	00000484 sps
400083dc g     F .text	000008e8 .hidden __divdf3
40009d24 g     F .text	00000118 __sfp
400452b8 g     O .bss	00000054 boot_sector_data
400122f0 g     F .text	00000078 __copybits
40003540 g     F .text	0000049c Derive_P_Skip_MVs
400214f8 g     O .rwdata	00000408 __malloc_av_
40009e70 g     F .text	00000004 __sinit_lock_release
40003ff4 g     F .text	00000010 get_buffer_rx_state
40004004 g     F .text	00000058 copy_to_buffer
40008cc4 g     F .text	00000718 .hidden __muldf3
4000c238 g     F .text	00000054 __sread
4000a228 g     F .text	00000034 fread
4001ccd0 g     F .text	000000ac alt_find_file
4001cb24 g     F .text	0000006c alt_dev_llist_insert
40016180 g     F .text	00000004 __malloc_lock
40009fb0 g     F .text	00000028 _fprintf_r
400163ec g     F .text	0000004c sbrk
40009a78 g     F .text	0000005c _fflush_r
4000965c g     F .text	000000c4 _calloc_r
40026a20 g     O .bss	00000004 nal_pos
40020fd4 g     O .rwdata	00000100 .hidden __divsi3_table
40009f98 g     F .text	00000018 fopen
40026a14 g       *ABS*	00000000 __bss_start
4000ba44 g     F .text	00000128 memset
40004a88 g     F .text	00000018 send_alloc_frame
40026a40 g     O .bss	00000004 perf_data
40001f90 g     F .text	00000430 main
40026a6c g     O .bss	00000004 alt_envp
40026a54 g     O .bss	00000004 __malloc_max_total_mem
4001bef4 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
4000ab70 g     F .text	00000014 ftell
400143f8 g     F .text	00000018 __swbuf
4000bdc0 g     F .text	00000018 srand
40020efc g     O .rwdata	00000058 QPcTable
4001b878 g     F .text	00000040 alt_up_sd_card_get_attributes
40009ffc g     F .text	0000022c _fread_r
40016a98 g     F .text	000000b4 Write_Sector_Data
4001ba48 g     F .text	000002c4 alt_up_sd_card_write
4000035c g     F .text	000000bc send_iqit
4000c36c g     F .text	00000008 __sclose
80000000 g       *ABS*	00000000 __alt_heap_limit
40009848 g     F .text	00000014 fclose
40000b20 g     F .text	00000090 get_code
40026a34 g     O .bss	00000004 this
4000f2e4 g     F .text	00001688 _dtoa_r
4000b0f0 g     F .text	0000080c _malloc_r
40014774 g     F .text	00000030 __ascii_wctomb
40022c00 g     O .rwdata	00000004 alt_errno
40001ee0 g     F .text	0000001c h264_rewind
4000ac84 g     F .text	000000c4 _fwalk
40002888 g     F .text	00000080 free_mode_pred_info
40012494 g     F .text	000000c8 putc
400046ac g     F .text	00000200 decode_pic_parameter_set
4000420c g     F .text	00000054 peak_rx_buffer
4000797c g     F .text	00000084 .hidden __divsi3
4000a25c g     F .text	00000124 _malloc_trim_r
4001d3a0 g       *ABS*	00000000 __CTOR_END__
40026a9c g     O .bss	00000004 status_register
40012b94 g     F .text	000000dc strcmp
400001d8 g     F .text	00000184 send_iqit_request
40026a94 g     O .bss	00000004 command_register
40001ac0 g     F .text	0000000c input_byte_aligned
4001d3a0 g       *ABS*	00000000 __flash_rodata_start
4001d3a0 g       *ABS*	00000000 __DTOR_LIST__
40003fd4 g     F .text	00000020 get_id_of_top_packet
4000275c g     F .text	0000012c clear_mode_pred_info
400152b0 g     F .text	00000088 .hidden __nedf2
4001ef64 g     O .rwdata	000000c0 CodedBlockPatternMapping_Intra4x4
40016500 g     F .text	00000020 alt_irq_init
400163c8 g     F .text	00000024 alt_release_fd
40016d64 g     F .text	00000188 get_cluster_flag
400073c8 g     F .text	00000514 decode_slice_header
4001e488 g     O .rodata	00000100 .hidden __clz_tab
400175d8 g     F .text	000001e4 Write_File_Record_At_Offset
40026a60 g     O .bss	00000004 _PathLocale
4002cc68 g     O .bss	00010000 nal_buf
4001d1f8 g     F .text	00000014 atexit
4000ed5c g     F .text	00000060 _write_r
40011134 g     F .text	00000018 setlocale
400177bc g     F .text	00000170 Check_for_DOS_FAT
40001efc g     F .text	0000002c h264_close
4001a454 g     F .text	000006bc create_file
40022bd8 g     O .rwdata	00000004 _impure_ptr
40045258 g     O .bss	00000010 CoeffTokenCodeTable
40026a98 g     O .bss	00000004 CSD_register_w0
40026a74 g     O .bss	00000004 alt_argc
4000985c g     F .text	0000021c __sflush_r
40000d38 g     F .text	00000054 free_frame
4001cbf4 g     F .text	00000064 _do_dtors
40011120 g     F .text	00000008 __locale_cjk_lang
40005758 g     F .text	000006d8 residual_block
4000a690 g     F .text	00000004 _fseek_r
4000be54 g     F .text	000001d4 __srefill_r
400051bc g     F .text	000001e4 send_direct_write
40000020 g       .exceptions	00000000 alt_irq_entry
40011f1c g     F .text	00000064 __ulp
40009e8c g     F .text	00000018 __fp_unlock_all
40000c8c g     F .text	000000ac alloc_frame
40010a5c g     F .text	0000005c fputc
40000c10 g     F .text	0000007c get_signed_exp_golomb
40026a44 g     O .bss	00000008 perf_last_clock
40022bf8 g     O .rwdata	00000008 alt_fs_list
40017a94 g     F .text	000000fc check_file_name_for_FAT16_compliance
40026a8c g     O .bss	00000004 buffer_memory
40026a3c g     O .bss	00000004 perf_current
4001c52c g     F .text	00000018 alt_hostfs_write
40000020 g       *ABS*	00000000 __ram_exceptions_start
4001114c g     F .text	0000000c localeconv
40020f54 g     O .rwdata	00000080 Intra4x4ScanOrder
4001ce0c g     F .text	00000004 alt_ic_isr_register
4000aed8 g     F .text	00000034 fwrite
40002514 g     F .text	00000030 _str_sub_mb_type
40026a88 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
400053a0 g     F .text	000001bc send_4x4_direct_write
40022c5c g       *ABS*	00000000 _edata
40026a24 g     O .bss	00000004 nal_bit
4004590c g       *ABS*	00000000 _end
4004530c g     O .bss	00000500 active_files
40014410 g     F .text	00000164 __fputwc
40002574 g     F .text	000000e8 _dump_mb_mode
4000018c g       *ABS*	00000000 __ram_exceptions_end
4001ab10 g     F .text	0000016c copy_file_record_name_to_string
4001c138 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
40010ab8 g     F .text	0000009c _fputs_r
4001792c g     F .text	00000114 Look_for_FAT16
40001b08 g     F .text	000001fc h264_open
400018e8 g     F .text	00000070 input_rewind
4001ce48 g     F .text	00000038 alt_ic_irq_disable
40026a28 g     O .bss	00000004 ring_pos
4000c294 g     F .text	0000007c __swrite
40022be0 g     O .rwdata	00000004 __malloc_trim_threshold
4000bbcc g     F .text	00000080 _perror_r
40011114 g     F .text	0000000c __locale_msgcharset
40009720 g     F .text	00000038 exit
40001a7c g     F .text	00000044 input_get_one_bit
4001aeb0 g     F .text	00000674 alt_up_sd_card_find_next
4000ad48 g     F .text	000000c4 _fwalk_reent
40011d20 g     F .text	000001fc __mdiff
40004090 g     F .text	00000010 get_identifier
40007a00 g     F .text	00000074 .hidden __modsi3
40016c10 g     F .text	00000154 Read_Sector_Data
80000000 g       *ABS*	00000000 __alt_data_end
40000020 g     F .exceptions	00000000 alt_exception
40009e68 g     F .text	00000004 __sfp_lock_release
40009ea4 g     F .text	000000f4 _fopen_r
40015ec8 g     F .text	00000014 _exit
4001ca14 g     F .text	00000080 alt_alarm_start
40003d8c g     F .text	0000001c more_rbsp_data
4001b8b8 g     F .text	00000190 alt_up_sd_card_read
4000af0c g     F .text	000001bc __smakebuf_r
4000c9ec g     F .text	00000098 strlen
40016188 g     F .text	00000178 open
40004aa0 g     F .text	0000036c send_intra_info
40015338 g     F .text	000000dc .hidden __gedf2
40026a2c g     O .bss	00000004 mpi
40022be8 g     O .rwdata	00000004 __wctomb
4000ab6c g     F .text	00000004 _ftell_r
40012d6c g     F .text	00000018 __sprint_r
4001ce00 g     F .text	0000000c alt_icache_flush_all
40010b54 g     F .text	00000018 fputs
40022c50 g     O .rwdata	00000004 alt_priority_mask
40026a4c g     O .bss	00000004 CoeffTokenCodeTable_ChromaDC
40000a00 g     F .text	000000b8 coeff_scan
4001ce10 g     F .text	00000038 alt_ic_irq_enable
4000ec84 g     F .text	0000001c __vfprintf_internal
400147a4 g     F .text	0000005c _wctomb_r
40004e0c g     F .text	000003b0 send_inter_info
40015508 g     F .text	000008fc .hidden __subdf3
40000d8c g     F .text	00000448 core_block_multiply
40011754 g     F .text	000000b0 __lo0bits
400055e4 g     F .text	00000174 perf_summarize
40022c54 g     O .rwdata	00000008 alt_alarm_list
4001cb90 g     F .text	00000064 _do_ctors
40045268 g     O .bss	0000003c TotalZerosCodeTable_4x4
400146b4 g     F .text	000000c0 wcrtomb
40015e04 g     F .text	000000bc close
40015fd8 g     F .text	000000cc alt_load
40004260 g     F .text	00000068 peak_rx_buffer2
40017c0c g     F .text	00000408 match_file_record_to_name_ext
40014598 g     F .text	00000080 fputwc
4000b0dc g     F .text	00000014 free
40009e6c g     F .text	00000004 __sinit_lock_acquire
400114c8 g     F .text	00000120 __multadd
400114a0 g     F .text	00000028 _Bfree
4001c55c g     F .text	000004b8 alt_hostfs_fstat



Disassembly of section .entry:

40000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
40000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
40000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
40000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
4000000c:	00bffd16 	blt	zero,r2,40000004 <__alt_data_end+0xc0000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
40000010:	00500034 	movhi	at,16384
    ori r1, r1, %lo(_start)
40000014:	08406314 	ori	at,at,396
    jmp r1
40000018:	0800683a 	jmp	at
4000001c:	00000000 	call	40000000 <__reset>

Disassembly of section .exceptions:

40000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
40000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
40000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
40000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
4000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
40000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
40000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
40000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
4000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
40000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
40000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
40000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
4000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
40000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
40000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
40000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
4000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
40000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
40000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
40000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
4000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
40000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
40000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
40000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
4000007c:	10000326 	beq	r2,zero,4000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
40000080:	20000226 	beq	r4,zero,4000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
40000084:	00000fc0 	call	400000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
40000088:	00000706 	br	400000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
4000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
40000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
40000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
40000098:	00001600 	call	40000160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
4000009c:	1000021e 	bne	r2,zero,400000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
400000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
400000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
400000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
400000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
400000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
400000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
400000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
400000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
400000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
400000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
400000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
400000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
400000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
400000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
400000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
400000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
400000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
400000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
400000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
400000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
400000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
400000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
400000f8:	ef80083a 	eret

400000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
400000fc:	defffe04 	addi	sp,sp,-8
40000100:	dfc00115 	stw	ra,4(sp)
40000104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
40000108:	000b313a 	rdctl	r5,ipending
4000010c:	04100134 	movhi	r16,16388
40000110:	84160304 	addi	r16,r16,22540
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
40000114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
40000118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
4000011c:	1000051e 	bne	r2,zero,40000134 <alt_irq_handler+0x38>
40000120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
40000124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
40000128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
4000012c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
40000130:	203ffc26 	beq	r4,zero,40000124 <__alt_data_end+0xc0000124>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
40000134:	180690fa 	slli	r3,r3,3
40000138:	80c7883a 	add	r3,r16,r3
4000013c:	18800017 	ldw	r2,0(r3)
40000140:	19000117 	ldw	r4,4(r3)
40000144:	103ee83a 	callr	r2
40000148:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
4000014c:	283ff11e 	bne	r5,zero,40000114 <__alt_data_end+0xc0000114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
40000150:	dfc00117 	ldw	ra,4(sp)
40000154:	dc000017 	ldw	r16,0(sp)
40000158:	dec00204 	addi	sp,sp,8
4000015c:	f800283a 	ret

40000160 <alt_instruction_exception_entry>:
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
40000160:	000531fa 	rdctl	r2,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
40000164:	10801f0c 	andi	r2,r2,124
40000168:	1004d0ba 	srli	r2,r2,2
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
4000016c:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
40000170:	d0efb917 	ldw	r3,-16668(gp)
40000174:	18000326 	beq	r3,zero,40000184 <alt_instruction_exception_entry+0x24>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
40000178:	200b883a 	mov	r5,r4
4000017c:	1009883a 	mov	r4,r2
40000180:	1800683a 	jmp	r3
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
40000184:	0005883a 	mov	r2,zero
40000188:	f800283a 	ret

Disassembly of section .text:

4000018c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
4000018c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
40000190:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
40000194:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
40000198:	00bffd16 	blt	zero,r2,40000190 <__alt_data_end+0xc0000190>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
4000019c:	06e00034 	movhi	sp,32768
    ori sp, sp, %lo(__alt_stack_pointer)
400001a0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
400001a4:	069000b4 	movhi	gp,16386
    ori gp, gp, %lo(_gp)
400001a8:	d6aaf514 	ori	gp,gp,43988
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
400001ac:	009000b4 	movhi	r2,16386
    ori r2, r2, %lo(__bss_start)
400001b0:	109a8514 	ori	r2,r2,27156

    movhi r3, %hi(__bss_end)
400001b4:	00d00134 	movhi	r3,16388
    ori r3, r3, %lo(__bss_end)
400001b8:	18d64314 	ori	r3,r3,22796

    beq r2, r3, 1f
400001bc:	10c00326 	beq	r2,r3,400001cc <_start+0x40>

0:
    stw zero, (r2)
400001c0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
400001c4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
400001c8:	10fffd36 	bltu	r2,r3,400001c0 <__alt_data_end+0xc00001c0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
400001cc:	0015fd80 	call	40015fd8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
400001d0:	00161200 	call	40016120 <alt_main>

400001d4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
400001d4:	003fff06 	br	400001d4 <__alt_data_end+0xc00001d4>

400001d8 <send_iqit_request>:
#include "coretrans.h"
#include "block.h"
#include "noc_control.h"


int send_iqit_request(int *scan, int qp, int without_dc, int LCbCr, int x, int y){
400001d8:	deff7804 	addi	sp,sp,-544
400001dc:	dcc08615 	stw	r19,536(sp)
400001e0:	dc808515 	stw	r18,532(sp)
400001e4:	dc408415 	stw	r17,528(sp)
400001e8:	dc008315 	stw	r16,524(sp)
400001ec:	dfc08715 	stw	ra,540(sp)
400001f0:	2021883a 	mov	r16,r4
400001f4:	2825883a 	mov	r18,r5
400001f8:	3023883a 	mov	r17,r6
400001fc:	3827883a 	mov	r19,r7

    //wait for ack from previous command
    packet rx_packet;
    rx_packet.num_flits = 0;
    while(rx_packet.num_flits == 0){
		rx_packet = get_packet_by_id(0xFE);
40000200:	01403f84 	movi	r5,254
40000204:	d809883a 	mov	r4,sp
40000208:	00043f00 	call	400043f0 <get_packet_by_id>
		if(rx_packet.num_flits == 0){
4000020c:	d8808017 	ldw	r2,512(sp)
40000210:	10004d26 	beq	r2,zero,40000348 <send_iqit_request+0x170>
	}


	static int id = 0xFF;

	int dc_upper_byte = without_dc?0xFF&(scan[0]>>8):0;
40000214:	88004f26 	beq	r17,zero,40000354 <send_iqit_request+0x17c>
40000218:	81000043 	ldbu	r4,1(r16)
4000021c:	2008943a 	slli	r4,r4,16

	//send header (dc_upper_byte, qp, wodc, id)
	uint32_t header_low_word = (LCbCr<<30) | ((y&0x7FF)<<19) | ((x&0x7FF)<<8) | id;
	send_flit(IQIT_0_ADDR, (dc_upper_byte<<16)|(qp<<8) | without_dc, header_low_word, 0);
40000220:	d8808817 	ldw	r2,544(sp)
40000224:	d8c08917 	ldw	r3,548(sp)
40000228:	980c97ba 	slli	r6,r19,30
4000022c:	1081ffcc 	andi	r2,r2,2047
40000230:	1004923a 	slli	r2,r2,8
40000234:	900a923a 	slli	r5,r18,8
40000238:	18c1ffcc 	andi	r3,r3,2047
4000023c:	180694fa 	slli	r3,r3,19
40000240:	10803fd4 	ori	r2,r2,255
40000244:	118cb03a 	or	r6,r2,r6
40000248:	2c4ab03a 	or	r5,r5,r17
4000024c:	30ccb03a 	or	r6,r6,r3
40000250:	290ab03a 	or	r5,r5,r4
40000254:	000f883a 	mov	r7,zero
40000258:	01000044 	movi	r4,1
4000025c:	0003f100 	call	40003f10 <send_flit>

	//send rows 4 and 3
	send_flit(IQIT_0_ADDR, ((scan[15]&0xFF)<<24) | ((scan[14]&0xFF)<<16) | ((scan[13]&0xFF)<<8) | (scan[12]&0xFF),
40000260:	81800b17 	ldw	r6,44(r16)
40000264:	81400f17 	ldw	r5,60(r16)
40000268:	81c00a03 	ldbu	r7,40(r16)
4000026c:	81000917 	ldw	r4,36(r16)
40000270:	80c00e03 	ldbu	r3,56(r16)
40000274:	80800d17 	ldw	r2,52(r16)
40000278:	3012963a 	slli	r9,r6,24
4000027c:	2810963a 	slli	r8,r5,24
40000280:	81800803 	ldbu	r6,32(r16)
40000284:	81400c03 	ldbu	r5,48(r16)
40000288:	1806943a 	slli	r3,r3,16
4000028c:	380e943a 	slli	r7,r7,16
40000290:	2008923a 	slli	r4,r4,8
40000294:	1004923a 	slli	r2,r2,8
40000298:	498cb03a 	or	r6,r9,r6
4000029c:	414ab03a 	or	r5,r8,r5
400002a0:	28cab03a 	or	r5,r5,r3
400002a4:	10bfffcc 	andi	r2,r2,65535
400002a8:	31ccb03a 	or	r6,r6,r7
400002ac:	213fffcc 	andi	r4,r4,65535
400002b0:	310cb03a 	or	r6,r6,r4
400002b4:	288ab03a 	or	r5,r5,r2
400002b8:	000f883a 	mov	r7,zero
400002bc:	01000044 	movi	r4,1
400002c0:	0003f100 	call	40003f10 <send_flit>
	             ((scan[11]&0xFF)<<24) | ((scan[10]&0xFF)<<16) | ((scan[ 9]&0xFF)<<8) | (scan[8] &0xFF), 0);


	//send rows 2 and 1
	send_flit(IQIT_0_ADDR, ((scan[ 7]&0xFF)<<24) | ((scan[ 6]&0xFF)<<16) | ((scan[ 5]&0xFF)<<8) | (scan[4]&0xFF),
400002c4:	81800317 	ldw	r6,12(r16)
400002c8:	81400717 	ldw	r5,28(r16)
400002cc:	81c00203 	ldbu	r7,8(r16)
400002d0:	81000117 	ldw	r4,4(r16)
400002d4:	80c00603 	ldbu	r3,24(r16)
400002d8:	80800517 	ldw	r2,20(r16)
400002dc:	3012963a 	slli	r9,r6,24
400002e0:	2810963a 	slli	r8,r5,24
400002e4:	81800003 	ldbu	r6,0(r16)
400002e8:	81400403 	ldbu	r5,16(r16)
400002ec:	1806943a 	slli	r3,r3,16
400002f0:	380e943a 	slli	r7,r7,16
400002f4:	2008923a 	slli	r4,r4,8
400002f8:	1004923a 	slli	r2,r2,8
400002fc:	498cb03a 	or	r6,r9,r6
40000300:	414ab03a 	or	r5,r8,r5
40000304:	28cab03a 	or	r5,r5,r3
40000308:	10bfffcc 	andi	r2,r2,65535
4000030c:	31ccb03a 	or	r6,r6,r7
40000310:	213fffcc 	andi	r4,r4,65535
40000314:	01c00044 	movi	r7,1
40000318:	310cb03a 	or	r6,r6,r4
4000031c:	288ab03a 	or	r5,r5,r2
40000320:	3809883a 	mov	r4,r7
40000324:	0003f100 	call	40003f10 <send_flit>
	             ((scan[ 3]&0xFF)<<24) | ((scan[ 2]&0xFF)<<16) | ((scan[ 1]&0xFF)<<8) | (scan[0]&0xFF), 1);


	return id;

}
40000328:	00803fc4 	movi	r2,255
4000032c:	dfc08717 	ldw	ra,540(sp)
40000330:	dcc08617 	ldw	r19,536(sp)
40000334:	dc808517 	ldw	r18,532(sp)
40000338:	dc408417 	ldw	r17,528(sp)
4000033c:	dc008317 	ldw	r16,524(sp)
40000340:	dec08804 	addi	sp,sp,544
40000344:	f800283a 	ret
    packet rx_packet;
    rx_packet.num_flits = 0;
    while(rx_packet.num_flits == 0){
		rx_packet = get_packet_by_id(0xFE);
		if(rx_packet.num_flits == 0){
			buffers_loop(1);
40000348:	01000044 	movi	r4,1
4000034c:	00040a00 	call	400040a0 <buffers_loop>
40000350:	003fab06 	br	40000200 <__alt_data_end+0xc0000200>
40000354:	0009883a 	mov	r4,zero
40000358:	003fb106 	br	40000220 <__alt_data_end+0xc0000220>

4000035c <send_iqit>:


void send_iqit(int *scan, int x, int y, int qp, int without_dc, int LCbCr) {
	//software workaround for dc values which are too large, but still need dequant...
	//iqit is linear so this should work
	if((scan[0]>127 || scan[0]<-128) && without_dc==0)
4000035c:	20800017 	ldw	r2,0(r4)
	return id;

}


void send_iqit(int *scan, int x, int y, int qp, int without_dc, int LCbCr) {
40000360:	deffe804 	addi	sp,sp,-96
40000364:	dd001615 	stw	r20,88(sp)
40000368:	dcc01515 	stw	r19,84(sp)
4000036c:	dc801415 	stw	r18,80(sp)
40000370:	dc001215 	stw	r16,72(sp)
40000374:	dfc01715 	stw	ra,92(sp)
40000378:	2021883a 	mov	r16,r4
4000037c:	dc401315 	stw	r17,76(sp)
	//software workaround for dc values which are too large, but still need dequant...
	//iqit is linear so this should work
	if((scan[0]>127 || scan[0]<-128) && without_dc==0)
40000380:	10c02004 	addi	r3,r2,128
40000384:	01003fc4 	movi	r4,255
	return id;

}


void send_iqit(int *scan, int x, int y, int qp, int without_dc, int LCbCr) {
40000388:	2827883a 	mov	r19,r5
4000038c:	3029883a 	mov	r20,r6
40000390:	3825883a 	mov	r18,r7
	//software workaround for dc values which are too large, but still need dequant...
	//iqit is linear so this should work
	if((scan[0]>127 || scan[0]<-128) && without_dc==0)
40000394:	20c0022e 	bgeu	r4,r3,400003a0 <send_iqit+0x44>
40000398:	d8c01817 	ldw	r3,96(sp)
4000039c:	18000f26 	beq	r3,zero,400003dc <send_iqit+0x80>

		send_iqit_request(scan_2, qp, without_dc, LCbCr, x, y);

	}

	send_iqit_request(scan, qp, without_dc, LCbCr, x, y);
400003a0:	d9c01917 	ldw	r7,100(sp)
400003a4:	d9801817 	ldw	r6,96(sp)
400003a8:	dd000115 	stw	r20,4(sp)
400003ac:	dcc00015 	stw	r19,0(sp)
400003b0:	900b883a 	mov	r5,r18
400003b4:	8009883a 	mov	r4,r16
400003b8:	00001d80 	call	400001d8 <send_iqit_request>

}
400003bc:	dfc01717 	ldw	ra,92(sp)
400003c0:	dd001617 	ldw	r20,88(sp)
400003c4:	dcc01517 	ldw	r19,84(sp)
400003c8:	dc801417 	ldw	r18,80(sp)
400003cc:	dc401317 	ldw	r17,76(sp)
400003d0:	dc001217 	ldw	r16,72(sp)
400003d4:	dec01804 	addi	sp,sp,96
400003d8:	f800283a 	ret
void send_iqit(int *scan, int x, int y, int qp, int without_dc, int LCbCr) {
	//software workaround for dc values which are too large, but still need dequant...
	//iqit is linear so this should work
	if((scan[0]>127 || scan[0]<-128) && without_dc==0)
	{
		scan[0] = scan[0]>>1;
400003dc:	1023d07a 	srai	r17,r2,1
		int scan_2[16] = {0};
400003e0:	d9000204 	addi	r4,sp,8
400003e4:	01801004 	movi	r6,64
400003e8:	000b883a 	mov	r5,zero
void send_iqit(int *scan, int x, int y, int qp, int without_dc, int LCbCr) {
	//software workaround for dc values which are too large, but still need dequant...
	//iqit is linear so this should work
	if((scan[0]>127 || scan[0]<-128) && without_dc==0)
	{
		scan[0] = scan[0]>>1;
400003ec:	84400015 	stw	r17,0(r16)
		int scan_2[16] = {0};
400003f0:	000ba440 	call	4000ba44 <memset>
		scan_2[0] = scan[0];

		send_iqit_request(scan_2, qp, without_dc, LCbCr, x, y);
400003f4:	d9c01917 	ldw	r7,100(sp)
400003f8:	dd000115 	stw	r20,4(sp)
400003fc:	dcc00015 	stw	r19,0(sp)
40000400:	000d883a 	mov	r6,zero
40000404:	900b883a 	mov	r5,r18
40000408:	d9000204 	addi	r4,sp,8
	//iqit is linear so this should work
	if((scan[0]>127 || scan[0]<-128) && without_dc==0)
	{
		scan[0] = scan[0]>>1;
		int scan_2[16] = {0};
		scan_2[0] = scan[0];
4000040c:	dc400215 	stw	r17,8(sp)

		send_iqit_request(scan_2, qp, without_dc, LCbCr, x, y);
40000410:	00001d80 	call	400001d8 <send_iqit_request>
40000414:	003fe206 	br	400003a0 <__alt_data_end+0xc00003a0>

40000418 <transform_luma_dc>:

core_block coeff_scan(int *scan) {
  core_block res;
  int i;
  for(i=0; i<16; ++i)
    res.items[ZigZagOrder[i]]=scan[i];
40000418:	20800017 	ldw	r2,0(r4)

}

CONST int LevelScale[6]={10,11,13,14,16,18};

void transform_luma_dc(int *scan, int *out, int qp) {
4000041c:	deffcd04 	addi	sp,sp,-204

core_block coeff_scan(int *scan) {
  core_block res;
  int i;
  for(i=0; i<16; ++i)
    res.items[ZigZagOrder[i]]=scan[i];
40000420:	23c00517 	ldw	r15,20(r4)
40000424:	23800617 	ldw	r14,24(r4)
40000428:	23400717 	ldw	r13,28(r4)
4000042c:	23000817 	ldw	r12,32(r4)
40000430:	22c00917 	ldw	r11,36(r4)

}

CONST int LevelScale[6]={10,11,13,14,16,18};

void transform_luma_dc(int *scan, int *out, int qp) {
40000434:	dfc03215 	stw	ra,200(sp)
40000438:	dd003115 	stw	r20,196(sp)

core_block coeff_scan(int *scan) {
  core_block res;
  int i;
  for(i=0; i<16; ++i)
    res.items[ZigZagOrder[i]]=scan[i];
4000043c:	27c00217 	ldw	ra,8(r4)
40000440:	25000117 	ldw	r20,4(r4)

}

CONST int LevelScale[6]={10,11,13,14,16,18};

void transform_luma_dc(int *scan, int *out, int qp) {
40000444:	dcc03015 	stw	r19,192(sp)
40000448:	dc002d15 	stw	r16,180(sp)

core_block coeff_scan(int *scan) {
  core_block res;
  int i;
  for(i=0; i<16; ++i)
    res.items[ZigZagOrder[i]]=scan[i];
4000044c:	24c00317 	ldw	r19,12(r4)
40000450:	24000417 	ldw	r16,16(r4)
40000454:	22400b17 	ldw	r9,44(r4)
40000458:	22000c17 	ldw	r8,48(r4)
4000045c:	21c00d17 	ldw	r7,52(r4)
40000460:	20c00e17 	ldw	r3,56(r4)
40000464:	22800a17 	ldw	r10,40(r4)
40000468:	d8800d15 	stw	r2,52(sp)
4000046c:	20800f17 	ldw	r2,60(r4)
40000470:	dfc01115 	stw	ra,68(sp)
40000474:	dbc00f15 	stw	r15,60(sp)
40000478:	db801015 	stw	r14,64(sp)
4000047c:	db401315 	stw	r13,76(sp)
40000480:	db001615 	stw	r12,88(sp)
40000484:	dac01915 	stw	r11,100(sp)

}

CONST int LevelScale[6]={10,11,13,14,16,18};

void transform_luma_dc(int *scan, int *out, int qp) {
40000488:	dc802f15 	stw	r18,188(sp)
4000048c:	dc402e15 	stw	r17,184(sp)
40000490:	3025883a 	mov	r18,r6
core_block coeff_scan(int *scan) {
  core_block res;
  int i;
  for(i=0; i<16; ++i)
    res.items[ZigZagOrder[i]]=scan[i];
  return res;
40000494:	d9001d04 	addi	r4,sp,116
40000498:	01801004 	movi	r6,64

core_block coeff_scan(int *scan) {
  core_block res;
  int i;
  for(i=0; i<16; ++i)
    res.items[ZigZagOrder[i]]=scan[i];
4000049c:	dcc01515 	stw	r19,84(sp)
400004a0:	dd000e15 	stw	r20,56(sp)

}

CONST int LevelScale[6]={10,11,13,14,16,18};

void transform_luma_dc(int *scan, int *out, int qp) {
400004a4:	2823883a 	mov	r17,r5

core_block coeff_scan(int *scan) {
  core_block res;
  int i;
  for(i=0; i<16; ++i)
    res.items[ZigZagOrder[i]]=scan[i];
400004a8:	dc001215 	stw	r16,72(sp)
  return res;
400004ac:	d9400d04 	addi	r5,sp,52

core_block coeff_scan(int *scan) {
  core_block res;
  int i;
  for(i=0; i<16; ++i)
    res.items[ZigZagOrder[i]]=scan[i];
400004b0:	da801a15 	stw	r10,104(sp)
400004b4:	da401715 	stw	r9,92(sp)
400004b8:	da001415 	stw	r8,80(sp)
400004bc:	d9c01815 	stw	r7,96(sp)
400004c0:	d8c01b15 	stw	r3,108(sp)
400004c4:	d8801c15 	stw	r2,112(sp)
  return res;
400004c8:	000b8fc0 	call	4000b8fc <memcpy>

CONST int LevelScale[6]={10,11,13,14,16,18};

void transform_luma_dc(int *scan, int *out, int qp) {
  CONST int ScanOrder[16]={0,1,4,5,2,3,6,7,8,9,12,13,10,11,14,15};
  core_block block=hadamard(coeff_scan(scan));
400004cc:	d8802017 	ldw	r2,128(sp)
400004d0:	d9401d17 	ldw	r5,116(sp)
400004d4:	d9801e17 	ldw	r6,120(sp)
400004d8:	d8800015 	stw	r2,0(sp)
400004dc:	d8802117 	ldw	r2,132(sp)
400004e0:	d9c01f17 	ldw	r7,124(sp)
400004e4:	d9000d04 	addi	r4,sp,52
400004e8:	d8800115 	stw	r2,4(sp)
400004ec:	d8802217 	ldw	r2,136(sp)
  int scale=LevelScale[qp%6];
400004f0:	94c00194 	ori	r19,r18,6

CONST int LevelScale[6]={10,11,13,14,16,18};

void transform_luma_dc(int *scan, int *out, int qp) {
  CONST int ScanOrder[16]={0,1,4,5,2,3,6,7,8,9,12,13,10,11,14,15};
  core_block block=hadamard(coeff_scan(scan));
400004f4:	d8800215 	stw	r2,8(sp)
400004f8:	d8802317 	ldw	r2,140(sp)
400004fc:	d8800315 	stw	r2,12(sp)
40000500:	d8802417 	ldw	r2,144(sp)
40000504:	d8800415 	stw	r2,16(sp)
40000508:	d8802517 	ldw	r2,148(sp)
4000050c:	d8800515 	stw	r2,20(sp)
40000510:	d8802617 	ldw	r2,152(sp)
40000514:	d8800615 	stw	r2,24(sp)
40000518:	d8802717 	ldw	r2,156(sp)
4000051c:	d8800715 	stw	r2,28(sp)
40000520:	d8802817 	ldw	r2,160(sp)
40000524:	d8800815 	stw	r2,32(sp)
40000528:	d8802917 	ldw	r2,164(sp)
4000052c:	d8800915 	stw	r2,36(sp)
40000530:	d8802a17 	ldw	r2,168(sp)
40000534:	d8800a15 	stw	r2,40(sp)
40000538:	d8802b17 	ldw	r2,172(sp)
4000053c:	d8800b15 	stw	r2,44(sp)
40000540:	d8802c17 	ldw	r2,176(sp)
40000544:	d8800c15 	stw	r2,48(sp)
40000548:	00011d40 	call	400011d4 <hadamard>
  int scale=LevelScale[qp%6];
4000054c:	008003c4 	movi	r2,15
40000550:	14c05a36 	bltu	r2,r19,400006bc <transform_luma_dc+0x2a4>
40000554:	9004913a 	slli	r2,r18,4
40000558:	10c00194 	ori	r3,r2,6
4000055c:	009000b4 	movhi	r2,16386
40000560:	1083f504 	addi	r2,r2,4052
40000564:	1885883a 	add	r2,r3,r2
40000568:	10800003 	ldbu	r2,0(r2)
4000056c:	108001a4 	muli	r2,r2,6
40000570:	00d000b4 	movhi	r3,16386
40000574:	18f4e804 	addi	r3,r3,-11360
40000578:	9085c83a 	sub	r2,r18,r2
4000057c:	1085883a 	add	r2,r2,r2
40000580:	1085883a 	add	r2,r2,r2
40000584:	1885883a 	add	r2,r3,r2
40000588:	14000017 	ldw	r16,0(r2)
  int i;
  if(qp>=12)
4000058c:	008002c4 	movi	r2,11
40000590:	14804e0e 	bge	r2,r18,400006cc <transform_luma_dc+0x2b4>
40000594:	008003c4 	movi	r2,15
40000598:	14c0b336 	bltu	r2,r19,40000868 <transform_luma_dc+0x450>
4000059c:	9004913a 	slli	r2,r18,4
400005a0:	10c00194 	ori	r3,r2,6
400005a4:	009000b4 	movhi	r2,16386
400005a8:	1083f504 	addi	r2,r2,4052
400005ac:	1885883a 	add	r2,r3,r2
400005b0:	10800003 	ldbu	r2,0(r2)
    for(i=0; i<16; ++i)
      out[ScanOrder[i]<<4]=(block.items[i]*scale)<<(qp/6-2);
400005b4:	dcc00d17 	ldw	r19,52(sp)
400005b8:	dc800e17 	ldw	r18,56(sp)
400005bc:	dbc00f17 	ldw	r15,60(sp)
400005c0:	db801017 	ldw	r14,64(sp)
400005c4:	db401117 	ldw	r13,68(sp)
400005c8:	db001217 	ldw	r12,72(sp)
400005cc:	dac01317 	ldw	r11,76(sp)
400005d0:	da801417 	ldw	r10,80(sp)
400005d4:	da401517 	ldw	r9,84(sp)
400005d8:	da001617 	ldw	r8,88(sp)
400005dc:	d9c01717 	ldw	r7,92(sp)
400005e0:	d9801817 	ldw	r6,96(sp)
400005e4:	d9401917 	ldw	r5,100(sp)
400005e8:	d9001a17 	ldw	r4,104(sp)
400005ec:	d8c01b17 	ldw	r3,108(sp)
400005f0:	dfc01c17 	ldw	ra,112(sp)
400005f4:	84e7383a 	mul	r19,r16,r19
400005f8:	84a5383a 	mul	r18,r16,r18
400005fc:	83df383a 	mul	r15,r16,r15
40000600:	839d383a 	mul	r14,r16,r14
40000604:	835b383a 	mul	r13,r16,r13
40000608:	8319383a 	mul	r12,r16,r12
4000060c:	82d7383a 	mul	r11,r16,r11
40000610:	8295383a 	mul	r10,r16,r10
40000614:	8253383a 	mul	r9,r16,r9
40000618:	8211383a 	mul	r8,r16,r8
4000061c:	81cf383a 	mul	r7,r16,r7
40000620:	818d383a 	mul	r6,r16,r6
40000624:	814b383a 	mul	r5,r16,r5
40000628:	8109383a 	mul	r4,r16,r4
4000062c:	80c7383a 	mul	r3,r16,r3
40000630:	87e1383a 	mul	r16,r16,ra
40000634:	10bfff84 	addi	r2,r2,-2
40000638:	98a6983a 	sll	r19,r19,r2
4000063c:	90a4983a 	sll	r18,r18,r2
40000640:	789e983a 	sll	r15,r15,r2
40000644:	709c983a 	sll	r14,r14,r2
40000648:	689a983a 	sll	r13,r13,r2
4000064c:	6098983a 	sll	r12,r12,r2
40000650:	5896983a 	sll	r11,r11,r2
40000654:	5094983a 	sll	r10,r10,r2
40000658:	4892983a 	sll	r9,r9,r2
4000065c:	4090983a 	sll	r8,r8,r2
40000660:	388e983a 	sll	r7,r7,r2
40000664:	308c983a 	sll	r6,r6,r2
40000668:	288a983a 	sll	r5,r5,r2
4000066c:	2088983a 	sll	r4,r4,r2
40000670:	1886983a 	sll	r3,r3,r2
40000674:	8084983a 	sll	r2,r16,r2
40000678:	8cc00015 	stw	r19,0(r17)
4000067c:	8c801015 	stw	r18,64(r17)
40000680:	8bc04015 	stw	r15,256(r17)
40000684:	8b805015 	stw	r14,320(r17)
40000688:	8b402015 	stw	r13,128(r17)
4000068c:	8b003015 	stw	r12,192(r17)
40000690:	8ac06015 	stw	r11,384(r17)
40000694:	8a807015 	stw	r10,448(r17)
40000698:	8a408015 	stw	r9,512(r17)
4000069c:	8a009015 	stw	r8,576(r17)
400006a0:	89c0c015 	stw	r7,768(r17)
400006a4:	8980d015 	stw	r6,832(r17)
400006a8:	8940a015 	stw	r5,640(r17)
400006ac:	8900b015 	stw	r4,704(r17)
400006b0:	88c0e015 	stw	r3,896(r17)
400006b4:	8880f015 	stw	r2,960(r17)
  else {
    int round_adj=1<<(1-qp/6);
    for(i=0; i<16; ++i)
      out[ScanOrder[i]<<4]=(block.items[i]*scale+round_adj)>>(2-qp/6);
  }
}
400006b8:	00006006 	br	4000083c <transform_luma_dc+0x424>
CONST int LevelScale[6]={10,11,13,14,16,18};

void transform_luma_dc(int *scan, int *out, int qp) {
  CONST int ScanOrder[16]={0,1,4,5,2,3,6,7,8,9,12,13,10,11,14,15};
  core_block block=hadamard(coeff_scan(scan));
  int scale=LevelScale[qp%6];
400006bc:	01400184 	movi	r5,6
400006c0:	9009883a 	mov	r4,r18
400006c4:	000797c0 	call	4000797c <__divsi3>
400006c8:	003fa806 	br	4000056c <__alt_data_end+0xc000056c>
  int i;
  if(qp>=12)
    for(i=0; i<16; ++i)
      out[ScanOrder[i]<<4]=(block.items[i]*scale)<<(qp/6-2);
  else {
    int round_adj=1<<(1-qp/6);
400006cc:	017ffe84 	movi	r5,-6
400006d0:	9144b03a 	or	r2,r18,r5
400006d4:	00c003c4 	movi	r3,15
400006d8:	18806036 	bltu	r3,r2,4000085c <transform_luma_dc+0x444>
400006dc:	009000b4 	movhi	r2,16386
400006e0:	1083f504 	addi	r2,r2,4052
400006e4:	288b883a 	add	r5,r5,r2
400006e8:	28800003 	ldbu	r2,0(r5)
400006ec:	10c00044 	addi	r3,r2,1
400006f0:	01000044 	movi	r4,1
400006f4:	20c6983a 	sll	r3,r4,r3
    for(i=0; i<16; ++i)
      out[ScanOrder[i]<<4]=(block.items[i]*scale+round_adj)>>(2-qp/6);
400006f8:	da400d17 	ldw	r9,52(sp)
400006fc:	da000e17 	ldw	r8,56(sp)
40000700:	d9c00f17 	ldw	r7,60(sp)
40000704:	d9801017 	ldw	r6,64(sp)
40000708:	d9401117 	ldw	r5,68(sp)
4000070c:	d9001217 	ldw	r4,72(sp)
40000710:	dfc01317 	ldw	ra,76(sp)
40000714:	dcc01417 	ldw	r19,80(sp)
40000718:	dc801517 	ldw	r18,84(sp)
4000071c:	dbc01617 	ldw	r15,88(sp)
40000720:	db801717 	ldw	r14,92(sp)
40000724:	db401817 	ldw	r13,96(sp)
40000728:	db001917 	ldw	r12,100(sp)
4000072c:	dac01a17 	ldw	r11,104(sp)
40000730:	da801b17 	ldw	r10,108(sp)
40000734:	dd001c17 	ldw	r20,112(sp)
40000738:	8253383a 	mul	r9,r16,r9
4000073c:	8211383a 	mul	r8,r16,r8
40000740:	81cf383a 	mul	r7,r16,r7
40000744:	818d383a 	mul	r6,r16,r6
40000748:	814b383a 	mul	r5,r16,r5
4000074c:	8109383a 	mul	r4,r16,r4
40000750:	87ff383a 	mul	ra,r16,ra
40000754:	84e7383a 	mul	r19,r16,r19
40000758:	84a5383a 	mul	r18,r16,r18
4000075c:	83df383a 	mul	r15,r16,r15
40000760:	839d383a 	mul	r14,r16,r14
40000764:	835b383a 	mul	r13,r16,r13
40000768:	8319383a 	mul	r12,r16,r12
4000076c:	82d7383a 	mul	r11,r16,r11
40000770:	8295383a 	mul	r10,r16,r10
40000774:	8521383a 	mul	r16,r16,r20
40000778:	10800084 	addi	r2,r2,2
4000077c:	48d3883a 	add	r9,r9,r3
40000780:	40d1883a 	add	r8,r8,r3
40000784:	38cf883a 	add	r7,r7,r3
40000788:	30cd883a 	add	r6,r6,r3
4000078c:	28cb883a 	add	r5,r5,r3
40000790:	20c9883a 	add	r4,r4,r3
40000794:	f8ff883a 	add	ra,ra,r3
40000798:	98e7883a 	add	r19,r19,r3
4000079c:	90e5883a 	add	r18,r18,r3
400007a0:	78df883a 	add	r15,r15,r3
400007a4:	70dd883a 	add	r14,r14,r3
400007a8:	68db883a 	add	r13,r13,r3
400007ac:	60d9883a 	add	r12,r12,r3
400007b0:	58d7883a 	add	r11,r11,r3
400007b4:	50d5883a 	add	r10,r10,r3
400007b8:	80c7883a 	add	r3,r16,r3
400007bc:	4893d83a 	sra	r9,r9,r2
400007c0:	4091d83a 	sra	r8,r8,r2
400007c4:	388fd83a 	sra	r7,r7,r2
400007c8:	308dd83a 	sra	r6,r6,r2
400007cc:	288bd83a 	sra	r5,r5,r2
400007d0:	2089d83a 	sra	r4,r4,r2
400007d4:	f8bfd83a 	sra	ra,ra,r2
400007d8:	98a7d83a 	sra	r19,r19,r2
400007dc:	90a5d83a 	sra	r18,r18,r2
400007e0:	789fd83a 	sra	r15,r15,r2
400007e4:	709dd83a 	sra	r14,r14,r2
400007e8:	689bd83a 	sra	r13,r13,r2
400007ec:	6099d83a 	sra	r12,r12,r2
400007f0:	5897d83a 	sra	r11,r11,r2
400007f4:	5095d83a 	sra	r10,r10,r2
400007f8:	1887d83a 	sra	r3,r3,r2
400007fc:	8a400015 	stw	r9,0(r17)
40000800:	8a001015 	stw	r8,64(r17)
40000804:	89c04015 	stw	r7,256(r17)
40000808:	89805015 	stw	r6,320(r17)
4000080c:	89402015 	stw	r5,128(r17)
40000810:	89003015 	stw	r4,192(r17)
40000814:	8fc06015 	stw	ra,384(r17)
40000818:	8cc07015 	stw	r19,448(r17)
4000081c:	8c808015 	stw	r18,512(r17)
40000820:	8bc09015 	stw	r15,576(r17)
40000824:	8b80c015 	stw	r14,768(r17)
40000828:	8b40d015 	stw	r13,832(r17)
4000082c:	8b00a015 	stw	r12,640(r17)
40000830:	8ac0b015 	stw	r11,704(r17)
40000834:	8a80e015 	stw	r10,896(r17)
40000838:	88c0f015 	stw	r3,960(r17)
  }
}
4000083c:	dfc03217 	ldw	ra,200(sp)
40000840:	dd003117 	ldw	r20,196(sp)
40000844:	dcc03017 	ldw	r19,192(sp)
40000848:	dc802f17 	ldw	r18,188(sp)
4000084c:	dc402e17 	ldw	r17,184(sp)
40000850:	dc002d17 	ldw	r16,180(sp)
40000854:	dec03304 	addi	sp,sp,204
40000858:	f800283a 	ret
  int i;
  if(qp>=12)
    for(i=0; i<16; ++i)
      out[ScanOrder[i]<<4]=(block.items[i]*scale)<<(qp/6-2);
  else {
    int round_adj=1<<(1-qp/6);
4000085c:	9009883a 	mov	r4,r18
40000860:	000797c0 	call	4000797c <__divsi3>
40000864:	003fa106 	br	400006ec <__alt_data_end+0xc00006ec>
40000868:	01400184 	movi	r5,6
4000086c:	9009883a 	mov	r4,r18
40000870:	000797c0 	call	4000797c <__divsi3>
40000874:	003f4f06 	br	400005b4 <__alt_data_end+0xc00005b4>

40000878 <transform_chroma_dc>:
    for(i=0; i<16; ++i)
      out[ScanOrder[i]<<4]=(block.items[i]*scale+round_adj)>>(2-qp/6);
  }
}

void transform_chroma_dc(int *scan, int qp) {
40000878:	defff704 	addi	sp,sp,-36
4000087c:	dd400515 	stw	r21,20(sp)
40000880:	dd000415 	stw	r20,16(sp)
40000884:	dc000015 	stw	r16,0(sp)
40000888:	dfc00815 	stw	ra,32(sp)
4000088c:	ddc00715 	stw	r23,28(sp)
40000890:	dd800615 	stw	r22,24(sp)
40000894:	dcc00315 	stw	r19,12(sp)
40000898:	dc800215 	stw	r18,8(sp)
4000089c:	dc400115 	stw	r17,4(sp)
  int scale=LevelScale[qp%6];
400008a0:	2d400194 	ori	r21,r5,6
400008a4:	008003c4 	movi	r2,15
    for(i=0; i<16; ++i)
      out[ScanOrder[i]<<4]=(block.items[i]*scale+round_adj)>>(2-qp/6);
  }
}

void transform_chroma_dc(int *scan, int qp) {
400008a8:	2829883a 	mov	r20,r5
400008ac:	2021883a 	mov	r16,r4
  int scale=LevelScale[qp%6];
400008b0:	15403536 	bltu	r2,r21,40000988 <transform_chroma_dc+0x110>
400008b4:	2804913a 	slli	r2,r5,4
400008b8:	10c00194 	ori	r3,r2,6
400008bc:	009000b4 	movhi	r2,16386
400008c0:	1083f504 	addi	r2,r2,4052
400008c4:	1885883a 	add	r2,r3,r2
400008c8:	10800003 	ldbu	r2,0(r2)
400008cc:	108001a4 	muli	r2,r2,6
  int a=scan[0]+scan[1]+scan[2]+scan[3];
400008d0:	81000017 	ldw	r4,0(r16)
400008d4:	80c00117 	ldw	r3,4(r16)
      out[ScanOrder[i]<<4]=(block.items[i]*scale+round_adj)>>(2-qp/6);
  }
}

void transform_chroma_dc(int *scan, int qp) {
  int scale=LevelScale[qp%6];
400008d8:	a085c83a 	sub	r2,r20,r2
  int a=scan[0]+scan[1]+scan[2]+scan[3];
400008dc:	81c00217 	ldw	r7,8(r16)
400008e0:	20cd883a 	add	r6,r4,r3
      out[ScanOrder[i]<<4]=(block.items[i]*scale+round_adj)>>(2-qp/6);
  }
}

void transform_chroma_dc(int *scan, int qp) {
  int scale=LevelScale[qp%6];
400008e4:	1085883a 	add	r2,r2,r2
  int a=scan[0]+scan[1]+scan[2]+scan[3];
  int b=scan[0]-scan[1]+scan[2]-scan[3];
400008e8:	20c7c83a 	sub	r3,r4,r3
      out[ScanOrder[i]<<4]=(block.items[i]*scale+round_adj)>>(2-qp/6);
  }
}

void transform_chroma_dc(int *scan, int qp) {
  int scale=LevelScale[qp%6];
400008ec:	011000b4 	movhi	r4,16386
  int a=scan[0]+scan[1]+scan[2]+scan[3];
400008f0:	81400317 	ldw	r5,12(r16)
      out[ScanOrder[i]<<4]=(block.items[i]*scale+round_adj)>>(2-qp/6);
  }
}

void transform_chroma_dc(int *scan, int qp) {
  int scale=LevelScale[qp%6];
400008f4:	1085883a 	add	r2,r2,r2
400008f8:	2134e804 	addi	r4,r4,-11360
400008fc:	2085883a 	add	r2,r4,r2
  int a=scan[0]+scan[1]+scan[2]+scan[3];
40000900:	31e5883a 	add	r18,r6,r7
  int b=scan[0]-scan[1]+scan[2]-scan[3];
40000904:	38e3883a 	add	r17,r7,r3
  int c=scan[0]+scan[1]-scan[2]-scan[3];
40000908:	31cdc83a 	sub	r6,r6,r7
  int d=scan[0]-scan[1]-scan[2]+scan[3];
4000090c:	19c7c83a 	sub	r3,r3,r7
      out[ScanOrder[i]<<4]=(block.items[i]*scale+round_adj)>>(2-qp/6);
  }
}

void transform_chroma_dc(int *scan, int qp) {
  int scale=LevelScale[qp%6];
40000910:	15c00017 	ldw	r23,0(r2)
  int a=scan[0]+scan[1]+scan[2]+scan[3];
  int b=scan[0]-scan[1]+scan[2]-scan[3];
  int c=scan[0]+scan[1]-scan[2]-scan[3];
  int d=scan[0]-scan[1]-scan[2]+scan[3];
  if(qp>=6) {
40000914:	00800144 	movi	r2,5
  }
}

void transform_chroma_dc(int *scan, int qp) {
  int scale=LevelScale[qp%6];
  int a=scan[0]+scan[1]+scan[2]+scan[3];
40000918:	9165883a 	add	r18,r18,r5
  int b=scan[0]-scan[1]+scan[2]-scan[3];
4000091c:	8963c83a 	sub	r17,r17,r5
  int c=scan[0]+scan[1]-scan[2]-scan[3];
40000920:	316dc83a 	sub	r22,r6,r5
  int d=scan[0]-scan[1]-scan[2]+scan[3];
40000924:	1967883a 	add	r19,r3,r5
  if(qp>=6) {
40000928:	15001b16 	blt	r2,r20,40000998 <transform_chroma_dc+0x120>
    scan[0]=(a*scale)<<(qp/6-1);
    scan[1]=(b*scale)<<(qp/6-1);
    scan[2]=(c*scale)<<(qp/6-1);
    scan[3]=(d*scale)<<(qp/6-1);
  } else {
    scan[0]=(a*scale)>>1;
4000092c:	bca5383a 	mul	r18,r23,r18
    scan[1]=(b*scale)>>1;
40000930:	bc63383a 	mul	r17,r23,r17
    scan[2]=(c*scale)>>1;
40000934:	bd8d383a 	mul	r6,r23,r22
    scan[3]=(d*scale)>>1;
40000938:	bccb383a 	mul	r5,r23,r19
    scan[0]=(a*scale)<<(qp/6-1);
    scan[1]=(b*scale)<<(qp/6-1);
    scan[2]=(c*scale)<<(qp/6-1);
    scan[3]=(d*scale)<<(qp/6-1);
  } else {
    scan[0]=(a*scale)>>1;
4000093c:	9025d07a 	srai	r18,r18,1
    scan[1]=(b*scale)>>1;
40000940:	8823d07a 	srai	r17,r17,1
    scan[2]=(c*scale)>>1;
40000944:	300dd07a 	srai	r6,r6,1
    scan[3]=(d*scale)>>1;
40000948:	280bd07a 	srai	r5,r5,1
    scan[0]=(a*scale)<<(qp/6-1);
    scan[1]=(b*scale)<<(qp/6-1);
    scan[2]=(c*scale)<<(qp/6-1);
    scan[3]=(d*scale)<<(qp/6-1);
  } else {
    scan[0]=(a*scale)>>1;
4000094c:	84800015 	stw	r18,0(r16)
    scan[1]=(b*scale)>>1;
40000950:	84400115 	stw	r17,4(r16)
    scan[2]=(c*scale)>>1;
40000954:	81800215 	stw	r6,8(r16)
    scan[3]=(d*scale)>>1;
40000958:	81400315 	stw	r5,12(r16)
  }
}
4000095c:	dfc00817 	ldw	ra,32(sp)
40000960:	ddc00717 	ldw	r23,28(sp)
40000964:	dd800617 	ldw	r22,24(sp)
40000968:	dd400517 	ldw	r21,20(sp)
4000096c:	dd000417 	ldw	r20,16(sp)
40000970:	dcc00317 	ldw	r19,12(sp)
40000974:	dc800217 	ldw	r18,8(sp)
40000978:	dc400117 	ldw	r17,4(sp)
4000097c:	dc000017 	ldw	r16,0(sp)
40000980:	dec00904 	addi	sp,sp,36
40000984:	f800283a 	ret
      out[ScanOrder[i]<<4]=(block.items[i]*scale+round_adj)>>(2-qp/6);
  }
}

void transform_chroma_dc(int *scan, int qp) {
  int scale=LevelScale[qp%6];
40000988:	01400184 	movi	r5,6
4000098c:	a009883a 	mov	r4,r20
40000990:	000797c0 	call	4000797c <__divsi3>
40000994:	003fcd06 	br	400008cc <__alt_data_end+0xc00008cc>
  int a=scan[0]+scan[1]+scan[2]+scan[3];
  int b=scan[0]-scan[1]+scan[2]-scan[3];
  int c=scan[0]+scan[1]-scan[2]-scan[3];
  int d=scan[0]-scan[1]-scan[2]+scan[3];
  if(qp>=6) {
    scan[0]=(a*scale)<<(qp/6-1);
40000998:	008003c4 	movi	r2,15
4000099c:	15401436 	bltu	r2,r21,400009f0 <transform_chroma_dc+0x178>
400009a0:	a028913a 	slli	r20,r20,4
400009a4:	009000b4 	movhi	r2,16386
400009a8:	1083f504 	addi	r2,r2,4052
400009ac:	a5000194 	ori	r20,r20,6
400009b0:	a0a9883a 	add	r20,r20,r2
400009b4:	a0800003 	ldbu	r2,0(r20)
400009b8:	bca5383a 	mul	r18,r23,r18
    scan[1]=(b*scale)<<(qp/6-1);
400009bc:	bc63383a 	mul	r17,r23,r17
    scan[2]=(c*scale)<<(qp/6-1);
400009c0:	bd8d383a 	mul	r6,r23,r22
    scan[3]=(d*scale)<<(qp/6-1);
400009c4:	bccb383a 	mul	r5,r23,r19
  int a=scan[0]+scan[1]+scan[2]+scan[3];
  int b=scan[0]-scan[1]+scan[2]-scan[3];
  int c=scan[0]+scan[1]-scan[2]-scan[3];
  int d=scan[0]-scan[1]-scan[2]+scan[3];
  if(qp>=6) {
    scan[0]=(a*scale)<<(qp/6-1);
400009c8:	10bfffc4 	addi	r2,r2,-1
400009cc:	90a4983a 	sll	r18,r18,r2
    scan[1]=(b*scale)<<(qp/6-1);
400009d0:	88a2983a 	sll	r17,r17,r2
    scan[2]=(c*scale)<<(qp/6-1);
400009d4:	308c983a 	sll	r6,r6,r2
    scan[3]=(d*scale)<<(qp/6-1);
400009d8:	2884983a 	sll	r2,r5,r2
  int a=scan[0]+scan[1]+scan[2]+scan[3];
  int b=scan[0]-scan[1]+scan[2]-scan[3];
  int c=scan[0]+scan[1]-scan[2]-scan[3];
  int d=scan[0]-scan[1]-scan[2]+scan[3];
  if(qp>=6) {
    scan[0]=(a*scale)<<(qp/6-1);
400009dc:	84800015 	stw	r18,0(r16)
    scan[1]=(b*scale)<<(qp/6-1);
400009e0:	84400115 	stw	r17,4(r16)
    scan[2]=(c*scale)<<(qp/6-1);
400009e4:	81800215 	stw	r6,8(r16)
    scan[3]=(d*scale)<<(qp/6-1);
400009e8:	80800315 	stw	r2,12(r16)
400009ec:	003fdb06 	br	4000095c <__alt_data_end+0xc000095c>
  int a=scan[0]+scan[1]+scan[2]+scan[3];
  int b=scan[0]-scan[1]+scan[2]-scan[3];
  int c=scan[0]+scan[1]-scan[2]-scan[3];
  int d=scan[0]-scan[1]-scan[2]+scan[3];
  if(qp>=6) {
    scan[0]=(a*scale)<<(qp/6-1);
400009f0:	01400184 	movi	r5,6
400009f4:	a009883a 	mov	r4,r20
400009f8:	000797c0 	call	4000797c <__divsi3>
400009fc:	003fee06 	br	400009b8 <__alt_data_end+0xc00009b8>

40000a00 <coeff_scan>:
  }
}

CONST int ZigZagOrder[]={0,1,4,8,5,2,3,6,9,12,13,10,7,11,14,15};

core_block coeff_scan(int *scan) {
40000a00:	defffb04 	addi	sp,sp,-20
40000a04:	dfc00415 	stw	ra,16(sp)
40000a08:	dcc00315 	stw	r19,12(sp)
40000a0c:	dc800215 	stw	r18,8(sp)
40000a10:	dc400115 	stw	r17,4(sp)
40000a14:	dc000015 	stw	r16,0(sp)
  core_block res;
  int i;
  for(i=0; i<16; ++i)
    res.items[ZigZagOrder[i]]=scan[i];
40000a18:	2cc00017 	ldw	r19,0(r5)
40000a1c:	2c800117 	ldw	r18,4(r5)
40000a20:	2c400217 	ldw	r17,8(r5)
40000a24:	2c000317 	ldw	r16,12(r5)
40000a28:	2fc00417 	ldw	ra,16(r5)
40000a2c:	2bc00517 	ldw	r15,20(r5)
40000a30:	2b800617 	ldw	r14,24(r5)
40000a34:	2b400717 	ldw	r13,28(r5)
40000a38:	2b000817 	ldw	r12,32(r5)
40000a3c:	2ac00917 	ldw	r11,36(r5)
40000a40:	2a800a17 	ldw	r10,40(r5)
40000a44:	2a000c17 	ldw	r8,48(r5)
40000a48:	29c00d17 	ldw	r7,52(r5)
40000a4c:	29800e17 	ldw	r6,56(r5)
40000a50:	28c00f17 	ldw	r3,60(r5)
40000a54:	2a400b17 	ldw	r9,44(r5)
  }
}

CONST int ZigZagOrder[]={0,1,4,8,5,2,3,6,9,12,13,10,7,11,14,15};

core_block coeff_scan(int *scan) {
40000a58:	2005883a 	mov	r2,r4
  core_block res;
  int i;
  for(i=0; i<16; ++i)
    res.items[ZigZagOrder[i]]=scan[i];
40000a5c:	24c00015 	stw	r19,0(r4)
40000a60:	24800115 	stw	r18,4(r4)
40000a64:	24400415 	stw	r17,16(r4)
40000a68:	24000815 	stw	r16,32(r4)
40000a6c:	27c00515 	stw	ra,20(r4)
40000a70:	23c00215 	stw	r15,8(r4)
40000a74:	23800315 	stw	r14,12(r4)
40000a78:	23400615 	stw	r13,24(r4)
40000a7c:	23000915 	stw	r12,36(r4)
40000a80:	22c00c15 	stw	r11,48(r4)
40000a84:	22800d15 	stw	r10,52(r4)
40000a88:	22400a15 	stw	r9,40(r4)
40000a8c:	22000715 	stw	r8,28(r4)
40000a90:	21c00b15 	stw	r7,44(r4)
40000a94:	21800e15 	stw	r6,56(r4)
40000a98:	20c00f15 	stw	r3,60(r4)
  return res;
}
40000a9c:	dfc00417 	ldw	ra,16(sp)
40000aa0:	dcc00317 	ldw	r19,12(sp)
40000aa4:	dc800217 	ldw	r18,8(sp)
40000aa8:	dc400117 	ldw	r17,4(sp)
40000aac:	dc000017 	ldw	r16,0(sp)
40000ab0:	dec00504 	addi	sp,sp,20
40000ab4:	f800283a 	ret

40000ab8 <init_code_table>:
#include "common.h"
#include "input.h"
#include "cavlc.h"


code_table *init_code_table(code_table_item *items) {
40000ab8:	defffe04 	addi	sp,sp,-8
40000abc:	dc000015 	stw	r16,0(sp)
40000ac0:	2021883a 	mov	r16,r4
  code_table *res=malloc(sizeof(code_table));
40000ac4:	01000204 	movi	r4,8
#include "common.h"
#include "input.h"
#include "cavlc.h"


code_table *init_code_table(code_table_item *items) {
40000ac8:	dfc00115 	stw	ra,4(sp)
  code_table *res=malloc(sizeof(code_table));
40000acc:	000b0c80 	call	4000b0c8 <malloc>
  code_table_item *pos;
  int count=0;
  for(pos=items; pos && pos->code!=0xFFFFFFFF; ++pos) ++count;
40000ad0:	80001126 	beq	r16,zero,40000b18 <init_code_table+0x60>
40000ad4:	80c00017 	ldw	r3,0(r16)
40000ad8:	01bfffc4 	movi	r6,-1
40000adc:	19800e26 	beq	r3,r6,40000b18 <init_code_table+0x60>
40000ae0:	8007883a 	mov	r3,r16
40000ae4:	0009883a 	mov	r4,zero
40000ae8:	00000206 	br	40000af4 <init_code_table+0x3c>
40000aec:	19400017 	ldw	r5,0(r3)
40000af0:	29800326 	beq	r5,r6,40000b00 <init_code_table+0x48>
40000af4:	18c00304 	addi	r3,r3,12
40000af8:	21000044 	addi	r4,r4,1
40000afc:	183ffb1e 	bne	r3,zero,40000aec <__alt_data_end+0xc0000aec>
  res->items=items;
40000b00:	14000115 	stw	r16,4(r2)
  res->count=count;
40000b04:	11000015 	stw	r4,0(r2)
  return res;
}
40000b08:	dfc00117 	ldw	ra,4(sp)
40000b0c:	dc000017 	ldw	r16,0(sp)
40000b10:	dec00204 	addi	sp,sp,8
40000b14:	f800283a 	ret


code_table *init_code_table(code_table_item *items) {
  code_table *res=malloc(sizeof(code_table));
  code_table_item *pos;
  int count=0;
40000b18:	0009883a 	mov	r4,zero
40000b1c:	003ff806 	br	40000b00 <__alt_data_end+0xc0000b00>

40000b20 <get_code>:
  res->items=items;
  res->count=count;
  return res;
}

int get_code(code_table *table) {
40000b20:	defffd04 	addi	sp,sp,-12
40000b24:	dc400115 	stw	r17,4(sp)
40000b28:	2023883a 	mov	r17,r4
  unsigned int code=input_peek_bits(24)<<8;
40000b2c:	01000604 	movi	r4,24
  res->items=items;
  res->count=count;
  return res;
}

int get_code(code_table *table) {
40000b30:	dfc00215 	stw	ra,8(sp)
40000b34:	dc000015 	stw	r16,0(sp)
  unsigned int code=input_peek_bits(24)<<8;
40000b38:	00019800 	call	40001980 <input_peek_bits>
40000b3c:	1004923a 	slli	r2,r2,8
  int min=0, max=table->count;
40000b40:	89800017 	ldw	r6,0(r17)
40000b44:	89c00117 	ldw	r7,4(r17)
40000b48:	000b883a 	mov	r5,zero
  while(max-min>1) {
40000b4c:	02000044 	movi	r8,1
40000b50:	00000506 	br	40000b68 <get_code+0x48>
    int mid=(min+max)>>1;
    if(code>=table->items[mid].code) min=mid; else max=mid;
40000b54:	19000324 	muli	r4,r3,12
40000b58:	3909883a 	add	r4,r7,r4
40000b5c:	21000017 	ldw	r4,0(r4)
40000b60:	11001136 	bltu	r2,r4,40000ba8 <get_code+0x88>

int get_code(code_table *table) {
  unsigned int code=input_peek_bits(24)<<8;
  int min=0, max=table->count;
  while(max-min>1) {
    int mid=(min+max)>>1;
40000b64:	180b883a 	mov	r5,r3
40000b68:	2987883a 	add	r3,r5,r6
}

int get_code(code_table *table) {
  unsigned int code=input_peek_bits(24)<<8;
  int min=0, max=table->count;
  while(max-min>1) {
40000b6c:	3149c83a 	sub	r4,r6,r5
    int mid=(min+max)>>1;
40000b70:	1807d07a 	srai	r3,r3,1
}

int get_code(code_table *table) {
  unsigned int code=input_peek_bits(24)<<8;
  int min=0, max=table->count;
  while(max-min>1) {
40000b74:	413ff716 	blt	r8,r4,40000b54 <__alt_data_end+0xc0000b54>
    int mid=(min+max)>>1;
    if(code>=table->items[mid].code) min=mid; else max=mid;
  }
  input_step_bits(table->items[min].bits);
40000b78:	2c000324 	muli	r16,r5,12
40000b7c:	3c0f883a 	add	r7,r7,r16
40000b80:	39000117 	ldw	r4,4(r7)
40000b84:	00019e00 	call	400019e0 <input_step_bits>
  return table->items[min].data;
40000b88:	89400117 	ldw	r5,4(r17)
40000b8c:	2c0b883a 	add	r5,r5,r16
}
40000b90:	28800217 	ldw	r2,8(r5)
40000b94:	dfc00217 	ldw	ra,8(sp)
40000b98:	dc400117 	ldw	r17,4(sp)
40000b9c:	dc000017 	ldw	r16,0(sp)
40000ba0:	dec00304 	addi	sp,sp,12
40000ba4:	f800283a 	ret

int get_code(code_table *table) {
  unsigned int code=input_peek_bits(24)<<8;
  int min=0, max=table->count;
  while(max-min>1) {
    int mid=(min+max)>>1;
40000ba8:	180d883a 	mov	r6,r3
40000bac:	003fee06 	br	40000b68 <__alt_data_end+0xc0000b68>

40000bb0 <get_unsigned_exp_golomb>:
  input_step_bits(table->items[min].bits);
  return table->items[min].data;
}


int get_unsigned_exp_golomb() {
40000bb0:	defffe04 	addi	sp,sp,-8
40000bb4:	dc000015 	stw	r16,0(sp)
40000bb8:	dfc00115 	stw	ra,4(sp)
  int exp;
  for(exp=0; !input_get_one_bit(); ++exp);
40000bbc:	0021883a 	mov	r16,zero
40000bc0:	00000106 	br	40000bc8 <get_unsigned_exp_golomb+0x18>
40000bc4:	84000044 	addi	r16,r16,1
40000bc8:	0001a7c0 	call	40001a7c <input_get_one_bit>
40000bcc:	103ffd26 	beq	r2,zero,40000bc4 <__alt_data_end+0xc0000bc4>
  if(exp) return (1<<exp)-1+input_get_bits(exp);
40000bd0:	8000051e 	bne	r16,zero,40000be8 <get_unsigned_exp_golomb+0x38>
     else return 0;
40000bd4:	0005883a 	mov	r2,zero
}
40000bd8:	dfc00117 	ldw	ra,4(sp)
40000bdc:	dc000017 	ldw	r16,0(sp)
40000be0:	dec00204 	addi	sp,sp,8
40000be4:	f800283a 	ret


int get_unsigned_exp_golomb() {
  int exp;
  for(exp=0; !input_get_one_bit(); ++exp);
  if(exp) return (1<<exp)-1+input_get_bits(exp);
40000be8:	8009883a 	mov	r4,r16
40000bec:	0001a040 	call	40001a04 <input_get_bits>
40000bf0:	00c00044 	movi	r3,1
40000bf4:	1c20983a 	sll	r16,r3,r16
40000bf8:	843fffc4 	addi	r16,r16,-1
40000bfc:	8085883a 	add	r2,r16,r2
     else return 0;
}
40000c00:	dfc00117 	ldw	ra,4(sp)
40000c04:	dc000017 	ldw	r16,0(sp)
40000c08:	dec00204 	addi	sp,sp,8
40000c0c:	f800283a 	ret

40000c10 <get_signed_exp_golomb>:

int get_signed_exp_golomb() {
40000c10:	defffe04 	addi	sp,sp,-8
40000c14:	dc000015 	stw	r16,0(sp)
40000c18:	dfc00115 	stw	ra,4(sp)
}


int get_unsigned_exp_golomb() {
  int exp;
  for(exp=0; !input_get_one_bit(); ++exp);
40000c1c:	0021883a 	mov	r16,zero
40000c20:	00000106 	br	40000c28 <get_signed_exp_golomb+0x18>
40000c24:	84000044 	addi	r16,r16,1
40000c28:	0001a7c0 	call	40001a7c <input_get_one_bit>
40000c2c:	103ffd26 	beq	r2,zero,40000c24 <__alt_data_end+0xc0000c24>
  if(exp) return (1<<exp)-1+input_get_bits(exp);
40000c30:	8000051e 	bne	r16,zero,40000c48 <get_signed_exp_golomb+0x38>
40000c34:	0005883a 	mov	r2,zero
}

int get_signed_exp_golomb() {
  int code=get_unsigned_exp_golomb();
  return (code&1) ? (code+1)>>1 : -(code>>1);
}
40000c38:	dfc00117 	ldw	ra,4(sp)
40000c3c:	dc000017 	ldw	r16,0(sp)
40000c40:	dec00204 	addi	sp,sp,8
40000c44:	f800283a 	ret


int get_unsigned_exp_golomb() {
  int exp;
  for(exp=0; !input_get_one_bit(); ++exp);
  if(exp) return (1<<exp)-1+input_get_bits(exp);
40000c48:	8009883a 	mov	r4,r16
40000c4c:	0001a040 	call	40001a04 <input_get_bits>
40000c50:	00c00044 	movi	r3,1
40000c54:	1c20983a 	sll	r16,r3,r16
40000c58:	843fffc4 	addi	r16,r16,-1
40000c5c:	8085883a 	add	r2,r16,r2
     else return 0;
}

int get_signed_exp_golomb() {
  int code=get_unsigned_exp_golomb();
  return (code&1) ? (code+1)>>1 : -(code>>1);
40000c60:	10c6703a 	and	r3,r2,r3
40000c64:	18000626 	beq	r3,zero,40000c80 <get_signed_exp_golomb+0x70>
40000c68:	10800044 	addi	r2,r2,1
40000c6c:	1005d07a 	srai	r2,r2,1
}
40000c70:	dfc00117 	ldw	ra,4(sp)
40000c74:	dc000017 	ldw	r16,0(sp)
40000c78:	dec00204 	addi	sp,sp,8
40000c7c:	f800283a 	ret
40000c80:	1005d07a 	srai	r2,r2,1
40000c84:	0085c83a 	sub	r2,zero,r2
40000c88:	003feb06 	br	40000c38 <__alt_data_end+0xc0000c38>

40000c8c <alloc_frame>:
#include "common.h"
#include "params.h"
#include "main.h"

frame *alloc_frame(int width, int height) {
40000c8c:	defffb04 	addi	sp,sp,-20
40000c90:	dcc00315 	stw	r19,12(sp)
40000c94:	dc800215 	stw	r18,8(sp)
40000c98:	2827883a 	mov	r19,r5
40000c9c:	2025883a 	mov	r18,r4
40000ca0:	dc400115 	stw	r17,4(sp)
  frame *f=calloc(1,sizeof(frame));
  f->Lwidth=f->Lpitch=width;
  f->Lheight=height;
  f->L=malloc(width*height);
40000ca4:	2163383a 	mul	r17,r4,r5
#include "common.h"
#include "params.h"
#include "main.h"

frame *alloc_frame(int width, int height) {
  frame *f=calloc(1,sizeof(frame));
40000ca8:	01400904 	movi	r5,36
40000cac:	01000044 	movi	r4,1
#include "common.h"
#include "params.h"
#include "main.h"

frame *alloc_frame(int width, int height) {
40000cb0:	dfc00415 	stw	ra,16(sp)
40000cb4:	dc000015 	stw	r16,0(sp)
  frame *f=calloc(1,sizeof(frame));
40000cb8:	00096440 	call	40009644 <calloc>
  f->Lwidth=f->Lpitch=width;
40000cbc:	14800215 	stw	r18,8(r2)
40000cc0:	14800015 	stw	r18,0(r2)
  f->Lheight=height;
40000cc4:	14c00115 	stw	r19,4(r2)
  f->L=malloc(width*height);
  f->Cwidth=f->Cpitch=width>>1;
40000cc8:	9025d07a 	srai	r18,r18,1
  f->Cheight=height>>1;
40000ccc:	9827d07a 	srai	r19,r19,1

frame *alloc_frame(int width, int height) {
  frame *f=calloc(1,sizeof(frame));
  f->Lwidth=f->Lpitch=width;
  f->Lheight=height;
  f->L=malloc(width*height);
40000cd0:	8809883a 	mov	r4,r17
#include "common.h"
#include "params.h"
#include "main.h"

frame *alloc_frame(int width, int height) {
  frame *f=calloc(1,sizeof(frame));
40000cd4:	1021883a 	mov	r16,r2
  f->Lwidth=f->Lpitch=width;
  f->Lheight=height;
  f->L=malloc(width*height);
40000cd8:	000b0c80 	call	4000b0c8 <malloc>
40000cdc:	80800615 	stw	r2,24(r16)
  f->Cwidth=f->Cpitch=width>>1;
40000ce0:	84800515 	stw	r18,20(r16)
40000ce4:	84800315 	stw	r18,12(r16)
  f->Cheight=height>>1;
40000ce8:	84c00415 	stw	r19,16(r16)
  f->C[0]=malloc(width*height/4);
40000cec:	8809883a 	mov	r4,r17
40000cf0:	88000f16 	blt	r17,zero,40000d30 <alloc_frame+0xa4>
40000cf4:	2023d0ba 	srai	r17,r4,2
40000cf8:	8809883a 	mov	r4,r17
40000cfc:	000b0c80 	call	4000b0c8 <malloc>
  f->C[1]=malloc(width*height/4);
40000d00:	8809883a 	mov	r4,r17
  f->Lwidth=f->Lpitch=width;
  f->Lheight=height;
  f->L=malloc(width*height);
  f->Cwidth=f->Cpitch=width>>1;
  f->Cheight=height>>1;
  f->C[0]=malloc(width*height/4);
40000d04:	80800715 	stw	r2,28(r16)
  f->C[1]=malloc(width*height/4);
40000d08:	000b0c80 	call	4000b0c8 <malloc>
40000d0c:	80800815 	stw	r2,32(r16)
  return f;
}
40000d10:	8005883a 	mov	r2,r16
40000d14:	dfc00417 	ldw	ra,16(sp)
40000d18:	dcc00317 	ldw	r19,12(sp)
40000d1c:	dc800217 	ldw	r18,8(sp)
40000d20:	dc400117 	ldw	r17,4(sp)
40000d24:	dc000017 	ldw	r16,0(sp)
40000d28:	dec00504 	addi	sp,sp,20
40000d2c:	f800283a 	ret
  f->Lwidth=f->Lpitch=width;
  f->Lheight=height;
  f->L=malloc(width*height);
  f->Cwidth=f->Cpitch=width>>1;
  f->Cheight=height>>1;
  f->C[0]=malloc(width*height/4);
40000d30:	890000c4 	addi	r4,r17,3
40000d34:	003fef06 	br	40000cf4 <__alt_data_end+0xc0000cf4>

40000d38 <free_frame>:
  f->C[1]=malloc(width*height/4);
  return f;
}

void free_frame(frame *f) {
  if(!f) return;
40000d38:	20001326 	beq	r4,zero,40000d88 <free_frame+0x50>
  f->C[0]=malloc(width*height/4);
  f->C[1]=malloc(width*height/4);
  return f;
}

void free_frame(frame *f) {
40000d3c:	defffe04 	addi	sp,sp,-8
40000d40:	dc000015 	stw	r16,0(sp)
40000d44:	2021883a 	mov	r16,r4
  if(!f) return;
  if(f->L) free(f->L);
40000d48:	21000617 	ldw	r4,24(r4)
  f->C[0]=malloc(width*height/4);
  f->C[1]=malloc(width*height/4);
  return f;
}

void free_frame(frame *f) {
40000d4c:	dfc00115 	stw	ra,4(sp)
  if(!f) return;
  if(f->L) free(f->L);
40000d50:	20000126 	beq	r4,zero,40000d58 <free_frame+0x20>
40000d54:	000b0dc0 	call	4000b0dc <free>
  if(f->C[0]) free(f->C[0]);
40000d58:	81000717 	ldw	r4,28(r16)
40000d5c:	20000526 	beq	r4,zero,40000d74 <free_frame+0x3c>
40000d60:	000b0dc0 	call	4000b0dc <free>
  if(f->C[0]) free(f->C[1]);
40000d64:	80800717 	ldw	r2,28(r16)
40000d68:	10000226 	beq	r2,zero,40000d74 <free_frame+0x3c>
40000d6c:	81000817 	ldw	r4,32(r16)
40000d70:	000b0dc0 	call	4000b0dc <free>
  free(f);
40000d74:	8009883a 	mov	r4,r16
}
40000d78:	dfc00117 	ldw	ra,4(sp)
40000d7c:	dc000017 	ldw	r16,0(sp)
40000d80:	dec00204 	addi	sp,sp,8
void free_frame(frame *f) {
  if(!f) return;
  if(f->L) free(f->L);
  if(f->C[0]) free(f->C[0]);
  if(f->C[0]) free(f->C[1]);
  free(f);
40000d84:	000b0dc1 	jmpi	4000b0dc <free>
40000d88:	f800283a 	ret

40000d8c <core_block_multiply>:
#include "common.h"
#include "coretrans.h"

core_block core_block_multiply(core_block a, core_block b) {
40000d8c:	deffdd04 	addi	sp,sp,-140
40000d90:	df001e15 	stw	fp,120(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40000d94:	df003517 	ldw	fp,212(sp)
#include "common.h"
#include "coretrans.h"

core_block core_block_multiply(core_block a, core_block b) {
40000d98:	ddc01d15 	stw	r23,116(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40000d9c:	da003417 	ldw	r8,208(sp)
40000da0:	e1af383a 	mul	r23,fp,r6
40000da4:	df003617 	ldw	fp,216(sp)
40000da8:	db802517 	ldw	r14,148(sp)
40000dac:	4191383a 	mul	r8,r8,r6
40000db0:	e1b9383a 	mul	fp,fp,r6
40000db4:	db003017 	ldw	r12,192(sp)
40000db8:	da000015 	stw	r8,0(sp)
40000dbc:	df000a15 	stw	fp,40(sp)
40000dc0:	df003417 	ldw	fp,208(sp)
40000dc4:	da003117 	ldw	r8,196(sp)
40000dc8:	615b383a 	mul	r13,r12,r5
40000dcc:	e3b9383a 	mul	fp,fp,r14
40000dd0:	4159383a 	mul	r12,r8,r5
40000dd4:	da003217 	ldw	r8,200(sp)
40000dd8:	df000d15 	stw	fp,52(sp)
40000ddc:	df003517 	ldw	fp,212(sp)
40000de0:	d8802417 	ldw	r2,144(sp)
40000de4:	4157383a 	mul	r11,r8,r5
40000de8:	e3b9383a 	mul	fp,fp,r14
40000dec:	da003017 	ldw	r8,192(sp)
#include "common.h"
#include "coretrans.h"

core_block core_block_multiply(core_block a, core_block b) {
40000df0:	dfc01f15 	stw	ra,124(sp)
40000df4:	dd801c15 	stw	r22,112(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40000df8:	dfc02717 	ldw	ra,156(sp)
40000dfc:	dd803317 	ldw	r22,204(sp)
#include "common.h"
#include "coretrans.h"

core_block core_block_multiply(core_block a, core_block b) {
40000e00:	dd401b15 	stw	r21,108(sp)
40000e04:	dd001a15 	stw	r20,104(sp)
40000e08:	dd403717 	ldw	r21,220(sp)
40000e0c:	dd003817 	ldw	r20,224(sp)
40000e10:	dcc01915 	stw	r19,100(sp)
40000e14:	dc801815 	stw	r18,96(sp)
40000e18:	dcc03917 	ldw	r19,228(sp)
40000e1c:	dc401715 	stw	r17,92(sp)
40000e20:	dc001615 	stw	r16,88(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40000e24:	dc402617 	ldw	r17,152(sp)
40000e28:	dc002317 	ldw	r16,140(sp)
40000e2c:	4095383a 	mul	r10,r8,r2
40000e30:	df001015 	stw	fp,64(sp)
40000e34:	da003117 	ldw	r8,196(sp)
40000e38:	df003617 	ldw	fp,216(sp)
40000e3c:	a99f383a 	mul	r15,r21,r6
40000e40:	4093383a 	mul	r9,r8,r2
40000e44:	e3b9383a 	mul	fp,fp,r14
40000e48:	b147383a 	mul	r3,r22,r5
40000e4c:	bb19883a 	add	r12,r23,r12
40000e50:	df001315 	stw	fp,76(sp)
40000e54:	df003217 	ldw	fp,200(sp)
40000e58:	ddc00a17 	ldw	r23,40(sp)
40000e5c:	755d383a 	mul	r14,r14,r21
40000e60:	e091383a 	mul	r8,fp,r2
40000e64:	a1f9383a 	mul	fp,r20,r7
40000e68:	b085383a 	mul	r2,r22,r2
40000e6c:	bad7883a 	add	r11,r23,r11
40000e70:	df000615 	stw	fp,24(sp)
40000e74:	99f9383a 	mul	fp,r19,r7
40000e78:	78c7883a 	add	r3,r15,r3
40000e7c:	dbc01017 	ldw	r15,64(sp)
40000e80:	df000815 	stw	fp,32(sp)
40000e84:	df003a17 	ldw	fp,232(sp)
40000e88:	7a53883a 	add	r9,r15,r9
40000e8c:	7085883a 	add	r2,r14,r2
40000e90:	e1f9383a 	mul	fp,fp,r7
40000e94:	df000b15 	stw	fp,44(sp)
40000e98:	df003b17 	ldw	fp,236(sp)
40000e9c:	e1e5383a 	mul	r18,fp,r7
40000ea0:	a479383a 	mul	fp,r20,r17
40000ea4:	90c7883a 	add	r3,r18,r3
40000ea8:	df000e15 	stw	fp,56(sp)
40000eac:	9c79383a 	mul	fp,r19,r17
40000eb0:	df001115 	stw	fp,68(sp)
40000eb4:	df003a17 	ldw	fp,232(sp)
40000eb8:	e479383a 	mul	fp,fp,r17
40000ebc:	df001415 	stw	fp,80(sp)
40000ec0:	df003b17 	ldw	fp,236(sp)
40000ec4:	8f23383a 	mul	r17,r17,fp
      CoreBlock(res,i,j)=sum;
40000ec8:	df003c17 	ldw	fp,240(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40000ecc:	8885883a 	add	r2,r17,r2
      CoreBlock(res,i,j)=sum;
40000ed0:	e439383a 	mul	fp,fp,r16
40000ed4:	df000715 	stw	fp,28(sp)
40000ed8:	df003d17 	ldw	fp,244(sp)
40000edc:	e439383a 	mul	fp,fp,r16
40000ee0:	df000915 	stw	fp,36(sp)
40000ee4:	df003e17 	ldw	fp,248(sp)
40000ee8:	e439383a 	mul	fp,fp,r16
40000eec:	df000c15 	stw	fp,48(sp)
40000ef0:	df003f17 	ldw	fp,252(sp)
40000ef4:	e421383a 	mul	r16,fp,r16
40000ef8:	df003c17 	ldw	fp,240(sp)
40000efc:	80c7883a 	add	r3,r16,r3
40000f00:	e7f9383a 	mul	fp,fp,ra
40000f04:	df000f15 	stw	fp,60(sp)
40000f08:	df003d17 	ldw	fp,244(sp)
40000f0c:	e7f9383a 	mul	fp,fp,ra
40000f10:	df001215 	stw	fp,72(sp)
40000f14:	df003e17 	ldw	fp,248(sp)
40000f18:	e7f9383a 	mul	fp,fp,ra
40000f1c:	df001515 	stw	fp,84(sp)
40000f20:	df003f17 	ldw	fp,252(sp)
40000f24:	ff3f383a 	mul	ra,ra,fp
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40000f28:	df000017 	ldw	fp,0(sp)
      CoreBlock(res,i,j)=sum;
40000f2c:	f885883a 	add	r2,ra,r2
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40000f30:	e35b883a 	add	r13,fp,r13
40000f34:	df000d17 	ldw	fp,52(sp)
40000f38:	ddc01317 	ldw	r23,76(sp)
40000f3c:	db800817 	ldw	r14,32(sp)
40000f40:	dbc00b17 	ldw	r15,44(sp)
40000f44:	e295883a 	add	r10,fp,r10
40000f48:	ba11883a 	add	r8,r23,r8
40000f4c:	df000617 	ldw	fp,24(sp)
40000f50:	ddc00e17 	ldw	r23,56(sp)
40000f54:	7319883a 	add	r12,r14,r12
40000f58:	e35b883a 	add	r13,fp,r13
40000f5c:	db801417 	ldw	r14,80(sp)
40000f60:	df001117 	ldw	fp,68(sp)
40000f64:	7ad7883a 	add	r11,r15,r11
40000f68:	ba95883a 	add	r10,r23,r10
      CoreBlock(res,i,j)=sum;
40000f6c:	dbc00717 	ldw	r15,28(sp)
40000f70:	ddc00917 	ldw	r23,36(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40000f74:	e253883a 	add	r9,fp,r9
      CoreBlock(res,i,j)=sum;
40000f78:	7b5b883a 	add	r13,r15,r13
40000f7c:	bb19883a 	add	r12,r23,r12
40000f80:	dbc01217 	ldw	r15,72(sp)
40000f84:	ddc01517 	ldw	r23,84(sp)
40000f88:	df000c17 	ldw	fp,48(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40000f8c:	7211883a 	add	r8,r14,r8
      CoreBlock(res,i,j)=sum;
40000f90:	db800f17 	ldw	r14,60(sp)
40000f94:	e2d7883a 	add	r11,fp,r11
40000f98:	7a53883a 	add	r9,r15,r9
40000f9c:	7295883a 	add	r10,r14,r10
40000fa0:	ba11883a 	add	r8,r23,r8
#include "common.h"
#include "coretrans.h"

core_block core_block_multiply(core_block a, core_block b) {
40000fa4:	d9402015 	stw	r5,128(sp)
40000fa8:	d9802115 	stw	r6,132(sp)
40000fac:	d9c02215 	stw	r7,136(sp)
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
      CoreBlock(res,i,j)=sum;
40000fb0:	23400015 	stw	r13,0(r4)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40000fb4:	d9c02f17 	ldw	r7,188(sp)
40000fb8:	db402c17 	ldw	r13,176(sp)
      CoreBlock(res,i,j)=sum;
40000fbc:	23000115 	stw	r12,4(r4)
40000fc0:	22c00215 	stw	r11,8(r4)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40000fc4:	db002d17 	ldw	r12,180(sp)
40000fc8:	dac02817 	ldw	r11,160(sp)
      CoreBlock(res,i,j)=sum;
40000fcc:	20c00315 	stw	r3,12(r4)
40000fd0:	22800415 	stw	r10,16(r4)
40000fd4:	22400515 	stw	r9,20(r4)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40000fd8:	da802a17 	ldw	r10,168(sp)
40000fdc:	da402e17 	ldw	r9,184(sp)
      CoreBlock(res,i,j)=sum;
40000fe0:	22000615 	stw	r8,24(r4)
40000fe4:	20800715 	stw	r2,28(r4)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40000fe8:	da002b17 	ldw	r8,172(sp)
40000fec:	d8802917 	ldw	r2,164(sp)
40000ff0:	df003017 	ldw	fp,192(sp)
40000ff4:	dfc03417 	ldw	ra,208(sp)
40000ff8:	db803117 	ldw	r14,196(sp)
40000ffc:	dbc03217 	ldw	r15,200(sp)
40001000:	d8c03517 	ldw	r3,212(sp)
40001004:	e2f9383a 	mul	fp,fp,r11
40001008:	5bef383a 	mul	r23,r11,r15
4000100c:	f88d383a 	mul	r6,ra,r2
40001010:	5b8b383a 	mul	r5,r11,r14
40001014:	dfc03617 	ldw	ra,216(sp)
40001018:	db803017 	ldw	r14,192(sp)
4000101c:	dbc03417 	ldw	r15,208(sp)
40001020:	df000915 	stw	fp,36(sp)
40001024:	6b9d383a 	mul	r14,r13,r14
40001028:	10f9383a 	mul	fp,r2,r3
4000102c:	63df383a 	mul	r15,r12,r15
40001030:	17c7383a 	mul	r3,r2,ra
40001034:	dfc03117 	ldw	ra,196(sp)
40001038:	db800115 	stw	r14,4(sp)
4000103c:	dbc00615 	stw	r15,24(sp)
40001040:	6fff383a 	mul	ra,r13,ra
40001044:	db803517 	ldw	r14,212(sp)
40001048:	dbc03217 	ldw	r15,200(sp)
4000104c:	b2d7383a 	mul	r11,r22,r11
40001050:	dfc00215 	stw	ra,8(sp)
40001054:	639d383a 	mul	r14,r12,r14
40001058:	6bdf383a 	mul	r15,r13,r15
4000105c:	dfc03617 	ldw	ra,216(sp)
40001060:	6dad383a 	mul	r22,r13,r22
40001064:	1545383a 	mul	r2,r2,r21
40001068:	656b383a 	mul	r21,r12,r21
4000106c:	db800315 	stw	r14,12(sp)
40001070:	dbc00415 	stw	r15,16(sp)
40001074:	9a9d383a 	mul	r14,r19,r10
40001078:	67ff383a 	mul	ra,r12,ra
4000107c:	dd800715 	stw	r22,28(sp)
40001080:	a299383a 	mul	r12,r20,r10
40001084:	dd803a17 	ldw	r22,232(sp)
40001088:	dd400815 	stw	r21,32(sp)
4000108c:	dbc03a17 	ldw	r15,232(sp)
40001090:	dd403b17 	ldw	r21,236(sp)
40001094:	dfc00515 	stw	ra,20(sp)
40001098:	db000015 	stw	r12,0(sp)
      CoreBlock(res,i,j)=sum;
4000109c:	dfc03c17 	ldw	ra,240(sp)
400010a0:	db003d17 	ldw	r12,244(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
400010a4:	db800a15 	stw	r14,40(sp)
400010a8:	53df383a 	mul	r15,r10,r15
      CoreBlock(res,i,j)=sum;
400010ac:	db803e17 	ldw	r14,248(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
400010b0:	5555383a 	mul	r10,r10,r21
400010b4:	a269383a 	mul	r20,r20,r9
400010b8:	4da5383a 	mul	r18,r9,r22
400010bc:	4ce7383a 	mul	r19,r9,r19
      CoreBlock(res,i,j)=sum;
400010c0:	dd803e17 	ldw	r22,248(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
400010c4:	4d53383a 	mul	r9,r9,r21
      CoreBlock(res,i,j)=sum;
400010c8:	dd403f17 	ldw	r21,252(sp)
400010cc:	47e3383a 	mul	r17,r8,ra
400010d0:	4321383a 	mul	r16,r8,r12
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
400010d4:	dbc00b15 	stw	r15,44(sp)
      CoreBlock(res,i,j)=sum;
400010d8:	3b1b383a 	mul	r13,r7,r12
400010dc:	439f383a 	mul	r15,r8,r14
400010e0:	b1d9383a 	mul	r12,r22,r7
400010e4:	4551383a 	mul	r8,r8,r21
400010e8:	3fdd383a 	mul	r14,r7,ra
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
400010ec:	dfc00917 	ldw	ra,36(sp)
      CoreBlock(res,i,j)=sum;
400010f0:	3d4f383a 	mul	r7,r7,r21
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
400010f4:	dd800617 	ldw	r22,24(sp)
400010f8:	dd400117 	ldw	r21,4(sp)
400010fc:	f98d883a 	add	r6,ra,r6
40001100:	e14b883a 	add	r5,fp,r5
40001104:	dfc00317 	ldw	ra,12(sp)
40001108:	df000217 	ldw	fp,8(sp)
4000110c:	5885883a 	add	r2,r11,r2
40001110:	ad97883a 	add	r11,r21,r22
40001114:	dd400417 	ldw	r21,16(sp)
40001118:	dd800517 	ldw	r22,20(sp)
4000111c:	b8c7883a 	add	r3,r23,r3
40001120:	e7ef883a 	add	r23,fp,ra
40001124:	adb9883a 	add	fp,r21,r22
40001128:	dd400717 	ldw	r21,28(sp)
4000112c:	dd800817 	ldw	r22,32(sp)
40001130:	5085883a 	add	r2,r10,r2
      CoreBlock(res,i,j)=sum;
40001134:	4085883a 	add	r2,r8,r2
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40001138:	adbf883a 	add	ra,r21,r22
4000113c:	dd400017 	ldw	r21,0(sp)
40001140:	dd800a17 	ldw	r22,40(sp)
40001144:	a2d7883a 	add	r11,r20,r11
40001148:	a98d883a 	add	r6,r21,r6
4000114c:	dd400b17 	ldw	r21,44(sp)
40001150:	b14b883a 	add	r5,r22,r5
40001154:	9de7883a 	add	r19,r19,r23
40001158:	a8c7883a 	add	r3,r21,r3
4000115c:	9725883a 	add	r18,r18,fp
40001160:	4fd3883a 	add	r9,r9,ra
      CoreBlock(res,i,j)=sum;
40001164:	898d883a 	add	r6,r17,r6
40001168:	814b883a 	add	r5,r16,r5
4000116c:	78c7883a 	add	r3,r15,r3
40001170:	72dd883a 	add	r14,r14,r11
40001174:	6cdb883a 	add	r13,r13,r19
40001178:	6499883a 	add	r12,r12,r18
4000117c:	3a4f883a 	add	r7,r7,r9
40001180:	20800b15 	stw	r2,44(r4)
    }
  return res;
}
40001184:	2005883a 	mov	r2,r4
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
      CoreBlock(res,i,j)=sum;
40001188:	21800815 	stw	r6,32(r4)
4000118c:	21400915 	stw	r5,36(r4)
40001190:	20c00a15 	stw	r3,40(r4)
40001194:	23800c15 	stw	r14,48(r4)
40001198:	23400d15 	stw	r13,52(r4)
4000119c:	23000e15 	stw	r12,56(r4)
400011a0:	21c00f15 	stw	r7,60(r4)
    }
  return res;
}
400011a4:	dfc01f17 	ldw	ra,124(sp)
400011a8:	df001e17 	ldw	fp,120(sp)
400011ac:	ddc01d17 	ldw	r23,116(sp)
400011b0:	dd801c17 	ldw	r22,112(sp)
400011b4:	dd401b17 	ldw	r21,108(sp)
400011b8:	dd001a17 	ldw	r20,104(sp)
400011bc:	dcc01917 	ldw	r19,100(sp)
400011c0:	dc801817 	ldw	r18,96(sp)
400011c4:	dc401717 	ldw	r17,92(sp)
400011c8:	dc001617 	ldw	r16,88(sp)
400011cc:	dec02304 	addi	sp,sp,140
400011d0:	f800283a 	ret

400011d4 <hadamard>:

core_block hadamard(core_block coeff) {
400011d4:	deff9f04 	addi	sp,sp,-388
400011d8:	dc005415 	stw	r16,336(sp)
400011dc:	04001004 	movi	r16,64
400011e0:	dc405515 	stw	r17,340(sp)
400011e4:	d9405e15 	stw	r5,376(sp)
400011e8:	2023883a 	mov	r17,r4
400011ec:	d9805f15 	stw	r6,380(sp)
400011f0:	d9405e04 	addi	r5,sp,376
400011f4:	800d883a 	mov	r6,r16
400011f8:	dc09883a 	add	r4,sp,r16
400011fc:	dfc05d15 	stw	ra,372(sp)
40001200:	df005c15 	stw	fp,368(sp)
40001204:	ddc05b15 	stw	r23,364(sp)
40001208:	dd805a15 	stw	r22,360(sp)
4000120c:	dd405915 	stw	r21,356(sp)
40001210:	dd005815 	stw	r20,352(sp)
40001214:	dcc05715 	stw	r19,348(sp)
40001218:	dc805615 	stw	r18,344(sp)
4000121c:	d9c06015 	stw	r7,384(sp)
40001220:	000b8fc0 	call	4000b8fc <memcpy>
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40001224:	da001017 	ldw	r8,64(sp)
40001228:	d9c01417 	ldw	r7,80(sp)
4000122c:	d8c01917 	ldw	r3,100(sp)
40001230:	dcc01c17 	ldw	r19,112(sp)
40001234:	d9801117 	ldw	r6,68(sp)
40001238:	d9401517 	ldw	r5,84(sp)
4000123c:	d9001817 	ldw	r4,96(sp)
40001240:	d8801d17 	ldw	r2,116(sp)
40001244:	dc801217 	ldw	r18,72(sp)
40001248:	dbc01617 	ldw	r15,88(sp)
4000124c:	db801a17 	ldw	r14,104(sp)
40001250:	df001e17 	ldw	fp,120(sp)
40001254:	da801f17 	ldw	r10,124(sp)
40001258:	db401317 	ldw	r13,76(sp)
4000125c:	db001717 	ldw	r12,92(sp)
40001260:	dac01b17 	ldw	r11,108(sp)
40001264:	3213883a 	add	r9,r6,r8
40001268:	418dc83a 	sub	r6,r8,r6
4000126c:	3951883a 	add	r8,r7,r5
40001270:	394bc83a 	sub	r5,r7,r5
40001274:	20cf883a 	add	r7,r4,r3
40001278:	20c9c83a 	sub	r4,r4,r3
4000127c:	9887883a 	add	r3,r19,r2
40001280:	9885c83a 	sub	r2,r19,r2
40001284:	4cad883a 	add	r22,r9,r18
40001288:	34abc83a 	sub	r21,r6,r18
4000128c:	43ef883a 	add	r23,r8,r15
40001290:	348d883a 	add	r6,r6,r18
40001294:	2be9c83a 	sub	r20,r5,r15
40001298:	3ba7883a 	add	r19,r7,r14
4000129c:	794b883a 	add	r5,r15,r5
400012a0:	4c93c83a 	sub	r9,r9,r18
400012a4:	43d1c83a 	sub	r8,r8,r15
400012a8:	23a5c83a 	sub	r18,r4,r14
400012ac:	1f1f883a 	add	r15,r3,fp
400012b0:	7109883a 	add	r4,r14,r4
400012b4:	3b8fc83a 	sub	r7,r7,r14
400012b8:	1f07c83a 	sub	r3,r3,fp
400012bc:	171dc83a 	sub	r14,r2,fp
400012c0:	e085883a 	add	r2,fp,r2
      CoreBlock(res,i,j)=sum;
400012c4:	4b53c83a 	sub	r9,r9,r13
400012c8:	4311c83a 	sub	r8,r8,r12
400012cc:	3acfc83a 	sub	r7,r7,r11
400012d0:	7a9f883a 	add	r15,r15,r10
400012d4:	1a87c83a 	sub	r3,r3,r10
400012d8:	539d883a 	add	r14,r10,r14
400012dc:	1285c83a 	sub	r2,r2,r10
400012e0:	6dad883a 	add	r22,r13,r22
400012e4:	6d6b883a 	add	r21,r13,r21
400012e8:	bb2f883a 	add	r23,r23,r12
400012ec:	335bc83a 	sub	r13,r6,r13
400012f0:	6529883a 	add	r20,r12,r20
400012f4:	9ae7883a 	add	r19,r19,r11
400012f8:	2b19c83a 	sub	r12,r5,r12
400012fc:	92e5883a 	add	r18,r18,r11
    }
  return res;
40001300:	d80b883a 	mov	r5,sp
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
      CoreBlock(res,i,j)=sum;
40001304:	22d7c83a 	sub	r11,r4,r11
    }
  return res;
40001308:	800d883a 	mov	r6,r16
4000130c:	d9003004 	addi	r4,sp,192
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
      CoreBlock(res,i,j)=sum;
40001310:	da400115 	stw	r9,4(sp)
40001314:	db400315 	stw	r13,12(sp)
40001318:	da000515 	stw	r8,20(sp)
4000131c:	db000715 	stw	r12,28(sp)
40001320:	d9c00915 	stw	r7,36(sp)
40001324:	dac00b15 	stw	r11,44(sp)
40001328:	dbc00c15 	stw	r15,48(sp)
4000132c:	d8c00d15 	stw	r3,52(sp)
40001330:	db800e15 	stw	r14,56(sp)
40001334:	dd800015 	stw	r22,0(sp)
40001338:	dd400215 	stw	r21,8(sp)
4000133c:	ddc00415 	stw	r23,16(sp)
40001340:	dd000615 	stw	r20,24(sp)
40001344:	dcc00815 	stw	r19,32(sp)
40001348:	dc800a15 	stw	r18,40(sp)
4000134c:	d8800f15 	stw	r2,60(sp)
    }
  return res;
40001350:	000b8fc0 	call	4000b8fc <memcpy>
40001354:	015000b4 	movhi	r5,16386
40001358:	800d883a 	mov	r6,r16
4000135c:	d9002004 	addi	r4,sp,128
40001360:	2974ee04 	addi	r5,r5,-11336
40001364:	000b8fc0 	call	4000b8fc <memcpy>
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40001368:	da002117 	ldw	r8,132(sp)
4000136c:	d9c03617 	ldw	r7,216(sp)
40001370:	da403117 	ldw	r9,196(sp)
40001374:	dac03417 	ldw	r11,208(sp)
40001378:	d8802017 	ldw	r2,128(sp)
4000137c:	dd403717 	ldw	r21,220(sp)
40001380:	d8c03517 	ldw	r3,212(sp)
40001384:	3a0f383a 	mul	r7,r7,r8
40001388:	5a2d383a 	mul	r22,r11,r8
4000138c:	488d383a 	mul	r6,r9,r2
40001390:	1a07383a 	mul	r3,r3,r8
40001394:	dd003217 	ldw	r20,200(sp)
40001398:	aa11383a 	mul	r8,r21,r8
4000139c:	dc802517 	ldw	r18,148(sp)
400013a0:	d9c04215 	stw	r7,264(sp)
400013a4:	d9c03617 	ldw	r7,216(sp)
400013a8:	dfc02417 	ldw	ra,144(sp)
400013ac:	d9804115 	stw	r6,260(sp)
400013b0:	a0a9383a 	mul	r20,r20,r2
400013b4:	d9803517 	ldw	r6,212(sp)
400013b8:	da004415 	stw	r8,272(sp)
400013bc:	da003217 	ldw	r8,200(sp)
400013c0:	da803017 	ldw	r10,192(sp)
400013c4:	d8c04815 	stw	r3,288(sp)
400013c8:	3ca7383a 	mul	r19,r7,r18
400013cc:	d8c03317 	ldw	r3,204(sp)
400013d0:	d9c03317 	ldw	r7,204(sp)
400013d4:	df003817 	ldw	fp,224(sp)
400013d8:	ddc03917 	ldw	r23,228(sp)
400013dc:	dbc02217 	ldw	r15,136(sp)
400013e0:	dd004315 	stw	r20,268(sp)
400013e4:	47d1383a 	mul	r8,r8,ra
400013e8:	34a9383a 	mul	r20,r6,r18
400013ec:	d9803717 	ldw	r6,220(sp)
400013f0:	508b383a 	mul	r5,r10,r2
400013f4:	57c9383a 	mul	r4,r10,ra
400013f8:	1885383a 	mul	r2,r3,r2
400013fc:	4fc7383a 	mul	r3,r9,ra
40001400:	3fff383a 	mul	ra,r7,ra
40001404:	d9c03a17 	ldw	r7,232(sp)
40001408:	5cab383a 	mul	r21,r11,r18
4000140c:	da005115 	stw	r8,324(sp)
40001410:	34a5383a 	mul	r18,r6,r18
40001414:	e3d1383a 	mul	r8,fp,r15
40001418:	bbcd383a 	mul	r6,r23,r15
4000141c:	3bcf383a 	mul	r7,r7,r15
40001420:	da004615 	stw	r8,280(sp)
40001424:	d9804915 	stw	r6,292(sp)
40001428:	db802617 	ldw	r14,152(sp)
4000142c:	db402317 	ldw	r13,140(sp)
40001430:	db002717 	ldw	r12,156(sp)
40001434:	d9c04b15 	stw	r7,300(sp)
40001438:	da003b17 	ldw	r8,236(sp)
4000143c:	bb8f383a 	mul	r7,r23,r14
40001440:	e38d383a 	mul	r6,fp,r14
40001444:	43df383a 	mul	r15,r8,r15
40001448:	da003a17 	ldw	r8,232(sp)
4000144c:	d9c04f15 	stw	r7,316(sp)
      CoreBlock(res,i,j)=sum;
40001450:	d9c03c17 	ldw	r7,240(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40001454:	4391383a 	mul	r8,r8,r14
40001458:	d9804d15 	stw	r6,308(sp)
      CoreBlock(res,i,j)=sum;
4000145c:	3b4f383a 	mul	r7,r7,r13
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40001460:	da005215 	stw	r8,328(sp)
40001464:	d9803b17 	ldw	r6,236(sp)
      CoreBlock(res,i,j)=sum;
40001468:	da003d17 	ldw	r8,244(sp)
4000146c:	d9c04715 	stw	r7,284(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40001470:	339d383a 	mul	r14,r6,r14
      CoreBlock(res,i,j)=sum;
40001474:	d9c03f17 	ldw	r7,252(sp)
40001478:	4351383a 	mul	r8,r8,r13
4000147c:	d9803e17 	ldw	r6,248(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40001480:	a0c7883a 	add	r3,r20,r3
      CoreBlock(res,i,j)=sum;
40001484:	da004a15 	stw	r8,296(sp)
40001488:	334d383a 	mul	r6,r6,r13
4000148c:	da003c17 	ldw	r8,240(sp)
40001490:	3b5b383a 	mul	r13,r7,r13
40001494:	d9c03e17 	ldw	r7,248(sp)
40001498:	d9804c15 	stw	r6,304(sp)
4000149c:	4311383a 	mul	r8,r8,r12
400014a0:	d9803d17 	ldw	r6,244(sp)
400014a4:	3b0f383a 	mul	r7,r7,r12
400014a8:	da004e15 	stw	r8,312(sp)
400014ac:	330d383a 	mul	r6,r6,r12
400014b0:	da003f17 	ldw	r8,252(sp)
400014b4:	d9c05315 	stw	r7,332(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
400014b8:	b14f883a 	add	r7,r22,r5
400014bc:	dd804817 	ldw	r22,288(sp)
400014c0:	d9404117 	ldw	r5,260(sp)
      CoreBlock(res,i,j)=sum;
400014c4:	d9805015 	stw	r6,320(sp)
400014c8:	4319383a 	mul	r12,r8,r12
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
400014cc:	b14d883a 	add	r6,r22,r5
400014d0:	da004217 	ldw	r8,264(sp)
400014d4:	dd804317 	ldw	r22,268(sp)
400014d8:	dd005117 	ldw	r20,324(sp)
400014dc:	a909883a 	add	r4,r21,r4
400014e0:	458b883a 	add	r5,r8,r22
400014e4:	dd404617 	ldw	r21,280(sp)
400014e8:	da004417 	ldw	r8,272(sp)
400014ec:	dd804917 	ldw	r22,292(sp)
400014f0:	9d27883a 	add	r19,r19,r20
400014f4:	dd004f17 	ldw	r20,316(sp)
400014f8:	97e5883a 	add	r18,r18,ra
400014fc:	4085883a 	add	r2,r8,r2
40001500:	dfc04b17 	ldw	ra,300(sp)
40001504:	da004d17 	ldw	r8,308(sp)
40001508:	a9cf883a 	add	r7,r21,r7
4000150c:	b18d883a 	add	r6,r22,r6
40001510:	dd405217 	ldw	r21,328(sp)
      CoreBlock(res,i,j)=sum;
40001514:	dd804717 	ldw	r22,284(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40001518:	749d883a 	add	r14,r14,r18
      CoreBlock(res,i,j)=sum;
4000151c:	6399883a 	add	r12,r12,r14
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40001520:	a0c7883a 	add	r3,r20,r3
      CoreBlock(res,i,j)=sum;
40001524:	dd005017 	ldw	r20,320(sp)
40001528:	b1cf883a 	add	r7,r22,r7
4000152c:	db000715 	stw	r12,28(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40001530:	dd803517 	ldw	r22,212(sp)
40001534:	db002917 	ldw	r12,164(sp)
40001538:	ace7883a 	add	r19,r21,r19
      CoreBlock(res,i,j)=sum;
4000153c:	dd405317 	ldw	r21,332(sp)
40001540:	a0c7883a 	add	r3,r20,r3
40001544:	dc804e17 	ldw	r18,312(sp)
40001548:	ace7883a 	add	r19,r21,r19
4000154c:	d8c00515 	stw	r3,20(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40001550:	65ab383a 	mul	r21,r12,r22
40001554:	d8c03617 	ldw	r3,216(sp)
40001558:	dd803717 	ldw	r22,220(sp)
4000155c:	f94b883a 	add	r5,ra,r5
      CoreBlock(res,i,j)=sum;
40001560:	dfc04a17 	ldw	ra,296(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40001564:	7885883a 	add	r2,r15,r2
      CoreBlock(res,i,j)=sum;
40001568:	6885883a 	add	r2,r13,r2
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
4000156c:	4109883a 	add	r4,r8,r4
      CoreBlock(res,i,j)=sum;
40001570:	da004c17 	ldw	r8,304(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40001574:	dbc02c17 	ldw	r15,176(sp)
40001578:	db802d17 	ldw	r14,180(sp)
4000157c:	1b29383a 	mul	r20,r3,r12
      CoreBlock(res,i,j)=sum;
40001580:	f98d883a 	add	r6,ra,r6
40001584:	9109883a 	add	r4,r18,r4
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40001588:	62ff383a 	mul	ra,r12,r11
4000158c:	dc803217 	ldw	r18,200(sp)
      CoreBlock(res,i,j)=sum;
40001590:	d8800315 	stw	r2,12(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40001594:	b319383a 	mul	r12,r22,r12
40001598:	d8802817 	ldw	r2,160(sp)
4000159c:	dd803517 	ldw	r22,212(sp)
      CoreBlock(res,i,j)=sum;
400015a0:	414b883a 	add	r5,r8,r5
400015a4:	d9400215 	stw	r5,8(sp)
400015a8:	d9000415 	stw	r4,16(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
400015ac:	508b383a 	mul	r5,r10,r2
400015b0:	1249383a 	mul	r4,r2,r9
400015b4:	9087383a 	mul	r3,r18,r2
400015b8:	72d7383a 	mul	r11,r14,r11
400015bc:	dc803317 	ldw	r18,204(sp)
400015c0:	53d5383a 	mul	r10,r10,r15
400015c4:	7a53383a 	mul	r9,r15,r9
400015c8:	75ad383a 	mul	r22,r14,r22
400015cc:	da002a17 	ldw	r8,168(sp)
400015d0:	db402f17 	ldw	r13,188(sp)
      CoreBlock(res,i,j)=sum;
400015d4:	d9c00015 	stw	r7,0(sp)
400015d8:	d9800115 	stw	r6,4(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
400015dc:	d9c02e17 	ldw	r7,184(sp)
400015e0:	d9802b17 	ldw	r6,172(sp)
      CoreBlock(res,i,j)=sum;
400015e4:	dcc00615 	stw	r19,24(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
400015e8:	dac04515 	stw	r11,276(sp)
400015ec:	da804615 	stw	r10,280(sp)
400015f0:	dd804315 	stw	r22,268(sp)
400015f4:	1485383a 	mul	r2,r2,r18
400015f8:	da404715 	stw	r9,284(sp)
400015fc:	da403217 	ldw	r9,200(sp)
40001600:	dc803617 	ldw	r18,216(sp)
40001604:	dd803317 	ldw	r22,204(sp)
40001608:	4bd3383a 	mul	r9,r9,r15
4000160c:	74a5383a 	mul	r18,r14,r18
40001610:	7d9f383a 	mul	r15,r15,r22
40001614:	da404815 	stw	r9,288(sp)
40001618:	dc804215 	stw	r18,264(sp)
4000161c:	da403717 	ldw	r9,220(sp)
40001620:	e225383a 	mul	r18,fp,r8
40001624:	ba2d383a 	mul	r22,r23,r8
40001628:	725d383a 	mul	r14,r14,r9
4000162c:	dc804015 	stw	r18,256(sp)
40001630:	da403a17 	ldw	r9,232(sp)
40001634:	dc803b17 	ldw	r18,236(sp)
40001638:	dd804115 	stw	r22,260(sp)
4000163c:	4253383a 	mul	r9,r8,r9
40001640:	4491383a 	mul	r8,r8,r18
40001644:	dd803a17 	ldw	r22,232(sp)
40001648:	da404a15 	stw	r9,296(sp)
4000164c:	da004b15 	stw	r8,300(sp)
      CoreBlock(res,i,j)=sum;
40001650:	da003c17 	ldw	r8,240(sp)
40001654:	da403d17 	ldw	r9,244(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40001658:	3f39383a 	mul	fp,r7,fp
4000165c:	3def383a 	mul	r23,r7,r23
40001660:	3da7383a 	mul	r19,r7,r22
      CoreBlock(res,i,j)=sum;
40001664:	dd803e17 	ldw	r22,248(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40001668:	3c8f383a 	mul	r7,r7,r18
      CoreBlock(res,i,j)=sum;
4000166c:	3225383a 	mul	r18,r6,r8
40001670:	da003f17 	ldw	r8,252(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
40001674:	dbc04415 	stw	r15,272(sp)
40001678:	db804915 	stw	r14,292(sp)
      CoreBlock(res,i,j)=sum;
4000167c:	325f383a 	mul	r15,r6,r9
40001680:	359d383a 	mul	r14,r6,r22
40001684:	da403c17 	ldw	r9,240(sp)
40001688:	dd803d17 	ldw	r22,244(sp)
4000168c:	320d383a 	mul	r6,r6,r8
40001690:	da003e17 	ldw	r8,248(sp)
40001694:	6a57383a 	mul	r11,r13,r9
40001698:	6d95383a 	mul	r10,r13,r22
4000169c:	6a13383a 	mul	r9,r13,r8
400016a0:	dd803f17 	ldw	r22,252(sp)
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
400016a4:	da004617 	ldw	r8,280(sp)
400016a8:	f94b883a 	add	r5,ra,r5
400016ac:	dfc04517 	ldw	ra,276(sp)
      CoreBlock(res,i,j)=sum;
400016b0:	6d9b383a 	mul	r13,r13,r22
  
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
400016b4:	a909883a 	add	r4,r21,r4
400016b8:	dd804317 	ldw	r22,268(sp)
400016bc:	dd404717 	ldw	r21,284(sp)
400016c0:	6085883a 	add	r2,r12,r2
400016c4:	fa19883a 	add	r12,ra,r8
400016c8:	dfc04817 	ldw	ra,288(sp)
400016cc:	da004217 	ldw	r8,264(sp)
400016d0:	a0c7883a 	add	r3,r20,r3
400016d4:	ada9883a 	add	r20,r21,r22
400016d8:	fa2b883a 	add	r21,ra,r8
400016dc:	dfc04417 	ldw	ra,272(sp)
400016e0:	da004917 	ldw	r8,292(sp)
400016e4:	e319883a 	add	r12,fp,r12
400016e8:	bd29883a 	add	r20,r23,r20
400016ec:	fa2d883a 	add	r22,ra,r8
400016f0:	dfc04017 	ldw	ra,256(sp)
400016f4:	da004117 	ldw	r8,260(sp)
400016f8:	3d8f883a 	add	r7,r7,r22
400016fc:	f94b883a 	add	r5,ra,r5
40001700:	4109883a 	add	r4,r8,r4
40001704:	dfc04a17 	ldw	ra,296(sp)
40001708:	da004b17 	ldw	r8,300(sp)
4000170c:	9d67883a 	add	r19,r19,r21
40001710:	f8c7883a 	add	r3,ra,r3
40001714:	4085883a 	add	r2,r8,r2
      CoreBlock(res,i,j)=sum;
40001718:	791f883a 	add	r15,r15,r4
4000171c:	9165883a 	add	r18,r18,r5
40001720:	70c7883a 	add	r3,r14,r3
40001724:	3085883a 	add	r2,r6,r2
40001728:	5b17883a 	add	r11,r11,r12
4000172c:	5515883a 	add	r10,r10,r20
40001730:	4cd3883a 	add	r9,r9,r19
40001734:	69db883a 	add	r13,r13,r7
    }
  return res;
40001738:	800d883a 	mov	r6,r16
4000173c:	d80b883a 	mov	r5,sp
40001740:	8809883a 	mov	r4,r17
  for(i=0; i<4; ++i)
    for(j=0; j<4; ++j) {
      sum=0;
      for(k=0; k<4; ++k)
        sum+=CoreBlock(a,i,k)*CoreBlock(b,k,j);
      CoreBlock(res,i,j)=sum;
40001744:	dc800815 	stw	r18,32(sp)
40001748:	dbc00915 	stw	r15,36(sp)
4000174c:	d8c00a15 	stw	r3,40(sp)
40001750:	d8800b15 	stw	r2,44(sp)
40001754:	dac00c15 	stw	r11,48(sp)
40001758:	da800d15 	stw	r10,52(sp)
4000175c:	da400e15 	stw	r9,56(sp)
40001760:	db400f15 	stw	r13,60(sp)
    }
  return res;
40001764:	000b8fc0 	call	4000b8fc <memcpy>
}

core_block hadamard(core_block coeff) {
  CONST core_block transform={{1,1,1,1,1,1,-1,-1,1,-1,-1,1,1,-1,1,-1}};
  return core_block_multiply(transform,core_block_multiply(coeff,transform));
}
40001768:	8805883a 	mov	r2,r17
4000176c:	dfc05d17 	ldw	ra,372(sp)
40001770:	df005c17 	ldw	fp,368(sp)
40001774:	ddc05b17 	ldw	r23,364(sp)
40001778:	dd805a17 	ldw	r22,360(sp)
4000177c:	dd405917 	ldw	r21,356(sp)
40001780:	dd005817 	ldw	r20,352(sp)
40001784:	dcc05717 	ldw	r19,348(sp)
40001788:	dc805617 	ldw	r18,344(sp)
4000178c:	dc405517 	ldw	r17,340(sp)
40001790:	dc005417 	ldw	r16,336(sp)
40001794:	dec06104 	addi	sp,sp,388
40001798:	f800283a 	ret

4000179c <input_open>:
extern int input_remain;
extern int ring_pos;
extern unsigned char ring_buf[RING_BUF_SIZE];

int input_open(char *filename) {
  if(input_fd) {
4000179c:	d0af9017 	ldw	r2,-16832(gp)
extern int input_size;
extern int input_remain;
extern int ring_pos;
extern unsigned char ring_buf[RING_BUF_SIZE];

int input_open(char *filename) {
400017a0:	defffe04 	addi	sp,sp,-8
400017a4:	df000015 	stw	fp,0(sp)
400017a8:	dfc00115 	stw	ra,4(sp)
400017ac:	d839883a 	mov	fp,sp
  if(input_fd) {
400017b0:	10000d26 	beq	r2,zero,400017e8 <input_open+0x4c>
    fprintf(stderr,"input_open: file already opened\n");
400017b4:	d0a00117 	ldw	r2,-32764(gp)
400017b8:	011000b4 	movhi	r4,16386
400017bc:	2134fe04 	addi	r4,r4,-11272
400017c0:	11c00317 	ldw	r7,12(r2)
400017c4:	01800804 	movi	r6,32
400017c8:	01400044 	movi	r5,1
400017cc:	000aed80 	call	4000aed8 <fwrite>
    return 0;
400017d0:	0005883a 	mov	r2,zero
  }
  fseek(input_fd,0,SEEK_END);
  input_size=ftell(input_fd);
  input_rewind();
  return input_size;
}
400017d4:	e037883a 	mov	sp,fp
400017d8:	dfc00117 	ldw	ra,4(sp)
400017dc:	df000017 	ldw	fp,0(sp)
400017e0:	dec00204 	addi	sp,sp,8
400017e4:	f800283a 	ret
int input_open(char *filename) {
  if(input_fd) {
    fprintf(stderr,"input_open: file already opened\n");
    return 0;
  }
  input_fd=fopen(filename,"rb");
400017e8:	015000b4 	movhi	r5,16386
400017ec:	29750704 	addi	r5,r5,-11236
400017f0:	0009f980 	call	40009f98 <fopen>

  const int in_buff_size = 4000000;
  char *out_buf[in_buff_size];
400017f4:	00ffc334 	movhi	r3,65292
400017f8:	18f6ff04 	addi	r3,r3,-9220
400017fc:	d8f7883a 	add	sp,sp,r3
  setvbuf(input_fd, out_buf, _IOFBF, in_buff_size);
40001800:	01c00f74 	movhi	r7,61
40001804:	1009883a 	mov	r4,r2
40001808:	39c24004 	addi	r7,r7,2304
4000180c:	000d883a 	mov	r6,zero
40001810:	d80b883a 	mov	r5,sp
int input_open(char *filename) {
  if(input_fd) {
    fprintf(stderr,"input_open: file already opened\n");
    return 0;
  }
  input_fd=fopen(filename,"rb");
40001814:	d0af9015 	stw	r2,-16832(gp)

  const int in_buff_size = 4000000;
  char *out_buf[in_buff_size];
  setvbuf(input_fd, out_buf, _IOFBF, in_buff_size);
40001818:	000c07c0 	call	4000c07c <setvbuf>


  if(!input_fd) {
4000181c:	d12f9017 	ldw	r4,-16832(gp)
40001820:	20001826 	beq	r4,zero,40001884 <input_open+0xe8>
    perror("input_open: cannot open file");
    return 0;
  }
  fseek(input_fd,0,SEEK_END);
40001824:	01800084 	movi	r6,2
40001828:	000b883a 	mov	r5,zero
4000182c:	000a6940 	call	4000a694 <fseek>
  input_size=ftell(input_fd);
40001830:	d12f9017 	ldw	r4,-16832(gp)
40001834:	000ab700 	call	4000ab70 <ftell>
  input_remain+=count;
  return count;
}

void input_rewind() {
  if(!input_fd) {
40001838:	d12f9017 	ldw	r4,-16832(gp)
  if(!input_fd) {
    perror("input_open: cannot open file");
    return 0;
  }
  fseek(input_fd,0,SEEK_END);
  input_size=ftell(input_fd);
4000183c:	d0af9215 	stw	r2,-16824(gp)
  input_remain+=count;
  return count;
}

void input_rewind() {
  if(!input_fd) {
40001840:	20001526 	beq	r4,zero,40001898 <input_open+0xfc>
    fprintf(stderr,"input_rewind called, but no file opened!\n");
    return;
  }
  fseek(input_fd,0,SEEK_SET);
40001844:	000d883a 	mov	r6,zero
40001848:	000b883a 	mov	r5,zero
4000184c:	000a6940 	call	4000a694 <fseek>
  input_rewind();
  return input_size;
}

int input_read(unsigned char *dest, int size) {
  int count=fread(dest,1,size,input_fd);
40001850:	d1ef9017 	ldw	r7,-16832(gp)
40001854:	011000f4 	movhi	r4,16387
40001858:	212b1a04 	addi	r4,r4,-21400
4000185c:	01880004 	movi	r6,8192
40001860:	01400044 	movi	r5,1
  if(!input_fd) {
    fprintf(stderr,"input_rewind called, but no file opened!\n");
    return;
  }
  fseek(input_fd,0,SEEK_SET);
  input_remain=0;
40001864:	d02f9115 	stw	zero,-16828(gp)
  input_rewind();
  return input_size;
}

int input_read(unsigned char *dest, int size) {
  int count=fread(dest,1,size,input_fd);
40001868:	000a2280 	call	4000a228 <fread>
  input_remain+=count;
4000186c:	d0ef9117 	ldw	r3,-16828(gp)
    return;
  }
  fseek(input_fd,0,SEEK_SET);
  input_remain=0;
  input_read(ring_buf,RING_BUF_SIZE);
  ring_pos=0;
40001870:	d02f9515 	stw	zero,-16812(gp)
  return input_size;
}

int input_read(unsigned char *dest, int size) {
  int count=fread(dest,1,size,input_fd);
  input_remain+=count;
40001874:	1885883a 	add	r2,r3,r2
40001878:	d0af9115 	stw	r2,-16828(gp)
    return 0;
  }
  fseek(input_fd,0,SEEK_END);
  input_size=ftell(input_fd);
  input_rewind();
  return input_size;
4000187c:	d0af9217 	ldw	r2,-16824(gp)
40001880:	003fd406 	br	400017d4 <__alt_data_end+0xc00017d4>
  char *out_buf[in_buff_size];
  setvbuf(input_fd, out_buf, _IOFBF, in_buff_size);


  if(!input_fd) {
    perror("input_open: cannot open file");
40001884:	011000b4 	movhi	r4,16386
40001888:	21350804 	addi	r4,r4,-11232
4000188c:	000bc4c0 	call	4000bc4c <perror>
    return 0;
40001890:	0005883a 	mov	r2,zero
40001894:	003fcf06 	br	400017d4 <__alt_data_end+0xc00017d4>
  return count;
}

void input_rewind() {
  if(!input_fd) {
    fprintf(stderr,"input_rewind called, but no file opened!\n");
40001898:	d0a00117 	ldw	r2,-32764(gp)
4000189c:	011000b4 	movhi	r4,16386
400018a0:	21351004 	addi	r4,r4,-11200
400018a4:	11c00317 	ldw	r7,12(r2)
400018a8:	01800a44 	movi	r6,41
400018ac:	01400044 	movi	r5,1
400018b0:	000aed80 	call	4000aed8 <fwrite>
400018b4:	003ff106 	br	4000187c <__alt_data_end+0xc000187c>

400018b8 <input_read>:
  input_rewind();
  return input_size;
}

int input_read(unsigned char *dest, int size) {
  int count=fread(dest,1,size,input_fd);
400018b8:	d1ef9017 	ldw	r7,-16832(gp)
  input_size=ftell(input_fd);
  input_rewind();
  return input_size;
}

int input_read(unsigned char *dest, int size) {
400018bc:	deffff04 	addi	sp,sp,-4
  int count=fread(dest,1,size,input_fd);
400018c0:	280d883a 	mov	r6,r5
400018c4:	01400044 	movi	r5,1
  input_size=ftell(input_fd);
  input_rewind();
  return input_size;
}

int input_read(unsigned char *dest, int size) {
400018c8:	dfc00015 	stw	ra,0(sp)
  int count=fread(dest,1,size,input_fd);
400018cc:	000a2280 	call	4000a228 <fread>
  input_remain+=count;
400018d0:	d0ef9117 	ldw	r3,-16828(gp)
400018d4:	1887883a 	add	r3,r3,r2
400018d8:	d0ef9115 	stw	r3,-16828(gp)
  return count;
}
400018dc:	dfc00017 	ldw	ra,0(sp)
400018e0:	dec00104 	addi	sp,sp,4
400018e4:	f800283a 	ret

400018e8 <input_rewind>:

void input_rewind() {
  if(!input_fd) {
400018e8:	d12f9017 	ldw	r4,-16832(gp)
400018ec:	20001326 	beq	r4,zero,4000193c <input_rewind+0x54>
  int count=fread(dest,1,size,input_fd);
  input_remain+=count;
  return count;
}

void input_rewind() {
400018f0:	deffff04 	addi	sp,sp,-4
  if(!input_fd) {
    fprintf(stderr,"input_rewind called, but no file opened!\n");
    return;
  }
  fseek(input_fd,0,SEEK_SET);
400018f4:	000d883a 	mov	r6,zero
400018f8:	000b883a 	mov	r5,zero
  int count=fread(dest,1,size,input_fd);
  input_remain+=count;
  return count;
}

void input_rewind() {
400018fc:	dfc00015 	stw	ra,0(sp)
  if(!input_fd) {
    fprintf(stderr,"input_rewind called, but no file opened!\n");
    return;
  }
  fseek(input_fd,0,SEEK_SET);
40001900:	000a6940 	call	4000a694 <fseek>
  input_rewind();
  return input_size;
}

int input_read(unsigned char *dest, int size) {
  int count=fread(dest,1,size,input_fd);
40001904:	d1ef9017 	ldw	r7,-16832(gp)
40001908:	011000f4 	movhi	r4,16387
4000190c:	212b1a04 	addi	r4,r4,-21400
40001910:	01880004 	movi	r6,8192
40001914:	01400044 	movi	r5,1
  if(!input_fd) {
    fprintf(stderr,"input_rewind called, but no file opened!\n");
    return;
  }
  fseek(input_fd,0,SEEK_SET);
  input_remain=0;
40001918:	d02f9115 	stw	zero,-16828(gp)
  input_rewind();
  return input_size;
}

int input_read(unsigned char *dest, int size) {
  int count=fread(dest,1,size,input_fd);
4000191c:	000a2280 	call	4000a228 <fread>
  input_remain+=count;
40001920:	d0ef9117 	ldw	r3,-16828(gp)
    return;
  }
  fseek(input_fd,0,SEEK_SET);
  input_remain=0;
  input_read(ring_buf,RING_BUF_SIZE);
  ring_pos=0;
40001924:	d02f9515 	stw	zero,-16812(gp)
  return input_size;
}

int input_read(unsigned char *dest, int size) {
  int count=fread(dest,1,size,input_fd);
  input_remain+=count;
40001928:	1885883a 	add	r2,r3,r2
4000192c:	d0af9115 	stw	r2,-16828(gp)
  }
  fseek(input_fd,0,SEEK_SET);
  input_remain=0;
  input_read(ring_buf,RING_BUF_SIZE);
  ring_pos=0;
}
40001930:	dfc00017 	ldw	ra,0(sp)
40001934:	dec00104 	addi	sp,sp,4
40001938:	f800283a 	ret
  return count;
}

void input_rewind() {
  if(!input_fd) {
    fprintf(stderr,"input_rewind called, but no file opened!\n");
4000193c:	d0a00117 	ldw	r2,-32764(gp)
40001940:	011000b4 	movhi	r4,16386
40001944:	21351004 	addi	r4,r4,-11200
40001948:	11c00317 	ldw	r7,12(r2)
4000194c:	01800a44 	movi	r6,41
40001950:	01400044 	movi	r5,1
40001954:	000aed81 	jmpi	4000aed8 <fwrite>

40001958 <input_close>:
  input_read(ring_buf,RING_BUF_SIZE);
  ring_pos=0;
}

void input_close() {
  if(!input_fd) return;
40001958:	d12f9017 	ldw	r4,-16832(gp)
4000195c:	20000726 	beq	r4,zero,4000197c <input_close+0x24>
  input_remain=0;
  input_read(ring_buf,RING_BUF_SIZE);
  ring_pos=0;
}

void input_close() {
40001960:	deffff04 	addi	sp,sp,-4
40001964:	dfc00015 	stw	ra,0(sp)
  if(!input_fd) return;
  fclose(input_fd);
40001968:	00098480 	call	40009848 <fclose>
  input_size=0;
4000196c:	d02f9215 	stw	zero,-16824(gp)
  input_fd=NULL;
40001970:	d02f9015 	stw	zero,-16832(gp)
}
40001974:	dfc00017 	ldw	ra,0(sp)
40001978:	dec00104 	addi	sp,sp,4
4000197c:	f800283a 	ret

40001980 <input_peek_bits>:
int nal_bit;


static inline int __peek_bits(int bit_count) {
  register unsigned int x=
    (nal_buf[nal_pos]<<24)|
40001980:	d0ef9317 	ldw	r3,-16820(gp)
40001984:	01d000f4 	movhi	r7,16387
40001988:	39f31a04 	addi	r7,r7,-13208
4000198c:	38cf883a 	add	r7,r7,r3
  nal_pos+=nal_bit>>3;
  nal_bit&=7;
}

int input_peek_bits(int bit_count) {
  return __peek_bits(bit_count);
40001990:	3a000003 	ldbu	r8,0(r7)
40001994:	38c00043 	ldbu	r3,1(r7)
40001998:	39800083 	ldbu	r6,2(r7)
4000199c:	394000c3 	ldbu	r5,3(r7)
400019a0:	4010963a 	slli	r8,r8,24
400019a4:	180e943a 	slli	r7,r3,16
400019a8:	300c923a 	slli	r6,r6,8
400019ac:	4146b03a 	or	r3,r8,r5
400019b0:	19c6b03a 	or	r3,r3,r7
400019b4:	198ab03a 	or	r5,r3,r6
400019b8:	d0ef9417 	ldw	r3,-16816(gp)
400019bc:	01c00804 	movi	r7,32
400019c0:	390fc83a 	sub	r7,r7,r4
400019c4:	01800044 	movi	r6,1
400019c8:	38c7c83a 	sub	r3,r7,r3
400019cc:	3104983a 	sll	r2,r6,r4
400019d0:	28c6d83a 	srl	r3,r5,r3
400019d4:	10bfffc4 	addi	r2,r2,-1
}
400019d8:	1884703a 	and	r2,r3,r2
400019dc:	f800283a 	ret

400019e0 <input_step_bits>:
     nal_buf[nal_pos+3];
  return (x>>(32-bit_count-nal_bit))&((1<<bit_count)-1);
}

static inline void __step_bits(int bit_count) {
  nal_bit+=bit_count;
400019e0:	d0af9417 	ldw	r2,-16816(gp)
  nal_pos+=nal_bit>>3;
400019e4:	d0ef9317 	ldw	r3,-16820(gp)
     nal_buf[nal_pos+3];
  return (x>>(32-bit_count-nal_bit))&((1<<bit_count)-1);
}

static inline void __step_bits(int bit_count) {
  nal_bit+=bit_count;
400019e8:	2089883a 	add	r4,r4,r2
  nal_pos+=nal_bit>>3;
400019ec:	2005d0fa 	srai	r2,r4,3
  nal_bit&=7;
400019f0:	210001cc 	andi	r4,r4,7
400019f4:	d12f9415 	stw	r4,-16816(gp)
  return (x>>(32-bit_count-nal_bit))&((1<<bit_count)-1);
}

static inline void __step_bits(int bit_count) {
  nal_bit+=bit_count;
  nal_pos+=nal_bit>>3;
400019f8:	1885883a 	add	r2,r3,r2
400019fc:	d0af9315 	stw	r2,-16820(gp)
40001a00:	f800283a 	ret

40001a04 <input_get_bits>:
int nal_bit;


static inline int __peek_bits(int bit_count) {
  register unsigned int x=
    (nal_buf[nal_pos]<<24)|
40001a04:	d26f9317 	ldw	r9,-16820(gp)
40001a08:	01d000f4 	movhi	r7,16387
40001a0c:	39f31a04 	addi	r7,r7,-13208
40001a10:	3a4f883a 	add	r7,r7,r9
    (nal_buf[nal_pos+1]<<16)|
    (nal_buf[nal_pos+2]<<8)|
     nal_buf[nal_pos+3];
  return (x>>(32-bit_count-nal_bit))&((1<<bit_count)-1);
40001a14:	3a800003 	ldbu	r10,0(r7)
40001a18:	39400043 	ldbu	r5,1(r7)
40001a1c:	39800083 	ldbu	r6,2(r7)
40001a20:	3a0000c3 	ldbu	r8,3(r7)
40001a24:	5014963a 	slli	r10,r10,24
40001a28:	280e943a 	slli	r7,r5,16
40001a2c:	d0ef9417 	ldw	r3,-16816(gp)
40001a30:	300c923a 	slli	r6,r6,8
40001a34:	520ab03a 	or	r5,r10,r8
40001a38:	29cab03a 	or	r5,r5,r7
40001a3c:	01c00804 	movi	r7,32
}

static inline void __step_bits(int bit_count) {
  nal_bit+=bit_count;
40001a40:	20d1883a 	add	r8,r4,r3
  register unsigned int x=
    (nal_buf[nal_pos]<<24)|
    (nal_buf[nal_pos+1]<<16)|
    (nal_buf[nal_pos+2]<<8)|
     nal_buf[nal_pos+3];
  return (x>>(32-bit_count-nal_bit))&((1<<bit_count)-1);
40001a44:	390fc83a 	sub	r7,r7,r4
40001a48:	298ab03a 	or	r5,r5,r6
40001a4c:	01800044 	movi	r6,1
40001a50:	3104983a 	sll	r2,r6,r4
40001a54:	38c7c83a 	sub	r3,r7,r3
}

static inline void __step_bits(int bit_count) {
  nal_bit+=bit_count;
  nal_pos+=nal_bit>>3;
40001a58:	4009d0fa 	srai	r4,r8,3
  register unsigned int x=
    (nal_buf[nal_pos]<<24)|
    (nal_buf[nal_pos+1]<<16)|
    (nal_buf[nal_pos+2]<<8)|
     nal_buf[nal_pos+3];
  return (x>>(32-bit_count-nal_bit))&((1<<bit_count)-1);
40001a5c:	28c6d83a 	srl	r3,r5,r3
}

static inline void __step_bits(int bit_count) {
  nal_bit+=bit_count;
  nal_pos+=nal_bit>>3;
  nal_bit&=7;
40001a60:	420001cc 	andi	r8,r8,7
  return (x>>(32-bit_count-nal_bit))&((1<<bit_count)-1);
}

static inline void __step_bits(int bit_count) {
  nal_bit+=bit_count;
  nal_pos+=nal_bit>>3;
40001a64:	2253883a 	add	r9,r4,r9
  register unsigned int x=
    (nal_buf[nal_pos]<<24)|
    (nal_buf[nal_pos+1]<<16)|
    (nal_buf[nal_pos+2]<<8)|
     nal_buf[nal_pos+3];
  return (x>>(32-bit_count-nal_bit))&((1<<bit_count)-1);
40001a68:	10bfffc4 	addi	r2,r2,-1
}

static inline void __step_bits(int bit_count) {
  nal_bit+=bit_count;
  nal_pos+=nal_bit>>3;
40001a6c:	d26f9315 	stw	r9,-16820(gp)
  nal_bit&=7;
40001a70:	d22f9415 	stw	r8,-16816(gp)

int input_get_bits(int bit_count) {
  int res=__peek_bits(bit_count);
  __step_bits(bit_count);
  return res;
}
40001a74:	1884703a 	and	r2,r3,r2
40001a78:	f800283a 	ret

40001a7c <input_get_one_bit>:

int input_get_one_bit() {
  int res=(nal_buf[nal_pos]>>(7-nal_bit))&1;
40001a7c:	d12f9317 	ldw	r4,-16820(gp)
40001a80:	009000f4 	movhi	r2,16387
40001a84:	10b31a04 	addi	r2,r2,-13208
40001a88:	d0ef9417 	ldw	r3,-16816(gp)
40001a8c:	1105883a 	add	r2,r2,r4
40001a90:	10800003 	ldbu	r2,0(r2)
40001a94:	014001c4 	movi	r5,7
40001a98:	28cdc83a 	sub	r6,r5,r3
40001a9c:	1185d83a 	sra	r2,r2,r6
  if(++nal_bit>7) {
40001aa0:	18c00044 	addi	r3,r3,1
40001aa4:	d0ef9415 	stw	r3,-16816(gp)
  __step_bits(bit_count);
  return res;
}

int input_get_one_bit() {
  int res=(nal_buf[nal_pos]>>(7-nal_bit))&1;
40001aa8:	1080004c 	andi	r2,r2,1
  if(++nal_bit>7) {
40001aac:	28c0030e 	bge	r5,r3,40001abc <input_get_one_bit+0x40>
    ++nal_pos;
40001ab0:	21000044 	addi	r4,r4,1
40001ab4:	d12f9315 	stw	r4,-16820(gp)
    nal_bit=0;
40001ab8:	d02f9415 	stw	zero,-16816(gp)
  }
  return res;
}
40001abc:	f800283a 	ret

40001ac0 <input_byte_aligned>:

int input_byte_aligned() {
  return (!nal_bit);
40001ac0:	d0af9417 	ldw	r2,-16816(gp)
}
40001ac4:	1005003a 	cmpeq	r2,r2,zero
40001ac8:	f800283a 	ret

40001acc <input_align_to_next_byte>:

void input_align_to_next_byte() {
  if(input_byte_aligned()) return;
40001acc:	d0af9417 	ldw	r2,-16816(gp)
40001ad0:	10000426 	beq	r2,zero,40001ae4 <input_align_to_next_byte+0x18>
  ++nal_pos;
40001ad4:	d0af9317 	ldw	r2,-16820(gp)
  nal_bit=0;
40001ad8:	d02f9415 	stw	zero,-16816(gp)
  return (!nal_bit);
}

void input_align_to_next_byte() {
  if(input_byte_aligned()) return;
  ++nal_pos;
40001adc:	10800044 	addi	r2,r2,1
40001ae0:	d0af9315 	stw	r2,-16820(gp)
40001ae4:	f800283a 	ret

40001ae8 <input_get_byte>:
  nal_bit=0;
}

int input_get_byte() {
  return nal_buf[nal_pos++];
40001ae8:	d0af9317 	ldw	r2,-16820(gp)
40001aec:	011000f4 	movhi	r4,16387
40001af0:	21331a04 	addi	r4,r4,-13208
40001af4:	10c00044 	addi	r3,r2,1
40001af8:	2085883a 	add	r2,r4,r2
40001afc:	d0ef9315 	stw	r3,-16820(gp)
}
40001b00:	10800003 	ldbu	r2,0(r2)
40001b04:	f800283a 	ret

40001b08 <h264_open>:
seq_parameter_set sps;
pic_parameter_set pps;
slice_header sh;


int h264_open(char *filename) {
40001b08:	defffb04 	addi	sp,sp,-20
40001b0c:	dfc00415 	stw	ra,16(sp)
40001b10:	dcc00315 	stw	r19,12(sp)
40001b14:	dc800215 	stw	r18,8(sp)
40001b18:	dc400115 	stw	r17,4(sp)
40001b1c:	dc000015 	stw	r16,0(sp)
  int have_sps=0,have_pps=0;
  if(!input_open(filename)) {
40001b20:	000179c0 	call	4000179c <input_open>
40001b24:	10004a26 	beq	r2,zero,40001c50 <h264_open+0x148>
    fprintf(stderr,"H.264 Error: Cannot open input file!\n");
    return 0;
  }
  init_code_tables();
  frame_no=0;
  while(get_next_nal_unit(&nalu)) {
40001b28:	04900134 	movhi	r18,16388
  int have_sps=0,have_pps=0;
  if(!input_open(filename)) {
    fprintf(stderr,"H.264 Error: Cannot open input file!\n");
    return 0;
  }
  init_code_tables();
40001b2c:	0005e300 	call	40005e30 <init_code_tables>
pic_parameter_set pps;
slice_header sh;


int h264_open(char *filename) {
  int have_sps=0,have_pps=0;
40001b30:	0027883a 	mov	r19,zero
  if(!input_open(filename)) {
    fprintf(stderr,"H.264 Error: Cannot open input file!\n");
    return 0;
  }
  init_code_tables();
  frame_no=0;
40001b34:	d02f9915 	stw	zero,-16796(gp)
  while(get_next_nal_unit(&nalu)) {
40001b38:	94b31a04 	addi	r18,r18,-13208
    switch(nalu.nal_unit_type) {
40001b3c:	04400144 	movi	r17,5
    fprintf(stderr,"H.264 Error: Cannot open input file!\n");
    return 0;
  }
  init_code_tables();
  frame_no=0;
  while(get_next_nal_unit(&nalu)) {
40001b40:	01100134 	movhi	r4,16388
40001b44:	21331a04 	addi	r4,r4,-13208
40001b48:	00039dc0 	call	400039dc <get_next_nal_unit>
40001b4c:	1021883a 	mov	r16,r2
40001b50:	10003026 	beq	r2,zero,40001c14 <h264_open+0x10c>
    switch(nalu.nal_unit_type) {
40001b54:	90800317 	ldw	r2,12(r18)
40001b58:	14401026 	beq	r2,r17,40001b9c <h264_open+0x94>
40001b5c:	88800d0e 	bge	r17,r2,40001b94 <h264_open+0x8c>
40001b60:	040001c4 	movi	r16,7
40001b64:	14001d26 	beq	r2,r16,40001bdc <h264_open+0xd4>
40001b68:	00c00204 	movi	r3,8
40001b6c:	10c0131e 	bne	r2,r3,40001bbc <h264_open+0xb4>
          decode_seq_parameter_set(&sps);
          have_sps=1;
        }
        break;
      case 8:  // picture parameter set //
        if(!have_sps)
40001b70:	98003b1e 	bne	r19,zero,40001c60 <h264_open+0x158>
          fprintf(stderr,"H.264 Warning: Picture parameter set without sequence parameter set, skipping!\n");
40001b74:	d0a00117 	ldw	r2,-32764(gp)
40001b78:	011000b4 	movhi	r4,16386
40001b7c:	21353404 	addi	r4,r4,-11056
40001b80:	11c00317 	ldw	r7,12(r2)
40001b84:	018013c4 	movi	r6,79
40001b88:	01400044 	movi	r5,1
40001b8c:	000aed80 	call	4000aed8 <fwrite>
40001b90:	003feb06 	br	40001b40 <__alt_data_end+0xc0001b40>
    return 0;
  }
  init_code_tables();
  frame_no=0;
  while(get_next_nal_unit(&nalu)) {
    switch(nalu.nal_unit_type) {
40001b94:	00c00044 	movi	r3,1
40001b98:	10c0081e 	bne	r2,r3,40001bbc <h264_open+0xb4>
          mpi=alloc_mode_pred_info(sps.PicWidthInSamples,sps.FrameHeightInSamples);
          return (sps.FrameHeightInSamples<<16)|sps.PicWidthInSamples;
        }
        break;
      case 1: case 5:  // coded slice of a picture //
        fprintf(stderr,"H.264 Warning: Pictures sent before headers!\n");
40001b9c:	d0a00117 	ldw	r2,-32764(gp)
40001ba0:	011000b4 	movhi	r4,16386
40001ba4:	21355604 	addi	r4,r4,-10920
40001ba8:	11c00317 	ldw	r7,12(r2)
40001bac:	01800b44 	movi	r6,45
40001bb0:	01400044 	movi	r5,1
40001bb4:	000aed80 	call	4000aed8 <fwrite>
40001bb8:	003fe106 	br	40001b40 <__alt_data_end+0xc0001b40>
        break;
      default:  // unsupported NAL unit type //
        fprintf(stderr,"H.264 Warning: NAL unit with unsupported type, skipping!\n");
40001bbc:	d0a00117 	ldw	r2,-32764(gp)
40001bc0:	011000b4 	movhi	r4,16386
40001bc4:	21356204 	addi	r4,r4,-10872
40001bc8:	11c00317 	ldw	r7,12(r2)
40001bcc:	01800e44 	movi	r6,57
40001bd0:	01400044 	movi	r5,1
40001bd4:	000aed80 	call	4000aed8 <fwrite>
40001bd8:	003fd906 	br	40001b40 <__alt_data_end+0xc0001b40>
  init_code_tables();
  frame_no=0;
  while(get_next_nal_unit(&nalu)) {
    switch(nalu.nal_unit_type) {
      case 7:  // sequence parameter set //
        if(have_sps)
40001bdc:	98000826 	beq	r19,zero,40001c00 <h264_open+0xf8>
          fprintf(stderr,"H.264 Warning: Duplicate sequence parameter set, skipping!\n");
40001be0:	d0a00117 	ldw	r2,-32764(gp)
40001be4:	011000b4 	movhi	r4,16386
40001be8:	21352504 	addi	r4,r4,-11116
40001bec:	11c00317 	ldw	r7,12(r2)
40001bf0:	01800ec4 	movi	r6,59
40001bf4:	01400044 	movi	r5,1
40001bf8:	000aed80 	call	4000aed8 <fwrite>
40001bfc:	003fd006 	br	40001b40 <__alt_data_end+0xc0001b40>
        else {
          decode_seq_parameter_set(&sps);
40001c00:	01100134 	movhi	r4,16388
40001c04:	21136c04 	addi	r4,r4,19888
          have_sps=1;
40001c08:	04c00044 	movi	r19,1
    switch(nalu.nal_unit_type) {
      case 7:  // sequence parameter set //
        if(have_sps)
          fprintf(stderr,"H.264 Warning: Duplicate sequence parameter set, skipping!\n");
        else {
          decode_seq_parameter_set(&sps);
40001c0c:	00044f80 	call	400044f8 <decode_seq_parameter_set>
40001c10:	003fcb06 	br	40001b40 <__alt_data_end+0xc0001b40>
        break;
      default:  // unsupported NAL unit type //
        fprintf(stderr,"H.264 Warning: NAL unit with unsupported type, skipping!\n");
    }
  }
  fprintf(stderr,"H.264 Error: Unexpected end of file!\n");
40001c14:	011000b4 	movhi	r4,16386
40001c18:	21357104 	addi	r4,r4,-10812
40001c1c:	d0a00117 	ldw	r2,-32764(gp)
40001c20:	01800944 	movi	r6,37
40001c24:	01400044 	movi	r5,1
40001c28:	11c00317 	ldw	r7,12(r2)
40001c2c:	000aed80 	call	4000aed8 <fwrite>
  return 0;
}
40001c30:	8005883a 	mov	r2,r16
40001c34:	dfc00417 	ldw	ra,16(sp)
40001c38:	dcc00317 	ldw	r19,12(sp)
40001c3c:	dc800217 	ldw	r18,8(sp)
40001c40:	dc400117 	ldw	r17,4(sp)
40001c44:	dc000017 	ldw	r16,0(sp)
40001c48:	dec00504 	addi	sp,sp,20
40001c4c:	f800283a 	ret


int h264_open(char *filename) {
  int have_sps=0,have_pps=0;
  if(!input_open(filename)) {
    fprintf(stderr,"H.264 Error: Cannot open input file!\n");
40001c50:	011000b4 	movhi	r4,16386
40001c54:	1021883a 	mov	r16,r2
40001c58:	21351b04 	addi	r4,r4,-11156
40001c5c:	003fef06 	br	40001c1c <__alt_data_end+0xc0001c1c>
        if(!have_sps)
          fprintf(stderr,"H.264 Warning: Picture parameter set without sequence parameter set, skipping!\n");
        else if(have_pps)
          fprintf(stderr,"H.264 Warning: Duplicate picture parameter set, skipping!\n");
        else {
          decode_pic_parameter_set(&pps);
40001c60:	01100134 	movhi	r4,16388
40001c64:	21334104 	addi	r4,r4,-13052
40001c68:	00046ac0 	call	400046ac <decode_pic_parameter_set>
          have_pps=1;
          if(check_unsupported_features(&sps,&pps)) {
40001c6c:	04500134 	movhi	r17,16388
40001c70:	8c536c04 	addi	r17,r17,19888
40001c74:	01500134 	movhi	r5,16388
40001c78:	29734104 	addi	r5,r5,-13052
40001c7c:	8809883a 	mov	r4,r17
40001c80:	00048ac0 	call	400048ac <check_unsupported_features>
40001c84:	10000a26 	beq	r2,zero,40001cb0 <h264_open+0x1a8>
            fprintf(stderr,"H.264 Error: Unsupported features found in headers!\n");
40001c88:	d0a00117 	ldw	r2,-32764(gp)
40001c8c:	011000b4 	movhi	r4,16386
40001c90:	21354804 	addi	r4,r4,-10976
40001c94:	11c00317 	ldw	r7,12(r2)
40001c98:	01800d04 	movi	r6,52
40001c9c:	01400044 	movi	r5,1
            input_close();
            return 0;
40001ca0:	0021883a 	mov	r16,zero
          fprintf(stderr,"H.264 Warning: Duplicate picture parameter set, skipping!\n");
        else {
          decode_pic_parameter_set(&pps);
          have_pps=1;
          if(check_unsupported_features(&sps,&pps)) {
            fprintf(stderr,"H.264 Error: Unsupported features found in headers!\n");
40001ca4:	000aed80 	call	4000aed8 <fwrite>
            input_close();
40001ca8:	00019580 	call	40001958 <input_close>
40001cac:	003fe006 	br	40001c30 <__alt_data_end+0xc0001c30>
            return 0;
          }
          this=alloc_frame(sps.PicWidthInSamples,sps.FrameHeightInSamples);
40001cb0:	89411717 	ldw	r5,1116(r17)
40001cb4:	89011317 	ldw	r4,1100(r17)
40001cb8:	0000c8c0 	call	40000c8c <alloc_frame>
          ref=alloc_frame(sps.PicWidthInSamples,sps.FrameHeightInSamples);
40001cbc:	89411717 	ldw	r5,1116(r17)
40001cc0:	89011317 	ldw	r4,1100(r17)
          if(check_unsupported_features(&sps,&pps)) {
            fprintf(stderr,"H.264 Error: Unsupported features found in headers!\n");
            input_close();
            return 0;
          }
          this=alloc_frame(sps.PicWidthInSamples,sps.FrameHeightInSamples);
40001cc4:	d0af9815 	stw	r2,-16800(gp)
          ref=alloc_frame(sps.PicWidthInSamples,sps.FrameHeightInSamples);
40001cc8:	0000c8c0 	call	40000c8c <alloc_frame>

          send_alloc_frame(7,sps.PicWidthInSamples,sps.FrameHeightInSamples);
40001ccc:	89811717 	ldw	r6,1116(r17)
40001cd0:	89411317 	ldw	r5,1100(r17)
40001cd4:	8009883a 	mov	r4,r16
            fprintf(stderr,"H.264 Error: Unsupported features found in headers!\n");
            input_close();
            return 0;
          }
          this=alloc_frame(sps.PicWidthInSamples,sps.FrameHeightInSamples);
          ref=alloc_frame(sps.PicWidthInSamples,sps.FrameHeightInSamples);
40001cd8:	d0af9715 	stw	r2,-16804(gp)

          send_alloc_frame(7,sps.PicWidthInSamples,sps.FrameHeightInSamples);
40001cdc:	0004a880 	call	40004a88 <send_alloc_frame>
          //simulate_buffer_node();

          mpi=alloc_mode_pred_info(sps.PicWidthInSamples,sps.FrameHeightInSamples);
40001ce0:	89011317 	ldw	r4,1100(r17)
40001ce4:	89411717 	ldw	r5,1116(r17)
40001ce8:	000265c0 	call	4000265c <alloc_mode_pred_info>
          return (sps.FrameHeightInSamples<<16)|sps.PicWidthInSamples;
40001cec:	89011717 	ldw	r4,1116(r17)
40001cf0:	88c11317 	ldw	r3,1100(r17)
          ref=alloc_frame(sps.PicWidthInSamples,sps.FrameHeightInSamples);

          send_alloc_frame(7,sps.PicWidthInSamples,sps.FrameHeightInSamples);
          //simulate_buffer_node();

          mpi=alloc_mode_pred_info(sps.PicWidthInSamples,sps.FrameHeightInSamples);
40001cf4:	d0af9615 	stw	r2,-16808(gp)
          return (sps.FrameHeightInSamples<<16)|sps.PicWidthInSamples;
40001cf8:	2008943a 	slli	r4,r4,16
40001cfc:	20e0b03a 	or	r16,r4,r3
40001d00:	003fcb06 	br	40001c30 <__alt_data_end+0xc0001c30>

40001d04 <h264_decode_frame>:
  }
  fprintf(stderr,"H.264 Error: Unexpected end of file!\n");
  return 0;
}

frame *h264_decode_frame(int verbose) {
40001d04:	defff704 	addi	sp,sp,-36
40001d08:	dcc00615 	stw	r19,24(sp)
40001d0c:	dc400415 	stw	r17,16(sp)
40001d10:	dc000315 	stw	r16,12(sp)
	  //printf("file: %s, line : %d\n",__FILE__, __LINE__);
    if(nalu.nal_unit_type==1 || nalu.nal_unit_type==5) {
    	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
      perf_enter("slice decoding");
      ++frame_no;
      decode_slice_header(&sh,&sps,&pps,&nalu);
40001d14:	04500134 	movhi	r17,16388
  return 0;
}

frame *h264_decode_frame(int verbose) {
	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
  while(get_next_nal_unit(&nalu)){
40001d18:	04100134 	movhi	r16,16388
      ++frame_no;
      decode_slice_header(&sh,&sps,&pps,&nalu);
      //printf("file: %s, line : %d\n",__FILE__, __LINE__);
      if(verbose){
    	  //printf("Frame%4d: %s",frame_no,_str_slice_type(sh.slice_type));
    	  if(frame_no%10==0){
40001d1c:	04d000b4 	movhi	r19,16386
  }
  fprintf(stderr,"H.264 Error: Unexpected end of file!\n");
  return 0;
}

frame *h264_decode_frame(int verbose) {
40001d20:	dc800515 	stw	r18,20(sp)
40001d24:	dfc00815 	stw	ra,32(sp)
40001d28:	dd000715 	stw	r20,28(sp)
40001d2c:	2025883a 	mov	r18,r4
	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
  while(get_next_nal_unit(&nalu)){
40001d30:	84331a04 	addi	r16,r16,-13208
	  //printf("file: %s, line : %d\n",__FILE__, __LINE__);
    if(nalu.nal_unit_type==1 || nalu.nal_unit_type==5) {
    	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
      perf_enter("slice decoding");
      ++frame_no;
      decode_slice_header(&sh,&sps,&pps,&nalu);
40001d34:	8c731f04 	addi	r17,r17,-13188
      //printf("file: %s, line : %d\n",__FILE__, __LINE__);
      if(verbose){
    	  //printf("Frame%4d: %s",frame_no,_str_slice_type(sh.slice_type));
    	  if(frame_no%10==0){
40001d38:	9cc3f504 	addi	r19,r19,4052
  return 0;
}

frame *h264_decode_frame(int verbose) {
	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
  while(get_next_nal_unit(&nalu)){
40001d3c:	01100134 	movhi	r4,16388
40001d40:	21331a04 	addi	r4,r4,-13208
40001d44:	00039dc0 	call	400039dc <get_next_nal_unit>
40001d48:	10001126 	beq	r2,zero,40001d90 <h264_decode_frame+0x8c>
	  //printf("file: %s, line : %d\n",__FILE__, __LINE__);
    if(nalu.nal_unit_type==1 || nalu.nal_unit_type==5) {
40001d4c:	80c00317 	ldw	r3,12(r16)
40001d50:	00bffec4 	movi	r2,-5
40001d54:	01400044 	movi	r5,1
40001d58:	1884703a 	and	r2,r3,r2
40001d5c:	11401426 	beq	r2,r5,40001db0 <h264_decode_frame+0xac>
        //simulate_buffer_node(/*this, ref*/);
        temp=this; this=ref; ref=temp;

        return temp;
      }
    } else if(nalu.nal_unit_type!=7 && nalu.nal_unit_type!=8)
40001d60:	18fffe44 	addi	r3,r3,-7
40001d64:	28fff52e 	bgeu	r5,r3,40001d3c <__alt_data_end+0xc0001d3c>
      fprintf(stderr,"H.264 Warning: unexpected or unsupported NAL unit type!\n");
40001d68:	d0a00117 	ldw	r2,-32764(gp)
40001d6c:	011000b4 	movhi	r4,16386
40001d70:	21358f04 	addi	r4,r4,-10692
40001d74:	11c00317 	ldw	r7,12(r2)
40001d78:	01800e04 	movi	r6,56
40001d7c:	000aed80 	call	4000aed8 <fwrite>
  return 0;
}

frame *h264_decode_frame(int verbose) {
	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
  while(get_next_nal_unit(&nalu)){
40001d80:	01100134 	movhi	r4,16388
40001d84:	21331a04 	addi	r4,r4,-13208
40001d88:	00039dc0 	call	400039dc <get_next_nal_unit>
40001d8c:	103fef1e 	bne	r2,zero,40001d4c <__alt_data_end+0xc0001d4c>
      }
    } else if(nalu.nal_unit_type!=7 && nalu.nal_unit_type!=8)
      fprintf(stderr,"H.264 Warning: unexpected or unsupported NAL unit type!\n");
  }
  return NULL;
}
40001d90:	dfc00817 	ldw	ra,32(sp)
40001d94:	dd000717 	ldw	r20,28(sp)
40001d98:	dcc00617 	ldw	r19,24(sp)
40001d9c:	dc800517 	ldw	r18,20(sp)
40001da0:	dc400417 	ldw	r17,16(sp)
40001da4:	dc000317 	ldw	r16,12(sp)
40001da8:	dec00904 	addi	sp,sp,36
40001dac:	f800283a 	ret
	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
  while(get_next_nal_unit(&nalu)){
	  //printf("file: %s, line : %d\n",__FILE__, __LINE__);
    if(nalu.nal_unit_type==1 || nalu.nal_unit_type==5) {
    	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
      perf_enter("slice decoding");
40001db0:	011000b4 	movhi	r4,16386
40001db4:	21357b04 	addi	r4,r4,-10772
40001db8:	00055880 	call	40005588 <perf_enter>
      ++frame_no;
40001dbc:	d0af9917 	ldw	r2,-16796(gp)
      decode_slice_header(&sh,&sps,&pps,&nalu);
40001dc0:	01d00134 	movhi	r7,16388
40001dc4:	01900134 	movhi	r6,16388
40001dc8:	01500134 	movhi	r5,16388
40001dcc:	01100134 	movhi	r4,16388
  while(get_next_nal_unit(&nalu)){
	  //printf("file: %s, line : %d\n",__FILE__, __LINE__);
    if(nalu.nal_unit_type==1 || nalu.nal_unit_type==5) {
    	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
      perf_enter("slice decoding");
      ++frame_no;
40001dd0:	10800044 	addi	r2,r2,1
      decode_slice_header(&sh,&sps,&pps,&nalu);
40001dd4:	39f31a04 	addi	r7,r7,-13208
40001dd8:	31b34104 	addi	r6,r6,-13052
40001ddc:	29536c04 	addi	r5,r5,19888
40001de0:	21331f04 	addi	r4,r4,-13188
  while(get_next_nal_unit(&nalu)){
	  //printf("file: %s, line : %d\n",__FILE__, __LINE__);
    if(nalu.nal_unit_type==1 || nalu.nal_unit_type==5) {
    	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
      perf_enter("slice decoding");
      ++frame_no;
40001de4:	d0af9915 	stw	r2,-16796(gp)
      decode_slice_header(&sh,&sps,&pps,&nalu);
40001de8:	00073c80 	call	400073c8 <decode_slice_header>
      //printf("file: %s, line : %d\n",__FILE__, __LINE__);
      if(verbose){
40001dec:	90000a26 	beq	r18,zero,40001e18 <h264_decode_frame+0x114>
    	  //printf("Frame%4d: %s",frame_no,_str_slice_type(sh.slice_type));
    	  if(frame_no%10==0){
40001df0:	d52f9917 	ldw	r20,-16796(gp)
40001df4:	00c003c4 	movi	r3,15
40001df8:	a0800294 	ori	r2,r20,10
40001dfc:	18801336 	bltu	r3,r2,40001e4c <h264_decode_frame+0x148>
40001e00:	a004913a 	slli	r2,r20,4
40001e04:	10800294 	ori	r2,r2,10
40001e08:	14c5883a 	add	r2,r2,r19
40001e0c:	10800003 	ldbu	r2,0(r2)
40001e10:	108002a4 	muli	r2,r2,10
40001e14:	a0801226 	beq	r20,r2,40001e60 <h264_decode_frame+0x15c>
    		  printf("nf=%d\n", frame_no);
    	  }
      }
      if(sh.slice_type!=I_SLICE && sh.slice_type!=P_SLICE)
40001e18:	89000117 	ldw	r4,4(r17)
40001e1c:	00bfff44 	movi	r2,-3
40001e20:	2084703a 	and	r2,r4,r2
40001e24:	10001626 	beq	r2,zero,40001e80 <h264_decode_frame+0x17c>
        fprintf(stderr,"H.264 Warning: Unsupported slice type (%s), skipping!\n",
40001e28:	d0a00117 	ldw	r2,-32764(gp)
40001e2c:	15000317 	ldw	r20,12(r2)
40001e30:	00078dc0 	call	400078dc <_str_slice_type>
40001e34:	015000b4 	movhi	r5,16386
40001e38:	100d883a 	mov	r6,r2
40001e3c:	29758104 	addi	r5,r5,-10748
40001e40:	a009883a 	mov	r4,r20
40001e44:	0009fd80 	call	40009fd8 <fprintf>
    	  //printf("Frame%4d: %s",frame_no,_str_slice_type(sh.slice_type));
    	  if(frame_no%10==0){
    		  printf("nf=%d\n", frame_no);
    	  }
      }
      if(sh.slice_type!=I_SLICE && sh.slice_type!=P_SLICE)
40001e48:	003fbc06 	br	40001d3c <__alt_data_end+0xc0001d3c>
      ++frame_no;
      decode_slice_header(&sh,&sps,&pps,&nalu);
      //printf("file: %s, line : %d\n",__FILE__, __LINE__);
      if(verbose){
    	  //printf("Frame%4d: %s",frame_no,_str_slice_type(sh.slice_type));
    	  if(frame_no%10==0){
40001e4c:	01400284 	movi	r5,10
40001e50:	a009883a 	mov	r4,r20
40001e54:	000797c0 	call	4000797c <__divsi3>
40001e58:	108002a4 	muli	r2,r2,10
40001e5c:	a0bfee1e 	bne	r20,r2,40001e18 <__alt_data_end+0xc0001e18>
    		  printf("nf=%d\n", frame_no);
40001e60:	011000b4 	movhi	r4,16386
40001e64:	21357f04 	addi	r4,r4,-10756
40001e68:	a00b883a 	mov	r5,r20
40001e6c:	000bc900 	call	4000bc90 <printf>
    	  }
      }
      if(sh.slice_type!=I_SLICE && sh.slice_type!=P_SLICE)
40001e70:	89000117 	ldw	r4,4(r17)
40001e74:	00bfff44 	movi	r2,-3
40001e78:	2084703a 	and	r2,r4,r2
40001e7c:	103fea1e 	bne	r2,zero,40001e28 <__alt_data_end+0xc0001e28>
        fprintf(stderr,"H.264 Warning: Unsupported slice type (%s), skipping!\n",
                       _str_slice_type(sh.slice_type));
      else {
        frame *temp;
        int the_QP = decode_slice_data(&sh,&sps,&pps,&nalu,this,ref,mpi);
40001e80:	d0af9617 	ldw	r2,-16808(gp)
40001e84:	01d00134 	movhi	r7,16388
40001e88:	01900134 	movhi	r6,16388
40001e8c:	d8800215 	stw	r2,8(sp)
40001e90:	d0af9717 	ldw	r2,-16804(gp)
40001e94:	01100134 	movhi	r4,16388
40001e98:	01500134 	movhi	r5,16388
40001e9c:	d8800115 	stw	r2,4(sp)
40001ea0:	d0af9817 	ldw	r2,-16800(gp)
40001ea4:	39f31a04 	addi	r7,r7,-13208
40001ea8:	31b34104 	addi	r6,r6,-13052
40001eac:	21331f04 	addi	r4,r4,-13188
40001eb0:	29536c04 	addi	r5,r5,19888
40001eb4:	d8800015 	stw	r2,0(sp)
40001eb8:	0005f300 	call	40005f30 <decode_slice_data>




        send_start_new_frame(7, the_QP);
40001ebc:	100b883a 	mov	r5,r2
40001ec0:	010001c4 	movi	r4,7
40001ec4:	0004a280 	call	40004a28 <send_start_new_frame>
        //simulate_buffer_node(/*this, ref*/);
        temp=this; this=ref; ref=temp;
40001ec8:	d0ef9817 	ldw	r3,-16800(gp)
40001ecc:	d12f9717 	ldw	r4,-16804(gp)

        return temp;
40001ed0:	1805883a 	mov	r2,r3



        send_start_new_frame(7, the_QP);
        //simulate_buffer_node(/*this, ref*/);
        temp=this; this=ref; ref=temp;
40001ed4:	d12f9815 	stw	r4,-16800(gp)
40001ed8:	d0ef9715 	stw	r3,-16804(gp)

        return temp;
40001edc:	003fac06 	br	40001d90 <__alt_data_end+0xc0001d90>

40001ee0 <h264_rewind>:
      fprintf(stderr,"H.264 Warning: unexpected or unsupported NAL unit type!\n");
  }
  return NULL;
}

void h264_rewind() {
40001ee0:	deffff04 	addi	sp,sp,-4
40001ee4:	dfc00015 	stw	ra,0(sp)
  input_rewind();
40001ee8:	00018e80 	call	400018e8 <input_rewind>
  frame_no=0;
40001eec:	d02f9915 	stw	zero,-16796(gp)
}
40001ef0:	dfc00017 	ldw	ra,0(sp)
40001ef4:	dec00104 	addi	sp,sp,4
40001ef8:	f800283a 	ret

40001efc <h264_close>:

void h264_close() {
  free_frame(this);
40001efc:	d12f9817 	ldw	r4,-16800(gp)
void h264_rewind() {
  input_rewind();
  frame_no=0;
}

void h264_close() {
40001f00:	deffff04 	addi	sp,sp,-4
40001f04:	dfc00015 	stw	ra,0(sp)
  free_frame(this);
40001f08:	0000d380 	call	40000d38 <free_frame>
  free_frame(ref);
40001f0c:	d12f9717 	ldw	r4,-16804(gp)
40001f10:	0000d380 	call	40000d38 <free_frame>
  free_mode_pred_info(mpi);
40001f14:	d12f9617 	ldw	r4,-16808(gp)
40001f18:	00028880 	call	40002888 <free_mode_pred_info>
  input_close();
}
40001f1c:	dfc00017 	ldw	ra,0(sp)
40001f20:	dec00104 	addi	sp,sp,4

void h264_close() {
  free_frame(this);
  free_frame(ref);
  free_mode_pred_info(mpi);
  input_close();
40001f24:	00019581 	jmpi	40001958 <input_close>

40001f28 <sd_fwrite>:
  return frame_no;
}


///////////////////////////////////////////////////////////////////////////////
int sd_fwrite(const char *data, int count, short int fileh){
40001f28:	defffb04 	addi	sp,sp,-20
40001f2c:	dcc00315 	stw	r19,12(sp)
40001f30:	dfc00415 	stw	ra,16(sp)
40001f34:	dc800215 	stw	r18,8(sp)
40001f38:	dc400115 	stw	r17,4(sp)
40001f3c:	dc000015 	stw	r16,0(sp)
40001f40:	2827883a 	mov	r19,r5
	for(int i = 0; i < count; i++){
40001f44:	01400a0e 	bge	zero,r5,40001f70 <sd_fwrite+0x48>
40001f48:	347fffcc 	andi	r17,r6,65535
40001f4c:	8c60001c 	xori	r17,r17,32768
40001f50:	2021883a 	mov	r16,r4
40001f54:	8c600004 	addi	r17,r17,-32768
40001f58:	2165883a 	add	r18,r4,r5
		alt_up_sd_card_write(fileh, data[i]);
40001f5c:	81400007 	ldb	r5,0(r16)
40001f60:	8809883a 	mov	r4,r17
40001f64:	84000044 	addi	r16,r16,1
40001f68:	001ba480 	call	4001ba48 <alt_up_sd_card_write>
}


///////////////////////////////////////////////////////////////////////////////
int sd_fwrite(const char *data, int count, short int fileh){
	for(int i = 0; i < count; i++){
40001f6c:	84bffb1e 	bne	r16,r18,40001f5c <__alt_data_end+0xc0001f5c>
		alt_up_sd_card_write(fileh, data[i]);
	}
	return count;
}
40001f70:	9805883a 	mov	r2,r19
40001f74:	dfc00417 	ldw	ra,16(sp)
40001f78:	dcc00317 	ldw	r19,12(sp)
40001f7c:	dc800217 	ldw	r18,8(sp)
40001f80:	dc400117 	ldw	r17,4(sp)
40001f84:	dc000017 	ldw	r16,0(sp)
40001f88:	dec00504 	addi	sp,sp,20
40001f8c:	f800283a 	ret

40001f90 <main>:
  FILE *out;
  FILE *tst;
  frame *f;
  int info;

  printf("initializing the network!\n");
40001f90:	011000b4 	movhi	r4,16386
		alt_up_sd_card_write(fileh, data[i]);
	}
	return count;
}

int main(int argc, char *argv[]) {
40001f94:	deff7304 	addi	sp,sp,-564
  FILE *out;
  FILE *tst;
  frame *f;
  int info;

  printf("initializing the network!\n");
40001f98:	21359e04 	addi	r4,r4,-10632
		alt_up_sd_card_write(fileh, data[i]);
	}
	return count;
}

int main(int argc, char *argv[]) {
40001f9c:	dfc08c15 	stw	ra,560(sp)
40001fa0:	dcc08915 	stw	r19,548(sp)
40001fa4:	dc808815 	stw	r18,544(sp)
40001fa8:	dd408b15 	stw	r21,556(sp)
40001fac:	dd008a15 	stw	r20,552(sp)
40001fb0:	dc408715 	stw	r17,540(sp)
40001fb4:	dc008615 	stw	r16,536(sp)
  int info;

  printf("initializing the network!\n");


  noc_init();
40001fb8:	0025883a 	mov	r18,zero
40001fbc:	04c031c4 	movi	r19,199
  FILE *out;
  FILE *tst;
  frame *f;
  int info;

  printf("initializing the network!\n");
40001fc0:	000bdac0 	call	4000bdac <puts>


  noc_init();
40001fc4:	0003eb00 	call	40003eb0 <noc_init>
40001fc8:	9c809b0e 	bge	r19,r18,40002238 <main+0x2a8>
40001fcc:	9023883a 	mov	r17,r18
40001fd0:	0021883a 	mov	r16,zero
			else{

				uint32_t pixel1 = 0;
				uint32_t pixel2 = 0;

				if(j < 50){
40001fd4:	05000c44 	movi	r20,49
					pixel1 = pixel2 = 82<<16 | 90<<8 | 240;
				}else if(j < 100){
40001fd8:	054018c4 	movi	r21,99
			else{

				uint32_t pixel1 = 0;
				uint32_t pixel2 = 0;

				if(j < 50){
40001fdc:	a400680e 	bge	r20,r16,40002180 <main+0x1f0>
					pixel1 = pixel2 = 82<<16 | 90<<8 | 240;
				}else if(j < 100){
40001fe0:	ac00630e 	bge	r21,r16,40002170 <main+0x1e0>
					pixel1 = pixel2 = 145<<16 | 54<<8 | 34;
				}else if(j < 150){
40001fe4:	00802544 	movi	r2,149
40001fe8:	14006916 	blt	r2,r16,40002190 <main+0x200>
40001fec:	014a7c34 	movhi	r5,10736
40001ff0:	01bc1bb4 	movhi	r6,61550
40001ff4:	295b8a44 	addi	r5,r5,28201

				uint32_t upper = pixel1<<8 | pixel2>>16;
				uint32_t lower = pixel2<<16 | (buffer_addr&0xFFFF);


				send_flit(8, upper, lower  , 1);
40001ff8:	344cb03a 	or	r6,r6,r17
40001ffc:	01c00044 	movi	r7,1
40002000:	01000204 	movi	r4,8
40002004:	0003f100 	call	40003f10 <send_flit>


  //write test image to display
  for(int luma = 128; luma < 129; luma++){
	  for(int i = 0; i < 320; i+=2){
		for(int j = 0; j < 200; j++){
40002008:	84000044 	addi	r16,r16,1
4000200c:	00803204 	movi	r2,200
40002010:	8c405004 	addi	r17,r17,320
40002014:	80bff11e 	bne	r16,r2,40001fdc <__alt_data_end+0xc0001fdc>
  noc_init();


  //write test image to display
  for(int luma = 128; luma < 129; luma++){
	  for(int i = 0; i < 320; i+=2){
40002018:	94800084 	addi	r18,r18,2
4000201c:	00805004 	movi	r2,320
40002020:	90bfe91e 	bne	r18,r2,40001fc8 <__alt_data_end+0xc0001fc8>
  //alt_up_sd_card_dev *sd_card_dev = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
  //int is_present = alt_up_sd_card_is_Present();
  //int is_fat     = alt_up_sd_card_is_FAT16();
  //printf("test... 1234\n");

  info=h264_open("/mnt/host/in.264");
40002024:	011000b4 	movhi	r4,16386
40002028:	2135a504 	addi	r4,r4,-10604
4000202c:	0001b080 	call	40001b08 <h264_open>
40002030:	102b883a 	mov	r21,r2
  if(!info) return 1;
40002034:	1000e026 	beq	r2,zero,400023b8 <main+0x428>
40002038:	0027883a 	mov	r19,zero
4000203c:	053e8014 	movui	r20,64000
40002040:	9821883a 	mov	r16,r19
40002044:	9d23883a 	add	r17,r19,r20

			uint32_t upper = pixel1<<8 | pixel2>>16;
			uint32_t lower = pixel2<<16 | (buffer_addr&0xFFFF);


			send_flit(8, upper, lower  , 1);
40002048:	01402074 	movhi	r5,129
4000204c:	81a02034 	orhi	r6,r16,32896
40002050:	29600004 	addi	r5,r5,-32768
40002054:	84005004 	addi	r16,r16,320
40002058:	01c00044 	movi	r7,1
4000205c:	01000204 	movi	r4,8
40002060:	0003f100 	call	40003f10 <send_flit>
  if(!info) return 1;

  //blank out the display
  for(int luma = 128; luma < 129; luma++){
	  for(int i = 0; i < 320; i+=2){
		for(int j = 0; j < 200; j++){
40002064:	847ff81e 	bne	r16,r17,40002048 <__alt_data_end+0xc0002048>
  info=h264_open("/mnt/host/in.264");
  if(!info) return 1;

  //blank out the display
  for(int luma = 128; luma < 129; luma++){
	  for(int i = 0; i < 320; i+=2){
40002068:	9cc00084 	addi	r19,r19,2
4000206c:	9cbff41e 	bne	r19,r18,40002040 <__alt_data_end+0xc0002040>
  //const int out_buff_size = 7120000;
  //char *out_buf[out_buff_size];
  //setvbuf(out, out_buf, _IOFBF, out_buff_size);


  printf("H.264 stream, %dx%d pixels\n",H264_WIDTH(info),H264_HEIGHT(info));
40002070:	a80dd43a 	srai	r6,r21,16
40002074:	011000b4 	movhi	r4,16386
40002078:	2135aa04 	addi	r4,r4,-10584
4000207c:	a97fffcc 	andi	r5,r21,65535
40002080:	000bc900 	call	4000bc90 <printf>
  printf("file: %s, line : %d\n",__FILE__, __LINE__);
40002084:	015000b4 	movhi	r5,16386
40002088:	011000b4 	movhi	r4,16386
  return 0;
}

frame *h264_decode_frame(int verbose) {
	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
  while(get_next_nal_unit(&nalu)){
4000208c:	04100134 	movhi	r16,16388
  //char *out_buf[out_buff_size];
  //setvbuf(out, out_buf, _IOFBF, out_buff_size);


  printf("H.264 stream, %dx%d pixels\n",H264_WIDTH(info),H264_HEIGHT(info));
  printf("file: %s, line : %d\n",__FILE__, __LINE__);
40002090:	2975b104 	addi	r5,r5,-10556
40002094:	2135b304 	addi	r4,r4,-10548
40002098:	01803f44 	movi	r6,253
	  //printf("file: %s, line : %d\n",__FILE__, __LINE__);
    if(nalu.nal_unit_type==1 || nalu.nal_unit_type==5) {
    	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
      perf_enter("slice decoding");
      ++frame_no;
      decode_slice_header(&sh,&sps,&pps,&nalu);
4000209c:	04500134 	movhi	r17,16388
      //printf("file: %s, line : %d\n",__FILE__, __LINE__);
      if(verbose){
    	  //printf("Frame%4d: %s",frame_no,_str_slice_type(sh.slice_type));
    	  if(frame_no%10==0){
400020a0:	049000b4 	movhi	r18,16386
  return 0;
}

frame *h264_decode_frame(int verbose) {
	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
  while(get_next_nal_unit(&nalu)){
400020a4:	84331a04 	addi	r16,r16,-13208
	  //printf("file: %s, line : %d\n",__FILE__, __LINE__);
    if(nalu.nal_unit_type==1 || nalu.nal_unit_type==5) {
    	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
      perf_enter("slice decoding");
      ++frame_no;
      decode_slice_header(&sh,&sps,&pps,&nalu);
400020a8:	8c731f04 	addi	r17,r17,-13188
  //char *out_buf[out_buff_size];
  //setvbuf(out, out_buf, _IOFBF, out_buff_size);


  printf("H.264 stream, %dx%d pixels\n",H264_WIDTH(info),H264_HEIGHT(info));
  printf("file: %s, line : %d\n",__FILE__, __LINE__);
400020ac:	000bc900 	call	4000bc90 <printf>
      ++frame_no;
      decode_slice_header(&sh,&sps,&pps,&nalu);
      //printf("file: %s, line : %d\n",__FILE__, __LINE__);
      if(verbose){
    	  //printf("Frame%4d: %s",frame_no,_str_slice_type(sh.slice_type));
    	  if(frame_no%10==0){
400020b0:	9483f504 	addi	r18,r18,4052
  return 0;
}

frame *h264_decode_frame(int verbose) {
	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
  while(get_next_nal_unit(&nalu)){
400020b4:	01100134 	movhi	r4,16388
400020b8:	21331a04 	addi	r4,r4,-13208
400020bc:	00039dc0 	call	400039dc <get_next_nal_unit>
400020c0:	10001126 	beq	r2,zero,40002108 <main+0x178>
	  //printf("file: %s, line : %d\n",__FILE__, __LINE__);
    if(nalu.nal_unit_type==1 || nalu.nal_unit_type==5) {
400020c4:	80800317 	ldw	r2,12(r16)
400020c8:	00fffec4 	movi	r3,-5
400020cc:	01400044 	movi	r5,1
400020d0:	10c6703a 	and	r3,r2,r3
400020d4:	19403226 	beq	r3,r5,400021a0 <main+0x210>
        //simulate_buffer_node(/*this, ref*/);
        temp=this; this=ref; ref=temp;

        return temp;
      }
    } else if(nalu.nal_unit_type!=7 && nalu.nal_unit_type!=8)
400020d8:	10bffe44 	addi	r2,r2,-7
400020dc:	28bff52e 	bgeu	r5,r2,400020b4 <__alt_data_end+0xc00020b4>
      fprintf(stderr,"H.264 Warning: unexpected or unsupported NAL unit type!\n");
400020e0:	d0a00117 	ldw	r2,-32764(gp)
400020e4:	011000b4 	movhi	r4,16386
400020e8:	21358f04 	addi	r4,r4,-10692
400020ec:	11c00317 	ldw	r7,12(r2)
400020f0:	01800e04 	movi	r6,56
400020f4:	000aed80 	call	4000aed8 <fwrite>
  return 0;
}

frame *h264_decode_frame(int verbose) {
	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
  while(get_next_nal_unit(&nalu)){
400020f8:	01100134 	movhi	r4,16388
400020fc:	21331a04 	addi	r4,r4,-13208
40002100:	00039dc0 	call	400039dc <get_next_nal_unit>
40002104:	103fef1e 	bne	r2,zero,400020c4 <__alt_data_end+0xc00020c4>
  //send done command
  //wait for ack from previous command
      packet rx_packet;
      rx_packet.num_flits = 0;
      while(rx_packet.num_flits == 0){
  		rx_packet = get_packet_by_id(0xFE);
40002108:	01403f84 	movi	r5,254
4000210c:	d9000304 	addi	r4,sp,12
40002110:	00043f00 	call	400043f0 <get_packet_by_id>
  		if(rx_packet.num_flits == 0){
40002114:	d8808317 	ldw	r2,524(sp)
40002118:	1000a426 	beq	r2,zero,400023ac <main+0x41c>
  			buffers_loop(1);
  		}
  	}
  send_flit(7, 0, (8<<8) | 0xFF, 1);
4000211c:	01c00044 	movi	r7,1
40002120:	01823fc4 	movi	r6,2303
40002124:	000b883a 	mov	r5,zero
40002128:	010001c4 	movi	r4,7
4000212c:	0003f100 	call	40003f10 <send_flit>
  //wait for ack from previous command
      rx_packet.num_flits = 0;
      while(rx_packet.num_flits == 0){
  		rx_packet = get_packet_by_id(0xFE);
40002130:	01403f84 	movi	r5,254
40002134:	d9000304 	addi	r4,sp,12
40002138:	00043f00 	call	400043f0 <get_packet_by_id>
  		if(rx_packet.num_flits == 0){
4000213c:	d8808317 	ldw	r2,524(sp)
40002140:	10009726 	beq	r2,zero,400023a0 <main+0x410>
  			buffers_loop(1);
  		}
  	}

  h264_close();
40002144:	0001efc0 	call	40001efc <h264_close>
  return 0;
40002148:	0005883a 	mov	r2,zero
}
4000214c:	dfc08c17 	ldw	ra,560(sp)
40002150:	dd408b17 	ldw	r21,556(sp)
40002154:	dd008a17 	ldw	r20,552(sp)
40002158:	dcc08917 	ldw	r19,548(sp)
4000215c:	dc808817 	ldw	r18,544(sp)
40002160:	dc408717 	ldw	r17,540(sp)
40002164:	dc008617 	ldw	r16,536(sp)
40002168:	dec08d04 	addi	sp,sp,564
4000216c:	f800283a 	ret
				uint32_t pixel1 = 0;
				uint32_t pixel2 = 0;

				if(j < 50){
					pixel1 = pixel2 = 82<<16 | 90<<8 | 240;
				}else if(j < 100){
40002170:	01644db4 	movhi	r5,37174
40002174:	018d88b4 	movhi	r6,13858
40002178:	2948a444 	addi	r5,r5,8849
4000217c:	003f9e06 	br	40001ff8 <__alt_data_end+0xc0001ff8>
			else{

				uint32_t pixel1 = 0;
				uint32_t pixel2 = 0;

				if(j < 50){
40002180:	015496f4 	movhi	r5,21083
40002184:	0196bc34 	movhi	r6,23280
40002188:	297c1484 	addi	r5,r5,-4014
4000218c:	003f9a06 	br	40001ff8 <__alt_data_end+0xc0001ff8>
					pixel1 = pixel2 = 82<<16 | 90<<8 | 240;
				}else if(j < 100){
					pixel1 = pixel2 = 145<<16 | 54<<8 | 34;
				}else if(j < 150){
40002190:	017ae074 	movhi	r5,60289
40002194:	29603ac4 	addi	r5,r5,-32533
40002198:	01a02034 	movhi	r6,32896
4000219c:	003f9606 	br	40001ff8 <__alt_data_end+0xc0001ff8>
	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
  while(get_next_nal_unit(&nalu)){
	  //printf("file: %s, line : %d\n",__FILE__, __LINE__);
    if(nalu.nal_unit_type==1 || nalu.nal_unit_type==5) {
    	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
      perf_enter("slice decoding");
400021a0:	011000b4 	movhi	r4,16386
400021a4:	21357b04 	addi	r4,r4,-10772
400021a8:	00055880 	call	40005588 <perf_enter>
      ++frame_no;
400021ac:	d0af9917 	ldw	r2,-16796(gp)
      decode_slice_header(&sh,&sps,&pps,&nalu);
400021b0:	01d00134 	movhi	r7,16388
400021b4:	01900134 	movhi	r6,16388
400021b8:	01500134 	movhi	r5,16388
400021bc:	01100134 	movhi	r4,16388
  while(get_next_nal_unit(&nalu)){
	  //printf("file: %s, line : %d\n",__FILE__, __LINE__);
    if(nalu.nal_unit_type==1 || nalu.nal_unit_type==5) {
    	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
      perf_enter("slice decoding");
      ++frame_no;
400021c0:	10800044 	addi	r2,r2,1
      decode_slice_header(&sh,&sps,&pps,&nalu);
400021c4:	39f31a04 	addi	r7,r7,-13208
400021c8:	31b34104 	addi	r6,r6,-13052
400021cc:	29536c04 	addi	r5,r5,19888
400021d0:	21331f04 	addi	r4,r4,-13188
  while(get_next_nal_unit(&nalu)){
	  //printf("file: %s, line : %d\n",__FILE__, __LINE__);
    if(nalu.nal_unit_type==1 || nalu.nal_unit_type==5) {
    	//printf("file: %s, line : %d\n",__FILE__, __LINE__);
      perf_enter("slice decoding");
      ++frame_no;
400021d4:	d0af9915 	stw	r2,-16796(gp)
      decode_slice_header(&sh,&sps,&pps,&nalu);
400021d8:	00073c80 	call	400073c8 <decode_slice_header>
      //printf("file: %s, line : %d\n",__FILE__, __LINE__);
      if(verbose){
    	  //printf("Frame%4d: %s",frame_no,_str_slice_type(sh.slice_type));
    	  if(frame_no%10==0){
400021dc:	d4ef9917 	ldw	r19,-16796(gp)
400021e0:	00c003c4 	movi	r3,15
400021e4:	98800294 	ori	r2,r19,10
400021e8:	18804836 	bltu	r3,r2,4000230c <main+0x37c>
400021ec:	9804913a 	slli	r2,r19,4
400021f0:	10800294 	ori	r2,r2,10
400021f4:	1485883a 	add	r2,r2,r18
400021f8:	10800003 	ldbu	r2,0(r2)
400021fc:	108002a4 	muli	r2,r2,10
40002200:	98804726 	beq	r19,r2,40002320 <main+0x390>
    		  printf("nf=%d\n", frame_no);
    	  }
      }
      if(sh.slice_type!=I_SLICE && sh.slice_type!=P_SLICE)
40002204:	89000117 	ldw	r4,4(r17)
40002208:	00bfff44 	movi	r2,-3
4000220c:	2084703a 	and	r2,r4,r2
40002210:	10004b26 	beq	r2,zero,40002340 <main+0x3b0>
        fprintf(stderr,"H.264 Warning: Unsupported slice type (%s), skipping!\n",
40002214:	d0a00117 	ldw	r2,-32764(gp)
40002218:	14c00317 	ldw	r19,12(r2)
4000221c:	00078dc0 	call	400078dc <_str_slice_type>
40002220:	015000b4 	movhi	r5,16386
40002224:	100d883a 	mov	r6,r2
40002228:	29758104 	addi	r5,r5,-10748
4000222c:	9809883a 	mov	r4,r19
40002230:	0009fd80 	call	40009fd8 <fprintf>
40002234:	003f9f06 	br	400020b4 <__alt_data_end+0xc00020b4>
			if( i < 200){

				uint32_t Chroma_r = (int)((i * 1.0)/200 * 255);
				uint32_t Chroma_b = (int)((j * 1.0)/200 * 255);

				uint32_t pixel1 = (luma)<<16 | (Chroma_r)<<8 | (Chroma_b);
40002238:	9009883a 	mov	r4,r18
4000223c:	000945c0 	call	4000945c <__floatsidf>
40002240:	000d883a 	mov	r6,zero
40002244:	01d01a74 	movhi	r7,16489
40002248:	1009883a 	mov	r4,r2
4000224c:	180b883a 	mov	r5,r3
40002250:	00083dc0 	call	400083dc <__divdf3>
40002254:	01d01c34 	movhi	r7,16496
40002258:	39f80004 	addi	r7,r7,-8192
4000225c:	000d883a 	mov	r6,zero
40002260:	1009883a 	mov	r4,r2
40002264:	180b883a 	mov	r5,r3
40002268:	0008cc40 	call	40008cc4 <__muldf3>
4000226c:	1009883a 	mov	r4,r2
40002270:	180b883a 	mov	r5,r3
40002274:	00093dc0 	call	400093dc <__fixdfsi>
40002278:	1004923a 	slli	r2,r2,8
4000227c:	9023883a 	mov	r17,r18
40002280:	0021883a 	mov	r16,zero
40002284:	15002034 	orhi	r20,r2,128


  //write test image to display
  for(int luma = 128; luma < 129; luma++){
	  for(int i = 0; i < 320; i+=2){
		for(int j = 0; j < 200; j++){
40002288:	05403204 	movi	r21,200
			if( i < 200){

				uint32_t Chroma_r = (int)((i * 1.0)/200 * 255);
				uint32_t Chroma_b = (int)((j * 1.0)/200 * 255);

				uint32_t pixel1 = (luma)<<16 | (Chroma_r)<<8 | (Chroma_b);
4000228c:	8009883a 	mov	r4,r16
40002290:	000945c0 	call	4000945c <__floatsidf>
40002294:	000d883a 	mov	r6,zero
40002298:	01d01a74 	movhi	r7,16489
4000229c:	1009883a 	mov	r4,r2
400022a0:	180b883a 	mov	r5,r3
400022a4:	00083dc0 	call	400083dc <__divdf3>
400022a8:	01d01c34 	movhi	r7,16496
400022ac:	39f80004 	addi	r7,r7,-8192
400022b0:	000d883a 	mov	r6,zero
400022b4:	1009883a 	mov	r4,r2
400022b8:	180b883a 	mov	r5,r3
400022bc:	0008cc40 	call	40008cc4 <__muldf3>
400022c0:	180b883a 	mov	r5,r3
400022c4:	1009883a 	mov	r4,r2
400022c8:	00093dc0 	call	400093dc <__fixdfsi>
400022cc:	1504b03a 	or	r2,r2,r20

				uint32_t upper = pixel1<<8 | pixel2>>16;
				uint32_t lower = pixel2<<16 | (buffer_addr&0xFFFF);


				send_flit(8, upper, lower  , 1);
400022d0:	100c943a 	slli	r6,r2,16
400022d4:	100a923a 	slli	r5,r2,8
400022d8:	1004d43a 	srli	r2,r2,16
400022dc:	01c00044 	movi	r7,1
400022e0:	344cb03a 	or	r6,r6,r17
400022e4:	288ab03a 	or	r5,r5,r2
400022e8:	01000204 	movi	r4,8


  //write test image to display
  for(int luma = 128; luma < 129; luma++){
	  for(int i = 0; i < 320; i+=2){
		for(int j = 0; j < 200; j++){
400022ec:	81e1883a 	add	r16,r16,r7
400022f0:	8c405004 	addi	r17,r17,320

				uint32_t upper = pixel1<<8 | pixel2>>16;
				uint32_t lower = pixel2<<16 | (buffer_addr&0xFFFF);


				send_flit(8, upper, lower  , 1);
400022f4:	0003f100 	call	40003f10 <send_flit>


  //write test image to display
  for(int luma = 128; luma < 129; luma++){
	  for(int i = 0; i < 320; i+=2){
		for(int j = 0; j < 200; j++){
400022f8:	857fe41e 	bne	r16,r21,4000228c <__alt_data_end+0xc000228c>
  noc_init();


  //write test image to display
  for(int luma = 128; luma < 129; luma++){
	  for(int i = 0; i < 320; i+=2){
400022fc:	94800084 	addi	r18,r18,2
40002300:	00805004 	movi	r2,320
40002304:	90bf301e 	bne	r18,r2,40001fc8 <__alt_data_end+0xc0001fc8>
40002308:	003f4606 	br	40002024 <__alt_data_end+0xc0002024>
      ++frame_no;
      decode_slice_header(&sh,&sps,&pps,&nalu);
      //printf("file: %s, line : %d\n",__FILE__, __LINE__);
      if(verbose){
    	  //printf("Frame%4d: %s",frame_no,_str_slice_type(sh.slice_type));
    	  if(frame_no%10==0){
4000230c:	01400284 	movi	r5,10
40002310:	9809883a 	mov	r4,r19
40002314:	000797c0 	call	4000797c <__divsi3>
40002318:	108002a4 	muli	r2,r2,10
4000231c:	98bfb91e 	bne	r19,r2,40002204 <__alt_data_end+0xc0002204>
    		  printf("nf=%d\n", frame_no);
40002320:	011000b4 	movhi	r4,16386
40002324:	21357f04 	addi	r4,r4,-10756
40002328:	980b883a 	mov	r5,r19
4000232c:	000bc900 	call	4000bc90 <printf>
    	  }
      }
      if(sh.slice_type!=I_SLICE && sh.slice_type!=P_SLICE)
40002330:	89000117 	ldw	r4,4(r17)
40002334:	00bfff44 	movi	r2,-3
40002338:	2084703a 	and	r2,r4,r2
4000233c:	103fb51e 	bne	r2,zero,40002214 <__alt_data_end+0xc0002214>
        fprintf(stderr,"H.264 Warning: Unsupported slice type (%s), skipping!\n",
                       _str_slice_type(sh.slice_type));
      else {
        frame *temp;
        int the_QP = decode_slice_data(&sh,&sps,&pps,&nalu,this,ref,mpi);
40002340:	d0af9617 	ldw	r2,-16808(gp)
40002344:	01d00134 	movhi	r7,16388
40002348:	01900134 	movhi	r6,16388
4000234c:	d8800215 	stw	r2,8(sp)
40002350:	d0af9717 	ldw	r2,-16804(gp)
40002354:	01100134 	movhi	r4,16388
40002358:	01500134 	movhi	r5,16388
4000235c:	d8800115 	stw	r2,4(sp)
40002360:	d0af9817 	ldw	r2,-16800(gp)
40002364:	39f31a04 	addi	r7,r7,-13208
40002368:	31b34104 	addi	r6,r6,-13052
4000236c:	21331f04 	addi	r4,r4,-13188
40002370:	29536c04 	addi	r5,r5,19888
40002374:	d8800015 	stw	r2,0(sp)
40002378:	0005f300 	call	40005f30 <decode_slice_data>




        send_start_new_frame(7, the_QP);
4000237c:	100b883a 	mov	r5,r2
40002380:	010001c4 	movi	r4,7
40002384:	0004a280 	call	40004a28 <send_start_new_frame>
        //simulate_buffer_node(/*this, ref*/);
        temp=this; this=ref; ref=temp;
40002388:	d0af9817 	ldw	r2,-16800(gp)
4000238c:	d0ef9717 	ldw	r3,-16804(gp)
40002390:	d0af9715 	stw	r2,-16804(gp)
40002394:	d0ef9815 	stw	r3,-16800(gp)


  printf("H.264 stream, %dx%d pixels\n",H264_WIDTH(info),H264_HEIGHT(info));
  printf("file: %s, line : %d\n",__FILE__, __LINE__);
  //start = time(0);
  while((f=h264_decode_frame(1))) {
40002398:	103f461e 	bne	r2,zero,400020b4 <__alt_data_end+0xc00020b4>
4000239c:	003f5a06 	br	40002108 <__alt_data_end+0xc0002108>
  //wait for ack from previous command
      rx_packet.num_flits = 0;
      while(rx_packet.num_flits == 0){
  		rx_packet = get_packet_by_id(0xFE);
  		if(rx_packet.num_flits == 0){
  			buffers_loop(1);
400023a0:	01000044 	movi	r4,1
400023a4:	00040a00 	call	400040a0 <buffers_loop>
400023a8:	003f6106 	br	40002130 <__alt_data_end+0xc0002130>
      packet rx_packet;
      rx_packet.num_flits = 0;
      while(rx_packet.num_flits == 0){
  		rx_packet = get_packet_by_id(0xFE);
  		if(rx_packet.num_flits == 0){
  			buffers_loop(1);
400023ac:	01000044 	movi	r4,1
400023b0:	00040a00 	call	400040a0 <buffers_loop>
400023b4:	003f5406 	br	40002108 <__alt_data_end+0xc0002108>
  //int is_present = alt_up_sd_card_is_Present();
  //int is_fat     = alt_up_sd_card_is_FAT16();
  //printf("test... 1234\n");

  info=h264_open("/mnt/host/in.264");
  if(!info) return 1;
400023b8:	00800044 	movi	r2,1
400023bc:	003f6306 	br	4000214c <__alt_data_end+0xc000214c>

400023c0 <decode_mb_mode>:
};


void decode_mb_mode(mb_mode *mb, int slice_type, int raw_mb_type) {
  #define INVALID_MB do { memset(mb,0xFF,sizeof(mb_mode)); return; } while(0)
  if(slice_type==I_SLICE) {
400023c0:	00800084 	movi	r2,2
400023c4:	28800426 	beq	r5,r2,400023d8 <decode_mb_mode+0x18>
    mb->Intra16x16PredMode=ISliceMbModes[raw_mb_type][1];
    mb->MbPartWidth=16;
    mb->MbPartHeight=16;
    mb->CodedBlockPatternChroma=ISliceMbModes[raw_mb_type][2];
    mb->CodedBlockPatternLuma=ISliceMbModes[raw_mb_type][3];
  } else if(slice_type==P_SLICE) {
400023c8:	28001b1e 	bne	r5,zero,40002438 <decode_mb_mode+0x78>
    if(raw_mb_type>4)
400023cc:	00800104 	movi	r2,4
400023d0:	11801c0e 	bge	r2,r6,40002444 <decode_mb_mode+0x84>
      decode_mb_mode(mb,I_SLICE,raw_mb_type-5);
400023d4:	31bffec4 	addi	r6,r6,-5


void decode_mb_mode(mb_mode *mb, int slice_type, int raw_mb_type) {
  #define INVALID_MB do { memset(mb,0xFF,sizeof(mb_mode)); return; } while(0)
  if(slice_type==I_SLICE) {
    if(raw_mb_type>25) INVALID_MB;
400023d8:	00800644 	movi	r2,25
400023dc:	11801616 	blt	r2,r6,40002438 <decode_mb_mode+0x78>
    mb->mb_type=raw_mb_type+5;
    mb->NumMbPart=1;
    mb->MbPartPredMode[0]=ISliceMbModes[raw_mb_type][0];
400023e0:	3004913a 	slli	r2,r6,4
400023e4:	015000b4 	movhi	r5,16386
400023e8:	29779004 	addi	r5,r5,-8640
400023ec:	2885883a 	add	r2,r5,r2

void decode_mb_mode(mb_mode *mb, int slice_type, int raw_mb_type) {
  #define INVALID_MB do { memset(mb,0xFF,sizeof(mb_mode)); return; } while(0)
  if(slice_type==I_SLICE) {
    if(raw_mb_type>25) INVALID_MB;
    mb->mb_type=raw_mb_type+5;
400023f0:	31800144 	addi	r6,r6,5
    mb->NumMbPart=1;
    mb->MbPartPredMode[0]=ISliceMbModes[raw_mb_type][0];
400023f4:	12000017 	ldw	r8,0(r2)
    mb->MbPartPredMode[1]=NA;
    mb->Intra16x16PredMode=ISliceMbModes[raw_mb_type][1];
400023f8:	11c00117 	ldw	r7,4(r2)
    mb->MbPartWidth=16;
    mb->MbPartHeight=16;
    mb->CodedBlockPatternChroma=ISliceMbModes[raw_mb_type][2];
400023fc:	11400217 	ldw	r5,8(r2)
    mb->CodedBlockPatternLuma=ISliceMbModes[raw_mb_type][3];
40002400:	10800317 	ldw	r2,12(r2)

void decode_mb_mode(mb_mode *mb, int slice_type, int raw_mb_type) {
  #define INVALID_MB do { memset(mb,0xFF,sizeof(mb_mode)); return; } while(0)
  if(slice_type==I_SLICE) {
    if(raw_mb_type>25) INVALID_MB;
    mb->mb_type=raw_mb_type+5;
40002404:	21800015 	stw	r6,0(r4)
    mb->NumMbPart=1;
40002408:	01800044 	movi	r6,1
    mb->MbPartPredMode[0]=ISliceMbModes[raw_mb_type][0];
    mb->MbPartPredMode[1]=NA;
    mb->Intra16x16PredMode=ISliceMbModes[raw_mb_type][1];
    mb->MbPartWidth=16;
4000240c:	00c00404 	movi	r3,16
void decode_mb_mode(mb_mode *mb, int slice_type, int raw_mb_type) {
  #define INVALID_MB do { memset(mb,0xFF,sizeof(mb_mode)); return; } while(0)
  if(slice_type==I_SLICE) {
    if(raw_mb_type>25) INVALID_MB;
    mb->mb_type=raw_mb_type+5;
    mb->NumMbPart=1;
40002410:	21800115 	stw	r6,4(r4)
    mb->MbPartPredMode[0]=ISliceMbModes[raw_mb_type][0];
    mb->MbPartPredMode[1]=NA;
40002414:	01bfffc4 	movi	r6,-1
  #define INVALID_MB do { memset(mb,0xFF,sizeof(mb_mode)); return; } while(0)
  if(slice_type==I_SLICE) {
    if(raw_mb_type>25) INVALID_MB;
    mb->mb_type=raw_mb_type+5;
    mb->NumMbPart=1;
    mb->MbPartPredMode[0]=ISliceMbModes[raw_mb_type][0];
40002418:	22000215 	stw	r8,8(r4)
    mb->MbPartPredMode[1]=NA;
4000241c:	21800315 	stw	r6,12(r4)
    mb->Intra16x16PredMode=ISliceMbModes[raw_mb_type][1];
40002420:	21c00415 	stw	r7,16(r4)
    mb->MbPartWidth=16;
40002424:	20c00515 	stw	r3,20(r4)
    mb->MbPartHeight=16;
40002428:	20c00615 	stw	r3,24(r4)
    mb->CodedBlockPatternChroma=ISliceMbModes[raw_mb_type][2];
4000242c:	21400715 	stw	r5,28(r4)
    mb->CodedBlockPatternLuma=ISliceMbModes[raw_mb_type][3];
40002430:	20800815 	stw	r2,32(r4)
40002434:	f800283a 	ret


void decode_mb_mode(mb_mode *mb, int slice_type, int raw_mb_type) {
  #define INVALID_MB do { memset(mb,0xFF,sizeof(mb_mode)); return; } while(0)
  if(slice_type==I_SLICE) {
    if(raw_mb_type>25) INVALID_MB;
40002438:	01800904 	movi	r6,36
4000243c:	01403fc4 	movi	r5,255
40002440:	000ba441 	jmpi	4000ba44 <memset>
  } else if(slice_type==P_SLICE) {
    if(raw_mb_type>4)
      decode_mb_mode(mb,I_SLICE,raw_mb_type-5);
    else {
      mb->mb_type=raw_mb_type;
      mb->NumMbPart=PSliceMbModes[raw_mb_type][0];
40002444:	30800524 	muli	r2,r6,20
40002448:	015000b4 	movhi	r5,16386
4000244c:	29777204 	addi	r5,r5,-8760
40002450:	2885883a 	add	r2,r5,r2
40002454:	12000017 	ldw	r8,0(r2)
      mb->MbPartPredMode[0]=PSliceMbModes[raw_mb_type][1];
40002458:	11c00117 	ldw	r7,4(r2)
      mb->MbPartPredMode[1]=PSliceMbModes[raw_mb_type][2];
      mb->Intra16x16PredMode=NA;
      mb->MbPartWidth=PSliceMbModes[raw_mb_type][3];
4000245c:	11400317 	ldw	r5,12(r2)
    mb->CodedBlockPatternLuma=ISliceMbModes[raw_mb_type][3];
  } else if(slice_type==P_SLICE) {
    if(raw_mb_type>4)
      decode_mb_mode(mb,I_SLICE,raw_mb_type-5);
    else {
      mb->mb_type=raw_mb_type;
40002460:	21800015 	stw	r6,0(r4)
      mb->NumMbPart=PSliceMbModes[raw_mb_type][0];
      mb->MbPartPredMode[0]=PSliceMbModes[raw_mb_type][1];
      mb->MbPartPredMode[1]=PSliceMbModes[raw_mb_type][2];
40002464:	11800217 	ldw	r6,8(r2)
      mb->Intra16x16PredMode=NA;
      mb->MbPartWidth=PSliceMbModes[raw_mb_type][3];
      mb->MbPartHeight=PSliceMbModes[raw_mb_type][4];
40002468:	10800417 	ldw	r2,16(r2)
    else {
      mb->mb_type=raw_mb_type;
      mb->NumMbPart=PSliceMbModes[raw_mb_type][0];
      mb->MbPartPredMode[0]=PSliceMbModes[raw_mb_type][1];
      mb->MbPartPredMode[1]=PSliceMbModes[raw_mb_type][2];
      mb->Intra16x16PredMode=NA;
4000246c:	00ffffc4 	movi	r3,-1
  } else if(slice_type==P_SLICE) {
    if(raw_mb_type>4)
      decode_mb_mode(mb,I_SLICE,raw_mb_type-5);
    else {
      mb->mb_type=raw_mb_type;
      mb->NumMbPart=PSliceMbModes[raw_mb_type][0];
40002470:	22000115 	stw	r8,4(r4)
      mb->MbPartPredMode[0]=PSliceMbModes[raw_mb_type][1];
40002474:	21c00215 	stw	r7,8(r4)
      mb->MbPartPredMode[1]=PSliceMbModes[raw_mb_type][2];
40002478:	21800315 	stw	r6,12(r4)
      mb->Intra16x16PredMode=NA;
4000247c:	20c00415 	stw	r3,16(r4)
      mb->MbPartWidth=PSliceMbModes[raw_mb_type][3];
40002480:	21400515 	stw	r5,20(r4)
      mb->MbPartHeight=PSliceMbModes[raw_mb_type][4];
40002484:	20800615 	stw	r2,24(r4)
      mb->CodedBlockPatternChroma=NA;
40002488:	20c00715 	stw	r3,28(r4)
      mb->CodedBlockPatternLuma=NA;
4000248c:	20c00815 	stw	r3,32(r4)
40002490:	f800283a 	ret

40002494 <decode_sub_mb_mode>:
    INVALID_MB;
}

void decode_sub_mb_mode(sub_mb_mode *sub, int slice_type, int raw_sub_mb_type) {
  #define INVALID_SUB do { memset(sub,0xFF,sizeof(sub_mb_mode)); return; } while(0)
  if(slice_type==P_SLICE) {
40002494:	2800101e 	bne	r5,zero,400024d8 <decode_sub_mb_mode+0x44>
    if(raw_sub_mb_type>3) INVALID_SUB;
40002498:	008000c4 	movi	r2,3
4000249c:	11800e16 	blt	r2,r6,400024d8 <decode_sub_mb_mode+0x44>
    sub->sub_mb_type=raw_sub_mb_type;
    sub->NumSubMbPart=PSliceSubMbModes[raw_sub_mb_type][0];
400024a0:	3004913a 	slli	r2,r6,4
400024a4:	00d000b4 	movhi	r3,16386
400024a8:	18f76204 	addi	r3,r3,-8824
400024ac:	1885883a 	add	r2,r3,r2
    sub->SubMbPredMode=PSliceSubMbModes[raw_sub_mb_type][1];
400024b0:	11400117 	ldw	r5,4(r2)
    sub->SubMbPartWidth=PSliceSubMbModes[raw_sub_mb_type][2];
400024b4:	10c00217 	ldw	r3,8(r2)

void decode_sub_mb_mode(sub_mb_mode *sub, int slice_type, int raw_sub_mb_type) {
  #define INVALID_SUB do { memset(sub,0xFF,sizeof(sub_mb_mode)); return; } while(0)
  if(slice_type==P_SLICE) {
    if(raw_sub_mb_type>3) INVALID_SUB;
    sub->sub_mb_type=raw_sub_mb_type;
400024b8:	21800015 	stw	r6,0(r4)
    sub->NumSubMbPart=PSliceSubMbModes[raw_sub_mb_type][0];
400024bc:	11800017 	ldw	r6,0(r2)
    sub->SubMbPredMode=PSliceSubMbModes[raw_sub_mb_type][1];
    sub->SubMbPartWidth=PSliceSubMbModes[raw_sub_mb_type][2];
    sub->SubMbPartHeight=PSliceSubMbModes[raw_sub_mb_type][3];
400024c0:	10800317 	ldw	r2,12(r2)
  #define INVALID_SUB do { memset(sub,0xFF,sizeof(sub_mb_mode)); return; } while(0)
  if(slice_type==P_SLICE) {
    if(raw_sub_mb_type>3) INVALID_SUB;
    sub->sub_mb_type=raw_sub_mb_type;
    sub->NumSubMbPart=PSliceSubMbModes[raw_sub_mb_type][0];
    sub->SubMbPredMode=PSliceSubMbModes[raw_sub_mb_type][1];
400024c4:	21400215 	stw	r5,8(r4)
void decode_sub_mb_mode(sub_mb_mode *sub, int slice_type, int raw_sub_mb_type) {
  #define INVALID_SUB do { memset(sub,0xFF,sizeof(sub_mb_mode)); return; } while(0)
  if(slice_type==P_SLICE) {
    if(raw_sub_mb_type>3) INVALID_SUB;
    sub->sub_mb_type=raw_sub_mb_type;
    sub->NumSubMbPart=PSliceSubMbModes[raw_sub_mb_type][0];
400024c8:	21800115 	stw	r6,4(r4)
    sub->SubMbPredMode=PSliceSubMbModes[raw_sub_mb_type][1];
    sub->SubMbPartWidth=PSliceSubMbModes[raw_sub_mb_type][2];
400024cc:	20c00315 	stw	r3,12(r4)
    sub->SubMbPartHeight=PSliceSubMbModes[raw_sub_mb_type][3];
400024d0:	20800415 	stw	r2,16(r4)
400024d4:	f800283a 	ret
}

void decode_sub_mb_mode(sub_mb_mode *sub, int slice_type, int raw_sub_mb_type) {
  #define INVALID_SUB do { memset(sub,0xFF,sizeof(sub_mb_mode)); return; } while(0)
  if(slice_type==P_SLICE) {
    if(raw_sub_mb_type>3) INVALID_SUB;
400024d8:	01800504 	movi	r6,20
400024dc:	01403fc4 	movi	r5,255
400024e0:	000ba441 	jmpi	4000ba44 <memset>

400024e4 <_str_mb_type>:
    INVALID_SUB;
}

///////////////////////////////////////////////////////////////////////////////

char *_str_mb_type(int mb_type) {
400024e4:	00803fc4 	movi	r2,255
400024e8:	11000736 	bltu	r2,r4,40002508 <_str_mb_type+0x24>
400024ec:	2109883a 	add	r4,r4,r4
400024f0:	009000b4 	movhi	r2,16386
400024f4:	10b66204 	addi	r2,r2,-9848
400024f8:	2109883a 	add	r4,r4,r4
400024fc:	1109883a 	add	r4,r2,r4
40002500:	20800017 	ldw	r2,0(r4)
40002504:	f800283a 	ret
40002508:	009000b4 	movhi	r2,16386
4000250c:	10b5b904 	addi	r2,r2,-10524
    case I_16x16_3_2_1: return "I_16x16_3_2_1";
    case I_PCM: return "I_PCM";
    case P_Skip: return "P_Skip";
    default: return "n/a";
  }
}
40002510:	f800283a 	ret

40002514 <_str_sub_mb_type>:

char *_str_sub_mb_type(int sub_mb_type) {
40002514:	008000c4 	movi	r2,3
40002518:	11000736 	bltu	r2,r4,40002538 <_str_sub_mb_type+0x24>
4000251c:	2109883a 	add	r4,r4,r4
40002520:	009000b4 	movhi	r2,16386
40002524:	10b65e04 	addi	r2,r2,-9864
40002528:	2109883a 	add	r4,r4,r4
4000252c:	1109883a 	add	r4,r2,r4
40002530:	20800017 	ldw	r2,0(r4)
40002534:	f800283a 	ret
40002538:	009000b4 	movhi	r2,16386
4000253c:	10b5b904 	addi	r2,r2,-10524
    case P_L0_8x4: return "P_L0_8x4";
    case P_L0_4x8: return "P_L0_4x8";
    case P_L0_4x4: return "P_L0_4x4";
    default: return "n/a";
  }
}
40002540:	f800283a 	ret

40002544 <_str_pred_mode>:

char *_str_pred_mode(int pred_mode) {
40002544:	00800144 	movi	r2,5
40002548:	11000736 	bltu	r2,r4,40002568 <_str_pred_mode+0x24>
4000254c:	2109883a 	add	r4,r4,r4
40002550:	009000b4 	movhi	r2,16386
40002554:	10b65804 	addi	r2,r2,-9888
40002558:	2109883a 	add	r4,r4,r4
4000255c:	1109883a 	add	r4,r2,r4
40002560:	20800017 	ldw	r2,0(r4)
40002564:	f800283a 	ret
40002568:	009000b4 	movhi	r2,16386
4000256c:	10b5b904 	addi	r2,r2,-10524
    case Pred_L1: return "Pred_L1";
    case BiPred: return "BiPred";
    case Direct: return "Direct";
    default: return "n/a";
  }
}
40002570:	f800283a 	ret

40002574 <_dump_mb_mode>:

void _dump_mb_mode(mb_mode *mb) {
40002574:	20800017 	ldw	r2,0(r4)
40002578:	defff904 	addi	sp,sp,-28
4000257c:	dfc00615 	stw	ra,24(sp)
40002580:	00c03fc4 	movi	r3,255
40002584:	18802a36 	bltu	r3,r2,40002630 <_dump_mb_mode+0xbc>
40002588:	1085883a 	add	r2,r2,r2
4000258c:	00d000b4 	movhi	r3,16386
40002590:	1085883a 	add	r2,r2,r2
40002594:	18f66204 	addi	r3,r3,-9848
40002598:	1885883a 	add	r2,r3,r2
4000259c:	11400017 	ldw	r5,0(r2)
400025a0:	20800217 	ldw	r2,8(r4)
400025a4:	02000144 	movi	r8,5
  printf("MB: %s, %d parts %dx%d [%s,%s], i16=%d, cbp: C=%d L=%d\n",
400025a8:	21800117 	ldw	r6,4(r4)
400025ac:	21c00517 	ldw	r7,20(r4)
400025b0:	20c00617 	ldw	r3,24(r4)
400025b4:	40802136 	bltu	r8,r2,4000263c <_dump_mb_mode+0xc8>
400025b8:	1085883a 	add	r2,r2,r2
400025bc:	021000b4 	movhi	r8,16386
400025c0:	42365804 	addi	r8,r8,-9888
400025c4:	1085883a 	add	r2,r2,r2
400025c8:	4085883a 	add	r2,r8,r2
400025cc:	12000017 	ldw	r8,0(r2)
400025d0:	20800317 	ldw	r2,12(r4)
400025d4:	02400144 	movi	r9,5
400025d8:	48801d36 	bltu	r9,r2,40002650 <_dump_mb_mode+0xdc>
400025dc:	1085883a 	add	r2,r2,r2
400025e0:	025000b4 	movhi	r9,16386
400025e4:	1085883a 	add	r2,r2,r2
400025e8:	4a765804 	addi	r9,r9,-9888
400025ec:	4885883a 	add	r2,r9,r2
400025f0:	10800017 	ldw	r2,0(r2)
400025f4:	22c00817 	ldw	r11,32(r4)
400025f8:	22800717 	ldw	r10,28(r4)
400025fc:	22400417 	ldw	r9,16(r4)
40002600:	011000b4 	movhi	r4,16386
40002604:	2135ba04 	addi	r4,r4,-10520
40002608:	dac00515 	stw	r11,20(sp)
4000260c:	da800415 	stw	r10,16(sp)
40002610:	da400315 	stw	r9,12(sp)
40002614:	d8800215 	stw	r2,8(sp)
40002618:	da000115 	stw	r8,4(sp)
4000261c:	d8c00015 	stw	r3,0(sp)
40002620:	000bc900 	call	4000bc90 <printf>
         mb->MbPartWidth,mb->MbPartHeight,
         _str_pred_mode(mb->MbPartPredMode[0]),
         _str_pred_mode(mb->MbPartPredMode[1]),
         mb->Intra16x16PredMode,
         mb->CodedBlockPatternChroma,mb->CodedBlockPatternLuma);
}
40002624:	dfc00617 	ldw	ra,24(sp)
40002628:	dec00704 	addi	sp,sp,28
4000262c:	f800283a 	ret
    default: return "n/a";
  }
}

void _dump_mb_mode(mb_mode *mb) {
  printf("MB: %s, %d parts %dx%d [%s,%s], i16=%d, cbp: C=%d L=%d\n",
40002630:	015000b4 	movhi	r5,16386
40002634:	2975b904 	addi	r5,r5,-10524
40002638:	003fd906 	br	400025a0 <__alt_data_end+0xc00025a0>
4000263c:	20800317 	ldw	r2,12(r4)
40002640:	021000b4 	movhi	r8,16386
40002644:	02400144 	movi	r9,5
40002648:	4235b904 	addi	r8,r8,-10524
4000264c:	48bfe32e 	bgeu	r9,r2,400025dc <__alt_data_end+0xc00025dc>
40002650:	009000b4 	movhi	r2,16386
40002654:	10b5b904 	addi	r2,r2,-10524
40002658:	003fe606 	br	400025f4 <__alt_data_end+0xc00025f4>

4000265c <alloc_mode_pred_info>:
#include "common.h"
#include "mbmodes.h"
#include "mode_pred.h"

mode_pred_info *alloc_mode_pred_info(int width, int height) {
4000265c:	defffb04 	addi	sp,sp,-20
40002660:	dcc00315 	stw	r19,12(sp)
40002664:	dc800215 	stw	r18,8(sp)
40002668:	2827883a 	mov	r19,r5
4000266c:	2025883a 	mov	r18,r4
  mode_pred_info *mpi=calloc(1,sizeof(mode_pred_info));
40002670:	01401004 	movi	r5,64
40002674:	01000044 	movi	r4,1
#include "common.h"
#include "mbmodes.h"
#include "mode_pred.h"

mode_pred_info *alloc_mode_pred_info(int width, int height) {
40002678:	dfc00415 	stw	ra,16(sp)
4000267c:	dc400115 	stw	r17,4(sp)
40002680:	dc000015 	stw	r16,0(sp)
  mode_pred_info *mpi=calloc(1,sizeof(mode_pred_info));
40002684:	00096440 	call	40009644 <calloc>
40002688:	1021883a 	mov	r16,r2
  int x,y;
  // per-macroblock information     (16x16)
  x=mpi->MbWidth=mpi->MbPitch=width>>4;
  y=mpi->MbHeight=height>>4;
4000268c:	9807d13a 	srai	r3,r19,4

mode_pred_info *alloc_mode_pred_info(int width, int height) {
  mode_pred_info *mpi=calloc(1,sizeof(mode_pred_info));
  int x,y;
  // per-macroblock information     (16x16)
  x=mpi->MbWidth=mpi->MbPitch=width>>4;
40002690:	9005d13a 	srai	r2,r18,4
  y=mpi->MbHeight=height>>4;
40002694:	80c00115 	stw	r3,4(r16)
  mpi->MbMode=malloc(x*y*sizeof(int));
40002698:	10c9383a 	mul	r4,r2,r3

mode_pred_info *alloc_mode_pred_info(int width, int height) {
  mode_pred_info *mpi=calloc(1,sizeof(mode_pred_info));
  int x,y;
  // per-macroblock information     (16x16)
  x=mpi->MbWidth=mpi->MbPitch=width>>4;
4000269c:	80800215 	stw	r2,8(r16)
400026a0:	80800015 	stw	r2,0(r16)
  y=mpi->MbHeight=height>>4;
  mpi->MbMode=malloc(x*y*sizeof(int));
400026a4:	2109883a 	add	r4,r4,r4
400026a8:	2109883a 	add	r4,r4,r4
400026ac:	000b0c80 	call	4000b0c8 <malloc>
  // per-chroma block information    (8x8)
  x=mpi->CbWidth=mpi->CbPitch=width>>3;
400026b0:	9007d0fa 	srai	r3,r18,3
  y=mpi->CbHeight=height>>3;
400026b4:	9809d0fa 	srai	r4,r19,3
  mpi->TotalCoeffC[0]=malloc(x*y*sizeof(int));
  mpi->TotalCoeffC[1]=malloc(x*y*sizeof(int));
  // per-transform block information (4x4)
  x=mpi->TbWidth=mpi->TbPitch=width>>2;
400026b8:	9025d0ba 	srai	r18,r18,2
  y=mpi->TbHeight=height>>2;
400026bc:	9827d0ba 	srai	r19,r19,2
  y=mpi->MbHeight=height>>4;
  mpi->MbMode=malloc(x*y*sizeof(int));
  // per-chroma block information    (8x8)
  x=mpi->CbWidth=mpi->CbPitch=width>>3;
  y=mpi->CbHeight=height>>3;
  mpi->TotalCoeffC[0]=malloc(x*y*sizeof(int));
400026c0:	1923383a 	mul	r17,r3,r4
  x=mpi->MbWidth=mpi->MbPitch=width>>4;
  y=mpi->MbHeight=height>>4;
  mpi->MbMode=malloc(x*y*sizeof(int));
  // per-chroma block information    (8x8)
  x=mpi->CbWidth=mpi->CbPitch=width>>3;
  y=mpi->CbHeight=height>>3;
400026c4:	81000515 	stw	r4,20(r16)
  // per-macroblock information     (16x16)
  x=mpi->MbWidth=mpi->MbPitch=width>>4;
  y=mpi->MbHeight=height>>4;
  mpi->MbMode=malloc(x*y*sizeof(int));
  // per-chroma block information    (8x8)
  x=mpi->CbWidth=mpi->CbPitch=width>>3;
400026c8:	80c00615 	stw	r3,24(r16)
  y=mpi->CbHeight=height>>3;
  mpi->TotalCoeffC[0]=malloc(x*y*sizeof(int));
400026cc:	8c63883a 	add	r17,r17,r17
400026d0:	8c63883a 	add	r17,r17,r17
400026d4:	8809883a 	mov	r4,r17
  // per-macroblock information     (16x16)
  x=mpi->MbWidth=mpi->MbPitch=width>>4;
  y=mpi->MbHeight=height>>4;
  mpi->MbMode=malloc(x*y*sizeof(int));
  // per-chroma block information    (8x8)
  x=mpi->CbWidth=mpi->CbPitch=width>>3;
400026d8:	80c00415 	stw	r3,16(r16)
  mode_pred_info *mpi=calloc(1,sizeof(mode_pred_info));
  int x,y;
  // per-macroblock information     (16x16)
  x=mpi->MbWidth=mpi->MbPitch=width>>4;
  y=mpi->MbHeight=height>>4;
  mpi->MbMode=malloc(x*y*sizeof(int));
400026dc:	80800315 	stw	r2,12(r16)
  // per-chroma block information    (8x8)
  x=mpi->CbWidth=mpi->CbPitch=width>>3;
  y=mpi->CbHeight=height>>3;
  mpi->TotalCoeffC[0]=malloc(x*y*sizeof(int));
400026e0:	000b0c80 	call	4000b0c8 <malloc>
  mpi->TotalCoeffC[1]=malloc(x*y*sizeof(int));
400026e4:	8809883a 	mov	r4,r17
  // per-transform block information (4x4)
  x=mpi->TbWidth=mpi->TbPitch=width>>2;
  y=mpi->TbHeight=height>>2;
  mpi->TotalCoeffL=malloc(x*y*sizeof(int));
400026e8:	94e3383a 	mul	r17,r18,r19
  y=mpi->MbHeight=height>>4;
  mpi->MbMode=malloc(x*y*sizeof(int));
  // per-chroma block information    (8x8)
  x=mpi->CbWidth=mpi->CbPitch=width>>3;
  y=mpi->CbHeight=height>>3;
  mpi->TotalCoeffC[0]=malloc(x*y*sizeof(int));
400026ec:	80800715 	stw	r2,28(r16)
  mpi->TotalCoeffC[1]=malloc(x*y*sizeof(int));
400026f0:	000b0c80 	call	4000b0c8 <malloc>
  // per-transform block information (4x4)
  x=mpi->TbWidth=mpi->TbPitch=width>>2;
  y=mpi->TbHeight=height>>2;
  mpi->TotalCoeffL=malloc(x*y*sizeof(int));
400026f4:	8c63883a 	add	r17,r17,r17
400026f8:	8c63883a 	add	r17,r17,r17
400026fc:	8809883a 	mov	r4,r17
  mpi->MbMode=malloc(x*y*sizeof(int));
  // per-chroma block information    (8x8)
  x=mpi->CbWidth=mpi->CbPitch=width>>3;
  y=mpi->CbHeight=height>>3;
  mpi->TotalCoeffC[0]=malloc(x*y*sizeof(int));
  mpi->TotalCoeffC[1]=malloc(x*y*sizeof(int));
40002700:	80800815 	stw	r2,32(r16)
  // per-transform block information (4x4)
  x=mpi->TbWidth=mpi->TbPitch=width>>2;
40002704:	84800b15 	stw	r18,44(r16)
40002708:	84800915 	stw	r18,36(r16)
  y=mpi->TbHeight=height>>2;
4000270c:	84c00a15 	stw	r19,40(r16)
  mpi->TotalCoeffL=malloc(x*y*sizeof(int));
40002710:	000b0c80 	call	4000b0c8 <malloc>
  mpi->Intra4x4PredMode=malloc(x*y*sizeof(int));
40002714:	8809883a 	mov	r4,r17
  mpi->TotalCoeffC[0]=malloc(x*y*sizeof(int));
  mpi->TotalCoeffC[1]=malloc(x*y*sizeof(int));
  // per-transform block information (4x4)
  x=mpi->TbWidth=mpi->TbPitch=width>>2;
  y=mpi->TbHeight=height>>2;
  mpi->TotalCoeffL=malloc(x*y*sizeof(int));
40002718:	80800c15 	stw	r2,48(r16)
  mpi->Intra4x4PredMode=malloc(x*y*sizeof(int));
4000271c:	000b0c80 	call	4000b0c8 <malloc>
  mpi->MVx=malloc(x*y*sizeof(int));
40002720:	8809883a 	mov	r4,r17
  mpi->TotalCoeffC[1]=malloc(x*y*sizeof(int));
  // per-transform block information (4x4)
  x=mpi->TbWidth=mpi->TbPitch=width>>2;
  y=mpi->TbHeight=height>>2;
  mpi->TotalCoeffL=malloc(x*y*sizeof(int));
  mpi->Intra4x4PredMode=malloc(x*y*sizeof(int));
40002724:	80800d15 	stw	r2,52(r16)
  mpi->MVx=malloc(x*y*sizeof(int));
40002728:	000b0c80 	call	4000b0c8 <malloc>
  mpi->MVy=malloc(x*y*sizeof(int));
4000272c:	8809883a 	mov	r4,r17
  // per-transform block information (4x4)
  x=mpi->TbWidth=mpi->TbPitch=width>>2;
  y=mpi->TbHeight=height>>2;
  mpi->TotalCoeffL=malloc(x*y*sizeof(int));
  mpi->Intra4x4PredMode=malloc(x*y*sizeof(int));
  mpi->MVx=malloc(x*y*sizeof(int));
40002730:	80800e15 	stw	r2,56(r16)
  mpi->MVy=malloc(x*y*sizeof(int));
40002734:	000b0c80 	call	4000b0c8 <malloc>
40002738:	80800f15 	stw	r2,60(r16)
  return mpi;
}
4000273c:	8005883a 	mov	r2,r16
40002740:	dfc00417 	ldw	ra,16(sp)
40002744:	dcc00317 	ldw	r19,12(sp)
40002748:	dc800217 	ldw	r18,8(sp)
4000274c:	dc400117 	ldw	r17,4(sp)
40002750:	dc000017 	ldw	r16,0(sp)
40002754:	dec00504 	addi	sp,sp,20
40002758:	f800283a 	ret

4000275c <clear_mode_pred_info>:

void clear_mode_pred_info(mode_pred_info *mpi) {
  if(!mpi) return;
4000275c:	20004926 	beq	r4,zero,40002884 <clear_mode_pred_info+0x128>
  mpi->MVx=malloc(x*y*sizeof(int));
  mpi->MVy=malloc(x*y*sizeof(int));
  return mpi;
}

void clear_mode_pred_info(mode_pred_info *mpi) {
40002760:	defffe04 	addi	sp,sp,-8
40002764:	dc000015 	stw	r16,0(sp)
40002768:	2021883a 	mov	r16,r4
  if(!mpi) return;
  if(mpi->MbMode)           memset(mpi->MbMode,0xFF,mpi->MbPitch*mpi->MbHeight*sizeof(int));
4000276c:	21000317 	ldw	r4,12(r4)
  mpi->MVx=malloc(x*y*sizeof(int));
  mpi->MVy=malloc(x*y*sizeof(int));
  return mpi;
}

void clear_mode_pred_info(mode_pred_info *mpi) {
40002770:	dfc00115 	stw	ra,4(sp)
  if(!mpi) return;
  if(mpi->MbMode)           memset(mpi->MbMode,0xFF,mpi->MbPitch*mpi->MbHeight*sizeof(int));
40002774:	20000726 	beq	r4,zero,40002794 <clear_mode_pred_info+0x38>
40002778:	81800217 	ldw	r6,8(r16)
4000277c:	80800117 	ldw	r2,4(r16)
40002780:	01403fc4 	movi	r5,255
40002784:	308d383a 	mul	r6,r6,r2
40002788:	318d883a 	add	r6,r6,r6
4000278c:	318d883a 	add	r6,r6,r6
40002790:	000ba440 	call	4000ba44 <memset>
  if(mpi->TotalCoeffC[0])   memset(mpi->TotalCoeffC[0],0,mpi->CbPitch*mpi->CbHeight*sizeof(int));
40002794:	81000717 	ldw	r4,28(r16)
40002798:	20000726 	beq	r4,zero,400027b8 <clear_mode_pred_info+0x5c>
4000279c:	81800617 	ldw	r6,24(r16)
400027a0:	80800517 	ldw	r2,20(r16)
400027a4:	000b883a 	mov	r5,zero
400027a8:	308d383a 	mul	r6,r6,r2
400027ac:	318d883a 	add	r6,r6,r6
400027b0:	318d883a 	add	r6,r6,r6
400027b4:	000ba440 	call	4000ba44 <memset>
  if(mpi->TotalCoeffC[1])   memset(mpi->TotalCoeffC[1],0,mpi->CbPitch*mpi->CbHeight*sizeof(int));
400027b8:	81000817 	ldw	r4,32(r16)
400027bc:	20000726 	beq	r4,zero,400027dc <clear_mode_pred_info+0x80>
400027c0:	81800617 	ldw	r6,24(r16)
400027c4:	80800517 	ldw	r2,20(r16)
400027c8:	000b883a 	mov	r5,zero
400027cc:	308d383a 	mul	r6,r6,r2
400027d0:	318d883a 	add	r6,r6,r6
400027d4:	318d883a 	add	r6,r6,r6
400027d8:	000ba440 	call	4000ba44 <memset>
  if(mpi->TotalCoeffL)      memset(mpi->TotalCoeffL,0,mpi->TbPitch*mpi->TbHeight*sizeof(int));
400027dc:	81000c17 	ldw	r4,48(r16)
400027e0:	20000726 	beq	r4,zero,40002800 <clear_mode_pred_info+0xa4>
400027e4:	81800b17 	ldw	r6,44(r16)
400027e8:	80800a17 	ldw	r2,40(r16)
400027ec:	000b883a 	mov	r5,zero
400027f0:	308d383a 	mul	r6,r6,r2
400027f4:	318d883a 	add	r6,r6,r6
400027f8:	318d883a 	add	r6,r6,r6
400027fc:	000ba440 	call	4000ba44 <memset>
  if(mpi->Intra4x4PredMode) memset(mpi->Intra4x4PredMode,0xFF,mpi->TbPitch*mpi->TbHeight*sizeof(int));
40002800:	81000d17 	ldw	r4,52(r16)
40002804:	20000726 	beq	r4,zero,40002824 <clear_mode_pred_info+0xc8>
40002808:	81800b17 	ldw	r6,44(r16)
4000280c:	80800a17 	ldw	r2,40(r16)
40002810:	01403fc4 	movi	r5,255
40002814:	308d383a 	mul	r6,r6,r2
40002818:	318d883a 	add	r6,r6,r6
4000281c:	318d883a 	add	r6,r6,r6
40002820:	000ba440 	call	4000ba44 <memset>
  if(mpi->MVx)              memset(mpi->MVx,MV_NA&0xFF,mpi->TbPitch*mpi->TbHeight*sizeof(int));
40002824:	81000e17 	ldw	r4,56(r16)
40002828:	20000726 	beq	r4,zero,40002848 <clear_mode_pred_info+0xec>
4000282c:	81800b17 	ldw	r6,44(r16)
40002830:	80800a17 	ldw	r2,40(r16)
40002834:	01402004 	movi	r5,128
40002838:	308d383a 	mul	r6,r6,r2
4000283c:	318d883a 	add	r6,r6,r6
40002840:	318d883a 	add	r6,r6,r6
40002844:	000ba440 	call	4000ba44 <memset>
  if(mpi->MVy)              memset(mpi->MVy,MV_NA&0xFF,mpi->TbPitch*mpi->TbHeight*sizeof(int));
40002848:	81000f17 	ldw	r4,60(r16)
4000284c:	20000a26 	beq	r4,zero,40002878 <clear_mode_pred_info+0x11c>
40002850:	81800b17 	ldw	r6,44(r16)
40002854:	80800a17 	ldw	r2,40(r16)
40002858:	01402004 	movi	r5,128
4000285c:	308d383a 	mul	r6,r6,r2
40002860:	318d883a 	add	r6,r6,r6
40002864:	318d883a 	add	r6,r6,r6
}
40002868:	dfc00117 	ldw	ra,4(sp)
4000286c:	dc000017 	ldw	r16,0(sp)
40002870:	dec00204 	addi	sp,sp,8
  if(mpi->TotalCoeffC[0])   memset(mpi->TotalCoeffC[0],0,mpi->CbPitch*mpi->CbHeight*sizeof(int));
  if(mpi->TotalCoeffC[1])   memset(mpi->TotalCoeffC[1],0,mpi->CbPitch*mpi->CbHeight*sizeof(int));
  if(mpi->TotalCoeffL)      memset(mpi->TotalCoeffL,0,mpi->TbPitch*mpi->TbHeight*sizeof(int));
  if(mpi->Intra4x4PredMode) memset(mpi->Intra4x4PredMode,0xFF,mpi->TbPitch*mpi->TbHeight*sizeof(int));
  if(mpi->MVx)              memset(mpi->MVx,MV_NA&0xFF,mpi->TbPitch*mpi->TbHeight*sizeof(int));
  if(mpi->MVy)              memset(mpi->MVy,MV_NA&0xFF,mpi->TbPitch*mpi->TbHeight*sizeof(int));
40002874:	000ba441 	jmpi	4000ba44 <memset>
}
40002878:	dfc00117 	ldw	ra,4(sp)
4000287c:	dc000017 	ldw	r16,0(sp)
40002880:	dec00204 	addi	sp,sp,8
40002884:	f800283a 	ret

40002888 <free_mode_pred_info>:

void free_mode_pred_info(mode_pred_info *mpi) {
  if(!mpi) return;
40002888:	20001e26 	beq	r4,zero,40002904 <free_mode_pred_info+0x7c>
  if(mpi->Intra4x4PredMode) memset(mpi->Intra4x4PredMode,0xFF,mpi->TbPitch*mpi->TbHeight*sizeof(int));
  if(mpi->MVx)              memset(mpi->MVx,MV_NA&0xFF,mpi->TbPitch*mpi->TbHeight*sizeof(int));
  if(mpi->MVy)              memset(mpi->MVy,MV_NA&0xFF,mpi->TbPitch*mpi->TbHeight*sizeof(int));
}

void free_mode_pred_info(mode_pred_info *mpi) {
4000288c:	defffe04 	addi	sp,sp,-8
40002890:	dc000015 	stw	r16,0(sp)
40002894:	2021883a 	mov	r16,r4
  if(!mpi) return;
  if(mpi->MbMode)           free(mpi->MbMode);
40002898:	21000317 	ldw	r4,12(r4)
  if(mpi->Intra4x4PredMode) memset(mpi->Intra4x4PredMode,0xFF,mpi->TbPitch*mpi->TbHeight*sizeof(int));
  if(mpi->MVx)              memset(mpi->MVx,MV_NA&0xFF,mpi->TbPitch*mpi->TbHeight*sizeof(int));
  if(mpi->MVy)              memset(mpi->MVy,MV_NA&0xFF,mpi->TbPitch*mpi->TbHeight*sizeof(int));
}

void free_mode_pred_info(mode_pred_info *mpi) {
4000289c:	dfc00115 	stw	ra,4(sp)
  if(!mpi) return;
  if(mpi->MbMode)           free(mpi->MbMode);
400028a0:	20000126 	beq	r4,zero,400028a8 <free_mode_pred_info+0x20>
400028a4:	000b0dc0 	call	4000b0dc <free>
  if(mpi->TotalCoeffC[0])   free(mpi->TotalCoeffC[0]);
400028a8:	81000717 	ldw	r4,28(r16)
400028ac:	20000126 	beq	r4,zero,400028b4 <free_mode_pred_info+0x2c>
400028b0:	000b0dc0 	call	4000b0dc <free>
  if(mpi->TotalCoeffC[1])   free(mpi->TotalCoeffC[1]);
400028b4:	81000817 	ldw	r4,32(r16)
400028b8:	20000126 	beq	r4,zero,400028c0 <free_mode_pred_info+0x38>
400028bc:	000b0dc0 	call	4000b0dc <free>
  if(mpi->TotalCoeffL)      free(mpi->TotalCoeffL);
400028c0:	81000c17 	ldw	r4,48(r16)
400028c4:	20000126 	beq	r4,zero,400028cc <free_mode_pred_info+0x44>
400028c8:	000b0dc0 	call	4000b0dc <free>
  if(mpi->Intra4x4PredMode) free(mpi->Intra4x4PredMode);
400028cc:	81000d17 	ldw	r4,52(r16)
400028d0:	20000126 	beq	r4,zero,400028d8 <free_mode_pred_info+0x50>
400028d4:	000b0dc0 	call	4000b0dc <free>
  if(mpi->MVx)              free(mpi->MVx);
400028d8:	81000e17 	ldw	r4,56(r16)
400028dc:	20000126 	beq	r4,zero,400028e4 <free_mode_pred_info+0x5c>
400028e0:	000b0dc0 	call	4000b0dc <free>
  if(mpi->MVy)              free(mpi->MVy);
400028e4:	81000f17 	ldw	r4,60(r16)
400028e8:	20000126 	beq	r4,zero,400028f0 <free_mode_pred_info+0x68>
400028ec:	000b0dc0 	call	4000b0dc <free>
  free(mpi);
400028f0:	8009883a 	mov	r4,r16
}
400028f4:	dfc00117 	ldw	ra,4(sp)
400028f8:	dc000017 	ldw	r16,0(sp)
400028fc:	dec00204 	addi	sp,sp,8
  if(mpi->TotalCoeffC[1])   free(mpi->TotalCoeffC[1]);
  if(mpi->TotalCoeffL)      free(mpi->TotalCoeffL);
  if(mpi->Intra4x4PredMode) free(mpi->Intra4x4PredMode);
  if(mpi->MVx)              free(mpi->MVx);
  if(mpi->MVy)              free(mpi->MVy);
  free(mpi);
40002900:	000b0dc1 	jmpi	4000b0dc <free>
40002904:	f800283a 	ret

40002908 <get_mb_mode>:


///// MbMode retrieval /////

int get_mb_mode(mode_pred_info *mpi, int mb_x, int mb_y) {
  if(mb_x<0 || mb_y<0) return -1;
40002908:	28000a16 	blt	r5,zero,40002934 <get_mb_mode+0x2c>
4000290c:	30000916 	blt	r6,zero,40002934 <get_mb_mode+0x2c>
  return ModePredInfo_MbMode(mpi,mb_x,mb_y);
40002910:	20800217 	ldw	r2,8(r4)
40002914:	20c00317 	ldw	r3,12(r4)
40002918:	308d383a 	mul	r6,r6,r2
4000291c:	314b883a 	add	r5,r6,r5
40002920:	294b883a 	add	r5,r5,r5
40002924:	294b883a 	add	r5,r5,r5
40002928:	194b883a 	add	r5,r3,r5
4000292c:	28800017 	ldw	r2,0(r5)
40002930:	f800283a 	ret


///// MbMode retrieval /////

int get_mb_mode(mode_pred_info *mpi, int mb_x, int mb_y) {
  if(mb_x<0 || mb_y<0) return -1;
40002934:	00bfffc4 	movi	r2,-1
  return ModePredInfo_MbMode(mpi,mb_x,mb_y);
}
40002938:	f800283a 	ret

4000293c <get_luma_nC>:
  if(x<0 || y<0) return -1;
  return ModePredInfo_TotalCoeffC(mpi,x>>3,y>>3,iCbCr);
}

int get_luma_nC(mode_pred_info *mpi, int x, int y) {
  int nA=get_luma_nN(mpi,x-4,y);
4000293c:	28bfff04 	addi	r2,r5,-4


///// nC / TotalCoeff stuff /////

static inline int get_luma_nN(mode_pred_info *mpi, int x, int y) {
  if(x<0 || y<0) return -1;
40002940:	10002416 	blt	r2,zero,400029d4 <get_luma_nC+0x98>
40002944:	30002716 	blt	r6,zero,400029e4 <get_luma_nC+0xa8>
  return ModePredInfo_TotalCoeffL(mpi,x>>2,y>>2);
40002948:	3011d0ba 	srai	r8,r6,2
4000294c:	21c00b17 	ldw	r7,44(r4)
40002950:	1007d0ba 	srai	r3,r2,2
40002954:	22400c17 	ldw	r9,48(r4)
40002958:	41c5383a 	mul	r2,r8,r7
4000295c:	10c5883a 	add	r2,r2,r3
40002960:	1085883a 	add	r2,r2,r2
40002964:	1085883a 	add	r2,r2,r2
40002968:	4885883a 	add	r2,r9,r2
4000296c:	10800017 	ldw	r2,0(r2)


///// nC / TotalCoeff stuff /////

static inline int get_luma_nN(mode_pred_info *mpi, int x, int y) {
  if(x<0 || y<0) return -1;
40002970:	28001516 	blt	r5,zero,400029c8 <get_luma_nC+0x8c>
  return ModePredInfo_TotalCoeffC(mpi,x>>3,y>>3,iCbCr);
}

int get_luma_nC(mode_pred_info *mpi, int x, int y) {
  int nA=get_luma_nN(mpi,x-4,y);
  int nB=get_luma_nN(mpi,x,y-4);
40002974:	31bfff04 	addi	r6,r6,-4


///// nC / TotalCoeff stuff /////

static inline int get_luma_nN(mode_pred_info *mpi, int x, int y) {
  if(x<0 || y<0) return -1;
40002978:	30001316 	blt	r6,zero,400029c8 <get_luma_nC+0x8c>
  return ModePredInfo_TotalCoeffL(mpi,x>>2,y>>2);
4000297c:	21c00b17 	ldw	r7,44(r4)
40002980:	300dd0ba 	srai	r6,r6,2
40002984:	2807d0ba 	srai	r3,r5,2
40002988:	21000c17 	ldw	r4,48(r4)
4000298c:	31cd383a 	mul	r6,r6,r7
40002990:	30cb883a 	add	r5,r6,r3
40002994:	294b883a 	add	r5,r5,r5
40002998:	294b883a 	add	r5,r5,r5
4000299c:	214b883a 	add	r5,r4,r5
400029a0:	28c00017 	ldw	r3,0(r5)
}

int get_luma_nC(mode_pred_info *mpi, int x, int y) {
  int nA=get_luma_nN(mpi,x-4,y);
  int nB=get_luma_nN(mpi,x,y-4);
  if(nA<0  && nB<0)  return 0;
400029a4:	10000516 	blt	r2,zero,400029bc <get_luma_nC+0x80>
  if(nA>=0 && nB>=0) return (nA+nB+1)>>1;
400029a8:	18000616 	blt	r3,zero,400029c4 <get_luma_nC+0x88>
400029ac:	1885883a 	add	r2,r3,r2
400029b0:	10800044 	addi	r2,r2,1
400029b4:	1005d07a 	srai	r2,r2,1
400029b8:	f800283a 	ret
400029bc:	1805883a 	mov	r2,r3
400029c0:	18000216 	blt	r3,zero,400029cc <get_luma_nC+0x90>
  if(nA>=0) return nA;
       else return nB;
}
400029c4:	f800283a 	ret
400029c8:	103ffe0e 	bge	r2,zero,400029c4 <__alt_data_end+0xc00029c4>
400029cc:	0005883a 	mov	r2,zero
400029d0:	f800283a 	ret
  return ModePredInfo_TotalCoeffC(mpi,x>>3,y>>3,iCbCr);
}

int get_luma_nC(mode_pred_info *mpi, int x, int y) {
  int nA=get_luma_nN(mpi,x-4,y);
  int nB=get_luma_nN(mpi,x,y-4);
400029d4:	31bfff04 	addi	r6,r6,-4


///// nC / TotalCoeff stuff /////

static inline int get_luma_nN(mode_pred_info *mpi, int x, int y) {
  if(x<0 || y<0) return -1;
400029d8:	283ffc16 	blt	r5,zero,400029cc <__alt_data_end+0xc00029cc>
400029dc:	00bfffc4 	movi	r2,-1
400029e0:	003fe506 	br	40002978 <__alt_data_end+0xc0002978>
400029e4:	00bfffc4 	movi	r2,-1
400029e8:	003fe106 	br	40002970 <__alt_data_end+0xc0002970>

400029ec <get_chroma_nC>:
  if(nA>=0) return nA;
       else return nB;
}

int get_chroma_nC(mode_pred_info *mpi, int x, int y, int iCbCr) {
  int nA=get_chroma_nN(mpi,x-8,y,iCbCr);
400029ec:	28bffe04 	addi	r2,r5,-8
  if(x<0 || y<0) return -1;
  return ModePredInfo_TotalCoeffL(mpi,x>>2,y>>2);
}

static inline int get_chroma_nN(mode_pred_info *mpi, int x, int y, int iCbCr) {
  if(x<0 || y<0) return -1;
400029f0:	10002c16 	blt	r2,zero,40002aa4 <get_chroma_nC+0xb8>
400029f4:	30002f16 	blt	r6,zero,40002ab4 <get_chroma_nC+0xc8>
  return ModePredInfo_TotalCoeffC(mpi,x>>3,y>>3,iCbCr);
400029f8:	3011d0fa 	srai	r8,r6,3
400029fc:	22400617 	ldw	r9,24(r4)
40002a00:	38c001c4 	addi	r3,r7,7
40002a04:	18c7883a 	add	r3,r3,r3
40002a08:	4251383a 	mul	r8,r8,r9
40002a0c:	1005d0fa 	srai	r2,r2,3
40002a10:	18c7883a 	add	r3,r3,r3
40002a14:	20c7883a 	add	r3,r4,r3
40002a18:	4085883a 	add	r2,r8,r2
40002a1c:	18c00017 	ldw	r3,0(r3)
40002a20:	1085883a 	add	r2,r2,r2
40002a24:	1085883a 	add	r2,r2,r2
40002a28:	1885883a 	add	r2,r3,r2
40002a2c:	10800017 	ldw	r2,0(r2)
  if(x<0 || y<0) return -1;
  return ModePredInfo_TotalCoeffL(mpi,x>>2,y>>2);
}

static inline int get_chroma_nN(mode_pred_info *mpi, int x, int y, int iCbCr) {
  if(x<0 || y<0) return -1;
40002a30:	28001916 	blt	r5,zero,40002a98 <get_chroma_nC+0xac>
       else return nB;
}

int get_chroma_nC(mode_pred_info *mpi, int x, int y, int iCbCr) {
  int nA=get_chroma_nN(mpi,x-8,y,iCbCr);
  int nB=get_chroma_nN(mpi,x,y-8,iCbCr);
40002a34:	31bffe04 	addi	r6,r6,-8
  if(x<0 || y<0) return -1;
  return ModePredInfo_TotalCoeffL(mpi,x>>2,y>>2);
}

static inline int get_chroma_nN(mode_pred_info *mpi, int x, int y, int iCbCr) {
  if(x<0 || y<0) return -1;
40002a38:	30001716 	blt	r6,zero,40002a98 <get_chroma_nC+0xac>
  return ModePredInfo_TotalCoeffC(mpi,x>>3,y>>3,iCbCr);
40002a3c:	20c00617 	ldw	r3,24(r4)
40002a40:	300dd0fa 	srai	r6,r6,3
40002a44:	39c001c4 	addi	r7,r7,7
40002a48:	39cf883a 	add	r7,r7,r7
40002a4c:	30cd383a 	mul	r6,r6,r3
40002a50:	280bd0fa 	srai	r5,r5,3
40002a54:	39cf883a 	add	r7,r7,r7
40002a58:	21c9883a 	add	r4,r4,r7
40002a5c:	20c00017 	ldw	r3,0(r4)
40002a60:	314b883a 	add	r5,r6,r5
40002a64:	294b883a 	add	r5,r5,r5
40002a68:	294b883a 	add	r5,r5,r5
40002a6c:	194b883a 	add	r5,r3,r5
40002a70:	28c00017 	ldw	r3,0(r5)
}

int get_chroma_nC(mode_pred_info *mpi, int x, int y, int iCbCr) {
  int nA=get_chroma_nN(mpi,x-8,y,iCbCr);
  int nB=get_chroma_nN(mpi,x,y-8,iCbCr);
  if(nA<0  && nB<0)  return 0;
40002a74:	10000516 	blt	r2,zero,40002a8c <get_chroma_nC+0xa0>
  if(nA>=0 && nB>=0) return (nA+nB+1)>>1;
40002a78:	18000616 	blt	r3,zero,40002a94 <get_chroma_nC+0xa8>
40002a7c:	1885883a 	add	r2,r3,r2
40002a80:	10800044 	addi	r2,r2,1
40002a84:	1005d07a 	srai	r2,r2,1
40002a88:	f800283a 	ret
40002a8c:	1805883a 	mov	r2,r3
40002a90:	18000216 	blt	r3,zero,40002a9c <get_chroma_nC+0xb0>
  if(nA>=0) return nA;
       else return nB;
}
40002a94:	f800283a 	ret
40002a98:	103ffe0e 	bge	r2,zero,40002a94 <__alt_data_end+0xc0002a94>
40002a9c:	0005883a 	mov	r2,zero
40002aa0:	f800283a 	ret
       else return nB;
}

int get_chroma_nC(mode_pred_info *mpi, int x, int y, int iCbCr) {
  int nA=get_chroma_nN(mpi,x-8,y,iCbCr);
  int nB=get_chroma_nN(mpi,x,y-8,iCbCr);
40002aa4:	31bffe04 	addi	r6,r6,-8
  if(x<0 || y<0) return -1;
  return ModePredInfo_TotalCoeffL(mpi,x>>2,y>>2);
}

static inline int get_chroma_nN(mode_pred_info *mpi, int x, int y, int iCbCr) {
  if(x<0 || y<0) return -1;
40002aa8:	283ffc16 	blt	r5,zero,40002a9c <__alt_data_end+0xc0002a9c>
40002aac:	00bfffc4 	movi	r2,-1
40002ab0:	003fe106 	br	40002a38 <__alt_data_end+0xc0002a38>
40002ab4:	00bfffc4 	movi	r2,-1
40002ab8:	003fdd06 	br	40002a30 <__alt_data_end+0xc0002a30>

40002abc <get_predIntra4x4PredMode>:
  i=ModePredInfo_Intra4x4PredMode(mpi,x>>2,y>>2);
  return i;
}

int get_predIntra4x4PredMode(mode_pred_info *mpi, int x, int y) {
  int A=get_Intra4x4PredModeN(mpi,x-4,y);
40002abc:	28bfff04 	addi	r2,r5,-4

///// Intra_4x4 Prediction Mode Prediction /////

static inline int get_Intra4x4PredModeN(mode_pred_info *mpi, int x, int y) {
  int i;
  if(x<0 || y<0) return -1;  // force Intra_4x4_DC
40002ac0:	10001c16 	blt	r2,zero,40002b34 <get_predIntra4x4PredMode+0x78>
40002ac4:	30001b16 	blt	r6,zero,40002b34 <get_predIntra4x4PredMode+0x78>
  i=ModePredInfo_Intra4x4PredMode(mpi,x>>2,y>>2);
40002ac8:	22000b17 	ldw	r8,44(r4)
40002acc:	300fd0ba 	srai	r7,r6,2
40002ad0:	1007d0ba 	srai	r3,r2,2
40002ad4:	22400d17 	ldw	r9,52(r4)
40002ad8:	3a05383a 	mul	r2,r7,r8
40002adc:	10c5883a 	add	r2,r2,r3
40002ae0:	1085883a 	add	r2,r2,r2
40002ae4:	1085883a 	add	r2,r2,r2
40002ae8:	4885883a 	add	r2,r9,r2
40002aec:	10c00017 	ldw	r3,0(r2)

///// Intra_4x4 Prediction Mode Prediction /////

static inline int get_Intra4x4PredModeN(mode_pred_info *mpi, int x, int y) {
  int i;
  if(x<0 || y<0) return -1;  // force Intra_4x4_DC
40002af0:	28000e16 	blt	r5,zero,40002b2c <get_predIntra4x4PredMode+0x70>
  return i;
}

int get_predIntra4x4PredMode(mode_pred_info *mpi, int x, int y) {
  int A=get_Intra4x4PredModeN(mpi,x-4,y);
  int B=get_Intra4x4PredModeN(mpi,x,y-4);
40002af4:	31bfff04 	addi	r6,r6,-4

///// Intra_4x4 Prediction Mode Prediction /////

static inline int get_Intra4x4PredModeN(mode_pred_info *mpi, int x, int y) {
  int i;
  if(x<0 || y<0) return -1;  // force Intra_4x4_DC
40002af8:	30000c16 	blt	r6,zero,40002b2c <get_predIntra4x4PredMode+0x70>
  i=ModePredInfo_Intra4x4PredMode(mpi,x>>2,y>>2);
40002afc:	300dd0ba 	srai	r6,r6,2
40002b00:	2805d0ba 	srai	r2,r5,2
40002b04:	320d383a 	mul	r6,r6,r8
40002b08:	308b883a 	add	r5,r6,r2
40002b0c:	294b883a 	add	r5,r5,r5
40002b10:	294b883a 	add	r5,r5,r5
40002b14:	494b883a 	add	r5,r9,r5
40002b18:	28800017 	ldw	r2,0(r5)
}

int get_predIntra4x4PredMode(mode_pred_info *mpi, int x, int y) {
  int A=get_Intra4x4PredModeN(mpi,x-4,y);
  int B=get_Intra4x4PredModeN(mpi,x,y-4);
  int mode=(A<B)?A:B;
40002b1c:	1880010e 	bge	r3,r2,40002b24 <get_predIntra4x4PredMode+0x68>
40002b20:	1805883a 	mov	r2,r3
  if(mode<0) mode=2;
40002b24:	10000a16 	blt	r2,zero,40002b50 <get_predIntra4x4PredMode+0x94>
  return mode;
}
40002b28:	f800283a 	ret

///// Intra_4x4 Prediction Mode Prediction /////

static inline int get_Intra4x4PredModeN(mode_pred_info *mpi, int x, int y) {
  int i;
  if(x<0 || y<0) return -1;  // force Intra_4x4_DC
40002b2c:	00bfffc4 	movi	r2,-1
40002b30:	003ffa06 	br	40002b1c <__alt_data_end+0xc0002b1c>
40002b34:	28000616 	blt	r5,zero,40002b50 <get_predIntra4x4PredMode+0x94>
  return i;
}

int get_predIntra4x4PredMode(mode_pred_info *mpi, int x, int y) {
  int A=get_Intra4x4PredModeN(mpi,x-4,y);
  int B=get_Intra4x4PredModeN(mpi,x,y-4);
40002b38:	31bfff04 	addi	r6,r6,-4

///// Intra_4x4 Prediction Mode Prediction /////

static inline int get_Intra4x4PredModeN(mode_pred_info *mpi, int x, int y) {
  int i;
  if(x<0 || y<0) return -1;  // force Intra_4x4_DC
40002b3c:	30000416 	blt	r6,zero,40002b50 <get_predIntra4x4PredMode+0x94>
40002b40:	22400d17 	ldw	r9,52(r4)
40002b44:	22000b17 	ldw	r8,44(r4)
40002b48:	00ffffc4 	movi	r3,-1
40002b4c:	003feb06 	br	40002afc <__alt_data_end+0xc0002afc>

int get_predIntra4x4PredMode(mode_pred_info *mpi, int x, int y) {
  int A=get_Intra4x4PredModeN(mpi,x-4,y);
  int B=get_Intra4x4PredModeN(mpi,x,y-4);
  int mode=(A<B)?A:B;
  if(mode<0) mode=2;
40002b50:	00800084 	movi	r2,2
  return mode;
40002b54:	f800283a 	ret

40002b58 <PredictMV>:

///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
40002b58:	327fffc4 	addi	r9,r6,-1
40002b5c:	4817d0ba 	srai	r11,r9,2
#define Min(a,b) ((a)<(b)?(a):(b))
#define Median(a,b,c) Max(Min(a,b),Min(c,Max(a,b)))

mv PredictMV(mode_pred_info *mpi,
             int org_x, int org_y,
             int width, int height) {
40002b60:	defff904 	addi	sp,sp,-28
40002b64:	dfc00615 	stw	ra,24(sp)
40002b68:	dd400515 	stw	r21,20(sp)
40002b6c:	dd000415 	stw	r20,16(sp)
40002b70:	dcc00315 	stw	r19,12(sp)
40002b74:	dc800215 	stw	r18,8(sp)
40002b78:	dc400115 	stw	r17,4(sp)
40002b7c:	dc000015 	stw	r16,0(sp)
40002b80:	2005883a 	mov	r2,r4
40002b84:	db000717 	ldw	r12,28(sp)
///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
40002b88:	58003d16 	blt	r11,zero,40002c80 <PredictMV+0x128>
40002b8c:	3807d0ba 	srai	r3,r7,2
40002b90:	18003b16 	blt	r3,zero,40002c80 <PredictMV+0x128>
40002b94:	2cc00917 	ldw	r19,36(r5)
40002b98:	5cc0390e 	bge	r11,r19,40002c80 <PredictMV+0x128>
40002b9c:	29000a17 	ldw	r4,40(r5)
40002ba0:	1900370e 	bge	r3,r4,40002c80 <PredictMV+0x128>
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
40002ba4:	2a800b17 	ldw	r10,44(r5)
40002ba8:	2b400e17 	ldw	r13,56(r5)
  res.y=ModePredInfo_MVy(mpi,x,y);
40002bac:	2b800f17 	ldw	r14,60(r5)
static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
40002bb0:	1a87383a 	mul	r3,r3,r10
40002bb4:	1ac7883a 	add	r3,r3,r11
40002bb8:	18c7883a 	add	r3,r3,r3
40002bbc:	18c7883a 	add	r3,r3,r3
40002bc0:	68db883a 	add	r13,r13,r3
40002bc4:	69000017 	ldw	r4,0(r13)
  res.y=ModePredInfo_MVy(mpi,x,y);
40002bc8:	70c7883a 	add	r3,r14,r3
40002bcc:	1a000017 	ldw	r8,0(r3)
  if(res.x==MV_NA) {
40002bd0:	00e02074 	movhi	r3,32897
40002bd4:	18e02004 	addi	r3,r3,-32640
40002bd8:	20c0aa26 	beq	r4,r3,40002e84 <PredictMV+0x32c>

///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
40002bdc:	3013d0ba 	srai	r9,r6,2
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
    res.valid=1;
40002be0:	04000044 	movi	r16,1

///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
40002be4:	38ffffc4 	addi	r3,r7,-1
    res.x=0;
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
40002be8:	8023883a 	mov	r17,r16

///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
40002bec:	181fd0ba 	srai	r15,r3,2
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
40002bf0:	48002b0e 	bge	r9,zero,40002ca0 <PredictMV+0x148>

///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
40002bf4:	3313883a 	add	r9,r6,r12
40002bf8:	4813d0ba 	srai	r9,r9,2
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
40002bfc:	48000516 	blt	r9,zero,40002c14 <PredictMV+0xbc>
40002c00:	78000416 	blt	r15,zero,40002c14 <PredictMV+0xbc>
40002c04:	2cc00917 	ldw	r19,36(r5)
40002c08:	4cc0020e 	bge	r9,r19,40002c14 <PredictMV+0xbc>
40002c0c:	28c00a17 	ldw	r3,40(r5)
40002c10:	78c09416 	blt	r15,r3,40002e64 <PredictMV+0x30c>
    return res;
40002c14:	0025883a 	mov	r18,zero
40002c18:	003f883a 	mov	ra,zero
40002c1c:	002b883a 	mov	r21,zero
40002c20:	0029883a 	mov	r20,zero
///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
40002c24:	58006e16 	blt	r11,zero,40002de0 <PredictMV+0x288>
40002c28:	78006d16 	blt	r15,zero,40002de0 <PredictMV+0x288>
40002c2c:	28c00917 	ldw	r3,36(r5)
40002c30:	58c06b0e 	bge	r11,r3,40002de0 <PredictMV+0x288>
40002c34:	28c00a17 	ldw	r3,40(r5)
40002c38:	78c0690e 	bge	r15,r3,40002de0 <PredictMV+0x288>
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
40002c3c:	28c00b17 	ldw	r3,44(r5)
40002c40:	2a400e17 	ldw	r9,56(r5)
  res.y=ModePredInfo_MVy(mpi,x,y);
40002c44:	2a800f17 	ldw	r10,60(r5)
static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
40002c48:	78c7383a 	mul	r3,r15,r3
40002c4c:	1ac7883a 	add	r3,r3,r11
40002c50:	18c7883a 	add	r3,r3,r3
40002c54:	18c7883a 	add	r3,r3,r3
40002c58:	48d3883a 	add	r9,r9,r3
40002c5c:	4b400017 	ldw	r13,0(r9)
  res.y=ModePredInfo_MVy(mpi,x,y);
40002c60:	50c7883a 	add	r3,r10,r3
40002c64:	1a800017 	ldw	r10,0(r3)
  if(res.x==MV_NA) {
40002c68:	00e02074 	movhi	r3,32897
40002c6c:	18e02004 	addi	r3,r3,-32640
40002c70:	68c0bd26 	beq	r13,r3,40002f68 <PredictMV+0x410>
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
    res.valid=1;
40002c74:	01400044 	movi	r5,1
    res.x=0;
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
40002c78:	2813883a 	mov	r9,r5
40002c7c:	00005c06 	br	40002df0 <PredictMV+0x298>

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
40002c80:	0021883a 	mov	r16,zero
40002c84:	0023883a 	mov	r17,zero
40002c88:	0011883a 	mov	r8,zero
40002c8c:	0009883a 	mov	r4,zero

///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
40002c90:	3013d0ba 	srai	r9,r6,2
40002c94:	38ffffc4 	addi	r3,r7,-1
40002c98:	181fd0ba 	srai	r15,r3,2
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
40002c9c:	483fd516 	blt	r9,zero,40002bf4 <__alt_data_end+0xc0002bf4>
40002ca0:	783fdc16 	blt	r15,zero,40002c14 <__alt_data_end+0xc0002c14>
40002ca4:	2cc00917 	ldw	r19,36(r5)
40002ca8:	4cc0490e 	bge	r9,r19,40002dd0 <PredictMV+0x278>
40002cac:	2a800a17 	ldw	r10,40(r5)
40002cb0:	7a80470e 	bge	r15,r10,40002dd0 <PredictMV+0x278>
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
40002cb4:	2a800b17 	ldw	r10,44(r5)
40002cb8:	2b400e17 	ldw	r13,56(r5)
  res.y=ModePredInfo_MVy(mpi,x,y);
40002cbc:	2b800f17 	ldw	r14,60(r5)
static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
40002cc0:	7aa5383a 	mul	r18,r15,r10
40002cc4:	9253883a 	add	r9,r18,r9
40002cc8:	4a53883a 	add	r9,r9,r9
40002ccc:	4a53883a 	add	r9,r9,r9
40002cd0:	6a65883a 	add	r18,r13,r9
40002cd4:	94800017 	ldw	r18,0(r18)
  res.y=ModePredInfo_MVy(mpi,x,y);
40002cd8:	7253883a 	add	r9,r14,r9
40002cdc:	4fc00017 	ldw	ra,0(r9)
  if(res.x==MV_NA) {
40002ce0:	02602074 	movhi	r9,32897
40002ce4:	4a602004 	addi	r9,r9,-32640
40002ce8:	92407626 	beq	r18,r9,40002ec4 <PredictMV+0x36c>
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
    res.valid=1;
40002cec:	05000044 	movi	r20,1
    res.x=0;
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
40002cf0:	a02b883a 	mov	r21,r20

///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
40002cf4:	3313883a 	add	r9,r6,r12
40002cf8:	4813d0ba 	srai	r9,r9,2
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
40002cfc:	483fc916 	blt	r9,zero,40002c24 <__alt_data_end+0xc0002c24>
40002d00:	4cffc80e 	bge	r9,r19,40002c24 <__alt_data_end+0xc0002c24>
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
40002d04:	7a95383a 	mul	r10,r15,r10
40002d08:	5255883a 	add	r10,r10,r9
40002d0c:	5295883a 	add	r10,r10,r10
40002d10:	5295883a 	add	r10,r10,r10
40002d14:	6a9b883a 	add	r13,r13,r10
  res.y=ModePredInfo_MVy(mpi,x,y);
40002d18:	7287883a 	add	r3,r14,r10
static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
40002d1c:	6b400017 	ldw	r13,0(r13)
  res.y=ModePredInfo_MVy(mpi,x,y);
40002d20:	1a800017 	ldw	r10,0(r3)
  if(res.x==MV_NA) {
40002d24:	00e02074 	movhi	r3,32897
40002d28:	18e02004 	addi	r3,r3,-32640
40002d2c:	68c07c26 	beq	r13,r3,40002f20 <PredictMV+0x3c8>
    res.x=0;
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
40002d30:	02400044 	movi	r9,1
printf("PredictMV @ %d,%d + %dx%d:",org_x,org_y,width,height);if(A.valid)
printf(" A=%d,%d",A.x,A.y);if(B.valid) printf(" B=%d,%d",B.x,B.y);if(C.valid)
printf(" C/D=%d,%d",C.x,C.y);printf("\n");
*/
  // Directional segmentation prediction for 8x16 / 16x8 partitions
  if(width==16 && height==8) {
40002d34:	00c00404 	movi	r3,16
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
    res.valid=1;
40002d38:	480b883a 	mov	r5,r9
printf("PredictMV @ %d,%d + %dx%d:",org_x,org_y,width,height);if(A.valid)
printf(" A=%d,%d",A.x,A.y);if(B.valid) printf(" B=%d,%d",B.x,B.y);if(C.valid)
printf(" C/D=%d,%d",C.x,C.y);printf("\n");
*/
  // Directional segmentation prediction for 8x16 / 16x8 partitions
  if(width==16 && height==8) {
40002d3c:	60c02e1e 	bne	r12,r3,40002df8 <PredictMV+0x2a0>
40002d40:	d9800817 	ldw	r6,32(sp)
40002d44:	00c00204 	movi	r3,8
40002d48:	30c03526 	beq	r6,r3,40002e20 <PredictMV+0x2c8>
    if(org_x&8) { if(C.valid) return C; }
           else { if(A.valid) return A; }
  }
  // If one and only one of the candidate predictors is available and valid,
  // it is returned
              if(!B.valid && !C.valid) return A;
40002d4c:	a0003726 	beq	r20,zero,40002e2c <PredictMV+0x2d4>
  if(!A.valid &&  B.valid && !C.valid) return B;
40002d50:	80006d26 	beq	r16,zero,40002f08 <PredictMV+0x3b0>
  if(!A.valid && !B.valid &&  C.valid) return C;
  // median prediction
  res.x=Median(A.x,B.x,C.x);
  res.y=Median(A.y,B.y,C.y);
  return res;
40002d54:	2007883a 	mov	r3,r4
40002d58:	2480010e 	bge	r4,r18,40002d60 <PredictMV+0x208>
40002d5c:	9007883a 	mov	r3,r18
40002d60:	68c0010e 	bge	r13,r3,40002d68 <PredictMV+0x210>
40002d64:	6807883a 	mov	r3,r13
40002d68:	9100010e 	bge	r18,r4,40002d70 <PredictMV+0x218>
40002d6c:	9009883a 	mov	r4,r18
40002d70:	1900010e 	bge	r3,r4,40002d78 <PredictMV+0x220>
40002d74:	2007883a 	mov	r3,r4
40002d78:	10c00015 	stw	r3,0(r2)
40002d7c:	4007883a 	mov	r3,r8
40002d80:	47c0010e 	bge	r8,ra,40002d88 <PredictMV+0x230>
40002d84:	f807883a 	mov	r3,ra
40002d88:	50c0010e 	bge	r10,r3,40002d90 <PredictMV+0x238>
40002d8c:	5007883a 	mov	r3,r10
40002d90:	fa00010e 	bge	ra,r8,40002d98 <PredictMV+0x240>
40002d94:	f811883a 	mov	r8,ra
40002d98:	1a00010e 	bge	r3,r8,40002da0 <PredictMV+0x248>
40002d9c:	4007883a 	mov	r3,r8
40002da0:	10c00115 	stw	r3,4(r2)
40002da4:	10000215 	stw	zero,8(r2)
40002da8:	10000315 	stw	zero,12(r2)
}
40002dac:	dfc00617 	ldw	ra,24(sp)
40002db0:	dd400517 	ldw	r21,20(sp)
40002db4:	dd000417 	ldw	r20,16(sp)
40002db8:	dcc00317 	ldw	r19,12(sp)
40002dbc:	dc800217 	ldw	r18,8(sp)
40002dc0:	dc400117 	ldw	r17,4(sp)
40002dc4:	dc000017 	ldw	r16,0(sp)
40002dc8:	dec00704 	addi	sp,sp,28
40002dcc:	f800283a 	ret

///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
40002dd0:	3313883a 	add	r9,r6,r12
40002dd4:	4813d0ba 	srai	r9,r9,2
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
40002dd8:	483f8b0e 	bge	r9,zero,40002c08 <__alt_data_end+0xc0002c08>
40002ddc:	003f8d06 	br	40002c14 <__alt_data_end+0xc0002c14>
    return res;
40002de0:	000b883a 	mov	r5,zero
40002de4:	0013883a 	mov	r9,zero
40002de8:	0015883a 	mov	r10,zero
40002dec:	001b883a 	mov	r13,zero
printf("PredictMV @ %d,%d + %dx%d:",org_x,org_y,width,height);if(A.valid)
printf(" A=%d,%d",A.x,A.y);if(B.valid) printf(" B=%d,%d",B.x,B.y);if(C.valid)
printf(" C/D=%d,%d",C.x,C.y);printf("\n");
*/
  // Directional segmentation prediction for 8x16 / 16x8 partitions
  if(width==16 && height==8) {
40002df0:	00c00404 	movi	r3,16
40002df4:	60ffd226 	beq	r12,r3,40002d40 <__alt_data_end+0xc0002d40>
    if(org_y&8) { if(A.valid) return A; }
           else { if(B.valid) return B; }
  }
  if(width==8 && height==16) {
40002df8:	01c00204 	movi	r7,8
40002dfc:	61ffd31e 	bne	r12,r7,40002d4c <__alt_data_end+0xc0002d4c>
40002e00:	d9c00817 	ldw	r7,32(sp)
40002e04:	38ffd11e 	bne	r7,r3,40002d4c <__alt_data_end+0xc0002d4c>
    if(org_x&8) { if(C.valid) return C; }
40002e08:	3180020c 	andi	r6,r6,8
40002e0c:	30000f26 	beq	r6,zero,40002e4c <PredictMV+0x2f4>
40002e10:	2800081e 	bne	r5,zero,40002e34 <PredictMV+0x2dc>
           else { if(A.valid) return A; }
  }
  // If one and only one of the candidate predictors is available and valid,
  // it is returned
              if(!B.valid && !C.valid) return A;
40002e14:	a0000e26 	beq	r20,zero,40002e50 <PredictMV+0x2f8>
  if(!A.valid &&  B.valid && !C.valid) return B;
40002e18:	803fce1e 	bne	r16,zero,40002d54 <__alt_data_end+0xc0002d54>
40002e1c:	00003b06 	br	40002f0c <PredictMV+0x3b4>
printf(" A=%d,%d",A.x,A.y);if(B.valid) printf(" B=%d,%d",B.x,B.y);if(C.valid)
printf(" C/D=%d,%d",C.x,C.y);printf("\n");
*/
  // Directional segmentation prediction for 8x16 / 16x8 partitions
  if(width==16 && height==8) {
    if(org_y&8) { if(A.valid) return A; }
40002e20:	38ce703a 	and	r7,r7,r3
40002e24:	3800091e 	bne	r7,zero,40002e4c <PredictMV+0x2f4>
           else { if(B.valid) return B; }
40002e28:	a000381e 	bne	r20,zero,40002f0c <PredictMV+0x3b4>
    if(org_x&8) { if(C.valid) return C; }
           else { if(A.valid) return A; }
  }
  // If one and only one of the candidate predictors is available and valid,
  // it is returned
              if(!B.valid && !C.valid) return A;
40002e2c:	28000826 	beq	r5,zero,40002e50 <PredictMV+0x2f8>
  if(!A.valid &&  B.valid && !C.valid) return B;
40002e30:	803fc81e 	bne	r16,zero,40002d54 <__alt_data_end+0xc0002d54>
  if(!A.valid && !B.valid &&  C.valid) return C;
40002e34:	00c00044 	movi	r3,1
40002e38:	13400015 	stw	r13,0(r2)
40002e3c:	12800115 	stw	r10,4(r2)
40002e40:	12400215 	stw	r9,8(r2)
40002e44:	10c00315 	stw	r3,12(r2)
40002e48:	003fd806 	br	40002dac <__alt_data_end+0xc0002dac>
    if(org_y&8) { if(A.valid) return A; }
           else { if(B.valid) return B; }
  }
  if(width==8 && height==16) {
    if(org_x&8) { if(C.valid) return C; }
           else { if(A.valid) return A; }
40002e4c:	80002d26 	beq	r16,zero,40002f04 <PredictMV+0x3ac>
  }
  // If one and only one of the candidate predictors is available and valid,
  // it is returned
              if(!B.valid && !C.valid) return A;
40002e50:	11000015 	stw	r4,0(r2)
40002e54:	12000115 	stw	r8,4(r2)
40002e58:	14400215 	stw	r17,8(r2)
40002e5c:	14000315 	stw	r16,12(r2)
40002e60:	003fd206 	br	40002dac <__alt_data_end+0xc0002dac>
40002e64:	2a800b17 	ldw	r10,44(r5)
40002e68:	2b400e17 	ldw	r13,56(r5)
40002e6c:	2b800f17 	ldw	r14,60(r5)

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
40002e70:	0025883a 	mov	r18,zero
40002e74:	003f883a 	mov	ra,zero
40002e78:	002b883a 	mov	r21,zero
40002e7c:	0029883a 	mov	r20,zero
40002e80:	003fa006 	br	40002d04 <__alt_data_end+0xc0002d04>
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
40002e84:	3811d13a 	srai	r8,r7,4
40002e88:	29000217 	ldw	r4,8(r5)
40002e8c:	4807d13a 	srai	r3,r9,4
40002e90:	2a800317 	ldw	r10,12(r5)
40002e94:	4113383a 	mul	r9,r8,r4


///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
40002e98:	0021883a 	mov	r16,zero
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
    res.y=0;
40002e9c:	0011883a 	mov	r8,zero
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
40002ea0:	48d3883a 	add	r9,r9,r3
40002ea4:	4a53883a 	add	r9,r9,r9
40002ea8:	4a53883a 	add	r9,r9,r9
40002eac:	5253883a 	add	r9,r10,r9
      res.available=1;
  } else {
    res.available=1;
40002eb0:	4c400017 	ldw	r17,0(r9)
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
40002eb4:	0009883a 	mov	r4,zero
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
40002eb8:	8c7ffec4 	addi	r17,r17,-5
40002ebc:	8c4006b0 	cmpltui	r17,r17,26
40002ec0:	003f7306 	br	40002c90 <__alt_data_end+0xc0002c90>
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
40002ec4:	2d000217 	ldw	r20,8(r5)
40002ec8:	1807d13a 	srai	r3,r3,4
40002ecc:	3013d13a 	srai	r9,r6,4
40002ed0:	2c800317 	ldw	r18,12(r5)
40002ed4:	1d07383a 	mul	r3,r3,r20
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
    res.y=0;
40002ed8:	003f883a 	mov	ra,zero


///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
40002edc:	0029883a 	mov	r20,zero
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
40002ee0:	1a47883a 	add	r3,r3,r9
40002ee4:	18c7883a 	add	r3,r3,r3
40002ee8:	18c7883a 	add	r3,r3,r3
40002eec:	90c7883a 	add	r3,r18,r3
      res.available=1;
  } else {
    res.available=1;
40002ef0:	1d400017 	ldw	r21,0(r3)
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
40002ef4:	0025883a 	mov	r18,zero
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
40002ef8:	ad7ffec4 	addi	r21,r21,-5
40002efc:	ad4006b0 	cmpltui	r21,r21,26
40002f00:	003f7c06 	br	40002cf4 <__alt_data_end+0xc0002cf4>
    if(org_x&8) { if(C.valid) return C; }
           else { if(A.valid) return A; }
  }
  // If one and only one of the candidate predictors is available and valid,
  // it is returned
              if(!B.valid && !C.valid) return A;
40002f04:	a03fc926 	beq	r20,zero,40002e2c <__alt_data_end+0xc0002e2c>
  if(!A.valid &&  B.valid && !C.valid) return B;
40002f08:	283f921e 	bne	r5,zero,40002d54 <__alt_data_end+0xc0002d54>
40002f0c:	14800015 	stw	r18,0(r2)
40002f10:	17c00115 	stw	ra,4(r2)
40002f14:	15400215 	stw	r21,8(r2)
40002f18:	15000315 	stw	r20,12(r2)
40002f1c:	003fa306 	br	40002dac <__alt_data_end+0xc0002dac>
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
40002f20:	781bd0ba 	srai	r13,r15,2
40002f24:	2a800217 	ldw	r10,8(r5)
40002f28:	4807d0ba 	srai	r3,r9,2
40002f2c:	2b800317 	ldw	r14,12(r5)
40002f30:	6a93383a 	mul	r9,r13,r10
40002f34:	48d3883a 	add	r9,r9,r3
40002f38:	4a53883a 	add	r9,r9,r9
40002f3c:	4a53883a 	add	r9,r9,r9
40002f40:	7253883a 	add	r9,r14,r9
  mv A,B,C,res;
  // derive candidate MVs
  A=get_MV(mpi,org_x-1,org_y);
  B=get_MV(mpi,org_x,org_y-1);
  C=get_MV(mpi,org_x+width,org_y-1);
  if(!C.available)
40002f44:	48c00017 	ldw	r3,0(r9)
40002f48:	02400644 	movi	r9,25
40002f4c:	18fffec4 	addi	r3,r3,-5
40002f50:	48ff3436 	bltu	r9,r3,40002c24 <__alt_data_end+0xc0002c24>
40002f54:	02400044 	movi	r9,1
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
    res.y=0;
40002f58:	0015883a 	mov	r10,zero
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
40002f5c:	001b883a 	mov	r13,zero


///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
40002f60:	000b883a 	mov	r5,zero
40002f64:	003fa206 	br	40002df0 <__alt_data_end+0xc0002df0>
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
40002f68:	2a400217 	ldw	r9,8(r5)
40002f6c:	7807d0ba 	srai	r3,r15,2
40002f70:	5817d0ba 	srai	r11,r11,2
40002f74:	2b400317 	ldw	r13,12(r5)
40002f78:	1a47383a 	mul	r3,r3,r9


///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
40002f7c:	000b883a 	mov	r5,zero
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
    res.y=0;
40002f80:	0015883a 	mov	r10,zero
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
40002f84:	1ac7883a 	add	r3,r3,r11
40002f88:	18c7883a 	add	r3,r3,r3
40002f8c:	18c7883a 	add	r3,r3,r3
40002f90:	68c7883a 	add	r3,r13,r3
      res.available=1;
  } else {
    res.available=1;
40002f94:	1a400017 	ldw	r9,0(r3)
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
40002f98:	001b883a 	mov	r13,zero
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
40002f9c:	4a7ffec4 	addi	r9,r9,-5
40002fa0:	4a4006b0 	cmpltui	r9,r9,26
40002fa4:	003f9206 	br	40002df0 <__alt_data_end+0xc0002df0>

40002fa8 <Predict_P_Skip_MV>:
  res.x=Median(A.x,B.x,C.x);
  res.y=Median(A.y,B.y,C.y);
  return res;
}

mv Predict_P_Skip_MV(mode_pred_info *mpi, int org_x, int org_y) {
40002fa8:	defff904 	addi	sp,sp,-28
40002fac:	dfc00615 	stw	ra,24(sp)
40002fb0:	dd400515 	stw	r21,20(sp)
40002fb4:	dd000415 	stw	r20,16(sp)
40002fb8:	dcc00315 	stw	r19,12(sp)
40002fbc:	dc800215 	stw	r18,8(sp)
40002fc0:	dc400115 	stw	r17,4(sp)
40002fc4:	dc000015 	stw	r16,0(sp)
40002fc8:	2005883a 	mov	r2,r4
  mv zero={0,0,0};
  if(org_x<=0 || org_y<=0) return zero;
40002fcc:	0180300e 	bge	zero,r6,40003090 <Predict_P_Skip_MV+0xe8>
40002fd0:	01c02f0e 	bge	zero,r7,40003090 <Predict_P_Skip_MV+0xe8>
  if(ModePredInfo_MVx(mpi,(org_x>>2)-1,org_y>>2)==0 &&
40002fd4:	3815d0ba 	srai	r10,r7,2
40002fd8:	2ac00b17 	ldw	r11,44(r5)
40002fdc:	3011d0ba 	srai	r8,r6,2
40002fe0:	2a400e17 	ldw	r9,56(r5)
40002fe4:	52c9383a 	mul	r4,r10,r11
40002fe8:	40ffffc4 	addi	r3,r8,-1
40002fec:	1907883a 	add	r3,r3,r4
40002ff0:	18c7883a 	add	r3,r3,r3
40002ff4:	18c7883a 	add	r3,r3,r3
40002ff8:	48d9883a 	add	r12,r9,r3
40002ffc:	63000017 	ldw	r12,0(r12)
40003000:	6000041e 	bne	r12,zero,40003014 <Predict_P_Skip_MV+0x6c>
     ModePredInfo_MVy(mpi,(org_x>>2)-1,org_y>>2)==0) return zero;
40003004:	2b000f17 	ldw	r12,60(r5)
40003008:	60c7883a 	add	r3,r12,r3
}

mv Predict_P_Skip_MV(mode_pred_info *mpi, int org_x, int org_y) {
  mv zero={0,0,0};
  if(org_x<=0 || org_y<=0) return zero;
  if(ModePredInfo_MVx(mpi,(org_x>>2)-1,org_y>>2)==0 &&
4000300c:	18c00017 	ldw	r3,0(r3)
40003010:	18001f26 	beq	r3,zero,40003090 <Predict_P_Skip_MV+0xe8>
     ModePredInfo_MVy(mpi,(org_x>>2)-1,org_y>>2)==0) return zero;
  if(ModePredInfo_MVx(mpi,org_x>>2,(org_y>>2)-1)==0 &&
40003014:	22c7c83a 	sub	r3,r4,r11
40003018:	1a07883a 	add	r3,r3,r8
4000301c:	18c7883a 	add	r3,r3,r3
40003020:	18c7883a 	add	r3,r3,r3
40003024:	48d9883a 	add	r12,r9,r3
40003028:	63000017 	ldw	r12,0(r12)
4000302c:	6000041e 	bne	r12,zero,40003040 <Predict_P_Skip_MV+0x98>
     ModePredInfo_MVy(mpi,org_x>>2,(org_y>>2)-1)==0) return zero;
40003030:	2b000f17 	ldw	r12,60(r5)
40003034:	60c7883a 	add	r3,r12,r3
mv Predict_P_Skip_MV(mode_pred_info *mpi, int org_x, int org_y) {
  mv zero={0,0,0};
  if(org_x<=0 || org_y<=0) return zero;
  if(ModePredInfo_MVx(mpi,(org_x>>2)-1,org_y>>2)==0 &&
     ModePredInfo_MVy(mpi,(org_x>>2)-1,org_y>>2)==0) return zero;
  if(ModePredInfo_MVx(mpi,org_x>>2,(org_y>>2)-1)==0 &&
40003038:	18c00017 	ldw	r3,0(r3)
4000303c:	18001426 	beq	r3,zero,40003090 <Predict_P_Skip_MV+0xe8>

///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
40003040:	37ffffc4 	addi	ra,r6,-1
40003044:	f821d0ba 	srai	r16,ra,2
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
40003048:	2b400917 	ldw	r13,36(r5)
4000304c:	83401d0e 	bge	r16,r13,400030c4 <Predict_P_Skip_MV+0x11c>
40003050:	28c00a17 	ldw	r3,40(r5)
40003054:	50c01b0e 	bge	r10,r3,400030c4 <Predict_P_Skip_MV+0x11c>
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
40003058:	2407883a 	add	r3,r4,r16
4000305c:	18c7883a 	add	r3,r3,r3
  res.y=ModePredInfo_MVy(mpi,x,y);
40003060:	2b000f17 	ldw	r12,60(r5)
static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
40003064:	18c7883a 	add	r3,r3,r3
40003068:	48c9883a 	add	r4,r9,r3
4000306c:	23c00017 	ldw	r15,0(r4)
  res.y=ModePredInfo_MVy(mpi,x,y);
40003070:	60c7883a 	add	r3,r12,r3
40003074:	1b800017 	ldw	r14,0(r3)
  if(res.x==MV_NA) {
40003078:	00e02074 	movhi	r3,32897
4000307c:	18e02004 	addi	r3,r3,-32640
40003080:	78c09726 	beq	r15,r3,400032e0 <Predict_P_Skip_MV+0x338>
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
    res.valid=1;
40003084:	04400044 	movi	r17,1
    res.x=0;
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
40003088:	883f883a 	mov	ra,r17
4000308c:	00001106 	br	400030d4 <Predict_P_Skip_MV+0x12c>
  return res;
}

mv Predict_P_Skip_MV(mode_pred_info *mpi, int org_x, int org_y) {
  mv zero={0,0,0};
  if(org_x<=0 || org_y<=0) return zero;
40003090:	10000015 	stw	zero,0(r2)
40003094:	10000115 	stw	zero,4(r2)
40003098:	10000215 	stw	zero,8(r2)
4000309c:	10000315 	stw	zero,12(r2)
  if(ModePredInfo_MVx(mpi,(org_x>>2)-1,org_y>>2)==0 &&
     ModePredInfo_MVy(mpi,(org_x>>2)-1,org_y>>2)==0) return zero;
  if(ModePredInfo_MVx(mpi,org_x>>2,(org_y>>2)-1)==0 &&
     ModePredInfo_MVy(mpi,org_x>>2,(org_y>>2)-1)==0) return zero;
  return PredictMV(mpi,org_x,org_y,16,16);
}
400030a0:	dfc00617 	ldw	ra,24(sp)
400030a4:	dd400517 	ldw	r21,20(sp)
400030a8:	dd000417 	ldw	r20,16(sp)
400030ac:	dcc00317 	ldw	r19,12(sp)
400030b0:	dc800217 	ldw	r18,8(sp)
400030b4:	dc400117 	ldw	r17,4(sp)
400030b8:	dc000017 	ldw	r16,0(sp)
400030bc:	dec00704 	addi	sp,sp,28
400030c0:	f800283a 	ret

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
400030c4:	0023883a 	mov	r17,zero
400030c8:	003f883a 	mov	ra,zero
400030cc:	001d883a 	mov	r14,zero
400030d0:	001f883a 	mov	r15,zero

///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
400030d4:	39ffffc4 	addi	r7,r7,-1
400030d8:	3825d0ba 	srai	r18,r7,2
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
400030dc:	4340110e 	bge	r8,r13,40003124 <Predict_P_Skip_MV+0x17c>
400030e0:	28c00a17 	ldw	r3,40(r5)
400030e4:	90c00f0e 	bge	r18,r3,40003124 <Predict_P_Skip_MV+0x17c>
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
400030e8:	5c87383a 	mul	r3,r11,r18
  res.y=ModePredInfo_MVy(mpi,x,y);
400030ec:	2b000f17 	ldw	r12,60(r5)
static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
400030f0:	1a07883a 	add	r3,r3,r8
400030f4:	18c7883a 	add	r3,r3,r3
400030f8:	18c7883a 	add	r3,r3,r3
400030fc:	48c9883a 	add	r4,r9,r3
40003100:	21000017 	ldw	r4,0(r4)
  res.y=ModePredInfo_MVy(mpi,x,y);
40003104:	60c7883a 	add	r3,r12,r3
40003108:	1a800017 	ldw	r10,0(r3)
  if(res.x==MV_NA) {
4000310c:	00e02074 	movhi	r3,32897
40003110:	18e02004 	addi	r3,r3,-32640
40003114:	20c08226 	beq	r4,r3,40003320 <Predict_P_Skip_MV+0x378>
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
    res.valid=1;
40003118:	02000044 	movi	r8,1
    res.x=0;
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
4000311c:	4027883a 	mov	r19,r8
40003120:	00000406 	br	40003134 <Predict_P_Skip_MV+0x18c>

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
40003124:	0011883a 	mov	r8,zero
40003128:	0027883a 	mov	r19,zero
4000312c:	0015883a 	mov	r10,zero
40003130:	0009883a 	mov	r4,zero

///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
40003134:	31800404 	addi	r6,r6,16
40003138:	300fd0ba 	srai	r7,r6,2
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
4000313c:	38004e16 	blt	r7,zero,40003278 <Predict_P_Skip_MV+0x2d0>
40003140:	3b404d0e 	bge	r7,r13,40003278 <Predict_P_Skip_MV+0x2d0>
40003144:	28c00a17 	ldw	r3,40(r5)
40003148:	90c0160e 	bge	r18,r3,400031a4 <Predict_P_Skip_MV+0x1fc>
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
4000314c:	5c87383a 	mul	r3,r11,r18
  res.y=ModePredInfo_MVy(mpi,x,y);
40003150:	2b000f17 	ldw	r12,60(r5)
  if(res.x==MV_NA) {
40003154:	05202074 	movhi	r20,32897
static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
40003158:	19cf883a 	add	r7,r3,r7
4000315c:	39cf883a 	add	r7,r7,r7
40003160:	39cf883a 	add	r7,r7,r7
40003164:	49d7883a 	add	r11,r9,r7
40003168:	5ac00017 	ldw	r11,0(r11)
  res.y=ModePredInfo_MVy(mpi,x,y);
4000316c:	61cf883a 	add	r7,r12,r7
  if(res.x==MV_NA) {
40003170:	a5202004 	addi	r20,r20,-32640
  mv res={0,0,0,0};
  x>>=2; y>>=2;
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
40003174:	39c00017 	ldw	r7,0(r7)
  if(res.x==MV_NA) {
40003178:	5d001526 	beq	r11,r20,400031d0 <Predict_P_Skip_MV+0x228>
    if(org_x&8) { if(C.valid) return C; }
           else { if(A.valid) return A; }
  }
  // If one and only one of the candidate predictors is available and valid,
  // it is returned
              if(!B.valid && !C.valid) return A;
4000317c:	4000501e 	bne	r8,zero,400032c0 <Predict_P_Skip_MV+0x318>
    res.x=0;
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
40003180:	01400044 	movi	r5,1
           else { if(A.valid) return A; }
  }
  // If one and only one of the candidate predictors is available and valid,
  // it is returned
              if(!B.valid && !C.valid) return A;
  if(!A.valid &&  B.valid && !C.valid) return B;
40003184:	8800251e 	bne	r17,zero,4000321c <Predict_P_Skip_MV+0x274>
  if(!A.valid && !B.valid &&  C.valid) return C;
40003188:	00c00044 	movi	r3,1
4000318c:	12c00015 	stw	r11,0(r2)
40003190:	11c00115 	stw	r7,4(r2)
40003194:	11400215 	stw	r5,8(r2)
40003198:	10c00315 	stw	r3,12(r2)
4000319c:	003fc006 	br	400030a0 <__alt_data_end+0xc00030a0>
///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
400031a0:	83403a16 	blt	r16,r13,4000328c <Predict_P_Skip_MV+0x2e4>
    return res;
400031a4:	0007883a 	mov	r3,zero
400031a8:	000b883a 	mov	r5,zero
400031ac:	000f883a 	mov	r7,zero
400031b0:	0017883a 	mov	r11,zero
    if(org_x&8) { if(C.valid) return C; }
           else { if(A.valid) return A; }
  }
  // If one and only one of the candidate predictors is available and valid,
  // it is returned
              if(!B.valid && !C.valid) return A;
400031b4:	4000171e 	bne	r8,zero,40003214 <Predict_P_Skip_MV+0x26c>
400031b8:	183ff21e 	bne	r3,zero,40003184 <__alt_data_end+0xc0003184>
400031bc:	13c00015 	stw	r15,0(r2)
400031c0:	13800115 	stw	r14,4(r2)
400031c4:	17c00215 	stw	ra,8(r2)
400031c8:	14400315 	stw	r17,12(r2)
400031cc:	003fb406 	br	400030a0 <__alt_data_end+0xc00030a0>
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
400031d0:	902bd0ba 	srai	r21,r18,2
400031d4:	2ac00217 	ldw	r11,8(r5)
400031d8:	300fd13a 	srai	r7,r6,4
400031dc:	2d000317 	ldw	r20,12(r5)
400031e0:	aacd383a 	mul	r6,r21,r11
400031e4:	31cd883a 	add	r6,r6,r7
400031e8:	318d883a 	add	r6,r6,r6
400031ec:	318d883a 	add	r6,r6,r6
400031f0:	a18d883a 	add	r6,r20,r6
  mv A,B,C,res;
  // derive candidate MVs
  A=get_MV(mpi,org_x-1,org_y);
  B=get_MV(mpi,org_x,org_y-1);
  C=get_MV(mpi,org_x+width,org_y-1);
  if(!C.available)
400031f4:	31800017 	ldw	r6,0(r6)
400031f8:	01c00644 	movi	r7,25
400031fc:	31bffec4 	addi	r6,r6,-5
40003200:	39bfe736 	bltu	r7,r6,400031a0 <__alt_data_end+0xc00031a0>
    if(org_x&8) { if(C.valid) return C; }
           else { if(A.valid) return A; }
  }
  // If one and only one of the candidate predictors is available and valid,
  // it is returned
              if(!B.valid && !C.valid) return A;
40003204:	403fed26 	beq	r8,zero,400031bc <__alt_data_end+0xc00031bc>
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
    res.y=0;
40003208:	000f883a 	mov	r7,zero
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
4000320c:	0017883a 	mov	r11,zero


///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
40003210:	0007883a 	mov	r3,zero
           else { if(A.valid) return A; }
  }
  // If one and only one of the candidate predictors is available and valid,
  // it is returned
              if(!B.valid && !C.valid) return A;
  if(!A.valid &&  B.valid && !C.valid) return B;
40003214:	8800011e 	bne	r17,zero,4000321c <Predict_P_Skip_MV+0x274>
40003218:	18002b26 	beq	r3,zero,400032c8 <Predict_P_Skip_MV+0x320>
  if(!A.valid && !B.valid &&  C.valid) return C;
  // median prediction
  res.x=Median(A.x,B.x,C.x);
  res.y=Median(A.y,B.y,C.y);
  return res;
4000321c:	2007883a 	mov	r3,r4
40003220:	23c0010e 	bge	r4,r15,40003228 <Predict_P_Skip_MV+0x280>
40003224:	7807883a 	mov	r3,r15
40003228:	58c0010e 	bge	r11,r3,40003230 <Predict_P_Skip_MV+0x288>
4000322c:	5807883a 	mov	r3,r11
40003230:	7900010e 	bge	r15,r4,40003238 <Predict_P_Skip_MV+0x290>
40003234:	7809883a 	mov	r4,r15
40003238:	1900010e 	bge	r3,r4,40003240 <Predict_P_Skip_MV+0x298>
4000323c:	2007883a 	mov	r3,r4
40003240:	10c00015 	stw	r3,0(r2)
40003244:	5007883a 	mov	r3,r10
40003248:	5380010e 	bge	r10,r14,40003250 <Predict_P_Skip_MV+0x2a8>
4000324c:	7007883a 	mov	r3,r14
40003250:	38c0010e 	bge	r7,r3,40003258 <Predict_P_Skip_MV+0x2b0>
40003254:	3807883a 	mov	r3,r7
40003258:	7280010e 	bge	r14,r10,40003260 <Predict_P_Skip_MV+0x2b8>
4000325c:	7015883a 	mov	r10,r14
40003260:	1a80010e 	bge	r3,r10,40003268 <Predict_P_Skip_MV+0x2c0>
40003264:	5007883a 	mov	r3,r10
40003268:	10c00115 	stw	r3,4(r2)
4000326c:	10000215 	stw	zero,8(r2)
40003270:	10000315 	stw	zero,12(r2)
40003274:	003f8a06 	br	400030a0 <__alt_data_end+0xc00030a0>
///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
  x>>=2; y>>=2;
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
40003278:	837fca0e 	bge	r16,r13,400031a4 <__alt_data_end+0xc00031a4>
4000327c:	28c00a17 	ldw	r3,40(r5)
40003280:	90ffc80e 	bge	r18,r3,400031a4 <__alt_data_end+0xc00031a4>
40003284:	2b000f17 	ldw	r12,60(r5)
40003288:	5c87383a 	mul	r3,r11,r18
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
4000328c:	1c07883a 	add	r3,r3,r16
40003290:	18c7883a 	add	r3,r3,r3
40003294:	18c7883a 	add	r3,r3,r3
40003298:	48d3883a 	add	r9,r9,r3
4000329c:	4ac00017 	ldw	r11,0(r9)
  res.y=ModePredInfo_MVy(mpi,x,y);
400032a0:	60c7883a 	add	r3,r12,r3
400032a4:	19c00017 	ldw	r7,0(r3)
  if(res.x==MV_NA) {
400032a8:	00e02074 	movhi	r3,32897
400032ac:	18e02004 	addi	r3,r3,-32640
400032b0:	58c02b26 	beq	r11,r3,40003360 <Predict_P_Skip_MV+0x3b8>
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
    res.valid=1;
400032b4:	00c00044 	movi	r3,1
    res.x=0;
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
400032b8:	180b883a 	mov	r5,r3
400032bc:	003fbd06 	br	400031b4 <__alt_data_end+0xc00031b4>
    res.valid=1;
400032c0:	00c00044 	movi	r3,1
400032c4:	003fd306 	br	40003214 <__alt_data_end+0xc0003214>
           else { if(A.valid) return A; }
  }
  // If one and only one of the candidate predictors is available and valid,
  // it is returned
              if(!B.valid && !C.valid) return A;
  if(!A.valid &&  B.valid && !C.valid) return B;
400032c8:	00c00044 	movi	r3,1
400032cc:	11000015 	stw	r4,0(r2)
400032d0:	12800115 	stw	r10,4(r2)
400032d4:	14c00215 	stw	r19,8(r2)
400032d8:	10c00315 	stw	r3,12(r2)
400032dc:	003f7006 	br	400030a0 <__alt_data_end+0xc00030a0>
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
400032e0:	5007d0ba 	srai	r3,r10,2
400032e4:	29000217 	ldw	r4,8(r5)
400032e8:	f83fd13a 	srai	ra,ra,4
400032ec:	2b000317 	ldw	r12,12(r5)
400032f0:	1907383a 	mul	r3,r3,r4


///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
400032f4:	0023883a 	mov	r17,zero
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
    res.y=0;
400032f8:	001d883a 	mov	r14,zero
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
400032fc:	1fc7883a 	add	r3,r3,ra
40003300:	18c7883a 	add	r3,r3,r3
40003304:	18c7883a 	add	r3,r3,r3
40003308:	60c7883a 	add	r3,r12,r3
      res.available=1;
  } else {
    res.available=1;
4000330c:	1fc00017 	ldw	ra,0(r3)
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
40003310:	001f883a 	mov	r15,zero
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
40003314:	fffffec4 	addi	ra,ra,-5
40003318:	ffc006b0 	cmpltui	ra,ra,26
4000331c:	003f6d06 	br	400030d4 <__alt_data_end+0xc00030d4>
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
40003320:	28c00217 	ldw	r3,8(r5)
40003324:	380fd13a 	srai	r7,r7,4
40003328:	4009d0ba 	srai	r4,r8,2
4000332c:	2b000317 	ldw	r12,12(r5)
40003330:	38cf383a 	mul	r7,r7,r3


///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
40003334:	0011883a 	mov	r8,zero
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
    res.y=0;
40003338:	0015883a 	mov	r10,zero
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
4000333c:	3907883a 	add	r3,r7,r4
40003340:	18c7883a 	add	r3,r3,r3
40003344:	18c7883a 	add	r3,r3,r3
40003348:	60c7883a 	add	r3,r12,r3
      res.available=1;
  } else {
    res.available=1;
4000334c:	1cc00017 	ldw	r19,0(r3)
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
40003350:	0009883a 	mov	r4,zero
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
40003354:	9cfffec4 	addi	r19,r19,-5
40003358:	9cc006b0 	cmpltui	r19,r19,26
4000335c:	003f7506 	br	40003134 <__alt_data_end+0xc0003134>
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
40003360:	28c00217 	ldw	r3,8(r5)
40003364:	9025d0ba 	srai	r18,r18,2
40003368:	29800317 	ldw	r6,12(r5)
4000336c:	8021d0ba 	srai	r16,r16,2
40003370:	90cb383a 	mul	r5,r18,r3
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
    res.y=0;
40003374:	000f883a 	mov	r7,zero


///// Motion Vector Prediction /////

static inline mv get_MV(mode_pred_info *mpi, int x, int y) {
  mv res={0,0,0,0};
40003378:	0007883a 	mov	r3,zero
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
4000337c:	2c0b883a 	add	r5,r5,r16
40003380:	294b883a 	add	r5,r5,r5
40003384:	294b883a 	add	r5,r5,r5
40003388:	314b883a 	add	r5,r6,r5
      res.available=1;
  } else {
    res.available=1;
4000338c:	29400017 	ldw	r5,0(r5)
  if(x<0 || y<0 || x>=mpi->TbWidth || y>=mpi->TbHeight)
    return res;
  res.x=ModePredInfo_MVx(mpi,x,y);
  res.y=ModePredInfo_MVy(mpi,x,y);
  if(res.x==MV_NA) {
    res.x=0;
40003390:	0017883a 	mov	r11,zero
    res.y=0;
    if(IsIntra(ModePredInfo_MbMode(mpi,x>>2,y>>2)))
      res.available=1;
  } else {
    res.available=1;
40003394:	297ffec4 	addi	r5,r5,-5
40003398:	294006b0 	cmpltui	r5,r5,26
4000339c:	003f8506 	br	400031b4 <__alt_data_end+0xc00031b4>

400033a0 <FillMVs>:
             int width, int height,
             int mvx, int mvy) {
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
400033a0:	da000017 	ldw	r8,0(sp)
void FillMVs(mode_pred_info *mpi,
             int org_x, int org_y,
             int width, int height,
             int mvx, int mvy) {
  int x,y;
  org_x>>=2; org_y>>=2;
400033a4:	300dd0ba 	srai	r6,r6,2
}

void FillMVs(mode_pred_info *mpi,
             int org_x, int org_y,
             int width, int height,
             int mvx, int mvy) {
400033a8:	da800117 	ldw	r10,4(sp)
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
400033ac:	4011d0ba 	srai	r8,r8,2
}

void FillMVs(mode_pred_info *mpi,
             int org_x, int org_y,
             int width, int height,
             int mvx, int mvy) {
400033b0:	dac00217 	ldw	r11,8(sp)
  int x,y;
  org_x>>=2; org_y>>=2;
400033b4:	280bd0ba 	srai	r5,r5,2
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
400033b8:	4191883a 	add	r8,r8,r6
400033bc:	423fffc4 	addi	r8,r8,-1
             int org_x, int org_y,
             int width, int height,
             int mvx, int mvy) {
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
400033c0:	380fd0ba 	srai	r7,r7,2
  for(y=org_y+height-1; y>=org_y; --y)
400033c4:	41801b16 	blt	r8,r6,40003434 <FillMVs+0x94>
400033c8:	29d9883a 	add	r12,r5,r7
400033cc:	633fffc4 	addi	r12,r12,-1
400033d0:	337fffc4 	addi	r13,r6,-1
400033d4:	2a7fffc4 	addi	r9,r5,-1
    for(x=org_x+width-1; x>=org_x; --x) {
400033d8:	61401316 	blt	r12,r5,40003428 <FillMVs+0x88>
400033dc:	21c00e17 	ldw	r7,56(r4)
400033e0:	21800f17 	ldw	r6,60(r4)
400033e4:	6007883a 	mov	r3,r12
      ModePredInfo_MVx(mpi,x,y)=mvx;
400033e8:	20800b17 	ldw	r2,44(r4)
400033ec:	4085383a 	mul	r2,r8,r2
400033f0:	10c5883a 	add	r2,r2,r3
400033f4:	1085883a 	add	r2,r2,r2
400033f8:	1085883a 	add	r2,r2,r2
400033fc:	3885883a 	add	r2,r7,r2
40003400:	12800015 	stw	r10,0(r2)
      ModePredInfo_MVy(mpi,x,y)=mvy;
40003404:	20800b17 	ldw	r2,44(r4)
40003408:	4085383a 	mul	r2,r8,r2
4000340c:	10c5883a 	add	r2,r2,r3
40003410:	1085883a 	add	r2,r2,r2
40003414:	1085883a 	add	r2,r2,r2
40003418:	3085883a 	add	r2,r6,r2
4000341c:	12c00015 	stw	r11,0(r2)
             int mvx, int mvy) {
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
    for(x=org_x+width-1; x>=org_x; --x) {
40003420:	18ffffc4 	addi	r3,r3,-1
40003424:	1a7ff01e 	bne	r3,r9,400033e8 <__alt_data_end+0xc00033e8>
             int width, int height,
             int mvx, int mvy) {
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
40003428:	423fffc4 	addi	r8,r8,-1
4000342c:	437fea1e 	bne	r8,r13,400033d8 <__alt_data_end+0xc00033d8>
40003430:	f800283a 	ret
40003434:	f800283a 	ret

40003438 <DeriveMVs>:
}

void DeriveMVs(mode_pred_info *mpi,
               int org_x, int org_y,
               int width, int height,
               int mvdx, int mvdy) {
40003438:	defff404 	addi	sp,sp,-48
4000343c:	dcc00915 	stw	r19,36(sp)
40003440:	dcc00c17 	ldw	r19,48(sp)
40003444:	dd000a15 	stw	r20,40(sp)
40003448:	dc800815 	stw	r18,32(sp)
4000344c:	dc400715 	stw	r17,28(sp)
40003450:	dc000615 	stw	r16,24(sp)
40003454:	3025883a 	mov	r18,r6
  mv v=PredictMV(mpi,org_x,org_y,width,height);
40003458:	d9c00015 	stw	r7,0(sp)
}

void DeriveMVs(mode_pred_info *mpi,
               int org_x, int org_y,
               int width, int height,
               int mvdx, int mvdy) {
4000345c:	2829883a 	mov	r20,r5
40003460:	3823883a 	mov	r17,r7
40003464:	2021883a 	mov	r16,r4
  mv v=PredictMV(mpi,org_x,org_y,width,height);
40003468:	300f883a 	mov	r7,r6
4000346c:	dcc00115 	stw	r19,4(sp)
40003470:	280d883a 	mov	r6,r5
40003474:	200b883a 	mov	r5,r4
40003478:	d9000204 	addi	r4,sp,8
}

void DeriveMVs(mode_pred_info *mpi,
               int org_x, int org_y,
               int width, int height,
               int mvdx, int mvdy) {
4000347c:	dfc00b15 	stw	ra,44(sp)
  mv v=PredictMV(mpi,org_x,org_y,width,height);
40003480:	0002b580 	call	40002b58 <PredictMV>
//printf("MV @ %d,%d + %dx%d: pred=%d,%d diff=%d,%d\n",org_x,org_y,width,height,v.x,v.y,mvdx,mvdy);
  FillMVs(mpi,org_x,org_y,width,height,v.x+mvdx,v.y+mvdy);
40003484:	d8800217 	ldw	r2,8(sp)
40003488:	d9c00d17 	ldw	r7,52(sp)
void FillMVs(mode_pred_info *mpi,
             int org_x, int org_y,
             int width, int height,
             int mvx, int mvy) {
  int x,y;
  org_x>>=2; org_y>>=2;
4000348c:	9019d0ba 	srai	r12,r18,2
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
40003490:	9809d0ba 	srai	r4,r19,2
               int org_x, int org_y,
               int width, int height,
               int mvdx, int mvdy) {
  mv v=PredictMV(mpi,org_x,org_y,width,height);
//printf("MV @ %d,%d + %dx%d: pred=%d,%d diff=%d,%d\n",org_x,org_y,width,height,v.x,v.y,mvdx,mvdy);
  FillMVs(mpi,org_x,org_y,width,height,v.x+mvdx,v.y+mvdy);
40003494:	388f883a 	add	r7,r7,r2
40003498:	da000e17 	ldw	r8,56(sp)
4000349c:	d8800317 	ldw	r2,12(sp)
             int width, int height,
             int mvx, int mvy) {
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
400034a0:	2309883a 	add	r4,r4,r12
400034a4:	213fffc4 	addi	r4,r4,-1
               int org_x, int org_y,
               int width, int height,
               int mvdx, int mvdy) {
  mv v=PredictMV(mpi,org_x,org_y,width,height);
//printf("MV @ %d,%d + %dx%d: pred=%d,%d diff=%d,%d\n",org_x,org_y,width,height,v.x,v.y,mvdx,mvdy);
  FillMVs(mpi,org_x,org_y,width,height,v.x+mvdx,v.y+mvdy);
400034a8:	4091883a 	add	r8,r8,r2
             int width, int height,
             int mvx, int mvy) {
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
400034ac:	23001c16 	blt	r4,r12,40003520 <DeriveMVs+0xe8>
400034b0:	a017d0ba 	srai	r11,r20,2
400034b4:	8815d0ba 	srai	r10,r17,2
400034b8:	633fffc4 	addi	r12,r12,-1
400034bc:	5a7fffc4 	addi	r9,r11,-1
400034c0:	5a95883a 	add	r10,r11,r10
400034c4:	52bfffc4 	addi	r10,r10,-1
    for(x=org_x+width-1; x>=org_x; --x) {
400034c8:	52c01316 	blt	r10,r11,40003518 <DeriveMVs+0xe0>
400034cc:	81800e17 	ldw	r6,56(r16)
400034d0:	81400f17 	ldw	r5,60(r16)
400034d4:	5007883a 	mov	r3,r10
      ModePredInfo_MVx(mpi,x,y)=mvx;
400034d8:	80800b17 	ldw	r2,44(r16)
400034dc:	2085383a 	mul	r2,r4,r2
400034e0:	10c5883a 	add	r2,r2,r3
400034e4:	1085883a 	add	r2,r2,r2
400034e8:	1085883a 	add	r2,r2,r2
400034ec:	3085883a 	add	r2,r6,r2
400034f0:	11c00015 	stw	r7,0(r2)
      ModePredInfo_MVy(mpi,x,y)=mvy;
400034f4:	80800b17 	ldw	r2,44(r16)
400034f8:	2085383a 	mul	r2,r4,r2
400034fc:	10c5883a 	add	r2,r2,r3
40003500:	1085883a 	add	r2,r2,r2
40003504:	1085883a 	add	r2,r2,r2
40003508:	2885883a 	add	r2,r5,r2
4000350c:	12000015 	stw	r8,0(r2)
             int mvx, int mvy) {
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
    for(x=org_x+width-1; x>=org_x; --x) {
40003510:	18ffffc4 	addi	r3,r3,-1
40003514:	1a7ff01e 	bne	r3,r9,400034d8 <__alt_data_end+0xc00034d8>
             int width, int height,
             int mvx, int mvy) {
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
40003518:	213fffc4 	addi	r4,r4,-1
4000351c:	233fea1e 	bne	r4,r12,400034c8 <__alt_data_end+0xc00034c8>
               int width, int height,
               int mvdx, int mvdy) {
  mv v=PredictMV(mpi,org_x,org_y,width,height);
//printf("MV @ %d,%d + %dx%d: pred=%d,%d diff=%d,%d\n",org_x,org_y,width,height,v.x,v.y,mvdx,mvdy);
  FillMVs(mpi,org_x,org_y,width,height,v.x+mvdx,v.y+mvdy);
}
40003520:	dfc00b17 	ldw	ra,44(sp)
40003524:	dd000a17 	ldw	r20,40(sp)
40003528:	dcc00917 	ldw	r19,36(sp)
4000352c:	dc800817 	ldw	r18,32(sp)
40003530:	dc400717 	ldw	r17,28(sp)
40003534:	dc000617 	ldw	r16,24(sp)
40003538:	dec00c04 	addi	sp,sp,48
4000353c:	f800283a 	ret

40003540 <Derive_P_Skip_MVs>:

void Derive_P_Skip_MVs(mode_pred_info *mpi, int org_x, int org_y) {
40003540:	defff604 	addi	sp,sp,-40
40003544:	dc000615 	stw	r16,24(sp)
40003548:	dfc00915 	stw	ra,36(sp)
4000354c:	dc800815 	stw	r18,32(sp)
40003550:	dc400715 	stw	r17,28(sp)
40003554:	2021883a 	mov	r16,r4
  return res;
}

mv Predict_P_Skip_MV(mode_pred_info *mpi, int org_x, int org_y) {
  mv zero={0,0,0};
  if(org_x<=0 || org_y<=0) return zero;
40003558:	0141180e 	bge	zero,r5,400039bc <Derive_P_Skip_MVs+0x47c>
4000355c:	0181170e 	bge	zero,r6,400039bc <Derive_P_Skip_MVs+0x47c>
  if(ModePredInfo_MVx(mpi,(org_x>>2)-1,org_y>>2)==0 &&
40003560:	3025d0ba 	srai	r18,r6,2
40003564:	20c00b17 	ldw	r3,44(r4)
40003568:	2823d0ba 	srai	r17,r5,2
4000356c:	22000e17 	ldw	r8,56(r4)
40003570:	90c9383a 	mul	r4,r18,r3
40003574:	88bfffc4 	addi	r2,r17,-1
40003578:	1105883a 	add	r2,r2,r4
4000357c:	1085883a 	add	r2,r2,r2
40003580:	1095883a 	add	r10,r2,r2
40003584:	4285883a 	add	r2,r8,r10
40003588:	10800017 	ldw	r2,0(r2)
4000358c:	10010426 	beq	r2,zero,400039a0 <Derive_P_Skip_MVs+0x460>
     ModePredInfo_MVy(mpi,(org_x>>2)-1,org_y>>2)==0) return zero;
  if(ModePredInfo_MVx(mpi,org_x>>2,(org_y>>2)-1)==0 &&
40003590:	20c5c83a 	sub	r2,r4,r3
40003594:	1445883a 	add	r2,r2,r17
40003598:	1085883a 	add	r2,r2,r2
4000359c:	1089883a 	add	r4,r2,r2
400035a0:	4105883a 	add	r2,r8,r4
400035a4:	10800017 	ldw	r2,0(r2)
400035a8:	1000041e 	bne	r2,zero,400035bc <Derive_P_Skip_MVs+0x7c>
     ModePredInfo_MVy(mpi,org_x>>2,(org_y>>2)-1)==0) return zero;
400035ac:	80800f17 	ldw	r2,60(r16)
400035b0:	1109883a 	add	r4,r2,r4
mv Predict_P_Skip_MV(mode_pred_info *mpi, int org_x, int org_y) {
  mv zero={0,0,0};
  if(org_x<=0 || org_y<=0) return zero;
  if(ModePredInfo_MVx(mpi,(org_x>>2)-1,org_y>>2)==0 &&
     ModePredInfo_MVy(mpi,(org_x>>2)-1,org_y>>2)==0) return zero;
  if(ModePredInfo_MVx(mpi,org_x>>2,(org_y>>2)-1)==0 &&
400035b4:	21000017 	ldw	r4,0(r4)
400035b8:	2000fd26 	beq	r4,zero,400039b0 <Derive_P_Skip_MVs+0x470>
     ModePredInfo_MVy(mpi,org_x>>2,(org_y>>2)-1)==0) return zero;
  return PredictMV(mpi,org_x,org_y,16,16);
400035bc:	00800404 	movi	r2,16
400035c0:	300f883a 	mov	r7,r6
400035c4:	d8800115 	stw	r2,4(sp)
400035c8:	280d883a 	mov	r6,r5
400035cc:	d8800015 	stw	r2,0(sp)
400035d0:	800b883a 	mov	r5,r16
400035d4:	d9000204 	addi	r4,sp,8
400035d8:	0002b580 	call	40002b58 <PredictMV>
400035dc:	d9c00217 	ldw	r7,8(sp)
400035e0:	d9800317 	ldw	r6,12(sp)
400035e4:	82000e17 	ldw	r8,56(r16)
400035e8:	80800f17 	ldw	r2,60(r16)
400035ec:	80c00b17 	ldw	r3,44(r16)

mv Predict_P_Skip_MV(mode_pred_info *mpi, int org_x, int org_y) {
  mv zero={0,0,0};
  if(org_x<=0 || org_y<=0) return zero;
  if(ModePredInfo_MVx(mpi,(org_x>>2)-1,org_y>>2)==0 &&
     ModePredInfo_MVy(mpi,(org_x>>2)-1,org_y>>2)==0) return zero;
400035f0:	9013883a 	mov	r9,r18
             int width, int height,
             int mvx, int mvy) {
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
400035f4:	4b8000c4 	addi	r14,r9,3
    for(x=org_x+width-1; x>=org_x; --x) {
      ModePredInfo_MVx(mpi,x,y)=mvx;
400035f8:	70c7383a 	mul	r3,r14,r3
400035fc:	894000c4 	addi	r5,r17,3
40003600:	89000084 	addi	r4,r17,2
40003604:	1947883a 	add	r3,r3,r5
40003608:	18c7883a 	add	r3,r3,r3
4000360c:	18c7883a 	add	r3,r3,r3
40003610:	40c7883a 	add	r3,r8,r3
40003614:	19c00015 	stw	r7,0(r3)
      ModePredInfo_MVy(mpi,x,y)=mvy;
40003618:	82800b17 	ldw	r10,44(r16)
4000361c:	88c00044 	addi	r3,r17,1
             int width, int height,
             int mvx, int mvy) {
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
40003620:	4b400084 	addi	r13,r9,2
    for(x=org_x+width-1; x>=org_x; --x) {
      ModePredInfo_MVx(mpi,x,y)=mvx;
      ModePredInfo_MVy(mpi,x,y)=mvy;
40003624:	7295383a 	mul	r10,r14,r10
             int width, int height,
             int mvx, int mvy) {
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
40003628:	4b000044 	addi	r12,r9,1
    for(x=org_x+width-1; x>=org_x; --x) {
      ModePredInfo_MVx(mpi,x,y)=mvx;
      ModePredInfo_MVy(mpi,x,y)=mvy;
4000362c:	5155883a 	add	r10,r10,r5
40003630:	5295883a 	add	r10,r10,r10
40003634:	5295883a 	add	r10,r10,r10
40003638:	1295883a 	add	r10,r2,r10
4000363c:	51800015 	stw	r6,0(r10)
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
    for(x=org_x+width-1; x>=org_x; --x) {
      ModePredInfo_MVx(mpi,x,y)=mvx;
40003640:	82800b17 	ldw	r10,44(r16)
40003644:	7295383a 	mul	r10,r14,r10
40003648:	5115883a 	add	r10,r10,r4
4000364c:	5295883a 	add	r10,r10,r10
40003650:	5295883a 	add	r10,r10,r10
40003654:	4295883a 	add	r10,r8,r10
40003658:	51c00015 	stw	r7,0(r10)
      ModePredInfo_MVy(mpi,x,y)=mvy;
4000365c:	82800b17 	ldw	r10,44(r16)
40003660:	7295383a 	mul	r10,r14,r10
40003664:	5115883a 	add	r10,r10,r4
40003668:	5295883a 	add	r10,r10,r10
4000366c:	5295883a 	add	r10,r10,r10
40003670:	1295883a 	add	r10,r2,r10
40003674:	51800015 	stw	r6,0(r10)
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
    for(x=org_x+width-1; x>=org_x; --x) {
      ModePredInfo_MVx(mpi,x,y)=mvx;
40003678:	82800b17 	ldw	r10,44(r16)
4000367c:	7295383a 	mul	r10,r14,r10
40003680:	50d5883a 	add	r10,r10,r3
40003684:	5295883a 	add	r10,r10,r10
40003688:	5295883a 	add	r10,r10,r10
4000368c:	4295883a 	add	r10,r8,r10
40003690:	51c00015 	stw	r7,0(r10)
      ModePredInfo_MVy(mpi,x,y)=mvy;
40003694:	82800b17 	ldw	r10,44(r16)
40003698:	7295383a 	mul	r10,r14,r10
4000369c:	50d5883a 	add	r10,r10,r3
400036a0:	5295883a 	add	r10,r10,r10
400036a4:	5295883a 	add	r10,r10,r10
400036a8:	1295883a 	add	r10,r2,r10
400036ac:	51800015 	stw	r6,0(r10)
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
    for(x=org_x+width-1; x>=org_x; --x) {
      ModePredInfo_MVx(mpi,x,y)=mvx;
400036b0:	82c00b17 	ldw	r11,44(r16)
400036b4:	72d7383a 	mul	r11,r14,r11
400036b8:	5c57883a 	add	r11,r11,r17
400036bc:	5ad7883a 	add	r11,r11,r11
400036c0:	5ad7883a 	add	r11,r11,r11
400036c4:	42d7883a 	add	r11,r8,r11
400036c8:	59c00015 	stw	r7,0(r11)
      ModePredInfo_MVy(mpi,x,y)=mvy;
400036cc:	82800b17 	ldw	r10,44(r16)
400036d0:	7295383a 	mul	r10,r14,r10
400036d4:	5455883a 	add	r10,r10,r17
400036d8:	5295883a 	add	r10,r10,r10
400036dc:	5295883a 	add	r10,r10,r10
400036e0:	1295883a 	add	r10,r2,r10
400036e4:	51800015 	stw	r6,0(r10)
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
    for(x=org_x+width-1; x>=org_x; --x) {
      ModePredInfo_MVx(mpi,x,y)=mvx;
400036e8:	82800b17 	ldw	r10,44(r16)
400036ec:	6a95383a 	mul	r10,r13,r10
400036f0:	5155883a 	add	r10,r10,r5
400036f4:	5295883a 	add	r10,r10,r10
400036f8:	5295883a 	add	r10,r10,r10
400036fc:	4295883a 	add	r10,r8,r10
40003700:	51c00015 	stw	r7,0(r10)
      ModePredInfo_MVy(mpi,x,y)=mvy;
40003704:	82800b17 	ldw	r10,44(r16)
40003708:	6a95383a 	mul	r10,r13,r10
4000370c:	5155883a 	add	r10,r10,r5
40003710:	5295883a 	add	r10,r10,r10
40003714:	5295883a 	add	r10,r10,r10
40003718:	1295883a 	add	r10,r2,r10
4000371c:	51800015 	stw	r6,0(r10)
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
    for(x=org_x+width-1; x>=org_x; --x) {
      ModePredInfo_MVx(mpi,x,y)=mvx;
40003720:	82800b17 	ldw	r10,44(r16)
40003724:	6a95383a 	mul	r10,r13,r10
40003728:	5115883a 	add	r10,r10,r4
4000372c:	5295883a 	add	r10,r10,r10
40003730:	5295883a 	add	r10,r10,r10
40003734:	4295883a 	add	r10,r8,r10
40003738:	51c00015 	stw	r7,0(r10)
      ModePredInfo_MVy(mpi,x,y)=mvy;
4000373c:	82800b17 	ldw	r10,44(r16)
40003740:	6a95383a 	mul	r10,r13,r10
40003744:	5115883a 	add	r10,r10,r4
40003748:	5295883a 	add	r10,r10,r10
4000374c:	5295883a 	add	r10,r10,r10
40003750:	1295883a 	add	r10,r2,r10
40003754:	51800015 	stw	r6,0(r10)
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
    for(x=org_x+width-1; x>=org_x; --x) {
      ModePredInfo_MVx(mpi,x,y)=mvx;
40003758:	82800b17 	ldw	r10,44(r16)
4000375c:	6a95383a 	mul	r10,r13,r10
40003760:	50d5883a 	add	r10,r10,r3
40003764:	5295883a 	add	r10,r10,r10
40003768:	5295883a 	add	r10,r10,r10
4000376c:	4295883a 	add	r10,r8,r10
40003770:	51c00015 	stw	r7,0(r10)
      ModePredInfo_MVy(mpi,x,y)=mvy;
40003774:	82c00b17 	ldw	r11,44(r16)
40003778:	6ad7383a 	mul	r11,r13,r11
4000377c:	58d7883a 	add	r11,r11,r3
40003780:	5ad7883a 	add	r11,r11,r11
40003784:	5ad7883a 	add	r11,r11,r11
40003788:	12d7883a 	add	r11,r2,r11
4000378c:	59800015 	stw	r6,0(r11)
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
    for(x=org_x+width-1; x>=org_x; --x) {
      ModePredInfo_MVx(mpi,x,y)=mvx;
40003790:	82c00b17 	ldw	r11,44(r16)
40003794:	6ad7383a 	mul	r11,r13,r11
40003798:	5c57883a 	add	r11,r11,r17
4000379c:	5ad7883a 	add	r11,r11,r11
400037a0:	5ad7883a 	add	r11,r11,r11
400037a4:	42d7883a 	add	r11,r8,r11
400037a8:	59c00015 	stw	r7,0(r11)
      ModePredInfo_MVy(mpi,x,y)=mvy;
400037ac:	82800b17 	ldw	r10,44(r16)
400037b0:	6a95383a 	mul	r10,r13,r10
400037b4:	5455883a 	add	r10,r10,r17
400037b8:	5295883a 	add	r10,r10,r10
400037bc:	5295883a 	add	r10,r10,r10
400037c0:	1295883a 	add	r10,r2,r10
400037c4:	51800015 	stw	r6,0(r10)
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
    for(x=org_x+width-1; x>=org_x; --x) {
      ModePredInfo_MVx(mpi,x,y)=mvx;
400037c8:	82800b17 	ldw	r10,44(r16)
400037cc:	6295383a 	mul	r10,r12,r10
400037d0:	5155883a 	add	r10,r10,r5
400037d4:	5295883a 	add	r10,r10,r10
400037d8:	5295883a 	add	r10,r10,r10
400037dc:	4295883a 	add	r10,r8,r10
400037e0:	51c00015 	stw	r7,0(r10)
      ModePredInfo_MVy(mpi,x,y)=mvy;
400037e4:	82800b17 	ldw	r10,44(r16)
400037e8:	6295383a 	mul	r10,r12,r10
400037ec:	5155883a 	add	r10,r10,r5
400037f0:	5295883a 	add	r10,r10,r10
400037f4:	5295883a 	add	r10,r10,r10
400037f8:	1295883a 	add	r10,r2,r10
400037fc:	51800015 	stw	r6,0(r10)
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
    for(x=org_x+width-1; x>=org_x; --x) {
      ModePredInfo_MVx(mpi,x,y)=mvx;
40003800:	82800b17 	ldw	r10,44(r16)
40003804:	6295383a 	mul	r10,r12,r10
40003808:	5115883a 	add	r10,r10,r4
4000380c:	5295883a 	add	r10,r10,r10
40003810:	5295883a 	add	r10,r10,r10
40003814:	4295883a 	add	r10,r8,r10
40003818:	51c00015 	stw	r7,0(r10)
      ModePredInfo_MVy(mpi,x,y)=mvy;
4000381c:	82800b17 	ldw	r10,44(r16)
40003820:	6295383a 	mul	r10,r12,r10
40003824:	5115883a 	add	r10,r10,r4
40003828:	5295883a 	add	r10,r10,r10
4000382c:	5295883a 	add	r10,r10,r10
40003830:	1295883a 	add	r10,r2,r10
40003834:	51800015 	stw	r6,0(r10)
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
    for(x=org_x+width-1; x>=org_x; --x) {
      ModePredInfo_MVx(mpi,x,y)=mvx;
40003838:	82800b17 	ldw	r10,44(r16)
4000383c:	6295383a 	mul	r10,r12,r10
40003840:	50d5883a 	add	r10,r10,r3
40003844:	5295883a 	add	r10,r10,r10
40003848:	5295883a 	add	r10,r10,r10
4000384c:	4295883a 	add	r10,r8,r10
40003850:	51c00015 	stw	r7,0(r10)
      ModePredInfo_MVy(mpi,x,y)=mvy;
40003854:	82c00b17 	ldw	r11,44(r16)
40003858:	62d7383a 	mul	r11,r12,r11
4000385c:	58d7883a 	add	r11,r11,r3
40003860:	5ad7883a 	add	r11,r11,r11
40003864:	5ad7883a 	add	r11,r11,r11
40003868:	12d7883a 	add	r11,r2,r11
4000386c:	59800015 	stw	r6,0(r11)
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
    for(x=org_x+width-1; x>=org_x; --x) {
      ModePredInfo_MVx(mpi,x,y)=mvx;
40003870:	82c00b17 	ldw	r11,44(r16)
40003874:	62d7383a 	mul	r11,r12,r11
40003878:	5c57883a 	add	r11,r11,r17
4000387c:	5ad7883a 	add	r11,r11,r11
40003880:	5ad7883a 	add	r11,r11,r11
40003884:	42d7883a 	add	r11,r8,r11
40003888:	59c00015 	stw	r7,0(r11)
      ModePredInfo_MVy(mpi,x,y)=mvy;
4000388c:	82800b17 	ldw	r10,44(r16)
40003890:	6295383a 	mul	r10,r12,r10
40003894:	5455883a 	add	r10,r10,r17
40003898:	5295883a 	add	r10,r10,r10
4000389c:	5295883a 	add	r10,r10,r10
400038a0:	1295883a 	add	r10,r2,r10
400038a4:	51800015 	stw	r6,0(r10)
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
    for(x=org_x+width-1; x>=org_x; --x) {
      ModePredInfo_MVx(mpi,x,y)=mvx;
400038a8:	82800b17 	ldw	r10,44(r16)
400038ac:	4a95383a 	mul	r10,r9,r10
400038b0:	5155883a 	add	r10,r10,r5
400038b4:	5295883a 	add	r10,r10,r10
400038b8:	5295883a 	add	r10,r10,r10
400038bc:	4295883a 	add	r10,r8,r10
400038c0:	51c00015 	stw	r7,0(r10)
      ModePredInfo_MVy(mpi,x,y)=mvy;
400038c4:	82800b17 	ldw	r10,44(r16)
400038c8:	4a95383a 	mul	r10,r9,r10
400038cc:	514b883a 	add	r5,r10,r5
400038d0:	294b883a 	add	r5,r5,r5
400038d4:	294b883a 	add	r5,r5,r5
400038d8:	114b883a 	add	r5,r2,r5
400038dc:	29800015 	stw	r6,0(r5)
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
    for(x=org_x+width-1; x>=org_x; --x) {
      ModePredInfo_MVx(mpi,x,y)=mvx;
400038e0:	81400b17 	ldw	r5,44(r16)
400038e4:	494b383a 	mul	r5,r9,r5
400038e8:	290b883a 	add	r5,r5,r4
400038ec:	294b883a 	add	r5,r5,r5
400038f0:	294b883a 	add	r5,r5,r5
400038f4:	414b883a 	add	r5,r8,r5
400038f8:	29c00015 	stw	r7,0(r5)
      ModePredInfo_MVy(mpi,x,y)=mvy;
400038fc:	81400b17 	ldw	r5,44(r16)
40003900:	494b383a 	mul	r5,r9,r5
40003904:	2909883a 	add	r4,r5,r4
40003908:	2109883a 	add	r4,r4,r4
4000390c:	2109883a 	add	r4,r4,r4
40003910:	1109883a 	add	r4,r2,r4
40003914:	21800015 	stw	r6,0(r4)
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
    for(x=org_x+width-1; x>=org_x; --x) {
      ModePredInfo_MVx(mpi,x,y)=mvx;
40003918:	81000b17 	ldw	r4,44(r16)
4000391c:	4909383a 	mul	r4,r9,r4
40003920:	20c9883a 	add	r4,r4,r3
40003924:	2109883a 	add	r4,r4,r4
40003928:	2109883a 	add	r4,r4,r4
4000392c:	4109883a 	add	r4,r8,r4
40003930:	21c00015 	stw	r7,0(r4)
      ModePredInfo_MVy(mpi,x,y)=mvy;
40003934:	81000b17 	ldw	r4,44(r16)
40003938:	4909383a 	mul	r4,r9,r4
4000393c:	20c7883a 	add	r3,r4,r3
40003940:	18c7883a 	add	r3,r3,r3
40003944:	18c7883a 	add	r3,r3,r3
40003948:	10c7883a 	add	r3,r2,r3
4000394c:	19800015 	stw	r6,0(r3)
  int x,y;
  org_x>>=2; org_y>>=2;
  width>>=2; height>>=2;
  for(y=org_y+height-1; y>=org_y; --y)
    for(x=org_x+width-1; x>=org_x; --x) {
      ModePredInfo_MVx(mpi,x,y)=mvx;
40003950:	80c00b17 	ldw	r3,44(r16)
40003954:	48c7383a 	mul	r3,r9,r3
40003958:	1c47883a 	add	r3,r3,r17
4000395c:	18c7883a 	add	r3,r3,r3
40003960:	18c7883a 	add	r3,r3,r3
40003964:	40d1883a 	add	r8,r8,r3
40003968:	41c00015 	stw	r7,0(r8)
      ModePredInfo_MVy(mpi,x,y)=mvy;
4000396c:	80c00b17 	ldw	r3,44(r16)
40003970:	48d3383a 	mul	r9,r9,r3
40003974:	4c63883a 	add	r17,r9,r17
40003978:	8c63883a 	add	r17,r17,r17
4000397c:	8c63883a 	add	r17,r17,r17
40003980:	1445883a 	add	r2,r2,r17
40003984:	11800015 	stw	r6,0(r2)

void Derive_P_Skip_MVs(mode_pred_info *mpi, int org_x, int org_y) {
  mv v=Predict_P_Skip_MV(mpi,org_x,org_y);
//printf("P_Skip MV @ %d,%d: mv=%d,%d\n",org_x,org_y,v.x,v.y);
  FillMVs(mpi,org_x,org_y,16,16,v.x,v.y);
}
40003988:	dfc00917 	ldw	ra,36(sp)
4000398c:	dc800817 	ldw	r18,32(sp)
40003990:	dc400717 	ldw	r17,28(sp)
40003994:	dc000617 	ldw	r16,24(sp)
40003998:	dec00a04 	addi	sp,sp,40
4000399c:	f800283a 	ret

mv Predict_P_Skip_MV(mode_pred_info *mpi, int org_x, int org_y) {
  mv zero={0,0,0};
  if(org_x<=0 || org_y<=0) return zero;
  if(ModePredInfo_MVx(mpi,(org_x>>2)-1,org_y>>2)==0 &&
     ModePredInfo_MVy(mpi,(org_x>>2)-1,org_y>>2)==0) return zero;
400039a0:	80800f17 	ldw	r2,60(r16)
400039a4:	1295883a 	add	r10,r2,r10
}

mv Predict_P_Skip_MV(mode_pred_info *mpi, int org_x, int org_y) {
  mv zero={0,0,0};
  if(org_x<=0 || org_y<=0) return zero;
  if(ModePredInfo_MVx(mpi,(org_x>>2)-1,org_y>>2)==0 &&
400039a8:	51c00017 	ldw	r7,0(r10)
400039ac:	383ef81e 	bne	r7,zero,40003590 <__alt_data_end+0xc0003590>
     ModePredInfo_MVy(mpi,(org_x>>2)-1,org_y>>2)==0) return zero;
  if(ModePredInfo_MVx(mpi,org_x>>2,(org_y>>2)-1)==0 &&
     ModePredInfo_MVy(mpi,org_x>>2,(org_y>>2)-1)==0) return zero;
400039b0:	000d883a 	mov	r6,zero
400039b4:	000f883a 	mov	r7,zero
400039b8:	003f0d06 	br	400035f0 <__alt_data_end+0xc00035f0>
400039bc:	3013d0ba 	srai	r9,r6,2
400039c0:	2823d0ba 	srai	r17,r5,2
400039c4:	82000e17 	ldw	r8,56(r16)
400039c8:	80800f17 	ldw	r2,60(r16)
400039cc:	80c00b17 	ldw	r3,44(r16)
  return res;
}

mv Predict_P_Skip_MV(mode_pred_info *mpi, int org_x, int org_y) {
  mv zero={0,0,0};
  if(org_x<=0 || org_y<=0) return zero;
400039d0:	000d883a 	mov	r6,zero
400039d4:	000f883a 	mov	r7,zero
400039d8:	003f0606 	br	400035f4 <__alt_data_end+0xc00035f4>

400039dc <get_next_nal_unit>:
          } \
          segment_start=end&RING_MOD; \
        } while(0)


int get_next_nal_unit(nal_unit *nalu) {
400039dc:	defff804 	addi	sp,sp,-32
400039e0:	dd000415 	stw	r20,16(sp)
  int nalu_size=0;
  
  // search for the next NALU start
  for(;;) {
    if(input_remain<=4) return 0;
    if((!ring_buf[ring_pos]) &&
400039e4:	051000f4 	movhi	r20,16387
400039e8:	a52b1a04 	addi	r20,r20,-21400
          } \
          segment_start=end&RING_MOD; \
        } while(0)


int get_next_nal_unit(nal_unit *nalu) {
400039ec:	dd800615 	stw	r22,24(sp)
400039f0:	dd400515 	stw	r21,20(sp)
400039f4:	dcc00315 	stw	r19,12(sp)
400039f8:	dc400115 	stw	r17,4(sp)
400039fc:	dc000015 	stw	r16,0(sp)
40003a00:	dfc00715 	stw	ra,28(sp)
40003a04:	dc800215 	stw	r18,8(sp)
40003a08:	2021883a 	mov	r16,r4
  int i,segment_start;
  int nalu_size=0;
  
  // search for the next NALU start
  for(;;) {
    if(input_remain<=4) return 0;
40003a0c:	05400104 	movi	r21,4
    if((!ring_buf[ring_pos]) &&
40003a10:	a027883a 	mov	r19,r20
       (!ring_buf[(ring_pos+1)&RING_MOD]) &&
       (!ring_buf[(ring_pos+2)&RING_MOD]) &&
40003a14:	04400044 	movi	r17,1
       ( ring_buf[(ring_pos+3)&RING_MOD]==1))
      break;
    gnn_advance();
40003a18:	05840004 	movi	r22,4096
  int i,segment_start;
  int nalu_size=0;
  
  // search for the next NALU start
  for(;;) {
    if(input_remain<=4) return 0;
40003a1c:	d0ef9117 	ldw	r3,-16828(gp)
    if((!ring_buf[ring_pos]) &&
40003a20:	049000f4 	movhi	r18,16387
40003a24:	94ab1a04 	addi	r18,r18,-21400
  int i,segment_start;
  int nalu_size=0;
  
  // search for the next NALU start
  for(;;) {
    if(input_remain<=4) return 0;
40003a28:	a8c0200e 	bge	r21,r3,40003aac <get_next_nal_unit+0xd0>
    if((!ring_buf[ring_pos]) &&
40003a2c:	d0af9517 	ldw	r2,-16812(gp)
40003a30:	a089883a 	add	r4,r20,r2
40003a34:	21000003 	ldbu	r4,0(r4)
       (!ring_buf[(ring_pos+1)&RING_MOD]) &&
40003a38:	11400044 	addi	r5,r2,1
40003a3c:	2947ffcc 	andi	r5,r5,8191
40003a40:	994d883a 	add	r6,r19,r5
  int nalu_size=0;
  
  // search for the next NALU start
  for(;;) {
    if(input_remain<=4) return 0;
    if((!ring_buf[ring_pos]) &&
40003a44:	20000c1e 	bne	r4,zero,40003a78 <get_next_nal_unit+0x9c>
40003a48:	31800003 	ldbu	r6,0(r6)
       (!ring_buf[(ring_pos+1)&RING_MOD]) &&
       (!ring_buf[(ring_pos+2)&RING_MOD]) &&
40003a4c:	11000084 	addi	r4,r2,2
40003a50:	2107ffcc 	andi	r4,r4,8191
40003a54:	9909883a 	add	r4,r19,r4
  int nalu_size=0;
  
  // search for the next NALU start
  for(;;) {
    if(input_remain<=4) return 0;
    if((!ring_buf[ring_pos]) &&
40003a58:	3000071e 	bne	r6,zero,40003a78 <get_next_nal_unit+0x9c>
       (!ring_buf[(ring_pos+1)&RING_MOD]) &&
40003a5c:	21000003 	ldbu	r4,0(r4)
       (!ring_buf[(ring_pos+2)&RING_MOD]) &&
       ( ring_buf[(ring_pos+3)&RING_MOD]==1))
40003a60:	108000c4 	addi	r2,r2,3
40003a64:	1087ffcc 	andi	r2,r2,8191
40003a68:	9885883a 	add	r2,r19,r2
  
  // search for the next NALU start
  for(;;) {
    if(input_remain<=4) return 0;
    if((!ring_buf[ring_pos]) &&
       (!ring_buf[(ring_pos+1)&RING_MOD]) &&
40003a6c:	2000021e 	bne	r4,zero,40003a78 <get_next_nal_unit+0x9c>
       (!ring_buf[(ring_pos+2)&RING_MOD]) &&
40003a70:	10800003 	ldbu	r2,0(r2)
40003a74:	14401f26 	beq	r2,r17,40003af4 <get_next_nal_unit+0x118>
       ( ring_buf[(ring_pos+3)&RING_MOD]==1))
      break;
    gnn_advance();
40003a78:	18ffffc4 	addi	r3,r3,-1
40003a7c:	d16f9515 	stw	r5,-16812(gp)
40003a80:	d0ef9115 	stw	r3,-16828(gp)
40003a84:	28001426 	beq	r5,zero,40003ad8 <get_next_nal_unit+0xfc>
40003a88:	2dbfe41e 	bne	r5,r22,40003a1c <__alt_data_end+0xc0003a1c>
40003a8c:	011000f4 	movhi	r4,16387
40003a90:	212b1a04 	addi	r4,r4,-21400
40003a94:	b00b883a 	mov	r5,r22
40003a98:	00018b80 	call	400018b8 <input_read>
  int i,segment_start;
  int nalu_size=0;
  
  // search for the next NALU start
  for(;;) {
    if(input_remain<=4) return 0;
40003a9c:	d0ef9117 	ldw	r3,-16828(gp)
    if((!ring_buf[ring_pos]) &&
40003aa0:	049000f4 	movhi	r18,16387
40003aa4:	94ab1a04 	addi	r18,r18,-21400
  int i,segment_start;
  int nalu_size=0;
  
  // search for the next NALU start
  for(;;) {
    if(input_remain<=4) return 0;
40003aa8:	a8ffe016 	blt	r21,r3,40003a2c <__alt_data_end+0xc0003a2c>
40003aac:	0005883a 	mov	r2,zero
  nalu->nal_ref_idc=input_get_bits(2);
  nalu->nal_unit_type=input_get_bits(5);
  nalu->last_rbsp_byte=&nal_buf[nalu_size-1];
  nalu->NumBytesInNALunit=nalu_size;
  return 1;
}
40003ab0:	dfc00717 	ldw	ra,28(sp)
40003ab4:	dd800617 	ldw	r22,24(sp)
40003ab8:	dd400517 	ldw	r21,20(sp)
40003abc:	dd000417 	ldw	r20,16(sp)
40003ac0:	dcc00317 	ldw	r19,12(sp)
40003ac4:	dc800217 	ldw	r18,8(sp)
40003ac8:	dc400117 	ldw	r17,4(sp)
40003acc:	dc000017 	ldw	r16,0(sp)
40003ad0:	dec00804 	addi	sp,sp,32
40003ad4:	f800283a 	ret
    if((!ring_buf[ring_pos]) &&
       (!ring_buf[(ring_pos+1)&RING_MOD]) &&
       (!ring_buf[(ring_pos+2)&RING_MOD]) &&
       ( ring_buf[(ring_pos+3)&RING_MOD]==1))
      break;
    gnn_advance();
40003ad8:	011000f4 	movhi	r4,16387
40003adc:	01440004 	movi	r5,4096
40003ae0:	212f1a04 	addi	r4,r4,-17304
40003ae4:	00018b80 	call	400018b8 <input_read>
40003ae8:	d16f9517 	ldw	r5,-16812(gp)
40003aec:	2dbfcb1e 	bne	r5,r22,40003a1c <__alt_data_end+0xc0003a1c>
40003af0:	003fe606 	br	40003a8c <__alt_data_end+0xc0003a8c>
  }
  for(i=0; i<4; ++i) gnn_advance();
40003af4:	18ffffc4 	addi	r3,r3,-1
40003af8:	d16f9515 	stw	r5,-16812(gp)
40003afc:	d0ef9115 	stw	r3,-16828(gp)
40003b00:	28008926 	beq	r5,zero,40003d28 <get_next_nal_unit+0x34c>
40003b04:	00840004 	movi	r2,4096
40003b08:	28808c26 	beq	r5,r2,40003d3c <get_next_nal_unit+0x360>
40003b0c:	d0af9117 	ldw	r2,-16828(gp)
40003b10:	29400044 	addi	r5,r5,1
40003b14:	2947ffcc 	andi	r5,r5,8191
40003b18:	10bfffc4 	addi	r2,r2,-1
40003b1c:	d16f9515 	stw	r5,-16812(gp)
40003b20:	d0af9115 	stw	r2,-16828(gp)
40003b24:	28007a26 	beq	r5,zero,40003d10 <get_next_nal_unit+0x334>
40003b28:	00840004 	movi	r2,4096
40003b2c:	28809226 	beq	r5,r2,40003d78 <get_next_nal_unit+0x39c>
40003b30:	d0af9117 	ldw	r2,-16828(gp)
40003b34:	29400044 	addi	r5,r5,1
40003b38:	2947ffcc 	andi	r5,r5,8191
40003b3c:	10bfffc4 	addi	r2,r2,-1
40003b40:	d16f9515 	stw	r5,-16812(gp)
40003b44:	d0af9115 	stw	r2,-16828(gp)
40003b48:	28006b26 	beq	r5,zero,40003cf8 <get_next_nal_unit+0x31c>
40003b4c:	00840004 	movi	r2,4096
40003b50:	28808426 	beq	r5,r2,40003d64 <get_next_nal_unit+0x388>
40003b54:	d0af9117 	ldw	r2,-16828(gp)
40003b58:	29400044 	addi	r5,r5,1
40003b5c:	2947ffcc 	andi	r5,r5,8191
40003b60:	10bfffc4 	addi	r2,r2,-1
40003b64:	d16f9515 	stw	r5,-16812(gp)
40003b68:	d0af9115 	stw	r2,-16828(gp)
40003b6c:	28005c26 	beq	r5,zero,40003ce0 <get_next_nal_unit+0x304>
40003b70:	00840004 	movi	r2,4096
40003b74:	28807626 	beq	r5,r2,40003d50 <get_next_nal_unit+0x374>
  
  // add bytes to the NALU until the end is found
  segment_start=ring_pos;
  while(input_remain) {
    if((!ring_buf[ring_pos]) &&
40003b78:	045000f4 	movhi	r17,16387
       (!ring_buf[(ring_pos+2)&RING_MOD]))
      break;
    ring_pos=(ring_pos+1)&RING_MOD;
    --input_remain;
    if(ring_pos==0) {
      gnn_add_segment(RING_BUF_SIZE);
40003b7c:	055000f4 	movhi	r21,16387
40003b80:	2805883a 	mov	r2,r5
40003b84:	0027883a 	mov	r19,zero
  for(i=0; i<4; ++i) gnn_advance();
  
  // add bytes to the NALU until the end is found
  segment_start=ring_pos;
  while(input_remain) {
    if((!ring_buf[ring_pos]) &&
40003b88:	8c6b1a04 	addi	r17,r17,-21400
       (!ring_buf[(ring_pos+2)&RING_MOD]))
      break;
    ring_pos=(ring_pos+1)&RING_MOD;
    --input_remain;
    if(ring_pos==0) {
      gnn_add_segment(RING_BUF_SIZE);
40003b8c:	05080004 	movi	r20,8192
40003b90:	ad731a04 	addi	r21,r21,-13208
40003b94:	00001506 	br	40003bec <get_next_nal_unit+0x210>
40003b98:	10800044 	addi	r2,r2,1
40003b9c:	1087ffcc 	andi	r2,r2,8191
    if((!ring_buf[ring_pos]) &&
       (!ring_buf[(ring_pos+1)&RING_MOD]) &&
       (!ring_buf[(ring_pos+2)&RING_MOD]))
      break;
    ring_pos=(ring_pos+1)&RING_MOD;
    --input_remain;
40003ba0:	18ffffc4 	addi	r3,r3,-1
  while(input_remain) {
    if((!ring_buf[ring_pos]) &&
       (!ring_buf[(ring_pos+1)&RING_MOD]) &&
       (!ring_buf[(ring_pos+2)&RING_MOD]))
      break;
    ring_pos=(ring_pos+1)&RING_MOD;
40003ba4:	d0af9515 	stw	r2,-16812(gp)
    --input_remain;
40003ba8:	d0ef9115 	stw	r3,-16828(gp)
    if(ring_pos==0) {
40003bac:	10000d1e 	bne	r2,zero,40003be4 <get_next_nal_unit+0x208>
      gnn_add_segment(RING_BUF_SIZE);
40003bb0:	a16dc83a 	sub	r22,r20,r5
40003bb4:	0580050e 	bge	zero,r22,40003bcc <get_next_nal_unit+0x1f0>
40003bb8:	acc9883a 	add	r4,r21,r19
40003bbc:	b00d883a 	mov	r6,r22
40003bc0:	914b883a 	add	r5,r18,r5
40003bc4:	000b8fc0 	call	4000b8fc <memcpy>
40003bc8:	9da7883a 	add	r19,r19,r22
      input_read(&ring_buf[HALF_RING],HALF_RING);
40003bcc:	011000f4 	movhi	r4,16387
40003bd0:	01440004 	movi	r5,4096
40003bd4:	212f1a04 	addi	r4,r4,-17304
40003bd8:	00018b80 	call	400018b8 <input_read>
40003bdc:	d0af9517 	ldw	r2,-16812(gp)
       (!ring_buf[(ring_pos+2)&RING_MOD]))
      break;
    ring_pos=(ring_pos+1)&RING_MOD;
    --input_remain;
    if(ring_pos==0) {
      gnn_add_segment(RING_BUF_SIZE);
40003be0:	000b883a 	mov	r5,zero
      input_read(&ring_buf[HALF_RING],HALF_RING);
    }
    if(ring_pos==HALF_RING) {
40003be4:	00c40004 	movi	r3,4096
40003be8:	10c01726 	beq	r2,r3,40003c48 <get_next_nal_unit+0x26c>
  }
  for(i=0; i<4; ++i) gnn_advance();
  
  // add bytes to the NALU until the end is found
  segment_start=ring_pos;
  while(input_remain) {
40003bec:	d0ef9117 	ldw	r3,-16828(gp)
40003bf0:	18000f26 	beq	r3,zero,40003c30 <get_next_nal_unit+0x254>
    if((!ring_buf[ring_pos]) &&
40003bf4:	9089883a 	add	r4,r18,r2
40003bf8:	21000003 	ldbu	r4,0(r4)
40003bfc:	203fe61e 	bne	r4,zero,40003b98 <__alt_data_end+0xc0003b98>
       (!ring_buf[(ring_pos+1)&RING_MOD]) &&
40003c00:	11000044 	addi	r4,r2,1
40003c04:	2107ffcc 	andi	r4,r4,8191
40003c08:	890d883a 	add	r6,r17,r4
  for(i=0; i<4; ++i) gnn_advance();
  
  // add bytes to the NALU until the end is found
  segment_start=ring_pos;
  while(input_remain) {
    if((!ring_buf[ring_pos]) &&
40003c0c:	31800003 	ldbu	r6,0(r6)
40003c10:	3000051e 	bne	r6,zero,40003c28 <get_next_nal_unit+0x24c>
       (!ring_buf[(ring_pos+1)&RING_MOD]) &&
       (!ring_buf[(ring_pos+2)&RING_MOD]))
40003c14:	11800084 	addi	r6,r2,2
40003c18:	3187ffcc 	andi	r6,r6,8191
40003c1c:	898d883a 	add	r6,r17,r6
  
  // add bytes to the NALU until the end is found
  segment_start=ring_pos;
  while(input_remain) {
    if((!ring_buf[ring_pos]) &&
       (!ring_buf[(ring_pos+1)&RING_MOD]) &&
40003c20:	31800003 	ldbu	r6,0(r6)
40003c24:	30000226 	beq	r6,zero,40003c30 <get_next_nal_unit+0x254>
40003c28:	2005883a 	mov	r2,r4
40003c2c:	003fdc06 	br	40003ba0 <__alt_data_end+0xc0003ba0>
    if(ring_pos==HALF_RING) {
      gnn_add_segment(HALF_RING);
      input_read(&ring_buf[0],HALF_RING);
    }
  }
  gnn_add_segment(ring_pos);
40003c30:	1163c83a 	sub	r17,r2,r5
40003c34:	04401216 	blt	zero,r17,40003c80 <get_next_nal_unit+0x2a4>
  if(!nalu_size) return 0;
40003c38:	983f9c26 	beq	r19,zero,40003aac <__alt_data_end+0xc0003aac>
40003c3c:	051000f4 	movhi	r20,16387
40003c40:	a5331a04 	addi	r20,r20,-13208
40003c44:	00001506 	br	40003c9c <get_next_nal_unit+0x2c0>
    if(ring_pos==0) {
      gnn_add_segment(RING_BUF_SIZE);
      input_read(&ring_buf[HALF_RING],HALF_RING);
    }
    if(ring_pos==HALF_RING) {
      gnn_add_segment(HALF_RING);
40003c48:	116dc83a 	sub	r22,r2,r5
40003c4c:	0580050e 	bge	zero,r22,40003c64 <get_next_nal_unit+0x288>
40003c50:	acc9883a 	add	r4,r21,r19
40003c54:	b00d883a 	mov	r6,r22
40003c58:	914b883a 	add	r5,r18,r5
40003c5c:	000b8fc0 	call	4000b8fc <memcpy>
40003c60:	9da7883a 	add	r19,r19,r22
      input_read(&ring_buf[0],HALF_RING);
40003c64:	011000f4 	movhi	r4,16387
40003c68:	01440004 	movi	r5,4096
40003c6c:	212b1a04 	addi	r4,r4,-21400
40003c70:	00018b80 	call	400018b8 <input_read>
40003c74:	d0af9517 	ldw	r2,-16812(gp)
    if(ring_pos==0) {
      gnn_add_segment(RING_BUF_SIZE);
      input_read(&ring_buf[HALF_RING],HALF_RING);
    }
    if(ring_pos==HALF_RING) {
      gnn_add_segment(HALF_RING);
40003c78:	01440004 	movi	r5,4096
40003c7c:	003fdb06 	br	40003bec <__alt_data_end+0xc0003bec>
      input_read(&ring_buf[0],HALF_RING);
    }
  }
  gnn_add_segment(ring_pos);
40003c80:	051000f4 	movhi	r20,16387
40003c84:	a5331a04 	addi	r20,r20,-13208
40003c88:	9d09883a 	add	r4,r19,r20
40003c8c:	880d883a 	mov	r6,r17
40003c90:	914b883a 	add	r5,r18,r5
40003c94:	000b8fc0 	call	4000b8fc <memcpy>
40003c98:	9c67883a 	add	r19,r19,r17
  if(!nalu_size) return 0;
  
  // read the NAL unit
  nal_pos=0; nal_bit=0;
  nalu->forbidden_zero_bit=input_get_bits(1);
40003c9c:	01000044 	movi	r4,1
  }
  gnn_add_segment(ring_pos);
  if(!nalu_size) return 0;
  
  // read the NAL unit
  nal_pos=0; nal_bit=0;
40003ca0:	d02f9315 	stw	zero,-16820(gp)
40003ca4:	d02f9415 	stw	zero,-16816(gp)
  nalu->forbidden_zero_bit=input_get_bits(1);
40003ca8:	0001a040 	call	40001a04 <input_get_bits>
  nalu->nal_ref_idc=input_get_bits(2);
40003cac:	01000084 	movi	r4,2
  gnn_add_segment(ring_pos);
  if(!nalu_size) return 0;
  
  // read the NAL unit
  nal_pos=0; nal_bit=0;
  nalu->forbidden_zero_bit=input_get_bits(1);
40003cb0:	80800115 	stw	r2,4(r16)
  nalu->nal_ref_idc=input_get_bits(2);
40003cb4:	0001a040 	call	40001a04 <input_get_bits>
40003cb8:	80800215 	stw	r2,8(r16)
  nalu->nal_unit_type=input_get_bits(5);
40003cbc:	01000144 	movi	r4,5
40003cc0:	0001a040 	call	40001a04 <input_get_bits>
  nalu->last_rbsp_byte=&nal_buf[nalu_size-1];
40003cc4:	98ffffc4 	addi	r3,r19,-1
40003cc8:	1d29883a 	add	r20,r3,r20
  
  // read the NAL unit
  nal_pos=0; nal_bit=0;
  nalu->forbidden_zero_bit=input_get_bits(1);
  nalu->nal_ref_idc=input_get_bits(2);
  nalu->nal_unit_type=input_get_bits(5);
40003ccc:	80800315 	stw	r2,12(r16)
  nalu->last_rbsp_byte=&nal_buf[nalu_size-1];
40003cd0:	85000415 	stw	r20,16(r16)
  nalu->NumBytesInNALunit=nalu_size;
40003cd4:	84c00015 	stw	r19,0(r16)
  return 1;
40003cd8:	00800044 	movi	r2,1
40003cdc:	003f7406 	br	40003ab0 <__alt_data_end+0xc0003ab0>
       (!ring_buf[(ring_pos+2)&RING_MOD]) &&
       ( ring_buf[(ring_pos+3)&RING_MOD]==1))
      break;
    gnn_advance();
  }
  for(i=0; i<4; ++i) gnn_advance();
40003ce0:	011000f4 	movhi	r4,16387
40003ce4:	01440004 	movi	r5,4096
40003ce8:	212f1a04 	addi	r4,r4,-17304
40003cec:	00018b80 	call	400018b8 <input_read>
40003cf0:	d16f9517 	ldw	r5,-16812(gp)
40003cf4:	003f9e06 	br	40003b70 <__alt_data_end+0xc0003b70>
40003cf8:	011000f4 	movhi	r4,16387
40003cfc:	01440004 	movi	r5,4096
40003d00:	212f1a04 	addi	r4,r4,-17304
40003d04:	00018b80 	call	400018b8 <input_read>
40003d08:	d16f9517 	ldw	r5,-16812(gp)
40003d0c:	003f8f06 	br	40003b4c <__alt_data_end+0xc0003b4c>
40003d10:	011000f4 	movhi	r4,16387
40003d14:	01440004 	movi	r5,4096
40003d18:	212f1a04 	addi	r4,r4,-17304
40003d1c:	00018b80 	call	400018b8 <input_read>
40003d20:	d16f9517 	ldw	r5,-16812(gp)
40003d24:	003f8006 	br	40003b28 <__alt_data_end+0xc0003b28>
40003d28:	01440004 	movi	r5,4096
40003d2c:	9149883a 	add	r4,r18,r5
40003d30:	00018b80 	call	400018b8 <input_read>
40003d34:	d16f9517 	ldw	r5,-16812(gp)
40003d38:	003f7206 	br	40003b04 <__alt_data_end+0xc0003b04>
40003d3c:	011000f4 	movhi	r4,16387
40003d40:	212b1a04 	addi	r4,r4,-21400
40003d44:	00018b80 	call	400018b8 <input_read>
40003d48:	d16f9517 	ldw	r5,-16812(gp)
40003d4c:	003f6f06 	br	40003b0c <__alt_data_end+0xc0003b0c>
40003d50:	011000f4 	movhi	r4,16387
40003d54:	212b1a04 	addi	r4,r4,-21400
40003d58:	00018b80 	call	400018b8 <input_read>
40003d5c:	d16f9517 	ldw	r5,-16812(gp)
40003d60:	003f8506 	br	40003b78 <__alt_data_end+0xc0003b78>
40003d64:	011000f4 	movhi	r4,16387
40003d68:	212b1a04 	addi	r4,r4,-21400
40003d6c:	00018b80 	call	400018b8 <input_read>
40003d70:	d16f9517 	ldw	r5,-16812(gp)
40003d74:	003f7706 	br	40003b54 <__alt_data_end+0xc0003b54>
40003d78:	011000f4 	movhi	r4,16387
40003d7c:	212b1a04 	addi	r4,r4,-21400
40003d80:	00018b80 	call	400018b8 <input_read>
40003d84:	d16f9517 	ldw	r5,-16812(gp)
40003d88:	003f6906 	br	40003b30 <__alt_data_end+0xc0003b30>

40003d8c <more_rbsp_data>:
  return 1;
}


int more_rbsp_data(nal_unit *nalu) {
  return &nal_buf[nal_pos]<=nalu->last_rbsp_byte;
40003d8c:	d0af9317 	ldw	r2,-16820(gp)
40003d90:	21000417 	ldw	r4,16(r4)
40003d94:	00d000f4 	movhi	r3,16387
40003d98:	18f31a04 	addi	r3,r3,-13208
40003d9c:	10c5883a 	add	r2,r2,r3
}
40003da0:	2085403a 	cmpgeu	r2,r4,r2
40003da4:	f800283a 	ret

40003da8 <_str_nal_unit_type>:


char *_str_nal_unit_type(int type) {
  switch(type) {
40003da8:	00800304 	movi	r2,12
40003dac:	11003736 	bltu	r2,r4,40003e8c <_str_nal_unit_type+0xe4>
40003db0:	200690ba 	slli	r3,r4,2
40003db4:	00900034 	movhi	r2,16384
40003db8:	108f7204 	addi	r2,r2,15816
40003dbc:	1885883a 	add	r2,r3,r2
40003dc0:	10800017 	ldw	r2,0(r2)
40003dc4:	1000683a 	jmp	r2
40003dc8:	40003e8c 	andi	zero,r8,250
40003dcc:	40003dfc 	xorhi	zero,r8,247
40003dd0:	40003e08 	cmpgei	zero,r8,248
40003dd4:	40003e14 	ori	zero,r8,248
40003dd8:	40003e20 	cmpeqi	zero,r8,248
40003ddc:	40003e2c 	andhi	zero,r8,248
40003de0:	40003e38 	rdprs	zero,r8,248
40003de4:	40003e44 	addi	zero,r8,249
40003de8:	40003e50 	cmplti	zero,r8,249
40003dec:	40003e5c 	xori	zero,r8,249
40003df0:	40003e68 	cmpgeui	zero,r8,249
40003df4:	40003e74 	orhi	zero,r8,249
40003df8:	40003e80 	call	440003e8 <__alt_heap_start+0x3fbaadc>
    case  1: return "Coded slice of a non-IDR picture";
40003dfc:	009000b4 	movhi	r2,16386
40003e00:	10b7f804 	addi	r2,r2,-8224
40003e04:	f800283a 	ret
    case  2: return "Coded slice data partition A";
40003e08:	009000b4 	movhi	r2,16386
40003e0c:	10b80104 	addi	r2,r2,-8188
40003e10:	f800283a 	ret
    case  3: return "Coded slice data partition B";
40003e14:	009000b4 	movhi	r2,16386
40003e18:	10b80904 	addi	r2,r2,-8156
40003e1c:	f800283a 	ret
    case  4: return "Coded slice data partition C";
40003e20:	009000b4 	movhi	r2,16386
40003e24:	10b81104 	addi	r2,r2,-8124
40003e28:	f800283a 	ret
    case  5: return "Coded slice of an IDR picture";
40003e2c:	009000b4 	movhi	r2,16386
40003e30:	10b81904 	addi	r2,r2,-8092
40003e34:	f800283a 	ret
    case  6: return "Supplemental enhancement information (SEI)";
40003e38:	009000b4 	movhi	r2,16386
40003e3c:	10b82104 	addi	r2,r2,-8060
40003e40:	f800283a 	ret
    case  7: return "Sequence parameter set";
40003e44:	009000b4 	movhi	r2,16386
40003e48:	10b82c04 	addi	r2,r2,-8016
40003e4c:	f800283a 	ret
    case  8: return "Picture parameter set";
40003e50:	009000b4 	movhi	r2,16386
40003e54:	10b83204 	addi	r2,r2,-7992
40003e58:	f800283a 	ret
    case  9: return "Access unit delimiter";
40003e5c:	009000b4 	movhi	r2,16386
40003e60:	10b83804 	addi	r2,r2,-7968
40003e64:	f800283a 	ret
    case 10: return "End of sequence";
40003e68:	009000b4 	movhi	r2,16386
40003e6c:	10b83e04 	addi	r2,r2,-7944
40003e70:	f800283a 	ret
    case 11: return "End of stream";
40003e74:	009000b4 	movhi	r2,16386
40003e78:	10b84204 	addi	r2,r2,-7928
40003e7c:	f800283a 	ret
    case 12: return "Filler data";
40003e80:	009000b4 	movhi	r2,16386
40003e84:	10b84604 	addi	r2,r2,-7912
40003e88:	f800283a 	ret
    default:
      if(type && (type<24)) return "Reserved";
40003e8c:	20000526 	beq	r4,zero,40003ea4 <_str_nal_unit_type+0xfc>
40003e90:	008005c4 	movi	r2,23
40003e94:	11000316 	blt	r2,r4,40003ea4 <_str_nal_unit_type+0xfc>
40003e98:	009000b4 	movhi	r2,16386
40003e9c:	10b84904 	addi	r2,r2,-7900
40003ea0:	f800283a 	ret
  }
  return "Unspecified";
40003ea4:	009000b4 	movhi	r2,16386
40003ea8:	10b84c04 	addi	r2,r2,-7888
}
40003eac:	f800283a 	ret

40003eb0 <noc_init>:

static int total_flits = 0;

void noc_init()
{
    printf("initializing network!\n");
40003eb0:	011000b4 	movhi	r4,16386
static buffer the_buffer;

static int total_flits = 0;

void noc_init()
{
40003eb4:	defffe04 	addi	sp,sp,-8
    printf("initializing network!\n");
40003eb8:	21384f04 	addi	r4,r4,-7876
static buffer the_buffer;

static int total_flits = 0;

void noc_init()
{
40003ebc:	dfc00115 	stw	ra,4(sp)
40003ec0:	dc000015 	stw	r16,0(sp)
    printf("initializing network!\n");
40003ec4:	000bdac0 	call	4000bdac <puts>
    
    the_buffer.top_of_stack = 0;
40003ec8:	00d000b4 	movhi	r3,16386
40003ecc:	18daaf04 	addi	r3,r3,27324
40003ed0:	18106015 	stw	zero,16768(r3)
40003ed4:	18808004 	addi	r2,r3,512
40003ed8:	18d0e004 	addi	r3,r3,17280
    int i;
    for(i = 0; i < MAX_PACKETS; i++){
        the_buffer.the_packets[i].num_flits = 0;
40003edc:	10000015 	stw	zero,0(r2)
40003ee0:	10808304 	addi	r2,r2,524
{
    printf("initializing network!\n");
    
    the_buffer.top_of_stack = 0;
    int i;
    for(i = 0; i < MAX_PACKETS; i++){
40003ee4:	10fffd1e 	bne	r2,r3,40003edc <__alt_data_end+0xc0003edc>
        the_buffer.the_packets[i].num_flits = 0;
    }
    

    WR_PIO(NOC_CTRL_BASE, NOC_RESET);
40003ee8:	040d2004 	movi	r16,13440
40003eec:	00840034 	movhi	r2,4096
40003ef0:	80800035 	stwio	r2,0(r16)

    usleep(100);
40003ef4:	01001904 	movi	r4,100
40003ef8:	00164380 	call	40016438 <usleep>
    
    WR_PIO(NOC_CTRL_BASE, 0);
40003efc:	80000035 	stwio	zero,0(r16)
}
40003f00:	dfc00117 	ldw	ra,4(sp)
40003f04:	dc000017 	ldw	r16,0(sp)
40003f08:	dec00204 	addi	sp,sp,8
40003f0c:	f800283a 	ret

40003f10 <send_flit>:

void send_flit(uint32_t dest, uint32_t word0, uint32_t word1, uint32_t set_tail)
{
    //wait for ack to go low
    while(RD_PIO(NOC_STS_BASE) & TX_ACK_BIT);
40003f10:	00cd3c04 	movi	r3,13552
40003f14:	18800037 	ldwio	r2,0(r3)
40003f18:	103ffe16 	blt	r2,zero,40003f14 <__alt_data_end+0xc0003f14>
    
    //THIS IS A LEGACY FUNCTION
    //only send in mode 2
    WR_PIO(TX_0_BASE, word0);
40003f1c:	008d4c04 	movi	r2,13616
40003f20:	11400035 	stwio	r5,0(r2)
    WR_PIO(TX_1_BASE, word1);
40003f24:	008d4804 	movi	r2,13600
40003f28:	11800035 	stwio	r6,0(r2)
    
    //set control values
    int ncv = (dest<<16) | (set_tail?TAIL_FLIT_BIT:0) | CPU_TX_REQ | FORMAT_2;
40003f2c:	2008943a 	slli	r4,r4,16
40003f30:	38001b1e 	bne	r7,zero,40003fa0 <send_flit+0x90>
40003f34:	0005883a 	mov	r2,zero
40003f38:	01500034 	movhi	r5,16384
40003f3c:	29400084 	addi	r5,r5,2
40003f40:	2148b03a 	or	r4,r4,r5

void no_data_send(uint32_t format_code){
    //sends data assuming it has already been written to PIOs

    //wait for ack to go low
    while(RD_PIO(NOC_STS_BASE) & TX_ACK_BIT);
40003f44:	00cd3c04 	movi	r3,13552
    //only send in mode 2
    WR_PIO(TX_0_BASE, word0);
    WR_PIO(TX_1_BASE, word1);
    
    //set control values
    int ncv = (dest<<16) | (set_tail?TAIL_FLIT_BIT:0) | CPU_TX_REQ | FORMAT_2;
40003f48:	2088b03a 	or	r4,r4,r2

void no_data_send(uint32_t format_code){
    //sends data assuming it has already been written to PIOs

    //wait for ack to go low
    while(RD_PIO(NOC_STS_BASE) & TX_ACK_BIT);
40003f4c:	18800037 	ldwio	r2,0(r3)
40003f50:	103ffe16 	blt	r2,zero,40003f4c <__alt_data_end+0xc0003f4c>

    //set control values
    WR_PIO(NOC_CTRL_BASE, format_code);
40003f54:	008d2004 	movi	r2,13440
40003f58:	11000035 	stwio	r4,0(r2)

    //wait for ack to go high
    while((RD_PIO(NOC_STS_BASE) & TX_ACK_BIT) == 0);
40003f5c:	00cd3c04 	movi	r3,13552
40003f60:	18800037 	ldwio	r2,0(r3)
40003f64:	103ffe0e 	bge	r2,zero,40003f60 <__alt_data_end+0xc0003f60>
    
    WR_PIO(NOC_CTRL_BASE, 0);
}

void send_flit(uint32_t dest, uint32_t word0, uint32_t word1, uint32_t set_tail)
{
40003f68:	deffff04 	addi	sp,sp,-4

    //wait for ack to go high
    while((RD_PIO(NOC_STS_BASE) & TX_ACK_BIT) == 0);

    //clear ctrl value
    WR_PIO(NOC_CTRL_BASE, 0);
40003f6c:	008d2004 	movi	r2,13440
40003f70:	10000035 	stwio	zero,0(r2)
    //set control values
    int ncv = (dest<<16) | (set_tail?TAIL_FLIT_BIT:0) | CPU_TX_REQ | FORMAT_2;

    no_data_send(ncv);

    for(volatile int wait = 0; wait < 24; wait++);
40003f74:	d8000015 	stw	zero,0(sp)
40003f78:	d8800017 	ldw	r2,0(sp)
40003f7c:	00c005c4 	movi	r3,23
40003f80:	18800516 	blt	r3,r2,40003f98 <send_flit+0x88>
40003f84:	d8800017 	ldw	r2,0(sp)
40003f88:	10800044 	addi	r2,r2,1
40003f8c:	d8800015 	stw	r2,0(sp)
40003f90:	d8800017 	ldw	r2,0(sp)
40003f94:	18bffb0e 	bge	r3,r2,40003f84 <__alt_data_end+0xc0003f84>

}
40003f98:	dec00104 	addi	sp,sp,4
40003f9c:	f800283a 	ret
    //only send in mode 2
    WR_PIO(TX_0_BASE, word0);
    WR_PIO(TX_1_BASE, word1);
    
    //set control values
    int ncv = (dest<<16) | (set_tail?TAIL_FLIT_BIT:0) | CPU_TX_REQ | FORMAT_2;
40003fa0:	00a00034 	movhi	r2,32768
40003fa4:	003fe406 	br	40003f38 <__alt_data_end+0xc0003f38>

40003fa8 <no_data_send>:

void no_data_send(uint32_t format_code){
    //sends data assuming it has already been written to PIOs

    //wait for ack to go low
    while(RD_PIO(NOC_STS_BASE) & TX_ACK_BIT);
40003fa8:	00cd3c04 	movi	r3,13552
40003fac:	18800037 	ldwio	r2,0(r3)
40003fb0:	103ffe16 	blt	r2,zero,40003fac <__alt_data_end+0xc0003fac>

    //set control values
    WR_PIO(NOC_CTRL_BASE, format_code);
40003fb4:	008d2004 	movi	r2,13440
40003fb8:	11000035 	stwio	r4,0(r2)

    //wait for ack to go high
    while((RD_PIO(NOC_STS_BASE) & TX_ACK_BIT) == 0);
40003fbc:	00cd3c04 	movi	r3,13552
40003fc0:	18800037 	ldwio	r2,0(r3)
40003fc4:	103ffe0e 	bge	r2,zero,40003fc0 <__alt_data_end+0xc0003fc0>

    //clear ctrl value
    WR_PIO(NOC_CTRL_BASE, 0);
40003fc8:	008d2004 	movi	r2,13440
40003fcc:	10000035 	stwio	zero,0(r2)
40003fd0:	f800283a 	ret

40003fd4 <get_id_of_top_packet>:
}

uint32_t get_id_of_top_packet(){
	return the_buffer.the_packets[the_buffer.top_of_stack-1].identifier;
40003fd4:	00d000b4 	movhi	r3,16386
40003fd8:	18daaf04 	addi	r3,r3,27324
40003fdc:	18906017 	ldw	r2,16768(r3)
40003fe0:	10bfffc4 	addi	r2,r2,-1
40003fe4:	10808324 	muli	r2,r2,524
40003fe8:	1885883a 	add	r2,r3,r2
}
40003fec:	10808217 	ldw	r2,520(r2)
40003ff0:	f800283a 	ret

40003ff4 <get_buffer_rx_state>:


uint32_t get_buffer_rx_state()
{
    uint32_t state = RD_PIO(NOC_STS_BASE);
40003ff4:	008d3c04 	movi	r2,13552
40003ff8:	10800037 	ldwio	r2,0(r2)
    return state & 0xFF;
}
40003ffc:	10803fcc 	andi	r2,r2,255
40004000:	f800283a 	ret

40004004 <copy_to_buffer>:



uint32_t copy_to_buffer(uint32_t id)
{
    uint32_t packet_index = the_buffer.top_of_stack;
40004004:	00d000b4 	movhi	r3,16386
40004008:	18daaf04 	addi	r3,r3,27324
4000400c:	19506017 	ldw	r5,16768(r3)
    uint32_t flit_index   = the_buffer.the_packets[packet_index].num_flits;
    
    uint32_t flit_top    = RD_PIO(RX_0_BASE);
40004010:	008d4404 	movi	r2,13584


uint32_t copy_to_buffer(uint32_t id)
{
    uint32_t packet_index = the_buffer.top_of_stack;
    uint32_t flit_index   = the_buffer.the_packets[packet_index].num_flits;
40004014:	29408324 	muli	r5,r5,524
40004018:	194f883a 	add	r7,r3,r5
4000401c:	3a008004 	addi	r8,r7,512
40004020:	41800017 	ldw	r6,0(r8)
    
    uint32_t flit_top    = RD_PIO(RX_0_BASE);
40004024:	12400037 	ldwio	r9,0(r2)
    uint32_t flit_bottom = RD_PIO(RX_1_BASE);
40004028:	008d4004 	movi	r2,13568
4000402c:	12800037 	ldwio	r10,0(r2)
    the_buffer.the_packets[packet_index].num_flits          = flit_index;
    the_buffer.the_packets[packet_index].identifier         = id;
    the_buffer.the_packets[packet_index].src_addr           = 0;

    return 1;
}
40004030:	00800044 	movi	r2,1
    uint32_t flit_index   = the_buffer.the_packets[packet_index].num_flits;
    
    uint32_t flit_top    = RD_PIO(RX_0_BASE);
    uint32_t flit_bottom = RD_PIO(RX_1_BASE);
    
    uint64_t *flit_stack = &(the_buffer.the_packets[packet_index].data.flit[flit_index++]);
40004034:	301690fa 	slli	r11,r6,3
    *(uint32_t *)flit_stack                                 = flit_bottom;
    *(((uint32_t *)flit_stack)+1)                           = flit_top;
    the_buffer.the_packets[packet_index].num_flits          = flit_index;
40004038:	308d883a 	add	r6,r6,r2
    uint32_t flit_index   = the_buffer.the_packets[packet_index].num_flits;
    
    uint32_t flit_top    = RD_PIO(RX_0_BASE);
    uint32_t flit_bottom = RD_PIO(RX_1_BASE);
    
    uint64_t *flit_stack = &(the_buffer.the_packets[packet_index].data.flit[flit_index++]);
4000403c:	594b883a 	add	r5,r11,r5
40004040:	28c7883a 	add	r3,r5,r3
    *(uint32_t *)flit_stack                                 = flit_bottom;
40004044:	1a800015 	stw	r10,0(r3)
    *(((uint32_t *)flit_stack)+1)                           = flit_top;
40004048:	1a400115 	stw	r9,4(r3)
    the_buffer.the_packets[packet_index].num_flits          = flit_index;
4000404c:	41800015 	stw	r6,0(r8)
    the_buffer.the_packets[packet_index].identifier         = id;
40004050:	39008215 	stw	r4,520(r7)
    the_buffer.the_packets[packet_index].src_addr           = 0;
40004054:	38008115 	stw	zero,516(r7)

    return 1;
}
40004058:	f800283a 	ret

4000405c <set_cpu_read_flag>:

void set_cpu_read_flag(int value)
{
    uint32_t noc_ctrl_value = RD_PIO(NOC_CTRL_BASE);
4000405c:	008d2004 	movi	r2,13440
40004060:	10800037 	ldwio	r2,0(r2)
    if( value != 0)
40004064:	2000061e 	bne	r4,zero,40004080 <set_cpu_read_flag+0x24>
    {
    	noc_ctrl_value |= CPU_RX_CTRL;
    }
    else
    {
    	noc_ctrl_value &= (~CPU_RX_CTRL);
40004068:	00f80034 	movhi	r3,57344
4000406c:	18ffffc4 	addi	r3,r3,-1
40004070:	10c4703a 	and	r2,r2,r3
    }
    WR_PIO(NOC_CTRL_BASE, noc_ctrl_value);
40004074:	00cd2004 	movi	r3,13440
40004078:	18800035 	stwio	r2,0(r3)
4000407c:	f800283a 	ret
void set_cpu_read_flag(int value)
{
    uint32_t noc_ctrl_value = RD_PIO(NOC_CTRL_BASE);
    if( value != 0)
    {
    	noc_ctrl_value |= CPU_RX_CTRL;
40004080:	10880034 	orhi	r2,r2,8192
    }
    else
    {
    	noc_ctrl_value &= (~CPU_RX_CTRL);
    }
    WR_PIO(NOC_CTRL_BASE, noc_ctrl_value);
40004084:	00cd2004 	movi	r3,13440
40004088:	18800035 	stwio	r2,0(r3)
4000408c:	f800283a 	ret

40004090 <get_identifier>:
}

uint32_t get_identifier()
{
    return RD_PIO(RX_1_BASE) & 0xFF;
40004090:	008d4004 	movi	r2,13568
40004094:	10800037 	ldwio	r2,0(r2)
}
40004098:	10803fcc 	andi	r2,r2,255
4000409c:	f800283a 	ret

400040a0 <buffers_loop>:
uint32_t buffers_loop(uint32_t packet_count)
{
    uint32_t id = 0;
    uint32_t packets_rxd = 0;
    uint32_t packets_rxd_next = 0;
    uint32_t next_packet = the_buffer.top_of_stack;
400040a0:	025000b4 	movhi	r9,16386
400040a4:	4a5aaf04 	addi	r9,r9,27324
400040a8:	4b106017 	ldw	r12,16768(r9)
{
    return RD_PIO(RX_1_BASE) & 0xFF;
}

uint32_t buffers_loop(uint32_t packet_count)
{
400040ac:	defff904 	addi	sp,sp,-28
    
    
    while(infinite_loops || (packets_rxd < packet_count))
    {
    	int the_state = get_buffer_rx_state();
    	switch(the_state){
400040b0:	02100034 	movhi	r8,16384
    }
    else
    {
    	noc_ctrl_value &= (~CPU_RX_CTRL);
    }
    WR_PIO(NOC_CTRL_BASE, noc_ctrl_value);
400040b4:	03b80034 	movhi	r14,57344
{
    return RD_PIO(RX_1_BASE) & 0xFF;
}

uint32_t buffers_loop(uint32_t packet_count)
{
400040b8:	dfc00615 	stw	ra,24(sp)
400040bc:	dd400515 	stw	r21,20(sp)
400040c0:	dd000415 	stw	r20,16(sp)
400040c4:	dcc00315 	stw	r19,12(sp)
400040c8:	dc800215 	stw	r18,8(sp)
400040cc:	dc400115 	stw	r17,4(sp)
400040d0:	dc000015 	stw	r16,0(sp)
    uint32_t id = 0;
    uint32_t packets_rxd = 0;
    uint32_t packets_rxd_next = 0;
400040d4:	0017883a 	mov	r11,zero
}

uint32_t buffers_loop(uint32_t packet_count)
{
    uint32_t id = 0;
    uint32_t packets_rxd = 0;
400040d8:	003f883a 	mov	ra,zero
    return RD_PIO(RX_1_BASE) & 0xFF;
}

uint32_t buffers_loop(uint32_t packet_count)
{
    uint32_t id = 0;
400040dc:	0015883a 	mov	r10,zero
}


uint32_t get_buffer_rx_state()
{
    uint32_t state = RD_PIO(NOC_STS_BASE);
400040e0:	00cd3c04 	movi	r3,13552
    
    
    while(infinite_loops || (packets_rxd < packet_count))
    {
    	int the_state = get_buffer_rx_state();
    	switch(the_state){
400040e4:	01c00144 	movi	r7,5
400040e8:	42104904 	addi	r8,r8,16676
    return 1;
}

void set_cpu_read_flag(int value)
{
    uint32_t noc_ctrl_value = RD_PIO(NOC_CTRL_BASE);
400040ec:	018d2004 	movi	r6,13440
    }
    else
    {
    	noc_ctrl_value &= (~CPU_RX_CTRL);
    }
    WR_PIO(NOC_CTRL_BASE, noc_ctrl_value);
400040f0:	73bfffc4 	addi	r14,r14,-1
uint32_t copy_to_buffer(uint32_t id)
{
    uint32_t packet_index = the_buffer.top_of_stack;
    uint32_t flit_index   = the_buffer.the_packets[packet_index].num_flits;
    
    uint32_t flit_top    = RD_PIO(RX_0_BASE);
400040f4:	03cd4404 	movi	r15,13584
    uint32_t flit_bottom = RD_PIO(RX_1_BASE);
400040f8:	034d4004 	movi	r13,13568
    		packets_rxd = packets_rxd_next;
    		break;
    	case BUFFER_ADDR_RST:
    		set_cpu_read_flag(1);
    		packets_rxd = packets_rxd_next;
    		while(get_buffer_rx_state() != BUFFER_START_READ);
400040fc:	014000c4 	movi	r5,3
    uint32_t packets_rxd_next = 0;
    uint32_t next_packet = the_buffer.top_of_stack;
    uint32_t infinite_loops = (packet_count==0)?1:0;
    
    
    while(infinite_loops || (packets_rxd < packet_count))
40004100:	20000126 	beq	r4,zero,40004108 <buffers_loop+0x68>
40004104:	f900362e 	bgeu	ra,r4,400041e0 <buffers_loop+0x140>
}


uint32_t get_buffer_rx_state()
{
    uint32_t state = RD_PIO(NOC_STS_BASE);
40004108:	18800037 	ldwio	r2,0(r3)
    
    
    while(infinite_loops || (packets_rxd < packet_count))
    {
    	int the_state = get_buffer_rx_state();
    	switch(the_state){
4000410c:	10803fcc 	andi	r2,r2,255
40004110:	38bffb36 	bltu	r7,r2,40004100 <__alt_data_end+0xc0004100>
40004114:	100490ba 	slli	r2,r2,2
40004118:	1205883a 	add	r2,r2,r8
4000411c:	10800017 	ldw	r2,0(r2)
40004120:	1000683a 	jmp	r2
40004124:	40004154 	ori	zero,r8,261
40004128:	40004100 	call	44000410 <__alt_heap_start+0x3fbab04>
4000412c:	4000413c 	xorhi	zero,r8,260
40004130:	400041ac 	andhi	zero,r8,262
40004134:	4000415c 	xori	zero,r8,261
40004138:	400041d0 	cmplti	zero,r8,263
    return 1;
}

void set_cpu_read_flag(int value)
{
    uint32_t noc_ctrl_value = RD_PIO(NOC_CTRL_BASE);
4000413c:	30800037 	ldwio	r2,0(r6)
    }
    else
    {
    	noc_ctrl_value &= (~CPU_RX_CTRL);
    }
    WR_PIO(NOC_CTRL_BASE, noc_ctrl_value);
40004140:	10880034 	orhi	r2,r2,8192
40004144:	30800035 	stwio	r2,0(r6)
}


uint32_t get_buffer_rx_state()
{
    uint32_t state = RD_PIO(NOC_STS_BASE);
40004148:	18800037 	ldwio	r2,0(r3)
    		packets_rxd = packets_rxd_next;
    		break;
    	case BUFFER_ADDR_RST:
    		set_cpu_read_flag(1);
    		packets_rxd = packets_rxd_next;
    		while(get_buffer_rx_state() != BUFFER_START_READ);
4000414c:	10803fcc 	andi	r2,r2,255
40004150:	117ffd1e 	bne	r2,r5,40004148 <__alt_data_end+0xc0004148>
    	case BUFFER_IDLE:
    		packets_rxd = packets_rxd_next;
    		break;
    	case BUFFER_ADDR_RST:
    		set_cpu_read_flag(1);
    		packets_rxd = packets_rxd_next;
40004154:	583f883a 	mov	ra,r11
40004158:	003fe906 	br	40004100 <__alt_data_end+0xc0004100>



uint32_t copy_to_buffer(uint32_t id)
{
    uint32_t packet_index = the_buffer.top_of_stack;
4000415c:	48906017 	ldw	r2,16768(r9)
    uint32_t flit_index   = the_buffer.the_packets[packet_index].num_flits;
40004160:	10808324 	muli	r2,r2,524
40004164:	48a3883a 	add	r17,r9,r2
40004168:	8c808004 	addi	r18,r17,512
4000416c:	94000017 	ldw	r16,0(r18)
    
    uint32_t flit_top    = RD_PIO(RX_0_BASE);
40004170:	7cc00037 	ldwio	r19,0(r15)
    uint32_t flit_bottom = RD_PIO(RX_1_BASE);
40004174:	6d000037 	ldwio	r20,0(r13)
    
    uint64_t *flit_stack = &(the_buffer.the_packets[packet_index].data.flit[flit_index++]);
40004178:	802a90fa 	slli	r21,r16,3
    *(uint32_t *)flit_stack                                 = flit_bottom;
    *(((uint32_t *)flit_stack)+1)                           = flit_top;
    the_buffer.the_packets[packet_index].num_flits          = flit_index;
4000417c:	84000044 	addi	r16,r16,1
    uint32_t flit_index   = the_buffer.the_packets[packet_index].num_flits;
    
    uint32_t flit_top    = RD_PIO(RX_0_BASE);
    uint32_t flit_bottom = RD_PIO(RX_1_BASE);
    
    uint64_t *flit_stack = &(the_buffer.the_packets[packet_index].data.flit[flit_index++]);
40004180:	a885883a 	add	r2,r21,r2
40004184:	4885883a 	add	r2,r9,r2
    *(uint32_t *)flit_stack                                 = flit_bottom;
40004188:	15000015 	stw	r20,0(r2)
    *(((uint32_t *)flit_stack)+1)                           = flit_top;
4000418c:	14c00115 	stw	r19,4(r2)
    the_buffer.the_packets[packet_index].num_flits          = flit_index;
40004190:	94000015 	stw	r16,0(r18)
    the_buffer.the_packets[packet_index].identifier         = id;
40004194:	8a808215 	stw	r10,520(r17)
    the_buffer.the_packets[packet_index].src_addr           = 0;
40004198:	88008115 	stw	zero,516(r17)
    return 1;
}

void set_cpu_read_flag(int value)
{
    uint32_t noc_ctrl_value = RD_PIO(NOC_CTRL_BASE);
4000419c:	30800037 	ldwio	r2,0(r6)
    }
    else
    {
    	noc_ctrl_value &= (~CPU_RX_CTRL);
    }
    WR_PIO(NOC_CTRL_BASE, noc_ctrl_value);
400041a0:	10880034 	orhi	r2,r2,8192
400041a4:	30800035 	stwio	r2,0(r6)
400041a8:	003fd506 	br	40004100 <__alt_data_end+0xc0004100>
}

uint32_t get_identifier()
{
    return RD_PIO(RX_1_BASE) & 0xFF;
400041ac:	6a800037 	ldwio	r10,0(r13)
    		packets_rxd = packets_rxd_next;
    		while(get_buffer_rx_state() != BUFFER_START_READ);
    		break;
    	case BUFFER_START_READ:
    		id = get_identifier();
    		the_buffer.top_of_stack = next_packet;
400041b0:	4b106015 	stw	r12,16768(r9)
    WR_PIO(NOC_CTRL_BASE, noc_ctrl_value);
}

uint32_t get_identifier()
{
    return RD_PIO(RX_1_BASE) & 0xFF;
400041b4:	52803fcc 	andi	r10,r10,255
    		while(get_buffer_rx_state() != BUFFER_START_READ);
    		break;
    	case BUFFER_START_READ:
    		id = get_identifier();
    		the_buffer.top_of_stack = next_packet;
    		next_packet += 1;
400041b8:	63000044 	addi	r12,r12,1
    		packets_rxd_next += 1;
400041bc:	5ac00044 	addi	r11,r11,1
    return 1;
}

void set_cpu_read_flag(int value)
{
    uint32_t noc_ctrl_value = RD_PIO(NOC_CTRL_BASE);
400041c0:	30800037 	ldwio	r2,0(r6)
    }
    else
    {
    	noc_ctrl_value &= (~CPU_RX_CTRL);
    }
    WR_PIO(NOC_CTRL_BASE, noc_ctrl_value);
400041c4:	1384703a 	and	r2,r2,r14
400041c8:	30800035 	stwio	r2,0(r6)
400041cc:	003fcc06 	br	40004100 <__alt_data_end+0xc0004100>
    return 1;
}

void set_cpu_read_flag(int value)
{
    uint32_t noc_ctrl_value = RD_PIO(NOC_CTRL_BASE);
400041d0:	30800037 	ldwio	r2,0(r6)
    }
    else
    {
    	noc_ctrl_value &= (~CPU_RX_CTRL);
    }
    WR_PIO(NOC_CTRL_BASE, noc_ctrl_value);
400041d4:	1384703a 	and	r2,r2,r14
400041d8:	30800035 	stwio	r2,0(r6)
400041dc:	003fc806 	br	40004100 <__alt_data_end+0xc0004100>
    }
    
    the_buffer.top_of_stack = next_packet;
    
    return 0;
}
400041e0:	0005883a 	mov	r2,zero
    	default:
    		break;
    	}
    }
    
    the_buffer.top_of_stack = next_packet;
400041e4:	4b106015 	stw	r12,16768(r9)
    
    return 0;
}
400041e8:	dfc00617 	ldw	ra,24(sp)
400041ec:	dd400517 	ldw	r21,20(sp)
400041f0:	dd000417 	ldw	r20,16(sp)
400041f4:	dcc00317 	ldw	r19,12(sp)
400041f8:	dc800217 	ldw	r18,8(sp)
400041fc:	dc400117 	ldw	r17,4(sp)
40004200:	dc000017 	ldw	r16,0(sp)
40004204:	dec00704 	addi	sp,sp,28
40004208:	f800283a 	ret

4000420c <peak_rx_buffer>:

packet peak_rx_buffer(){
    if(the_buffer.top_of_stack>0){
4000420c:	015000b4 	movhi	r5,16386
40004210:	295aaf04 	addi	r5,r5,27324
40004214:	28906017 	ldw	r2,16768(r5)
    the_buffer.top_of_stack = next_packet;
    
    return 0;
}

packet peak_rx_buffer(){
40004218:	defffe04 	addi	sp,sp,-8
4000421c:	dc000015 	stw	r16,0(sp)
40004220:	dfc00115 	stw	ra,4(sp)
40004224:	2021883a 	mov	r16,r4
    if(the_buffer.top_of_stack>0){
40004228:	1000071e 	bne	r2,zero,40004248 <peak_rx_buffer+0x3c>
        return the_buffer.the_packets[the_buffer.top_of_stack-1];
    }else{
        return the_buffer.the_packets[0];
4000422c:	01808304 	movi	r6,524
40004230:	000b8fc0 	call	4000b8fc <memcpy>
    }
}
40004234:	8005883a 	mov	r2,r16
40004238:	dfc00117 	ldw	ra,4(sp)
4000423c:	dc000017 	ldw	r16,0(sp)
40004240:	dec00204 	addi	sp,sp,8
40004244:	f800283a 	ret
    return 0;
}

packet peak_rx_buffer(){
    if(the_buffer.top_of_stack>0){
        return the_buffer.the_packets[the_buffer.top_of_stack-1];
40004248:	10bfffc4 	addi	r2,r2,-1
4000424c:	10808324 	muli	r2,r2,524
40004250:	01808304 	movi	r6,524
40004254:	288b883a 	add	r5,r5,r2
40004258:	000b8fc0 	call	4000b8fc <memcpy>
4000425c:	003ff506 	br	40004234 <__alt_data_end+0xc0004234>

40004260 <peak_rx_buffer2>:
    
    return 0;
}

packet peak_rx_buffer(){
    if(the_buffer.top_of_stack>0){
40004260:	015000b4 	movhi	r5,16386
40004264:	295aaf04 	addi	r5,r5,27324
40004268:	28906017 	ldw	r2,16768(r5)
    }else{
        return the_buffer.the_packets[0];
    }
}

void peak_rx_buffer2(packet *return_packet){
4000426c:	deff7b04 	addi	sp,sp,-532
40004270:	dc008315 	stw	r16,524(sp)
40004274:	dfc08415 	stw	ra,528(sp)
40004278:	2021883a 	mov	r16,r4
    
    return 0;
}

packet peak_rx_buffer(){
    if(the_buffer.top_of_stack>0){
4000427c:	10000b1e 	bne	r2,zero,400042ac <peak_rx_buffer2+0x4c>
        return the_buffer.the_packets[the_buffer.top_of_stack-1];
    }else{
        return the_buffer.the_packets[0];
40004280:	01808304 	movi	r6,524
40004284:	d809883a 	mov	r4,sp
40004288:	000b8fc0 	call	4000b8fc <memcpy>
    }
}

void peak_rx_buffer2(packet *return_packet){
    
    *return_packet = peak_rx_buffer();
4000428c:	01808304 	movi	r6,524
40004290:	d80b883a 	mov	r5,sp
40004294:	8009883a 	mov	r4,r16
40004298:	000b8fc0 	call	4000b8fc <memcpy>
}
4000429c:	dfc08417 	ldw	ra,528(sp)
400042a0:	dc008317 	ldw	r16,524(sp)
400042a4:	dec08504 	addi	sp,sp,532
400042a8:	f800283a 	ret
    return 0;
}

packet peak_rx_buffer(){
    if(the_buffer.top_of_stack>0){
        return the_buffer.the_packets[the_buffer.top_of_stack-1];
400042ac:	10bfffc4 	addi	r2,r2,-1
400042b0:	10808324 	muli	r2,r2,524
400042b4:	01808304 	movi	r6,524
400042b8:	d809883a 	mov	r4,sp
400042bc:	288b883a 	add	r5,r5,r2
400042c0:	000b8fc0 	call	4000b8fc <memcpy>
400042c4:	003ff106 	br	4000428c <__alt_data_end+0xc000428c>

400042c8 <pop_rx_buffer>:
}


void pop_rx_buffer(){
    
    if(the_buffer.top_of_stack>0){
400042c8:	011000b4 	movhi	r4,16386
400042cc:	211aaf04 	addi	r4,r4,27324
400042d0:	20906017 	ldw	r2,16768(r4)
400042d4:	10000726 	beq	r2,zero,400042f4 <pop_rx_buffer+0x2c>
        the_buffer.the_packets[the_buffer.top_of_stack-1].num_flits  = 0;
400042d8:	10bfffc4 	addi	r2,r2,-1
400042dc:	10c08324 	muli	r3,r2,524
        the_buffer.the_packets[the_buffer.top_of_stack-1].src_addr   = 0;
        the_buffer.the_packets[the_buffer.top_of_stack-1].identifier = 0;
        the_buffer.top_of_stack -= 1;
400042e0:	20906015 	stw	r2,16768(r4)


void pop_rx_buffer(){
    
    if(the_buffer.top_of_stack>0){
        the_buffer.the_packets[the_buffer.top_of_stack-1].num_flits  = 0;
400042e4:	20c5883a 	add	r2,r4,r3
400042e8:	10008015 	stw	zero,512(r2)
        the_buffer.the_packets[the_buffer.top_of_stack-1].src_addr   = 0;
400042ec:	10008115 	stw	zero,516(r2)
        the_buffer.the_packets[the_buffer.top_of_stack-1].identifier = 0;
400042f0:	10008215 	stw	zero,520(r2)
400042f4:	f800283a 	ret

400042f8 <get_num_packets>:
        the_buffer.top_of_stack -= 1;
    }
}

uint32_t get_num_packets(){
    return the_buffer.top_of_stack;
400042f8:	009000b4 	movhi	r2,16386
400042fc:	109aaf04 	addi	r2,r2,27324
}
40004300:	10906017 	ldw	r2,16768(r2)
40004304:	f800283a 	ret

40004308 <print_rx_buffer>:

void print_rx_buffer(){
40004308:	defff904 	addi	sp,sp,-28
4000430c:	dd400515 	stw	r21,20(sp)
	printf("number of packets: %d\n", the_buffer.top_of_stack);
40004310:	055000b4 	movhi	r21,16386
40004314:	ad5aaf04 	addi	r21,r21,27324
40004318:	a9506017 	ldw	r5,16768(r21)
4000431c:	011000b4 	movhi	r4,16386
40004320:	21385504 	addi	r4,r4,-7852

uint32_t get_num_packets(){
    return the_buffer.top_of_stack;
}

void print_rx_buffer(){
40004324:	dfc00615 	stw	ra,24(sp)
40004328:	dd000415 	stw	r20,16(sp)
4000432c:	dcc00315 	stw	r19,12(sp)
40004330:	dc800215 	stw	r18,8(sp)
40004334:	dc400115 	stw	r17,4(sp)
40004338:	dc000015 	stw	r16,0(sp)
	printf("number of packets: %d\n", the_buffer.top_of_stack);
4000433c:	000bc900 	call	4000bc90 <printf>
	for(int i = 0; i< the_buffer.top_of_stack; i++){
40004340:	a8906017 	ldw	r2,16768(r21)
40004344:	10002126 	beq	r2,zero,400043cc <print_rx_buffer+0xc4>
40004348:	ac808004 	addi	r18,r21,512
4000434c:	ad008204 	addi	r20,r21,520
40004350:	0027883a 	mov	r19,zero
		printf("    packet[%d]\n", i);
40004354:	011000b4 	movhi	r4,16386
40004358:	21385b04 	addi	r4,r4,-7828
4000435c:	980b883a 	mov	r5,r19
40004360:	000bc900 	call	4000bc90 <printf>
		printf("    flits: %d\n",the_buffer.the_packets[i].num_flits);
40004364:	91400017 	ldw	r5,0(r18)
40004368:	011000b4 	movhi	r4,16386
4000436c:	21385f04 	addi	r4,r4,-7812
40004370:	000bc900 	call	4000bc90 <printf>
		printf("    identifier: %d\n", the_buffer.the_packets[i].identifier);
40004374:	a1400017 	ldw	r5,0(r20)
40004378:	011000b4 	movhi	r4,16386
4000437c:	21386304 	addi	r4,r4,-7796
40004380:	000bc900 	call	4000bc90 <printf>
		for(int j = 0; j < the_buffer.the_packets[i].num_flits; j++){
40004384:	90800017 	ldw	r2,0(r18)
40004388:	10000b26 	beq	r2,zero,400043b8 <print_rx_buffer+0xb0>
4000438c:	943f8004 	addi	r16,r18,-512
40004390:	0023883a 	mov	r17,zero
			printf("        %016llx\n", the_buffer.the_packets[i].data.flit[j]);
40004394:	81400017 	ldw	r5,0(r16)
40004398:	81800117 	ldw	r6,4(r16)
4000439c:	011000b4 	movhi	r4,16386
400043a0:	21386804 	addi	r4,r4,-7776
400043a4:	000bc900 	call	4000bc90 <printf>
	printf("number of packets: %d\n", the_buffer.top_of_stack);
	for(int i = 0; i< the_buffer.top_of_stack; i++){
		printf("    packet[%d]\n", i);
		printf("    flits: %d\n",the_buffer.the_packets[i].num_flits);
		printf("    identifier: %d\n", the_buffer.the_packets[i].identifier);
		for(int j = 0; j < the_buffer.the_packets[i].num_flits; j++){
400043a8:	90800017 	ldw	r2,0(r18)
400043ac:	8c400044 	addi	r17,r17,1
400043b0:	84000204 	addi	r16,r16,8
400043b4:	88bff736 	bltu	r17,r2,40004394 <__alt_data_end+0xc0004394>
    return the_buffer.top_of_stack;
}

void print_rx_buffer(){
	printf("number of packets: %d\n", the_buffer.top_of_stack);
	for(int i = 0; i< the_buffer.top_of_stack; i++){
400043b8:	a8906017 	ldw	r2,16768(r21)
400043bc:	9cc00044 	addi	r19,r19,1
400043c0:	94808304 	addi	r18,r18,524
400043c4:	a5008304 	addi	r20,r20,524
400043c8:	98bfe236 	bltu	r19,r2,40004354 <__alt_data_end+0xc0004354>
		printf("    identifier: %d\n", the_buffer.the_packets[i].identifier);
		for(int j = 0; j < the_buffer.the_packets[i].num_flits; j++){
			printf("        %016llx\n", the_buffer.the_packets[i].data.flit[j]);
		}
	}
}
400043cc:	dfc00617 	ldw	ra,24(sp)
400043d0:	dd400517 	ldw	r21,20(sp)
400043d4:	dd000417 	ldw	r20,16(sp)
400043d8:	dcc00317 	ldw	r19,12(sp)
400043dc:	dc800217 	ldw	r18,8(sp)
400043e0:	dc400117 	ldw	r17,4(sp)
400043e4:	dc000017 	ldw	r16,0(sp)
400043e8:	dec00704 	addi	sp,sp,28
400043ec:	f800283a 	ret

400043f0 <get_packet_by_id>:

packet get_packet_by_id(uint32_t id){
400043f0:	defff504 	addi	sp,sp,-44
400043f4:	ddc00815 	stw	r23,32(sp)
	packet return_packet;
	return_packet.num_flits = 0;
	int move_packets = 0;

	for(int i = 0; i < the_buffer.top_of_stack; i++)
400043f8:	05d000b4 	movhi	r23,16386
400043fc:	bddaaf04 	addi	r23,r23,27324
40004400:	b8906017 	ldw	r2,16768(r23)
			printf("        %016llx\n", the_buffer.the_packets[i].data.flit[j]);
		}
	}
}

packet get_packet_by_id(uint32_t id){
40004404:	dd400615 	stw	r21,24(sp)
40004408:	dfc00a15 	stw	ra,40(sp)
4000440c:	df000915 	stw	fp,36(sp)
40004410:	dd800715 	stw	r22,28(sp)
40004414:	dd000515 	stw	r20,20(sp)
40004418:	dcc00415 	stw	r19,16(sp)
4000441c:	dc800315 	stw	r18,12(sp)
40004420:	dc400215 	stw	r17,8(sp)
40004424:	dc000115 	stw	r16,4(sp)
	packet return_packet;
	return_packet.num_flits = 0;
	int move_packets = 0;

	for(int i = 0; i < the_buffer.top_of_stack; i++)
40004428:	d8800015 	stw	r2,0(sp)
			printf("        %016llx\n", the_buffer.the_packets[i].data.flit[j]);
		}
	}
}

packet get_packet_by_id(uint32_t id){
4000442c:	202b883a 	mov	r21,r4
	packet return_packet;
	return_packet.num_flits = 0;
	int move_packets = 0;

	for(int i = 0; i < the_buffer.top_of_stack; i++)
40004430:	10002f26 	beq	r2,zero,400044f0 <get_packet_by_id+0x100>
40004434:	14c08324 	muli	r19,r2,524
40004438:	2829883a 	mov	r20,r5
4000443c:	bc408204 	addi	r17,r23,520
40004440:	b821883a 	mov	r16,r23
40004444:	bc808304 	addi	r18,r23,524
40004448:	bf008004 	addi	fp,r23,512
4000444c:	bce7883a 	add	r19,r23,r19
40004450:	002d883a 	mov	r22,zero
40004454:	0009883a 	mov	r4,zero
40004458:	00000606 	br	40004474 <get_packet_by_id+0x84>
		if(id == the_buffer.the_packets[i].identifier){
			return_packet = the_buffer.the_packets[i];
			move_packets = 1;
		}

		if(move_packets){
4000445c:	20000c1e 	bne	r4,zero,40004490 <get_packet_by_id+0xa0>
40004460:	84008304 	addi	r16,r16,524
40004464:	8c408304 	addi	r17,r17,524
40004468:	94808304 	addi	r18,r18,524
4000446c:	e7008304 	addi	fp,fp,524
packet get_packet_by_id(uint32_t id){
	packet return_packet;
	return_packet.num_flits = 0;
	int move_packets = 0;

	for(int i = 0; i < the_buffer.top_of_stack; i++)
40004470:	84c00d26 	beq	r16,r19,400044a8 <get_packet_by_id+0xb8>
	{
		if(id == the_buffer.the_packets[i].identifier){
40004474:	88800017 	ldw	r2,0(r17)
40004478:	153ff81e 	bne	r2,r20,4000445c <__alt_data_end+0xc000445c>
			return_packet = the_buffer.the_packets[i];
4000447c:	01808304 	movi	r6,524
40004480:	800b883a 	mov	r5,r16
40004484:	a809883a 	mov	r4,r21
40004488:	000b8fc0 	call	4000b8fc <memcpy>
4000448c:	e5800017 	ldw	r22,0(fp)
			move_packets = 1;
		}

		if(move_packets){
			the_buffer.the_packets[i] = the_buffer.the_packets[i+1];
40004490:	8009883a 	mov	r4,r16
40004494:	900b883a 	mov	r5,r18
40004498:	01808304 	movi	r6,524
4000449c:	000b8fc0 	call	4000b8fc <memcpy>
400044a0:	01000044 	movi	r4,1
400044a4:	003fee06 	br	40004460 <__alt_data_end+0xc0004460>
		}
	}

	if(move_packets){
400044a8:	20000326 	beq	r4,zero,400044b8 <get_packet_by_id+0xc8>
		the_buffer.top_of_stack--;
400044ac:	d8800017 	ldw	r2,0(sp)
400044b0:	173fffc4 	addi	fp,r2,-1
400044b4:	bf106015 	stw	fp,16768(r23)
	}

	return return_packet;
}
400044b8:	a805883a 	mov	r2,r21

	if(move_packets){
		the_buffer.top_of_stack--;
	}

	return return_packet;
400044bc:	ad808015 	stw	r22,512(r21)
}
400044c0:	dfc00a17 	ldw	ra,40(sp)
400044c4:	df000917 	ldw	fp,36(sp)
400044c8:	ddc00817 	ldw	r23,32(sp)
400044cc:	dd800717 	ldw	r22,28(sp)
400044d0:	dd400617 	ldw	r21,24(sp)
400044d4:	dd000517 	ldw	r20,20(sp)
400044d8:	dcc00417 	ldw	r19,16(sp)
400044dc:	dc800317 	ldw	r18,12(sp)
400044e0:	dc400217 	ldw	r17,8(sp)
400044e4:	dc000117 	ldw	r16,4(sp)
400044e8:	dec00b04 	addi	sp,sp,44
400044ec:	f800283a 	ret
	}
}

packet get_packet_by_id(uint32_t id){
	packet return_packet;
	return_packet.num_flits = 0;
400044f0:	002d883a 	mov	r22,zero
400044f4:	003ff006 	br	400044b8 <__alt_data_end+0xc00044b8>

400044f8 <decode_seq_parameter_set>:
#include "input.h"
#include "nal.h"
#include "cavlc.h"
#include "params.h"

void decode_seq_parameter_set(seq_parameter_set *sps) {
400044f8:	defffc04 	addi	sp,sp,-16
  int i;
  memset((void*)sps,0,sizeof(seq_parameter_set));
400044fc:	01812104 	movi	r6,1156
40004500:	000b883a 	mov	r5,zero
#include "input.h"
#include "nal.h"
#include "cavlc.h"
#include "params.h"

void decode_seq_parameter_set(seq_parameter_set *sps) {
40004504:	dfc00315 	stw	ra,12(sp)
40004508:	dc400115 	stw	r17,4(sp)
4000450c:	dc000015 	stw	r16,0(sp)
40004510:	dc800215 	stw	r18,8(sp)
40004514:	2021883a 	mov	r16,r4
  int i;
  memset((void*)sps,0,sizeof(seq_parameter_set));
40004518:	000ba440 	call	4000ba44 <memset>
  sps->profile_idc                           =input_get_bits(8);
4000451c:	01000204 	movi	r4,8
40004520:	0001a040 	call	40001a04 <input_get_bits>
40004524:	80800015 	stw	r2,0(r16)
  sps->constraint_set0_flag                  =input_get_one_bit();
40004528:	0001a7c0 	call	40001a7c <input_get_one_bit>
4000452c:	80800115 	stw	r2,4(r16)
  sps->constraint_set1_flag                  =input_get_one_bit();
40004530:	0001a7c0 	call	40001a7c <input_get_one_bit>
40004534:	80800215 	stw	r2,8(r16)
  sps->constraint_set2_flag                  =input_get_one_bit();
40004538:	0001a7c0 	call	40001a7c <input_get_one_bit>
  sps->reserved_zero_5bits                   =input_get_bits(5);
4000453c:	01000144 	movi	r4,5
  int i;
  memset((void*)sps,0,sizeof(seq_parameter_set));
  sps->profile_idc                           =input_get_bits(8);
  sps->constraint_set0_flag                  =input_get_one_bit();
  sps->constraint_set1_flag                  =input_get_one_bit();
  sps->constraint_set2_flag                  =input_get_one_bit();
40004540:	80800315 	stw	r2,12(r16)
  sps->reserved_zero_5bits                   =input_get_bits(5);
40004544:	0001a040 	call	40001a04 <input_get_bits>
  sps->level_idc                             =input_get_bits(8);
40004548:	01000204 	movi	r4,8
  memset((void*)sps,0,sizeof(seq_parameter_set));
  sps->profile_idc                           =input_get_bits(8);
  sps->constraint_set0_flag                  =input_get_one_bit();
  sps->constraint_set1_flag                  =input_get_one_bit();
  sps->constraint_set2_flag                  =input_get_one_bit();
  sps->reserved_zero_5bits                   =input_get_bits(5);
4000454c:	80800415 	stw	r2,16(r16)
  sps->level_idc                             =input_get_bits(8);
40004550:	0001a040 	call	40001a04 <input_get_bits>
40004554:	80800515 	stw	r2,20(r16)
  sps->seq_parameter_set_id                  =get_unsigned_exp_golomb();
40004558:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
4000455c:	80800615 	stw	r2,24(r16)
  sps->log2_max_frame_num                    =get_unsigned_exp_golomb()+4;
40004560:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40004564:	10800104 	addi	r2,r2,4
  sps->MaxFrameNum=1<<sps->log2_max_frame_num;
40004568:	04400044 	movi	r17,1
4000456c:	8886983a 	sll	r3,r17,r2
  sps->constraint_set1_flag                  =input_get_one_bit();
  sps->constraint_set2_flag                  =input_get_one_bit();
  sps->reserved_zero_5bits                   =input_get_bits(5);
  sps->level_idc                             =input_get_bits(8);
  sps->seq_parameter_set_id                  =get_unsigned_exp_golomb();
  sps->log2_max_frame_num                    =get_unsigned_exp_golomb()+4;
40004570:	80800715 	stw	r2,28(r16)
  sps->MaxFrameNum=1<<sps->log2_max_frame_num;
40004574:	80c00815 	stw	r3,32(r16)
  sps->pic_order_cnt_type                    =get_unsigned_exp_golomb();
40004578:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
4000457c:	80800915 	stw	r2,36(r16)
  if(sps->pic_order_cnt_type==0) {
40004580:	10003226 	beq	r2,zero,4000464c <decode_seq_parameter_set+0x154>
    sps->log2_max_pic_order_cnt_lsb          =get_unsigned_exp_golomb()+4;
    sps->MaxPicOrderCntLsb=1<<sps->log2_max_pic_order_cnt_lsb;
  }
  else if(sps->pic_order_cnt_type==1) {
40004584:	14403726 	beq	r2,r17,40004664 <decode_seq_parameter_set+0x16c>
    sps->offset_for_top_to_bottom_field      =get_signed_exp_golomb();
    sps->num_ref_frames_in_pic_order_cnt_cycle=get_unsigned_exp_golomb();
    for(i=0; i<sps->num_ref_frames_in_pic_order_cnt_cycle; ++i)
      sps->offset_for_ref_frame[i]           =get_signed_exp_golomb();
  }
  sps->num_ref_frames                        =get_unsigned_exp_golomb();
40004588:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
4000458c:	80811015 	stw	r2,1088(r16)
  sps->gaps_in_frame_num_value_allowed_flag  =input_get_one_bit();
40004590:	0001a7c0 	call	40001a7c <input_get_one_bit>
40004594:	80811115 	stw	r2,1092(r16)
  sps->PicWidthInMbs                         =get_unsigned_exp_golomb()+1;
40004598:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
4000459c:	10800044 	addi	r2,r2,1
  sps->PicWidthInSamples=sps->PicWidthInMbs*16;
400045a0:	1006913a 	slli	r3,r2,4
    for(i=0; i<sps->num_ref_frames_in_pic_order_cnt_cycle; ++i)
      sps->offset_for_ref_frame[i]           =get_signed_exp_golomb();
  }
  sps->num_ref_frames                        =get_unsigned_exp_golomb();
  sps->gaps_in_frame_num_value_allowed_flag  =input_get_one_bit();
  sps->PicWidthInMbs                         =get_unsigned_exp_golomb()+1;
400045a4:	80811215 	stw	r2,1096(r16)
  sps->PicWidthInSamples=sps->PicWidthInMbs*16;
400045a8:	80c11315 	stw	r3,1100(r16)
  sps->PicHeightInMapUnits                   =get_unsigned_exp_golomb()+1;
400045ac:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
  sps->PicSizeInMapUnits=sps->PicWidthInMbs*sps->PicHeightInMapUnits;
400045b0:	80c11217 	ldw	r3,1096(r16)
  }
  sps->num_ref_frames                        =get_unsigned_exp_golomb();
  sps->gaps_in_frame_num_value_allowed_flag  =input_get_one_bit();
  sps->PicWidthInMbs                         =get_unsigned_exp_golomb()+1;
  sps->PicWidthInSamples=sps->PicWidthInMbs*16;
  sps->PicHeightInMapUnits                   =get_unsigned_exp_golomb()+1;
400045b4:	10800044 	addi	r2,r2,1
400045b8:	80811415 	stw	r2,1104(r16)
  sps->PicSizeInMapUnits=sps->PicWidthInMbs*sps->PicHeightInMapUnits;
400045bc:	1885383a 	mul	r2,r3,r2
400045c0:	80811515 	stw	r2,1108(r16)
  sps->frame_mbs_only_flag                   =input_get_one_bit();
400045c4:	0001a7c0 	call	40001a7c <input_get_one_bit>
  sps->FrameHeightInMbs=(2-sps->frame_mbs_only_flag)*sps->PicHeightInMapUnits;
400045c8:	81011417 	ldw	r4,1104(r16)
400045cc:	00c00084 	movi	r3,2
400045d0:	1887c83a 	sub	r3,r3,r2
400045d4:	1907383a 	mul	r3,r3,r4
  sps->gaps_in_frame_num_value_allowed_flag  =input_get_one_bit();
  sps->PicWidthInMbs                         =get_unsigned_exp_golomb()+1;
  sps->PicWidthInSamples=sps->PicWidthInMbs*16;
  sps->PicHeightInMapUnits                   =get_unsigned_exp_golomb()+1;
  sps->PicSizeInMapUnits=sps->PicWidthInMbs*sps->PicHeightInMapUnits;
  sps->frame_mbs_only_flag                   =input_get_one_bit();
400045d8:	80811815 	stw	r2,1120(r16)
  sps->FrameHeightInMbs=(2-sps->frame_mbs_only_flag)*sps->PicHeightInMapUnits;
  sps->FrameHeightInSamples=16*sps->FrameHeightInMbs;
400045dc:	1808913a 	slli	r4,r3,4
  sps->PicWidthInMbs                         =get_unsigned_exp_golomb()+1;
  sps->PicWidthInSamples=sps->PicWidthInMbs*16;
  sps->PicHeightInMapUnits                   =get_unsigned_exp_golomb()+1;
  sps->PicSizeInMapUnits=sps->PicWidthInMbs*sps->PicHeightInMapUnits;
  sps->frame_mbs_only_flag                   =input_get_one_bit();
  sps->FrameHeightInMbs=(2-sps->frame_mbs_only_flag)*sps->PicHeightInMapUnits;
400045e0:	80c11615 	stw	r3,1112(r16)
  sps->FrameHeightInSamples=16*sps->FrameHeightInMbs;
400045e4:	81011715 	stw	r4,1116(r16)
  if(!sps->frame_mbs_only_flag)
400045e8:	10001526 	beq	r2,zero,40004640 <decode_seq_parameter_set+0x148>
    sps->mb_adaptive_frame_field_flag        =input_get_one_bit();
  sps->direct_8x8_inference_flag             =input_get_one_bit();
400045ec:	0001a7c0 	call	40001a7c <input_get_one_bit>
400045f0:	80811a15 	stw	r2,1128(r16)
  sps->frame_cropping_flag                   =input_get_one_bit();
400045f4:	0001a7c0 	call	40001a7c <input_get_one_bit>
400045f8:	80811b15 	stw	r2,1132(r16)
  if(sps->frame_cropping_flag) {
400045fc:	10000826 	beq	r2,zero,40004620 <decode_seq_parameter_set+0x128>
    sps->frame_crop_left_offset              =get_unsigned_exp_golomb();
40004600:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40004604:	80811c15 	stw	r2,1136(r16)
    sps->frame_crop_right_offset             =get_unsigned_exp_golomb();
40004608:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
4000460c:	80811d15 	stw	r2,1140(r16)
    sps->frame_crop_top_offset               =get_unsigned_exp_golomb();
40004610:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40004614:	80811e15 	stw	r2,1144(r16)
    sps->frame_crop_bottom_offset            =get_unsigned_exp_golomb();
40004618:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
4000461c:	80811f15 	stw	r2,1148(r16)
  }
  sps->vui_parameters_present_flag           =input_get_one_bit();
40004620:	0001a7c0 	call	40001a7c <input_get_one_bit>
40004624:	80812015 	stw	r2,1152(r16)
}
40004628:	dfc00317 	ldw	ra,12(sp)
4000462c:	dc800217 	ldw	r18,8(sp)
40004630:	dc400117 	ldw	r17,4(sp)
40004634:	dc000017 	ldw	r16,0(sp)
40004638:	dec00404 	addi	sp,sp,16
4000463c:	f800283a 	ret
  sps->PicSizeInMapUnits=sps->PicWidthInMbs*sps->PicHeightInMapUnits;
  sps->frame_mbs_only_flag                   =input_get_one_bit();
  sps->FrameHeightInMbs=(2-sps->frame_mbs_only_flag)*sps->PicHeightInMapUnits;
  sps->FrameHeightInSamples=16*sps->FrameHeightInMbs;
  if(!sps->frame_mbs_only_flag)
    sps->mb_adaptive_frame_field_flag        =input_get_one_bit();
40004640:	0001a7c0 	call	40001a7c <input_get_one_bit>
40004644:	80811915 	stw	r2,1124(r16)
40004648:	003fe806 	br	400045ec <__alt_data_end+0xc00045ec>
  sps->seq_parameter_set_id                  =get_unsigned_exp_golomb();
  sps->log2_max_frame_num                    =get_unsigned_exp_golomb()+4;
  sps->MaxFrameNum=1<<sps->log2_max_frame_num;
  sps->pic_order_cnt_type                    =get_unsigned_exp_golomb();
  if(sps->pic_order_cnt_type==0) {
    sps->log2_max_pic_order_cnt_lsb          =get_unsigned_exp_golomb()+4;
4000464c:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40004650:	10800104 	addi	r2,r2,4
    sps->MaxPicOrderCntLsb=1<<sps->log2_max_pic_order_cnt_lsb;
40004654:	88a2983a 	sll	r17,r17,r2
  sps->seq_parameter_set_id                  =get_unsigned_exp_golomb();
  sps->log2_max_frame_num                    =get_unsigned_exp_golomb()+4;
  sps->MaxFrameNum=1<<sps->log2_max_frame_num;
  sps->pic_order_cnt_type                    =get_unsigned_exp_golomb();
  if(sps->pic_order_cnt_type==0) {
    sps->log2_max_pic_order_cnt_lsb          =get_unsigned_exp_golomb()+4;
40004658:	80800a15 	stw	r2,40(r16)
    sps->MaxPicOrderCntLsb=1<<sps->log2_max_pic_order_cnt_lsb;
4000465c:	84400b15 	stw	r17,44(r16)
40004660:	003fc906 	br	40004588 <__alt_data_end+0xc0004588>
  }
  else if(sps->pic_order_cnt_type==1) {
    sps->delta_pic_order_always_zero_flag    =input_get_one_bit();
40004664:	0001a7c0 	call	40001a7c <input_get_one_bit>
40004668:	80800c15 	stw	r2,48(r16)
    sps->offset_for_non_ref_pic              =get_signed_exp_golomb();
4000466c:	0000c100 	call	40000c10 <get_signed_exp_golomb>
40004670:	80800d15 	stw	r2,52(r16)
    sps->offset_for_top_to_bottom_field      =get_signed_exp_golomb();
40004674:	0000c100 	call	40000c10 <get_signed_exp_golomb>
40004678:	80800e15 	stw	r2,56(r16)
    sps->num_ref_frames_in_pic_order_cnt_cycle=get_unsigned_exp_golomb();
4000467c:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40004680:	80800f15 	stw	r2,60(r16)
    for(i=0; i<sps->num_ref_frames_in_pic_order_cnt_cycle; ++i)
40004684:	00bfc00e 	bge	zero,r2,40004588 <__alt_data_end+0xc0004588>
40004688:	84801004 	addi	r18,r16,64
4000468c:	0023883a 	mov	r17,zero
      sps->offset_for_ref_frame[i]           =get_signed_exp_golomb();
40004690:	0000c100 	call	40000c10 <get_signed_exp_golomb>
40004694:	90800015 	stw	r2,0(r18)
  else if(sps->pic_order_cnt_type==1) {
    sps->delta_pic_order_always_zero_flag    =input_get_one_bit();
    sps->offset_for_non_ref_pic              =get_signed_exp_golomb();
    sps->offset_for_top_to_bottom_field      =get_signed_exp_golomb();
    sps->num_ref_frames_in_pic_order_cnt_cycle=get_unsigned_exp_golomb();
    for(i=0; i<sps->num_ref_frames_in_pic_order_cnt_cycle; ++i)
40004698:	80800f17 	ldw	r2,60(r16)
4000469c:	8c400044 	addi	r17,r17,1
400046a0:	94800104 	addi	r18,r18,4
400046a4:	88bffa16 	blt	r17,r2,40004690 <__alt_data_end+0xc0004690>
400046a8:	003fb706 	br	40004588 <__alt_data_end+0xc0004588>

400046ac <decode_pic_parameter_set>:
  sps->vui_parameters_present_flag           =input_get_one_bit();
}

///////////////////////////////////////////////////////////////////////////////

void decode_pic_parameter_set(pic_parameter_set *pps) {
400046ac:	defffb04 	addi	sp,sp,-20
  int i;
  memset((void*)pps,0,sizeof(pic_parameter_set));
400046b0:	01a02b14 	movui	r6,32940
400046b4:	000b883a 	mov	r5,zero
  sps->vui_parameters_present_flag           =input_get_one_bit();
}

///////////////////////////////////////////////////////////////////////////////

void decode_pic_parameter_set(pic_parameter_set *pps) {
400046b8:	dfc00415 	stw	ra,16(sp)
400046bc:	dc000015 	stw	r16,0(sp)
400046c0:	dcc00315 	stw	r19,12(sp)
400046c4:	2021883a 	mov	r16,r4
400046c8:	dc800215 	stw	r18,8(sp)
400046cc:	dc400115 	stw	r17,4(sp)
  int i;
  memset((void*)pps,0,sizeof(pic_parameter_set));
400046d0:	000ba440 	call	4000ba44 <memset>
  pps->pic_parameter_set_id                  =get_unsigned_exp_golomb();
400046d4:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
400046d8:	80800015 	stw	r2,0(r16)
  pps->seq_parameter_set_id                  =get_unsigned_exp_golomb();
400046dc:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
400046e0:	80800115 	stw	r2,4(r16)
  pps->entropy_coding_mode_flag              =input_get_one_bit();
400046e4:	0001a7c0 	call	40001a7c <input_get_one_bit>
400046e8:	80800215 	stw	r2,8(r16)
  pps->pic_order_present_flag                =input_get_one_bit();
400046ec:	0001a7c0 	call	40001a7c <input_get_one_bit>
400046f0:	80800315 	stw	r2,12(r16)
  pps->num_slice_groups                      =get_unsigned_exp_golomb()+1;
400046f4:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
400046f8:	10800044 	addi	r2,r2,1
400046fc:	80800415 	stw	r2,16(r16)
  if(pps->num_slice_groups>1) {
40004700:	00c00044 	movi	r3,1
40004704:	18800d0e 	bge	r3,r2,4000473c <decode_pic_parameter_set+0x90>
    pps->slice_group_map_type                =get_unsigned_exp_golomb();
40004708:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
4000470c:	80800515 	stw	r2,20(r16)
    if(pps->slice_group_map_type==0)
40004710:	10003e1e 	bne	r2,zero,4000480c <decode_pic_parameter_set+0x160>
      for(i=0; i<pps->num_slice_groups; ++i)
40004714:	80800417 	ldw	r2,16(r16)
40004718:	0080080e 	bge	zero,r2,4000473c <decode_pic_parameter_set+0x90>
4000471c:	84800604 	addi	r18,r16,24
40004720:	0023883a 	mov	r17,zero
        pps->run_length[i]                   =get_unsigned_exp_golomb();
40004724:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40004728:	90800015 	stw	r2,0(r18)
  pps->pic_order_present_flag                =input_get_one_bit();
  pps->num_slice_groups                      =get_unsigned_exp_golomb()+1;
  if(pps->num_slice_groups>1) {
    pps->slice_group_map_type                =get_unsigned_exp_golomb();
    if(pps->slice_group_map_type==0)
      for(i=0; i<pps->num_slice_groups; ++i)
4000472c:	80800417 	ldw	r2,16(r16)
40004730:	8c400044 	addi	r17,r17,1
40004734:	94800104 	addi	r18,r18,4
40004738:	88bffa16 	blt	r17,r2,40004724 <__alt_data_end+0xc0004724>
      pps->pic_size_in_map_units             =get_unsigned_exp_golomb()+1;
      for(i=0; i<pps->pic_size_in_map_units; ++i)
        pps->slice_group_id[i]               =get_unsigned_exp_golomb();
    }
  }    
  pps->num_ref_idx_l0_active                 =get_unsigned_exp_golomb()+1;
4000473c:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40004740:	00e02114 	movui	r3,32900
40004744:	80c7883a 	add	r3,r16,r3
40004748:	10800044 	addi	r2,r2,1
4000474c:	18800015 	stw	r2,0(r3)
  pps->num_ref_idx_l1_active                 =get_unsigned_exp_golomb()+1;
40004750:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40004754:	00e02214 	movui	r3,32904
40004758:	80c7883a 	add	r3,r16,r3
4000475c:	10800044 	addi	r2,r2,1
40004760:	18800015 	stw	r2,0(r3)
  pps->weighted_pred_flag                    =input_get_one_bit();
40004764:	0001a7c0 	call	40001a7c <input_get_one_bit>
40004768:	00e02314 	movui	r3,32908
4000476c:	80c7883a 	add	r3,r16,r3
  pps->weighted_bipred_idc                   =input_get_bits(2);
40004770:	01000084 	movi	r4,2
        pps->slice_group_id[i]               =get_unsigned_exp_golomb();
    }
  }    
  pps->num_ref_idx_l0_active                 =get_unsigned_exp_golomb()+1;
  pps->num_ref_idx_l1_active                 =get_unsigned_exp_golomb()+1;
  pps->weighted_pred_flag                    =input_get_one_bit();
40004774:	18800015 	stw	r2,0(r3)
  pps->weighted_bipred_idc                   =input_get_bits(2);
40004778:	0001a040 	call	40001a04 <input_get_bits>
4000477c:	00e02414 	movui	r3,32912
40004780:	80c7883a 	add	r3,r16,r3
40004784:	18800015 	stw	r2,0(r3)
  pps->pic_init_qp                           =get_signed_exp_golomb()+26;
40004788:	0000c100 	call	40000c10 <get_signed_exp_golomb>
4000478c:	00e02514 	movui	r3,32916
40004790:	80c7883a 	add	r3,r16,r3
40004794:	10800684 	addi	r2,r2,26
40004798:	18800015 	stw	r2,0(r3)
  pps->pic_init_qs                           =get_signed_exp_golomb()+26;
4000479c:	0000c100 	call	40000c10 <get_signed_exp_golomb>
400047a0:	00e02614 	movui	r3,32920
400047a4:	80c7883a 	add	r3,r16,r3
400047a8:	10800684 	addi	r2,r2,26
400047ac:	18800015 	stw	r2,0(r3)
  pps->chroma_qp_index_offset                =get_signed_exp_golomb();
400047b0:	0000c100 	call	40000c10 <get_signed_exp_golomb>
400047b4:	00e02714 	movui	r3,32924
400047b8:	80c7883a 	add	r3,r16,r3
400047bc:	18800015 	stw	r2,0(r3)
  pps->deblocking_filter_control_present_flag=input_get_one_bit();
400047c0:	0001a7c0 	call	40001a7c <input_get_one_bit>
400047c4:	00e02814 	movui	r3,32928
400047c8:	80c7883a 	add	r3,r16,r3
400047cc:	18800015 	stw	r2,0(r3)
  pps->constrained_intra_pred_flag           =input_get_one_bit();
400047d0:	0001a7c0 	call	40001a7c <input_get_one_bit>
400047d4:	00e02914 	movui	r3,32932
400047d8:	80c7883a 	add	r3,r16,r3
400047dc:	18800015 	stw	r2,0(r3)
  pps->redundant_pic_cnt_present_flag        =input_get_one_bit();
400047e0:	0001a7c0 	call	40001a7c <input_get_one_bit>
400047e4:	00e02a14 	movui	r3,32936
400047e8:	80e1883a 	add	r16,r16,r3
400047ec:	80800015 	stw	r2,0(r16)
}
400047f0:	dfc00417 	ldw	ra,16(sp)
400047f4:	dcc00317 	ldw	r19,12(sp)
400047f8:	dc800217 	ldw	r18,8(sp)
400047fc:	dc400117 	ldw	r17,4(sp)
40004800:	dc000017 	ldw	r16,0(sp)
40004804:	dec00504 	addi	sp,sp,20
40004808:	f800283a 	ret
  if(pps->num_slice_groups>1) {
    pps->slice_group_map_type                =get_unsigned_exp_golomb();
    if(pps->slice_group_map_type==0)
      for(i=0; i<pps->num_slice_groups; ++i)
        pps->run_length[i]                   =get_unsigned_exp_golomb();
    else if(pps->slice_group_map_type==2)
4000480c:	00c00084 	movi	r3,2
40004810:	10c01126 	beq	r2,r3,40004858 <decode_pic_parameter_set+0x1ac>
      for(i=0; i<pps->num_slice_groups; ++i) {
        pps->top_left[i]                     =get_unsigned_exp_golomb();
        pps->bottom_right[i]                 =get_unsigned_exp_golomb();
      }
    else if((pps->slice_group_map_type>=3) && (pps->slice_group_map_type<=5)) {
40004814:	113fff44 	addi	r4,r2,-3
40004818:	19001e2e 	bgeu	r3,r4,40004894 <decode_pic_parameter_set+0x1e8>
      pps->slice_group_change_direction_flag =input_get_one_bit();
      pps->SliceGroupChangeRate              =get_unsigned_exp_golomb()+1;
    } else if(pps->slice_group_map_type==6) {
4000481c:	00c00184 	movi	r3,6
40004820:	10ffc61e 	bne	r2,r3,4000473c <__alt_data_end+0xc000473c>
      pps->pic_size_in_map_units             =get_unsigned_exp_golomb()+1;
40004824:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40004828:	10800044 	addi	r2,r2,1
4000482c:	80802015 	stw	r2,128(r16)
      for(i=0; i<pps->pic_size_in_map_units; ++i)
40004830:	00bfc20e 	bge	zero,r2,4000473c <__alt_data_end+0xc000473c>
40004834:	84802104 	addi	r18,r16,132
40004838:	0023883a 	mov	r17,zero
        pps->slice_group_id[i]               =get_unsigned_exp_golomb();
4000483c:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40004840:	90800015 	stw	r2,0(r18)
    else if((pps->slice_group_map_type>=3) && (pps->slice_group_map_type<=5)) {
      pps->slice_group_change_direction_flag =input_get_one_bit();
      pps->SliceGroupChangeRate              =get_unsigned_exp_golomb()+1;
    } else if(pps->slice_group_map_type==6) {
      pps->pic_size_in_map_units             =get_unsigned_exp_golomb()+1;
      for(i=0; i<pps->pic_size_in_map_units; ++i)
40004844:	80802017 	ldw	r2,128(r16)
40004848:	8c400044 	addi	r17,r17,1
4000484c:	94800104 	addi	r18,r18,4
40004850:	88bffa16 	blt	r17,r2,4000483c <__alt_data_end+0xc000483c>
40004854:	003fb906 	br	4000473c <__alt_data_end+0xc000473c>
    pps->slice_group_map_type                =get_unsigned_exp_golomb();
    if(pps->slice_group_map_type==0)
      for(i=0; i<pps->num_slice_groups; ++i)
        pps->run_length[i]                   =get_unsigned_exp_golomb();
    else if(pps->slice_group_map_type==2)
      for(i=0; i<pps->num_slice_groups; ++i) {
40004858:	80800417 	ldw	r2,16(r16)
4000485c:	00bfb70e 	bge	zero,r2,4000473c <__alt_data_end+0xc000473c>
40004860:	84c00e04 	addi	r19,r16,56
40004864:	84801604 	addi	r18,r16,88
40004868:	0023883a 	mov	r17,zero
        pps->top_left[i]                     =get_unsigned_exp_golomb();
4000486c:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40004870:	98800015 	stw	r2,0(r19)
        pps->bottom_right[i]                 =get_unsigned_exp_golomb();
40004874:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40004878:	90800015 	stw	r2,0(r18)
    pps->slice_group_map_type                =get_unsigned_exp_golomb();
    if(pps->slice_group_map_type==0)
      for(i=0; i<pps->num_slice_groups; ++i)
        pps->run_length[i]                   =get_unsigned_exp_golomb();
    else if(pps->slice_group_map_type==2)
      for(i=0; i<pps->num_slice_groups; ++i) {
4000487c:	80800417 	ldw	r2,16(r16)
40004880:	8c400044 	addi	r17,r17,1
40004884:	9cc00104 	addi	r19,r19,4
40004888:	94800104 	addi	r18,r18,4
4000488c:	88bff716 	blt	r17,r2,4000486c <__alt_data_end+0xc000486c>
40004890:	003faa06 	br	4000473c <__alt_data_end+0xc000473c>
        pps->top_left[i]                     =get_unsigned_exp_golomb();
        pps->bottom_right[i]                 =get_unsigned_exp_golomb();
      }
    else if((pps->slice_group_map_type>=3) && (pps->slice_group_map_type<=5)) {
      pps->slice_group_change_direction_flag =input_get_one_bit();
40004894:	0001a7c0 	call	40001a7c <input_get_one_bit>
40004898:	80801e15 	stw	r2,120(r16)
      pps->SliceGroupChangeRate              =get_unsigned_exp_golomb()+1;
4000489c:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
400048a0:	10800044 	addi	r2,r2,1
400048a4:	80801f15 	stw	r2,124(r16)
400048a8:	003fa406 	br	4000473c <__alt_data_end+0xc000473c>

400048ac <check_unsupported_features>:
    do { \
      printf("UNSUPPORTED FEATURE: %s\n",feature); \
      ++unsupported_count; \
    } while(0)

  if(sps->pic_order_cnt_type!=0)
400048ac:	20800917 	ldw	r2,36(r4)
  pps->redundant_pic_cnt_present_flag        =input_get_one_bit();
}

///////////////////////////////////////////////////////////////////////////////

int check_unsupported_features(seq_parameter_set *sps, pic_parameter_set *pps) {
400048b0:	defffb04 	addi	sp,sp,-20
400048b4:	dc800215 	stw	r18,8(sp)
400048b8:	dc400115 	stw	r17,4(sp)
400048bc:	dfc00415 	stw	ra,16(sp)
400048c0:	dcc00315 	stw	r19,12(sp)
400048c4:	dc000015 	stw	r16,0(sp)
400048c8:	2025883a 	mov	r18,r4
400048cc:	2823883a 	mov	r17,r5
    do { \
      printf("UNSUPPORTED FEATURE: %s\n",feature); \
      ++unsupported_count; \
    } while(0)

  if(sps->pic_order_cnt_type!=0)
400048d0:	1000341e 	bne	r2,zero,400049a4 <check_unsupported_features+0xf8>
400048d4:	04c00044 	movi	r19,1
}

///////////////////////////////////////////////////////////////////////////////

int check_unsupported_features(seq_parameter_set *sps, pic_parameter_set *pps) {
  int unsupported_count=0;
400048d8:	0021883a 	mov	r16,zero

  if(sps->pic_order_cnt_type!=0)
    UNSUPPORTED("picture order count type != 0");
//  if(sps->num_ref_frames!=1)
//    UNSUPPORTED("long-term prediction");
  if(pps->num_ref_idx_l0_active>1)
400048dc:	00a02114 	movui	r2,32900
400048e0:	8885883a 	add	r2,r17,r2
400048e4:	10800017 	ldw	r2,0(r2)
400048e8:	00c00044 	movi	r3,1
400048ec:	1880060e 	bge	r3,r2,40004908 <check_unsupported_features+0x5c>
    UNSUPPORTED("long-term prediction");
400048f0:	015000b4 	movhi	r5,16386
400048f4:	011000b4 	movhi	r4,16386
400048f8:	29787c04 	addi	r5,r5,-7696
400048fc:	21387504 	addi	r4,r4,-7724
40004900:	9821883a 	mov	r16,r19
40004904:	000bc900 	call	4000bc90 <printf>
  if(!sps->frame_mbs_only_flag)
40004908:	90811817 	ldw	r2,1120(r18)
4000490c:	10003f26 	beq	r2,zero,40004a0c <check_unsupported_features+0x160>
    UNSUPPORTED("interlaced video");
  if(sps->frame_cropping_flag)
40004910:	90811b17 	ldw	r2,1132(r18)
40004914:	1000391e 	bne	r2,zero,400049fc <check_unsupported_features+0x150>
    printf("UNSUPPORTED FEATURE: frame cropping (ignored)\n");
  if(pps->entropy_coding_mode_flag)
40004918:	88800217 	ldw	r2,8(r17)
4000491c:	1000301e 	bne	r2,zero,400049e0 <check_unsupported_features+0x134>
    UNSUPPORTED("CABAC");
  if(pps->pic_order_present_flag)
40004920:	88800317 	ldw	r2,12(r17)
40004924:	1000271e 	bne	r2,zero,400049c4 <check_unsupported_features+0x118>
    UNSUPPORTED("picture reordering");
  if(pps->num_slice_groups>1)
40004928:	88800417 	ldw	r2,16(r17)
4000492c:	00c00044 	movi	r3,1
40004930:	1880060e 	bge	r3,r2,4000494c <check_unsupported_features+0xa0>
    UNSUPPORTED(">1 slices per frame");
40004934:	015000b4 	movhi	r5,16386
40004938:	011000b4 	movhi	r4,16386
4000493c:	29789a04 	addi	r5,r5,-7576
40004940:	21387504 	addi	r4,r4,-7724
40004944:	80e1883a 	add	r16,r16,r3
40004948:	000bc900 	call	4000bc90 <printf>
  if(pps->weighted_pred_flag || pps->weighted_bipred_idc)
4000494c:	00a02314 	movui	r2,32908
40004950:	8885883a 	add	r2,r17,r2
40004954:	10800017 	ldw	r2,0(r2)
40004958:	1000041e 	bne	r2,zero,4000496c <check_unsupported_features+0xc0>
4000495c:	00a02414 	movui	r2,32912
40004960:	88a3883a 	add	r17,r17,r2
40004964:	88800017 	ldw	r2,0(r17)
40004968:	10000626 	beq	r2,zero,40004984 <check_unsupported_features+0xd8>
    UNSUPPORTED("weighted prediction");
4000496c:	015000b4 	movhi	r5,16386
40004970:	011000b4 	movhi	r4,16386
40004974:	29789f04 	addi	r5,r5,-7556
40004978:	21387504 	addi	r4,r4,-7724
4000497c:	84000044 	addi	r16,r16,1
40004980:	000bc900 	call	4000bc90 <printf>
  
  return unsupported_count;
}
40004984:	8005883a 	mov	r2,r16
40004988:	dfc00417 	ldw	ra,16(sp)
4000498c:	dcc00317 	ldw	r19,12(sp)
40004990:	dc800217 	ldw	r18,8(sp)
40004994:	dc400117 	ldw	r17,4(sp)
40004998:	dc000017 	ldw	r16,0(sp)
4000499c:	dec00504 	addi	sp,sp,20
400049a0:	f800283a 	ret
      printf("UNSUPPORTED FEATURE: %s\n",feature); \
      ++unsupported_count; \
    } while(0)

  if(sps->pic_order_cnt_type!=0)
    UNSUPPORTED("picture order count type != 0");
400049a4:	015000b4 	movhi	r5,16386
400049a8:	011000b4 	movhi	r4,16386
400049ac:	29786d04 	addi	r5,r5,-7756
400049b0:	21387504 	addi	r4,r4,-7724
400049b4:	04c00084 	movi	r19,2
400049b8:	04000044 	movi	r16,1
400049bc:	000bc900 	call	4000bc90 <printf>
400049c0:	003fc606 	br	400048dc <__alt_data_end+0xc00048dc>
  if(sps->frame_cropping_flag)
    printf("UNSUPPORTED FEATURE: frame cropping (ignored)\n");
  if(pps->entropy_coding_mode_flag)
    UNSUPPORTED("CABAC");
  if(pps->pic_order_present_flag)
    UNSUPPORTED("picture reordering");
400049c4:	015000b4 	movhi	r5,16386
400049c8:	011000b4 	movhi	r4,16386
400049cc:	29789504 	addi	r5,r5,-7596
400049d0:	21387504 	addi	r4,r4,-7724
400049d4:	84000044 	addi	r16,r16,1
400049d8:	000bc900 	call	4000bc90 <printf>
400049dc:	003fd206 	br	40004928 <__alt_data_end+0xc0004928>
  if(!sps->frame_mbs_only_flag)
    UNSUPPORTED("interlaced video");
  if(sps->frame_cropping_flag)
    printf("UNSUPPORTED FEATURE: frame cropping (ignored)\n");
  if(pps->entropy_coding_mode_flag)
    UNSUPPORTED("CABAC");
400049e0:	015000b4 	movhi	r5,16386
400049e4:	011000b4 	movhi	r4,16386
400049e8:	29789304 	addi	r5,r5,-7604
400049ec:	21387504 	addi	r4,r4,-7724
400049f0:	84000044 	addi	r16,r16,1
400049f4:	000bc900 	call	4000bc90 <printf>
400049f8:	003fc906 	br	40004920 <__alt_data_end+0xc0004920>
  if(pps->num_ref_idx_l0_active>1)
    UNSUPPORTED("long-term prediction");
  if(!sps->frame_mbs_only_flag)
    UNSUPPORTED("interlaced video");
  if(sps->frame_cropping_flag)
    printf("UNSUPPORTED FEATURE: frame cropping (ignored)\n");
400049fc:	011000b4 	movhi	r4,16386
40004a00:	21388704 	addi	r4,r4,-7652
40004a04:	000bdac0 	call	4000bdac <puts>
40004a08:	003fc306 	br	40004918 <__alt_data_end+0xc0004918>
//  if(sps->num_ref_frames!=1)
//    UNSUPPORTED("long-term prediction");
  if(pps->num_ref_idx_l0_active>1)
    UNSUPPORTED("long-term prediction");
  if(!sps->frame_mbs_only_flag)
    UNSUPPORTED("interlaced video");
40004a0c:	015000b4 	movhi	r5,16386
40004a10:	011000b4 	movhi	r4,16386
40004a14:	29788204 	addi	r5,r5,-7672
40004a18:	21387504 	addi	r4,r4,-7724
40004a1c:	84000044 	addi	r16,r16,1
40004a20:	000bc900 	call	4000bc90 <printf>
40004a24:	003fba06 	br	40004910 <__alt_data_end+0xc0004910>

40004a28 <send_start_new_frame>:
#include "mode_pred.h"




void send_start_new_frame(int addr, int Qp){
40004a28:	deff7a04 	addi	sp,sp,-536
40004a2c:	dc408415 	stw	r17,528(sp)
40004a30:	dc008315 	stw	r16,524(sp)
40004a34:	dfc08515 	stw	ra,532(sp)
40004a38:	2023883a 	mov	r17,r4
40004a3c:	2821883a 	mov	r16,r5
    //wait for ack from previous command
    packet rx_packet;
    rx_packet.num_flits = 0;
    while(rx_packet.num_flits == 0){
		rx_packet = get_packet_by_id(0xFE);
40004a40:	01403f84 	movi	r5,254
40004a44:	d809883a 	mov	r4,sp
40004a48:	00043f00 	call	400043f0 <get_packet_by_id>
		if(rx_packet.num_flits == 0){
40004a4c:	d8808017 	ldw	r2,512(sp)
40004a50:	10000a26 	beq	r2,zero,40004a7c <send_start_new_frame+0x54>
			buffers_loop(1);
		}
	}


	send_flit(addr,0,(Qp<<16)|(DO_START_NEW_FRAME<<8)|0xFF, 1);
40004a54:	800c943a 	slli	r6,r16,16
40004a58:	01c00044 	movi	r7,1
40004a5c:	000b883a 	mov	r5,zero
40004a60:	31817fd4 	ori	r6,r6,1535
40004a64:	8809883a 	mov	r4,r17


}
40004a68:	dfc08517 	ldw	ra,532(sp)
40004a6c:	dc408417 	ldw	r17,528(sp)
40004a70:	dc008317 	ldw	r16,524(sp)
40004a74:	dec08604 	addi	sp,sp,536
			buffers_loop(1);
		}
	}


	send_flit(addr,0,(Qp<<16)|(DO_START_NEW_FRAME<<8)|0xFF, 1);
40004a78:	0003f101 	jmpi	40003f10 <send_flit>
    packet rx_packet;
    rx_packet.num_flits = 0;
    while(rx_packet.num_flits == 0){
		rx_packet = get_packet_by_id(0xFE);
		if(rx_packet.num_flits == 0){
			buffers_loop(1);
40004a7c:	01000044 	movi	r4,1
40004a80:	00040a00 	call	400040a0 <buffers_loop>
40004a84:	003fee06 	br	40004a40 <__alt_data_end+0xc0004a40>

40004a88 <send_alloc_frame>:


}

void send_alloc_frame(int addr, int width, int height){
	send_flit(addr,((width&0xFFFF)<<16)|(height&0xFFFF) ,(DO_ALLOC_FRAME<<8)|0xFF, 1);
40004a88:	280a943a 	slli	r5,r5,16
40004a8c:	30bfffcc 	andi	r2,r6,65535
40004a90:	01c00044 	movi	r7,1
40004a94:	0181bfc4 	movi	r6,1791
40004a98:	288ab03a 	or	r5,r5,r2
40004a9c:	0003f101 	jmpi	40003f10 <send_flit>

40004aa0 <send_intra_info>:
                     int             by,
                     int             constrained_intra_pred,
                     int             LCbCr_select,
                     int             luma4x4BlkIdx,
                     int             size,
                     int             Lwidth){
40004aa0:	deff6e04 	addi	sp,sp,-584
40004aa4:	d8c09717 	ldw	r3,604(sp)
40004aa8:	dd808e15 	stw	r22,568(sp)
40004aac:	dd809417 	ldw	r22,592(sp)
40004ab0:	df009015 	stw	fp,576(sp)
40004ab4:	dd408d15 	stw	r21,564(sp)
40004ab8:	dd008c15 	stw	r20,560(sp)
40004abc:	dcc08b15 	stw	r19,556(sp)
40004ac0:	dc808a15 	stw	r18,552(sp)
40004ac4:	dc408915 	stw	r17,548(sp)
40004ac8:	dc008815 	stw	r16,544(sp)
40004acc:	dfc09115 	stw	ra,580(sp)
40004ad0:	ddc08f15 	stw	r23,572(sp)
40004ad4:	d8c08315 	stw	r3,524(sp)
40004ad8:	2021883a 	mov	r16,r4
40004adc:	2811883a 	mov	r8,r5
40004ae0:	3029883a 	mov	r20,r6
40004ae4:	3827883a 	mov	r19,r7
40004ae8:	dd409217 	ldw	r21,584(sp)
40004aec:	df009317 	ldw	fp,588(sp)
40004af0:	dc409517 	ldw	r17,596(sp)
40004af4:	dc809617 	ldw	r18,600(sp)
	int intra_cmd = 2;
	int availible_mask_x = 0xFFFF0000;
	int availible_mask_y = 0x0000FFFF;
	if(LCbCr_select == LUMA_SELECT){
40004af8:	b000631e 	bne	r22,zero,40004c88 <send_intra_info+0x1e8>
		//luma
		if(size == 16){
40004afc:	00800404 	movi	r2,16
40004b00:	90809626 	beq	r18,r2,40004d5c <send_intra_info+0x2bc>
								constrained_intra_pred))?0:0xFFFF0000;
			i=get_mb_mode(mpi,bx>>4,(by>>4)-1);
			availible_mask_y = ((i==NA) || (IsInter(i) && \
								constrained_intra_pred))?0:0x0000FFFF;
		}else{
			availible_mask_x = (bx>0 && ModePredInfo_Intra4x4PredMode(mpi,(bx>>2)-1,by>>2)>=0)?0xFFFF0000:0;
40004b04:	01c0560e 	bge	zero,r7,40004c60 <send_intra_info+0x1c0>
40004b08:	28c00b17 	ldw	r3,44(r5)
40004b0c:	a809d0ba 	srai	r4,r21,2
40004b10:	3805d0ba 	srai	r2,r7,2
40004b14:	29400d17 	ldw	r5,52(r5)
40004b18:	20c9383a 	mul	r4,r4,r3
40004b1c:	2085883a 	add	r2,r4,r2
40004b20:	10bfffc4 	addi	r2,r2,-1
40004b24:	1085883a 	add	r2,r2,r2
40004b28:	1085883a 	add	r2,r2,r2
40004b2c:	2885883a 	add	r2,r5,r2
40004b30:	10800017 	ldw	r2,0(r2)
40004b34:	10004a16 	blt	r2,zero,40004c60 <send_intra_info+0x1c0>
40004b38:	05c04034 	movhi	r23,256
40004b3c:	01404034 	movhi	r5,256
40004b40:	bdffc004 	addi	r23,r23,-256
40004b44:	297fffc4 	addi	r5,r5,-1
			availible_mask_y = (by>0 && ModePredInfo_Intra4x4PredMode(mpi,bx>>2,(by>>2)-1)>=0)?0x0000FFFF:0;
40004b48:	0540480e 	bge	zero,r21,40004c6c <send_intra_info+0x1cc>
40004b4c:	a807d0ba 	srai	r3,r21,2
40004b50:	41000b17 	ldw	r4,44(r8)
40004b54:	9805d0ba 	srai	r2,r19,2
40004b58:	18ffffc4 	addi	r3,r3,-1
40004b5c:	1909383a 	mul	r4,r3,r4
40004b60:	41800d17 	ldw	r6,52(r8)
40004b64:	2085883a 	add	r2,r4,r2
40004b68:	1085883a 	add	r2,r2,r2
40004b6c:	1085883a 	add	r2,r2,r2
40004b70:	3085883a 	add	r2,r6,r2
40004b74:	10800017 	ldw	r2,0(r2)
40004b78:	10003c16 	blt	r2,zero,40004c6c <send_intra_info+0x1cc>
40004b7c:	282f883a 	mov	r23,r5
40004b80:	073fc034 	movhi	fp,65280
		}
	}

	uint32_t  availible_mask = availible_mask_x | availible_mask_y;
	int       identifier     = rand()%32 + 129;
    uint32_t  word1 = availible_mask<<24 | mode<<16 | size<<8 | intra_cmd;
40004b84:	a028943a 	slli	r20,r20,16
			availible_mask_y = 0;
		}
	}

	uint32_t  availible_mask = availible_mask_x | availible_mask_y;
	int       identifier     = rand()%32 + 129;
40004b88:	000bdd80 	call	4000bdd8 <rand>
    uint32_t  word1 = availible_mask<<24 | mode<<16 | size<<8 | intra_cmd;
40004b8c:	9024923a 	slli	r18,r18,8
    uint32_t  word0 = identifier<<24     | availible_mask>>8;
40004b90:	00e00034 	movhi	r3,32768
		}
	}

	uint32_t  availible_mask = availible_mask_x | availible_mask_y;
	int       identifier     = rand()%32 + 129;
    uint32_t  word1 = availible_mask<<24 | mode<<16 | size<<8 | intra_cmd;
40004b94:	a5000094 	ori	r20,r20,2
    uint32_t  word0 = identifier<<24     | availible_mask>>8;
40004b98:	18c007c4 	addi	r3,r3,31
		}
	}

	uint32_t  availible_mask = availible_mask_x | availible_mask_y;
	int       identifier     = rand()%32 + 129;
    uint32_t  word1 = availible_mask<<24 | mode<<16 | size<<8 | intra_cmd;
40004b9c:	a4a4b03a 	or	r18,r20,r18
    uint32_t  word0 = identifier<<24     | availible_mask>>8;
40004ba0:	10c4703a 	and	r2,r2,r3
		}
	}

	uint32_t  availible_mask = availible_mask_x | availible_mask_y;
	int       identifier     = rand()%32 + 129;
    uint32_t  word1 = availible_mask<<24 | mode<<16 | size<<8 | intra_cmd;
40004ba4:	9738b03a 	or	fp,r18,fp
    uint32_t  word0 = identifier<<24     | availible_mask>>8;
40004ba8:	10005a16 	blt	r2,zero,40004d14 <send_intra_info+0x274>
40004bac:	10802044 	addi	r2,r2,129
40004bb0:	1004963a 	slli	r2,r2,24
40004bb4:	15eeb03a 	or	r23,r2,r23

    //wait for ack from previous command
    packet rx_packet;
    rx_packet.num_flits = 0;
    while(rx_packet.num_flits == 0){
		rx_packet = get_packet_by_id(0xFE);
40004bb8:	01403f84 	movi	r5,254
40004bbc:	d809883a 	mov	r4,sp
40004bc0:	00043f00 	call	400043f0 <get_packet_by_id>
		if(rx_packet.num_flits == 0){
40004bc4:	d8808017 	ldw	r2,512(sp)
40004bc8:	10002a26 	beq	r2,zero,40004c74 <send_intra_info+0x1d4>
		}
	}


    //send flit[0] cmd,id
    send_flit(addr, 0, (DO_INTRA<<8)|0xFF, 0);
40004bcc:	000f883a 	mov	r7,zero
40004bd0:	01807fc4 	movi	r6,511
40004bd4:	000b883a 	mov	r5,zero
40004bd8:	8009883a 	mov	r4,r16
40004bdc:	0003f100 	call	40003f10 <send_flit>

    //send flit[1] bx, by, LCbCr_select, blk_idx_check
    int blk_idx_check = (luma4x4BlkIdx&3)==3 || luma4x4BlkIdx==13 || (luma4x4BlkIdx==5 && bx>=Lwidth-4);
40004be0:	888000cc 	andi	r2,r17,3
40004be4:	00c000c4 	movi	r3,3
40004be8:	10c02526 	beq	r2,r3,40004c80 <send_intra_info+0x1e0>
40004bec:	00800344 	movi	r2,13
40004bf0:	88802326 	beq	r17,r2,40004c80 <send_intra_info+0x1e0>
40004bf4:	00800144 	movi	r2,5
40004bf8:	88804e26 	beq	r17,r2,40004d34 <send_intra_info+0x294>
40004bfc:	0005883a 	mov	r2,zero
    send_flit(addr, (bx&0xFFFF)<<16 | (by&0xFFFF),
40004c00:	b00c943a 	slli	r6,r22,16
40004c04:	980a943a 	slli	r5,r19,16
40004c08:	ad7fffcc 	andi	r21,r21,65535
40004c0c:	308cb03a 	or	r6,r6,r2
40004c10:	2d4ab03a 	or	r5,r5,r21
40004c14:	8009883a 	mov	r4,r16
40004c18:	000f883a 	mov	r7,zero
40004c1c:	0003f100 	call	40003f10 <send_flit>
                (LCbCr_select<<16) | blk_idx_check,0);

    //send flit[2] intra prediction request data
    send_flit(addr, word0, word1, 1);
40004c20:	01c00044 	movi	r7,1
40004c24:	e00d883a 	mov	r6,fp
40004c28:	b80b883a 	mov	r5,r23
40004c2c:	8009883a 	mov	r4,r16
    printf("    intra_cmd        0x%016llx\n", (((uint64_t)word0)<<32) | ((uint64_t)word1) );
    printf("    identifier       %d\n", identifier    );
    printf("    size             %d\n", size          );
#endif
    
}
40004c30:	dfc09117 	ldw	ra,580(sp)
40004c34:	df009017 	ldw	fp,576(sp)
40004c38:	ddc08f17 	ldw	r23,572(sp)
40004c3c:	dd808e17 	ldw	r22,568(sp)
40004c40:	dd408d17 	ldw	r21,564(sp)
40004c44:	dd008c17 	ldw	r20,560(sp)
40004c48:	dcc08b17 	ldw	r19,556(sp)
40004c4c:	dc808a17 	ldw	r18,552(sp)
40004c50:	dc408917 	ldw	r17,548(sp)
40004c54:	dc008817 	ldw	r16,544(sp)
40004c58:	dec09204 	addi	sp,sp,584
    int blk_idx_check = (luma4x4BlkIdx&3)==3 || luma4x4BlkIdx==13 || (luma4x4BlkIdx==5 && bx>=Lwidth-4);
    send_flit(addr, (bx&0xFFFF)<<16 | (by&0xFFFF),
                (LCbCr_select<<16) | blk_idx_check,0);

    //send flit[2] intra prediction request data
    send_flit(addr, word0, word1, 1);
40004c5c:	0003f101 	jmpi	40003f10 <send_flit>
40004c60:	002f883a 	mov	r23,zero
40004c64:	01403fc4 	movi	r5,255
			i=get_mb_mode(mpi,bx>>4,(by>>4)-1);
			availible_mask_y = ((i==NA) || (IsInter(i) && \
								constrained_intra_pred))?0:0x0000FFFF;
		}else{
			availible_mask_x = (bx>0 && ModePredInfo_Intra4x4PredMode(mpi,(bx>>2)-1,by>>2)>=0)?0xFFFF0000:0;
			availible_mask_y = (by>0 && ModePredInfo_Intra4x4PredMode(mpi,bx>>2,(by>>2)-1)>=0)?0x0000FFFF:0;
40004c68:	057fb816 	blt	zero,r21,40004b4c <__alt_data_end+0xc0004b4c>
40004c6c:	0039883a 	mov	fp,zero
40004c70:	003fc406 	br	40004b84 <__alt_data_end+0xc0004b84>
    packet rx_packet;
    rx_packet.num_flits = 0;
    while(rx_packet.num_flits == 0){
		rx_packet = get_packet_by_id(0xFE);
		if(rx_packet.num_flits == 0){
			buffers_loop(1);
40004c74:	01000044 	movi	r4,1
40004c78:	00040a00 	call	400040a0 <buffers_loop>
40004c7c:	003fce06 	br	40004bb8 <__alt_data_end+0xc0004bb8>

    //send flit[0] cmd,id
    send_flit(addr, 0, (DO_INTRA<<8)|0xFF, 0);

    //send flit[1] bx, by, LCbCr_select, blk_idx_check
    int blk_idx_check = (luma4x4BlkIdx&3)==3 || luma4x4BlkIdx==13 || (luma4x4BlkIdx==5 && bx>=Lwidth-4);
40004c80:	00800044 	movi	r2,1
40004c84:	003fde06 	br	40004c00 <__alt_data_end+0xc0004c00>
		}else{
			availible_mask_x = (bx>0 && ModePredInfo_Intra4x4PredMode(mpi,(bx>>2)-1,by>>2)>=0)?0xFFFF0000:0;
			availible_mask_y = (by>0 && ModePredInfo_Intra4x4PredMode(mpi,bx>>2,(by>>2)-1)>=0)?0x0000FFFF:0;
		}
	}else{
		int i=get_mb_mode(mpi,(bx>>3)-1,by>>3);
40004c88:	3807d0fa 	srai	r3,r7,3
40004c8c:	a80fd0fa 	srai	r7,r21,3
40004c90:	2809883a 	mov	r4,r5
40004c94:	197fffc4 	addi	r5,r3,-1
40004c98:	380d883a 	mov	r6,r7
40004c9c:	d8c08515 	stw	r3,532(sp)
40004ca0:	d9c08615 	stw	r7,536(sp)
40004ca4:	da008715 	stw	r8,540(sp)
40004ca8:	00029080 	call	40002908 <get_mb_mode>
		if((i==NA) || (IsInter(i) && constrained_intra_pred)){
40004cac:	013fffc4 	movi	r4,-1
40004cb0:	d8c08517 	ldw	r3,532(sp)
40004cb4:	d9c08617 	ldw	r7,536(sp)
40004cb8:	da008717 	ldw	r8,540(sp)
40004cbc:	11002126 	beq	r2,r4,40004d44 <send_intra_info+0x2a4>
40004cc0:	01000104 	movi	r4,4
40004cc4:	20801836 	bltu	r4,r2,40004d28 <send_intra_info+0x288>
40004cc8:	e0001e1e 	bne	fp,zero,40004d44 <send_intra_info+0x2a4>
40004ccc:	00804034 	movhi	r2,256
40004cd0:	10bfffc4 	addi	r2,r2,-1
40004cd4:	05c04034 	movhi	r23,256
40004cd8:	d8808415 	stw	r2,528(sp)
40004cdc:	bdffc004 	addi	r23,r23,-256
			availible_mask_x = 0;
		}

		i=get_mb_mode(mpi,bx>>3,(by>>3)-1);
40004ce0:	180b883a 	mov	r5,r3
40004ce4:	39bfffc4 	addi	r6,r7,-1
40004ce8:	4009883a 	mov	r4,r8
40004cec:	00029080 	call	40002908 <get_mb_mode>
		if((i==NA) || (IsInter(i) && constrained_intra_pred)){
40004cf0:	00ffffc4 	movi	r3,-1
40004cf4:	10ffdd26 	beq	r2,r3,40004c6c <__alt_data_end+0xc0004c6c>
40004cf8:	00c00104 	movi	r3,4
40004cfc:	1880152e 	bgeu	r3,r2,40004d54 <send_intra_info+0x2b4>
40004d00:	00c03fc4 	movi	r3,255
40004d04:	10c01326 	beq	r2,r3,40004d54 <send_intra_info+0x2b4>
40004d08:	ddc08417 	ldw	r23,528(sp)
40004d0c:	073fc034 	movhi	fp,65280
40004d10:	003f9c06 	br	40004b84 <__alt_data_end+0xc0004b84>
	}

	uint32_t  availible_mask = availible_mask_x | availible_mask_y;
	int       identifier     = rand()%32 + 129;
    uint32_t  word1 = availible_mask<<24 | mode<<16 | size<<8 | intra_cmd;
    uint32_t  word0 = identifier<<24     | availible_mask>>8;
40004d14:	10bfffc4 	addi	r2,r2,-1
40004d18:	00fff804 	movi	r3,-32
40004d1c:	10c4b03a 	or	r2,r2,r3
40004d20:	10800044 	addi	r2,r2,1
40004d24:	003fa106 	br	40004bac <__alt_data_end+0xc0004bac>
			availible_mask_x = (bx>0 && ModePredInfo_Intra4x4PredMode(mpi,(bx>>2)-1,by>>2)>=0)?0xFFFF0000:0;
			availible_mask_y = (by>0 && ModePredInfo_Intra4x4PredMode(mpi,bx>>2,(by>>2)-1)>=0)?0x0000FFFF:0;
		}
	}else{
		int i=get_mb_mode(mpi,(bx>>3)-1,by>>3);
		if((i==NA) || (IsInter(i) && constrained_intra_pred)){
40004d28:	01003fc4 	movi	r4,255
40004d2c:	113fe71e 	bne	r2,r4,40004ccc <__alt_data_end+0xc0004ccc>
40004d30:	003fe506 	br	40004cc8 <__alt_data_end+0xc0004cc8>

    //send flit[0] cmd,id
    send_flit(addr, 0, (DO_INTRA<<8)|0xFF, 0);

    //send flit[1] bx, by, LCbCr_select, blk_idx_check
    int blk_idx_check = (luma4x4BlkIdx&3)==3 || luma4x4BlkIdx==13 || (luma4x4BlkIdx==5 && bx>=Lwidth-4);
40004d34:	d8c08317 	ldw	r3,524(sp)
40004d38:	18bfff04 	addi	r2,r3,-4
40004d3c:	9884403a 	cmpge	r2,r19,r2
40004d40:	003faf06 	br	40004c00 <__alt_data_end+0xc0004c00>
40004d44:	00803fc4 	movi	r2,255
40004d48:	d8808415 	stw	r2,528(sp)
40004d4c:	002f883a 	mov	r23,zero
40004d50:	003fe306 	br	40004ce0 <__alt_data_end+0xc0004ce0>
		if((i==NA) || (IsInter(i) && constrained_intra_pred)){
			availible_mask_x = 0;
		}

		i=get_mb_mode(mpi,bx>>3,(by>>3)-1);
		if((i==NA) || (IsInter(i) && constrained_intra_pred)){
40004d54:	e03fc51e 	bne	fp,zero,40004c6c <__alt_data_end+0xc0004c6c>
40004d58:	003feb06 	br	40004d08 <__alt_data_end+0xc0004d08>
	int availible_mask_x = 0xFFFF0000;
	int availible_mask_y = 0x0000FFFF;
	if(LCbCr_select == LUMA_SELECT){
		//luma
		if(size == 16){
			int i = get_mb_mode(mpi,(bx>>4)-1,by>>4);
40004d5c:	3807d13a 	srai	r3,r7,4
40004d60:	a80fd13a 	srai	r7,r21,4
40004d64:	2809883a 	mov	r4,r5
40004d68:	197fffc4 	addi	r5,r3,-1
40004d6c:	380d883a 	mov	r6,r7
40004d70:	d8c08515 	stw	r3,532(sp)
40004d74:	d9c08615 	stw	r7,536(sp)
40004d78:	da008715 	stw	r8,540(sp)
40004d7c:	00029080 	call	40002908 <get_mb_mode>
			availible_mask_x = ((i==NA) || (IsInter(i) && \
40004d80:	013fffc4 	movi	r4,-1
40004d84:	d8c08517 	ldw	r3,532(sp)
40004d88:	d9c08617 	ldw	r7,536(sp)
40004d8c:	da008717 	ldw	r8,540(sp)
40004d90:	11000926 	beq	r2,r4,40004db8 <send_intra_info+0x318>
40004d94:	01000104 	movi	r4,4
40004d98:	20801536 	bltu	r4,r2,40004df0 <send_intra_info+0x350>
40004d9c:	e000061e 	bne	fp,zero,40004db8 <send_intra_info+0x318>
40004da0:	00804034 	movhi	r2,256
40004da4:	05c04034 	movhi	r23,256
40004da8:	10bfc004 	addi	r2,r2,-256
40004dac:	bdffffc4 	addi	r23,r23,-1
40004db0:	d8808415 	stw	r2,528(sp)
40004db4:	00000206 	br	40004dc0 <send_intra_info+0x320>
40004db8:	05c03fc4 	movi	r23,255
40004dbc:	d8008415 	stw	zero,528(sp)
								constrained_intra_pred))?0:0xFFFF0000;
			i=get_mb_mode(mpi,bx>>4,(by>>4)-1);
40004dc0:	180b883a 	mov	r5,r3
40004dc4:	39bfffc4 	addi	r6,r7,-1
40004dc8:	4009883a 	mov	r4,r8
40004dcc:	00029080 	call	40002908 <get_mb_mode>
			availible_mask_y = ((i==NA) || (IsInter(i) && \
								constrained_intra_pred))?0:0x0000FFFF;
40004dd0:	00ffffc4 	movi	r3,-1
40004dd4:	10c00326 	beq	r2,r3,40004de4 <send_intra_info+0x344>
		if(size == 16){
			int i = get_mb_mode(mpi,(bx>>4)-1,by>>4);
			availible_mask_x = ((i==NA) || (IsInter(i) && \
								constrained_intra_pred))?0:0xFFFF0000;
			i=get_mb_mode(mpi,bx>>4,(by>>4)-1);
			availible_mask_y = ((i==NA) || (IsInter(i) && \
40004dd8:	00c00104 	movi	r3,4
40004ddc:	18800736 	bltu	r3,r2,40004dfc <send_intra_info+0x35c>
40004de0:	e03fca26 	beq	fp,zero,40004d0c <__alt_data_end+0xc0004d0c>
40004de4:	ddc08417 	ldw	r23,528(sp)
40004de8:	0039883a 	mov	fp,zero
40004dec:	003f6506 	br	40004b84 <__alt_data_end+0xc0004b84>
	int availible_mask_y = 0x0000FFFF;
	if(LCbCr_select == LUMA_SELECT){
		//luma
		if(size == 16){
			int i = get_mb_mode(mpi,(bx>>4)-1,by>>4);
			availible_mask_x = ((i==NA) || (IsInter(i) && \
40004df0:	01003fc4 	movi	r4,255
40004df4:	113fea1e 	bne	r2,r4,40004da0 <__alt_data_end+0xc0004da0>
40004df8:	003fe806 	br	40004d9c <__alt_data_end+0xc0004d9c>
								constrained_intra_pred))?0:0xFFFF0000;
			i=get_mb_mode(mpi,bx>>4,(by>>4)-1);
			availible_mask_y = ((i==NA) || (IsInter(i) && \
40004dfc:	00c03fc4 	movi	r3,255
40004e00:	10ffc21e 	bne	r2,r3,40004d0c <__alt_data_end+0xc0004d0c>
40004e04:	e03fc126 	beq	fp,zero,40004d0c <__alt_data_end+0xc0004d0c>
40004e08:	003ff606 	br	40004de4 <__alt_data_end+0xc0004de4>

40004e0c <send_inter_info>:
#endif
    
}


void send_inter_info(int addr, mode_pred_info *mpi, int org_x, int org_y){
40004e0c:	deff5104 	addi	sp,sp,-700
40004e10:	dd40aa15 	stw	r21,680(sp)
40004e14:	dc40a615 	stw	r17,664(sp)
40004e18:	282b883a 	mov	r21,r5
40004e1c:	dc00a515 	stw	r16,660(sp)
40004e20:	3023883a 	mov	r17,r6

	int x,y;

	int32_t mv[32] = {0};
40004e24:	000b883a 	mov	r5,zero
40004e28:	01802004 	movi	r6,128
#endif
    
}


void send_inter_info(int addr, mode_pred_info *mpi, int org_x, int org_y){
40004e2c:	2021883a 	mov	r16,r4

	int x,y;

	int32_t mv[32] = {0};
40004e30:	d9008304 	addi	r4,sp,524
#endif
    
}


void send_inter_info(int addr, mode_pred_info *mpi, int org_x, int org_y){
40004e34:	dfc0ae15 	stw	ra,696(sp)
40004e38:	df00ad15 	stw	fp,692(sp)
40004e3c:	ddc0ac15 	stw	r23,688(sp)
40004e40:	dd80ab15 	stw	r22,684(sp)
40004e44:	dd00a915 	stw	r20,676(sp)
40004e48:	dcc0a815 	stw	r19,672(sp)
40004e4c:	dc80a715 	stw	r18,668(sp)
40004e50:	3825883a 	mov	r18,r7

	int x,y;

	int32_t mv[32] = {0};
40004e54:	000ba440 	call	4000ba44 <memset>
40004e58:	abc00b17 	ldw	r15,44(r21)
40004e5c:	9027d0ba 	srai	r19,r18,2
40004e60:	8807d0ba 	srai	r3,r17,2
40004e64:	a9400f17 	ldw	r5,60(r21)

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004e68:	9bc9383a 	mul	r4,r19,r15
40004e6c:	9d000044 	addi	r20,r19,1
40004e70:	a3e9383a 	mul	r20,r20,r15
40004e74:	19c00044 	addi	r7,r3,1
40004e78:	a8800e17 	ldw	r2,56(r21)
40004e7c:	1d8000c4 	addi	r22,r3,3
40004e80:	19800084 	addi	r6,r3,2
40004e84:	391b883a 	add	r13,r7,r4
40004e88:	191d883a 	add	r14,r3,r4
40004e8c:	3119883a 	add	r12,r6,r4
40004e90:	b111883a 	add	r8,r22,r4
40004e94:	6b5b883a 	add	r13,r13,r13
40004e98:	99000084 	addi	r4,r19,2
40004e9c:	9cc000c4 	addi	r19,r19,3
40004ea0:	23c9383a 	mul	r4,r4,r15
40004ea4:	6b5b883a 	add	r13,r13,r13
40004ea8:	9bdf383a 	mul	r15,r19,r15
40004eac:	a5a7883a 	add	r19,r20,r22
40004eb0:	a193883a 	add	r9,r20,r6
40004eb4:	136f883a 	add	r23,r2,r13
40004eb8:	6319883a 	add	r12,r12,r12
40004ebc:	9ce7883a 	add	r19,r19,r19
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004ec0:	2b5b883a 	add	r13,r5,r13
40004ec4:	6b400017 	ldw	r13,0(r13)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004ec8:	6319883a 	add	r12,r12,r12
40004ecc:	9ce7883a 	add	r19,r19,r19
40004ed0:	4a53883a 	add	r9,r9,r9
40004ed4:	dcc0a415 	stw	r19,656(sp)
40004ed8:	4a53883a 	add	r9,r9,r9
40004edc:	1327883a 	add	r19,r2,r12
40004ee0:	a0d7883a 	add	r11,r20,r3
40004ee4:	a1d5883a 	add	r10,r20,r7
40004ee8:	dcc0a315 	stw	r19,652(sp)
40004eec:	127f883a 	add	ra,r2,r9
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004ef0:	2a53883a 	add	r9,r5,r9
40004ef4:	4a400017 	ldw	r9,0(r9)
40004ef8:	db409415 	stw	r13,592(sp)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004efc:	739d883a 	add	r14,r14,r14
40004f00:	db40a317 	ldw	r13,652(sp)
40004f04:	5ad7883a 	add	r11,r11,r11
40004f08:	5295883a 	add	r10,r10,r10
40004f0c:	739d883a 	add	r14,r14,r14
40004f10:	5ad7883a 	add	r11,r11,r11
40004f14:	5295883a 	add	r10,r10,r10
40004f18:	4211883a 	add	r8,r8,r8
40004f1c:	13b9883a 	add	fp,r2,r14
40004f20:	12e9883a 	add	r20,r2,r11
40004f24:	12a7883a 	add	r19,r2,r10
40004f28:	4211883a 	add	r8,r8,r8
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f2c:	2b9d883a 	add	r14,r5,r14
40004f30:	2b19883a 	add	r12,r5,r12
40004f34:	2ad7883a 	add	r11,r5,r11
40004f38:	2a95883a 	add	r10,r5,r10

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f3c:	122b883a 	add	r21,r2,r8
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f40:	73800017 	ldw	r14,0(r14)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f44:	bdc00017 	ldw	r23,0(r23)
40004f48:	6b400017 	ldw	r13,0(r13)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f4c:	63000017 	ldw	r12,0(r12)
40004f50:	5ac00017 	ldw	r11,0(r11)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f54:	9cc00017 	ldw	r19,0(r19)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f58:	52800017 	ldw	r10,0(r10)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f5c:	e7000017 	ldw	fp,0(fp)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f60:	da409915 	stw	r9,612(sp)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f64:	da40a417 	ldw	r9,656(sp)
40004f68:	ad400017 	ldw	r21,0(r21)
40004f6c:	db408515 	stw	r13,532(sp)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f70:	dac09715 	stw	r11,604(sp)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f74:	dcc08815 	stw	r19,544(sp)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f78:	da809815 	stw	r10,608(sp)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f7c:	1267883a 	add	r19,r2,r9
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f80:	db809315 	stw	r14,588(sp)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f84:	ddc08415 	stw	r23,528(sp)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f88:	db009515 	stw	r12,596(sp)
40004f8c:	2a11883a 	add	r8,r5,r8

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f90:	df008315 	stw	fp,524(sp)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f94:	42000017 	ldw	r8,0(r8)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004f98:	a5000017 	ldw	r20,0(r20)
40004f9c:	20d7883a 	add	r11,r4,r3
40004fa0:	21d5883a 	add	r10,r4,r7
40004fa4:	2193883a 	add	r9,r4,r6
40004fa8:	9cc00017 	ldw	r19,0(r19)
40004fac:	ffc00017 	ldw	ra,0(ra)
40004fb0:	2589883a 	add	r4,r4,r22
40004fb4:	dd408615 	stw	r21,536(sp)
40004fb8:	78c7883a 	add	r3,r15,r3
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004fbc:	db00a417 	ldw	r12,656(sp)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40004fc0:	79cf883a 	add	r7,r15,r7
40004fc4:	798d883a 	add	r6,r15,r6
40004fc8:	5ad7883a 	add	r11,r11,r11
40004fcc:	7d9f883a 	add	r15,r15,r22
40004fd0:	5295883a 	add	r10,r10,r10
40004fd4:	4a53883a 	add	r9,r9,r9
40004fd8:	2109883a 	add	r4,r4,r4
40004fdc:	18c7883a 	add	r3,r3,r3
40004fe0:	5ad7883a 	add	r11,r11,r11
40004fe4:	5295883a 	add	r10,r10,r10
40004fe8:	4a53883a 	add	r9,r9,r9
40004fec:	2109883a 	add	r4,r4,r4
40004ff0:	18c7883a 	add	r3,r3,r3
40004ff4:	39cf883a 	add	r7,r7,r7
40004ff8:	318d883a 	add	r6,r6,r6
40004ffc:	7bdf883a 	add	r15,r15,r15
40005000:	12ef883a 	add	r23,r2,r11
40005004:	12ad883a 	add	r22,r2,r10
40005008:	126b883a 	add	r21,r2,r9
4000500c:	10dd883a 	add	r14,r2,r3
40005010:	39cf883a 	add	r7,r7,r7
40005014:	318d883a 	add	r6,r6,r6
40005018:	7bdf883a 	add	r15,r15,r15
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
4000501c:	da009615 	stw	r8,600(sp)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40005020:	dd008715 	stw	r20,540(sp)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
40005024:	2b11883a 	add	r8,r5,r12

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40005028:	1129883a 	add	r20,r2,r4
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
4000502c:	28c7883a 	add	r3,r5,r3
40005030:	2ad7883a 	add	r11,r5,r11
40005034:	2a95883a 	add	r10,r5,r10
40005038:	2a53883a 	add	r9,r5,r9
4000503c:	2909883a 	add	r4,r5,r4

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40005040:	11db883a 	add	r13,r2,r7
40005044:	1199883a 	add	r12,r2,r6
40005048:	dcc08a15 	stw	r19,552(sp)
4000504c:	13c5883a 	add	r2,r2,r15
40005050:	bcc00017 	ldw	r19,0(r23)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
40005054:	42000017 	ldw	r8,0(r8)
40005058:	1dc00017 	ldw	r23,0(r3)
4000505c:	5ac00017 	ldw	r11,0(r11)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40005060:	b5800017 	ldw	r22,0(r22)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
40005064:	52800017 	ldw	r10,0(r10)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40005068:	ad400017 	ldw	r21,0(r21)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
4000506c:	4a400017 	ldw	r9,0(r9)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40005070:	a5000017 	ldw	r20,0(r20)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
40005074:	21000017 	ldw	r4,0(r4)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40005078:	73800017 	ldw	r14,0(r14)
4000507c:	10800017 	ldw	r2,0(r2)
40005080:	6b400017 	ldw	r13,0(r13)
40005084:	dfc08915 	stw	ra,548(sp)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
40005088:	29cf883a 	add	r7,r5,r7
4000508c:	298d883a 	add	r6,r5,r6
40005090:	2bdf883a 	add	r15,r5,r15
40005094:	da009a15 	stw	r8,616(sp)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
40005098:	dcc08b15 	stw	r19,556(sp)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
4000509c:	dac09b15 	stw	r11,620(sp)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
400050a0:	dd808c15 	stw	r22,560(sp)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
400050a4:	da809c15 	stw	r10,624(sp)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
400050a8:	dd408d15 	stw	r21,564(sp)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
400050ac:	da409d15 	stw	r9,628(sp)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
400050b0:	dd008e15 	stw	r20,568(sp)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
400050b4:	d9009e15 	stw	r4,632(sp)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
400050b8:	db808f15 	stw	r14,572(sp)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
400050bc:	ddc09f15 	stw	r23,636(sp)
400050c0:	39c00017 	ldw	r7,0(r7)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
400050c4:	63000017 	ldw	r12,0(r12)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
400050c8:	30c00017 	ldw	r3,0(r6)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
400050cc:	db409015 	stw	r13,576(sp)
400050d0:	d8809215 	stw	r2,584(sp)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
400050d4:	78800017 	ldw	r2,0(r15)
400050d8:	d9c0a015 	stw	r7,640(sp)

	int32_t mv[32] = {0};

	for(y=0; y<4; ++y){
	    for(x=0; x<4; ++x){
	    	mv[x + y*4     ] = ModePredInfo_MVx(mpi,(org_x>>2)+x,(org_y>>2)+y);
400050dc:	db009115 	stw	r12,580(sp)
	    	mv[x + y*4 + 16] = ModePredInfo_MVy(mpi,(org_x>>2)+x,(org_y>>2)+y);
400050e0:	d8c0a115 	stw	r3,644(sp)
400050e4:	d880a215 	stw	r2,648(sp)

    //wait for ack from previous command
    packet rx_packet;
    rx_packet.num_flits = 0;
    while(rx_packet.num_flits == 0){
		rx_packet = get_packet_by_id(0xFE);
400050e8:	01403f84 	movi	r5,254
400050ec:	d809883a 	mov	r4,sp
400050f0:	00043f00 	call	400043f0 <get_packet_by_id>
		if(rx_packet.num_flits == 0){
400050f4:	d8808017 	ldw	r2,512(sp)
400050f8:	10002d26 	beq	r2,zero,400051b0 <send_inter_info+0x3a4>
			buffers_loop(1);
		}
	}

	//send header flit
	send_flit(addr, 0, (DO_INTER<<8)|0xFF, 0);
400050fc:	000f883a 	mov	r7,zero
40005100:	0180bfc4 	movi	r6,767
40005104:	000b883a 	mov	r5,zero
40005108:	8009883a 	mov	r4,r16
4000510c:	0003f100 	call	40003f10 <send_flit>

	//send coords
	send_flit(addr, org_x, org_y, 0);
40005110:	900d883a 	mov	r6,r18
40005114:	880b883a 	mov	r5,r17
40005118:	000f883a 	mov	r7,zero
4000511c:	8009883a 	mov	r4,r16
40005120:	0003f100 	call	40003f10 <send_flit>
40005124:	dc408304 	addi	r17,sp,524
40005128:	dd809304 	addi	r22,sp,588
4000512c:	dd408404 	addi	r21,sp,528
40005130:	dcc09404 	addi	r19,sp,592
		printf("mv(tx'd)[%d] = (%d, %d)\n",i, mv[i], mv[i+16]);
	}
#endif

	//send motion vector flits
	for(int i = 0; i < 8; i++){
40005134:	0025883a 	mov	r18,zero
40005138:	05000204 	movi	r20,8
		uint32_t tmp_d  = mv[j+17] & 0xFFFF;

		uint32_t word_0 = (tmp_a << 16) | tmp_b;
		uint32_t word_1 = (tmp_c << 16) | tmp_d;

		send_flit(addr, word_0, word_1, i==7?1:0);
4000513c:	a8c0000b 	ldhu	r3,0(r21)
40005140:	8880000b 	ldhu	r2,0(r17)
40005144:	9980000b 	ldhu	r6,0(r19)
40005148:	b140000b 	ldhu	r5,0(r22)
4000514c:	1806943a 	slli	r3,r3,16
40005150:	1004943a 	slli	r2,r2,16
40005154:	91c001e0 	cmpeqi	r7,r18,7
40005158:	198cb03a 	or	r6,r3,r6
4000515c:	114ab03a 	or	r5,r2,r5
40005160:	8009883a 	mov	r4,r16
		printf("mv(tx'd)[%d] = (%d, %d)\n",i, mv[i], mv[i+16]);
	}
#endif

	//send motion vector flits
	for(int i = 0; i < 8; i++){
40005164:	94800044 	addi	r18,r18,1
		uint32_t tmp_d  = mv[j+17] & 0xFFFF;

		uint32_t word_0 = (tmp_a << 16) | tmp_b;
		uint32_t word_1 = (tmp_c << 16) | tmp_d;

		send_flit(addr, word_0, word_1, i==7?1:0);
40005168:	0003f100 	call	40003f10 <send_flit>
4000516c:	8c400204 	addi	r17,r17,8
40005170:	b5800204 	addi	r22,r22,8
40005174:	ad400204 	addi	r21,r21,8
40005178:	9cc00204 	addi	r19,r19,8
		printf("mv(tx'd)[%d] = (%d, %d)\n",i, mv[i], mv[i+16]);
	}
#endif

	//send motion vector flits
	for(int i = 0; i < 8; i++){
4000517c:	953fef1e 	bne	r18,r20,4000513c <__alt_data_end+0xc000513c>
		uint32_t word_1 = (tmp_c << 16) | tmp_d;

		send_flit(addr, word_0, word_1, i==7?1:0);

	}
}
40005180:	dfc0ae17 	ldw	ra,696(sp)
40005184:	df00ad17 	ldw	fp,692(sp)
40005188:	ddc0ac17 	ldw	r23,688(sp)
4000518c:	dd80ab17 	ldw	r22,684(sp)
40005190:	dd40aa17 	ldw	r21,680(sp)
40005194:	dd00a917 	ldw	r20,676(sp)
40005198:	dcc0a817 	ldw	r19,672(sp)
4000519c:	dc80a717 	ldw	r18,668(sp)
400051a0:	dc40a617 	ldw	r17,664(sp)
400051a4:	dc00a517 	ldw	r16,660(sp)
400051a8:	dec0af04 	addi	sp,sp,700
400051ac:	f800283a 	ret
    packet rx_packet;
    rx_packet.num_flits = 0;
    while(rx_packet.num_flits == 0){
		rx_packet = get_packet_by_id(0xFE);
		if(rx_packet.num_flits == 0){
			buffers_loop(1);
400051b0:	01000044 	movi	r4,1
400051b4:	00040a00 	call	400040a0 <buffers_loop>
400051b8:	003fcb06 	br	400050e8 <__alt_data_end+0xc00050e8>

400051bc <send_direct_write>:
		send_flit(addr, word_0, word_1, i==7?1:0);

	}
}

void send_direct_write(int addr,int x, int y, int width, int height, int LCbCr_select, uint8_t *bytes, int add_flag){
400051bc:	deff7404 	addi	sp,sp,-560
400051c0:	ddc08a15 	stw	r23,552(sp)
400051c4:	dd408815 	stw	r21,544(sp)
400051c8:	dc408415 	stw	r17,528(sp)
400051cc:	dc008315 	stw	r16,524(sp)
400051d0:	dd408c17 	ldw	r21,560(sp)
400051d4:	dc008d17 	ldw	r16,564(sp)
400051d8:	dc408e17 	ldw	r17,568(sp)
400051dc:	ddc08f17 	ldw	r23,572(sp)
400051e0:	dd808915 	stw	r22,548(sp)
400051e4:	dd008715 	stw	r20,540(sp)
400051e8:	dcc08615 	stw	r19,536(sp)
400051ec:	dc808515 	stw	r18,532(sp)
400051f0:	dfc08b15 	stw	ra,556(sp)
400051f4:	2025883a 	mov	r18,r4
400051f8:	2827883a 	mov	r19,r5
400051fc:	3029883a 	mov	r20,r6
40005200:	382d883a 	mov	r22,r7
    //wait for ack from previous command
    packet rx_packet;
    rx_packet.num_flits = 0;
    while(rx_packet.num_flits == 0){
		rx_packet = get_packet_by_id(0xFE);
40005204:	01403f84 	movi	r5,254
40005208:	d809883a 	mov	r4,sp
4000520c:	00043f00 	call	400043f0 <get_packet_by_id>
		if(rx_packet.num_flits == 0){
40005210:	d8808017 	ldw	r2,512(sp)
40005214:	10005f26 	beq	r2,zero,40005394 <send_direct_write+0x1d8>


	//send header
	uint32_t header_data_high = ((width&0xFF)<<24) | ((height&0xFF)<<16) | (add_flag<<8) | LCbCr_select;
	uint32_t header_data_low  = (DO_DIRECT_WRITE<<8) | 0xFF;
	send_flit(addr, header_data_high,header_data_low,0);
40005218:	b80a923a 	slli	r5,r23,8
4000521c:	a8803fcc 	andi	r2,r21,255
40005220:	b006963a 	slli	r3,r22,24
40005224:	1004943a 	slli	r2,r2,16
40005228:	2c0ab03a 	or	r5,r5,r16

	//debug
	for(int i = 0; i < width*height; i++){
4000522c:	b56b383a 	mul	r21,r22,r21


	//send header
	uint32_t header_data_high = ((width&0xFF)<<24) | ((height&0xFF)<<16) | (add_flag<<8) | LCbCr_select;
	uint32_t header_data_low  = (DO_DIRECT_WRITE<<8) | 0xFF;
	send_flit(addr, header_data_high,header_data_low,0);
40005230:	28cab03a 	or	r5,r5,r3
40005234:	000f883a 	mov	r7,zero
40005238:	01813fc4 	movi	r6,1279
4000523c:	288ab03a 	or	r5,r5,r2
40005240:	9009883a 	mov	r4,r18
40005244:	0003f100 	call	40003f10 <send_flit>

	//debug
	for(int i = 0; i < width*height; i++){
40005248:	05403a0e 	bge	zero,r21,40005334 <send_direct_write+0x178>
4000524c:	8d6d883a 	add	r22,r17,r21
40005250:	8821883a 	mov	r16,r17
		printf("data[%d]: %d\n",i,  (int) (bytes[i]) );
40005254:	81800003 	ldbu	r6,0(r16)
40005258:	011000b4 	movhi	r4,16386
4000525c:	844bc83a 	sub	r5,r16,r17
40005260:	2138a404 	addi	r4,r4,-7536
40005264:	84000044 	addi	r16,r16,1
40005268:	000bc900 	call	4000bc90 <printf>
	uint32_t header_data_high = ((width&0xFF)<<24) | ((height&0xFF)<<16) | (add_flag<<8) | LCbCr_select;
	uint32_t header_data_low  = (DO_DIRECT_WRITE<<8) | 0xFF;
	send_flit(addr, header_data_high,header_data_low,0);

	//debug
	for(int i = 0; i < width*height; i++){
4000526c:	b43ff91e 	bne	r22,r16,40005254 <__alt_data_end+0xc0005254>
40005270:	a821883a 	mov	r16,r21
		uint32_t data_low  = 0;
		uint32_t data_high = 0;
		for(int i = 0; i < 4; i++){
			if(remaining_data > 0){
				data_high = (data_high<<8) | bytes[width * height - remaining_data];
				if(remaining_data > 4){
40005274:	05800104 	movi	r22,4
40005278:	00002206 	br	40005304 <send_direct_write+0x148>
					data_high = (data_low<<8) | bytes[width * height - remaining_data + 4];
					remaining_data--;
				}
				remaining_data--;
4000527c:	80bfffc4 	addi	r2,r16,-1
	while(remaining_data > 0){
		uint32_t data_low  = 0;
		uint32_t data_high = 0;
		for(int i = 0; i < 4; i++){
			if(remaining_data > 0){
				data_high = (data_high<<8) | bytes[width * height - remaining_data];
40005280:	29403fcc 	andi	r5,r5,255
	int remaining_data = width * height;
	while(remaining_data > 0){
		uint32_t data_low  = 0;
		uint32_t data_high = 0;
		for(int i = 0; i < 4; i++){
			if(remaining_data > 0){
40005284:	10002726 	beq	r2,zero,40005324 <send_direct_write+0x168>
				data_high = (data_high<<8) | bytes[width * height - remaining_data];
40005288:	a887c83a 	sub	r3,r21,r2
4000528c:	88c7883a 	add	r3,r17,r3
40005290:	19000003 	ldbu	r4,0(r3)
				if(remaining_data > 4){
40005294:	b0803c16 	blt	r22,r2,40005388 <send_direct_write+0x1cc>
	while(remaining_data > 0){
		uint32_t data_low  = 0;
		uint32_t data_high = 0;
		for(int i = 0; i < 4; i++){
			if(remaining_data > 0){
				data_high = (data_high<<8) | bytes[width * height - remaining_data];
40005298:	280a923a 	slli	r5,r5,8
4000529c:	21003fcc 	andi	r4,r4,255
400052a0:	214ab03a 	or	r5,r4,r5
				if(remaining_data > 4){
					data_high = (data_low<<8) | bytes[width * height - remaining_data + 4];
					remaining_data--;
				}
				remaining_data--;
400052a4:	10ffffc4 	addi	r3,r2,-1
	int remaining_data = width * height;
	while(remaining_data > 0){
		uint32_t data_low  = 0;
		uint32_t data_high = 0;
		for(int i = 0; i < 4; i++){
			if(remaining_data > 0){
400052a8:	18001e26 	beq	r3,zero,40005324 <send_direct_write+0x168>
				data_high = (data_high<<8) | bytes[width * height - remaining_data];
400052ac:	a8c9c83a 	sub	r4,r21,r3
400052b0:	8909883a 	add	r4,r17,r4
400052b4:	21800003 	ldbu	r6,0(r4)
				if(remaining_data > 4){
400052b8:	b0c03016 	blt	r22,r3,4000537c <send_direct_write+0x1c0>
	while(remaining_data > 0){
		uint32_t data_low  = 0;
		uint32_t data_high = 0;
		for(int i = 0; i < 4; i++){
			if(remaining_data > 0){
				data_high = (data_high<<8) | bytes[width * height - remaining_data];
400052bc:	280a923a 	slli	r5,r5,8
400052c0:	31803fcc 	andi	r6,r6,255
400052c4:	314ab03a 	or	r5,r6,r5
				if(remaining_data > 4){
					data_high = (data_low<<8) | bytes[width * height - remaining_data + 4];
					remaining_data--;
				}
				remaining_data--;
400052c8:	1c3fffc4 	addi	r16,r3,-1
	int remaining_data = width * height;
	while(remaining_data > 0){
		uint32_t data_low  = 0;
		uint32_t data_high = 0;
		for(int i = 0; i < 4; i++){
			if(remaining_data > 0){
400052cc:	80001526 	beq	r16,zero,40005324 <send_direct_write+0x168>
				data_high = (data_high<<8) | bytes[width * height - remaining_data];
400052d0:	ac05c83a 	sub	r2,r21,r16
400052d4:	8885883a 	add	r2,r17,r2
400052d8:	11000003 	ldbu	r4,0(r2)
				if(remaining_data > 4){
400052dc:	b4002416 	blt	r22,r16,40005370 <send_direct_write+0x1b4>
	while(remaining_data > 0){
		uint32_t data_low  = 0;
		uint32_t data_high = 0;
		for(int i = 0; i < 4; i++){
			if(remaining_data > 0){
				data_high = (data_high<<8) | bytes[width * height - remaining_data];
400052e0:	280a923a 	slli	r5,r5,8
400052e4:	21003fcc 	andi	r4,r4,255
400052e8:	214ab03a 	or	r5,r4,r5
				if(remaining_data > 4){
					data_high = (data_low<<8) | bytes[width * height - remaining_data + 4];
					remaining_data--;
				}
				remaining_data--;
400052ec:	843fffc4 	addi	r16,r16,-1
			}
		}
		send_flit(addr, data_high, data_low, 0);
400052f0:	000f883a 	mov	r7,zero
400052f4:	000d883a 	mov	r6,zero
400052f8:	9009883a 	mov	r4,r18
400052fc:	0003f100 	call	40003f10 <send_flit>



	//send data
	int remaining_data = width * height;
	while(remaining_data > 0){
40005300:	80000c26 	beq	r16,zero,40005334 <send_direct_write+0x178>
		uint32_t data_low  = 0;
		uint32_t data_high = 0;
		for(int i = 0; i < 4; i++){
			if(remaining_data > 0){
				data_high = (data_high<<8) | bytes[width * height - remaining_data];
40005304:	ac05c83a 	sub	r2,r21,r16
40005308:	8885883a 	add	r2,r17,r2
4000530c:	11400003 	ldbu	r5,0(r2)
				if(remaining_data > 4){
40005310:	b43fda0e 	bge	r22,r16,4000527c <__alt_data_end+0xc000527c>
					data_high = (data_low<<8) | bytes[width * height - remaining_data + 4];
					remaining_data--;
40005314:	843fffc4 	addi	r16,r16,-1
		uint32_t data_high = 0;
		for(int i = 0; i < 4; i++){
			if(remaining_data > 0){
				data_high = (data_high<<8) | bytes[width * height - remaining_data];
				if(remaining_data > 4){
					data_high = (data_low<<8) | bytes[width * height - remaining_data + 4];
40005318:	11400103 	ldbu	r5,4(r2)
					remaining_data--;
				}
				remaining_data--;
4000531c:	80bfffc4 	addi	r2,r16,-1
	int remaining_data = width * height;
	while(remaining_data > 0){
		uint32_t data_low  = 0;
		uint32_t data_high = 0;
		for(int i = 0; i < 4; i++){
			if(remaining_data > 0){
40005320:	103fd91e 	bne	r2,zero,40005288 <__alt_data_end+0xc0005288>
					remaining_data--;
				}
				remaining_data--;
			}
		}
		send_flit(addr, data_high, data_low, 0);
40005324:	000f883a 	mov	r7,zero
40005328:	000d883a 	mov	r6,zero
4000532c:	9009883a 	mov	r4,r18
40005330:	0003f100 	call	40003f10 <send_flit>
	}

	//send coords
	send_flit(addr, x, y, 1);
40005334:	01c00044 	movi	r7,1
40005338:	a00d883a 	mov	r6,r20
4000533c:	980b883a 	mov	r5,r19
40005340:	9009883a 	mov	r4,r18

}
40005344:	dfc08b17 	ldw	ra,556(sp)
40005348:	ddc08a17 	ldw	r23,552(sp)
4000534c:	dd808917 	ldw	r22,548(sp)
40005350:	dd408817 	ldw	r21,544(sp)
40005354:	dd008717 	ldw	r20,540(sp)
40005358:	dcc08617 	ldw	r19,536(sp)
4000535c:	dc808517 	ldw	r18,532(sp)
40005360:	dc408417 	ldw	r17,528(sp)
40005364:	dc008317 	ldw	r16,524(sp)
40005368:	dec08c04 	addi	sp,sp,560
		}
		send_flit(addr, data_high, data_low, 0);
	}

	//send coords
	send_flit(addr, x, y, 1);
4000536c:	0003f101 	jmpi	40003f10 <send_flit>
		uint32_t data_high = 0;
		for(int i = 0; i < 4; i++){
			if(remaining_data > 0){
				data_high = (data_high<<8) | bytes[width * height - remaining_data];
				if(remaining_data > 4){
					data_high = (data_low<<8) | bytes[width * height - remaining_data + 4];
40005370:	11400103 	ldbu	r5,4(r2)
					remaining_data--;
40005374:	1c3fff84 	addi	r16,r3,-2
40005378:	003fdc06 	br	400052ec <__alt_data_end+0xc00052ec>
		uint32_t data_high = 0;
		for(int i = 0; i < 4; i++){
			if(remaining_data > 0){
				data_high = (data_high<<8) | bytes[width * height - remaining_data];
				if(remaining_data > 4){
					data_high = (data_low<<8) | bytes[width * height - remaining_data + 4];
4000537c:	21400103 	ldbu	r5,4(r4)
					remaining_data--;
40005380:	10ffff84 	addi	r3,r2,-2
40005384:	003fd006 	br	400052c8 <__alt_data_end+0xc00052c8>
		uint32_t data_high = 0;
		for(int i = 0; i < 4; i++){
			if(remaining_data > 0){
				data_high = (data_high<<8) | bytes[width * height - remaining_data];
				if(remaining_data > 4){
					data_high = (data_low<<8) | bytes[width * height - remaining_data + 4];
40005388:	19400103 	ldbu	r5,4(r3)
					remaining_data--;
4000538c:	80bfff84 	addi	r2,r16,-2
40005390:	003fc406 	br	400052a4 <__alt_data_end+0xc00052a4>
    packet rx_packet;
    rx_packet.num_flits = 0;
    while(rx_packet.num_flits == 0){
		rx_packet = get_packet_by_id(0xFE);
		if(rx_packet.num_flits == 0){
			buffers_loop(1);
40005394:	01000044 	movi	r4,1
40005398:	00040a00 	call	400040a0 <buffers_loop>
4000539c:	003f9906 	br	40005204 <__alt_data_end+0xc0005204>

400053a0 <send_4x4_direct_write>:
	//send coords
	send_flit(addr, x, y, 1);

}

void send_4x4_direct_write(int addr, int x_addr, int y_addr, uint8_t *row0, uint8_t *row1, uint8_t *row2, uint8_t *row3, int LCbCr_Select){
400053a0:	deff7304 	addi	sp,sp,-564
400053a4:	d8c08f17 	ldw	r3,572(sp)
400053a8:	d8808e17 	ldw	r2,568(sp)
400053ac:	df008b15 	stw	fp,556(sp)
400053b0:	dcc08615 	stw	r19,536(sp)
400053b4:	dc408415 	stw	r17,528(sp)
400053b8:	dfc08c15 	stw	ra,560(sp)
400053bc:	ddc08a15 	stw	r23,552(sp)
400053c0:	dd808915 	stw	r22,548(sp)
400053c4:	dd408815 	stw	r21,544(sp)
400053c8:	dd008715 	stw	r20,540(sp)
400053cc:	dc808515 	stw	r18,532(sp)
400053d0:	dc008315 	stw	r16,524(sp)
400053d4:	db008d17 	ldw	r12,564(sp)
	//	tx_header_data   <= x_pass_thru_q & "00000" &sign_mask& "000" & LCbCr_pass_thru_q & y_pass_thru_q &do_iqit_cmd&identifier_q;
	//	tx_row_4_3_data  <= result_samples((16*sample_width)-1 downto (8*sample_width));
	//	tx_row_2_1_data  <= result_samples((8*sample_width)-1 downto 0) ;
	uint64_t header = (uint64_t)x_addr;
	header = (header << 53) | ((LCbCr_Select&0x03)<<27) | y_addr << 16 | 4<<8 | 0xFF;
    uint64_t data_0 = (((uint64_t) row3[3])<<56) |
400053d8:	1d4000c3 	ldbu	r21,3(r3)
400053dc:	1ac00083 	ldbu	r11,2(r3)
400053e0:	15800043 	ldbu	r22,1(r2)
400053e4:	14800083 	ldbu	r18,2(r2)
400053e8:	1a800043 	ldbu	r10,1(r3)
                      (((uint64_t) row3[0])<<32) |
                      (((uint64_t) row2[3])<<24) |
                      (((uint64_t) row2[2])<<16) |
                      (((uint64_t) row2[1])<<8 ) |
                       ((uint64_t) row2[0])        ;
	uint64_t data_1 = (((uint64_t) row1[3])<<56) |
400053ec:	624000c3 	ldbu	r9,3(r12)
400053f0:	62000083 	ldbu	r8,2(r12)
400053f4:	3c000043 	ldbu	r16,1(r7)
400053f8:	17c000c3 	ldbu	ra,3(r2)
400053fc:	65000043 	ldbu	r20,1(r12)
40005400:	3bc00083 	ldbu	r15,2(r7)
40005404:	10800003 	ldbu	r2,0(r2)
void send_4x4_direct_write(int addr, int x_addr, int y_addr, uint8_t *row0, uint8_t *row1, uint8_t *row2, uint8_t *row3, int LCbCr_Select){
	//	tx_header_data   <= x_pass_thru_q & "00000" &sign_mask& "000" & LCbCr_pass_thru_q & y_pass_thru_q &do_iqit_cmd&identifier_q;
	//	tx_row_4_3_data  <= result_samples((16*sample_width)-1 downto (8*sample_width));
	//	tx_row_2_1_data  <= result_samples((8*sample_width)-1 downto 0) ;
	uint64_t header = (uint64_t)x_addr;
	header = (header << 53) | ((LCbCr_Select&0x03)<<27) | y_addr << 16 | 4<<8 | 0xFF;
40005408:	300c943a 	slli	r6,r6,16
    uint64_t data_0 = (((uint64_t) row3[3])<<56) |
4000540c:	a82a963a 	slli	r21,r21,24
40005410:	b02c923a 	slli	r22,r22,8
40005414:	dcc09017 	ldw	r19,576(sp)
40005418:	5816943a 	slli	r11,r11,16
4000541c:	3b8000c3 	ldbu	r14,3(r7)
40005420:	5014923a 	slli	r10,r10,8
40005424:	9024943a 	slli	r18,r18,16
40005428:	f83e963a 	slli	ra,ra,24
4000542c:	1dc00003 	ldbu	r23,0(r3)
                      (((uint64_t) row3[0])<<32) |
                      (((uint64_t) row2[3])<<24) |
                      (((uint64_t) row2[2])<<16) |
                      (((uint64_t) row2[1])<<8 ) |
                       ((uint64_t) row2[0])        ;
	uint64_t data_1 = (((uint64_t) row1[3])<<56) |
40005430:	4838963a 	slli	fp,r9,24
40005434:	8020923a 	slli	r16,r16,8
40005438:	4012943a 	slli	r9,r8,16
4000543c:	3a000003 	ldbu	r8,0(r7)
void send_4x4_direct_write(int addr, int x_addr, int y_addr, uint8_t *row0, uint8_t *row1, uint8_t *row2, uint8_t *row3, int LCbCr_Select){
	//	tx_header_data   <= x_pass_thru_q & "00000" &sign_mask& "000" & LCbCr_pass_thru_q & y_pass_thru_q &do_iqit_cmd&identifier_q;
	//	tx_row_4_3_data  <= result_samples((16*sample_width)-1 downto (8*sample_width));
	//	tx_row_2_1_data  <= result_samples((8*sample_width)-1 downto 0) ;
	uint64_t header = (uint64_t)x_addr;
	header = (header << 53) | ((LCbCr_Select&0x03)<<27) | y_addr << 16 | 4<<8 | 0xFF;
40005440:	33413fd4 	ori	r13,r6,1279
40005444:	781e943a 	slli	r15,r15,16
    uint64_t data_0 = (((uint64_t) row3[3])<<56) |
40005448:	aad6b03a 	or	r11,r21,r11
4000544c:	b08cb03a 	or	r6,r22,r2
                      (((uint64_t) row3[0])<<32) |
                      (((uint64_t) row2[3])<<24) |
                      (((uint64_t) row2[2])<<16) |
                      (((uint64_t) row2[1])<<8 ) |
                       ((uint64_t) row2[0])        ;
	uint64_t data_1 = (((uint64_t) row1[3])<<56) |
40005450:	a00e923a 	slli	r7,r20,8
40005454:	9cc000cc 	andi	r19,r19,3
40005458:	701c963a 	slli	r14,r14,24
4000545c:	65000003 	ldbu	r20,0(r12)
40005460:	980696fa 	slli	r3,r19,27
40005464:	2804957a 	slli	r2,r5,21
void send_4x4_direct_write(int addr, int x_addr, int y_addr, uint8_t *row0, uint8_t *row1, uint8_t *row2, uint8_t *row3, int LCbCr_Select){
	//	tx_header_data   <= x_pass_thru_q & "00000" &sign_mask& "000" & LCbCr_pass_thru_q & y_pass_thru_q &do_iqit_cmd&identifier_q;
	//	tx_row_4_3_data  <= result_samples((16*sample_width)-1 downto (8*sample_width));
	//	tx_row_2_1_data  <= result_samples((8*sample_width)-1 downto 0) ;
	uint64_t header = (uint64_t)x_addr;
	header = (header << 53) | ((LCbCr_Select&0x03)<<27) | y_addr << 16 | 4<<8 | 0xFF;
40005468:	682dd7fa 	srai	r22,r13,31
    uint64_t data_0 = (((uint64_t) row3[3])<<56) |
4000546c:	5aaab03a 	or	r21,r11,r10
40005470:	918cb03a 	or	r6,r18,r6
40005474:	f9a4b03a 	or	r18,ra,r6
                      (((uint64_t) row3[0])<<32) |
                      (((uint64_t) row2[3])<<24) |
                      (((uint64_t) row2[2])<<16) |
                      (((uint64_t) row2[1])<<8 ) |
                       ((uint64_t) row2[0])        ;
	uint64_t data_1 = (((uint64_t) row1[3])<<56) |
40005478:	e252b03a 	or	r9,fp,r9
4000547c:	8210b03a 	or	r8,r16,r8
	//	tx_header_data   <= x_pass_thru_q & "00000" &sign_mask& "000" & LCbCr_pass_thru_q & y_pass_thru_q &do_iqit_cmd&identifier_q;
	//	tx_row_4_3_data  <= result_samples((16*sample_width)-1 downto (8*sample_width));
	//	tx_row_2_1_data  <= result_samples((8*sample_width)-1 downto 0) ;
	uint64_t header = (uint64_t)x_addr;
	header = (header << 53) | ((LCbCr_Select&0x03)<<27) | y_addr << 16 | 4<<8 | 0xFF;
    uint64_t data_0 = (((uint64_t) row3[3])<<56) |
40005480:	adeab03a 	or	r21,r21,r23
	//send coords
	send_flit(addr, x, y, 1);

}

void send_4x4_direct_write(int addr, int x_addr, int y_addr, uint8_t *row0, uint8_t *row1, uint8_t *row2, uint8_t *row3, int LCbCr_Select){
40005484:	2021883a 	mov	r16,r4
                      (((uint64_t) row0[3])<<24) |
                      (((uint64_t) row0[2])<<16) |
                      (((uint64_t) row0[1])<<8 ) |
                       ((uint64_t) row0[0])        ;

	printf("%016llx\n", data_0);
40005488:	011000b4 	movhi	r4,16386
4000548c:	7a10b03a 	or	r8,r15,r8
                      (((uint64_t) row3[0])<<32) |
                      (((uint64_t) row2[3])<<24) |
                      (((uint64_t) row2[2])<<16) |
                      (((uint64_t) row2[1])<<8 ) |
                       ((uint64_t) row2[0])        ;
	uint64_t data_1 = (((uint64_t) row1[3])<<56) |
40005490:	49ceb03a 	or	r7,r9,r7
                      (((uint64_t) row0[3])<<24) |
                      (((uint64_t) row0[2])<<16) |
                      (((uint64_t) row0[1])<<8 ) |
                       ((uint64_t) row0[0])        ;

	printf("%016llx\n", data_0);
40005494:	21386a04 	addi	r4,r4,-7768
40005498:	900b883a 	mov	r5,r18
4000549c:	a80d883a 	mov	r6,r21
400054a0:	7222b03a 	or	r17,r14,r8
                      (((uint64_t) row3[0])<<32) |
                      (((uint64_t) row2[3])<<24) |
                      (((uint64_t) row2[2])<<16) |
                      (((uint64_t) row2[1])<<8 ) |
                       ((uint64_t) row2[0])        ;
	uint64_t data_1 = (((uint64_t) row1[3])<<56) |
400054a4:	3d28b03a 	or	r20,r7,r20
void send_4x4_direct_write(int addr, int x_addr, int y_addr, uint8_t *row0, uint8_t *row1, uint8_t *row2, uint8_t *row3, int LCbCr_Select){
	//	tx_header_data   <= x_pass_thru_q & "00000" &sign_mask& "000" & LCbCr_pass_thru_q & y_pass_thru_q &do_iqit_cmd&identifier_q;
	//	tx_row_4_3_data  <= result_samples((16*sample_width)-1 downto (8*sample_width));
	//	tx_row_2_1_data  <= result_samples((8*sample_width)-1 downto 0) ;
	uint64_t header = (uint64_t)x_addr;
	header = (header << 53) | ((LCbCr_Select&0x03)<<27) | y_addr << 16 | 4<<8 | 0xFF;
400054a8:	68e6b03a 	or	r19,r13,r3
400054ac:	b0acb03a 	or	r22,r22,r2
                      (((uint64_t) row0[3])<<24) |
                      (((uint64_t) row0[2])<<16) |
                      (((uint64_t) row0[1])<<8 ) |
                       ((uint64_t) row0[0])        ;

	printf("%016llx\n", data_0);
400054b0:	000bc900 	call	4000bc90 <printf>
	printf("%016llx\n", data_1);
400054b4:	011000b4 	movhi	r4,16386
400054b8:	21386a04 	addi	r4,r4,-7768
400054bc:	880b883a 	mov	r5,r17
400054c0:	a00d883a 	mov	r6,r20
400054c4:	000bc900 	call	4000bc90 <printf>
	printf("++++++++++++\n");
400054c8:	011000b4 	movhi	r4,16386
400054cc:	2138a804 	addi	r4,r4,-7520
400054d0:	000bdac0 	call	4000bdac <puts>


	packet rx_packet;
	rx_packet.num_flits = 0;
	while(rx_packet.num_flits == 0){
		rx_packet = get_packet_by_id(0xFE);
400054d4:	01403f84 	movi	r5,254
400054d8:	d809883a 	mov	r4,sp
400054dc:	00043f00 	call	400043f0 <get_packet_by_id>
		if(rx_packet.num_flits == 0){
400054e0:	d8808017 	ldw	r2,512(sp)
400054e4:	10001a26 	beq	r2,zero,40005550 <send_4x4_direct_write+0x1b0>
			buffers_loop(1);
		}
	}

	send_flit(addr, (header>>32)&0xFFFFFFFF, header&0xFFFFFFFF, 0);
400054e8:	980d883a 	mov	r6,r19
400054ec:	b00b883a 	mov	r5,r22
400054f0:	8009883a 	mov	r4,r16
400054f4:	000f883a 	mov	r7,zero
400054f8:	0003f100 	call	40003f10 <send_flit>
	send_flit(addr, (data_0>>32)&0xFFFFFFFF, data_0&0xFFFFFFFF, 0);
400054fc:	900d883a 	mov	r6,r18
40005500:	a80b883a 	mov	r5,r21
40005504:	8009883a 	mov	r4,r16
40005508:	000f883a 	mov	r7,zero
4000550c:	0003f100 	call	40003f10 <send_flit>
	send_flit(addr, (data_1>>32)&0xFFFFFFFF, data_1&0xFFFFFFFF, 1);
40005510:	01c00044 	movi	r7,1
40005514:	880d883a 	mov	r6,r17
40005518:	a00b883a 	mov	r5,r20
4000551c:	8009883a 	mov	r4,r16
}
40005520:	dfc08c17 	ldw	ra,560(sp)
40005524:	df008b17 	ldw	fp,556(sp)
40005528:	ddc08a17 	ldw	r23,552(sp)
4000552c:	dd808917 	ldw	r22,548(sp)
40005530:	dd408817 	ldw	r21,544(sp)
40005534:	dd008717 	ldw	r20,540(sp)
40005538:	dcc08617 	ldw	r19,536(sp)
4000553c:	dc808517 	ldw	r18,532(sp)
40005540:	dc408417 	ldw	r17,528(sp)
40005544:	dc008317 	ldw	r16,524(sp)
40005548:	dec08d04 	addi	sp,sp,564
		}
	}

	send_flit(addr, (header>>32)&0xFFFFFFFF, header&0xFFFFFFFF, 0);
	send_flit(addr, (data_0>>32)&0xFFFFFFFF, data_0&0xFFFFFFFF, 0);
	send_flit(addr, (data_1>>32)&0xFFFFFFFF, data_1&0xFFFFFFFF, 1);
4000554c:	0003f101 	jmpi	40003f10 <send_flit>
	packet rx_packet;
	rx_packet.num_flits = 0;
	while(rx_packet.num_flits == 0){
		rx_packet = get_packet_by_id(0xFE);
		if(rx_packet.num_flits == 0){
			buffers_loop(1);
40005550:	01000044 	movi	r4,1
40005554:	00040a00 	call	400040a0 <buffers_loop>
40005558:	003fde06 	br	400054d4 <__alt_data_end+0xc00054d4>

4000555c <perf_enable>:
perf_entry *perf_data=NULL;
perf_entry *perf_current=NULL;
INT64 perf_last_clock;


void perf_enable() {
4000555c:	deffff04 	addi	sp,sp,-4
  perf_data=calloc(HASH_SIZE,sizeof(perf_entry));
40005560:	01400304 	movi	r5,12
40005564:	01010004 	movi	r4,1024
perf_entry *perf_data=NULL;
perf_entry *perf_current=NULL;
INT64 perf_last_clock;


void perf_enable() {
40005568:	dfc00015 	stw	ra,0(sp)
  perf_data=calloc(HASH_SIZE,sizeof(perf_entry));
4000556c:	00096440 	call	40009644 <calloc>
40005570:	d0af9b15 	stw	r2,-16788(gp)
  perf_last_clock=0L;
40005574:	d02f9c15 	stw	zero,-16784(gp)
40005578:	d02f9d15 	stw	zero,-16780(gp)
}
4000557c:	dfc00017 	ldw	ra,0(sp)
40005580:	dec00104 	addi	sp,sp,4
40005584:	f800283a 	ret

40005588 <perf_enter>:

void perf_enter(char *section) {
  INT64 now; 
  if(!perf_data) return;
40005588:	d26f9b17 	ldw	r9,-16788(gp)
4000558c:	48001426 	beq	r9,zero,400055e0 <perf_enter+0x58>
    "=d" (((unsigned int *)(&now))[1]));
#else
  now=0;
#endif

  if(perf_current) perf_current->clocks+=now-perf_last_clock;
40005590:	d0ef9a17 	ldw	r3,-16792(gp)
40005594:	18000a26 	beq	r3,zero,400055c0 <perf_enter+0x38>
40005598:	19400117 	ldw	r5,4(r3)
4000559c:	d1ef9c17 	ldw	r7,-16784(gp)
400055a0:	19800217 	ldw	r6,8(r3)
400055a4:	29cfc83a 	sub	r7,r5,r7
400055a8:	29d1803a 	cmpltu	r8,r5,r7
400055ac:	d16f9d17 	ldw	r5,-16780(gp)
400055b0:	19c00115 	stw	r7,4(r3)
400055b4:	314bc83a 	sub	r5,r6,r5
400055b8:	2a0bc83a 	sub	r5,r5,r8
400055bc:	19400215 	stw	r5,8(r3)
  perf_current=&perf_data[(((unsigned int)section)+HASH_OFFSET)&HASH_MOD];
400055c0:	2080bb44 	addi	r2,r4,749
400055c4:	1080ffcc 	andi	r2,r2,1023
400055c8:	10800324 	muli	r2,r2,12
400055cc:	4885883a 	add	r2,r9,r2
400055d0:	d0af9a15 	stw	r2,-16792(gp)
  perf_current->name=section;
400055d4:	11000015 	stw	r4,0(r2)
  perf_last_clock=now;
400055d8:	d02f9c15 	stw	zero,-16784(gp)
400055dc:	d02f9d15 	stw	zero,-16780(gp)
400055e0:	f800283a 	ret

400055e4 <perf_summarize>:
}

void perf_summarize() {
400055e4:	defff304 	addi	sp,sp,-52
400055e8:	dc800515 	stw	r18,20(sp)
  INT64 total;
  int i;
  perf_entry *e;
  if(!perf_data) return;
400055ec:	d4af9b17 	ldw	r18,-16788(gp)
  perf_current=&perf_data[(((unsigned int)section)+HASH_OFFSET)&HASH_MOD];
  perf_current->name=section;
  perf_last_clock=now;
}

void perf_summarize() {
400055f0:	dfc00c15 	stw	ra,48(sp)
400055f4:	df000b15 	stw	fp,44(sp)
400055f8:	ddc00a15 	stw	r23,40(sp)
400055fc:	dd800915 	stw	r22,36(sp)
40005600:	dd400815 	stw	r21,32(sp)
40005604:	dd000715 	stw	r20,28(sp)
40005608:	dcc00615 	stw	r19,24(sp)
4000560c:	dc400415 	stw	r17,16(sp)
40005610:	dc000315 	stw	r16,12(sp)
  INT64 total;
  int i;
  perf_entry *e;
  if(!perf_data) return;
40005614:	90004426 	beq	r18,zero,40005728 <perf_summarize+0x144>
    "=d" (((unsigned int *)(&now))[1]));
#else
  now=0;
#endif

  if(perf_current) perf_current->clocks+=now-perf_last_clock;
40005618:	d0af9a17 	ldw	r2,-16792(gp)
4000561c:	10000a26 	beq	r2,zero,40005648 <perf_summarize+0x64>
40005620:	10c00117 	ldw	r3,4(r2)
40005624:	d16f9c17 	ldw	r5,-16784(gp)
40005628:	11000217 	ldw	r4,8(r2)
4000562c:	194bc83a 	sub	r5,r3,r5
40005630:	194d803a 	cmpltu	r6,r3,r5
40005634:	d0ef9d17 	ldw	r3,-16780(gp)
40005638:	11400115 	stw	r5,4(r2)
4000563c:	20c7c83a 	sub	r3,r4,r3
40005640:	1987c83a 	sub	r3,r3,r6
40005644:	10c00215 	stw	r3,8(r2)
  perf_current=&perf_data[(((unsigned int)section)+HASH_OFFSET)&HASH_MOD];
40005648:	9088c704 	addi	r2,r18,8988
4000564c:	94c00104 	addi	r19,r18,4
40005650:	d0af9a15 	stw	r2,-16792(gp)
  perf_current->name=section;
40005654:	9008c715 	stw	zero,8988(r18)
  perf_last_clock=now;
40005658:	d02f9c15 	stw	zero,-16784(gp)
4000565c:	d02f9d15 	stw	zero,-16780(gp)
40005660:	918c0104 	addi	r6,r18,12292
40005664:	9807883a 	mov	r3,r19
  int i;
  perf_entry *e;
  if(!perf_data) return;

  perf_enter(NULL);
  for(e=perf_data, i=HASH_SIZE, total=0; i; --i)
40005668:	0005883a 	mov	r2,zero
4000566c:	000b883a 	mov	r5,zero
    total+=(e++)->clocks;
40005670:	1c400017 	ldw	r17,0(r3)
40005674:	19000117 	ldw	r4,4(r3)
40005678:	18c00304 	addi	r3,r3,12
4000567c:	1463883a 	add	r17,r2,r17
40005680:	8885803a 	cmpltu	r2,r17,r2
40005684:	2921883a 	add	r16,r5,r4
40005688:	1421883a 	add	r16,r2,r16
4000568c:	800b883a 	mov	r5,r16
40005690:	8805883a 	mov	r2,r17
  int i;
  perf_entry *e;
  if(!perf_data) return;

  perf_enter(NULL);
  for(e=perf_data, i=HASH_SIZE, total=0; i; --i)
40005694:	19bff61e 	bne	r3,r6,40005670 <__alt_data_end+0xc0005670>
40005698:	908c0004 	addi	r2,r18,12288
4000569c:	d8800215 	stw	r2,8(sp)
    total+=(e++)->clocks;
  for(e=perf_data, i=HASH_SIZE; i; --i, ++e)
    if(e->name)
400056a0:	95000017 	ldw	r20,0(r18)
  if(!perf_data) return;

  perf_enter(NULL);
  for(e=perf_data, i=HASH_SIZE, total=0; i; --i)
    total+=(e++)->clocks;
  for(e=perf_data, i=HASH_SIZE; i; --i, ++e)
400056a4:	94800304 	addi	r18,r18,12
    if(e->name)
400056a8:	a0001c26 	beq	r20,zero,4000571c <perf_summarize+0x138>
      printf("%20.0f |%6.2f%% | %s\n",(double)e->clocks,(100.0*e->clocks/total),e->name);
400056ac:	99000017 	ldw	r4,0(r19)
400056b0:	99400117 	ldw	r5,4(r19)
400056b4:	000790c0 	call	4000790c <__floatundidf>
400056b8:	000d883a 	mov	r6,zero
400056bc:	01d01674 	movhi	r7,16473
400056c0:	1009883a 	mov	r4,r2
400056c4:	180b883a 	mov	r5,r3
400056c8:	102d883a 	mov	r22,r2
400056cc:	182b883a 	mov	r21,r3
400056d0:	0008cc40 	call	40008cc4 <__muldf3>
400056d4:	8809883a 	mov	r4,r17
400056d8:	800b883a 	mov	r5,r16
400056dc:	1039883a 	mov	fp,r2
400056e0:	182f883a 	mov	r23,r3
400056e4:	000790c0 	call	4000790c <__floatundidf>
400056e8:	100d883a 	mov	r6,r2
400056ec:	180f883a 	mov	r7,r3
400056f0:	e009883a 	mov	r4,fp
400056f4:	b80b883a 	mov	r5,r23
400056f8:	00083dc0 	call	400083dc <__divdf3>
400056fc:	011000b4 	movhi	r4,16386
40005700:	2138ac04 	addi	r4,r4,-7504
40005704:	dd000115 	stw	r20,4(sp)
40005708:	d8c00015 	stw	r3,0(sp)
4000570c:	100f883a 	mov	r7,r2
40005710:	b00b883a 	mov	r5,r22
40005714:	a80d883a 	mov	r6,r21
40005718:	000bc900 	call	4000bc90 <printf>
  if(!perf_data) return;

  perf_enter(NULL);
  for(e=perf_data, i=HASH_SIZE, total=0; i; --i)
    total+=(e++)->clocks;
  for(e=perf_data, i=HASH_SIZE; i; --i, ++e)
4000571c:	d8800217 	ldw	r2,8(sp)
40005720:	9cc00304 	addi	r19,r19,12
40005724:	14bfde1e 	bne	r2,r18,400056a0 <__alt_data_end+0xc00056a0>
    if(e->name)
      printf("%20.0f |%6.2f%% | %s\n",(double)e->clocks,(100.0*e->clocks/total),e->name);
}
40005728:	dfc00c17 	ldw	ra,48(sp)
4000572c:	df000b17 	ldw	fp,44(sp)
40005730:	ddc00a17 	ldw	r23,40(sp)
40005734:	dd800917 	ldw	r22,36(sp)
40005738:	dd400817 	ldw	r21,32(sp)
4000573c:	dd000717 	ldw	r20,28(sp)
40005740:	dcc00617 	ldw	r19,24(sp)
40005744:	dc800517 	ldw	r18,20(sp)
40005748:	dc400417 	ldw	r17,16(sp)
4000574c:	dc000317 	ldw	r16,12(sp)
40005750:	dec00d04 	addi	sp,sp,52
40005754:	f800283a 	ret

40005758 <residual_block>:
code_table *TotalZerosCodeTable_4x4[15];
code_table *TotalZerosCodeTable_ChromaDC[3];
code_table *RunBeforeCodeTable[6];


int residual_block(int *coeffLevel, int maxNumCoeff, int nC) {
40005758:	deffd404 	addi	sp,sp,-176
4000575c:	dd402715 	stw	r21,156(sp)
40005760:	dd002615 	stw	r20,152(sp)
40005764:	dc802415 	stw	r18,144(sp)
40005768:	dfc02b15 	stw	ra,172(sp)
4000576c:	df002a15 	stw	fp,168(sp)
40005770:	ddc02915 	stw	r23,164(sp)
40005774:	dd802815 	stw	r22,160(sp)
40005778:	dcc02515 	stw	r19,148(sp)
4000577c:	dc402315 	stw	r17,140(sp)
40005780:	dc002215 	stw	r16,136(sp)
  int coeff_token, TotalCoeff, TrailingOnes;
  int i, suffixLength, zerosLeft, coeffNum;
  int level[16],run[16];

//printf("nC=%d | ",nC);
  switch(nC) {
40005784:	30800044 	addi	r2,r6,1
40005788:	00c00204 	movi	r3,8
code_table *TotalZerosCodeTable_4x4[15];
code_table *TotalZerosCodeTable_ChromaDC[3];
code_table *RunBeforeCodeTable[6];


int residual_block(int *coeffLevel, int maxNumCoeff, int nC) {
4000578c:	3029883a 	mov	r20,r6
40005790:	2025883a 	mov	r18,r4
40005794:	282b883a 	mov	r21,r5
  int coeff_token, TotalCoeff, TrailingOnes;
  int i, suffixLength, zerosLeft, coeffNum;
  int level[16],run[16];

//printf("nC=%d | ",nC);
  switch(nC) {
40005798:	18814f36 	bltu	r3,r2,40005cd8 <residual_block+0x580>
4000579c:	100490ba 	slli	r2,r2,2
400057a0:	00d00034 	movhi	r3,16384
400057a4:	18d5ed04 	addi	r3,r3,22452
400057a8:	10c5883a 	add	r2,r2,r3
400057ac:	10800017 	ldw	r2,0(r2)
400057b0:	1000683a 	jmp	r2
400057b4:	40005c6c 	andhi	zero,r8,369
400057b8:	40005c2c 	andhi	zero,r8,368
400057bc:	40005c2c 	andhi	zero,r8,368
400057c0:	400057d8 	cmpnei	zero,r8,351
400057c4:	400057d8 	cmpnei	zero,r8,351
400057c8:	40005c58 	cmpnei	zero,r8,369
400057cc:	40005c58 	cmpnei	zero,r8,369
400057d0:	40005c58 	cmpnei	zero,r8,369
400057d4:	40005c58 	cmpnei	zero,r8,369
    case -1:
      coeff_token=get_code(CoeffTokenCodeTable_ChromaDC);  break;
    case 0: case 1:
      coeff_token=get_code(CoeffTokenCodeTable[0]);        break;
    case 2: case 3:
      coeff_token=get_code(CoeffTokenCodeTable[1]);        break;
400057d8:	00900134 	movhi	r2,16388
400057dc:	10949604 	addi	r2,r2,21080
400057e0:	11000117 	ldw	r4,4(r2)
400057e4:	0000b200 	call	40000b20 <get_code>
    case 4: case 5: case 6: case 7:
      coeff_token=get_code(CoeffTokenCodeTable[2]);        break;
    default:
      coeff_token=get_code(CoeffTokenCodeTable[3]);
  }
  TotalCoeff=coeff_token>>2;
400057e8:	1021d0ba 	srai	r16,r2,2
  TrailingOnes=coeff_token&3;
400057ec:	144000cc 	andi	r17,r2,3
  if(TotalCoeff>10 && TrailingOnes<3) suffixLength=1; else suffixLength=0;
400057f0:	00800284 	movi	r2,10
400057f4:	1401150e 	bge	r2,r16,40005c4c <residual_block+0x4f4>
400057f8:	008000c4 	movi	r2,3
400057fc:	88812e26 	beq	r17,r2,40005cb8 <residual_block+0x560>
40005800:	05800044 	movi	r22,1
40005804:	ddc01004 	addi	r23,sp,64
40005808:	0039883a 	mov	fp,zero
//printf("coeff_token=%d TotalCoeff=%d TrailingOnes=%d suffixLength=%d\n",coeff_token,TotalCoeff,TrailingOnes,suffixLength);
  if(!TotalCoeff) return 0;

  for(i=0; i<TotalCoeff; ++i)
    if(i<TrailingOnes)
      level[i]=1-2*input_get_one_bit();
4000580c:	04c00044 	movi	r19,1
40005810:	0009883a 	mov	r4,zero
  if(TotalCoeff>10 && TrailingOnes<3) suffixLength=1; else suffixLength=0;
//printf("coeff_token=%d TotalCoeff=%d TrailingOnes=%d suffixLength=%d\n",coeff_token,TotalCoeff,TrailingOnes,suffixLength);
  if(!TotalCoeff) return 0;

  for(i=0; i<TotalCoeff; ++i)
    if(i<TrailingOnes)
40005814:	e441360e 	bge	fp,r17,40005cf0 <residual_block+0x598>
      level[i]=1-2*input_get_one_bit();
40005818:	0001a7c0 	call	40001a7c <input_get_one_bit>
4000581c:	1085883a 	add	r2,r2,r2
40005820:	9885c83a 	sub	r2,r19,r2
40005824:	b8800015 	stw	r2,0(r23)
  TrailingOnes=coeff_token&3;
  if(TotalCoeff>10 && TrailingOnes<3) suffixLength=1; else suffixLength=0;
//printf("coeff_token=%d TotalCoeff=%d TrailingOnes=%d suffixLength=%d\n",coeff_token,TotalCoeff,TrailingOnes,suffixLength);
  if(!TotalCoeff) return 0;

  for(i=0; i<TotalCoeff; ++i)
40005828:	e7000044 	addi	fp,fp,1
4000582c:	bdc00104 	addi	r23,r23,4
40005830:	873ff71e 	bne	r16,fp,40005810 <__alt_data_end+0xc0005810>
      if(abs(level[i])>(3<<(suffixLength-1)) && suffixLength<6)
        ++suffixLength;
    }
//printf("level[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",level[i]); printf("\n");

  if(TotalCoeff<maxNumCoeff) {
40005834:	8541230e 	bge	r16,r21,40005cc4 <residual_block+0x56c>
    if(nC<0) zerosLeft=get_code(TotalZerosCodeTable_ChromaDC[TotalCoeff-1]);
40005838:	a0014816 	blt	r20,zero,40005d5c <residual_block+0x604>
        else zerosLeft=get_code(TotalZerosCodeTable_4x4[TotalCoeff-1]);
4000583c:	853fffc4 	addi	r20,r16,-1
40005840:	a507883a 	add	r3,r20,r20
40005844:	d8c02015 	stw	r3,128(sp)
40005848:	18c5883a 	add	r2,r3,r3
4000584c:	00d00134 	movhi	r3,16388
40005850:	18d49a04 	addi	r3,r3,21096
40005854:	1885883a 	add	r2,r3,r2
40005858:	11000017 	ldw	r4,0(r2)
4000585c:	0000b200 	call	40000b20 <get_code>
40005860:	102d883a 	mov	r22,r2
  } else
    zerosLeft=0;
//printf("TotalZeros=%d\n",zerosLeft);
  for(i=0; i<TotalCoeff-1; ++i) {
40005864:	0501480e 	bge	zero,r20,40005d88 <residual_block+0x630>
40005868:	d827883a 	mov	r19,sp
4000586c:	0023883a 	mov	r17,zero
    if(zerosLeft>6) {
40005870:	05400184 	movi	r21,6
      int run_before=7-input_get_bits(3);
40005874:	05c001c4 	movi	r23,7
        else zerosLeft=get_code(TotalZerosCodeTable_4x4[TotalCoeff-1]);
  } else
    zerosLeft=0;
//printf("TotalZeros=%d\n",zerosLeft);
  for(i=0; i<TotalCoeff-1; ++i) {
    if(zerosLeft>6) {
40005878:	ad810216 	blt	r21,r22,40005c84 <residual_block+0x52c>
      int run_before=7-input_get_bits(3);
      if(run_before==7)
        while(!input_get_one_bit()) ++run_before;
      run[i]=run_before;
    } else if(zerosLeft>0)
4000587c:	0580fe0e 	bge	zero,r22,40005c78 <residual_block+0x520>
      run[i]=get_code(RunBeforeCodeTable[zerosLeft-1]);
40005880:	b0bfffc4 	addi	r2,r22,-1
40005884:	1085883a 	add	r2,r2,r2
40005888:	01100134 	movhi	r4,16388
4000588c:	21148d04 	addi	r4,r4,21044
40005890:	1085883a 	add	r2,r2,r2
40005894:	2085883a 	add	r2,r4,r2
40005898:	11000017 	ldw	r4,0(r2)
4000589c:	0000b200 	call	40000b20 <get_code>
400058a0:	98800015 	stw	r2,0(r19)
    if(nC<0) zerosLeft=get_code(TotalZerosCodeTable_ChromaDC[TotalCoeff-1]);
        else zerosLeft=get_code(TotalZerosCodeTable_4x4[TotalCoeff-1]);
  } else
    zerosLeft=0;
//printf("TotalZeros=%d\n",zerosLeft);
  for(i=0; i<TotalCoeff-1; ++i) {
400058a4:	8c400044 	addi	r17,r17,1
      run[i]=run_before;
    } else if(zerosLeft>0)
      run[i]=get_code(RunBeforeCodeTable[zerosLeft-1]);
    else
      run[i]=0;
    zerosLeft-=run[i];
400058a8:	b0adc83a 	sub	r22,r22,r2
400058ac:	9cc00104 	addi	r19,r19,4
    if(nC<0) zerosLeft=get_code(TotalZerosCodeTable_ChromaDC[TotalCoeff-1]);
        else zerosLeft=get_code(TotalZerosCodeTable_4x4[TotalCoeff-1]);
  } else
    zerosLeft=0;
//printf("TotalZeros=%d\n",zerosLeft);
  for(i=0; i<TotalCoeff-1; ++i) {
400058b0:	8d3ff11e 	bne	r17,r20,40005878 <__alt_data_end+0xc0005878>
      run[i]=get_code(RunBeforeCodeTable[zerosLeft-1]);
    else
      run[i]=0;
    zerosLeft-=run[i];
  }
  run[TotalCoeff-1]=zerosLeft;
400058b4:	d8c02017 	ldw	r3,128(sp)
400058b8:	18c5883a 	add	r2,r3,r3
400058bc:	d885883a 	add	r2,sp,r2
400058c0:	15800015 	stw	r22,0(r2)
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
    coeffNum+=run[i]+1;
400058c4:	18ed883a 	add	r22,r3,r3
400058c8:	ddad883a 	add	r22,sp,r22
400058cc:	b1000017 	ldw	r4,0(r22)
    coeffLevel[coeffNum]=level[i];
400058d0:	b1401017 	ldw	r5,64(r22)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
400058d4:	a0bfffc4 	addi	r2,r20,-1
    coeffNum+=run[i]+1;
    coeffLevel[coeffNum]=level[i];
400058d8:	2107883a 	add	r3,r4,r4
400058dc:	18c7883a 	add	r3,r3,r3
400058e0:	90c7883a 	add	r3,r18,r3
400058e4:	19400015 	stw	r5,0(r3)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
400058e8:	01bfffc4 	movi	r6,-1
400058ec:	1180f026 	beq	r2,r6,40005cb0 <residual_block+0x558>
    coeffNum+=run[i]+1;
400058f0:	1085883a 	add	r2,r2,r2
400058f4:	1085883a 	add	r2,r2,r2
400058f8:	d88b883a 	add	r5,sp,r2
400058fc:	28c00017 	ldw	r3,0(r5)
    coeffLevel[coeffNum]=level[i];
40005900:	29c01017 	ldw	r7,64(r5)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005904:	a17fff84 	addi	r5,r20,-2
    coeffNum+=run[i]+1;
40005908:	18c00044 	addi	r3,r3,1
4000590c:	1905883a 	add	r2,r3,r4
    coeffLevel[coeffNum]=level[i];
40005910:	1087883a 	add	r3,r2,r2
40005914:	18c7883a 	add	r3,r3,r3
40005918:	90c7883a 	add	r3,r18,r3
4000591c:	19c00015 	stw	r7,0(r3)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005920:	2980e326 	beq	r5,r6,40005cb0 <residual_block+0x558>
    coeffNum+=run[i]+1;
40005924:	294b883a 	add	r5,r5,r5
40005928:	294b883a 	add	r5,r5,r5
4000592c:	d94b883a 	add	r5,sp,r5
40005930:	29000017 	ldw	r4,0(r5)
    coeffLevel[coeffNum]=level[i];
40005934:	29c01017 	ldw	r7,64(r5)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005938:	a17fff44 	addi	r5,r20,-3
    coeffNum+=run[i]+1;
4000593c:	21000044 	addi	r4,r4,1
40005940:	2087883a 	add	r3,r4,r2
    coeffLevel[coeffNum]=level[i];
40005944:	18c5883a 	add	r2,r3,r3
40005948:	1085883a 	add	r2,r2,r2
4000594c:	9085883a 	add	r2,r18,r2
40005950:	11c00015 	stw	r7,0(r2)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005954:	2980d626 	beq	r5,r6,40005cb0 <residual_block+0x558>
    coeffNum+=run[i]+1;
40005958:	294b883a 	add	r5,r5,r5
4000595c:	294b883a 	add	r5,r5,r5
40005960:	d94b883a 	add	r5,sp,r5
40005964:	28800017 	ldw	r2,0(r5)
    coeffLevel[coeffNum]=level[i];
40005968:	29c01017 	ldw	r7,64(r5)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
4000596c:	a17fff04 	addi	r5,r20,-4
    coeffNum+=run[i]+1;
40005970:	10800044 	addi	r2,r2,1
40005974:	10c9883a 	add	r4,r2,r3
    coeffLevel[coeffNum]=level[i];
40005978:	2105883a 	add	r2,r4,r4
4000597c:	1085883a 	add	r2,r2,r2
40005980:	9085883a 	add	r2,r18,r2
40005984:	11c00015 	stw	r7,0(r2)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005988:	2980c926 	beq	r5,r6,40005cb0 <residual_block+0x558>
    coeffNum+=run[i]+1;
4000598c:	294b883a 	add	r5,r5,r5
40005990:	294b883a 	add	r5,r5,r5
40005994:	d94b883a 	add	r5,sp,r5
40005998:	28c00017 	ldw	r3,0(r5)
    coeffLevel[coeffNum]=level[i];
4000599c:	29c01017 	ldw	r7,64(r5)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
400059a0:	a17ffec4 	addi	r5,r20,-5
    coeffNum+=run[i]+1;
400059a4:	18c00044 	addi	r3,r3,1
400059a8:	1905883a 	add	r2,r3,r4
    coeffLevel[coeffNum]=level[i];
400059ac:	1087883a 	add	r3,r2,r2
400059b0:	18c7883a 	add	r3,r3,r3
400059b4:	90c7883a 	add	r3,r18,r3
400059b8:	19c00015 	stw	r7,0(r3)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
400059bc:	2980bc26 	beq	r5,r6,40005cb0 <residual_block+0x558>
    coeffNum+=run[i]+1;
400059c0:	294b883a 	add	r5,r5,r5
400059c4:	294b883a 	add	r5,r5,r5
400059c8:	d94b883a 	add	r5,sp,r5
400059cc:	29000017 	ldw	r4,0(r5)
    coeffLevel[coeffNum]=level[i];
400059d0:	29c01017 	ldw	r7,64(r5)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
400059d4:	a17ffe84 	addi	r5,r20,-6
    coeffNum+=run[i]+1;
400059d8:	21000044 	addi	r4,r4,1
400059dc:	2087883a 	add	r3,r4,r2
    coeffLevel[coeffNum]=level[i];
400059e0:	18c5883a 	add	r2,r3,r3
400059e4:	1085883a 	add	r2,r2,r2
400059e8:	9085883a 	add	r2,r18,r2
400059ec:	11c00015 	stw	r7,0(r2)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
400059f0:	2980af26 	beq	r5,r6,40005cb0 <residual_block+0x558>
    coeffNum+=run[i]+1;
400059f4:	294b883a 	add	r5,r5,r5
400059f8:	294b883a 	add	r5,r5,r5
400059fc:	d94b883a 	add	r5,sp,r5
40005a00:	28800017 	ldw	r2,0(r5)
    coeffLevel[coeffNum]=level[i];
40005a04:	29c01017 	ldw	r7,64(r5)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005a08:	a17ffe44 	addi	r5,r20,-7
    coeffNum+=run[i]+1;
40005a0c:	10800044 	addi	r2,r2,1
40005a10:	10c9883a 	add	r4,r2,r3
    coeffLevel[coeffNum]=level[i];
40005a14:	2105883a 	add	r2,r4,r4
40005a18:	1085883a 	add	r2,r2,r2
40005a1c:	9085883a 	add	r2,r18,r2
40005a20:	11c00015 	stw	r7,0(r2)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005a24:	2980a226 	beq	r5,r6,40005cb0 <residual_block+0x558>
    coeffNum+=run[i]+1;
40005a28:	294b883a 	add	r5,r5,r5
40005a2c:	294b883a 	add	r5,r5,r5
40005a30:	d94b883a 	add	r5,sp,r5
40005a34:	28c00017 	ldw	r3,0(r5)
    coeffLevel[coeffNum]=level[i];
40005a38:	29c01017 	ldw	r7,64(r5)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005a3c:	a17ffe04 	addi	r5,r20,-8
    coeffNum+=run[i]+1;
40005a40:	18c00044 	addi	r3,r3,1
40005a44:	1905883a 	add	r2,r3,r4
    coeffLevel[coeffNum]=level[i];
40005a48:	1087883a 	add	r3,r2,r2
40005a4c:	18c7883a 	add	r3,r3,r3
40005a50:	90c7883a 	add	r3,r18,r3
40005a54:	19c00015 	stw	r7,0(r3)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005a58:	29809526 	beq	r5,r6,40005cb0 <residual_block+0x558>
    coeffNum+=run[i]+1;
40005a5c:	294b883a 	add	r5,r5,r5
40005a60:	294b883a 	add	r5,r5,r5
40005a64:	d94b883a 	add	r5,sp,r5
40005a68:	29000017 	ldw	r4,0(r5)
    coeffLevel[coeffNum]=level[i];
40005a6c:	29c01017 	ldw	r7,64(r5)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005a70:	a17ffdc4 	addi	r5,r20,-9
    coeffNum+=run[i]+1;
40005a74:	21000044 	addi	r4,r4,1
40005a78:	2087883a 	add	r3,r4,r2
    coeffLevel[coeffNum]=level[i];
40005a7c:	18c5883a 	add	r2,r3,r3
40005a80:	1085883a 	add	r2,r2,r2
40005a84:	9085883a 	add	r2,r18,r2
40005a88:	11c00015 	stw	r7,0(r2)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005a8c:	29808826 	beq	r5,r6,40005cb0 <residual_block+0x558>
    coeffNum+=run[i]+1;
40005a90:	294b883a 	add	r5,r5,r5
40005a94:	294b883a 	add	r5,r5,r5
40005a98:	d94b883a 	add	r5,sp,r5
40005a9c:	28800017 	ldw	r2,0(r5)
    coeffLevel[coeffNum]=level[i];
40005aa0:	29c01017 	ldw	r7,64(r5)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005aa4:	a17ffd84 	addi	r5,r20,-10
    coeffNum+=run[i]+1;
40005aa8:	10800044 	addi	r2,r2,1
40005aac:	10c9883a 	add	r4,r2,r3
    coeffLevel[coeffNum]=level[i];
40005ab0:	2105883a 	add	r2,r4,r4
40005ab4:	1085883a 	add	r2,r2,r2
40005ab8:	9085883a 	add	r2,r18,r2
40005abc:	11c00015 	stw	r7,0(r2)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005ac0:	29807b26 	beq	r5,r6,40005cb0 <residual_block+0x558>
    coeffNum+=run[i]+1;
40005ac4:	294b883a 	add	r5,r5,r5
40005ac8:	294b883a 	add	r5,r5,r5
40005acc:	d94b883a 	add	r5,sp,r5
40005ad0:	28c00017 	ldw	r3,0(r5)
    coeffLevel[coeffNum]=level[i];
40005ad4:	29801017 	ldw	r6,64(r5)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005ad8:	a17ffd44 	addi	r5,r20,-11
    coeffNum+=run[i]+1;
40005adc:	18c00044 	addi	r3,r3,1
40005ae0:	1905883a 	add	r2,r3,r4
    coeffLevel[coeffNum]=level[i];
40005ae4:	1087883a 	add	r3,r2,r2
40005ae8:	18c7883a 	add	r3,r3,r3
40005aec:	90c7883a 	add	r3,r18,r3
40005af0:	19800015 	stw	r6,0(r3)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005af4:	01bfffc4 	movi	r6,-1
40005af8:	29806d26 	beq	r5,r6,40005cb0 <residual_block+0x558>
    coeffNum+=run[i]+1;
40005afc:	294b883a 	add	r5,r5,r5
40005b00:	294b883a 	add	r5,r5,r5
40005b04:	d94b883a 	add	r5,sp,r5
40005b08:	29000017 	ldw	r4,0(r5)
    coeffLevel[coeffNum]=level[i];
40005b0c:	29c01017 	ldw	r7,64(r5)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005b10:	a17ffd04 	addi	r5,r20,-12
    coeffNum+=run[i]+1;
40005b14:	21000044 	addi	r4,r4,1
40005b18:	2087883a 	add	r3,r4,r2
    coeffLevel[coeffNum]=level[i];
40005b1c:	18c5883a 	add	r2,r3,r3
40005b20:	1085883a 	add	r2,r2,r2
40005b24:	9085883a 	add	r2,r18,r2
40005b28:	11c00015 	stw	r7,0(r2)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005b2c:	29806026 	beq	r5,r6,40005cb0 <residual_block+0x558>
    coeffNum+=run[i]+1;
40005b30:	294b883a 	add	r5,r5,r5
40005b34:	294b883a 	add	r5,r5,r5
40005b38:	d94b883a 	add	r5,sp,r5
40005b3c:	28800017 	ldw	r2,0(r5)
    coeffLevel[coeffNum]=level[i];
40005b40:	29c01017 	ldw	r7,64(r5)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005b44:	a17ffcc4 	addi	r5,r20,-13
    coeffNum+=run[i]+1;
40005b48:	10800044 	addi	r2,r2,1
40005b4c:	10c9883a 	add	r4,r2,r3
    coeffLevel[coeffNum]=level[i];
40005b50:	2105883a 	add	r2,r4,r4
40005b54:	1085883a 	add	r2,r2,r2
40005b58:	9085883a 	add	r2,r18,r2
40005b5c:	11c00015 	stw	r7,0(r2)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005b60:	29805326 	beq	r5,r6,40005cb0 <residual_block+0x558>
    coeffNum+=run[i]+1;
40005b64:	294b883a 	add	r5,r5,r5
40005b68:	294b883a 	add	r5,r5,r5
40005b6c:	d94b883a 	add	r5,sp,r5
40005b70:	28c00017 	ldw	r3,0(r5)
    coeffLevel[coeffNum]=level[i];
40005b74:	29c01017 	ldw	r7,64(r5)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005b78:	a17ffc84 	addi	r5,r20,-14
    coeffNum+=run[i]+1;
40005b7c:	18c00044 	addi	r3,r3,1
40005b80:	1905883a 	add	r2,r3,r4
    coeffLevel[coeffNum]=level[i];
40005b84:	1087883a 	add	r3,r2,r2
40005b88:	18c7883a 	add	r3,r3,r3
40005b8c:	90c7883a 	add	r3,r18,r3
40005b90:	19c00015 	stw	r7,0(r3)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005b94:	29804626 	beq	r5,r6,40005cb0 <residual_block+0x558>
    coeffNum+=run[i]+1;
40005b98:	294b883a 	add	r5,r5,r5
40005b9c:	294b883a 	add	r5,r5,r5
40005ba0:	d949883a 	add	r4,sp,r5
40005ba4:	20c00017 	ldw	r3,0(r4)
    coeffLevel[coeffNum]=level[i];
40005ba8:	21001017 	ldw	r4,64(r4)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005bac:	a53ffc44 	addi	r20,r20,-15
    coeffNum+=run[i]+1;
40005bb0:	18c00044 	addi	r3,r3,1
40005bb4:	1887883a 	add	r3,r3,r2
    coeffLevel[coeffNum]=level[i];
40005bb8:	18c5883a 	add	r2,r3,r3
40005bbc:	1085883a 	add	r2,r2,r2
40005bc0:	9085883a 	add	r2,r18,r2
40005bc4:	11000015 	stw	r4,0(r2)
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005bc8:	a1803926 	beq	r20,r6,40005cb0 <residual_block+0x558>
    coeffNum+=run[i]+1;
40005bcc:	a529883a 	add	r20,r20,r20
40005bd0:	a529883a 	add	r20,r20,r20
40005bd4:	dd05883a 	add	r2,sp,r20
    coeffLevel[coeffNum]=level[i];
40005bd8:	11000017 	ldw	r4,0(r2)
40005bdc:	11401017 	ldw	r5,64(r2)
    case 4: case 5: case 6: case 7:
      coeff_token=get_code(CoeffTokenCodeTable[2]);        break;
    default:
      coeff_token=get_code(CoeffTokenCodeTable[3]);
  }
  TotalCoeff=coeff_token>>2;
40005be0:	8005883a 	mov	r2,r16
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
    coeffNum+=run[i]+1;
    coeffLevel[coeffNum]=level[i];
40005be4:	1907883a 	add	r3,r3,r4
40005be8:	18c00044 	addi	r3,r3,1
40005bec:	18c7883a 	add	r3,r3,r3
40005bf0:	18c7883a 	add	r3,r3,r3
40005bf4:	90e5883a 	add	r18,r18,r3
40005bf8:	91400015 	stw	r5,0(r18)
  }

//exit(0);
  return TotalCoeff;
}
40005bfc:	dfc02b17 	ldw	ra,172(sp)
40005c00:	df002a17 	ldw	fp,168(sp)
40005c04:	ddc02917 	ldw	r23,164(sp)
40005c08:	dd802817 	ldw	r22,160(sp)
40005c0c:	dd402717 	ldw	r21,156(sp)
40005c10:	dd002617 	ldw	r20,152(sp)
40005c14:	dcc02517 	ldw	r19,148(sp)
40005c18:	dc802417 	ldw	r18,144(sp)
40005c1c:	dc402317 	ldw	r17,140(sp)
40005c20:	dc002217 	ldw	r16,136(sp)
40005c24:	dec02c04 	addi	sp,sp,176
40005c28:	f800283a 	ret
//printf("nC=%d | ",nC);
  switch(nC) {
    case -1:
      coeff_token=get_code(CoeffTokenCodeTable_ChromaDC);  break;
    case 0: case 1:
      coeff_token=get_code(CoeffTokenCodeTable[0]);        break;
40005c2c:	00900134 	movhi	r2,16388
40005c30:	10949604 	addi	r2,r2,21080
40005c34:	11000017 	ldw	r4,0(r2)
40005c38:	0000b200 	call	40000b20 <get_code>
    case 4: case 5: case 6: case 7:
      coeff_token=get_code(CoeffTokenCodeTable[2]);        break;
    default:
      coeff_token=get_code(CoeffTokenCodeTable[3]);
  }
  TotalCoeff=coeff_token>>2;
40005c3c:	1021d0ba 	srai	r16,r2,2
  TrailingOnes=coeff_token&3;
40005c40:	144000cc 	andi	r17,r2,3
  if(TotalCoeff>10 && TrailingOnes<3) suffixLength=1; else suffixLength=0;
40005c44:	00800284 	movi	r2,10
40005c48:	143eeb16 	blt	r2,r16,400057f8 <__alt_data_end+0xc00057f8>
//printf("coeff_token=%d TotalCoeff=%d TrailingOnes=%d suffixLength=%d\n",coeff_token,TotalCoeff,TrailingOnes,suffixLength);
  if(!TotalCoeff) return 0;
40005c4c:	80001a1e 	bne	r16,zero,40005cb8 <residual_block+0x560>
40005c50:	0005883a 	mov	r2,zero
40005c54:	003fe906 	br	40005bfc <__alt_data_end+0xc0005bfc>
    case 0: case 1:
      coeff_token=get_code(CoeffTokenCodeTable[0]);        break;
    case 2: case 3:
      coeff_token=get_code(CoeffTokenCodeTable[1]);        break;
    case 4: case 5: case 6: case 7:
      coeff_token=get_code(CoeffTokenCodeTable[2]);        break;
40005c58:	00900134 	movhi	r2,16388
40005c5c:	10949604 	addi	r2,r2,21080
40005c60:	11000217 	ldw	r4,8(r2)
40005c64:	0000b200 	call	40000b20 <get_code>
40005c68:	003edf06 	br	400057e8 <__alt_data_end+0xc00057e8>
  int level[16],run[16];

//printf("nC=%d | ",nC);
  switch(nC) {
    case -1:
      coeff_token=get_code(CoeffTokenCodeTable_ChromaDC);  break;
40005c6c:	d12f9e17 	ldw	r4,-16776(gp)
40005c70:	0000b200 	call	40000b20 <get_code>
40005c74:	003edc06 	br	400057e8 <__alt_data_end+0xc00057e8>
        while(!input_get_one_bit()) ++run_before;
      run[i]=run_before;
    } else if(zerosLeft>0)
      run[i]=get_code(RunBeforeCodeTable[zerosLeft-1]);
    else
      run[i]=0;
40005c78:	98000015 	stw	zero,0(r19)
40005c7c:	0005883a 	mov	r2,zero
40005c80:	003f0806 	br	400058a4 <__alt_data_end+0xc00058a4>
  } else
    zerosLeft=0;
//printf("TotalZeros=%d\n",zerosLeft);
  for(i=0; i<TotalCoeff-1; ++i) {
    if(zerosLeft>6) {
      int run_before=7-input_get_bits(3);
40005c84:	010000c4 	movi	r4,3
40005c88:	0001a040 	call	40001a04 <input_get_bits>
40005c8c:	b8b9c83a 	sub	fp,r23,r2
      if(run_before==7)
40005c90:	e5c00426 	beq	fp,r23,40005ca4 <residual_block+0x54c>
        while(!input_get_one_bit()) ++run_before;
      run[i]=run_before;
40005c94:	9f000015 	stw	fp,0(r19)
40005c98:	e005883a 	mov	r2,fp
40005c9c:	003f0106 	br	400058a4 <__alt_data_end+0xc00058a4>
//printf("TotalZeros=%d\n",zerosLeft);
  for(i=0; i<TotalCoeff-1; ++i) {
    if(zerosLeft>6) {
      int run_before=7-input_get_bits(3);
      if(run_before==7)
        while(!input_get_one_bit()) ++run_before;
40005ca0:	e7000044 	addi	fp,fp,1
40005ca4:	0001a7c0 	call	40001a7c <input_get_one_bit>
40005ca8:	103ffd26 	beq	r2,zero,40005ca0 <__alt_data_end+0xc0005ca0>
40005cac:	003ff906 	br	40005c94 <__alt_data_end+0xc0005c94>
    case 4: case 5: case 6: case 7:
      coeff_token=get_code(CoeffTokenCodeTable[2]);        break;
    default:
      coeff_token=get_code(CoeffTokenCodeTable[3]);
  }
  TotalCoeff=coeff_token>>2;
40005cb0:	8005883a 	mov	r2,r16
40005cb4:	003fd106 	br	40005bfc <__alt_data_end+0xc0005bfc>
  TrailingOnes=coeff_token&3;
  if(TotalCoeff>10 && TrailingOnes<3) suffixLength=1; else suffixLength=0;
//printf("coeff_token=%d TotalCoeff=%d TrailingOnes=%d suffixLength=%d\n",coeff_token,TotalCoeff,TrailingOnes,suffixLength);
  if(!TotalCoeff) return 0;

  for(i=0; i<TotalCoeff; ++i)
40005cb8:	043ede0e 	bge	zero,r16,40005834 <__alt_data_end+0xc0005834>
40005cbc:	002d883a 	mov	r22,zero
40005cc0:	003ed006 	br	40005804 <__alt_data_end+0xc0005804>
40005cc4:	853fffc4 	addi	r20,r16,-1
40005cc8:	a507883a 	add	r3,r20,r20

  if(TotalCoeff<maxNumCoeff) {
    if(nC<0) zerosLeft=get_code(TotalZerosCodeTable_ChromaDC[TotalCoeff-1]);
        else zerosLeft=get_code(TotalZerosCodeTable_4x4[TotalCoeff-1]);
  } else
    zerosLeft=0;
40005ccc:	002d883a 	mov	r22,zero
40005cd0:	d8c02015 	stw	r3,128(sp)
40005cd4:	003ee306 	br	40005864 <__alt_data_end+0xc0005864>
    case 2: case 3:
      coeff_token=get_code(CoeffTokenCodeTable[1]);        break;
    case 4: case 5: case 6: case 7:
      coeff_token=get_code(CoeffTokenCodeTable[2]);        break;
    default:
      coeff_token=get_code(CoeffTokenCodeTable[3]);
40005cd8:	00900134 	movhi	r2,16388
40005cdc:	10949604 	addi	r2,r2,21080
40005ce0:	11000317 	ldw	r4,12(r2)
40005ce4:	0000b200 	call	40000b20 <get_code>
40005ce8:	003ebf06 	br	400057e8 <__alt_data_end+0xc00057e8>
      level[i]=1-2*input_get_one_bit();
    else {
      int level_prefix;
      int levelSuffixSize=suffixLength;
      int levelCode;
      for(level_prefix=0; !input_get_one_bit(); ++level_prefix);
40005cec:	21000044 	addi	r4,r4,1
40005cf0:	d9002115 	stw	r4,132(sp)
40005cf4:	0001a7c0 	call	40001a7c <input_get_one_bit>
40005cf8:	d9002117 	ldw	r4,132(sp)
40005cfc:	103ffb26 	beq	r2,zero,40005cec <__alt_data_end+0xc0005cec>
      levelCode=level_prefix<<suffixLength;
      if(level_prefix==14 && suffixLength==0) levelSuffixSize=4;
40005d00:	00800384 	movi	r2,14
    else {
      int level_prefix;
      int levelSuffixSize=suffixLength;
      int levelCode;
      for(level_prefix=0; !input_get_one_bit(); ++level_prefix);
      levelCode=level_prefix<<suffixLength;
40005d04:	258c983a 	sll	r6,r4,r22
      if(level_prefix==14 && suffixLength==0) levelSuffixSize=4;
40005d08:	20803026 	beq	r4,r2,40005dcc <residual_block+0x674>
      else if(level_prefix==15) levelSuffixSize=12;
40005d0c:	00c003c4 	movi	r3,15
40005d10:	20c03b26 	beq	r4,r3,40005e00 <residual_block+0x6a8>
      if(levelSuffixSize)
40005d14:	b000341e 	bne	r22,zero,40005de8 <residual_block+0x690>
        levelCode+=input_get_bits(levelSuffixSize);
      if(level_prefix==15 && suffixLength==0)
        levelCode+=15;
      if(i==TrailingOnes && TrailingOnes<3)
40005d18:	8f004126 	beq	r17,fp,40005e20 <residual_block+0x6c8>
        levelCode+=2;
      if(levelCode&1) level[i]=(-levelCode-1)>>1;
40005d1c:	3080004c 	andi	r2,r6,1
40005d20:	10002026 	beq	r2,zero,40005da4 <residual_block+0x64c>
40005d24:	0184303a 	nor	r2,zero,r6
40005d28:	1005d07a 	srai	r2,r2,1
40005d2c:	b8800015 	stw	r2,0(r23)
                 else level[i]=( levelCode+2)>>1;
      if(suffixLength==0) suffixLength=1;
40005d30:	b0002026 	beq	r22,zero,40005db4 <residual_block+0x65c>
      if(abs(level[i])>(3<<(suffixLength-1)) && suffixLength<6)
40005d34:	1000010e 	bge	r2,zero,40005d3c <residual_block+0x5e4>
40005d38:	0085c83a 	sub	r2,zero,r2
40005d3c:	b13fffc4 	addi	r4,r22,-1
40005d40:	00c000c4 	movi	r3,3
40005d44:	1908983a 	sll	r4,r3,r4
40005d48:	20beb70e 	bge	r4,r2,40005828 <__alt_data_end+0xc0005828>
40005d4c:	01000144 	movi	r4,5
40005d50:	25beb516 	blt	r4,r22,40005828 <__alt_data_end+0xc0005828>
40005d54:	b5800044 	addi	r22,r22,1
40005d58:	003eb306 	br	40005828 <__alt_data_end+0xc0005828>
        ++suffixLength;
    }
//printf("level[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",level[i]); printf("\n");

  if(TotalCoeff<maxNumCoeff) {
    if(nC<0) zerosLeft=get_code(TotalZerosCodeTable_ChromaDC[TotalCoeff-1]);
40005d5c:	853fffc4 	addi	r20,r16,-1
40005d60:	a507883a 	add	r3,r20,r20
40005d64:	d8c02015 	stw	r3,128(sp)
40005d68:	18c5883a 	add	r2,r3,r3
40005d6c:	00d00134 	movhi	r3,16388
40005d70:	18d49304 	addi	r3,r3,21068
40005d74:	1885883a 	add	r2,r3,r2
40005d78:	11000017 	ldw	r4,0(r2)
40005d7c:	0000b200 	call	40000b20 <get_code>
40005d80:	102d883a 	mov	r22,r2
40005d84:	003eb706 	br	40005864 <__alt_data_end+0xc0005864>
      run[i]=get_code(RunBeforeCodeTable[zerosLeft-1]);
    else
      run[i]=0;
    zerosLeft-=run[i];
  }
  run[TotalCoeff-1]=zerosLeft;
40005d88:	d8c02017 	ldw	r3,128(sp)
40005d8c:	18c5883a 	add	r2,r3,r3
40005d90:	d885883a 	add	r2,sp,r2
40005d94:	15800015 	stw	r22,0(r2)
    case 4: case 5: case 6: case 7:
      coeff_token=get_code(CoeffTokenCodeTable[2]);        break;
    default:
      coeff_token=get_code(CoeffTokenCodeTable[3]);
  }
  TotalCoeff=coeff_token>>2;
40005d98:	8005883a 	mov	r2,r16
  }
  run[TotalCoeff-1]=zerosLeft;
//printf("run[] ="); for(i=0; i<TotalCoeff; ++i) printf(" %d",run[i]); printf("\n");

  coeffNum=-1;
  for(i=TotalCoeff-1; i>=0; --i) {
40005d9c:	a03f971e 	bne	r20,zero,40005bfc <__alt_data_end+0xc0005bfc>
40005da0:	003ec806 	br	400058c4 <__alt_data_end+0xc00058c4>
      if(level_prefix==15 && suffixLength==0)
        levelCode+=15;
      if(i==TrailingOnes && TrailingOnes<3)
        levelCode+=2;
      if(levelCode&1) level[i]=(-levelCode-1)>>1;
                 else level[i]=( levelCode+2)>>1;
40005da4:	30800084 	addi	r2,r6,2
40005da8:	1005d07a 	srai	r2,r2,1
40005dac:	b8800015 	stw	r2,0(r23)
40005db0:	003fdf06 	br	40005d30 <__alt_data_end+0xc0005d30>
      if(suffixLength==0) suffixLength=1;
      if(abs(level[i])>(3<<(suffixLength-1)) && suffixLength<6)
40005db4:	1000010e 	bge	r2,zero,40005dbc <residual_block+0x664>
40005db8:	0085c83a 	sub	r2,zero,r2
        levelCode+=15;
      if(i==TrailingOnes && TrailingOnes<3)
        levelCode+=2;
      if(levelCode&1) level[i]=(-levelCode-1)>>1;
                 else level[i]=( levelCode+2)>>1;
      if(suffixLength==0) suffixLength=1;
40005dbc:	010000c4 	movi	r4,3
40005dc0:	20ac803a 	cmplt	r22,r4,r2
40005dc4:	b5800044 	addi	r22,r22,1
40005dc8:	003e9706 	br	40005828 <__alt_data_end+0xc0005828>
      int level_prefix;
      int levelSuffixSize=suffixLength;
      int levelCode;
      for(level_prefix=0; !input_get_one_bit(); ++level_prefix);
      levelCode=level_prefix<<suffixLength;
      if(level_prefix==14 && suffixLength==0) levelSuffixSize=4;
40005dcc:	b000061e 	bne	r22,zero,40005de8 <residual_block+0x690>
      else if(level_prefix==15) levelSuffixSize=12;
      if(levelSuffixSize)
        levelCode+=input_get_bits(levelSuffixSize);
40005dd0:	01000104 	movi	r4,4
40005dd4:	d9802115 	stw	r6,132(sp)
40005dd8:	0001a040 	call	40001a04 <input_get_bits>
40005ddc:	d9802117 	ldw	r6,132(sp)
40005de0:	308d883a 	add	r6,r6,r2
40005de4:	003fcc06 	br	40005d18 <__alt_data_end+0xc0005d18>
40005de8:	b009883a 	mov	r4,r22
40005dec:	d9802115 	stw	r6,132(sp)
40005df0:	0001a040 	call	40001a04 <input_get_bits>
40005df4:	d9802117 	ldw	r6,132(sp)
40005df8:	308d883a 	add	r6,r6,r2
40005dfc:	003fc606 	br	40005d18 <__alt_data_end+0xc0005d18>
40005e00:	01000304 	movi	r4,12
40005e04:	d9802115 	stw	r6,132(sp)
40005e08:	0001a040 	call	40001a04 <input_get_bits>
40005e0c:	d9802117 	ldw	r6,132(sp)
40005e10:	308d883a 	add	r6,r6,r2
      if(level_prefix==15 && suffixLength==0)
40005e14:	b03fc01e 	bne	r22,zero,40005d18 <__alt_data_end+0xc0005d18>
        levelCode+=15;
40005e18:	318003c4 	addi	r6,r6,15
40005e1c:	003fbe06 	br	40005d18 <__alt_data_end+0xc0005d18>
      if(i==TrailingOnes && TrailingOnes<3)
40005e20:	010000c4 	movi	r4,3
40005e24:	893fbd26 	beq	r17,r4,40005d1c <__alt_data_end+0xc0005d1c>
        levelCode+=2;
40005e28:	31800084 	addi	r6,r6,2
40005e2c:	003fbb06 	br	40005d1c <__alt_data_end+0xc0005d1c>

40005e30 <init_code_tables>:
  return TotalCoeff;
}

///////////////////////////////////////////////////////////////////////////////

void init_code_tables() {
40005e30:	defffb04 	addi	sp,sp,-20
40005e34:	dcc00315 	stw	r19,12(sp)
40005e38:	dc400115 	stw	r17,4(sp)
40005e3c:	04d000b4 	movhi	r19,16386
40005e40:	04500134 	movhi	r17,16388
40005e44:	dc800215 	stw	r18,8(sp)
40005e48:	dc000015 	stw	r16,0(sp)
40005e4c:	dfc00415 	stw	ra,16(sp)
40005e50:	8c549604 	addi	r17,r17,21080
40005e54:	9cc0bf04 	addi	r19,r19,764
40005e58:	0021883a 	mov	r16,zero
  int i;
  for(i=0; i<4; ++i)
40005e5c:	04830004 	movi	r18,3072
    CoeffTokenCodeTable[i]=init_code_table(CoeffTokenCodes[i]);
40005e60:	9c09883a 	add	r4,r19,r16
40005e64:	0000ab80 	call	40000ab8 <init_code_table>
40005e68:	88800015 	stw	r2,0(r17)
40005e6c:	8400c004 	addi	r16,r16,768
40005e70:	8c400104 	addi	r17,r17,4

///////////////////////////////////////////////////////////////////////////////

void init_code_tables() {
  int i;
  for(i=0; i<4; ++i)
40005e74:	84bffa1e 	bne	r16,r18,40005e60 <__alt_data_end+0xc0005e60>
    CoeffTokenCodeTable[i]=init_code_table(CoeffTokenCodes[i]);
  CoeffTokenCodeTable_ChromaDC=init_code_table(CoeffTokenCodes_ChromaDC);
40005e78:	011000b4 	movhi	r4,16386
40005e7c:	21009204 	addi	r4,r4,584
40005e80:	04100134 	movhi	r16,16388
40005e84:	84149a04 	addi	r16,r16,21096
40005e88:	045000b4 	movhi	r17,16386
40005e8c:	0000ab80 	call	40000ab8 <init_code_table>
40005e90:	8c7d6804 	addi	r17,r17,-2656
40005e94:	d0af9e15 	stw	r2,-16776(gp)
40005e98:	84800f04 	addi	r18,r16,60
  for(i=0; i<15; ++i)
    TotalZerosCodeTable_4x4[i]=init_code_table(TotalZerosCodes_4x4[i]);
40005e9c:	8809883a 	mov	r4,r17
40005ea0:	0000ab80 	call	40000ab8 <init_code_table>
40005ea4:	80800015 	stw	r2,0(r16)
40005ea8:	84000104 	addi	r16,r16,4
40005eac:	8c403604 	addi	r17,r17,216
void init_code_tables() {
  int i;
  for(i=0; i<4; ++i)
    CoeffTokenCodeTable[i]=init_code_table(CoeffTokenCodes[i]);
  CoeffTokenCodeTable_ChromaDC=init_code_table(CoeffTokenCodes_ChromaDC);
  for(i=0; i<15; ++i)
40005eb0:	84bffa1e 	bne	r16,r18,40005e9c <__alt_data_end+0xc0005e9c>
40005eb4:	04d000b4 	movhi	r19,16386
40005eb8:	04900134 	movhi	r18,16388
40005ebc:	9cfd3b04 	addi	r19,r19,-2836
40005ec0:	94949304 	addi	r18,r18,21068
40005ec4:	0021883a 	mov	r16,zero
    TotalZerosCodeTable_4x4[i]=init_code_table(TotalZerosCodes_4x4[i]);
  for(i=0; i<3; ++i)
40005ec8:	04400304 	movi	r17,12
    TotalZerosCodeTable_ChromaDC[i]=init_code_table(TotalZerosCodes_ChromaDC[i]);
40005ecc:	810003e4 	muli	r4,r16,15
40005ed0:	9909883a 	add	r4,r19,r4
40005ed4:	0000ab80 	call	40000ab8 <init_code_table>
40005ed8:	8487883a 	add	r3,r16,r18
40005edc:	18800015 	stw	r2,0(r3)
40005ee0:	84000104 	addi	r16,r16,4
  for(i=0; i<4; ++i)
    CoeffTokenCodeTable[i]=init_code_table(CoeffTokenCodes[i]);
  CoeffTokenCodeTable_ChromaDC=init_code_table(CoeffTokenCodes_ChromaDC);
  for(i=0; i<15; ++i)
    TotalZerosCodeTable_4x4[i]=init_code_table(TotalZerosCodes_4x4[i]);
  for(i=0; i<3; ++i)
40005ee4:	847ff91e 	bne	r16,r17,40005ecc <__alt_data_end+0xc0005ecc>
40005ee8:	04100134 	movhi	r16,16388
40005eec:	84148d04 	addi	r16,r16,21044
40005ef0:	045000b4 	movhi	r17,16386
40005ef4:	8c7c0904 	addi	r17,r17,-4060
40005ef8:	84800604 	addi	r18,r16,24
    TotalZerosCodeTable_ChromaDC[i]=init_code_table(TotalZerosCodes_ChromaDC[i]);
  for(i=0; i<6; ++i)
    RunBeforeCodeTable[i]=init_code_table(RunBeforeCodes[i]);
40005efc:	8809883a 	mov	r4,r17
40005f00:	0000ab80 	call	40000ab8 <init_code_table>
40005f04:	80800015 	stw	r2,0(r16)
40005f08:	84000104 	addi	r16,r16,4
40005f0c:	8c403304 	addi	r17,r17,204
  CoeffTokenCodeTable_ChromaDC=init_code_table(CoeffTokenCodes_ChromaDC);
  for(i=0; i<15; ++i)
    TotalZerosCodeTable_4x4[i]=init_code_table(TotalZerosCodes_4x4[i]);
  for(i=0; i<3; ++i)
    TotalZerosCodeTable_ChromaDC[i]=init_code_table(TotalZerosCodes_ChromaDC[i]);
  for(i=0; i<6; ++i)
40005f10:	84bffa1e 	bne	r16,r18,40005efc <__alt_data_end+0xc0005efc>
    RunBeforeCodeTable[i]=init_code_table(RunBeforeCodes[i]);
}
40005f14:	dfc00417 	ldw	ra,16(sp)
40005f18:	dcc00317 	ldw	r19,12(sp)
40005f1c:	dc800217 	ldw	r18,8(sp)
40005f20:	dc400117 	ldw	r17,4(sp)
40005f24:	dc000017 	ldw	r16,0(sp)
40005f28:	dec00504 	addi	sp,sp,20
40005f2c:	f800283a 	ret

40005f30 <decode_slice_data>:
///////////////////////////////////////////////////////////////////////////////
int decode_slice_data(slice_header *sh,
                       seq_parameter_set *sps, pic_parameter_set *pps,
                       nal_unit *nalu,
                       frame *this, frame *ref,
                       mode_pred_info *mpi) {
40005f30:	defe2b04 	addi	sp,sp,-1876
40005f34:	df01d315 	stw	fp,1868(sp)
40005f38:	df01d717 	ldw	fp,1884(sp)

    int CurrMbAddr=sh->first_mb_in_slice*(1+sh->MbaffFrameFlag);
40005f3c:	20800517 	ldw	r2,20(r4)
40005f40:	22400017 	ldw	r9,0(r4)
    int moreDataFlag=1;
    int prevMbSkipped=0;
    int MbCount=mpi->MbWidth*mpi->MbHeight;
40005f44:	e2000017 	ldw	r8,0(fp)
40005f48:	e0c00117 	ldw	r3,4(fp)
///////////////////////////////////////////////////////////////////////////////
int decode_slice_data(slice_header *sh,
                       seq_parameter_set *sps, pic_parameter_set *pps,
                       nal_unit *nalu,
                       frame *this, frame *ref,
                       mode_pred_info *mpi) {
40005f4c:	d901bf15 	stw	r4,1788(sp)

    int CurrMbAddr=sh->first_mb_in_slice*(1+sh->MbaffFrameFlag);
40005f50:	10800044 	addi	r2,r2,1
    int moreDataFlag=1;
    int prevMbSkipped=0;
    int MbCount=mpi->MbWidth*mpi->MbHeight;
40005f54:	40c7383a 	mul	r3,r8,r3
    int LumaACLevel[16][16];  // === Intra16x16ACLevel
    int ChromaDCLevel[2][4];
    int ChromaACLevel[2][4][16];

    // initialize some values
    clear_mode_pred_info(mpi);
40005f58:	e009883a 	mov	r4,fp
///////////////////////////////////////////////////////////////////////////////
int decode_slice_data(slice_header *sh,
                       seq_parameter_set *sps, pic_parameter_set *pps,
                       nal_unit *nalu,
                       frame *this, frame *ref,
                       mode_pred_info *mpi) {
40005f5c:	dd81d115 	stw	r22,1860(sp)
40005f60:	dfc1d415 	stw	ra,1872(sp)
40005f64:	ddc1d215 	stw	r23,1864(sp)
40005f68:	dd41d015 	stw	r21,1856(sp)
40005f6c:	dd01cf15 	stw	r20,1852(sp)
40005f70:	dcc1ce15 	stw	r19,1848(sp)
40005f74:	dc81cd15 	stw	r18,1844(sp)
40005f78:	dc41cc15 	stw	r17,1840(sp)
40005f7c:	dc01cb15 	stw	r16,1836(sp)

    int CurrMbAddr=sh->first_mb_in_slice*(1+sh->MbaffFrameFlag);
    int moreDataFlag=1;
    int prevMbSkipped=0;
    int MbCount=mpi->MbWidth*mpi->MbHeight;
40005f80:	d8c1bc15 	stw	r3,1776(sp)
///////////////////////////////////////////////////////////////////////////////
int decode_slice_data(slice_header *sh,
                       seq_parameter_set *sps, pic_parameter_set *pps,
                       nal_unit *nalu,
                       frame *this, frame *ref,
                       mode_pred_info *mpi) {
40005f84:	d9c1c015 	stw	r7,1792(sp)
40005f88:	d941c215 	stw	r5,1800(sp)
40005f8c:	d981c515 	stw	r6,1812(sp)

    int CurrMbAddr=sh->first_mb_in_slice*(1+sh->MbaffFrameFlag);
40005f90:	126d383a 	mul	r22,r2,r9
    int LumaACLevel[16][16];  // === Intra16x16ACLevel
    int ChromaDCLevel[2][4];
    int ChromaACLevel[2][4][16];

    // initialize some values
    clear_mode_pred_info(mpi);
40005f94:	000275c0 	call	4000275c <clear_mode_pred_info>
    QPy=sh->SliceQPy;
40005f98:	d8c1bf17 	ldw	r3,1788(sp)
    QPc=QPy;  // only to prevent a warning

    moreDataFlag=more_rbsp_data(nalu);
40005f9c:	d901c017 	ldw	r4,1792(sp)
    int ChromaDCLevel[2][4];
    int ChromaACLevel[2][4][16];

    // initialize some values
    clear_mode_pred_info(mpi);
    QPy=sh->SliceQPy;
40005fa0:	18c01b17 	ldw	r3,108(r3)
40005fa4:	d8c1bd15 	stw	r3,1780(sp)
    QPc=QPy;  // only to prevent a warning

    moreDataFlag=more_rbsp_data(nalu);
40005fa8:	0003d8c0 	call	40003d8c <more_rbsp_data>
    while(moreDataFlag && CurrMbAddr<MbCount) {
40005fac:	1001a826 	beq	r2,zero,40006650 <decode_slice_data+0x720>
40005fb0:	d8c1bc17 	ldw	r3,1776(sp)
40005fb4:	b0c1a60e 	bge	r22,r3,40006650 <decode_slice_data+0x720>
40005fb8:	d8c1bd17 	ldw	r3,1780(sp)

						perf_enter("block entering");
						send_iqit(&LumaACLevel[i][0],x,y, QPy, 0, 0);

					}
					send_intra_info( 7,                                //int             addr,
40005fbc:	00a02914 	movui	r2,32932
    clear_mode_pred_info(mpi);
    QPy=sh->SliceQPy;
    QPc=QPy;  // only to prevent a warning

    moreDataFlag=more_rbsp_data(nalu);
    while(moreDataFlag && CurrMbAddr<MbCount) {
40005fc0:	d801c615 	stw	zero,1816(sp)
40005fc4:	d8c1c115 	stw	r3,1796(sp)

						perf_enter("block entering");
						send_iqit(&LumaACLevel[i][0],x,y, QPy, 0, 0);

					}
					send_intra_info( 7,                                //int             addr,
40005fc8:	d8c1c517 	ldw	r3,1812(sp)
40005fcc:	1885883a 	add	r2,r3,r2
40005fd0:	d881c715 	stw	r2,1820(sp)

    moreDataFlag=more_rbsp_data(nalu);
    while(moreDataFlag && CurrMbAddr<MbCount) {

        // mb_skip_run ////////////////////////////////////////////////////////////
        if(sh->slice_type!=I_SLICE && sh->slice_type!=SI_SLICE) {
40005fd4:	d8c1bf17 	ldw	r3,1788(sp)
40005fd8:	00800084 	movi	r2,2
40005fdc:	1c000117 	ldw	r16,4(r3)
40005fe0:	80800226 	beq	r16,r2,40005fec <decode_slice_data+0xbc>
40005fe4:	00800104 	movi	r2,4
40005fe8:	8081531e 	bne	r16,r2,40006538 <decode_slice_data+0x608>
            moreDataFlag=more_rbsp_data(nalu);
        }
        if(CurrMbAddr>=MbCount) return QPy;

        if(moreDataFlag) {  // macroblock_layer() /////////////////////////////////
            decode_mb_mode(&mb,sh->slice_type,get_unsigned_exp_golomb());
40005fec:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40005ff0:	100d883a 	mov	r6,r2
40005ff4:	800b883a 	mov	r5,r16
40005ff8:	d901aa04 	addi	r4,sp,1704
40005ffc:	00023c00 	call	400023c0 <decode_mb_mode>
            mb_pos_x=CurrMbAddr%sps->PicWidthInMbs;
40006000:	d8c1c217 	ldw	r3,1800(sp)
40006004:	008003c4 	movi	r2,15
40006008:	1c011217 	ldw	r16,1096(r3)
4000600c:	b422b03a 	or	r17,r22,r16
40006010:	14419c36 	bltu	r2,r17,40006684 <decode_slice_data+0x754>
40006014:	b004913a 	slli	r2,r22,4
40006018:	019000b4 	movhi	r6,16386
4000601c:	3183f504 	addi	r6,r6,4052
40006020:	1404b03a 	or	r2,r2,r16
40006024:	1185883a 	add	r2,r2,r6
40006028:	10800003 	ldbu	r2,0(r2)
4000602c:	1427383a 	mul	r19,r2,r16
            mb_pos_y=CurrMbAddr/sps->PicWidthInMbs;
40006030:	008003c4 	movi	r2,15
        }
        if(CurrMbAddr>=MbCount) return QPy;

        if(moreDataFlag) {  // macroblock_layer() /////////////////////////////////
            decode_mb_mode(&mb,sh->slice_type,get_unsigned_exp_golomb());
            mb_pos_x=CurrMbAddr%sps->PicWidthInMbs;
40006034:	b4e7c83a 	sub	r19,r22,r19
            mb_pos_y=CurrMbAddr/sps->PicWidthInMbs;
40006038:	14419936 	bltu	r2,r17,400066a0 <decode_slice_data+0x770>
4000603c:	b004913a 	slli	r2,r22,4
40006040:	00d000b4 	movhi	r3,16386
40006044:	18c3f504 	addi	r3,r3,4052
40006048:	1404b03a 	or	r2,r2,r16
4000604c:	10c5883a 	add	r2,r2,r3
40006050:	10800003 	ldbu	r2,0(r2)
            ModePredInfo_MbMode(mpi,mb_pos_x,mb_pos_y)=mb.mb_type;
40006054:	e0c00217 	ldw	r3,8(fp)
40006058:	e1000317 	ldw	r4,12(fp)
            mb_pos_x<<=4; mb_pos_y<<=4;
4000605c:	9822913a 	slli	r17,r19,4

        if(moreDataFlag) {  // macroblock_layer() /////////////////////////////////
            decode_mb_mode(&mb,sh->slice_type,get_unsigned_exp_golomb());
            mb_pos_x=CurrMbAddr%sps->PicWidthInMbs;
            mb_pos_y=CurrMbAddr/sps->PicWidthInMbs;
            ModePredInfo_MbMode(mpi,mb_pos_x,mb_pos_y)=mb.mb_type;
40006060:	10c7383a 	mul	r3,r2,r3
            mb_pos_x<<=4; mb_pos_y<<=4;
40006064:	1020913a 	slli	r16,r2,4
            if(mb.mb_type==I_PCM) {  // I_PCM macroblock ////////////////////////////
40006068:	00800784 	movi	r2,30

        if(moreDataFlag) {  // macroblock_layer() /////////////////////////////////
            decode_mb_mode(&mb,sh->slice_type,get_unsigned_exp_golomb());
            mb_pos_x=CurrMbAddr%sps->PicWidthInMbs;
            mb_pos_y=CurrMbAddr/sps->PicWidthInMbs;
            ModePredInfo_MbMode(mpi,mb_pos_x,mb_pos_y)=mb.mb_type;
4000606c:	1ce7883a 	add	r19,r3,r19
40006070:	9ce7883a 	add	r19,r19,r19
40006074:	d8c1aa17 	ldw	r3,1704(sp)
40006078:	9ce7883a 	add	r19,r19,r19
4000607c:	24e7883a 	add	r19,r4,r19
40006080:	98c00015 	stw	r3,0(r19)
            mb_pos_x<<=4; mb_pos_y<<=4;
            if(mb.mb_type==I_PCM) {  // I_PCM macroblock ////////////////////////////
40006084:	d8c1aa17 	ldw	r3,1704(sp)
40006088:	18832a26 	beq	r3,r2,40006d34 <decode_slice_data+0xe04>
                    ModePredInfo_TotalCoeffC(mpi,(mb_pos_x>>3)+x,(mb_pos_y>>3)+y,1)=16;
                    }
            }
            else {  // "normal" macroblock ////////////////////////////////////////

                if(mb.MbPartPredMode[0]!=Intra_4x4 &&
4000608c:	d881ac17 	ldw	r2,1712(sp)
40006090:	01400044 	movi	r5,1
40006094:	2882a02e 	bgeu	r5,r2,40006b18 <decode_slice_data+0xbe8>
                mb.MbPartPredMode[0]!=Intra_16x16 &&
                mb.NumMbPart==4)
40006098:	d881ab17 	ldw	r2,1708(sp)
                    }
            }
            else {  // "normal" macroblock ////////////////////////////////////////

                if(mb.MbPartPredMode[0]!=Intra_4x4 &&
                mb.MbPartPredMode[0]!=Intra_16x16 &&
4000609c:	01000104 	movi	r4,4
400060a0:	1102e526 	beq	r2,r4,40006c38 <decode_slice_data+0xd08>
                        intra_chroma_pred_mode=get_unsigned_exp_golomb();
                    } else { // mb_pred() for inter macroblocks /////////////////////////
                        int mbPartIdx;
                        // ignoring ref_idx_* and *_l1 stuff for now -- I do not support
                        // long-term prediction or B-frames anyway ...
                        int SOF=(mb.mb_type==P_L0_L0_16x8)?8:4;
400060a4:	19429a26 	beq	r3,r5,40006b10 <decode_slice_data+0xbe0>
                        for(mbPartIdx=0; mbPartIdx<mb.NumMbPart; ++mbPartIdx){
400060a8:	0081980e 	bge	zero,r2,4000670c <decode_slice_data+0x7dc>
400060ac:	202e90fa 	slli	r23,r4,3
400060b0:	055000b4 	movhi	r21,16386
400060b4:	ad43d504 	addi	r21,r21,3924
400060b8:	dd01ac04 	addi	r20,sp,1712
400060bc:	0027883a 	mov	r19,zero
                            if(mb.MbPartPredMode[mbPartIdx]!=Pred_L1) {
400060c0:	020000c4 	movi	r8,3
400060c4:	a0c00017 	ldw	r3,0(r20)
                    } else { // mb_pred() for inter macroblocks /////////////////////////
                        int mbPartIdx;
                        // ignoring ref_idx_* and *_l1 stuff for now -- I do not support
                        // long-term prediction or B-frames anyway ...
                        int SOF=(mb.mb_type==P_L0_L0_16x8)?8:4;
                        for(mbPartIdx=0; mbPartIdx<mb.NumMbPart; ++mbPartIdx){
400060c8:	9cc00044 	addi	r19,r19,1
400060cc:	a5000104 	addi	r20,r20,4
                            if(mb.MbPartPredMode[mbPartIdx]!=Pred_L1) {
400060d0:	1a001126 	beq	r3,r8,40006118 <decode_slice_data+0x1e8>
                                int mvdx=get_signed_exp_golomb();
400060d4:	da01ca15 	stw	r8,1832(sp)
400060d8:	0000c100 	call	40000c10 <get_signed_exp_golomb>
400060dc:	1025883a 	mov	r18,r2
                                int mvdy=get_signed_exp_golomb();
400060e0:	0000c100 	call	40000c10 <get_signed_exp_golomb>
                                DeriveMVs(mpi,
400060e4:	a9800117 	ldw	r6,4(r21)
400060e8:	a9400017 	ldw	r5,0(r21)
400060ec:	d8800215 	stw	r2,8(sp)
400060f0:	d881b017 	ldw	r2,1728(sp)
400060f4:	d9c1af17 	ldw	r7,1724(sp)
400060f8:	dc800115 	stw	r18,4(sp)
400060fc:	d8800015 	stw	r2,0(sp)
40006100:	818d883a 	add	r6,r16,r6
40006104:	894b883a 	add	r5,r17,r5
40006108:	e009883a 	mov	r4,fp
4000610c:	00034380 	call	40003438 <DeriveMVs>
40006110:	d881ab17 	ldw	r2,1708(sp)
40006114:	da01ca17 	ldw	r8,1832(sp)
40006118:	adeb883a 	add	r21,r21,r23
                    } else { // mb_pred() for inter macroblocks /////////////////////////
                        int mbPartIdx;
                        // ignoring ref_idx_* and *_l1 stuff for now -- I do not support
                        // long-term prediction or B-frames anyway ...
                        int SOF=(mb.mb_type==P_L0_L0_16x8)?8:4;
                        for(mbPartIdx=0; mbPartIdx<mb.NumMbPart; ++mbPartIdx){
4000611c:	98bfe916 	blt	r19,r2,400060c4 <__alt_data_end+0xc00060c4>
40006120:	dd01ac17 	ldw	r20,1712(sp)
40006124:	d8c19a04 	addi	r3,sp,1640
40006128:	d8c1c415 	stw	r3,1808(sp)
                        }
                    }
                }

                // coded_block_pattern ////////////////////////////////////////////////
                if(mb.MbPartPredMode[0]!=Intra_16x16) {
4000612c:	00800044 	movi	r2,1
40006130:	a081781e 	bne	r20,r2,40006714 <decode_slice_data+0x7e4>
40006134:	dcc1b217 	ldw	r19,1736(sp)
                // Before parsing the residual data, set all coefficients to zero. In
                // the original H.264 documentation, this is done either in
                // residual_block() at the very beginning or by setting values to zero
                // according to the CodedBlockPattern values. So, there's only little
                // overhead if we do it right here.
                memset(LumaDCLevel,0,sizeof(LumaDCLevel));
40006138:	d901c417 	ldw	r4,1808(sp)
4000613c:	01801004 	movi	r6,64
40006140:	000b883a 	mov	r5,zero
40006144:	000ba440 	call	4000ba44 <memset>
                memset(LumaACLevel,0,sizeof(LumaACLevel));
40006148:	01810004 	movi	r6,1024
4000614c:	000b883a 	mov	r5,zero
40006150:	d9000604 	addi	r4,sp,24
40006154:	000ba440 	call	4000ba44 <memset>
                memset(ChromaDCLevel,0,sizeof(ChromaDCLevel));
                memset(ChromaACLevel,0,sizeof(ChromaACLevel));
40006158:	01808004 	movi	r6,512
4000615c:	000b883a 	mov	r5,zero
40006160:	d9010604 	addi	r4,sp,1048
                // residual_block() at the very beginning or by setting values to zero
                // according to the CodedBlockPattern values. So, there's only little
                // overhead if we do it right here.
                memset(LumaDCLevel,0,sizeof(LumaDCLevel));
                memset(LumaACLevel,0,sizeof(LumaACLevel));
                memset(ChromaDCLevel,0,sizeof(ChromaDCLevel));
40006164:	d801b315 	stw	zero,1740(sp)
40006168:	d801b415 	stw	zero,1744(sp)
4000616c:	d801b515 	stw	zero,1748(sp)
40006170:	d801b615 	stw	zero,1752(sp)
40006174:	d801b715 	stw	zero,1756(sp)
40006178:	d801b815 	stw	zero,1760(sp)
4000617c:	d801b915 	stw	zero,1764(sp)
40006180:	d801ba15 	stw	zero,1768(sp)
                memset(ChromaACLevel,0,sizeof(ChromaACLevel));
40006184:	000ba440 	call	4000ba44 <memset>

                // residual() /////////////////////////////////////////////////////////
                if(mb.CodedBlockPatternLuma>0 || mb.CodedBlockPatternChroma>0 ||
40006188:	04c00216 	blt	zero,r19,40006194 <decode_slice_data+0x264>
4000618c:	d881b117 	ldw	r2,1732(sp)
40006190:	0084830e 	bge	zero,r2,400073a0 <decode_slice_data+0x1470>
                mb.MbPartPredMode[0]==Intra_16x16)
                {
                    int i8x8,i4x4,iCbCr,QPi;

                    mb_qp_delta=get_signed_exp_golomb();
40006194:	0000c100 	call	40000c10 <get_signed_exp_golomb>
                    QPy=(QPy+mb_qp_delta+52)%52;
40006198:	d8c1bd17 	ldw	r3,1780(sp)
4000619c:	10c5883a 	add	r2,r2,r3
400061a0:	14c00d04 	addi	r19,r2,52
400061a4:	98800d14 	ori	r2,r19,52
400061a8:	00c003c4 	movi	r3,15
400061ac:	18818636 	bltu	r3,r2,400067c8 <decode_slice_data+0x898>
400061b0:	9804913a 	slli	r2,r19,4
400061b4:	019000b4 	movhi	r6,16386
400061b8:	3183f504 	addi	r6,r6,4052
400061bc:	10800d14 	ori	r2,r2,52
400061c0:	1185883a 	add	r2,r2,r6
400061c4:	10800003 	ldbu	r2,0(r2)
400061c8:	11000d24 	muli	r4,r2,52
                    QPi=QPy+pps->chroma_qp_index_offset;
400061cc:	d881c517 	ldw	r2,1812(sp)
400061d0:	00e02714 	movui	r3,32924
                mb.MbPartPredMode[0]==Intra_16x16)
                {
                    int i8x8,i4x4,iCbCr,QPi;

                    mb_qp_delta=get_signed_exp_golomb();
                    QPy=(QPy+mb_qp_delta+52)%52;
400061d4:	9909c83a 	sub	r4,r19,r4
                    QPi=QPy+pps->chroma_qp_index_offset;
400061d8:	10c7883a 	add	r3,r2,r3
400061dc:	18800017 	ldw	r2,0(r3)
                mb.MbPartPredMode[0]==Intra_16x16)
                {
                    int i8x8,i4x4,iCbCr,QPi;

                    mb_qp_delta=get_signed_exp_golomb();
                    QPy=(QPy+mb_qp_delta+52)%52;
400061e0:	d901bd15 	stw	r4,1780(sp)
                    QPi=QPy+pps->chroma_qp_index_offset;
400061e4:	2085883a 	add	r2,r4,r2
                    QPi=CustomClip(QPi,0,51);
400061e8:	10023c16 	blt	r2,zero,40006adc <decode_slice_data+0xbac>
400061ec:	d881c115 	stw	r2,1796(sp)
400061f0:	d8c1c117 	ldw	r3,1796(sp)
400061f4:	00800cc4 	movi	r2,51
400061f8:	10c0020e 	bge	r2,r3,40006204 <decode_slice_data+0x2d4>
400061fc:	d881c115 	stw	r2,1796(sp)
40006200:	1007883a 	mov	r3,r2
                    if(QPi<30) QPc=QPi;
40006204:	00800744 	movi	r2,29
40006208:	10c0080e 	bge	r2,r3,4000622c <decode_slice_data+0x2fc>
                            else QPc=QPcTable[QPi-30];
4000620c:	18bff884 	addi	r2,r3,-30
40006210:	1085883a 	add	r2,r2,r2
40006214:	019000b4 	movhi	r6,16386
40006218:	1085883a 	add	r2,r2,r2
4000621c:	3183bf04 	addi	r6,r6,3836
40006220:	3085883a 	add	r2,r6,r2
40006224:	10800017 	ldw	r2,0(r2)
40006228:	d881c115 	stw	r2,1796(sp)
                    // OK, now let's parse the hell out of the stream ;)
                    if(mb.MbPartPredMode[0]==Intra_16x16)
4000622c:	d8c1ac17 	ldw	r3,1712(sp)
40006230:	00800044 	movi	r2,1
40006234:	18822d26 	beq	r3,r2,40006aec <decode_slice_data+0xbbc>
40006238:	009000b4 	movhi	r2,16386
4000623c:	1083d604 	addi	r2,r2,3928
                    int i8x8,i4x4,iCbCr,QPi;

                    mb_qp_delta=get_signed_exp_golomb();
                    QPy=(QPy+mb_qp_delta+52)%52;
                    QPi=QPy+pps->chroma_qp_index_offset;
                    QPi=CustomClip(QPi,0,51);
40006240:	002f883a 	mov	r23,zero
40006244:	dd81c815 	stw	r22,1824(sp)
40006248:	d881c315 	stw	r2,1804(sp)
4000624c:	dcc00704 	addi	r19,sp,28
40006250:	d881c915 	stw	r2,1828(sp)
40006254:	1029883a 	mov	r20,r2
40006258:	dc41bb15 	stw	r17,1772(sp)
4000625c:	dc01be15 	stw	r16,1784(sp)
40006260:	b82d883a 	mov	r22,r23
40006264:	00800044 	movi	r2,1
40006268:	15a2983a 	sll	r17,r2,r22
4000626c:	a4000804 	addi	r16,r20,32
40006270:	982f883a 	mov	r23,r19
40006274:	a02b883a 	mov	r21,r20
                    // OK, now let's parse the hell out of the stream ;)
                    if(mb.MbPartPredMode[0]==Intra_16x16)
                        residual_block(&LumaDCLevel[0],16,LumaDC_nC);
                    for(i8x8=0; i8x8<4; ++i8x8)
                        for(i4x4=0; i4x4<4; ++i4x4)
                        if(mb.CodedBlockPatternLuma&(1<<i8x8)) {
40006278:	d881b217 	ldw	r2,1736(sp)
4000627c:	8884703a 	and	r2,r17,r2
40006280:	10001926 	beq	r2,zero,400062e8 <decode_slice_data+0x3b8>
                            if(mb.MbPartPredMode[0]==Intra_16x16)
40006284:	d881ac17 	ldw	r2,1712(sp)
40006288:	00c00044 	movi	r3,1
                            LumaAdjust residual_block(&LumaACLevel[i8x8*4+i4x4][1],15,LumaAC_nC);
                            else
                            LumaAdjust residual_block(&LumaACLevel[i8x8*4+i4x4][0],16,LumaAC_nC);
4000628c:	e009883a 	mov	r4,fp
                    if(mb.MbPartPredMode[0]==Intra_16x16)
                        residual_block(&LumaDCLevel[0],16,LumaDC_nC);
                    for(i8x8=0; i8x8<4; ++i8x8)
                        for(i4x4=0; i4x4<4; ++i4x4)
                        if(mb.CodedBlockPatternLuma&(1<<i8x8)) {
                            if(mb.MbPartPredMode[0]==Intra_16x16)
40006290:	10c10726 	beq	r2,r3,400066b0 <decode_slice_data+0x780>
                            LumaAdjust residual_block(&LumaACLevel[i8x8*4+i4x4][1],15,LumaAC_nC);
                            else
                            LumaAdjust residual_block(&LumaACLevel[i8x8*4+i4x4][0],16,LumaAC_nC);
40006294:	d8c1be17 	ldw	r3,1784(sp)
40006298:	a1800017 	ldw	r6,0(r20)
4000629c:	a17fff17 	ldw	r5,-4(r20)
400062a0:	e0800b17 	ldw	r2,44(fp)
400062a4:	198d883a 	add	r6,r3,r6
400062a8:	d8c1bb17 	ldw	r3,1772(sp)
400062ac:	300fd0ba 	srai	r7,r6,2
400062b0:	e4800c17 	ldw	r18,48(fp)
400062b4:	194b883a 	add	r5,r3,r5
400062b8:	2807d0ba 	srai	r3,r5,2
400062bc:	3885383a 	mul	r2,r7,r2
400062c0:	10c5883a 	add	r2,r2,r3
400062c4:	1085883a 	add	r2,r2,r2
400062c8:	1085883a 	add	r2,r2,r2
400062cc:	90a5883a 	add	r18,r18,r2
400062d0:	000293c0 	call	4000293c <get_luma_nC>
400062d4:	100d883a 	mov	r6,r2
400062d8:	b93fff04 	addi	r4,r23,-4
400062dc:	01400404 	movi	r5,16
400062e0:	00057580 	call	40005758 <residual_block>
400062e4:	90800015 	stw	r2,0(r18)
400062e8:	ad400204 	addi	r21,r21,8
400062ec:	bdc01004 	addi	r23,r23,64
400062f0:	a5000204 	addi	r20,r20,8
                            else QPc=QPcTable[QPi-30];
                    // OK, now let's parse the hell out of the stream ;)
                    if(mb.MbPartPredMode[0]==Intra_16x16)
                        residual_block(&LumaDCLevel[0],16,LumaDC_nC);
                    for(i8x8=0; i8x8<4; ++i8x8)
                        for(i4x4=0; i4x4<4; ++i4x4)
400062f4:	857fe01e 	bne	r16,r21,40006278 <__alt_data_end+0xc0006278>
                    if(QPi<30) QPc=QPi;
                            else QPc=QPcTable[QPi-30];
                    // OK, now let's parse the hell out of the stream ;)
                    if(mb.MbPartPredMode[0]==Intra_16x16)
                        residual_block(&LumaDCLevel[0],16,LumaDC_nC);
                    for(i8x8=0; i8x8<4; ++i8x8)
400062f8:	b5800044 	addi	r22,r22,1
400062fc:	01800104 	movi	r6,4
40006300:	9cc04004 	addi	r19,r19,256
40006304:	8029883a 	mov	r20,r16
40006308:	b1bfd61e 	bne	r22,r6,40006264 <__alt_data_end+0xc0006264>
                            LumaAdjust residual_block(&LumaACLevel[i8x8*4+i4x4][1],15,LumaAC_nC);
                            else
                            LumaAdjust residual_block(&LumaACLevel[i8x8*4+i4x4][0],16,LumaAC_nC);
                        };
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        if(mb.CodedBlockPatternChroma&3)
4000630c:	d881b117 	ldw	r2,1732(sp)
40006310:	b02f883a 	mov	r23,r22
40006314:	dc41bb17 	ldw	r17,1772(sp)
40006318:	10c000cc 	andi	r3,r2,3
4000631c:	dc01be17 	ldw	r16,1784(sp)
40006320:	dd81c817 	ldw	r22,1824(sp)
40006324:	18012c1e 	bne	r3,zero,400067d8 <decode_slice_data+0x8a8>
                        residual_block(&ChromaDCLevel[iCbCr][0],4,ChromaDC_nC);
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        for(i4x4=0; i4x4<4; ++i4x4)
                        if(mb.CodedBlockPatternChroma&2)
40006328:	1080008c 	andi	r2,r2,2
4000632c:	1001381e 	bne	r2,zero,40006810 <decode_slice_data+0x8e0>

                //////////////////////////// RENDERING ////////////////////////////////
                // Now that we have all the informations needed about this macroblock,
                // we can go ahead and really render it.

                if(mb.MbPartPredMode[0]==Intra_4x4) {  ///////////////// Intra_4x4_Pred
40006330:	dcc1ac17 	ldw	r19,1712(sp)
40006334:	9801051e 	bne	r19,zero,4000674c <decode_slice_data+0x81c>
40006338:	dd41c917 	ldw	r21,1828(sp)
4000633c:	05d000b4 	movhi	r23,16386
40006340:	bdc3d504 	addi	r23,r23,3924
					int i;
					for(i=0; i<16; ++i) {
40006344:	a829883a 	mov	r20,r21
40006348:	dd41d517 	ldw	r21,1876(sp)
4000634c:	dd81be15 	stw	r22,1784(sp)
40006350:	dc01bb15 	stw	r16,1772(sp)
40006354:	dc800604 	addi	r18,sp,24
                    int i8x8,i4x4,iCbCr,QPi;

                    mb_qp_delta=get_signed_exp_golomb();
                    QPy=(QPy+mb_qp_delta+52)%52;
                    QPi=QPy+pps->chroma_qp_index_offset;
                    QPi=CustomClip(QPi,0,51);
40006358:	0027883a 	mov	r19,zero
                // Now that we have all the informations needed about this macroblock,
                // we can go ahead and really render it.

                if(mb.MbPartPredMode[0]==Intra_4x4) {  ///////////////// Intra_4x4_Pred
					int i;
					for(i=0; i<16; ++i) {
4000635c:	b82d883a 	mov	r22,r23
40006360:	e021883a 	mov	r16,fp

					int x=mb_pos_x+Intra4x4ScanOrder[i][0];
					int y=mb_pos_y+Intra4x4ScanOrder[i][1];
40006364:	a7000017 	ldw	fp,0(r20)
40006368:	d8c1bb17 	ldw	r3,1772(sp)
					perf_enter("intra prediction");
4000636c:	011000b4 	movhi	r4,16386
40006370:	2138b804 	addi	r4,r4,-7456
                if(mb.MbPartPredMode[0]==Intra_4x4) {  ///////////////// Intra_4x4_Pred
					int i;
					for(i=0; i<16; ++i) {

					int x=mb_pos_x+Intra4x4ScanOrder[i][0];
					int y=mb_pos_y+Intra4x4ScanOrder[i][1];
40006374:	1f39883a 	add	fp,r3,fp

                if(mb.MbPartPredMode[0]==Intra_4x4) {  ///////////////// Intra_4x4_Pred
					int i;
					for(i=0; i<16; ++i) {

					int x=mb_pos_x+Intra4x4ScanOrder[i][0];
40006378:	b5c00017 	ldw	r23,0(r22)
					int y=mb_pos_y+Intra4x4ScanOrder[i][1];
					perf_enter("intra prediction");
4000637c:	00055880 	call	40005588 <perf_enter>
				    int mode=ModePredInfo_Intra4x4PredMode(mpi,x>>2,y>>2);
40006380:	81000b17 	ldw	r4,44(r16)
40006384:	e005d0ba 	srai	r2,fp,2

                if(mb.MbPartPredMode[0]==Intra_4x4) {  ///////////////// Intra_4x4_Pred
					int i;
					for(i=0; i<16; ++i) {

					int x=mb_pos_x+Intra4x4ScanOrder[i][0];
40006388:	8def883a 	add	r23,r17,r23
					int y=mb_pos_y+Intra4x4ScanOrder[i][1];
					perf_enter("intra prediction");
				    int mode=ModePredInfo_Intra4x4PredMode(mpi,x>>2,y>>2);
4000638c:	b807d0ba 	srai	r3,r23,2
40006390:	1105383a 	mul	r2,r2,r4
40006394:	81400d17 	ldw	r5,52(r16)
					send_intra_info( 7,                //int             addr,
40006398:	a9000017 	ldw	r4,0(r21)
					for(i=0; i<16; ++i) {

					int x=mb_pos_x+Intra4x4ScanOrder[i][0];
					int y=mb_pos_y+Intra4x4ScanOrder[i][1];
					perf_enter("intra prediction");
				    int mode=ModePredInfo_Intra4x4PredMode(mpi,x>>2,y>>2);
4000639c:	10c5883a 	add	r2,r2,r3
400063a0:	1085883a 	add	r2,r2,r2
					send_intra_info( 7,                //int             addr,
400063a4:	01800104 	movi	r6,4
					for(i=0; i<16; ++i) {

					int x=mb_pos_x+Intra4x4ScanOrder[i][0];
					int y=mb_pos_y+Intra4x4ScanOrder[i][1];
					perf_enter("intra prediction");
				    int mode=ModePredInfo_Intra4x4PredMode(mpi,x>>2,y>>2);
400063a8:	1085883a 	add	r2,r2,r2
					send_intra_info( 7,                //int             addr,
400063ac:	dcc00315 	stw	r19,12(sp)
					for(i=0; i<16; ++i) {

					int x=mb_pos_x+Intra4x4ScanOrder[i][0];
					int y=mb_pos_y+Intra4x4ScanOrder[i][1];
					perf_enter("intra prediction");
				    int mode=ModePredInfo_Intra4x4PredMode(mpi,x>>2,y>>2);
400063b0:	2885883a 	add	r2,r5,r2
					send_intra_info( 7,                //int             addr,
400063b4:	d9000515 	stw	r4,20(sp)
400063b8:	d9800415 	stw	r6,16(sp)
400063bc:	d8000215 	stw	zero,8(sp)
400063c0:	d8000115 	stw	zero,4(sp)
400063c4:	df000015 	stw	fp,0(sp)
400063c8:	11800017 	ldw	r6,0(r2)
400063cc:	b80f883a 	mov	r7,r23
400063d0:	800b883a 	mov	r5,r16
400063d4:	010001c4 	movi	r4,7
400063d8:	0004aa00 	call	40004aa0 <send_intra_info>
					                 i,                //int             luma4x4BlkIdx,
					                 4,                //int             size,
					                 this->Lwidth      //int             Lwidth
					                 );

						perf_enter("block entering");
400063dc:	011000b4 	movhi	r4,16386
400063e0:	2138bd04 	addi	r4,r4,-7436
400063e4:	00055880 	call	40005588 <perf_enter>
						send_iqit(&LumaACLevel[i][0],x,y, QPy, 0, 0);
400063e8:	d9c1bd17 	ldw	r7,1780(sp)
400063ec:	9009883a 	mov	r4,r18
400063f0:	d8000115 	stw	zero,4(sp)
400063f4:	d8000015 	stw	zero,0(sp)
400063f8:	e00d883a 	mov	r6,fp
400063fc:	b80b883a 	mov	r5,r23
40006400:	000035c0 	call	4000035c <send_iqit>
                // Now that we have all the informations needed about this macroblock,
                // we can go ahead and really render it.

                if(mb.MbPartPredMode[0]==Intra_4x4) {  ///////////////// Intra_4x4_Pred
					int i;
					for(i=0; i<16; ++i) {
40006404:	9cc00044 	addi	r19,r19,1
40006408:	00800404 	movi	r2,16
4000640c:	b5800204 	addi	r22,r22,8
40006410:	a5000204 	addi	r20,r20,8
40006414:	94801004 	addi	r18,r18,64
40006418:	98bfd21e 	bne	r19,r2,40006364 <__alt_data_end+0xc0006364>
4000641c:	8039883a 	mov	fp,r16

						perf_enter("block entering");
						send_iqit(&LumaACLevel[i][0],x,y, QPy, 0, 0);

					}
					send_intra_info( 7,                                //int             addr,
40006420:	d981c717 	ldw	r6,1820(sp)
40006424:	dc01bb17 	ldw	r16,1772(sp)
40006428:	880fd07a 	srai	r7,r17,1
4000642c:	30c00017 	ldw	r3,0(r6)
40006430:	8005d07a 	srai	r2,r16,1
40006434:	d981c617 	ldw	r6,1816(sp)
40006438:	01000044 	movi	r4,1
4000643c:	d9000215 	stw	r4,8(sp)
40006440:	d8000515 	stw	zero,20(sp)
40006444:	d8000415 	stw	zero,16(sp)
40006448:	d8000315 	stw	zero,12(sp)
4000644c:	d8c00115 	stw	r3,4(sp)
40006450:	d8800015 	stw	r2,0(sp)
40006454:	e00b883a 	mov	r5,fp
40006458:	010001c4 	movi	r4,7
4000645c:	dd81be17 	ldw	r22,1784(sp)
40006460:	0004aa00 	call	40004aa0 <send_intra_info>
                        int x=mb_pos_x+Intra4x4ScanOrder[i][0];
                        int y=mb_pos_y+Intra4x4ScanOrder[i][1];
                        send_iqit(&LumaACLevel[i][0],x,y, QPy, 0, 0);
                    }
                }
                if(mb.CodedBlockPatternChroma) { ////////////////////// Chroma Residual
40006464:	d881b117 	ldw	r2,1732(sp)
40006468:	10007326 	beq	r2,zero,40006638 <decode_slice_data+0x708>
4000646c:	8021d07a 	srai	r16,r16,1
                    int iCbCr,i;
                    perf_enter("block entering");
40006470:	011000b4 	movhi	r4,16386
40006474:	2138bd04 	addi	r4,r4,-7436
40006478:	dc01be15 	stw	r16,1784(sp)
4000647c:	882fd07a 	srai	r23,r17,1
40006480:	00055880 	call	40005588 <perf_enter>
                    for(iCbCr=0; iCbCr<2; ++iCbCr) {
40006484:	dc41c117 	ldw	r17,1796(sp)
40006488:	dc01b304 	addi	r16,sp,1740
4000648c:	dd81c415 	stw	r22,1808(sp)
40006490:	dcc10604 	addi	r19,sp,1048
40006494:	0029883a 	mov	r20,zero
                        transform_chroma_dc(&ChromaDCLevel[iCbCr][0],QPc);
                        for(i=0; i<4; ++i)
                            ChromaACLevel[iCbCr][i][0]=ChromaDCLevel[iCbCr][i];
                        for(i=0; i<4; ++i){
                        	send_iqit(&ChromaACLevel[iCbCr][i][0],
40006498:	04800044 	movi	r18,1
                    }
                }
                if(mb.CodedBlockPatternChroma) { ////////////////////// Chroma Residual
                    int iCbCr,i;
                    perf_enter("block entering");
                    for(iCbCr=0; iCbCr<2; ++iCbCr) {
4000649c:	802d883a 	mov	r22,r16
400064a0:	df01c315 	stw	fp,1804(sp)
                        transform_chroma_dc(&ChromaDCLevel[iCbCr][0],QPc);
400064a4:	880b883a 	mov	r5,r17
400064a8:	b009883a 	mov	r4,r22
400064ac:	00008780 	call	40000878 <transform_chroma_dc>
                        for(i=0; i<4; ++i)
                            ChromaACLevel[iCbCr][i][0]=ChromaDCLevel[iCbCr][i];
400064b0:	b1800017 	ldw	r6,0(r22)
400064b4:	b1400117 	ldw	r5,4(r22)
400064b8:	b1000217 	ldw	r4,8(r22)
400064bc:	b0c00317 	ldw	r3,12(r22)
400064c0:	041000b4 	movhi	r16,16386
400064c4:	df01be17 	ldw	fp,1784(sp)
400064c8:	8403d504 	addi	r16,r16,3924
400064cc:	99800015 	stw	r6,0(r19)
400064d0:	99401015 	stw	r5,64(r19)
400064d4:	99002015 	stw	r4,128(r19)
400064d8:	98c03015 	stw	r3,192(r19)
400064dc:	a5000044 	addi	r20,r20,1
400064e0:	85400804 	addi	r21,r16,32
400064e4:	dcc1bb15 	stw	r19,1772(sp)
                        for(i=0; i<4; ++i){
                        	send_iqit(&ChromaACLevel[iCbCr][i][0],
400064e8:	81800117 	ldw	r6,4(r16)
400064ec:	81400017 	ldw	r5,0(r16)
400064f0:	9809883a 	mov	r4,r19
400064f4:	dd000115 	stw	r20,4(sp)
400064f8:	dc800015 	stw	r18,0(sp)
400064fc:	880f883a 	mov	r7,r17
40006500:	e18d883a 	add	r6,fp,r6
40006504:	b94b883a 	add	r5,r23,r5
40006508:	84000204 	addi	r16,r16,8
4000650c:	000035c0 	call	4000035c <send_iqit>
40006510:	9cc01004 	addi	r19,r19,64
                    perf_enter("block entering");
                    for(iCbCr=0; iCbCr<2; ++iCbCr) {
                        transform_chroma_dc(&ChromaDCLevel[iCbCr][0],QPc);
                        for(i=0; i<4; ++i)
                            ChromaACLevel[iCbCr][i][0]=ChromaDCLevel[iCbCr][i];
                        for(i=0; i<4; ++i){
40006514:	ac3ff41e 	bne	r21,r16,400064e8 <__alt_data_end+0xc00064e8>
40006518:	dcc1bb17 	ldw	r19,1772(sp)
                    }
                }
                if(mb.CodedBlockPatternChroma) { ////////////////////// Chroma Residual
                    int iCbCr,i;
                    perf_enter("block entering");
                    for(iCbCr=0; iCbCr<2; ++iCbCr) {
4000651c:	00800084 	movi	r2,2
40006520:	b5800404 	addi	r22,r22,16
40006524:	9cc04004 	addi	r19,r19,256
40006528:	a0bfde1e 	bne	r20,r2,400064a4 <__alt_data_end+0xc00064a4>
4000652c:	dd81c417 	ldw	r22,1808(sp)
40006530:	df01c317 	ldw	fp,1804(sp)
40006534:	00004006 	br	40006638 <decode_slice_data+0x708>
    moreDataFlag=more_rbsp_data(nalu);
    while(moreDataFlag && CurrMbAddr<MbCount) {

        // mb_skip_run ////////////////////////////////////////////////////////////
        if(sh->slice_type!=I_SLICE && sh->slice_type!=SI_SLICE) {
            mb_skip_run=get_unsigned_exp_golomb();
40006538:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
4000653c:	1021883a 	mov	r16,r2
            prevMbSkipped=(mb_skip_run>0);
            for(; mb_skip_run; --mb_skip_run, ++CurrMbAddr) {
40006540:	10003826 	beq	r2,zero,40006624 <decode_slice_data+0x6f4>
                if(CurrMbAddr>=MbCount) return QPy;
40006544:	d8c1bc17 	ldw	r3,1776(sp)
40006548:	b0c0410e 	bge	r22,r3,40006650 <decode_slice_data+0x720>
                mb_pos_x=CurrMbAddr%sps->PicWidthInMbs;
4000654c:	044003c4 	movi	r17,15
                mb_pos_y=CurrMbAddr/sps->PicWidthInMbs;
                ModePredInfo_MbMode(mpi,mb_pos_x,mb_pos_y)=P_Skip;
40006550:	04c03fc4 	movi	r19,255
40006554:	dd01c217 	ldw	r20,1800(sp)
40006558:	00002406 	br	400065ec <decode_slice_data+0x6bc>
        if(sh->slice_type!=I_SLICE && sh->slice_type!=SI_SLICE) {
            mb_skip_run=get_unsigned_exp_golomb();
            prevMbSkipped=(mb_skip_run>0);
            for(; mb_skip_run; --mb_skip_run, ++CurrMbAddr) {
                if(CurrMbAddr>=MbCount) return QPy;
                mb_pos_x=CurrMbAddr%sps->PicWidthInMbs;
4000655c:	10800003 	ldbu	r2,0(r2)
                mb_pos_y=CurrMbAddr/sps->PicWidthInMbs;
40006560:	b006913a 	slli	r3,r22,4
        if(sh->slice_type!=I_SLICE && sh->slice_type!=SI_SLICE) {
            mb_skip_run=get_unsigned_exp_golomb();
            prevMbSkipped=(mb_skip_run>0);
            for(; mb_skip_run; --mb_skip_run, ++CurrMbAddr) {
                if(CurrMbAddr>=MbCount) return QPy;
                mb_pos_x=CurrMbAddr%sps->PicWidthInMbs;
40006564:	15e5383a 	mul	r18,r2,r23
                mb_pos_y=CurrMbAddr/sps->PicWidthInMbs;
40006568:	b009883a 	mov	r4,r22
4000656c:	1dc4b03a 	or	r2,r3,r23
40006570:	00d000b4 	movhi	r3,16386
40006574:	18c3f504 	addi	r3,r3,4052
40006578:	10c5883a 	add	r2,r2,r3
4000657c:	b80b883a 	mov	r5,r23
        if(sh->slice_type!=I_SLICE && sh->slice_type!=SI_SLICE) {
            mb_skip_run=get_unsigned_exp_golomb();
            prevMbSkipped=(mb_skip_run>0);
            for(; mb_skip_run; --mb_skip_run, ++CurrMbAddr) {
                if(CurrMbAddr>=MbCount) return QPy;
                mb_pos_x=CurrMbAddr%sps->PicWidthInMbs;
40006580:	b4a5c83a 	sub	r18,r22,r18
                mb_pos_y=CurrMbAddr/sps->PicWidthInMbs;
40006584:	8d402536 	bltu	r17,r21,4000661c <decode_slice_data+0x6ec>
40006588:	10800003 	ldbu	r2,0(r2)
                ModePredInfo_MbMode(mpi,mb_pos_x,mb_pos_y)=P_Skip;
4000658c:	e0c00217 	ldw	r3,8(fp)
40006590:	e1400317 	ldw	r5,12(fp)
                mb_pos_x<<=4; mb_pos_y<<=4;
40006594:	902a913a 	slli	r21,r18,4
            prevMbSkipped=(mb_skip_run>0);
            for(; mb_skip_run; --mb_skip_run, ++CurrMbAddr) {
                if(CurrMbAddr>=MbCount) return QPy;
                mb_pos_x=CurrMbAddr%sps->PicWidthInMbs;
                mb_pos_y=CurrMbAddr/sps->PicWidthInMbs;
                ModePredInfo_MbMode(mpi,mb_pos_x,mb_pos_y)=P_Skip;
40006598:	10c7383a 	mul	r3,r2,r3
                mb_pos_x<<=4; mb_pos_y<<=4;
4000659c:	102e913a 	slli	r23,r2,4
                Derive_P_Skip_MVs(mpi,mb_pos_x,mb_pos_y);
400065a0:	e009883a 	mov	r4,fp
            prevMbSkipped=(mb_skip_run>0);
            for(; mb_skip_run; --mb_skip_run, ++CurrMbAddr) {
                if(CurrMbAddr>=MbCount) return QPy;
                mb_pos_x=CurrMbAddr%sps->PicWidthInMbs;
                mb_pos_y=CurrMbAddr/sps->PicWidthInMbs;
                ModePredInfo_MbMode(mpi,mb_pos_x,mb_pos_y)=P_Skip;
400065a4:	1ca5883a 	add	r18,r3,r18
400065a8:	94a5883a 	add	r18,r18,r18
400065ac:	94a5883a 	add	r18,r18,r18
400065b0:	2ca5883a 	add	r18,r5,r18
                mb_pos_x<<=4; mb_pos_y<<=4;
                Derive_P_Skip_MVs(mpi,mb_pos_x,mb_pos_y);
400065b4:	b80d883a 	mov	r6,r23
400065b8:	a80b883a 	mov	r5,r21
            prevMbSkipped=(mb_skip_run>0);
            for(; mb_skip_run; --mb_skip_run, ++CurrMbAddr) {
                if(CurrMbAddr>=MbCount) return QPy;
                mb_pos_x=CurrMbAddr%sps->PicWidthInMbs;
                mb_pos_y=CurrMbAddr/sps->PicWidthInMbs;
                ModePredInfo_MbMode(mpi,mb_pos_x,mb_pos_y)=P_Skip;
400065bc:	94c00015 	stw	r19,0(r18)
                mb_pos_x<<=4; mb_pos_y<<=4;
                Derive_P_Skip_MVs(mpi,mb_pos_x,mb_pos_y);
400065c0:	00035400 	call	40003540 <Derive_P_Skip_MVs>
                send_inter_info( 7,          //int addr,
400065c4:	b80f883a 	mov	r7,r23
400065c8:	a80d883a 	mov	r6,r21
400065cc:	e00b883a 	mov	r5,fp
400065d0:	010001c4 	movi	r4,7

        // mb_skip_run ////////////////////////////////////////////////////////////
        if(sh->slice_type!=I_SLICE && sh->slice_type!=SI_SLICE) {
            mb_skip_run=get_unsigned_exp_golomb();
            prevMbSkipped=(mb_skip_run>0);
            for(; mb_skip_run; --mb_skip_run, ++CurrMbAddr) {
400065d4:	843fffc4 	addi	r16,r16,-1
                mb_pos_x=CurrMbAddr%sps->PicWidthInMbs;
                mb_pos_y=CurrMbAddr/sps->PicWidthInMbs;
                ModePredInfo_MbMode(mpi,mb_pos_x,mb_pos_y)=P_Skip;
                mb_pos_x<<=4; mb_pos_y<<=4;
                Derive_P_Skip_MVs(mpi,mb_pos_x,mb_pos_y);
                send_inter_info( 7,          //int addr,
400065d8:	0004e0c0 	call	40004e0c <send_inter_info>

        // mb_skip_run ////////////////////////////////////////////////////////////
        if(sh->slice_type!=I_SLICE && sh->slice_type!=SI_SLICE) {
            mb_skip_run=get_unsigned_exp_golomb();
            prevMbSkipped=(mb_skip_run>0);
            for(; mb_skip_run; --mb_skip_run, ++CurrMbAddr) {
400065dc:	b5800044 	addi	r22,r22,1
400065e0:	80001026 	beq	r16,zero,40006624 <decode_slice_data+0x6f4>
                if(CurrMbAddr>=MbCount) return QPy;
400065e4:	d8c1bc17 	ldw	r3,1776(sp)
400065e8:	1d801926 	beq	r3,r22,40006650 <decode_slice_data+0x720>
                mb_pos_x=CurrMbAddr%sps->PicWidthInMbs;
400065ec:	a5c11217 	ldw	r23,1096(r20)
400065f0:	b004913a 	slli	r2,r22,4
400065f4:	019000b4 	movhi	r6,16386
400065f8:	3183f504 	addi	r6,r6,4052
400065fc:	15c4b03a 	or	r2,r2,r23
40006600:	b5eab03a 	or	r21,r22,r23
40006604:	b009883a 	mov	r4,r22
40006608:	1185883a 	add	r2,r2,r6
4000660c:	b80b883a 	mov	r5,r23
40006610:	8d7fd22e 	bgeu	r17,r21,4000655c <__alt_data_end+0xc000655c>
40006614:	000797c0 	call	4000797c <__divsi3>
40006618:	003fd106 	br	40006560 <__alt_data_end+0xc0006560>
                mb_pos_y=CurrMbAddr/sps->PicWidthInMbs;
4000661c:	000797c0 	call	4000797c <__divsi3>
40006620:	003fda06 	br	4000658c <__alt_data_end+0xc000658c>
								);



            }
            moreDataFlag=more_rbsp_data(nalu);
40006624:	d901c017 	ldw	r4,1792(sp)
40006628:	0003d8c0 	call	40003d8c <more_rbsp_data>
        }
        if(CurrMbAddr>=MbCount) return QPy;
4000662c:	d8c1bc17 	ldw	r3,1776(sp)
40006630:	b0c0070e 	bge	r22,r3,40006650 <decode_slice_data+0x720>

        if(moreDataFlag) {  // macroblock_layer() /////////////////////////////////
40006634:	1003611e 	bne	r2,zero,400073bc <decode_slice_data+0x148c>

                    }
                }
            }
        } ///////////// end of macroblock_layer() /////////////////////////////////
        moreDataFlag=more_rbsp_data(nalu);
40006638:	d901c017 	ldw	r4,1792(sp)
        ++CurrMbAddr;
4000663c:	b5800044 	addi	r22,r22,1

                    }
                }
            }
        } ///////////// end of macroblock_layer() /////////////////////////////////
        moreDataFlag=more_rbsp_data(nalu);
40006640:	0003d8c0 	call	40003d8c <more_rbsp_data>
    clear_mode_pred_info(mpi);
    QPy=sh->SliceQPy;
    QPc=QPy;  // only to prevent a warning

    moreDataFlag=more_rbsp_data(nalu);
    while(moreDataFlag && CurrMbAddr<MbCount) {
40006644:	10000226 	beq	r2,zero,40006650 <decode_slice_data+0x720>
40006648:	d8c1bc17 	ldw	r3,1776(sp)
4000664c:	b0fe6116 	blt	r22,r3,40005fd4 <__alt_data_end+0xc0005fd4>
        moreDataFlag=more_rbsp_data(nalu);
        ++CurrMbAddr;
    } /* while(moreDataFlag && CurrMbAddr<=MbCount) */

    return QPy;
}
40006650:	d881bd17 	ldw	r2,1780(sp)
40006654:	dfc1d417 	ldw	ra,1872(sp)
40006658:	df01d317 	ldw	fp,1868(sp)
4000665c:	ddc1d217 	ldw	r23,1864(sp)
40006660:	dd81d117 	ldw	r22,1860(sp)
40006664:	dd41d017 	ldw	r21,1856(sp)
40006668:	dd01cf17 	ldw	r20,1852(sp)
4000666c:	dcc1ce17 	ldw	r19,1848(sp)
40006670:	dc81cd17 	ldw	r18,1844(sp)
40006674:	dc41cc17 	ldw	r17,1840(sp)
40006678:	dc01cb17 	ldw	r16,1836(sp)
4000667c:	dec1d504 	addi	sp,sp,1876
40006680:	f800283a 	ret
        }
        if(CurrMbAddr>=MbCount) return QPy;

        if(moreDataFlag) {  // macroblock_layer() /////////////////////////////////
            decode_mb_mode(&mb,sh->slice_type,get_unsigned_exp_golomb());
            mb_pos_x=CurrMbAddr%sps->PicWidthInMbs;
40006684:	800b883a 	mov	r5,r16
40006688:	b009883a 	mov	r4,r22
4000668c:	000797c0 	call	4000797c <__divsi3>
40006690:	1427383a 	mul	r19,r2,r16
            mb_pos_y=CurrMbAddr/sps->PicWidthInMbs;
40006694:	008003c4 	movi	r2,15
        }
        if(CurrMbAddr>=MbCount) return QPy;

        if(moreDataFlag) {  // macroblock_layer() /////////////////////////////////
            decode_mb_mode(&mb,sh->slice_type,get_unsigned_exp_golomb());
            mb_pos_x=CurrMbAddr%sps->PicWidthInMbs;
40006698:	b4e7c83a 	sub	r19,r22,r19
            mb_pos_y=CurrMbAddr/sps->PicWidthInMbs;
4000669c:	147e672e 	bgeu	r2,r17,4000603c <__alt_data_end+0xc000603c>
400066a0:	800b883a 	mov	r5,r16
400066a4:	b009883a 	mov	r4,r22
400066a8:	000797c0 	call	4000797c <__divsi3>
400066ac:	003e6906 	br	40006054 <__alt_data_end+0xc0006054>
                        residual_block(&LumaDCLevel[0],16,LumaDC_nC);
                    for(i8x8=0; i8x8<4; ++i8x8)
                        for(i4x4=0; i4x4<4; ++i4x4)
                        if(mb.CodedBlockPatternLuma&(1<<i8x8)) {
                            if(mb.MbPartPredMode[0]==Intra_16x16)
                            LumaAdjust residual_block(&LumaACLevel[i8x8*4+i4x4][1],15,LumaAC_nC);
400066b0:	d8c1be17 	ldw	r3,1784(sp)
400066b4:	a9800017 	ldw	r6,0(r21)
400066b8:	a97fff17 	ldw	r5,-4(r21)
400066bc:	e0800b17 	ldw	r2,44(fp)
400066c0:	198d883a 	add	r6,r3,r6
400066c4:	d8c1bb17 	ldw	r3,1772(sp)
400066c8:	3009d0ba 	srai	r4,r6,2
400066cc:	e4800c17 	ldw	r18,48(fp)
400066d0:	194b883a 	add	r5,r3,r5
400066d4:	2807d0ba 	srai	r3,r5,2
400066d8:	2085383a 	mul	r2,r4,r2
400066dc:	e009883a 	mov	r4,fp
400066e0:	10c5883a 	add	r2,r2,r3
400066e4:	1085883a 	add	r2,r2,r2
400066e8:	1085883a 	add	r2,r2,r2
400066ec:	90a5883a 	add	r18,r18,r2
400066f0:	000293c0 	call	4000293c <get_luma_nC>
400066f4:	100d883a 	mov	r6,r2
400066f8:	014003c4 	movi	r5,15
400066fc:	b809883a 	mov	r4,r23
40006700:	00057580 	call	40005758 <residual_block>
40006704:	90800015 	stw	r2,0(r18)
40006708:	003ef706 	br	400062e8 <__alt_data_end+0xc00062e8>
4000670c:	d8c19a04 	addi	r3,sp,1640
40006710:	d8c1c415 	stw	r3,1808(sp)
                    }
                }

                // coded_block_pattern ////////////////////////////////////////////////
                if(mb.MbPartPredMode[0]!=Intra_16x16) {
                    int coded_block_pattern=get_unsigned_exp_golomb();
40006714:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
                    if(mb.MbPartPredMode[0]==Intra_4x4)
40006718:	dd01ac17 	ldw	r20,1712(sp)
                        coded_block_pattern=CodedBlockPatternMapping_Intra4x4[coded_block_pattern];
4000671c:	1085883a 	add	r2,r2,r2
40006720:	1085883a 	add	r2,r2,r2
                }

                // coded_block_pattern ////////////////////////////////////////////////
                if(mb.MbPartPredMode[0]!=Intra_16x16) {
                    int coded_block_pattern=get_unsigned_exp_golomb();
                    if(mb.MbPartPredMode[0]==Intra_4x4)
40006724:	a000e81e 	bne	r20,zero,40006ac8 <decode_slice_data+0xb98>
                        coded_block_pattern=CodedBlockPatternMapping_Intra4x4[coded_block_pattern];
40006728:	00d000b4 	movhi	r3,16386
4000672c:	18fbd904 	addi	r3,r3,-4252
40006730:	1885883a 	add	r2,r3,r2
40006734:	14c00017 	ldw	r19,0(r2)
                    else
                        coded_block_pattern=CodedBlockPatternMapping_Inter[coded_block_pattern];
                    mb.CodedBlockPatternLuma=coded_block_pattern&15;
                    mb.CodedBlockPatternChroma=coded_block_pattern>>4;
40006738:	9805d13a 	srai	r2,r19,4
                    int coded_block_pattern=get_unsigned_exp_golomb();
                    if(mb.MbPartPredMode[0]==Intra_4x4)
                        coded_block_pattern=CodedBlockPatternMapping_Intra4x4[coded_block_pattern];
                    else
                        coded_block_pattern=CodedBlockPatternMapping_Inter[coded_block_pattern];
                    mb.CodedBlockPatternLuma=coded_block_pattern&15;
4000673c:	9cc003cc 	andi	r19,r19,15
40006740:	dcc1b215 	stw	r19,1736(sp)
                    mb.CodedBlockPatternChroma=coded_block_pattern>>4;
40006744:	d881b115 	stw	r2,1732(sp)
40006748:	003e7b06 	br	40006138 <__alt_data_end+0xc0006138>
									 0,                                //int             luma4x4BlkIdx,
									 0,                                //int             size,
									 0                                 //int             Lwidth
									 );
                }
                else if(mb.MbPartPredMode[0]==Intra_16x16) {  ////// Intra_16x16_Pred
4000674c:	00800044 	movi	r2,1
40006750:	98825526 	beq	r19,r2,400070a8 <decode_slice_data+0x1178>
                    for(i=0; i<4; ++i) for(j=0; j<4; ++j)
                        ModePredInfo_Intra4x4PredMode(mpi,(mb_pos_x>>2)+j,(mb_pos_y>>2)+i)=2;
                	} else { ///////////////////////////////////////////////// Inter_*_Pred
                    int i;

                    perf_enter("inter prediction");
40006754:	011000b4 	movhi	r4,16386
40006758:	2138c104 	addi	r4,r4,-7420
4000675c:	00055880 	call	40005588 <perf_enter>
                    send_inter_info( 7,          //int addr,
40006760:	800f883a 	mov	r7,r16
40006764:	880d883a 	mov	r6,r17
40006768:	e00b883a 	mov	r5,fp
4000676c:	010001c4 	movi	r4,7
40006770:	0004e0c0 	call	40004e0c <send_inter_info>
                    		         mpi,        //mode_pred_info *mpi,
                    		         mb_pos_x,   //int org_x,
                    		         mb_pos_y    //int org_y
                    		        );

                    perf_enter("block entering");
40006774:	011000b4 	movhi	r4,16386
40006778:	2138bd04 	addi	r4,r4,-7436
4000677c:	051000b4 	movhi	r20,16386
40006780:	00055880 	call	40005588 <perf_enter>
40006784:	dc81bd17 	ldw	r18,1780(sp)
40006788:	a503d504 	addi	r20,r20,3924
4000678c:	dd400604 	addi	r21,sp,24
40006790:	a4c02004 	addi	r19,r20,128
                    for(i=0; i<16; ++i) {
                        int x=mb_pos_x+Intra4x4ScanOrder[i][0];
                        int y=mb_pos_y+Intra4x4ScanOrder[i][1];
                        send_iqit(&LumaACLevel[i][0],x,y, QPy, 0, 0);
40006794:	a1800117 	ldw	r6,4(r20)
40006798:	a1400017 	ldw	r5,0(r20)
4000679c:	a809883a 	mov	r4,r21
400067a0:	d8000115 	stw	zero,4(sp)
400067a4:	d8000015 	stw	zero,0(sp)
400067a8:	900f883a 	mov	r7,r18
400067ac:	818d883a 	add	r6,r16,r6
400067b0:	894b883a 	add	r5,r17,r5
400067b4:	a5000204 	addi	r20,r20,8
400067b8:	000035c0 	call	4000035c <send_iqit>
400067bc:	ad401004 	addi	r21,r21,64
                    		         mb_pos_x,   //int org_x,
                    		         mb_pos_y    //int org_y
                    		        );

                    perf_enter("block entering");
                    for(i=0; i<16; ++i) {
400067c0:	9d3ff41e 	bne	r19,r20,40006794 <__alt_data_end+0xc0006794>
400067c4:	003f2706 	br	40006464 <__alt_data_end+0xc0006464>
                mb.MbPartPredMode[0]==Intra_16x16)
                {
                    int i8x8,i4x4,iCbCr,QPi;

                    mb_qp_delta=get_signed_exp_golomb();
                    QPy=(QPy+mb_qp_delta+52)%52;
400067c8:	01400d04 	movi	r5,52
400067cc:	9809883a 	mov	r4,r19
400067d0:	000797c0 	call	4000797c <__divsi3>
400067d4:	003e7c06 	br	400061c8 <__alt_data_end+0xc00061c8>
                            else
                            LumaAdjust residual_block(&LumaACLevel[i8x8*4+i4x4][0],16,LumaAC_nC);
                        };
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        if(mb.CodedBlockPatternChroma&3)
                        residual_block(&ChromaDCLevel[iCbCr][0],4,ChromaDC_nC);
400067d8:	01bfffc4 	movi	r6,-1
400067dc:	b80b883a 	mov	r5,r23
400067e0:	d901b304 	addi	r4,sp,1740
400067e4:	00057580 	call	40005758 <residual_block>
                            LumaAdjust residual_block(&LumaACLevel[i8x8*4+i4x4][1],15,LumaAC_nC);
                            else
                            LumaAdjust residual_block(&LumaACLevel[i8x8*4+i4x4][0],16,LumaAC_nC);
                        };
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        if(mb.CodedBlockPatternChroma&3)
400067e8:	d881b117 	ldw	r2,1732(sp)
400067ec:	10c000cc 	andi	r3,r2,3
400067f0:	183ecd26 	beq	r3,zero,40006328 <__alt_data_end+0xc0006328>
                        residual_block(&ChromaDCLevel[iCbCr][0],4,ChromaDC_nC);
400067f4:	01bfffc4 	movi	r6,-1
400067f8:	b80b883a 	mov	r5,r23
400067fc:	d901b704 	addi	r4,sp,1756
40006800:	00057580 	call	40005758 <residual_block>
40006804:	d881b117 	ldw	r2,1732(sp)
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        for(i4x4=0; i4x4<4; ++i4x4)
                        if(mb.CodedBlockPatternChroma&2)
40006808:	1080008c 	andi	r2,r2,2
4000680c:	103ec826 	beq	r2,zero,40006330 <__alt_data_end+0xc0006330>
                            ChromaAdjust residual_block(&ChromaACLevel[iCbCr][i4x4][1],15,ChromaAC_nC);
40006810:	e0800617 	ldw	r2,24(fp)
40006814:	802fd0fa 	srai	r23,r16,3
40006818:	882bd0fa 	srai	r21,r17,3
4000681c:	e4c00717 	ldw	r19,28(fp)
40006820:	b885383a 	mul	r2,r23,r2
40006824:	000f883a 	mov	r7,zero
40006828:	880b883a 	mov	r5,r17
4000682c:	1545883a 	add	r2,r2,r21
40006830:	1085883a 	add	r2,r2,r2
40006834:	1085883a 	add	r2,r2,r2
40006838:	e009883a 	mov	r4,fp
4000683c:	800d883a 	mov	r6,r16
40006840:	98a7883a 	add	r19,r19,r2
40006844:	00029ec0 	call	400029ec <get_chroma_nC>
40006848:	100d883a 	mov	r6,r2
4000684c:	014003c4 	movi	r5,15
40006850:	d9010704 	addi	r4,sp,1052
40006854:	00057580 	call	40005758 <residual_block>
40006858:	98800015 	stw	r2,0(r19)
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        if(mb.CodedBlockPatternChroma&3)
                        residual_block(&ChromaDCLevel[iCbCr][0],4,ChromaDC_nC);
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        for(i4x4=0; i4x4<4; ++i4x4)
                        if(mb.CodedBlockPatternChroma&2)
4000685c:	d881b117 	ldw	r2,1732(sp)
40006860:	1080008c 	andi	r2,r2,2
40006864:	103eb226 	beq	r2,zero,40006330 <__alt_data_end+0xc0006330>
                            ChromaAdjust residual_block(&ChromaACLevel[iCbCr][i4x4][1],15,ChromaAC_nC);
40006868:	e0800617 	ldw	r2,24(fp)
4000686c:	8cc00204 	addi	r19,r17,8
40006870:	9807d0fa 	srai	r3,r19,3
40006874:	b885383a 	mul	r2,r23,r2
40006878:	e5000717 	ldw	r20,28(fp)
4000687c:	000f883a 	mov	r7,zero
40006880:	10c5883a 	add	r2,r2,r3
40006884:	1085883a 	add	r2,r2,r2
40006888:	1085883a 	add	r2,r2,r2
4000688c:	980b883a 	mov	r5,r19
40006890:	e009883a 	mov	r4,fp
40006894:	800d883a 	mov	r6,r16
40006898:	d8c1bb15 	stw	r3,1772(sp)
4000689c:	a0a9883a 	add	r20,r20,r2
400068a0:	00029ec0 	call	400029ec <get_chroma_nC>
400068a4:	100d883a 	mov	r6,r2
400068a8:	014003c4 	movi	r5,15
400068ac:	d9011704 	addi	r4,sp,1116
400068b0:	00057580 	call	40005758 <residual_block>
400068b4:	a0800015 	stw	r2,0(r20)
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        if(mb.CodedBlockPatternChroma&3)
                        residual_block(&ChromaDCLevel[iCbCr][0],4,ChromaDC_nC);
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        for(i4x4=0; i4x4<4; ++i4x4)
                        if(mb.CodedBlockPatternChroma&2)
400068b8:	d881b117 	ldw	r2,1732(sp)
400068bc:	1080008c 	andi	r2,r2,2
400068c0:	103e9b26 	beq	r2,zero,40006330 <__alt_data_end+0xc0006330>
                            ChromaAdjust residual_block(&ChromaACLevel[iCbCr][i4x4][1],15,ChromaAC_nC);
400068c4:	85000204 	addi	r20,r16,8
400068c8:	e0800617 	ldw	r2,24(fp)
400068cc:	a025d0fa 	srai	r18,r20,3
400068d0:	e0c00717 	ldw	r3,28(fp)
400068d4:	000f883a 	mov	r7,zero
400068d8:	9085383a 	mul	r2,r18,r2
400068dc:	880b883a 	mov	r5,r17
400068e0:	e009883a 	mov	r4,fp
400068e4:	1545883a 	add	r2,r2,r21
400068e8:	1085883a 	add	r2,r2,r2
400068ec:	1085883a 	add	r2,r2,r2
400068f0:	1887883a 	add	r3,r3,r2
400068f4:	a00d883a 	mov	r6,r20
400068f8:	d8c1ca15 	stw	r3,1832(sp)
400068fc:	00029ec0 	call	400029ec <get_chroma_nC>
40006900:	100d883a 	mov	r6,r2
40006904:	014003c4 	movi	r5,15
40006908:	d9012704 	addi	r4,sp,1180
4000690c:	00057580 	call	40005758 <residual_block>
40006910:	d8c1ca17 	ldw	r3,1832(sp)
40006914:	18800015 	stw	r2,0(r3)
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        if(mb.CodedBlockPatternChroma&3)
                        residual_block(&ChromaDCLevel[iCbCr][0],4,ChromaDC_nC);
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        for(i4x4=0; i4x4<4; ++i4x4)
                        if(mb.CodedBlockPatternChroma&2)
40006918:	d881b117 	ldw	r2,1732(sp)
4000691c:	1080008c 	andi	r2,r2,2
40006920:	103e8326 	beq	r2,zero,40006330 <__alt_data_end+0xc0006330>
                            ChromaAdjust residual_block(&ChromaACLevel[iCbCr][i4x4][1],15,ChromaAC_nC);
40006924:	e0800617 	ldw	r2,24(fp)
40006928:	d981bb17 	ldw	r6,1772(sp)
4000692c:	e0c00717 	ldw	r3,28(fp)
40006930:	9085383a 	mul	r2,r18,r2
40006934:	000f883a 	mov	r7,zero
40006938:	980b883a 	mov	r5,r19
4000693c:	1185883a 	add	r2,r2,r6
40006940:	1085883a 	add	r2,r2,r2
40006944:	1085883a 	add	r2,r2,r2
40006948:	1887883a 	add	r3,r3,r2
4000694c:	e009883a 	mov	r4,fp
40006950:	a00d883a 	mov	r6,r20
40006954:	d8c1ca15 	stw	r3,1832(sp)
40006958:	00029ec0 	call	400029ec <get_chroma_nC>
4000695c:	100d883a 	mov	r6,r2
40006960:	014003c4 	movi	r5,15
40006964:	d9013704 	addi	r4,sp,1244
40006968:	00057580 	call	40005758 <residual_block>
4000696c:	d8c1ca17 	ldw	r3,1832(sp)
40006970:	18800015 	stw	r2,0(r3)
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        if(mb.CodedBlockPatternChroma&3)
                        residual_block(&ChromaDCLevel[iCbCr][0],4,ChromaDC_nC);
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        for(i4x4=0; i4x4<4; ++i4x4)
                        if(mb.CodedBlockPatternChroma&2)
40006974:	d881b117 	ldw	r2,1732(sp)
40006978:	1080008c 	andi	r2,r2,2
4000697c:	103e6c26 	beq	r2,zero,40006330 <__alt_data_end+0xc0006330>
                            ChromaAdjust residual_block(&ChromaACLevel[iCbCr][i4x4][1],15,ChromaAC_nC);
40006980:	e0800617 	ldw	r2,24(fp)
40006984:	e0c00817 	ldw	r3,32(fp)
40006988:	01c00044 	movi	r7,1
4000698c:	b885383a 	mul	r2,r23,r2
40006990:	880b883a 	mov	r5,r17
40006994:	e009883a 	mov	r4,fp
40006998:	1545883a 	add	r2,r2,r21
4000699c:	1085883a 	add	r2,r2,r2
400069a0:	1085883a 	add	r2,r2,r2
400069a4:	1887883a 	add	r3,r3,r2
400069a8:	800d883a 	mov	r6,r16
400069ac:	d8c1ca15 	stw	r3,1832(sp)
400069b0:	00029ec0 	call	400029ec <get_chroma_nC>
400069b4:	100d883a 	mov	r6,r2
400069b8:	014003c4 	movi	r5,15
400069bc:	d9014704 	addi	r4,sp,1308
400069c0:	00057580 	call	40005758 <residual_block>
400069c4:	d8c1ca17 	ldw	r3,1832(sp)
400069c8:	18800015 	stw	r2,0(r3)
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        if(mb.CodedBlockPatternChroma&3)
                        residual_block(&ChromaDCLevel[iCbCr][0],4,ChromaDC_nC);
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        for(i4x4=0; i4x4<4; ++i4x4)
                        if(mb.CodedBlockPatternChroma&2)
400069cc:	d881b117 	ldw	r2,1732(sp)
400069d0:	1080008c 	andi	r2,r2,2
400069d4:	103e5626 	beq	r2,zero,40006330 <__alt_data_end+0xc0006330>
                            ChromaAdjust residual_block(&ChromaACLevel[iCbCr][i4x4][1],15,ChromaAC_nC);
400069d8:	e0800617 	ldw	r2,24(fp)
400069dc:	d981bb17 	ldw	r6,1772(sp)
400069e0:	e0c00817 	ldw	r3,32(fp)
400069e4:	b885383a 	mul	r2,r23,r2
400069e8:	01c00044 	movi	r7,1
400069ec:	980b883a 	mov	r5,r19
400069f0:	1185883a 	add	r2,r2,r6
400069f4:	1085883a 	add	r2,r2,r2
400069f8:	e009883a 	mov	r4,fp
400069fc:	1085883a 	add	r2,r2,r2
40006a00:	800d883a 	mov	r6,r16
40006a04:	18af883a 	add	r23,r3,r2
40006a08:	00029ec0 	call	400029ec <get_chroma_nC>
40006a0c:	100d883a 	mov	r6,r2
40006a10:	014003c4 	movi	r5,15
40006a14:	d9015704 	addi	r4,sp,1372
40006a18:	00057580 	call	40005758 <residual_block>
40006a1c:	b8800015 	stw	r2,0(r23)
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        if(mb.CodedBlockPatternChroma&3)
                        residual_block(&ChromaDCLevel[iCbCr][0],4,ChromaDC_nC);
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        for(i4x4=0; i4x4<4; ++i4x4)
                        if(mb.CodedBlockPatternChroma&2)
40006a20:	d881b117 	ldw	r2,1732(sp)
40006a24:	1080008c 	andi	r2,r2,2
40006a28:	103e4126 	beq	r2,zero,40006330 <__alt_data_end+0xc0006330>
                            ChromaAdjust residual_block(&ChromaACLevel[iCbCr][i4x4][1],15,ChromaAC_nC);
40006a2c:	e0800617 	ldw	r2,24(fp)
40006a30:	e5c00817 	ldw	r23,32(fp)
40006a34:	01c00044 	movi	r7,1
40006a38:	9085383a 	mul	r2,r18,r2
40006a3c:	880b883a 	mov	r5,r17
40006a40:	e009883a 	mov	r4,fp
40006a44:	1545883a 	add	r2,r2,r21
40006a48:	1085883a 	add	r2,r2,r2
40006a4c:	1085883a 	add	r2,r2,r2
40006a50:	a00d883a 	mov	r6,r20
40006a54:	b8af883a 	add	r23,r23,r2
40006a58:	00029ec0 	call	400029ec <get_chroma_nC>
40006a5c:	100d883a 	mov	r6,r2
40006a60:	014003c4 	movi	r5,15
40006a64:	d9016704 	addi	r4,sp,1436
40006a68:	00057580 	call	40005758 <residual_block>
40006a6c:	b8800015 	stw	r2,0(r23)
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        if(mb.CodedBlockPatternChroma&3)
                        residual_block(&ChromaDCLevel[iCbCr][0],4,ChromaDC_nC);
                    for(iCbCr=0; iCbCr<2; iCbCr++)
                        for(i4x4=0; i4x4<4; ++i4x4)
                        if(mb.CodedBlockPatternChroma&2)
40006a70:	d881b117 	ldw	r2,1732(sp)
40006a74:	1080008c 	andi	r2,r2,2
40006a78:	103e2d26 	beq	r2,zero,40006330 <__alt_data_end+0xc0006330>
                            ChromaAdjust residual_block(&ChromaACLevel[iCbCr][i4x4][1],15,ChromaAC_nC);
40006a7c:	e0800617 	ldw	r2,24(fp)
40006a80:	d981bb17 	ldw	r6,1772(sp)
40006a84:	e0c00817 	ldw	r3,32(fp)
40006a88:	9085383a 	mul	r2,r18,r2
40006a8c:	980b883a 	mov	r5,r19
40006a90:	01c00044 	movi	r7,1
40006a94:	1185883a 	add	r2,r2,r6
40006a98:	1085883a 	add	r2,r2,r2
40006a9c:	e009883a 	mov	r4,fp
40006aa0:	1085883a 	add	r2,r2,r2
40006aa4:	a00d883a 	mov	r6,r20
40006aa8:	18a7883a 	add	r19,r3,r2
40006aac:	00029ec0 	call	400029ec <get_chroma_nC>
40006ab0:	100d883a 	mov	r6,r2
40006ab4:	014003c4 	movi	r5,15
40006ab8:	d9017704 	addi	r4,sp,1500
40006abc:	00057580 	call	40005758 <residual_block>
40006ac0:	98800015 	stw	r2,0(r19)
40006ac4:	003e1a06 	br	40006330 <__alt_data_end+0xc0006330>
                if(mb.MbPartPredMode[0]!=Intra_16x16) {
                    int coded_block_pattern=get_unsigned_exp_golomb();
                    if(mb.MbPartPredMode[0]==Intra_4x4)
                        coded_block_pattern=CodedBlockPatternMapping_Intra4x4[coded_block_pattern];
                    else
                        coded_block_pattern=CodedBlockPatternMapping_Inter[coded_block_pattern];
40006ac8:	019000b4 	movhi	r6,16386
40006acc:	31bba904 	addi	r6,r6,-4444
40006ad0:	3085883a 	add	r2,r6,r2
40006ad4:	14c00017 	ldw	r19,0(r2)
40006ad8:	003f1706 	br	40006738 <__alt_data_end+0xc0006738>
                    QPi=QPy+pps->chroma_qp_index_offset;
                    QPi=CustomClip(QPi,0,51);
                    if(QPi<30) QPc=QPi;
                            else QPc=QPcTable[QPi-30];
                    // OK, now let's parse the hell out of the stream ;)
                    if(mb.MbPartPredMode[0]==Intra_16x16)
40006adc:	d8c1ac17 	ldw	r3,1712(sp)
                    int i8x8,i4x4,iCbCr,QPi;

                    mb_qp_delta=get_signed_exp_golomb();
                    QPy=(QPy+mb_qp_delta+52)%52;
                    QPi=QPy+pps->chroma_qp_index_offset;
                    QPi=CustomClip(QPi,0,51);
40006ae0:	d801c115 	stw	zero,1796(sp)
                    if(QPi<30) QPc=QPi;
                            else QPc=QPcTable[QPi-30];
                    // OK, now let's parse the hell out of the stream ;)
                    if(mb.MbPartPredMode[0]==Intra_16x16)
40006ae4:	00800044 	movi	r2,1
40006ae8:	18bdd31e 	bne	r3,r2,40006238 <__alt_data_end+0xc0006238>
                        residual_block(&LumaDCLevel[0],16,LumaDC_nC);
40006aec:	880b883a 	mov	r5,r17
40006af0:	e009883a 	mov	r4,fp
40006af4:	800d883a 	mov	r6,r16
40006af8:	000293c0 	call	4000293c <get_luma_nC>
40006afc:	d901c417 	ldw	r4,1808(sp)
40006b00:	100d883a 	mov	r6,r2
40006b04:	01400404 	movi	r5,16
40006b08:	00057580 	call	40005758 <residual_block>
40006b0c:	003dca06 	br	40006238 <__alt_data_end+0xc0006238>
                        intra_chroma_pred_mode=get_unsigned_exp_golomb();
                    } else { // mb_pred() for inter macroblocks /////////////////////////
                        int mbPartIdx;
                        // ignoring ref_idx_* and *_l1 stuff for now -- I do not support
                        // long-term prediction or B-frames anyway ...
                        int SOF=(mb.mb_type==P_L0_L0_16x8)?8:4;
40006b10:	01000204 	movi	r4,8
40006b14:	003d6406 	br	400060a8 <__alt_data_end+0xc00060a8>
                }
                else {  // mb_pred() ////////////////////////////////////////////////
                    if(mb.MbPartPredMode[0]==Intra_4x4 ||
                        mb.MbPartPredMode[0]==Intra_16x16)
                    {  // mb_pred() for intra macroblocks ///////////////////////////////
                        if(mb.MbPartPredMode[0]==Intra_4x4) {
40006b18:	1000411e 	bne	r2,zero,40006c20 <decode_slice_data+0xcf0>
40006b1c:	05d000b4 	movhi	r23,16386
40006b20:	bdc3d504 	addi	r23,r23,3924
40006b24:	bd400104 	addi	r21,r23,4
40006b28:	bd002104 	addi	r20,r23,132
40006b2c:	00001106 	br	40006b74 <decode_slice_data+0xc44>
                            for(luma4x4BlkIdx=0; luma4x4BlkIdx<16; ++luma4x4BlkIdx) {
                                int predIntra4x4PredMode=get_predIntra4x4PredMode(mpi,
                                    mb_pos_x+Intra4x4ScanOrder[luma4x4BlkIdx][0],
                                    mb_pos_y+Intra4x4ScanOrder[luma4x4BlkIdx][1]);
                                if(input_get_one_bit())  // prev_intra4x4_pred_mode_flag
                                Intra4x4PredMode(luma4x4BlkIdx)=predIntra4x4PredMode;
40006b30:	a8800017 	ldw	r2,0(r21)
40006b34:	b8c00017 	ldw	r3,0(r23)
40006b38:	e1000b17 	ldw	r4,44(fp)
40006b3c:	8085883a 	add	r2,r16,r2
40006b40:	1005d0ba 	srai	r2,r2,2
40006b44:	88c7883a 	add	r3,r17,r3
40006b48:	1807d0ba 	srai	r3,r3,2
40006b4c:	1105383a 	mul	r2,r2,r4
40006b50:	e1000d17 	ldw	r4,52(fp)
40006b54:	10c5883a 	add	r2,r2,r3
40006b58:	1085883a 	add	r2,r2,r2
40006b5c:	1085883a 	add	r2,r2,r2
40006b60:	2085883a 	add	r2,r4,r2
40006b64:	14800015 	stw	r18,0(r2)
40006b68:	ad400204 	addi	r21,r21,8
40006b6c:	bdc00204 	addi	r23,r23,8
                    if(mb.MbPartPredMode[0]==Intra_4x4 ||
                        mb.MbPartPredMode[0]==Intra_16x16)
                    {  // mb_pred() for intra macroblocks ///////////////////////////////
                        if(mb.MbPartPredMode[0]==Intra_4x4) {
                        int luma4x4BlkIdx;
                            for(luma4x4BlkIdx=0; luma4x4BlkIdx<16; ++luma4x4BlkIdx) {
40006b70:	a5402b26 	beq	r20,r21,40006c20 <decode_slice_data+0xcf0>
                                int predIntra4x4PredMode=get_predIntra4x4PredMode(mpi,
40006b74:	a9800017 	ldw	r6,0(r21)
40006b78:	b9400017 	ldw	r5,0(r23)
40006b7c:	e009883a 	mov	r4,fp
40006b80:	818d883a 	add	r6,r16,r6
40006b84:	894b883a 	add	r5,r17,r5
40006b88:	0002abc0 	call	40002abc <get_predIntra4x4PredMode>
40006b8c:	1025883a 	mov	r18,r2
                                    mb_pos_x+Intra4x4ScanOrder[luma4x4BlkIdx][0],
                                    mb_pos_y+Intra4x4ScanOrder[luma4x4BlkIdx][1]);
                                if(input_get_one_bit())  // prev_intra4x4_pred_mode_flag
40006b90:	0001a7c0 	call	40001a7c <input_get_one_bit>
40006b94:	103fe61e 	bne	r2,zero,40006b30 <__alt_data_end+0xc0006b30>
                                Intra4x4PredMode(luma4x4BlkIdx)=predIntra4x4PredMode;
                                else {
                                int rem_intra4x4_pred_mode=input_get_bits(3);
40006b98:	010000c4 	movi	r4,3
40006b9c:	0001a040 	call	40001a04 <input_get_bits>
                                if(rem_intra4x4_pred_mode<predIntra4x4PredMode)
                                    Intra4x4PredMode(luma4x4BlkIdx)=rem_intra4x4_pred_mode;
                                else
                                    Intra4x4PredMode(luma4x4BlkIdx)=rem_intra4x4_pred_mode+1;
40006ba0:	11800044 	addi	r6,r2,1
                                    mb_pos_y+Intra4x4ScanOrder[luma4x4BlkIdx][1]);
                                if(input_get_one_bit())  // prev_intra4x4_pred_mode_flag
                                Intra4x4PredMode(luma4x4BlkIdx)=predIntra4x4PredMode;
                                else {
                                int rem_intra4x4_pred_mode=input_get_bits(3);
                                if(rem_intra4x4_pred_mode<predIntra4x4PredMode)
40006ba4:	14800f0e 	bge	r2,r18,40006be4 <decode_slice_data+0xcb4>
                                    Intra4x4PredMode(luma4x4BlkIdx)=rem_intra4x4_pred_mode;
40006ba8:	a9400017 	ldw	r5,0(r21)
40006bac:	b8c00017 	ldw	r3,0(r23)
40006bb0:	e1800b17 	ldw	r6,44(fp)
40006bb4:	814b883a 	add	r5,r16,r5
40006bb8:	280bd0ba 	srai	r5,r5,2
40006bbc:	88c7883a 	add	r3,r17,r3
40006bc0:	1809d0ba 	srai	r4,r3,2
40006bc4:	2987383a 	mul	r3,r5,r6
40006bc8:	e1400d17 	ldw	r5,52(fp)
40006bcc:	1907883a 	add	r3,r3,r4
40006bd0:	18c7883a 	add	r3,r3,r3
40006bd4:	18c7883a 	add	r3,r3,r3
40006bd8:	28c7883a 	add	r3,r5,r3
40006bdc:	18800015 	stw	r2,0(r3)
40006be0:	003fe106 	br	40006b68 <__alt_data_end+0xc0006b68>
                                else
                                    Intra4x4PredMode(luma4x4BlkIdx)=rem_intra4x4_pred_mode+1;
40006be4:	a9000017 	ldw	r4,0(r21)
40006be8:	b8800017 	ldw	r2,0(r23)
40006bec:	e1400b17 	ldw	r5,44(fp)
40006bf0:	8109883a 	add	r4,r16,r4
40006bf4:	2009d0ba 	srai	r4,r4,2
40006bf8:	8885883a 	add	r2,r17,r2
40006bfc:	1007d0ba 	srai	r3,r2,2
40006c00:	2145383a 	mul	r2,r4,r5
40006c04:	e1000d17 	ldw	r4,52(fp)
40006c08:	10c5883a 	add	r2,r2,r3
40006c0c:	1085883a 	add	r2,r2,r2
40006c10:	1085883a 	add	r2,r2,r2
40006c14:	2085883a 	add	r2,r4,r2
40006c18:	11800015 	stw	r6,0(r2)
40006c1c:	003fd206 	br	40006b68 <__alt_data_end+0xc0006b68>
                                }
                            }
                        }
                        intra_chroma_pred_mode=get_unsigned_exp_golomb();
40006c20:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40006c24:	d8c19a04 	addi	r3,sp,1640
40006c28:	d881c615 	stw	r2,1816(sp)
40006c2c:	dd01ac17 	ldw	r20,1712(sp)
40006c30:	d8c1c415 	stw	r3,1808(sp)
40006c34:	003d3d06 	br	4000612c <__alt_data_end+0xc000612c>
                if(mb.MbPartPredMode[0]!=Intra_4x4 &&
                mb.MbPartPredMode[0]!=Intra_16x16 &&
                mb.NumMbPart==4)
                { // sub_mb_pred() ////////////////////////////////////////////////////
                int mbPartIdx,subMbPartIdx;
                for(mbPartIdx=0; mbPartIdx<4; ++mbPartIdx)
40006c38:	dd41bf17 	ldw	r21,1788(sp)
40006c3c:	0029883a 	mov	r20,zero
40006c40:	04c01404 	movi	r19,80
                    decode_sub_mb_mode(&sub[mbPartIdx],sh->slice_type,
40006c44:	ac800117 	ldw	r18,4(r21)
40006c48:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40006c4c:	100d883a 	mov	r6,r2
40006c50:	d8818604 	addi	r2,sp,1560
40006c54:	1509883a 	add	r4,r2,r20
40006c58:	900b883a 	mov	r5,r18
40006c5c:	a5000504 	addi	r20,r20,20
40006c60:	00024940 	call	40002494 <decode_sub_mb_mode>
                if(mb.MbPartPredMode[0]!=Intra_4x4 &&
                mb.MbPartPredMode[0]!=Intra_16x16 &&
                mb.NumMbPart==4)
                { // sub_mb_pred() ////////////////////////////////////////////////////
                int mbPartIdx,subMbPartIdx;
                for(mbPartIdx=0; mbPartIdx<4; ++mbPartIdx)
40006c64:	a4fff71e 	bne	r20,r19,40006c44 <__alt_data_end+0xc0006c44>
40006c68:	00d000b4 	movhi	r3,16386
40006c6c:	18c3d604 	addi	r3,r3,3928
40006c70:	d8c1be15 	stw	r3,1784(sp)
40006c74:	ddc18704 	addi	r23,sp,1564
40006c78:	d8c19a04 	addi	r3,sp,1640
                                    get_unsigned_exp_golomb());
                for(mbPartIdx=0; mbPartIdx<4; ++mbPartIdx)
                    if(sub[mbPartIdx].sub_mb_type!=B_Direct_8x8 &&
                    sub[mbPartIdx].SubMbPredMode!=Pred_L1)
                    { // SOF = "scan order factor"
                    int SOF=(sub[mbPartIdx].sub_mb_type==P_L0_8x4)?2:1;
40006c7c:	dd81c315 	stw	r22,1804(sp)
40006c80:	dd018604 	addi	r20,sp,1560
40006c84:	d8c1c415 	stw	r3,1808(sp)
40006c88:	b82d883a 	mov	r22,r23
                int mbPartIdx,subMbPartIdx;
                for(mbPartIdx=0; mbPartIdx<4; ++mbPartIdx)
                    decode_sub_mb_mode(&sub[mbPartIdx],sh->slice_type,
                                    get_unsigned_exp_golomb());
                for(mbPartIdx=0; mbPartIdx<4; ++mbPartIdx)
                    if(sub[mbPartIdx].sub_mb_type!=B_Direct_8x8 &&
40006c8c:	a0800017 	ldw	r2,0(r20)
40006c90:	01800104 	movi	r6,4
40006c94:	11801d26 	beq	r2,r6,40006d0c <decode_slice_data+0xddc>
40006c98:	b1000117 	ldw	r4,4(r22)
40006c9c:	018000c4 	movi	r6,3
40006ca0:	21801a26 	beq	r4,r6,40006d0c <decode_slice_data+0xddc>
                    sub[mbPartIdx].SubMbPredMode!=Pred_L1)
                    { // SOF = "scan order factor"
                    int SOF=(sub[mbPartIdx].sub_mb_type==P_L0_8x4)?2:1;
                    for(subMbPartIdx=0; subMbPartIdx<sub[mbPartIdx].NumSubMbPart; ++subMbPartIdx) {
40006ca4:	b1000017 	ldw	r4,0(r22)
                                    get_unsigned_exp_golomb());
                for(mbPartIdx=0; mbPartIdx<4; ++mbPartIdx)
                    if(sub[mbPartIdx].sub_mb_type!=B_Direct_8x8 &&
                    sub[mbPartIdx].SubMbPredMode!=Pred_L1)
                    { // SOF = "scan order factor"
                    int SOF=(sub[mbPartIdx].sub_mb_type==P_L0_8x4)?2:1;
40006ca8:	10800058 	cmpnei	r2,r2,1
40006cac:	00c00084 	movi	r3,2
40006cb0:	1885c83a 	sub	r2,r3,r2
                    for(subMbPartIdx=0; subMbPartIdx<sub[mbPartIdx].NumSubMbPart; ++subMbPartIdx) {
40006cb4:	0100150e 	bge	zero,r4,40006d0c <decode_slice_data+0xddc>
40006cb8:	11a6983a 	sll	r19,r2,r6
40006cbc:	dc81be17 	ldw	r18,1784(sp)
40006cc0:	002f883a 	mov	r23,zero
                        int mvdx=get_signed_exp_golomb();
40006cc4:	0000c100 	call	40000c10 <get_signed_exp_golomb>
40006cc8:	102b883a 	mov	r21,r2
                        int mvdy=get_signed_exp_golomb();
40006ccc:	0000c100 	call	40000c10 <get_signed_exp_golomb>
                        DeriveMVs(mpi,
40006cd0:	b0c00317 	ldw	r3,12(r22)
40006cd4:	91800017 	ldw	r6,0(r18)
40006cd8:	917fff17 	ldw	r5,-4(r18)
40006cdc:	d8800215 	stw	r2,8(sp)
40006ce0:	dd400115 	stw	r21,4(sp)
40006ce4:	d8c00015 	stw	r3,0(sp)
40006ce8:	b1c00217 	ldw	r7,8(r22)
40006cec:	818d883a 	add	r6,r16,r6
40006cf0:	894b883a 	add	r5,r17,r5
40006cf4:	e009883a 	mov	r4,fp
40006cf8:	00034380 	call	40003438 <DeriveMVs>
                for(mbPartIdx=0; mbPartIdx<4; ++mbPartIdx)
                    if(sub[mbPartIdx].sub_mb_type!=B_Direct_8x8 &&
                    sub[mbPartIdx].SubMbPredMode!=Pred_L1)
                    { // SOF = "scan order factor"
                    int SOF=(sub[mbPartIdx].sub_mb_type==P_L0_8x4)?2:1;
                    for(subMbPartIdx=0; subMbPartIdx<sub[mbPartIdx].NumSubMbPart; ++subMbPartIdx) {
40006cfc:	b0800017 	ldw	r2,0(r22)
40006d00:	bdc00044 	addi	r23,r23,1
40006d04:	94e5883a 	add	r18,r18,r19
40006d08:	b8bfee16 	blt	r23,r2,40006cc4 <__alt_data_end+0xc0006cc4>
40006d0c:	d8c1be17 	ldw	r3,1784(sp)
40006d10:	a5000504 	addi	r20,r20,20
40006d14:	b5800504 	addi	r22,r22,20
40006d18:	18c00804 	addi	r3,r3,32
40006d1c:	d8c1be15 	stw	r3,1784(sp)
                { // sub_mb_pred() ////////////////////////////////////////////////////
                int mbPartIdx,subMbPartIdx;
                for(mbPartIdx=0; mbPartIdx<4; ++mbPartIdx)
                    decode_sub_mb_mode(&sub[mbPartIdx],sh->slice_type,
                                    get_unsigned_exp_golomb());
                for(mbPartIdx=0; mbPartIdx<4; ++mbPartIdx)
40006d20:	d8c1c417 	ldw	r3,1808(sp)
40006d24:	1d3fd91e 	bne	r3,r20,40006c8c <__alt_data_end+0xc0006c8c>
40006d28:	dd81c317 	ldw	r22,1804(sp)
40006d2c:	dd01ac17 	ldw	r20,1712(sp)
40006d30:	003cfe06 	br	4000612c <__alt_data_end+0xc000612c>
            ModePredInfo_MbMode(mpi,mb_pos_x,mb_pos_y)=mb.mb_type;
            mb_pos_x<<=4; mb_pos_y<<=4;
            if(mb.mb_type==I_PCM) {  // I_PCM macroblock ////////////////////////////
                int x,y,iCbCr;
                unsigned char *pos;
                input_align_to_next_byte();
40006d34:	0001acc0 	call	40001acc <input_align_to_next_byte>
40006d38:	05000404 	movi	r20,16
    clear_mode_pred_info(mpi);
    QPy=sh->SliceQPy;
    QPc=QPy;  // only to prevent a warning

    moreDataFlag=more_rbsp_data(nalu);
    while(moreDataFlag && CurrMbAddr<MbCount) {
40006d3c:	04800404 	movi	r18,16
                		//*pos++=input_get_byte();
                		int x_blk = x/4;
                		int y_blk = y/4;
                		int x_i   = x%4;
                		int y_i   = y%4;
                		data[y_blk][x_blk][y_i][x_i] = input_get_byte();
40006d40:	0001ae80 	call	40001ae8 <input_get_byte>
                		printf("%02X ", data[y_blk][x_blk][y_i][x_i]);
40006d44:	011000b4 	movhi	r4,16386
40006d48:	94bfffc4 	addi	r18,r18,-1
40006d4c:	2138b204 	addi	r4,r4,-7480
40006d50:	11403fcc 	andi	r5,r2,255
40006d54:	000bc900 	call	4000bc90 <printf>
                //pos=&L_pixel(this,mb_pos_x,mb_pos_y);
                uint8_t data[4][4][4][4];
                int data_index = 0;

                for(y=16; y; --y) {
                	for(x=16; x; --x){
40006d58:	903ff91e 	bne	r18,zero,40006d40 <__alt_data_end+0xc0006d40>
40006d5c:	a53fffc4 	addi	r20,r20,-1
                		int y_i   = y%4;
                		data[y_blk][x_blk][y_i][x_i] = input_get_byte();
                		printf("%02X ", data[y_blk][x_blk][y_i][x_i]);
                	}
                	//pos+=this->Lpitch-16;
                	printf("\n");
40006d60:	01000284 	movi	r4,10
40006d64:	000bcd40 	call	4000bcd4 <putchar>
                input_align_to_next_byte();
                //pos=&L_pixel(this,mb_pos_x,mb_pos_y);
                uint8_t data[4][4][4][4];
                int data_index = 0;

                for(y=16; y; --y) {
40006d68:	a03ff41e 	bne	r20,zero,40006d3c <__alt_data_end+0xc0006d3c>
                	//pos+=this->Lpitch-16;
                	printf("\n");
                }
                //send_direct_write(7,mb_pos_x, mb_pos_y, 16, 16, 0, data, 0);

                printf("--------------\n");
40006d6c:	011000b4 	movhi	r4,16386
40006d70:	2138b404 	addi	r4,r4,-7472
40006d74:	05400084 	movi	r21,2
40006d78:	000bdac0 	call	4000bdac <puts>
            ModePredInfo_MbMode(mpi,mb_pos_x,mb_pos_y)=mb.mb_type;
            mb_pos_x<<=4; mb_pos_y<<=4;
            if(mb.mb_type==I_PCM) {  // I_PCM macroblock ////////////////////////////
                int x,y,iCbCr;
                unsigned char *pos;
                input_align_to_next_byte();
40006d7c:	04c00204 	movi	r19,8
40006d80:	04800204 	movi	r18,8
                            //*pos++=input_get_byte();
                        	int x_blk = x/4;
							int y_blk = y/4;
							int x_i   = x%4;
							int y_i   = y%4;
                        	cdata[iCbCr][x_blk][y_blk][x_i][y_i] = input_get_byte();
40006d84:	0001ae80 	call	40001ae8 <input_get_byte>
                        	printf("%02X ", cdata[iCbCr][x_blk][y_blk][x_i][y_i]);
40006d88:	011000b4 	movhi	r4,16386
40006d8c:	94bfffc4 	addi	r18,r18,-1
40006d90:	100b883a 	mov	r5,r2
40006d94:	2138b204 	addi	r4,r4,-7480
40006d98:	000bc900 	call	4000bc90 <printf>
                int cdata[2][2][2][4][4];

                for(iCbCr=0; iCbCr<2; ++iCbCr) {
                    pos=&C_pixel(this,iCbCr,mb_pos_x>>1,mb_pos_y>>1);
                    for(y=8; y; --y) {
                        for(x=8; x; --x){
40006d9c:	903ff91e 	bne	r18,zero,40006d84 <__alt_data_end+0xc0006d84>
40006da0:	9cffffc4 	addi	r19,r19,-1
                        	cdata[iCbCr][x_blk][y_blk][x_i][y_i] = input_get_byte();
                        	printf("%02X ", cdata[iCbCr][x_blk][y_blk][x_i][y_i]);

                        }
                        //pos+=this->Cpitch-8;
                        printf("\n");
40006da4:	01000284 	movi	r4,10
40006da8:	000bcd40 	call	4000bcd4 <putchar>

                int cdata[2][2][2][4][4];

                for(iCbCr=0; iCbCr<2; ++iCbCr) {
                    pos=&C_pixel(this,iCbCr,mb_pos_x>>1,mb_pos_y>>1);
                    for(y=8; y; --y) {
40006dac:	983ff41e 	bne	r19,zero,40006d80 <__alt_data_end+0xc0006d80>
40006db0:	ad7fffc4 	addi	r21,r21,-1
                	}
                }

                int cdata[2][2][2][4][4];

                for(iCbCr=0; iCbCr<2; ++iCbCr) {
40006db4:	a83ff11e 	bne	r21,zero,40006d7c <__alt_data_end+0xc0006d7c>
                        //pos+=this->Cpitch-8;
                        printf("\n");
                    }
                }

                printf("--------------\n");
40006db8:	011000b4 	movhi	r4,16386
40006dbc:	2138b404 	addi	r4,r4,-7472
40006dc0:	000bdac0 	call	4000bdac <puts>


                // fix mode_pred_info->TotalCoeff data
                for(y=0; y<4; ++y)
                    for(x=0; x<4; ++x)
                        ModePredInfo_TotalCoeffL(mpi,(mb_pos_x>>2)+x,(mb_pos_y>>2)+y)=16;
40006dc4:	e1400b17 	ldw	r5,44(fp)
40006dc8:	8019d0ba 	srai	r12,r16,2
40006dcc:	8807d0ba 	srai	r3,r17,2
40006dd0:	e1000c17 	ldw	r4,48(fp)
40006dd4:	614b383a 	mul	r5,r12,r5
40006dd8:	00800404 	movi	r2,16
40006ddc:	1a800044 	addi	r10,r3,1
40006de0:	28cb883a 	add	r5,r5,r3
40006de4:	294b883a 	add	r5,r5,r5
40006de8:	294b883a 	add	r5,r5,r5
40006dec:	214b883a 	add	r5,r4,r5
40006df0:	28800015 	stw	r2,0(r5)
40006df4:	e1400b17 	ldw	r5,44(fp)
40006df8:	1a000084 	addi	r8,r3,2
40006dfc:	198000c4 	addi	r6,r3,3
40006e00:	614b383a 	mul	r5,r12,r5
40006e04:	63800044 	addi	r14,r12,1
40006e08:	63400084 	addi	r13,r12,2
40006e0c:	2a8b883a 	add	r5,r5,r10
40006e10:	294b883a 	add	r5,r5,r5
40006e14:	294b883a 	add	r5,r5,r5
40006e18:	214b883a 	add	r5,r4,r5
40006e1c:	28800015 	stw	r2,0(r5)
40006e20:	e1400b17 	ldw	r5,44(fp)
40006e24:	624000c4 	addi	r9,r12,3
                for(y=0; y<2; ++y)
                    for(x=0; x<2; ++x) {
                    ModePredInfo_TotalCoeffC(mpi,(mb_pos_x>>3)+x,(mb_pos_y>>3)+y,0)=16;
40006e28:	8021d0fa 	srai	r16,r16,3


                // fix mode_pred_info->TotalCoeff data
                for(y=0; y<4; ++y)
                    for(x=0; x<4; ++x)
                        ModePredInfo_TotalCoeffL(mpi,(mb_pos_x>>2)+x,(mb_pos_y>>2)+y)=16;
40006e2c:	614b383a 	mul	r5,r12,r5
                for(y=0; y<2; ++y)
                    for(x=0; x<2; ++x) {
                    ModePredInfo_TotalCoeffC(mpi,(mb_pos_x>>3)+x,(mb_pos_y>>3)+y,0)=16;
40006e30:	8823d0fa 	srai	r17,r17,3
40006e34:	81c00044 	addi	r7,r16,1


                // fix mode_pred_info->TotalCoeff data
                for(y=0; y<4; ++y)
                    for(x=0; x<4; ++x)
                        ModePredInfo_TotalCoeffL(mpi,(mb_pos_x>>2)+x,(mb_pos_y>>2)+y)=16;
40006e38:	2a0b883a 	add	r5,r5,r8
40006e3c:	294b883a 	add	r5,r5,r5
40006e40:	294b883a 	add	r5,r5,r5
40006e44:	214b883a 	add	r5,r4,r5
40006e48:	28800015 	stw	r2,0(r5)
40006e4c:	e2c00b17 	ldw	r11,44(fp)
                for(y=0; y<2; ++y)
                    for(x=0; x<2; ++x) {
                    ModePredInfo_TotalCoeffC(mpi,(mb_pos_x>>3)+x,(mb_pos_y>>3)+y,0)=16;
40006e50:	89400044 	addi	r5,r17,1


                // fix mode_pred_info->TotalCoeff data
                for(y=0; y<4; ++y)
                    for(x=0; x<4; ++x)
                        ModePredInfo_TotalCoeffL(mpi,(mb_pos_x>>2)+x,(mb_pos_y>>2)+y)=16;
40006e54:	62d7383a 	mul	r11,r12,r11
40006e58:	5997883a 	add	r11,r11,r6
40006e5c:	5ad7883a 	add	r11,r11,r11
40006e60:	5ad7883a 	add	r11,r11,r11
40006e64:	22d7883a 	add	r11,r4,r11
40006e68:	58800015 	stw	r2,0(r11)
40006e6c:	e2c00b17 	ldw	r11,44(fp)
40006e70:	72d7383a 	mul	r11,r14,r11
40006e74:	58d7883a 	add	r11,r11,r3
40006e78:	5ad7883a 	add	r11,r11,r11
40006e7c:	5ad7883a 	add	r11,r11,r11
40006e80:	22d7883a 	add	r11,r4,r11
40006e84:	58800015 	stw	r2,0(r11)
40006e88:	e2c00b17 	ldw	r11,44(fp)
40006e8c:	72d7383a 	mul	r11,r14,r11
40006e90:	5a97883a 	add	r11,r11,r10
40006e94:	5ad7883a 	add	r11,r11,r11
40006e98:	5ad7883a 	add	r11,r11,r11
40006e9c:	22d7883a 	add	r11,r4,r11
40006ea0:	58800015 	stw	r2,0(r11)
40006ea4:	e3000b17 	ldw	r12,44(fp)
40006ea8:	7319383a 	mul	r12,r14,r12
40006eac:	6219883a 	add	r12,r12,r8
40006eb0:	6319883a 	add	r12,r12,r12
40006eb4:	6319883a 	add	r12,r12,r12
40006eb8:	2317883a 	add	r11,r4,r12
40006ebc:	58800015 	stw	r2,0(r11)
40006ec0:	e2c00b17 	ldw	r11,44(fp)
40006ec4:	72d7383a 	mul	r11,r14,r11
40006ec8:	5997883a 	add	r11,r11,r6
40006ecc:	5ad7883a 	add	r11,r11,r11
40006ed0:	5ad7883a 	add	r11,r11,r11
40006ed4:	22d7883a 	add	r11,r4,r11
40006ed8:	58800015 	stw	r2,0(r11)
40006edc:	e2c00b17 	ldw	r11,44(fp)
40006ee0:	6ad7383a 	mul	r11,r13,r11
40006ee4:	58d7883a 	add	r11,r11,r3
40006ee8:	5ad7883a 	add	r11,r11,r11
40006eec:	5ad7883a 	add	r11,r11,r11
40006ef0:	22d7883a 	add	r11,r4,r11
40006ef4:	58800015 	stw	r2,0(r11)
40006ef8:	e2c00b17 	ldw	r11,44(fp)
40006efc:	6ad7383a 	mul	r11,r13,r11
40006f00:	5a97883a 	add	r11,r11,r10
40006f04:	5ad7883a 	add	r11,r11,r11
40006f08:	5ad7883a 	add	r11,r11,r11
40006f0c:	22d7883a 	add	r11,r4,r11
40006f10:	58800015 	stw	r2,0(r11)
40006f14:	e3000b17 	ldw	r12,44(fp)
40006f18:	6b19383a 	mul	r12,r13,r12
40006f1c:	6219883a 	add	r12,r12,r8
40006f20:	6319883a 	add	r12,r12,r12
40006f24:	6319883a 	add	r12,r12,r12
40006f28:	2317883a 	add	r11,r4,r12
40006f2c:	58800015 	stw	r2,0(r11)
40006f30:	e2c00b17 	ldw	r11,44(fp)
40006f34:	6ad7383a 	mul	r11,r13,r11
40006f38:	5997883a 	add	r11,r11,r6
40006f3c:	5ad7883a 	add	r11,r11,r11
40006f40:	5ad7883a 	add	r11,r11,r11
40006f44:	22d7883a 	add	r11,r4,r11
40006f48:	58800015 	stw	r2,0(r11)
40006f4c:	e2c00b17 	ldw	r11,44(fp)
40006f50:	4ad7383a 	mul	r11,r9,r11
40006f54:	58c7883a 	add	r3,r11,r3
40006f58:	18c7883a 	add	r3,r3,r3
40006f5c:	18c7883a 	add	r3,r3,r3
40006f60:	20c7883a 	add	r3,r4,r3
40006f64:	18800015 	stw	r2,0(r3)
40006f68:	e0c00b17 	ldw	r3,44(fp)
40006f6c:	48c7383a 	mul	r3,r9,r3
40006f70:	1a95883a 	add	r10,r3,r10
40006f74:	5295883a 	add	r10,r10,r10
40006f78:	5295883a 	add	r10,r10,r10
40006f7c:	2287883a 	add	r3,r4,r10
40006f80:	18800015 	stw	r2,0(r3)
40006f84:	e0c00b17 	ldw	r3,44(fp)
40006f88:	48c7383a 	mul	r3,r9,r3
40006f8c:	1a11883a 	add	r8,r3,r8
40006f90:	4211883a 	add	r8,r8,r8
40006f94:	4211883a 	add	r8,r8,r8
40006f98:	2207883a 	add	r3,r4,r8
40006f9c:	18800015 	stw	r2,0(r3)
40006fa0:	e0c00b17 	ldw	r3,44(fp)
40006fa4:	48d3383a 	mul	r9,r9,r3
40006fa8:	498d883a 	add	r6,r9,r6
40006fac:	318d883a 	add	r6,r6,r6
40006fb0:	318d883a 	add	r6,r6,r6
40006fb4:	2189883a 	add	r4,r4,r6
40006fb8:	20800015 	stw	r2,0(r4)
                for(y=0; y<2; ++y)
                    for(x=0; x<2; ++x) {
                    ModePredInfo_TotalCoeffC(mpi,(mb_pos_x>>3)+x,(mb_pos_y>>3)+y,0)=16;
40006fbc:	e0c00617 	ldw	r3,24(fp)
40006fc0:	e2000717 	ldw	r8,28(fp)
                    ModePredInfo_TotalCoeffC(mpi,(mb_pos_x>>3)+x,(mb_pos_y>>3)+y,1)=16;
40006fc4:	e1800817 	ldw	r6,32(fp)
                for(y=0; y<4; ++y)
                    for(x=0; x<4; ++x)
                        ModePredInfo_TotalCoeffL(mpi,(mb_pos_x>>2)+x,(mb_pos_y>>2)+y)=16;
                for(y=0; y<2; ++y)
                    for(x=0; x<2; ++x) {
                    ModePredInfo_TotalCoeffC(mpi,(mb_pos_x>>3)+x,(mb_pos_y>>3)+y,0)=16;
40006fc8:	80c7383a 	mul	r3,r16,r3
40006fcc:	1c47883a 	add	r3,r3,r17
40006fd0:	18c7883a 	add	r3,r3,r3
40006fd4:	18c7883a 	add	r3,r3,r3
40006fd8:	40c7883a 	add	r3,r8,r3
40006fdc:	18800015 	stw	r2,0(r3)
                    ModePredInfo_TotalCoeffC(mpi,(mb_pos_x>>3)+x,(mb_pos_y>>3)+y,1)=16;
40006fe0:	e0c00617 	ldw	r3,24(fp)
40006fe4:	80c7383a 	mul	r3,r16,r3
40006fe8:	1c47883a 	add	r3,r3,r17
40006fec:	18c7883a 	add	r3,r3,r3
40006ff0:	18c7883a 	add	r3,r3,r3
40006ff4:	30c7883a 	add	r3,r6,r3
40006ff8:	18800015 	stw	r2,0(r3)
                for(y=0; y<4; ++y)
                    for(x=0; x<4; ++x)
                        ModePredInfo_TotalCoeffL(mpi,(mb_pos_x>>2)+x,(mb_pos_y>>2)+y)=16;
                for(y=0; y<2; ++y)
                    for(x=0; x<2; ++x) {
                    ModePredInfo_TotalCoeffC(mpi,(mb_pos_x>>3)+x,(mb_pos_y>>3)+y,0)=16;
40006ffc:	e0c00617 	ldw	r3,24(fp)
40007000:	80c7383a 	mul	r3,r16,r3
40007004:	1947883a 	add	r3,r3,r5
40007008:	18c7883a 	add	r3,r3,r3
4000700c:	18c7883a 	add	r3,r3,r3
40007010:	40c7883a 	add	r3,r8,r3
40007014:	18800015 	stw	r2,0(r3)
                    ModePredInfo_TotalCoeffC(mpi,(mb_pos_x>>3)+x,(mb_pos_y>>3)+y,1)=16;
40007018:	e0c00617 	ldw	r3,24(fp)
4000701c:	80c7383a 	mul	r3,r16,r3
40007020:	1947883a 	add	r3,r3,r5
40007024:	18c7883a 	add	r3,r3,r3
40007028:	18c7883a 	add	r3,r3,r3
4000702c:	30c7883a 	add	r3,r6,r3
40007030:	18800015 	stw	r2,0(r3)
                for(y=0; y<4; ++y)
                    for(x=0; x<4; ++x)
                        ModePredInfo_TotalCoeffL(mpi,(mb_pos_x>>2)+x,(mb_pos_y>>2)+y)=16;
                for(y=0; y<2; ++y)
                    for(x=0; x<2; ++x) {
                    ModePredInfo_TotalCoeffC(mpi,(mb_pos_x>>3)+x,(mb_pos_y>>3)+y,0)=16;
40007034:	e0c00617 	ldw	r3,24(fp)
40007038:	38c7383a 	mul	r3,r7,r3
4000703c:	1c47883a 	add	r3,r3,r17
40007040:	18c7883a 	add	r3,r3,r3
40007044:	18c7883a 	add	r3,r3,r3
40007048:	40c7883a 	add	r3,r8,r3
4000704c:	18800015 	stw	r2,0(r3)
                    ModePredInfo_TotalCoeffC(mpi,(mb_pos_x>>3)+x,(mb_pos_y>>3)+y,1)=16;
40007050:	e0c00617 	ldw	r3,24(fp)
40007054:	38c7383a 	mul	r3,r7,r3
40007058:	1c63883a 	add	r17,r3,r17
4000705c:	8c63883a 	add	r17,r17,r17
40007060:	8c63883a 	add	r17,r17,r17
40007064:	3447883a 	add	r3,r6,r17
40007068:	18800015 	stw	r2,0(r3)
                for(y=0; y<4; ++y)
                    for(x=0; x<4; ++x)
                        ModePredInfo_TotalCoeffL(mpi,(mb_pos_x>>2)+x,(mb_pos_y>>2)+y)=16;
                for(y=0; y<2; ++y)
                    for(x=0; x<2; ++x) {
                    ModePredInfo_TotalCoeffC(mpi,(mb_pos_x>>3)+x,(mb_pos_y>>3)+y,0)=16;
4000706c:	e1000617 	ldw	r4,24(fp)
40007070:	3909383a 	mul	r4,r7,r4
40007074:	2149883a 	add	r4,r4,r5
40007078:	2109883a 	add	r4,r4,r4
4000707c:	2109883a 	add	r4,r4,r4
40007080:	4107883a 	add	r3,r8,r4
40007084:	18800015 	stw	r2,0(r3)
                    ModePredInfo_TotalCoeffC(mpi,(mb_pos_x>>3)+x,(mb_pos_y>>3)+y,1)=16;
40007088:	e0c00617 	ldw	r3,24(fp)
4000708c:	38cf383a 	mul	r7,r7,r3
40007090:	394b883a 	add	r5,r7,r5
40007094:	294b883a 	add	r5,r5,r5
40007098:	294b883a 	add	r5,r5,r5
4000709c:	3147883a 	add	r3,r6,r5
400070a0:	18800015 	stw	r2,0(r3)
400070a4:	003d6406 	br	40006638 <__alt_data_end+0xc0006638>
									 0                                 //int             Lwidth
									 );
                }
                else if(mb.MbPartPredMode[0]==Intra_16x16) {  ////// Intra_16x16_Pred
                    int i,j;
                    perf_enter("intra prediction");
400070a8:	011000b4 	movhi	r4,16386
400070ac:	2138b804 	addi	r4,r4,-7456
400070b0:	00055880 	call	40005588 <perf_enter>
                    send_intra_info( 7,                                //int             addr,
400070b4:	d8c1d517 	ldw	r3,1876(sp)
400070b8:	d981ae17 	ldw	r6,1720(sp)
400070bc:	880f883a 	mov	r7,r17
400070c0:	1a000017 	ldw	r8,0(r3)
400070c4:	d8c1c717 	ldw	r3,1820(sp)
400070c8:	e00b883a 	mov	r5,fp
400070cc:	010001c4 	movi	r4,7
400070d0:	18800017 	ldw	r2,0(r3)
400070d4:	da000515 	stw	r8,20(sp)
400070d8:	02000404 	movi	r8,16
400070dc:	da000415 	stw	r8,16(sp)
400070e0:	d8000315 	stw	zero,12(sp)
400070e4:	d8000215 	stw	zero,8(sp)
400070e8:	d8800115 	stw	r2,4(sp)
400070ec:	dc000015 	stw	r16,0(sp)
400070f0:	0004aa00 	call	40004aa0 <send_intra_info>
									 0,                                //int             LCbCr_select,
									 0,                                //int             luma4x4BlkIdx,
									 16,                               //int             size,
									 this->Lwidth                      //int             Lwidth
									 );
                    perf_enter("block entering");
400070f4:	011000b4 	movhi	r4,16386
400070f8:	2138bd04 	addi	r4,r4,-7436
400070fc:	00055880 	call	40005588 <perf_enter>
                    transform_luma_dc(&LumaDCLevel[0],&LumaACLevel[0][0],QPy);
40007100:	d981bd17 	ldw	r6,1780(sp)
40007104:	d901c417 	ldw	r4,1808(sp)
40007108:	05d000b4 	movhi	r23,16386
4000710c:	bdc3d504 	addi	r23,r23,3924
40007110:	d9400604 	addi	r5,sp,24
40007114:	00004180 	call	40000418 <transform_luma_dc>
40007118:	bc802104 	addi	r18,r23,132
4000711c:	dd81bb15 	stw	r22,1772(sp)
40007120:	dd41c317 	ldw	r21,1804(sp)
40007124:	b82d883a 	mov	r22,r23
40007128:	ddc1bd17 	ldw	r23,1780(sp)
4000712c:	dd000604 	addi	r20,sp,24
                    for(i=0; i<16; ++i) {
                        int x=mb_pos_x+Intra4x4ScanOrder[i][0];
                        int y=mb_pos_y+Intra4x4ScanOrder[i][1];
                        send_iqit(&LumaACLevel[i][0],x,y, QPy, 1, 0);
40007130:	a9800017 	ldw	r6,0(r21)
40007134:	b1400017 	ldw	r5,0(r22)
40007138:	a009883a 	mov	r4,r20
4000713c:	d8000115 	stw	zero,4(sp)
40007140:	dcc00015 	stw	r19,0(sp)
40007144:	b80f883a 	mov	r7,r23
40007148:	818d883a 	add	r6,r16,r6
4000714c:	894b883a 	add	r5,r17,r5
40007150:	ad400204 	addi	r21,r21,8
40007154:	000035c0 	call	4000035c <send_iqit>
40007158:	b5800204 	addi	r22,r22,8
4000715c:	a5001004 	addi	r20,r20,64
									 16,                               //int             size,
									 this->Lwidth                      //int             Lwidth
									 );
                    perf_enter("block entering");
                    transform_luma_dc(&LumaDCLevel[0],&LumaACLevel[0][0],QPy);
                    for(i=0; i<16; ++i) {
40007160:	957ff31e 	bne	r18,r21,40007130 <__alt_data_end+0xc0007130>
                        int x=mb_pos_x+Intra4x4ScanOrder[i][0];
                        int y=mb_pos_y+Intra4x4ScanOrder[i][1];
                        send_iqit(&LumaACLevel[i][0],x,y, QPy, 1, 0);
                    }
                    perf_enter("block entering");
40007164:	011000b4 	movhi	r4,16386
40007168:	2138bd04 	addi	r4,r4,-7436
4000716c:	dd81bb17 	ldw	r22,1772(sp)
40007170:	00055880 	call	40005588 <perf_enter>
                    send_intra_info( 7,                                //int             addr,
40007174:	d981c717 	ldw	r6,1820(sp)
40007178:	8005d07a 	srai	r2,r16,1
4000717c:	880fd07a 	srai	r7,r17,1
40007180:	30c00017 	ldw	r3,0(r6)
40007184:	d981c617 	ldw	r6,1816(sp)
40007188:	01000044 	movi	r4,1
4000718c:	d9000215 	stw	r4,8(sp)
40007190:	d8c00115 	stw	r3,4(sp)
40007194:	e00b883a 	mov	r5,fp
40007198:	010001c4 	movi	r4,7
4000719c:	d8000515 	stw	zero,20(sp)
400071a0:	d8000415 	stw	zero,16(sp)
400071a4:	d8000315 	stw	zero,12(sp)
400071a8:	d8800015 	stw	r2,0(sp)
400071ac:	0004aa00 	call	40004aa0 <send_intra_info>
                    // act as if all transform blocks inside this macroblock were
                    // predicted using the Intra_4x4_DC prediction mode
                    // (without constrained_intra_pred, we'd have to do the same for
                    // inter MBs)
                    for(i=0; i<4; ++i) for(j=0; j<4; ++j)
                        ModePredInfo_Intra4x4PredMode(mpi,(mb_pos_x>>2)+j,(mb_pos_y>>2)+i)=2;
400071b0:	e1400b17 	ldw	r5,44(fp)
400071b4:	8013d0ba 	srai	r9,r16,2
400071b8:	8805d0ba 	srai	r2,r17,2
400071bc:	e1000d17 	ldw	r4,52(fp)
400071c0:	494b383a 	mul	r5,r9,r5
400071c4:	00c00084 	movi	r3,2
400071c8:	11c00044 	addi	r7,r2,1
400071cc:	288b883a 	add	r5,r5,r2
400071d0:	294b883a 	add	r5,r5,r5
400071d4:	294b883a 	add	r5,r5,r5
400071d8:	214b883a 	add	r5,r4,r5
400071dc:	28c00015 	stw	r3,0(r5)
400071e0:	e2000b17 	ldw	r8,44(fp)
400071e4:	10cd883a 	add	r6,r2,r3
400071e8:	4b000044 	addi	r12,r9,1
400071ec:	4a11383a 	mul	r8,r9,r8
400071f0:	48d7883a 	add	r11,r9,r3
400071f4:	481b883a 	mov	r13,r9
400071f8:	41d1883a 	add	r8,r8,r7
400071fc:	4211883a 	add	r8,r8,r8
40007200:	4211883a 	add	r8,r8,r8
40007204:	2211883a 	add	r8,r4,r8
40007208:	40c00015 	stw	r3,0(r8)
4000720c:	e2800b17 	ldw	r10,44(fp)
40007210:	4a0000c4 	addi	r8,r9,3
40007214:	114000c4 	addi	r5,r2,3
40007218:	4a95383a 	mul	r10,r9,r10
4000721c:	5195883a 	add	r10,r10,r6
40007220:	5295883a 	add	r10,r10,r10
40007224:	5295883a 	add	r10,r10,r10
40007228:	2295883a 	add	r10,r4,r10
4000722c:	50c00015 	stw	r3,0(r10)
40007230:	e2400b17 	ldw	r9,44(fp)
40007234:	6a53383a 	mul	r9,r13,r9
40007238:	4953883a 	add	r9,r9,r5
4000723c:	4a53883a 	add	r9,r9,r9
40007240:	4a53883a 	add	r9,r9,r9
40007244:	2253883a 	add	r9,r4,r9
40007248:	48c00015 	stw	r3,0(r9)
4000724c:	e2400b17 	ldw	r9,44(fp)
40007250:	6253383a 	mul	r9,r12,r9
40007254:	4893883a 	add	r9,r9,r2
40007258:	4a53883a 	add	r9,r9,r9
4000725c:	4a53883a 	add	r9,r9,r9
40007260:	2253883a 	add	r9,r4,r9
40007264:	48c00015 	stw	r3,0(r9)
40007268:	e2400b17 	ldw	r9,44(fp)
4000726c:	6253383a 	mul	r9,r12,r9
40007270:	49d3883a 	add	r9,r9,r7
40007274:	4a53883a 	add	r9,r9,r9
40007278:	4a53883a 	add	r9,r9,r9
4000727c:	2253883a 	add	r9,r4,r9
40007280:	48c00015 	stw	r3,0(r9)
40007284:	e2800b17 	ldw	r10,44(fp)
40007288:	6295383a 	mul	r10,r12,r10
4000728c:	5195883a 	add	r10,r10,r6
40007290:	5295883a 	add	r10,r10,r10
40007294:	5295883a 	add	r10,r10,r10
40007298:	2295883a 	add	r10,r4,r10
4000729c:	50c00015 	stw	r3,0(r10)
400072a0:	e2400b17 	ldw	r9,44(fp)
400072a4:	6253383a 	mul	r9,r12,r9
400072a8:	4953883a 	add	r9,r9,r5
400072ac:	4a53883a 	add	r9,r9,r9
400072b0:	4a53883a 	add	r9,r9,r9
400072b4:	2253883a 	add	r9,r4,r9
400072b8:	48c00015 	stw	r3,0(r9)
400072bc:	e2400b17 	ldw	r9,44(fp)
400072c0:	5a53383a 	mul	r9,r11,r9
400072c4:	4893883a 	add	r9,r9,r2
400072c8:	4a53883a 	add	r9,r9,r9
400072cc:	4a53883a 	add	r9,r9,r9
400072d0:	2253883a 	add	r9,r4,r9
400072d4:	48c00015 	stw	r3,0(r9)
400072d8:	e2400b17 	ldw	r9,44(fp)
400072dc:	5a53383a 	mul	r9,r11,r9
400072e0:	49d3883a 	add	r9,r9,r7
400072e4:	4a53883a 	add	r9,r9,r9
400072e8:	4a53883a 	add	r9,r9,r9
400072ec:	2253883a 	add	r9,r4,r9
400072f0:	48c00015 	stw	r3,0(r9)
400072f4:	e2800b17 	ldw	r10,44(fp)
400072f8:	5a95383a 	mul	r10,r11,r10
400072fc:	5195883a 	add	r10,r10,r6
40007300:	5295883a 	add	r10,r10,r10
40007304:	5295883a 	add	r10,r10,r10
40007308:	2295883a 	add	r10,r4,r10
4000730c:	50c00015 	stw	r3,0(r10)
40007310:	e2400b17 	ldw	r9,44(fp)
40007314:	5a53383a 	mul	r9,r11,r9
40007318:	4953883a 	add	r9,r9,r5
4000731c:	4a53883a 	add	r9,r9,r9
40007320:	4a53883a 	add	r9,r9,r9
40007324:	2253883a 	add	r9,r4,r9
40007328:	48c00015 	stw	r3,0(r9)
4000732c:	e2400b17 	ldw	r9,44(fp)
40007330:	4253383a 	mul	r9,r8,r9
40007334:	4885883a 	add	r2,r9,r2
40007338:	1085883a 	add	r2,r2,r2
4000733c:	1085883a 	add	r2,r2,r2
40007340:	2085883a 	add	r2,r4,r2
40007344:	10c00015 	stw	r3,0(r2)
40007348:	e0800b17 	ldw	r2,44(fp)
4000734c:	4085383a 	mul	r2,r8,r2
40007350:	11cf883a 	add	r7,r2,r7
40007354:	39cf883a 	add	r7,r7,r7
40007358:	39cf883a 	add	r7,r7,r7
4000735c:	21c5883a 	add	r2,r4,r7
40007360:	10c00015 	stw	r3,0(r2)
40007364:	e0800b17 	ldw	r2,44(fp)
40007368:	4085383a 	mul	r2,r8,r2
4000736c:	118d883a 	add	r6,r2,r6
40007370:	318d883a 	add	r6,r6,r6
40007374:	318d883a 	add	r6,r6,r6
40007378:	2185883a 	add	r2,r4,r6
4000737c:	10c00015 	stw	r3,0(r2)
40007380:	e0800b17 	ldw	r2,44(fp)
40007384:	4091383a 	mul	r8,r8,r2
40007388:	414b883a 	add	r5,r8,r5
4000738c:	294b883a 	add	r5,r5,r5
40007390:	294b883a 	add	r5,r5,r5
40007394:	2149883a 	add	r4,r4,r5
40007398:	20c00015 	stw	r3,0(r4)
4000739c:	003c3106 	br	40006464 <__alt_data_end+0xc0006464>
                memset(LumaACLevel,0,sizeof(LumaACLevel));
                memset(ChromaDCLevel,0,sizeof(ChromaDCLevel));
                memset(ChromaACLevel,0,sizeof(ChromaACLevel));

                // residual() /////////////////////////////////////////////////////////
                if(mb.CodedBlockPatternLuma>0 || mb.CodedBlockPatternChroma>0 ||
400073a0:	00800044 	movi	r2,1
400073a4:	a0bb7b26 	beq	r20,r2,40006194 <__alt_data_end+0xc0006194>

                //////////////////////////// RENDERING ////////////////////////////////
                // Now that we have all the informations needed about this macroblock,
                // we can go ahead and really render it.

                if(mb.MbPartPredMode[0]==Intra_4x4) {  ///////////////// Intra_4x4_Pred
400073a8:	a03cea1e 	bne	r20,zero,40006754 <__alt_data_end+0xc0006754>
400073ac:	019000b4 	movhi	r6,16386
400073b0:	3183d604 	addi	r6,r6,3928
400073b4:	d981c915 	stw	r6,1828(sp)
400073b8:	003bdf06 	br	40006338 <__alt_data_end+0xc0006338>
400073bc:	d8c1bf17 	ldw	r3,1788(sp)
400073c0:	1c000117 	ldw	r16,4(r3)
400073c4:	003b0906 	br	40005fec <__alt_data_end+0xc0005fec>

400073c8 <decode_slice_header>:


void decode_slice_header(slice_header *sh,
                         seq_parameter_set *sps,
                         pic_parameter_set *pps,
                         nal_unit *nalu) {
400073c8:	defff704 	addi	sp,sp,-36
400073cc:	dc800215 	stw	r18,8(sp)
400073d0:	dc400115 	stw	r17,4(sp)
400073d4:	2825883a 	mov	r18,r5
400073d8:	3023883a 	mov	r17,r6
  memset((void*)sh,0,sizeof(slice_header));
400073dc:	000b883a 	mov	r5,zero
400073e0:	01802204 	movi	r6,136


void decode_slice_header(slice_header *sh,
                         seq_parameter_set *sps,
                         pic_parameter_set *pps,
                         nal_unit *nalu) {
400073e4:	dfc00815 	stw	ra,32(sp)
400073e8:	dd000415 	stw	r20,16(sp)
400073ec:	dcc00315 	stw	r19,12(sp)
400073f0:	3829883a 	mov	r20,r7
400073f4:	dc000015 	stw	r16,0(sp)
400073f8:	ddc00715 	stw	r23,28(sp)
400073fc:	2021883a 	mov	r16,r4
40007400:	dd800615 	stw	r22,24(sp)
40007404:	dd400515 	stw	r21,20(sp)
  memset((void*)sh,0,sizeof(slice_header));
40007408:	000ba440 	call	4000ba44 <memset>
  sh->first_mb_in_slice                      =get_unsigned_exp_golomb();
4000740c:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40007410:	80800015 	stw	r2,0(r16)
  sh->slice_type                             =get_unsigned_exp_golomb()%5;
40007414:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40007418:	1027883a 	mov	r19,r2
4000741c:	00c003c4 	movi	r3,15
40007420:	10800154 	ori	r2,r2,5
40007424:	18808336 	bltu	r3,r2,40007634 <decode_slice_header+0x26c>
40007428:	9804913a 	slli	r2,r19,4
4000742c:	10c00154 	ori	r3,r2,5
40007430:	009000b4 	movhi	r2,16386
40007434:	1083f504 	addi	r2,r2,4052
40007438:	1885883a 	add	r2,r3,r2
4000743c:	10800003 	ldbu	r2,0(r2)
40007440:	10800164 	muli	r2,r2,5
40007444:	98a7c83a 	sub	r19,r19,r2
40007448:	84c00115 	stw	r19,4(r16)
  sh->pic_parameter_set_id                   =get_unsigned_exp_golomb();
4000744c:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
  sh->frame_num                              =input_get_bits(sps->log2_max_frame_num);
40007450:	91000717 	ldw	r4,28(r18)
                         pic_parameter_set *pps,
                         nal_unit *nalu) {
  memset((void*)sh,0,sizeof(slice_header));
  sh->first_mb_in_slice                      =get_unsigned_exp_golomb();
  sh->slice_type                             =get_unsigned_exp_golomb()%5;
  sh->pic_parameter_set_id                   =get_unsigned_exp_golomb();
40007454:	80800215 	stw	r2,8(r16)
  sh->frame_num                              =input_get_bits(sps->log2_max_frame_num);
40007458:	0001a040 	call	40001a04 <input_get_bits>
  if(!sps->frame_mbs_only_flag) {
4000745c:	90c11817 	ldw	r3,1120(r18)
                         nal_unit *nalu) {
  memset((void*)sh,0,sizeof(slice_header));
  sh->first_mb_in_slice                      =get_unsigned_exp_golomb();
  sh->slice_type                             =get_unsigned_exp_golomb()%5;
  sh->pic_parameter_set_id                   =get_unsigned_exp_golomb();
  sh->frame_num                              =input_get_bits(sps->log2_max_frame_num);
40007460:	80800315 	stw	r2,12(r16)
  if(!sps->frame_mbs_only_flag) {
40007464:	18008b26 	beq	r3,zero,40007694 <decode_slice_header+0x2cc>
    sh->field_pic_flag                       =input_get_one_bit();
    if(sh->field_pic_flag)
      sh->bottom_field_flag                  =input_get_one_bit();
  }
  sh->MbaffFrameFlag=(sps->mb_adaptive_frame_field_flag && !sh->field_pic_flag);
40007468:	90811917 	ldw	r2,1124(r18)
4000746c:	1000751e 	bne	r2,zero,40007644 <decode_slice_header+0x27c>
40007470:	80800417 	ldw	r2,16(r16)
40007474:	0007883a 	mov	r3,zero
  sh->PicHeightInMbs=sps->FrameHeightInMbs/(1+sh->field_pic_flag);
40007478:	91011617 	ldw	r4,1112(r18)
4000747c:	11400044 	addi	r5,r2,1
  if(!sps->frame_mbs_only_flag) {
    sh->field_pic_flag                       =input_get_one_bit();
    if(sh->field_pic_flag)
      sh->bottom_field_flag                  =input_get_one_bit();
  }
  sh->MbaffFrameFlag=(sps->mb_adaptive_frame_field_flag && !sh->field_pic_flag);
40007480:	80c00515 	stw	r3,20(r16)
  sh->PicHeightInMbs=sps->FrameHeightInMbs/(1+sh->field_pic_flag);
40007484:	2144b03a 	or	r2,r4,r5
40007488:	00c003c4 	movi	r3,15
4000748c:	18807136 	bltu	r3,r2,40007654 <decode_slice_header+0x28c>
40007490:	2004913a 	slli	r2,r4,4
40007494:	1144b03a 	or	r2,r2,r5
40007498:	015000b4 	movhi	r5,16386
4000749c:	2943f504 	addi	r5,r5,4052
400074a0:	1145883a 	add	r2,r2,r5
400074a4:	10800003 	ldbu	r2,0(r2)
  sh->PicHeightInSamples=(sh->PicHeightInMbs)<<4;
  sh->PicSizeInMbs=sps->PicWidthInMbs*sh->PicHeightInMbs;
400074a8:	90c11217 	ldw	r3,1096(r18)
    if(sh->field_pic_flag)
      sh->bottom_field_flag                  =input_get_one_bit();
  }
  sh->MbaffFrameFlag=(sps->mb_adaptive_frame_field_flag && !sh->field_pic_flag);
  sh->PicHeightInMbs=sps->FrameHeightInMbs/(1+sh->field_pic_flag);
  sh->PicHeightInSamples=(sh->PicHeightInMbs)<<4;
400074ac:	100a913a 	slli	r5,r2,4
  sh->PicSizeInMbs=sps->PicWidthInMbs*sh->PicHeightInMbs;
  if(nalu->nal_unit_type==5)
400074b0:	a1000317 	ldw	r4,12(r20)
      sh->bottom_field_flag                  =input_get_one_bit();
  }
  sh->MbaffFrameFlag=(sps->mb_adaptive_frame_field_flag && !sh->field_pic_flag);
  sh->PicHeightInMbs=sps->FrameHeightInMbs/(1+sh->field_pic_flag);
  sh->PicHeightInSamples=(sh->PicHeightInMbs)<<4;
  sh->PicSizeInMbs=sps->PicWidthInMbs*sh->PicHeightInMbs;
400074b4:	1887383a 	mul	r3,r3,r2
    sh->field_pic_flag                       =input_get_one_bit();
    if(sh->field_pic_flag)
      sh->bottom_field_flag                  =input_get_one_bit();
  }
  sh->MbaffFrameFlag=(sps->mb_adaptive_frame_field_flag && !sh->field_pic_flag);
  sh->PicHeightInMbs=sps->FrameHeightInMbs/(1+sh->field_pic_flag);
400074b8:	80800615 	stw	r2,24(r16)
  sh->PicHeightInSamples=(sh->PicHeightInMbs)<<4;
400074bc:	81400715 	stw	r5,28(r16)
  sh->PicSizeInMbs=sps->PicWidthInMbs*sh->PicHeightInMbs;
400074c0:	80c00815 	stw	r3,32(r16)
  if(nalu->nal_unit_type==5)
400074c4:	00800144 	movi	r2,5
400074c8:	2080bc26 	beq	r4,r2,400077bc <decode_slice_header+0x3f4>
    sh->idr_pic_id                           =get_unsigned_exp_golomb();
  if(sps->pic_order_cnt_type==0) {
400074cc:	90c00917 	ldw	r3,36(r18)
400074d0:	18007726 	beq	r3,zero,400076b0 <decode_slice_header+0x2e8>
    sh->pic_order_cnt_lsb                    =input_get_bits(sps->log2_max_pic_order_cnt_lsb);
    if(pps->pic_order_present_flag && !sh->field_pic_flag)
      sh->delta_pic_order_cnt_bottom         =get_signed_exp_golomb();
  }
  if(sps->pic_order_cnt_type==1 && !sps->delta_pic_order_always_zero_flag) {
400074d4:	00800044 	movi	r2,1
400074d8:	18807f26 	beq	r3,r2,400076d8 <decode_slice_header+0x310>
    sh->delta_pic_order_cnt[0]               =get_signed_exp_golomb();
    if(pps->pic_order_present_flag && !sh->field_pic_flag)
      sh->delta_pic_order_cnt[1]             =get_signed_exp_golomb();
  }
  if(pps->redundant_pic_cnt_present_flag)
400074dc:	00a02a14 	movui	r2,32936
400074e0:	8885883a 	add	r2,r17,r2
400074e4:	10800017 	ldw	r2,0(r2)
400074e8:	1000611e 	bne	r2,zero,40007670 <decode_slice_header+0x2a8>
    sh->redundant_pic_cnt                    =get_unsigned_exp_golomb();
  if(sh->slice_type==B_SLICE)
400074ec:	80c00117 	ldw	r3,4(r16)
400074f0:	00800044 	movi	r2,1
400074f4:	18806326 	beq	r3,r2,40007684 <decode_slice_header+0x2bc>
    sh->direct_spatial_mv_pred_flag          =input_get_one_bit();
  if(sh->slice_type==P_SLICE || sh->slice_type==B_SLICE || sh->slice_type==SP_SLICE) {
400074f8:	00800044 	movi	r2,1
400074fc:	10c0572e 	bgeu	r2,r3,4000765c <decode_slice_header+0x294>
40007500:	008000c4 	movi	r2,3
40007504:	18805526 	beq	r3,r2,4000765c <decode_slice_header+0x294>
      if(sh->slice_type==B_SLICE)
        sh->num_ref_idx_l1_active            =get_unsigned_exp_golomb()+1;
    }
  }
  // ref_pic_list_reordering()
  if(sh->slice_type!=I_SLICE && sh->slice_type!=SI_SLICE) {
40007508:	04800084 	movi	r18,2
4000750c:	1c800826 	beq	r3,r18,40007530 <decode_slice_header+0x168>
40007510:	00800104 	movi	r2,4
40007514:	18800626 	beq	r3,r2,40007530 <decode_slice_header+0x168>
    sh->ref_pic_list_reordering_flag_l0      =input_get_one_bit();
40007518:	0001a7c0 	call	40001a7c <input_get_one_bit>
4000751c:	80801415 	stw	r2,80(r16)
    if(sh->ref_pic_list_reordering_flag_l0)
40007520:	1000b41e 	bne	r2,zero,400077f4 <decode_slice_header+0x42c>
      skip_ref_pic_list_reordering();
  }
  if(sh->slice_type==B_SLICE) {
40007524:	84800117 	ldw	r18,4(r16)
40007528:	00800044 	movi	r2,1
4000752c:	90809326 	beq	r18,r2,4000777c <decode_slice_header+0x3b4>
    sh->ref_pic_list_reordering_flag_l1      =input_get_one_bit();
    if(sh->ref_pic_list_reordering_flag_l1)
      skip_ref_pic_list_reordering();
  }
  if((pps->weighted_pred_flag && (sh->slice_type==P_SLICE || sh->slice_type==SP_SLICE)) ||
40007530:	00a02314 	movui	r2,32908
40007534:	8885883a 	add	r2,r17,r2
40007538:	10800017 	ldw	r2,0(r2)
4000753c:	10000426 	beq	r2,zero,40007550 <decode_slice_header+0x188>
40007540:	80800117 	ldw	r2,4(r16)
40007544:	10007a26 	beq	r2,zero,40007730 <decode_slice_header+0x368>
40007548:	00c000c4 	movi	r3,3
4000754c:	10c07826 	beq	r2,r3,40007730 <decode_slice_header+0x368>
     (pps->weighted_bipred_idc==1 && sh->slice_type==B_SLICE)) {
40007550:	00a02414 	movui	r2,32912
40007554:	8885883a 	add	r2,r17,r2
  if(sh->slice_type==B_SLICE) {
    sh->ref_pic_list_reordering_flag_l1      =input_get_one_bit();
    if(sh->ref_pic_list_reordering_flag_l1)
      skip_ref_pic_list_reordering();
  }
  if((pps->weighted_pred_flag && (sh->slice_type==P_SLICE || sh->slice_type==SP_SLICE)) ||
40007558:	10800017 	ldw	r2,0(r2)
4000755c:	00c00044 	movi	r3,1
40007560:	10c07126 	beq	r2,r3,40007728 <decode_slice_header+0x360>
     (pps->weighted_bipred_idc==1 && sh->slice_type==B_SLICE)) {
    fprintf(stderr,"sorry, I _really_ do not support weighted prediction!\n");
    exit(1);
  }
  if(nalu->nal_ref_idc!=0) {
40007564:	a0800217 	ldw	r2,8(r20)
40007568:	10000626 	beq	r2,zero,40007584 <decode_slice_header+0x1bc>
    // dec_ref_pic_marking()
    if(nalu->nal_unit_type==5) {
4000756c:	a0c00317 	ldw	r3,12(r20)
40007570:	00800144 	movi	r2,5
40007574:	18807c26 	beq	r3,r2,40007768 <decode_slice_header+0x3a0>
      sh->no_output_of_prior_pics_flag       =input_get_one_bit();
      sh->long_term_reference_flag           =input_get_one_bit();
    } else {
      sh->adaptive_ref_pic_marking_mode_flag =input_get_one_bit();
40007578:	0001a7c0 	call	40001a7c <input_get_one_bit>
4000757c:	80801815 	stw	r2,96(r16)
      if(sh->adaptive_ref_pic_marking_mode_flag)
40007580:	1000ab1e 	bne	r2,zero,40007830 <decode_slice_header+0x468>
        skip_adaptive_ref_pic_marking();
    }
  }
  if(pps->entropy_coding_mode_flag && sh->slice_type!=I_SLICE && sh->slice_type!=SI_SLICE)
40007584:	88800217 	ldw	r2,8(r17)
40007588:	10000726 	beq	r2,zero,400075a8 <decode_slice_header+0x1e0>
4000758c:	80800117 	ldw	r2,4(r16)
40007590:	00c00084 	movi	r3,2
40007594:	10c00426 	beq	r2,r3,400075a8 <decode_slice_header+0x1e0>
40007598:	00c00104 	movi	r3,4
4000759c:	10c00226 	beq	r2,r3,400075a8 <decode_slice_header+0x1e0>
    sh->cabac_init_idc                       =get_unsigned_exp_golomb();
400075a0:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
400075a4:	80801915 	stw	r2,100(r16)
  sh->slice_qp_delta                         =get_signed_exp_golomb();
400075a8:	0000c100 	call	40000c10 <get_signed_exp_golomb>
  sh->SliceQPy=pps->pic_init_qp+sh->slice_qp_delta;
400075ac:	00e02514 	movui	r3,32916
400075b0:	88c7883a 	add	r3,r17,r3
400075b4:	19000017 	ldw	r4,0(r3)
  if(sh->slice_type==SP_SLICE || sh->slice_type==SI_SLICE) {
400075b8:	80c00117 	ldw	r3,4(r16)
        skip_adaptive_ref_pic_marking();
    }
  }
  if(pps->entropy_coding_mode_flag && sh->slice_type!=I_SLICE && sh->slice_type!=SI_SLICE)
    sh->cabac_init_idc                       =get_unsigned_exp_golomb();
  sh->slice_qp_delta                         =get_signed_exp_golomb();
400075bc:	80801a15 	stw	r2,104(r16)
  sh->SliceQPy=pps->pic_init_qp+sh->slice_qp_delta;
400075c0:	2085883a 	add	r2,r4,r2
400075c4:	80801b15 	stw	r2,108(r16)
  if(sh->slice_type==SP_SLICE || sh->slice_type==SI_SLICE) {
400075c8:	01000044 	movi	r4,1
400075cc:	18bfff44 	addi	r2,r3,-3
400075d0:	2080602e 	bgeu	r4,r2,40007754 <decode_slice_header+0x38c>
    if(sh->slice_type==SP_SLICE)
      sh->sp_for_switch_flag                 =input_get_one_bit();
    sh->slice_qs_delta                       =get_signed_exp_golomb();
  }
  if(pps->deblocking_filter_control_present_flag) {
400075d4:	00a02814 	movui	r2,32928
400075d8:	8885883a 	add	r2,r17,r2
400075dc:	10800017 	ldw	r2,0(r2)
400075e0:	1000481e 	bne	r2,zero,40007704 <decode_slice_header+0x33c>
    if(sh->disable_deblocking_filter_idc!=1) {
      sh->slice_alpha_c0_offset_div2         =get_signed_exp_golomb();
      sh->slice_beta_offset_div2             =get_signed_exp_golomb();
    }
  }
  if(pps->num_slice_groups>1 && pps->slice_group_map_type>=3 && pps->slice_group_map_type<=5)
400075e4:	88800417 	ldw	r2,16(r17)
400075e8:	00c00044 	movi	r3,1
400075ec:	1880060e 	bge	r3,r2,40007608 <decode_slice_header+0x240>
400075f0:	88800517 	ldw	r2,20(r17)
400075f4:	00c00084 	movi	r3,2
400075f8:	10bfff44 	addi	r2,r2,-3
400075fc:	18800236 	bltu	r3,r2,40007608 <decode_slice_header+0x240>
    sh->slice_group_change_cycle             =get_unsigned_exp_golomb();
40007600:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40007604:	80802115 	stw	r2,132(r16)
}
40007608:	dfc00817 	ldw	ra,32(sp)
4000760c:	ddc00717 	ldw	r23,28(sp)
40007610:	dd800617 	ldw	r22,24(sp)
40007614:	dd400517 	ldw	r21,20(sp)
40007618:	dd000417 	ldw	r20,16(sp)
4000761c:	dcc00317 	ldw	r19,12(sp)
40007620:	dc800217 	ldw	r18,8(sp)
40007624:	dc400117 	ldw	r17,4(sp)
40007628:	dc000017 	ldw	r16,0(sp)
4000762c:	dec00904 	addi	sp,sp,36
40007630:	f800283a 	ret
                         seq_parameter_set *sps,
                         pic_parameter_set *pps,
                         nal_unit *nalu) {
  memset((void*)sh,0,sizeof(slice_header));
  sh->first_mb_in_slice                      =get_unsigned_exp_golomb();
  sh->slice_type                             =get_unsigned_exp_golomb()%5;
40007634:	01400144 	movi	r5,5
40007638:	9809883a 	mov	r4,r19
4000763c:	000797c0 	call	4000797c <__divsi3>
40007640:	003f7f06 	br	40007440 <__alt_data_end+0xc0007440>
  if(!sps->frame_mbs_only_flag) {
    sh->field_pic_flag                       =input_get_one_bit();
    if(sh->field_pic_flag)
      sh->bottom_field_flag                  =input_get_one_bit();
  }
  sh->MbaffFrameFlag=(sps->mb_adaptive_frame_field_flag && !sh->field_pic_flag);
40007644:	80800417 	ldw	r2,16(r16)
40007648:	103f8a1e 	bne	r2,zero,40007474 <__alt_data_end+0xc0007474>
4000764c:	00c00044 	movi	r3,1
40007650:	003f8906 	br	40007478 <__alt_data_end+0xc0007478>
  sh->PicHeightInMbs=sps->FrameHeightInMbs/(1+sh->field_pic_flag);
40007654:	000797c0 	call	4000797c <__divsi3>
40007658:	003f9306 	br	400074a8 <__alt_data_end+0xc00074a8>
  if(pps->redundant_pic_cnt_present_flag)
    sh->redundant_pic_cnt                    =get_unsigned_exp_golomb();
  if(sh->slice_type==B_SLICE)
    sh->direct_spatial_mv_pred_flag          =input_get_one_bit();
  if(sh->slice_type==P_SLICE || sh->slice_type==B_SLICE || sh->slice_type==SP_SLICE) {
    sh->num_ref_idx_active_override_flag     =input_get_one_bit();
4000765c:	0001a7c0 	call	40001a7c <input_get_one_bit>
40007660:	80801115 	stw	r2,68(r16)
    if(sh->num_ref_idx_active_override_flag) {
40007664:	1000581e 	bne	r2,zero,400077c8 <decode_slice_header+0x400>
40007668:	80c00117 	ldw	r3,4(r16)
4000766c:	003fa606 	br	40007508 <__alt_data_end+0xc0007508>
    sh->delta_pic_order_cnt[0]               =get_signed_exp_golomb();
    if(pps->pic_order_present_flag && !sh->field_pic_flag)
      sh->delta_pic_order_cnt[1]             =get_signed_exp_golomb();
  }
  if(pps->redundant_pic_cnt_present_flag)
    sh->redundant_pic_cnt                    =get_unsigned_exp_golomb();
40007670:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
  if(sh->slice_type==B_SLICE)
40007674:	80c00117 	ldw	r3,4(r16)
    sh->delta_pic_order_cnt[0]               =get_signed_exp_golomb();
    if(pps->pic_order_present_flag && !sh->field_pic_flag)
      sh->delta_pic_order_cnt[1]             =get_signed_exp_golomb();
  }
  if(pps->redundant_pic_cnt_present_flag)
    sh->redundant_pic_cnt                    =get_unsigned_exp_golomb();
40007678:	80800f15 	stw	r2,60(r16)
  if(sh->slice_type==B_SLICE)
4000767c:	00800044 	movi	r2,1
40007680:	18bf9d1e 	bne	r3,r2,400074f8 <__alt_data_end+0xc00074f8>
    sh->direct_spatial_mv_pred_flag          =input_get_one_bit();
40007684:	0001a7c0 	call	40001a7c <input_get_one_bit>
40007688:	80c00117 	ldw	r3,4(r16)
4000768c:	80801015 	stw	r2,64(r16)
40007690:	003f9906 	br	400074f8 <__alt_data_end+0xc00074f8>
  sh->first_mb_in_slice                      =get_unsigned_exp_golomb();
  sh->slice_type                             =get_unsigned_exp_golomb()%5;
  sh->pic_parameter_set_id                   =get_unsigned_exp_golomb();
  sh->frame_num                              =input_get_bits(sps->log2_max_frame_num);
  if(!sps->frame_mbs_only_flag) {
    sh->field_pic_flag                       =input_get_one_bit();
40007694:	0001a7c0 	call	40001a7c <input_get_one_bit>
40007698:	80800415 	stw	r2,16(r16)
    if(sh->field_pic_flag)
4000769c:	1000831e 	bne	r2,zero,400078ac <decode_slice_header+0x4e4>
      sh->bottom_field_flag                  =input_get_one_bit();
  }
  sh->MbaffFrameFlag=(sps->mb_adaptive_frame_field_flag && !sh->field_pic_flag);
400076a0:	90c11917 	ldw	r3,1124(r18)
400076a4:	183f7326 	beq	r3,zero,40007474 <__alt_data_end+0xc0007474>
400076a8:	00c00044 	movi	r3,1
400076ac:	003f7206 	br	40007478 <__alt_data_end+0xc0007478>
  sh->PicHeightInSamples=(sh->PicHeightInMbs)<<4;
  sh->PicSizeInMbs=sps->PicWidthInMbs*sh->PicHeightInMbs;
  if(nalu->nal_unit_type==5)
    sh->idr_pic_id                           =get_unsigned_exp_golomb();
  if(sps->pic_order_cnt_type==0) {
    sh->pic_order_cnt_lsb                    =input_get_bits(sps->log2_max_pic_order_cnt_lsb);
400076b0:	91000a17 	ldw	r4,40(r18)
400076b4:	0001a040 	call	40001a04 <input_get_bits>
    if(pps->pic_order_present_flag && !sh->field_pic_flag)
400076b8:	88c00317 	ldw	r3,12(r17)
  sh->PicHeightInSamples=(sh->PicHeightInMbs)<<4;
  sh->PicSizeInMbs=sps->PicWidthInMbs*sh->PicHeightInMbs;
  if(nalu->nal_unit_type==5)
    sh->idr_pic_id                           =get_unsigned_exp_golomb();
  if(sps->pic_order_cnt_type==0) {
    sh->pic_order_cnt_lsb                    =input_get_bits(sps->log2_max_pic_order_cnt_lsb);
400076bc:	80800b15 	stw	r2,44(r16)
    if(pps->pic_order_present_flag && !sh->field_pic_flag)
400076c0:	18000226 	beq	r3,zero,400076cc <decode_slice_header+0x304>
400076c4:	80800417 	ldw	r2,16(r16)
400076c8:	10007b26 	beq	r2,zero,400078b8 <decode_slice_header+0x4f0>
400076cc:	90c00917 	ldw	r3,36(r18)
      sh->delta_pic_order_cnt_bottom         =get_signed_exp_golomb();
  }
  if(sps->pic_order_cnt_type==1 && !sps->delta_pic_order_always_zero_flag) {
400076d0:	00800044 	movi	r2,1
400076d4:	18bf811e 	bne	r3,r2,400074dc <__alt_data_end+0xc00074dc>
400076d8:	90800c17 	ldw	r2,48(r18)
400076dc:	103f7f1e 	bne	r2,zero,400074dc <__alt_data_end+0xc00074dc>
    sh->delta_pic_order_cnt[0]               =get_signed_exp_golomb();
400076e0:	0000c100 	call	40000c10 <get_signed_exp_golomb>
    if(pps->pic_order_present_flag && !sh->field_pic_flag)
400076e4:	88c00317 	ldw	r3,12(r17)
    sh->pic_order_cnt_lsb                    =input_get_bits(sps->log2_max_pic_order_cnt_lsb);
    if(pps->pic_order_present_flag && !sh->field_pic_flag)
      sh->delta_pic_order_cnt_bottom         =get_signed_exp_golomb();
  }
  if(sps->pic_order_cnt_type==1 && !sps->delta_pic_order_always_zero_flag) {
    sh->delta_pic_order_cnt[0]               =get_signed_exp_golomb();
400076e8:	80800d15 	stw	r2,52(r16)
    if(pps->pic_order_present_flag && !sh->field_pic_flag)
400076ec:	183f7b26 	beq	r3,zero,400074dc <__alt_data_end+0xc00074dc>
400076f0:	80800417 	ldw	r2,16(r16)
400076f4:	103f791e 	bne	r2,zero,400074dc <__alt_data_end+0xc00074dc>
      sh->delta_pic_order_cnt[1]             =get_signed_exp_golomb();
400076f8:	0000c100 	call	40000c10 <get_signed_exp_golomb>
400076fc:	80800e15 	stw	r2,56(r16)
40007700:	003f7606 	br	400074dc <__alt_data_end+0xc00074dc>
    if(sh->slice_type==SP_SLICE)
      sh->sp_for_switch_flag                 =input_get_one_bit();
    sh->slice_qs_delta                       =get_signed_exp_golomb();
  }
  if(pps->deblocking_filter_control_present_flag) {
    sh->disable_deblocking_filter_idc        =get_unsigned_exp_golomb();
40007704:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40007708:	80801e15 	stw	r2,120(r16)
    if(sh->disable_deblocking_filter_idc!=1) {
4000770c:	00c00044 	movi	r3,1
40007710:	10ffb426 	beq	r2,r3,400075e4 <__alt_data_end+0xc00075e4>
      sh->slice_alpha_c0_offset_div2         =get_signed_exp_golomb();
40007714:	0000c100 	call	40000c10 <get_signed_exp_golomb>
40007718:	80801f15 	stw	r2,124(r16)
      sh->slice_beta_offset_div2             =get_signed_exp_golomb();
4000771c:	0000c100 	call	40000c10 <get_signed_exp_golomb>
40007720:	80802015 	stw	r2,128(r16)
40007724:	003faf06 	br	400075e4 <__alt_data_end+0xc00075e4>
    sh->ref_pic_list_reordering_flag_l1      =input_get_one_bit();
    if(sh->ref_pic_list_reordering_flag_l1)
      skip_ref_pic_list_reordering();
  }
  if((pps->weighted_pred_flag && (sh->slice_type==P_SLICE || sh->slice_type==SP_SLICE)) ||
     (pps->weighted_bipred_idc==1 && sh->slice_type==B_SLICE)) {
40007728:	80c00117 	ldw	r3,4(r16)
4000772c:	18bf8d1e 	bne	r3,r2,40007564 <__alt_data_end+0xc0007564>
    fprintf(stderr,"sorry, I _really_ do not support weighted prediction!\n");
40007730:	d0a00117 	ldw	r2,-32764(gp)
40007734:	011000b4 	movhi	r4,16386
40007738:	2138e004 	addi	r4,r4,-7296
4000773c:	11c00317 	ldw	r7,12(r2)
40007740:	01800d84 	movi	r6,54
40007744:	01400044 	movi	r5,1
40007748:	000aed80 	call	4000aed8 <fwrite>
    exit(1);
4000774c:	01000044 	movi	r4,1
40007750:	00097200 	call	40009720 <exit>
  if(pps->entropy_coding_mode_flag && sh->slice_type!=I_SLICE && sh->slice_type!=SI_SLICE)
    sh->cabac_init_idc                       =get_unsigned_exp_golomb();
  sh->slice_qp_delta                         =get_signed_exp_golomb();
  sh->SliceQPy=pps->pic_init_qp+sh->slice_qp_delta;
  if(sh->slice_type==SP_SLICE || sh->slice_type==SI_SLICE) {
    if(sh->slice_type==SP_SLICE)
40007754:	008000c4 	movi	r2,3
40007758:	18805d26 	beq	r3,r2,400078d0 <decode_slice_header+0x508>
      sh->sp_for_switch_flag                 =input_get_one_bit();
    sh->slice_qs_delta                       =get_signed_exp_golomb();
4000775c:	0000c100 	call	40000c10 <get_signed_exp_golomb>
40007760:	80801d15 	stw	r2,116(r16)
40007764:	003f9b06 	br	400075d4 <__alt_data_end+0xc00075d4>
    exit(1);
  }
  if(nalu->nal_ref_idc!=0) {
    // dec_ref_pic_marking()
    if(nalu->nal_unit_type==5) {
      sh->no_output_of_prior_pics_flag       =input_get_one_bit();
40007768:	0001a7c0 	call	40001a7c <input_get_one_bit>
4000776c:	80801615 	stw	r2,88(r16)
      sh->long_term_reference_flag           =input_get_one_bit();
40007770:	0001a7c0 	call	40001a7c <input_get_one_bit>
40007774:	80801715 	stw	r2,92(r16)
40007778:	003f8206 	br	40007584 <__alt_data_end+0xc0007584>
    sh->ref_pic_list_reordering_flag_l0      =input_get_one_bit();
    if(sh->ref_pic_list_reordering_flag_l0)
      skip_ref_pic_list_reordering();
  }
  if(sh->slice_type==B_SLICE) {
    sh->ref_pic_list_reordering_flag_l1      =input_get_one_bit();
4000777c:	0001a7c0 	call	40001a7c <input_get_one_bit>
40007780:	80801515 	stw	r2,84(r16)
    if(sh->ref_pic_list_reordering_flag_l1)
40007784:	103f6a26 	beq	r2,zero,40007530 <__alt_data_end+0xc0007530>

static void skip_ref_pic_list_reordering() {
  int reordering_of_pic_nums_idc;
  int abs_diff_pic_num;
  int long_term_pic_num;
  fprintf(stderr,"Warning: I do not support reference picture list reordering.\n"
40007788:	d0a00117 	ldw	r2,-32764(gp)
4000778c:	011000b4 	movhi	r4,16386
40007790:	900b883a 	mov	r5,r18
40007794:	11c00317 	ldw	r7,12(r2)
40007798:	2138c604 	addi	r4,r4,-7400
4000779c:	01801944 	movi	r6,101
                 "         Watch out for decoding errors!\n");
  do {
    reordering_of_pic_nums_idc=get_unsigned_exp_golomb();
    if(reordering_of_pic_nums_idc==0 || reordering_of_pic_nums_idc==1)
400077a0:	04800084 	movi	r18,2

static void skip_ref_pic_list_reordering() {
  int reordering_of_pic_nums_idc;
  int abs_diff_pic_num;
  int long_term_pic_num;
  fprintf(stderr,"Warning: I do not support reference picture list reordering.\n"
400077a4:	000aed80 	call	4000aed8 <fwrite>
    reordering_of_pic_nums_idc=get_unsigned_exp_golomb();
    if(reordering_of_pic_nums_idc==0 || reordering_of_pic_nums_idc==1)
      abs_diff_pic_num=get_unsigned_exp_golomb()+1;
    else if(reordering_of_pic_nums_idc==2)
      long_term_pic_num=get_unsigned_exp_golomb();
  } while(reordering_of_pic_nums_idc!=3);
400077a8:	04c000c4 	movi	r19,3
  int abs_diff_pic_num;
  int long_term_pic_num;
  fprintf(stderr,"Warning: I do not support reference picture list reordering.\n"
                 "         Watch out for decoding errors!\n");
  do {
    reordering_of_pic_nums_idc=get_unsigned_exp_golomb();
400077ac:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
    if(reordering_of_pic_nums_idc==0 || reordering_of_pic_nums_idc==1)
400077b0:	9080452e 	bgeu	r18,r2,400078c8 <decode_slice_header+0x500>
      abs_diff_pic_num=get_unsigned_exp_golomb()+1;
    else if(reordering_of_pic_nums_idc==2)
      long_term_pic_num=get_unsigned_exp_golomb();
  } while(reordering_of_pic_nums_idc!=3);
400077b4:	14fffd1e 	bne	r2,r19,400077ac <__alt_data_end+0xc00077ac>
400077b8:	003f5d06 	br	40007530 <__alt_data_end+0xc0007530>
  sh->MbaffFrameFlag=(sps->mb_adaptive_frame_field_flag && !sh->field_pic_flag);
  sh->PicHeightInMbs=sps->FrameHeightInMbs/(1+sh->field_pic_flag);
  sh->PicHeightInSamples=(sh->PicHeightInMbs)<<4;
  sh->PicSizeInMbs=sps->PicWidthInMbs*sh->PicHeightInMbs;
  if(nalu->nal_unit_type==5)
    sh->idr_pic_id                           =get_unsigned_exp_golomb();
400077bc:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
400077c0:	80800a15 	stw	r2,40(r16)
400077c4:	003f4106 	br	400074cc <__alt_data_end+0xc00074cc>
  if(sh->slice_type==B_SLICE)
    sh->direct_spatial_mv_pred_flag          =input_get_one_bit();
  if(sh->slice_type==P_SLICE || sh->slice_type==B_SLICE || sh->slice_type==SP_SLICE) {
    sh->num_ref_idx_active_override_flag     =input_get_one_bit();
    if(sh->num_ref_idx_active_override_flag) {
      sh->num_ref_idx_l0_active              =get_unsigned_exp_golomb()+1;
400077c8:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
      if(sh->slice_type==B_SLICE)
400077cc:	80c00117 	ldw	r3,4(r16)
  if(sh->slice_type==B_SLICE)
    sh->direct_spatial_mv_pred_flag          =input_get_one_bit();
  if(sh->slice_type==P_SLICE || sh->slice_type==B_SLICE || sh->slice_type==SP_SLICE) {
    sh->num_ref_idx_active_override_flag     =input_get_one_bit();
    if(sh->num_ref_idx_active_override_flag) {
      sh->num_ref_idx_l0_active              =get_unsigned_exp_golomb()+1;
400077d0:	10800044 	addi	r2,r2,1
400077d4:	80801215 	stw	r2,72(r16)
      if(sh->slice_type==B_SLICE)
400077d8:	00800044 	movi	r2,1
400077dc:	18bf4a1e 	bne	r3,r2,40007508 <__alt_data_end+0xc0007508>
        sh->num_ref_idx_l1_active            =get_unsigned_exp_golomb()+1;
400077e0:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
400077e4:	10800044 	addi	r2,r2,1
400077e8:	80c00117 	ldw	r3,4(r16)
400077ec:	80801315 	stw	r2,76(r16)
400077f0:	003f4506 	br	40007508 <__alt_data_end+0xc0007508>

static void skip_ref_pic_list_reordering() {
  int reordering_of_pic_nums_idc;
  int abs_diff_pic_num;
  int long_term_pic_num;
  fprintf(stderr,"Warning: I do not support reference picture list reordering.\n"
400077f4:	d0a00117 	ldw	r2,-32764(gp)
400077f8:	011000b4 	movhi	r4,16386
400077fc:	2138c604 	addi	r4,r4,-7400
40007800:	11c00317 	ldw	r7,12(r2)
40007804:	01801944 	movi	r6,101
40007808:	01400044 	movi	r5,1
4000780c:	000aed80 	call	4000aed8 <fwrite>
    reordering_of_pic_nums_idc=get_unsigned_exp_golomb();
    if(reordering_of_pic_nums_idc==0 || reordering_of_pic_nums_idc==1)
      abs_diff_pic_num=get_unsigned_exp_golomb()+1;
    else if(reordering_of_pic_nums_idc==2)
      long_term_pic_num=get_unsigned_exp_golomb();
  } while(reordering_of_pic_nums_idc!=3);
40007810:	04c000c4 	movi	r19,3
  int abs_diff_pic_num;
  int long_term_pic_num;
  fprintf(stderr,"Warning: I do not support reference picture list reordering.\n"
                 "         Watch out for decoding errors!\n");
  do {
    reordering_of_pic_nums_idc=get_unsigned_exp_golomb();
40007814:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
    if(reordering_of_pic_nums_idc==0 || reordering_of_pic_nums_idc==1)
40007818:	9080032e 	bgeu	r18,r2,40007828 <decode_slice_header+0x460>
      abs_diff_pic_num=get_unsigned_exp_golomb()+1;
    else if(reordering_of_pic_nums_idc==2)
      long_term_pic_num=get_unsigned_exp_golomb();
  } while(reordering_of_pic_nums_idc!=3);
4000781c:	14ff4126 	beq	r2,r19,40007524 <__alt_data_end+0xc0007524>
  int abs_diff_pic_num;
  int long_term_pic_num;
  fprintf(stderr,"Warning: I do not support reference picture list reordering.\n"
                 "         Watch out for decoding errors!\n");
  do {
    reordering_of_pic_nums_idc=get_unsigned_exp_golomb();
40007820:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
    if(reordering_of_pic_nums_idc==0 || reordering_of_pic_nums_idc==1)
40007824:	90bffd36 	bltu	r18,r2,4000781c <__alt_data_end+0xc000781c>
      abs_diff_pic_num=get_unsigned_exp_golomb()+1;
40007828:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
4000782c:	003ff906 	br	40007814 <__alt_data_end+0xc0007814>
  int memory_management_control_operation;
  int difference_of_pic_nums;
  int long_term_pic_num;
  int long_term_frame_idx;
  int max_long_term_frame_idx;
  fprintf(stderr,"Warning: I do not support adaptive reference picture marking.\n"
40007830:	d0a00117 	ldw	r2,-32764(gp)
40007834:	011000b4 	movhi	r4,16386
40007838:	2138ee04 	addi	r4,r4,-7240
4000783c:	11c00317 	ldw	r7,12(r2)
40007840:	01801984 	movi	r6,102
40007844:	01400044 	movi	r5,1
                 "         Watch out for decoding errors!\n");
  do {
    memory_management_control_operation=get_unsigned_exp_golomb();
    if(memory_management_control_operation==1 || memory_management_control_operation==3)
40007848:	057fff44 	movi	r21,-3
  int memory_management_control_operation;
  int difference_of_pic_nums;
  int long_term_pic_num;
  int long_term_frame_idx;
  int max_long_term_frame_idx;
  fprintf(stderr,"Warning: I do not support adaptive reference picture marking.\n"
4000784c:	000aed80 	call	4000aed8 <fwrite>
                 "         Watch out for decoding errors!\n");
  do {
    memory_management_control_operation=get_unsigned_exp_golomb();
    if(memory_management_control_operation==1 || memory_management_control_operation==3)
40007850:	04c00044 	movi	r19,1
      difference_of_pic_nums=get_unsigned_exp_golomb()+1;
    if(memory_management_control_operation==2)
40007854:	05800084 	movi	r22,2
      long_term_pic_num=get_unsigned_exp_golomb();
    if(memory_management_control_operation==3 || memory_management_control_operation==6)
40007858:	05c00184 	movi	r23,6
      long_term_frame_idx=get_unsigned_exp_golomb();
    if(memory_management_control_operation==4)
4000785c:	05000104 	movi	r20,4
  int long_term_frame_idx;
  int max_long_term_frame_idx;
  fprintf(stderr,"Warning: I do not support adaptive reference picture marking.\n"
                 "         Watch out for decoding errors!\n");
  do {
    memory_management_control_operation=get_unsigned_exp_golomb();
40007860:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40007864:	1025883a 	mov	r18,r2
    if(memory_management_control_operation==1 || memory_management_control_operation==3)
40007868:	1544703a 	and	r2,r2,r21
4000786c:	14c00926 	beq	r2,r19,40007894 <decode_slice_header+0x4cc>
      difference_of_pic_nums=get_unsigned_exp_golomb()+1;
    if(memory_management_control_operation==2)
40007870:	95800126 	beq	r18,r22,40007878 <decode_slice_header+0x4b0>
      long_term_pic_num=get_unsigned_exp_golomb();
    if(memory_management_control_operation==3 || memory_management_control_operation==6)
40007874:	95c0011e 	bne	r18,r23,4000787c <decode_slice_header+0x4b4>
  do {
    memory_management_control_operation=get_unsigned_exp_golomb();
    if(memory_management_control_operation==1 || memory_management_control_operation==3)
      difference_of_pic_nums=get_unsigned_exp_golomb()+1;
    if(memory_management_control_operation==2)
      long_term_pic_num=get_unsigned_exp_golomb();
40007878:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
    if(memory_management_control_operation==3 || memory_management_control_operation==6)
      long_term_frame_idx=get_unsigned_exp_golomb();
    if(memory_management_control_operation==4)
4000787c:	95000926 	beq	r18,r20,400078a4 <decode_slice_header+0x4dc>
      max_long_term_frame_idx=get_unsigned_exp_golomb()-1;
  } while(memory_management_control_operation!=0);
40007880:	903f4026 	beq	r18,zero,40007584 <__alt_data_end+0xc0007584>
  int long_term_frame_idx;
  int max_long_term_frame_idx;
  fprintf(stderr,"Warning: I do not support adaptive reference picture marking.\n"
                 "         Watch out for decoding errors!\n");
  do {
    memory_management_control_operation=get_unsigned_exp_golomb();
40007884:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
40007888:	1025883a 	mov	r18,r2
    if(memory_management_control_operation==1 || memory_management_control_operation==3)
4000788c:	1544703a 	and	r2,r2,r21
40007890:	14fff71e 	bne	r2,r19,40007870 <__alt_data_end+0xc0007870>
      difference_of_pic_nums=get_unsigned_exp_golomb()+1;
40007894:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
    if(memory_management_control_operation==2)
40007898:	90bfff84 	addi	r2,r18,-2
4000789c:	98bff62e 	bgeu	r19,r2,40007878 <__alt_data_end+0xc0007878>
      long_term_pic_num=get_unsigned_exp_golomb();
    if(memory_management_control_operation==3 || memory_management_control_operation==6)
      long_term_frame_idx=get_unsigned_exp_golomb();
    if(memory_management_control_operation==4)
400078a0:	953ff71e 	bne	r18,r20,40007880 <__alt_data_end+0xc0007880>
      max_long_term_frame_idx=get_unsigned_exp_golomb()-1;
400078a4:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
400078a8:	003fed06 	br	40007860 <__alt_data_end+0xc0007860>
  sh->pic_parameter_set_id                   =get_unsigned_exp_golomb();
  sh->frame_num                              =input_get_bits(sps->log2_max_frame_num);
  if(!sps->frame_mbs_only_flag) {
    sh->field_pic_flag                       =input_get_one_bit();
    if(sh->field_pic_flag)
      sh->bottom_field_flag                  =input_get_one_bit();
400078ac:	0001a7c0 	call	40001a7c <input_get_one_bit>
400078b0:	80800915 	stw	r2,36(r16)
400078b4:	003eec06 	br	40007468 <__alt_data_end+0xc0007468>
  if(nalu->nal_unit_type==5)
    sh->idr_pic_id                           =get_unsigned_exp_golomb();
  if(sps->pic_order_cnt_type==0) {
    sh->pic_order_cnt_lsb                    =input_get_bits(sps->log2_max_pic_order_cnt_lsb);
    if(pps->pic_order_present_flag && !sh->field_pic_flag)
      sh->delta_pic_order_cnt_bottom         =get_signed_exp_golomb();
400078b8:	0000c100 	call	40000c10 <get_signed_exp_golomb>
400078bc:	90c00917 	ldw	r3,36(r18)
400078c0:	80800c15 	stw	r2,48(r16)
400078c4:	003f0306 	br	400074d4 <__alt_data_end+0xc00074d4>
  fprintf(stderr,"Warning: I do not support reference picture list reordering.\n"
                 "         Watch out for decoding errors!\n");
  do {
    reordering_of_pic_nums_idc=get_unsigned_exp_golomb();
    if(reordering_of_pic_nums_idc==0 || reordering_of_pic_nums_idc==1)
      abs_diff_pic_num=get_unsigned_exp_golomb()+1;
400078c8:	0000bb00 	call	40000bb0 <get_unsigned_exp_golomb>
400078cc:	003fb706 	br	400077ac <__alt_data_end+0xc00077ac>
    sh->cabac_init_idc                       =get_unsigned_exp_golomb();
  sh->slice_qp_delta                         =get_signed_exp_golomb();
  sh->SliceQPy=pps->pic_init_qp+sh->slice_qp_delta;
  if(sh->slice_type==SP_SLICE || sh->slice_type==SI_SLICE) {
    if(sh->slice_type==SP_SLICE)
      sh->sp_for_switch_flag                 =input_get_one_bit();
400078d0:	0001a7c0 	call	40001a7c <input_get_one_bit>
400078d4:	80801c15 	stw	r2,112(r16)
400078d8:	003fa006 	br	4000775c <__alt_data_end+0xc000775c>

400078dc <_str_slice_type>:
  }
  if(pps->num_slice_groups>1 && pps->slice_group_map_type>=3 && pps->slice_group_map_type<=5)
    sh->slice_group_change_cycle             =get_unsigned_exp_golomb();
}

char *_str_slice_type(int type) {
400078dc:	00800244 	movi	r2,9
400078e0:	11000736 	bltu	r2,r4,40007900 <_str_slice_type+0x24>
400078e4:	2109883a 	add	r4,r4,r4
400078e8:	009000b4 	movhi	r2,16386
400078ec:	10b91804 	addi	r2,r2,-7072
400078f0:	2109883a 	add	r4,r4,r4
400078f4:	1109883a 	add	r4,r2,r4
400078f8:	20800017 	ldw	r2,0(r4)
400078fc:	f800283a 	ret
40007900:	009000b4 	movhi	r2,16386
40007904:	10b90804 	addi	r2,r2,-7136
    case  I_SLICE: case  I_SLICE+5: return "I-Slice";
    case SP_SLICE: case SP_SLICE+5: return "SP-Slice";
    case SI_SLICE: case SI_SLICE+5: return "SI-Slice";
  }
  return "Illegal Slice";
}
40007908:	f800283a 	ret

4000790c <__floatundidf>:
4000790c:	defffc04 	addi	sp,sp,-16
40007910:	dc800215 	stw	r18,8(sp)
40007914:	2025883a 	mov	r18,r4
40007918:	2809883a 	mov	r4,r5
4000791c:	dfc00315 	stw	ra,12(sp)
40007920:	dc400115 	stw	r17,4(sp)
40007924:	dc000015 	stw	r16,0(sp)
40007928:	00095380 	call	40009538 <__floatunsidf>
4000792c:	000d883a 	mov	r6,zero
40007930:	01d07c34 	movhi	r7,16880
40007934:	180b883a 	mov	r5,r3
40007938:	1009883a 	mov	r4,r2
4000793c:	0008cc40 	call	40008cc4 <__muldf3>
40007940:	9009883a 	mov	r4,r18
40007944:	1023883a 	mov	r17,r2
40007948:	1821883a 	mov	r16,r3
4000794c:	00095380 	call	40009538 <__floatunsidf>
40007950:	880d883a 	mov	r6,r17
40007954:	800f883a 	mov	r7,r16
40007958:	1009883a 	mov	r4,r2
4000795c:	180b883a 	mov	r5,r3
40007960:	0007b300 	call	40007b30 <__adddf3>
40007964:	dfc00317 	ldw	ra,12(sp)
40007968:	dc800217 	ldw	r18,8(sp)
4000796c:	dc400117 	ldw	r17,4(sp)
40007970:	dc000017 	ldw	r16,0(sp)
40007974:	dec00404 	addi	sp,sp,16
40007978:	f800283a 	ret

4000797c <__divsi3>:
4000797c:	20001b16 	blt	r4,zero,400079ec <__divsi3+0x70>
40007980:	000f883a 	mov	r7,zero
40007984:	28001616 	blt	r5,zero,400079e0 <__divsi3+0x64>
40007988:	200d883a 	mov	r6,r4
4000798c:	29001a2e 	bgeu	r5,r4,400079f8 <__divsi3+0x7c>
40007990:	00800804 	movi	r2,32
40007994:	00c00044 	movi	r3,1
40007998:	00000106 	br	400079a0 <__divsi3+0x24>
4000799c:	10000d26 	beq	r2,zero,400079d4 <__divsi3+0x58>
400079a0:	294b883a 	add	r5,r5,r5
400079a4:	10bfffc4 	addi	r2,r2,-1
400079a8:	18c7883a 	add	r3,r3,r3
400079ac:	293ffb36 	bltu	r5,r4,4000799c <__alt_data_end+0xc000799c>
400079b0:	0005883a 	mov	r2,zero
400079b4:	18000726 	beq	r3,zero,400079d4 <__divsi3+0x58>
400079b8:	0005883a 	mov	r2,zero
400079bc:	31400236 	bltu	r6,r5,400079c8 <__divsi3+0x4c>
400079c0:	314dc83a 	sub	r6,r6,r5
400079c4:	10c4b03a 	or	r2,r2,r3
400079c8:	1806d07a 	srli	r3,r3,1
400079cc:	280ad07a 	srli	r5,r5,1
400079d0:	183ffa1e 	bne	r3,zero,400079bc <__alt_data_end+0xc00079bc>
400079d4:	38000126 	beq	r7,zero,400079dc <__divsi3+0x60>
400079d8:	0085c83a 	sub	r2,zero,r2
400079dc:	f800283a 	ret
400079e0:	014bc83a 	sub	r5,zero,r5
400079e4:	39c0005c 	xori	r7,r7,1
400079e8:	003fe706 	br	40007988 <__alt_data_end+0xc0007988>
400079ec:	0109c83a 	sub	r4,zero,r4
400079f0:	01c00044 	movi	r7,1
400079f4:	003fe306 	br	40007984 <__alt_data_end+0xc0007984>
400079f8:	00c00044 	movi	r3,1
400079fc:	003fee06 	br	400079b8 <__alt_data_end+0xc00079b8>

40007a00 <__modsi3>:
40007a00:	20001716 	blt	r4,zero,40007a60 <__modsi3+0x60>
40007a04:	000f883a 	mov	r7,zero
40007a08:	2005883a 	mov	r2,r4
40007a0c:	28001216 	blt	r5,zero,40007a58 <__modsi3+0x58>
40007a10:	2900162e 	bgeu	r5,r4,40007a6c <__modsi3+0x6c>
40007a14:	01800804 	movi	r6,32
40007a18:	00c00044 	movi	r3,1
40007a1c:	00000106 	br	40007a24 <__modsi3+0x24>
40007a20:	30000a26 	beq	r6,zero,40007a4c <__modsi3+0x4c>
40007a24:	294b883a 	add	r5,r5,r5
40007a28:	31bfffc4 	addi	r6,r6,-1
40007a2c:	18c7883a 	add	r3,r3,r3
40007a30:	293ffb36 	bltu	r5,r4,40007a20 <__alt_data_end+0xc0007a20>
40007a34:	18000526 	beq	r3,zero,40007a4c <__modsi3+0x4c>
40007a38:	1806d07a 	srli	r3,r3,1
40007a3c:	11400136 	bltu	r2,r5,40007a44 <__modsi3+0x44>
40007a40:	1145c83a 	sub	r2,r2,r5
40007a44:	280ad07a 	srli	r5,r5,1
40007a48:	183ffb1e 	bne	r3,zero,40007a38 <__alt_data_end+0xc0007a38>
40007a4c:	38000126 	beq	r7,zero,40007a54 <__modsi3+0x54>
40007a50:	0085c83a 	sub	r2,zero,r2
40007a54:	f800283a 	ret
40007a58:	014bc83a 	sub	r5,zero,r5
40007a5c:	003fec06 	br	40007a10 <__alt_data_end+0xc0007a10>
40007a60:	0109c83a 	sub	r4,zero,r4
40007a64:	01c00044 	movi	r7,1
40007a68:	003fe706 	br	40007a08 <__alt_data_end+0xc0007a08>
40007a6c:	00c00044 	movi	r3,1
40007a70:	003ff106 	br	40007a38 <__alt_data_end+0xc0007a38>

40007a74 <__udivsi3>:
40007a74:	200d883a 	mov	r6,r4
40007a78:	2900152e 	bgeu	r5,r4,40007ad0 <__udivsi3+0x5c>
40007a7c:	28001416 	blt	r5,zero,40007ad0 <__udivsi3+0x5c>
40007a80:	00800804 	movi	r2,32
40007a84:	00c00044 	movi	r3,1
40007a88:	00000206 	br	40007a94 <__udivsi3+0x20>
40007a8c:	10000e26 	beq	r2,zero,40007ac8 <__udivsi3+0x54>
40007a90:	28000516 	blt	r5,zero,40007aa8 <__udivsi3+0x34>
40007a94:	294b883a 	add	r5,r5,r5
40007a98:	10bfffc4 	addi	r2,r2,-1
40007a9c:	18c7883a 	add	r3,r3,r3
40007aa0:	293ffa36 	bltu	r5,r4,40007a8c <__alt_data_end+0xc0007a8c>
40007aa4:	18000826 	beq	r3,zero,40007ac8 <__udivsi3+0x54>
40007aa8:	0005883a 	mov	r2,zero
40007aac:	31400236 	bltu	r6,r5,40007ab8 <__udivsi3+0x44>
40007ab0:	314dc83a 	sub	r6,r6,r5
40007ab4:	10c4b03a 	or	r2,r2,r3
40007ab8:	1806d07a 	srli	r3,r3,1
40007abc:	280ad07a 	srli	r5,r5,1
40007ac0:	183ffa1e 	bne	r3,zero,40007aac <__alt_data_end+0xc0007aac>
40007ac4:	f800283a 	ret
40007ac8:	0005883a 	mov	r2,zero
40007acc:	f800283a 	ret
40007ad0:	00c00044 	movi	r3,1
40007ad4:	003ff406 	br	40007aa8 <__alt_data_end+0xc0007aa8>

40007ad8 <__umodsi3>:
40007ad8:	2005883a 	mov	r2,r4
40007adc:	2900122e 	bgeu	r5,r4,40007b28 <__umodsi3+0x50>
40007ae0:	28001116 	blt	r5,zero,40007b28 <__umodsi3+0x50>
40007ae4:	01800804 	movi	r6,32
40007ae8:	00c00044 	movi	r3,1
40007aec:	00000206 	br	40007af8 <__umodsi3+0x20>
40007af0:	30000c26 	beq	r6,zero,40007b24 <__umodsi3+0x4c>
40007af4:	28000516 	blt	r5,zero,40007b0c <__umodsi3+0x34>
40007af8:	294b883a 	add	r5,r5,r5
40007afc:	31bfffc4 	addi	r6,r6,-1
40007b00:	18c7883a 	add	r3,r3,r3
40007b04:	293ffa36 	bltu	r5,r4,40007af0 <__alt_data_end+0xc0007af0>
40007b08:	18000626 	beq	r3,zero,40007b24 <__umodsi3+0x4c>
40007b0c:	1806d07a 	srli	r3,r3,1
40007b10:	11400136 	bltu	r2,r5,40007b18 <__umodsi3+0x40>
40007b14:	1145c83a 	sub	r2,r2,r5
40007b18:	280ad07a 	srli	r5,r5,1
40007b1c:	183ffb1e 	bne	r3,zero,40007b0c <__alt_data_end+0xc0007b0c>
40007b20:	f800283a 	ret
40007b24:	f800283a 	ret
40007b28:	00c00044 	movi	r3,1
40007b2c:	003ff706 	br	40007b0c <__alt_data_end+0xc0007b0c>

40007b30 <__adddf3>:
40007b30:	02c00434 	movhi	r11,16
40007b34:	5affffc4 	addi	r11,r11,-1
40007b38:	2806d7fa 	srli	r3,r5,31
40007b3c:	2ad4703a 	and	r10,r5,r11
40007b40:	3ad2703a 	and	r9,r7,r11
40007b44:	3804d53a 	srli	r2,r7,20
40007b48:	3018d77a 	srli	r12,r6,29
40007b4c:	280ad53a 	srli	r5,r5,20
40007b50:	501490fa 	slli	r10,r10,3
40007b54:	2010d77a 	srli	r8,r4,29
40007b58:	481290fa 	slli	r9,r9,3
40007b5c:	380ed7fa 	srli	r7,r7,31
40007b60:	defffb04 	addi	sp,sp,-20
40007b64:	dc800215 	stw	r18,8(sp)
40007b68:	dc400115 	stw	r17,4(sp)
40007b6c:	dc000015 	stw	r16,0(sp)
40007b70:	dfc00415 	stw	ra,16(sp)
40007b74:	dcc00315 	stw	r19,12(sp)
40007b78:	1c803fcc 	andi	r18,r3,255
40007b7c:	2c01ffcc 	andi	r16,r5,2047
40007b80:	5210b03a 	or	r8,r10,r8
40007b84:	202290fa 	slli	r17,r4,3
40007b88:	1081ffcc 	andi	r2,r2,2047
40007b8c:	4b12b03a 	or	r9,r9,r12
40007b90:	300c90fa 	slli	r6,r6,3
40007b94:	91c07526 	beq	r18,r7,40007d6c <__adddf3+0x23c>
40007b98:	8087c83a 	sub	r3,r16,r2
40007b9c:	00c0ab0e 	bge	zero,r3,40007e4c <__adddf3+0x31c>
40007ba0:	10002a1e 	bne	r2,zero,40007c4c <__adddf3+0x11c>
40007ba4:	4984b03a 	or	r2,r9,r6
40007ba8:	1000961e 	bne	r2,zero,40007e04 <__adddf3+0x2d4>
40007bac:	888001cc 	andi	r2,r17,7
40007bb0:	10000726 	beq	r2,zero,40007bd0 <__adddf3+0xa0>
40007bb4:	888003cc 	andi	r2,r17,15
40007bb8:	00c00104 	movi	r3,4
40007bbc:	10c00426 	beq	r2,r3,40007bd0 <__adddf3+0xa0>
40007bc0:	88c7883a 	add	r3,r17,r3
40007bc4:	1c63803a 	cmpltu	r17,r3,r17
40007bc8:	4451883a 	add	r8,r8,r17
40007bcc:	1823883a 	mov	r17,r3
40007bd0:	4080202c 	andhi	r2,r8,128
40007bd4:	10005926 	beq	r2,zero,40007d3c <__adddf3+0x20c>
40007bd8:	84000044 	addi	r16,r16,1
40007bdc:	0081ffc4 	movi	r2,2047
40007be0:	8080ba26 	beq	r16,r2,40007ecc <__adddf3+0x39c>
40007be4:	00bfe034 	movhi	r2,65408
40007be8:	10bfffc4 	addi	r2,r2,-1
40007bec:	4090703a 	and	r8,r8,r2
40007bf0:	4004977a 	slli	r2,r8,29
40007bf4:	4010927a 	slli	r8,r8,9
40007bf8:	8822d0fa 	srli	r17,r17,3
40007bfc:	8401ffcc 	andi	r16,r16,2047
40007c00:	4010d33a 	srli	r8,r8,12
40007c04:	9007883a 	mov	r3,r18
40007c08:	1444b03a 	or	r2,r2,r17
40007c0c:	8401ffcc 	andi	r16,r16,2047
40007c10:	8020953a 	slli	r16,r16,20
40007c14:	18c03fcc 	andi	r3,r3,255
40007c18:	01000434 	movhi	r4,16
40007c1c:	213fffc4 	addi	r4,r4,-1
40007c20:	180697fa 	slli	r3,r3,31
40007c24:	4110703a 	and	r8,r8,r4
40007c28:	4410b03a 	or	r8,r8,r16
40007c2c:	40c6b03a 	or	r3,r8,r3
40007c30:	dfc00417 	ldw	ra,16(sp)
40007c34:	dcc00317 	ldw	r19,12(sp)
40007c38:	dc800217 	ldw	r18,8(sp)
40007c3c:	dc400117 	ldw	r17,4(sp)
40007c40:	dc000017 	ldw	r16,0(sp)
40007c44:	dec00504 	addi	sp,sp,20
40007c48:	f800283a 	ret
40007c4c:	0081ffc4 	movi	r2,2047
40007c50:	80bfd626 	beq	r16,r2,40007bac <__alt_data_end+0xc0007bac>
40007c54:	4a402034 	orhi	r9,r9,128
40007c58:	00800e04 	movi	r2,56
40007c5c:	10c09f16 	blt	r2,r3,40007edc <__adddf3+0x3ac>
40007c60:	008007c4 	movi	r2,31
40007c64:	10c0c216 	blt	r2,r3,40007f70 <__adddf3+0x440>
40007c68:	00800804 	movi	r2,32
40007c6c:	10c5c83a 	sub	r2,r2,r3
40007c70:	488a983a 	sll	r5,r9,r2
40007c74:	30c8d83a 	srl	r4,r6,r3
40007c78:	3084983a 	sll	r2,r6,r2
40007c7c:	48c6d83a 	srl	r3,r9,r3
40007c80:	290cb03a 	or	r6,r5,r4
40007c84:	1004c03a 	cmpne	r2,r2,zero
40007c88:	308cb03a 	or	r6,r6,r2
40007c8c:	898dc83a 	sub	r6,r17,r6
40007c90:	89a3803a 	cmpltu	r17,r17,r6
40007c94:	40d1c83a 	sub	r8,r8,r3
40007c98:	4451c83a 	sub	r8,r8,r17
40007c9c:	3023883a 	mov	r17,r6
40007ca0:	4080202c 	andhi	r2,r8,128
40007ca4:	10002326 	beq	r2,zero,40007d34 <__adddf3+0x204>
40007ca8:	04c02034 	movhi	r19,128
40007cac:	9cffffc4 	addi	r19,r19,-1
40007cb0:	44e6703a 	and	r19,r8,r19
40007cb4:	98007626 	beq	r19,zero,40007e90 <__adddf3+0x360>
40007cb8:	9809883a 	mov	r4,r19
40007cbc:	00095e00 	call	400095e0 <__clzsi2>
40007cc0:	10fffe04 	addi	r3,r2,-8
40007cc4:	010007c4 	movi	r4,31
40007cc8:	20c07716 	blt	r4,r3,40007ea8 <__adddf3+0x378>
40007ccc:	00800804 	movi	r2,32
40007cd0:	10c5c83a 	sub	r2,r2,r3
40007cd4:	8884d83a 	srl	r2,r17,r2
40007cd8:	98d0983a 	sll	r8,r19,r3
40007cdc:	88e2983a 	sll	r17,r17,r3
40007ce0:	1204b03a 	or	r2,r2,r8
40007ce4:	1c007416 	blt	r3,r16,40007eb8 <__adddf3+0x388>
40007ce8:	1c21c83a 	sub	r16,r3,r16
40007cec:	82000044 	addi	r8,r16,1
40007cf0:	00c007c4 	movi	r3,31
40007cf4:	1a009116 	blt	r3,r8,40007f3c <__adddf3+0x40c>
40007cf8:	00c00804 	movi	r3,32
40007cfc:	1a07c83a 	sub	r3,r3,r8
40007d00:	8a08d83a 	srl	r4,r17,r8
40007d04:	88e2983a 	sll	r17,r17,r3
40007d08:	10c6983a 	sll	r3,r2,r3
40007d0c:	1210d83a 	srl	r8,r2,r8
40007d10:	8804c03a 	cmpne	r2,r17,zero
40007d14:	1906b03a 	or	r3,r3,r4
40007d18:	18a2b03a 	or	r17,r3,r2
40007d1c:	0021883a 	mov	r16,zero
40007d20:	003fa206 	br	40007bac <__alt_data_end+0xc0007bac>
40007d24:	1890b03a 	or	r8,r3,r2
40007d28:	40017d26 	beq	r8,zero,40008320 <__adddf3+0x7f0>
40007d2c:	1011883a 	mov	r8,r2
40007d30:	1823883a 	mov	r17,r3
40007d34:	888001cc 	andi	r2,r17,7
40007d38:	103f9e1e 	bne	r2,zero,40007bb4 <__alt_data_end+0xc0007bb4>
40007d3c:	4004977a 	slli	r2,r8,29
40007d40:	8822d0fa 	srli	r17,r17,3
40007d44:	4010d0fa 	srli	r8,r8,3
40007d48:	9007883a 	mov	r3,r18
40007d4c:	1444b03a 	or	r2,r2,r17
40007d50:	0101ffc4 	movi	r4,2047
40007d54:	81002426 	beq	r16,r4,40007de8 <__adddf3+0x2b8>
40007d58:	8120703a 	and	r16,r16,r4
40007d5c:	01000434 	movhi	r4,16
40007d60:	213fffc4 	addi	r4,r4,-1
40007d64:	4110703a 	and	r8,r8,r4
40007d68:	003fa806 	br	40007c0c <__alt_data_end+0xc0007c0c>
40007d6c:	8089c83a 	sub	r4,r16,r2
40007d70:	01005e0e 	bge	zero,r4,40007eec <__adddf3+0x3bc>
40007d74:	10002b26 	beq	r2,zero,40007e24 <__adddf3+0x2f4>
40007d78:	0081ffc4 	movi	r2,2047
40007d7c:	80bf8b26 	beq	r16,r2,40007bac <__alt_data_end+0xc0007bac>
40007d80:	4a402034 	orhi	r9,r9,128
40007d84:	00800e04 	movi	r2,56
40007d88:	1100a40e 	bge	r2,r4,4000801c <__adddf3+0x4ec>
40007d8c:	498cb03a 	or	r6,r9,r6
40007d90:	300ac03a 	cmpne	r5,r6,zero
40007d94:	0013883a 	mov	r9,zero
40007d98:	2c4b883a 	add	r5,r5,r17
40007d9c:	2c63803a 	cmpltu	r17,r5,r17
40007da0:	4a11883a 	add	r8,r9,r8
40007da4:	8a11883a 	add	r8,r17,r8
40007da8:	2823883a 	mov	r17,r5
40007dac:	4080202c 	andhi	r2,r8,128
40007db0:	103fe026 	beq	r2,zero,40007d34 <__alt_data_end+0xc0007d34>
40007db4:	84000044 	addi	r16,r16,1
40007db8:	0081ffc4 	movi	r2,2047
40007dbc:	8080d226 	beq	r16,r2,40008108 <__adddf3+0x5d8>
40007dc0:	00bfe034 	movhi	r2,65408
40007dc4:	10bfffc4 	addi	r2,r2,-1
40007dc8:	4090703a 	and	r8,r8,r2
40007dcc:	880ad07a 	srli	r5,r17,1
40007dd0:	400897fa 	slli	r4,r8,31
40007dd4:	88c0004c 	andi	r3,r17,1
40007dd8:	28e2b03a 	or	r17,r5,r3
40007ddc:	4010d07a 	srli	r8,r8,1
40007de0:	2462b03a 	or	r17,r4,r17
40007de4:	003f7106 	br	40007bac <__alt_data_end+0xc0007bac>
40007de8:	4088b03a 	or	r4,r8,r2
40007dec:	20014526 	beq	r4,zero,40008304 <__adddf3+0x7d4>
40007df0:	01000434 	movhi	r4,16
40007df4:	42000234 	orhi	r8,r8,8
40007df8:	213fffc4 	addi	r4,r4,-1
40007dfc:	4110703a 	and	r8,r8,r4
40007e00:	003f8206 	br	40007c0c <__alt_data_end+0xc0007c0c>
40007e04:	18ffffc4 	addi	r3,r3,-1
40007e08:	1800491e 	bne	r3,zero,40007f30 <__adddf3+0x400>
40007e0c:	898bc83a 	sub	r5,r17,r6
40007e10:	8963803a 	cmpltu	r17,r17,r5
40007e14:	4251c83a 	sub	r8,r8,r9
40007e18:	4451c83a 	sub	r8,r8,r17
40007e1c:	2823883a 	mov	r17,r5
40007e20:	003f9f06 	br	40007ca0 <__alt_data_end+0xc0007ca0>
40007e24:	4984b03a 	or	r2,r9,r6
40007e28:	103f6026 	beq	r2,zero,40007bac <__alt_data_end+0xc0007bac>
40007e2c:	213fffc4 	addi	r4,r4,-1
40007e30:	2000931e 	bne	r4,zero,40008080 <__adddf3+0x550>
40007e34:	898d883a 	add	r6,r17,r6
40007e38:	3463803a 	cmpltu	r17,r6,r17
40007e3c:	4251883a 	add	r8,r8,r9
40007e40:	8a11883a 	add	r8,r17,r8
40007e44:	3023883a 	mov	r17,r6
40007e48:	003fd806 	br	40007dac <__alt_data_end+0xc0007dac>
40007e4c:	1800541e 	bne	r3,zero,40007fa0 <__adddf3+0x470>
40007e50:	80800044 	addi	r2,r16,1
40007e54:	1081ffcc 	andi	r2,r2,2047
40007e58:	00c00044 	movi	r3,1
40007e5c:	1880a00e 	bge	r3,r2,400080e0 <__adddf3+0x5b0>
40007e60:	8989c83a 	sub	r4,r17,r6
40007e64:	8905803a 	cmpltu	r2,r17,r4
40007e68:	4267c83a 	sub	r19,r8,r9
40007e6c:	98a7c83a 	sub	r19,r19,r2
40007e70:	9880202c 	andhi	r2,r19,128
40007e74:	10006326 	beq	r2,zero,40008004 <__adddf3+0x4d4>
40007e78:	3463c83a 	sub	r17,r6,r17
40007e7c:	4a07c83a 	sub	r3,r9,r8
40007e80:	344d803a 	cmpltu	r6,r6,r17
40007e84:	19a7c83a 	sub	r19,r3,r6
40007e88:	3825883a 	mov	r18,r7
40007e8c:	983f8a1e 	bne	r19,zero,40007cb8 <__alt_data_end+0xc0007cb8>
40007e90:	8809883a 	mov	r4,r17
40007e94:	00095e00 	call	400095e0 <__clzsi2>
40007e98:	10800804 	addi	r2,r2,32
40007e9c:	10fffe04 	addi	r3,r2,-8
40007ea0:	010007c4 	movi	r4,31
40007ea4:	20ff890e 	bge	r4,r3,40007ccc <__alt_data_end+0xc0007ccc>
40007ea8:	10bff604 	addi	r2,r2,-40
40007eac:	8884983a 	sll	r2,r17,r2
40007eb0:	0023883a 	mov	r17,zero
40007eb4:	1c3f8c0e 	bge	r3,r16,40007ce8 <__alt_data_end+0xc0007ce8>
40007eb8:	023fe034 	movhi	r8,65408
40007ebc:	423fffc4 	addi	r8,r8,-1
40007ec0:	80e1c83a 	sub	r16,r16,r3
40007ec4:	1210703a 	and	r8,r2,r8
40007ec8:	003f3806 	br	40007bac <__alt_data_end+0xc0007bac>
40007ecc:	9007883a 	mov	r3,r18
40007ed0:	0011883a 	mov	r8,zero
40007ed4:	0005883a 	mov	r2,zero
40007ed8:	003f4c06 	br	40007c0c <__alt_data_end+0xc0007c0c>
40007edc:	498cb03a 	or	r6,r9,r6
40007ee0:	300cc03a 	cmpne	r6,r6,zero
40007ee4:	0007883a 	mov	r3,zero
40007ee8:	003f6806 	br	40007c8c <__alt_data_end+0xc0007c8c>
40007eec:	20009c1e 	bne	r4,zero,40008160 <__adddf3+0x630>
40007ef0:	80800044 	addi	r2,r16,1
40007ef4:	1141ffcc 	andi	r5,r2,2047
40007ef8:	01000044 	movi	r4,1
40007efc:	2140670e 	bge	r4,r5,4000809c <__adddf3+0x56c>
40007f00:	0101ffc4 	movi	r4,2047
40007f04:	11007f26 	beq	r2,r4,40008104 <__adddf3+0x5d4>
40007f08:	898d883a 	add	r6,r17,r6
40007f0c:	4247883a 	add	r3,r8,r9
40007f10:	3451803a 	cmpltu	r8,r6,r17
40007f14:	40d1883a 	add	r8,r8,r3
40007f18:	402297fa 	slli	r17,r8,31
40007f1c:	300cd07a 	srli	r6,r6,1
40007f20:	4010d07a 	srli	r8,r8,1
40007f24:	1021883a 	mov	r16,r2
40007f28:	89a2b03a 	or	r17,r17,r6
40007f2c:	003f1f06 	br	40007bac <__alt_data_end+0xc0007bac>
40007f30:	0081ffc4 	movi	r2,2047
40007f34:	80bf481e 	bne	r16,r2,40007c58 <__alt_data_end+0xc0007c58>
40007f38:	003f1c06 	br	40007bac <__alt_data_end+0xc0007bac>
40007f3c:	843ff844 	addi	r16,r16,-31
40007f40:	01000804 	movi	r4,32
40007f44:	1406d83a 	srl	r3,r2,r16
40007f48:	41005026 	beq	r8,r4,4000808c <__adddf3+0x55c>
40007f4c:	01001004 	movi	r4,64
40007f50:	2211c83a 	sub	r8,r4,r8
40007f54:	1204983a 	sll	r2,r2,r8
40007f58:	88a2b03a 	or	r17,r17,r2
40007f5c:	8822c03a 	cmpne	r17,r17,zero
40007f60:	1c62b03a 	or	r17,r3,r17
40007f64:	0011883a 	mov	r8,zero
40007f68:	0021883a 	mov	r16,zero
40007f6c:	003f7106 	br	40007d34 <__alt_data_end+0xc0007d34>
40007f70:	193ff804 	addi	r4,r3,-32
40007f74:	00800804 	movi	r2,32
40007f78:	4908d83a 	srl	r4,r9,r4
40007f7c:	18804526 	beq	r3,r2,40008094 <__adddf3+0x564>
40007f80:	00801004 	movi	r2,64
40007f84:	10c5c83a 	sub	r2,r2,r3
40007f88:	4886983a 	sll	r3,r9,r2
40007f8c:	198cb03a 	or	r6,r3,r6
40007f90:	300cc03a 	cmpne	r6,r6,zero
40007f94:	218cb03a 	or	r6,r4,r6
40007f98:	0007883a 	mov	r3,zero
40007f9c:	003f3b06 	br	40007c8c <__alt_data_end+0xc0007c8c>
40007fa0:	80002a26 	beq	r16,zero,4000804c <__adddf3+0x51c>
40007fa4:	0101ffc4 	movi	r4,2047
40007fa8:	11006826 	beq	r2,r4,4000814c <__adddf3+0x61c>
40007fac:	00c7c83a 	sub	r3,zero,r3
40007fb0:	42002034 	orhi	r8,r8,128
40007fb4:	01000e04 	movi	r4,56
40007fb8:	20c07c16 	blt	r4,r3,400081ac <__adddf3+0x67c>
40007fbc:	010007c4 	movi	r4,31
40007fc0:	20c0da16 	blt	r4,r3,4000832c <__adddf3+0x7fc>
40007fc4:	01000804 	movi	r4,32
40007fc8:	20c9c83a 	sub	r4,r4,r3
40007fcc:	4114983a 	sll	r10,r8,r4
40007fd0:	88cad83a 	srl	r5,r17,r3
40007fd4:	8908983a 	sll	r4,r17,r4
40007fd8:	40c6d83a 	srl	r3,r8,r3
40007fdc:	5162b03a 	or	r17,r10,r5
40007fe0:	2008c03a 	cmpne	r4,r4,zero
40007fe4:	8922b03a 	or	r17,r17,r4
40007fe8:	3463c83a 	sub	r17,r6,r17
40007fec:	48c7c83a 	sub	r3,r9,r3
40007ff0:	344d803a 	cmpltu	r6,r6,r17
40007ff4:	1991c83a 	sub	r8,r3,r6
40007ff8:	1021883a 	mov	r16,r2
40007ffc:	3825883a 	mov	r18,r7
40008000:	003f2706 	br	40007ca0 <__alt_data_end+0xc0007ca0>
40008004:	24d0b03a 	or	r8,r4,r19
40008008:	40001b1e 	bne	r8,zero,40008078 <__adddf3+0x548>
4000800c:	0005883a 	mov	r2,zero
40008010:	0007883a 	mov	r3,zero
40008014:	0021883a 	mov	r16,zero
40008018:	003f4d06 	br	40007d50 <__alt_data_end+0xc0007d50>
4000801c:	008007c4 	movi	r2,31
40008020:	11003c16 	blt	r2,r4,40008114 <__adddf3+0x5e4>
40008024:	00800804 	movi	r2,32
40008028:	1105c83a 	sub	r2,r2,r4
4000802c:	488e983a 	sll	r7,r9,r2
40008030:	310ad83a 	srl	r5,r6,r4
40008034:	3084983a 	sll	r2,r6,r2
40008038:	4912d83a 	srl	r9,r9,r4
4000803c:	394ab03a 	or	r5,r7,r5
40008040:	1004c03a 	cmpne	r2,r2,zero
40008044:	288ab03a 	or	r5,r5,r2
40008048:	003f5306 	br	40007d98 <__alt_data_end+0xc0007d98>
4000804c:	4448b03a 	or	r4,r8,r17
40008050:	20003e26 	beq	r4,zero,4000814c <__adddf3+0x61c>
40008054:	00c6303a 	nor	r3,zero,r3
40008058:	18003a1e 	bne	r3,zero,40008144 <__adddf3+0x614>
4000805c:	3463c83a 	sub	r17,r6,r17
40008060:	4a07c83a 	sub	r3,r9,r8
40008064:	344d803a 	cmpltu	r6,r6,r17
40008068:	1991c83a 	sub	r8,r3,r6
4000806c:	1021883a 	mov	r16,r2
40008070:	3825883a 	mov	r18,r7
40008074:	003f0a06 	br	40007ca0 <__alt_data_end+0xc0007ca0>
40008078:	2023883a 	mov	r17,r4
4000807c:	003f0d06 	br	40007cb4 <__alt_data_end+0xc0007cb4>
40008080:	0081ffc4 	movi	r2,2047
40008084:	80bf3f1e 	bne	r16,r2,40007d84 <__alt_data_end+0xc0007d84>
40008088:	003ec806 	br	40007bac <__alt_data_end+0xc0007bac>
4000808c:	0005883a 	mov	r2,zero
40008090:	003fb106 	br	40007f58 <__alt_data_end+0xc0007f58>
40008094:	0007883a 	mov	r3,zero
40008098:	003fbc06 	br	40007f8c <__alt_data_end+0xc0007f8c>
4000809c:	4444b03a 	or	r2,r8,r17
400080a0:	8000871e 	bne	r16,zero,400082c0 <__adddf3+0x790>
400080a4:	1000ba26 	beq	r2,zero,40008390 <__adddf3+0x860>
400080a8:	4984b03a 	or	r2,r9,r6
400080ac:	103ebf26 	beq	r2,zero,40007bac <__alt_data_end+0xc0007bac>
400080b0:	8985883a 	add	r2,r17,r6
400080b4:	4247883a 	add	r3,r8,r9
400080b8:	1451803a 	cmpltu	r8,r2,r17
400080bc:	40d1883a 	add	r8,r8,r3
400080c0:	40c0202c 	andhi	r3,r8,128
400080c4:	1023883a 	mov	r17,r2
400080c8:	183f1a26 	beq	r3,zero,40007d34 <__alt_data_end+0xc0007d34>
400080cc:	00bfe034 	movhi	r2,65408
400080d0:	10bfffc4 	addi	r2,r2,-1
400080d4:	2021883a 	mov	r16,r4
400080d8:	4090703a 	and	r8,r8,r2
400080dc:	003eb306 	br	40007bac <__alt_data_end+0xc0007bac>
400080e0:	4444b03a 	or	r2,r8,r17
400080e4:	8000291e 	bne	r16,zero,4000818c <__adddf3+0x65c>
400080e8:	10004b1e 	bne	r2,zero,40008218 <__adddf3+0x6e8>
400080ec:	4990b03a 	or	r8,r9,r6
400080f0:	40008b26 	beq	r8,zero,40008320 <__adddf3+0x7f0>
400080f4:	4811883a 	mov	r8,r9
400080f8:	3023883a 	mov	r17,r6
400080fc:	3825883a 	mov	r18,r7
40008100:	003eaa06 	br	40007bac <__alt_data_end+0xc0007bac>
40008104:	1021883a 	mov	r16,r2
40008108:	0011883a 	mov	r8,zero
4000810c:	0005883a 	mov	r2,zero
40008110:	003f0f06 	br	40007d50 <__alt_data_end+0xc0007d50>
40008114:	217ff804 	addi	r5,r4,-32
40008118:	00800804 	movi	r2,32
4000811c:	494ad83a 	srl	r5,r9,r5
40008120:	20807d26 	beq	r4,r2,40008318 <__adddf3+0x7e8>
40008124:	00801004 	movi	r2,64
40008128:	1109c83a 	sub	r4,r2,r4
4000812c:	4912983a 	sll	r9,r9,r4
40008130:	498cb03a 	or	r6,r9,r6
40008134:	300cc03a 	cmpne	r6,r6,zero
40008138:	298ab03a 	or	r5,r5,r6
4000813c:	0013883a 	mov	r9,zero
40008140:	003f1506 	br	40007d98 <__alt_data_end+0xc0007d98>
40008144:	0101ffc4 	movi	r4,2047
40008148:	113f9a1e 	bne	r2,r4,40007fb4 <__alt_data_end+0xc0007fb4>
4000814c:	4811883a 	mov	r8,r9
40008150:	3023883a 	mov	r17,r6
40008154:	1021883a 	mov	r16,r2
40008158:	3825883a 	mov	r18,r7
4000815c:	003e9306 	br	40007bac <__alt_data_end+0xc0007bac>
40008160:	8000161e 	bne	r16,zero,400081bc <__adddf3+0x68c>
40008164:	444ab03a 	or	r5,r8,r17
40008168:	28005126 	beq	r5,zero,400082b0 <__adddf3+0x780>
4000816c:	0108303a 	nor	r4,zero,r4
40008170:	20004d1e 	bne	r4,zero,400082a8 <__adddf3+0x778>
40008174:	89a3883a 	add	r17,r17,r6
40008178:	4253883a 	add	r9,r8,r9
4000817c:	898d803a 	cmpltu	r6,r17,r6
40008180:	3251883a 	add	r8,r6,r9
40008184:	1021883a 	mov	r16,r2
40008188:	003f0806 	br	40007dac <__alt_data_end+0xc0007dac>
4000818c:	1000301e 	bne	r2,zero,40008250 <__adddf3+0x720>
40008190:	4984b03a 	or	r2,r9,r6
40008194:	10007126 	beq	r2,zero,4000835c <__adddf3+0x82c>
40008198:	4811883a 	mov	r8,r9
4000819c:	3023883a 	mov	r17,r6
400081a0:	3825883a 	mov	r18,r7
400081a4:	0401ffc4 	movi	r16,2047
400081a8:	003e8006 	br	40007bac <__alt_data_end+0xc0007bac>
400081ac:	4462b03a 	or	r17,r8,r17
400081b0:	8822c03a 	cmpne	r17,r17,zero
400081b4:	0007883a 	mov	r3,zero
400081b8:	003f8b06 	br	40007fe8 <__alt_data_end+0xc0007fe8>
400081bc:	0141ffc4 	movi	r5,2047
400081c0:	11403b26 	beq	r2,r5,400082b0 <__adddf3+0x780>
400081c4:	0109c83a 	sub	r4,zero,r4
400081c8:	42002034 	orhi	r8,r8,128
400081cc:	01400e04 	movi	r5,56
400081d0:	29006716 	blt	r5,r4,40008370 <__adddf3+0x840>
400081d4:	014007c4 	movi	r5,31
400081d8:	29007016 	blt	r5,r4,4000839c <__adddf3+0x86c>
400081dc:	01400804 	movi	r5,32
400081e0:	290bc83a 	sub	r5,r5,r4
400081e4:	4154983a 	sll	r10,r8,r5
400081e8:	890ed83a 	srl	r7,r17,r4
400081ec:	894a983a 	sll	r5,r17,r5
400081f0:	4108d83a 	srl	r4,r8,r4
400081f4:	51e2b03a 	or	r17,r10,r7
400081f8:	280ac03a 	cmpne	r5,r5,zero
400081fc:	8962b03a 	or	r17,r17,r5
40008200:	89a3883a 	add	r17,r17,r6
40008204:	2253883a 	add	r9,r4,r9
40008208:	898d803a 	cmpltu	r6,r17,r6
4000820c:	3251883a 	add	r8,r6,r9
40008210:	1021883a 	mov	r16,r2
40008214:	003ee506 	br	40007dac <__alt_data_end+0xc0007dac>
40008218:	4984b03a 	or	r2,r9,r6
4000821c:	103e6326 	beq	r2,zero,40007bac <__alt_data_end+0xc0007bac>
40008220:	8987c83a 	sub	r3,r17,r6
40008224:	88c9803a 	cmpltu	r4,r17,r3
40008228:	4245c83a 	sub	r2,r8,r9
4000822c:	1105c83a 	sub	r2,r2,r4
40008230:	1100202c 	andhi	r4,r2,128
40008234:	203ebb26 	beq	r4,zero,40007d24 <__alt_data_end+0xc0007d24>
40008238:	3463c83a 	sub	r17,r6,r17
4000823c:	4a07c83a 	sub	r3,r9,r8
40008240:	344d803a 	cmpltu	r6,r6,r17
40008244:	1991c83a 	sub	r8,r3,r6
40008248:	3825883a 	mov	r18,r7
4000824c:	003e5706 	br	40007bac <__alt_data_end+0xc0007bac>
40008250:	4984b03a 	or	r2,r9,r6
40008254:	10002e26 	beq	r2,zero,40008310 <__adddf3+0x7e0>
40008258:	4004d0fa 	srli	r2,r8,3
4000825c:	8822d0fa 	srli	r17,r17,3
40008260:	4010977a 	slli	r8,r8,29
40008264:	10c0022c 	andhi	r3,r2,8
40008268:	4462b03a 	or	r17,r8,r17
4000826c:	18000826 	beq	r3,zero,40008290 <__adddf3+0x760>
40008270:	4808d0fa 	srli	r4,r9,3
40008274:	20c0022c 	andhi	r3,r4,8
40008278:	1800051e 	bne	r3,zero,40008290 <__adddf3+0x760>
4000827c:	300cd0fa 	srli	r6,r6,3
40008280:	4806977a 	slli	r3,r9,29
40008284:	2005883a 	mov	r2,r4
40008288:	3825883a 	mov	r18,r7
4000828c:	19a2b03a 	or	r17,r3,r6
40008290:	8810d77a 	srli	r8,r17,29
40008294:	100490fa 	slli	r2,r2,3
40008298:	882290fa 	slli	r17,r17,3
4000829c:	0401ffc4 	movi	r16,2047
400082a0:	4090b03a 	or	r8,r8,r2
400082a4:	003e4106 	br	40007bac <__alt_data_end+0xc0007bac>
400082a8:	0141ffc4 	movi	r5,2047
400082ac:	117fc71e 	bne	r2,r5,400081cc <__alt_data_end+0xc00081cc>
400082b0:	4811883a 	mov	r8,r9
400082b4:	3023883a 	mov	r17,r6
400082b8:	1021883a 	mov	r16,r2
400082bc:	003e3b06 	br	40007bac <__alt_data_end+0xc0007bac>
400082c0:	10002f26 	beq	r2,zero,40008380 <__adddf3+0x850>
400082c4:	4984b03a 	or	r2,r9,r6
400082c8:	10001126 	beq	r2,zero,40008310 <__adddf3+0x7e0>
400082cc:	4004d0fa 	srli	r2,r8,3
400082d0:	8822d0fa 	srli	r17,r17,3
400082d4:	4010977a 	slli	r8,r8,29
400082d8:	10c0022c 	andhi	r3,r2,8
400082dc:	4462b03a 	or	r17,r8,r17
400082e0:	183feb26 	beq	r3,zero,40008290 <__alt_data_end+0xc0008290>
400082e4:	4808d0fa 	srli	r4,r9,3
400082e8:	20c0022c 	andhi	r3,r4,8
400082ec:	183fe81e 	bne	r3,zero,40008290 <__alt_data_end+0xc0008290>
400082f0:	300cd0fa 	srli	r6,r6,3
400082f4:	4806977a 	slli	r3,r9,29
400082f8:	2005883a 	mov	r2,r4
400082fc:	19a2b03a 	or	r17,r3,r6
40008300:	003fe306 	br	40008290 <__alt_data_end+0xc0008290>
40008304:	0011883a 	mov	r8,zero
40008308:	0005883a 	mov	r2,zero
4000830c:	003e3f06 	br	40007c0c <__alt_data_end+0xc0007c0c>
40008310:	0401ffc4 	movi	r16,2047
40008314:	003e2506 	br	40007bac <__alt_data_end+0xc0007bac>
40008318:	0013883a 	mov	r9,zero
4000831c:	003f8406 	br	40008130 <__alt_data_end+0xc0008130>
40008320:	0005883a 	mov	r2,zero
40008324:	0007883a 	mov	r3,zero
40008328:	003e8906 	br	40007d50 <__alt_data_end+0xc0007d50>
4000832c:	197ff804 	addi	r5,r3,-32
40008330:	01000804 	movi	r4,32
40008334:	414ad83a 	srl	r5,r8,r5
40008338:	19002426 	beq	r3,r4,400083cc <__adddf3+0x89c>
4000833c:	01001004 	movi	r4,64
40008340:	20c7c83a 	sub	r3,r4,r3
40008344:	40c6983a 	sll	r3,r8,r3
40008348:	1c46b03a 	or	r3,r3,r17
4000834c:	1806c03a 	cmpne	r3,r3,zero
40008350:	28e2b03a 	or	r17,r5,r3
40008354:	0007883a 	mov	r3,zero
40008358:	003f2306 	br	40007fe8 <__alt_data_end+0xc0007fe8>
4000835c:	0007883a 	mov	r3,zero
40008360:	5811883a 	mov	r8,r11
40008364:	00bfffc4 	movi	r2,-1
40008368:	0401ffc4 	movi	r16,2047
4000836c:	003e7806 	br	40007d50 <__alt_data_end+0xc0007d50>
40008370:	4462b03a 	or	r17,r8,r17
40008374:	8822c03a 	cmpne	r17,r17,zero
40008378:	0009883a 	mov	r4,zero
4000837c:	003fa006 	br	40008200 <__alt_data_end+0xc0008200>
40008380:	4811883a 	mov	r8,r9
40008384:	3023883a 	mov	r17,r6
40008388:	0401ffc4 	movi	r16,2047
4000838c:	003e0706 	br	40007bac <__alt_data_end+0xc0007bac>
40008390:	4811883a 	mov	r8,r9
40008394:	3023883a 	mov	r17,r6
40008398:	003e0406 	br	40007bac <__alt_data_end+0xc0007bac>
4000839c:	21fff804 	addi	r7,r4,-32
400083a0:	01400804 	movi	r5,32
400083a4:	41ced83a 	srl	r7,r8,r7
400083a8:	21400a26 	beq	r4,r5,400083d4 <__adddf3+0x8a4>
400083ac:	01401004 	movi	r5,64
400083b0:	2909c83a 	sub	r4,r5,r4
400083b4:	4108983a 	sll	r4,r8,r4
400083b8:	2448b03a 	or	r4,r4,r17
400083bc:	2008c03a 	cmpne	r4,r4,zero
400083c0:	3922b03a 	or	r17,r7,r4
400083c4:	0009883a 	mov	r4,zero
400083c8:	003f8d06 	br	40008200 <__alt_data_end+0xc0008200>
400083cc:	0007883a 	mov	r3,zero
400083d0:	003fdd06 	br	40008348 <__alt_data_end+0xc0008348>
400083d4:	0009883a 	mov	r4,zero
400083d8:	003ff706 	br	400083b8 <__alt_data_end+0xc00083b8>

400083dc <__divdf3>:
400083dc:	defff204 	addi	sp,sp,-56
400083e0:	dd400915 	stw	r21,36(sp)
400083e4:	282ad53a 	srli	r21,r5,20
400083e8:	dd000815 	stw	r20,32(sp)
400083ec:	2828d7fa 	srli	r20,r5,31
400083f0:	dc000415 	stw	r16,16(sp)
400083f4:	04000434 	movhi	r16,16
400083f8:	df000c15 	stw	fp,48(sp)
400083fc:	843fffc4 	addi	r16,r16,-1
40008400:	dfc00d15 	stw	ra,52(sp)
40008404:	ddc00b15 	stw	r23,44(sp)
40008408:	dd800a15 	stw	r22,40(sp)
4000840c:	dcc00715 	stw	r19,28(sp)
40008410:	dc800615 	stw	r18,24(sp)
40008414:	dc400515 	stw	r17,20(sp)
40008418:	ad41ffcc 	andi	r21,r21,2047
4000841c:	2c20703a 	and	r16,r5,r16
40008420:	a7003fcc 	andi	fp,r20,255
40008424:	a8006126 	beq	r21,zero,400085ac <__divdf3+0x1d0>
40008428:	0081ffc4 	movi	r2,2047
4000842c:	2025883a 	mov	r18,r4
40008430:	a8803726 	beq	r21,r2,40008510 <__divdf3+0x134>
40008434:	80800434 	orhi	r2,r16,16
40008438:	100490fa 	slli	r2,r2,3
4000843c:	2020d77a 	srli	r16,r4,29
40008440:	202490fa 	slli	r18,r4,3
40008444:	ad7f0044 	addi	r21,r21,-1023
40008448:	80a0b03a 	or	r16,r16,r2
4000844c:	0027883a 	mov	r19,zero
40008450:	0013883a 	mov	r9,zero
40008454:	3804d53a 	srli	r2,r7,20
40008458:	382cd7fa 	srli	r22,r7,31
4000845c:	04400434 	movhi	r17,16
40008460:	8c7fffc4 	addi	r17,r17,-1
40008464:	1081ffcc 	andi	r2,r2,2047
40008468:	3011883a 	mov	r8,r6
4000846c:	3c62703a 	and	r17,r7,r17
40008470:	b5c03fcc 	andi	r23,r22,255
40008474:	10006c26 	beq	r2,zero,40008628 <__divdf3+0x24c>
40008478:	00c1ffc4 	movi	r3,2047
4000847c:	10c06426 	beq	r2,r3,40008610 <__divdf3+0x234>
40008480:	88c00434 	orhi	r3,r17,16
40008484:	180690fa 	slli	r3,r3,3
40008488:	3022d77a 	srli	r17,r6,29
4000848c:	301090fa 	slli	r8,r6,3
40008490:	10bf0044 	addi	r2,r2,-1023
40008494:	88e2b03a 	or	r17,r17,r3
40008498:	000f883a 	mov	r7,zero
4000849c:	a58cf03a 	xor	r6,r20,r22
400084a0:	3cc8b03a 	or	r4,r7,r19
400084a4:	a8abc83a 	sub	r21,r21,r2
400084a8:	008003c4 	movi	r2,15
400084ac:	3007883a 	mov	r3,r6
400084b0:	34c03fcc 	andi	r19,r6,255
400084b4:	11009036 	bltu	r2,r4,400086f8 <__divdf3+0x31c>
400084b8:	200890ba 	slli	r4,r4,2
400084bc:	00900074 	movhi	r2,16385
400084c0:	10a13404 	addi	r2,r2,-31536
400084c4:	2089883a 	add	r4,r4,r2
400084c8:	20800017 	ldw	r2,0(r4)
400084cc:	1000683a 	jmp	r2
400084d0:	400086f8 	rdprs	zero,r8,539
400084d4:	40008548 	cmpgei	zero,r8,533
400084d8:	400086e8 	cmpgeui	zero,r8,539
400084dc:	4000853c 	xorhi	zero,r8,532
400084e0:	400086e8 	cmpgeui	zero,r8,539
400084e4:	400086bc 	xorhi	zero,r8,538
400084e8:	400086e8 	cmpgeui	zero,r8,539
400084ec:	4000853c 	xorhi	zero,r8,532
400084f0:	40008548 	cmpgei	zero,r8,533
400084f4:	40008548 	cmpgei	zero,r8,533
400084f8:	400086bc 	xorhi	zero,r8,538
400084fc:	4000853c 	xorhi	zero,r8,532
40008500:	4000852c 	andhi	zero,r8,532
40008504:	4000852c 	andhi	zero,r8,532
40008508:	4000852c 	andhi	zero,r8,532
4000850c:	400089dc 	xori	zero,r8,551
40008510:	2404b03a 	or	r2,r4,r16
40008514:	1000661e 	bne	r2,zero,400086b0 <__divdf3+0x2d4>
40008518:	04c00204 	movi	r19,8
4000851c:	0021883a 	mov	r16,zero
40008520:	0025883a 	mov	r18,zero
40008524:	02400084 	movi	r9,2
40008528:	003fca06 	br	40008454 <__alt_data_end+0xc0008454>
4000852c:	8023883a 	mov	r17,r16
40008530:	9011883a 	mov	r8,r18
40008534:	e02f883a 	mov	r23,fp
40008538:	480f883a 	mov	r7,r9
4000853c:	00800084 	movi	r2,2
40008540:	3881311e 	bne	r7,r2,40008a08 <__divdf3+0x62c>
40008544:	b827883a 	mov	r19,r23
40008548:	98c0004c 	andi	r3,r19,1
4000854c:	0081ffc4 	movi	r2,2047
40008550:	000b883a 	mov	r5,zero
40008554:	0025883a 	mov	r18,zero
40008558:	1004953a 	slli	r2,r2,20
4000855c:	18c03fcc 	andi	r3,r3,255
40008560:	04400434 	movhi	r17,16
40008564:	8c7fffc4 	addi	r17,r17,-1
40008568:	180697fa 	slli	r3,r3,31
4000856c:	2c4a703a 	and	r5,r5,r17
40008570:	288ab03a 	or	r5,r5,r2
40008574:	28c6b03a 	or	r3,r5,r3
40008578:	9005883a 	mov	r2,r18
4000857c:	dfc00d17 	ldw	ra,52(sp)
40008580:	df000c17 	ldw	fp,48(sp)
40008584:	ddc00b17 	ldw	r23,44(sp)
40008588:	dd800a17 	ldw	r22,40(sp)
4000858c:	dd400917 	ldw	r21,36(sp)
40008590:	dd000817 	ldw	r20,32(sp)
40008594:	dcc00717 	ldw	r19,28(sp)
40008598:	dc800617 	ldw	r18,24(sp)
4000859c:	dc400517 	ldw	r17,20(sp)
400085a0:	dc000417 	ldw	r16,16(sp)
400085a4:	dec00e04 	addi	sp,sp,56
400085a8:	f800283a 	ret
400085ac:	2404b03a 	or	r2,r4,r16
400085b0:	2027883a 	mov	r19,r4
400085b4:	10003926 	beq	r2,zero,4000869c <__divdf3+0x2c0>
400085b8:	80012e26 	beq	r16,zero,40008a74 <__divdf3+0x698>
400085bc:	8009883a 	mov	r4,r16
400085c0:	d9800315 	stw	r6,12(sp)
400085c4:	d9c00215 	stw	r7,8(sp)
400085c8:	00095e00 	call	400095e0 <__clzsi2>
400085cc:	d9800317 	ldw	r6,12(sp)
400085d0:	d9c00217 	ldw	r7,8(sp)
400085d4:	113ffd44 	addi	r4,r2,-11
400085d8:	00c00704 	movi	r3,28
400085dc:	19012116 	blt	r3,r4,40008a64 <__divdf3+0x688>
400085e0:	00c00744 	movi	r3,29
400085e4:	147ffe04 	addi	r17,r2,-8
400085e8:	1907c83a 	sub	r3,r3,r4
400085ec:	8460983a 	sll	r16,r16,r17
400085f0:	98c6d83a 	srl	r3,r19,r3
400085f4:	9c64983a 	sll	r18,r19,r17
400085f8:	1c20b03a 	or	r16,r3,r16
400085fc:	1080fcc4 	addi	r2,r2,1011
40008600:	00abc83a 	sub	r21,zero,r2
40008604:	0027883a 	mov	r19,zero
40008608:	0013883a 	mov	r9,zero
4000860c:	003f9106 	br	40008454 <__alt_data_end+0xc0008454>
40008610:	3446b03a 	or	r3,r6,r17
40008614:	18001f1e 	bne	r3,zero,40008694 <__divdf3+0x2b8>
40008618:	0023883a 	mov	r17,zero
4000861c:	0011883a 	mov	r8,zero
40008620:	01c00084 	movi	r7,2
40008624:	003f9d06 	br	4000849c <__alt_data_end+0xc000849c>
40008628:	3446b03a 	or	r3,r6,r17
4000862c:	18001526 	beq	r3,zero,40008684 <__divdf3+0x2a8>
40008630:	88011b26 	beq	r17,zero,40008aa0 <__divdf3+0x6c4>
40008634:	8809883a 	mov	r4,r17
40008638:	d9800315 	stw	r6,12(sp)
4000863c:	da400115 	stw	r9,4(sp)
40008640:	00095e00 	call	400095e0 <__clzsi2>
40008644:	d9800317 	ldw	r6,12(sp)
40008648:	da400117 	ldw	r9,4(sp)
4000864c:	113ffd44 	addi	r4,r2,-11
40008650:	00c00704 	movi	r3,28
40008654:	19010e16 	blt	r3,r4,40008a90 <__divdf3+0x6b4>
40008658:	00c00744 	movi	r3,29
4000865c:	123ffe04 	addi	r8,r2,-8
40008660:	1907c83a 	sub	r3,r3,r4
40008664:	8a22983a 	sll	r17,r17,r8
40008668:	30c6d83a 	srl	r3,r6,r3
4000866c:	3210983a 	sll	r8,r6,r8
40008670:	1c62b03a 	or	r17,r3,r17
40008674:	1080fcc4 	addi	r2,r2,1011
40008678:	0085c83a 	sub	r2,zero,r2
4000867c:	000f883a 	mov	r7,zero
40008680:	003f8606 	br	4000849c <__alt_data_end+0xc000849c>
40008684:	0023883a 	mov	r17,zero
40008688:	0011883a 	mov	r8,zero
4000868c:	01c00044 	movi	r7,1
40008690:	003f8206 	br	4000849c <__alt_data_end+0xc000849c>
40008694:	01c000c4 	movi	r7,3
40008698:	003f8006 	br	4000849c <__alt_data_end+0xc000849c>
4000869c:	04c00104 	movi	r19,4
400086a0:	0021883a 	mov	r16,zero
400086a4:	0025883a 	mov	r18,zero
400086a8:	02400044 	movi	r9,1
400086ac:	003f6906 	br	40008454 <__alt_data_end+0xc0008454>
400086b0:	04c00304 	movi	r19,12
400086b4:	024000c4 	movi	r9,3
400086b8:	003f6606 	br	40008454 <__alt_data_end+0xc0008454>
400086bc:	01400434 	movhi	r5,16
400086c0:	0007883a 	mov	r3,zero
400086c4:	297fffc4 	addi	r5,r5,-1
400086c8:	04bfffc4 	movi	r18,-1
400086cc:	0081ffc4 	movi	r2,2047
400086d0:	003fa106 	br	40008558 <__alt_data_end+0xc0008558>
400086d4:	00c00044 	movi	r3,1
400086d8:	1887c83a 	sub	r3,r3,r2
400086dc:	01000e04 	movi	r4,56
400086e0:	20c1210e 	bge	r4,r3,40008b68 <__divdf3+0x78c>
400086e4:	98c0004c 	andi	r3,r19,1
400086e8:	0005883a 	mov	r2,zero
400086ec:	000b883a 	mov	r5,zero
400086f0:	0025883a 	mov	r18,zero
400086f4:	003f9806 	br	40008558 <__alt_data_end+0xc0008558>
400086f8:	8c00fd36 	bltu	r17,r16,40008af0 <__divdf3+0x714>
400086fc:	8440fb26 	beq	r16,r17,40008aec <__divdf3+0x710>
40008700:	8007883a 	mov	r3,r16
40008704:	ad7fffc4 	addi	r21,r21,-1
40008708:	0021883a 	mov	r16,zero
4000870c:	4004d63a 	srli	r2,r8,24
40008710:	8822923a 	slli	r17,r17,8
40008714:	1809883a 	mov	r4,r3
40008718:	402c923a 	slli	r22,r8,8
4000871c:	88b8b03a 	or	fp,r17,r2
40008720:	e028d43a 	srli	r20,fp,16
40008724:	d8c00015 	stw	r3,0(sp)
40008728:	e5ffffcc 	andi	r23,fp,65535
4000872c:	a00b883a 	mov	r5,r20
40008730:	0007a740 	call	40007a74 <__udivsi3>
40008734:	d8c00017 	ldw	r3,0(sp)
40008738:	a00b883a 	mov	r5,r20
4000873c:	d8800315 	stw	r2,12(sp)
40008740:	1809883a 	mov	r4,r3
40008744:	0007ad80 	call	40007ad8 <__umodsi3>
40008748:	d9800317 	ldw	r6,12(sp)
4000874c:	1006943a 	slli	r3,r2,16
40008750:	9004d43a 	srli	r2,r18,16
40008754:	b9a3383a 	mul	r17,r23,r6
40008758:	10c4b03a 	or	r2,r2,r3
4000875c:	1440062e 	bgeu	r2,r17,40008778 <__divdf3+0x39c>
40008760:	1705883a 	add	r2,r2,fp
40008764:	30ffffc4 	addi	r3,r6,-1
40008768:	1700ee36 	bltu	r2,fp,40008b24 <__divdf3+0x748>
4000876c:	1440ed2e 	bgeu	r2,r17,40008b24 <__divdf3+0x748>
40008770:	31bfff84 	addi	r6,r6,-2
40008774:	1705883a 	add	r2,r2,fp
40008778:	1463c83a 	sub	r17,r2,r17
4000877c:	a00b883a 	mov	r5,r20
40008780:	8809883a 	mov	r4,r17
40008784:	d9800315 	stw	r6,12(sp)
40008788:	0007a740 	call	40007a74 <__udivsi3>
4000878c:	a00b883a 	mov	r5,r20
40008790:	8809883a 	mov	r4,r17
40008794:	d8800215 	stw	r2,8(sp)
40008798:	0007ad80 	call	40007ad8 <__umodsi3>
4000879c:	d9c00217 	ldw	r7,8(sp)
400087a0:	1004943a 	slli	r2,r2,16
400087a4:	94bfffcc 	andi	r18,r18,65535
400087a8:	b9d1383a 	mul	r8,r23,r7
400087ac:	90a4b03a 	or	r18,r18,r2
400087b0:	d9800317 	ldw	r6,12(sp)
400087b4:	9200062e 	bgeu	r18,r8,400087d0 <__divdf3+0x3f4>
400087b8:	9725883a 	add	r18,r18,fp
400087bc:	38bfffc4 	addi	r2,r7,-1
400087c0:	9700d636 	bltu	r18,fp,40008b1c <__divdf3+0x740>
400087c4:	9200d52e 	bgeu	r18,r8,40008b1c <__divdf3+0x740>
400087c8:	39ffff84 	addi	r7,r7,-2
400087cc:	9725883a 	add	r18,r18,fp
400087d0:	3004943a 	slli	r2,r6,16
400087d4:	b012d43a 	srli	r9,r22,16
400087d8:	b1bfffcc 	andi	r6,r22,65535
400087dc:	11e2b03a 	or	r17,r2,r7
400087e0:	8806d43a 	srli	r3,r17,16
400087e4:	893fffcc 	andi	r4,r17,65535
400087e8:	218b383a 	mul	r5,r4,r6
400087ec:	30c5383a 	mul	r2,r6,r3
400087f0:	2249383a 	mul	r4,r4,r9
400087f4:	280ed43a 	srli	r7,r5,16
400087f8:	9225c83a 	sub	r18,r18,r8
400087fc:	2089883a 	add	r4,r4,r2
40008800:	3909883a 	add	r4,r7,r4
40008804:	1a47383a 	mul	r3,r3,r9
40008808:	2080022e 	bgeu	r4,r2,40008814 <__divdf3+0x438>
4000880c:	00800074 	movhi	r2,1
40008810:	1887883a 	add	r3,r3,r2
40008814:	2004d43a 	srli	r2,r4,16
40008818:	2008943a 	slli	r4,r4,16
4000881c:	297fffcc 	andi	r5,r5,65535
40008820:	10c7883a 	add	r3,r2,r3
40008824:	2149883a 	add	r4,r4,r5
40008828:	90c0a536 	bltu	r18,r3,40008ac0 <__divdf3+0x6e4>
4000882c:	90c0bf26 	beq	r18,r3,40008b2c <__divdf3+0x750>
40008830:	90c7c83a 	sub	r3,r18,r3
40008834:	810fc83a 	sub	r7,r16,r4
40008838:	81e5803a 	cmpltu	r18,r16,r7
4000883c:	1ca5c83a 	sub	r18,r3,r18
40008840:	e480c126 	beq	fp,r18,40008b48 <__divdf3+0x76c>
40008844:	a00b883a 	mov	r5,r20
40008848:	9009883a 	mov	r4,r18
4000884c:	d9800315 	stw	r6,12(sp)
40008850:	d9c00215 	stw	r7,8(sp)
40008854:	da400115 	stw	r9,4(sp)
40008858:	0007a740 	call	40007a74 <__udivsi3>
4000885c:	a00b883a 	mov	r5,r20
40008860:	9009883a 	mov	r4,r18
40008864:	d8800015 	stw	r2,0(sp)
40008868:	0007ad80 	call	40007ad8 <__umodsi3>
4000886c:	d9c00217 	ldw	r7,8(sp)
40008870:	da000017 	ldw	r8,0(sp)
40008874:	1006943a 	slli	r3,r2,16
40008878:	3804d43a 	srli	r2,r7,16
4000887c:	ba21383a 	mul	r16,r23,r8
40008880:	d9800317 	ldw	r6,12(sp)
40008884:	10c4b03a 	or	r2,r2,r3
40008888:	da400117 	ldw	r9,4(sp)
4000888c:	1400062e 	bgeu	r2,r16,400088a8 <__divdf3+0x4cc>
40008890:	1705883a 	add	r2,r2,fp
40008894:	40ffffc4 	addi	r3,r8,-1
40008898:	1700ad36 	bltu	r2,fp,40008b50 <__divdf3+0x774>
4000889c:	1400ac2e 	bgeu	r2,r16,40008b50 <__divdf3+0x774>
400088a0:	423fff84 	addi	r8,r8,-2
400088a4:	1705883a 	add	r2,r2,fp
400088a8:	1421c83a 	sub	r16,r2,r16
400088ac:	a00b883a 	mov	r5,r20
400088b0:	8009883a 	mov	r4,r16
400088b4:	d9800315 	stw	r6,12(sp)
400088b8:	d9c00215 	stw	r7,8(sp)
400088bc:	da000015 	stw	r8,0(sp)
400088c0:	da400115 	stw	r9,4(sp)
400088c4:	0007a740 	call	40007a74 <__udivsi3>
400088c8:	8009883a 	mov	r4,r16
400088cc:	a00b883a 	mov	r5,r20
400088d0:	1025883a 	mov	r18,r2
400088d4:	0007ad80 	call	40007ad8 <__umodsi3>
400088d8:	d9c00217 	ldw	r7,8(sp)
400088dc:	1004943a 	slli	r2,r2,16
400088e0:	bcaf383a 	mul	r23,r23,r18
400088e4:	393fffcc 	andi	r4,r7,65535
400088e8:	2088b03a 	or	r4,r4,r2
400088ec:	d9800317 	ldw	r6,12(sp)
400088f0:	da000017 	ldw	r8,0(sp)
400088f4:	da400117 	ldw	r9,4(sp)
400088f8:	25c0062e 	bgeu	r4,r23,40008914 <__divdf3+0x538>
400088fc:	2709883a 	add	r4,r4,fp
40008900:	90bfffc4 	addi	r2,r18,-1
40008904:	27009436 	bltu	r4,fp,40008b58 <__divdf3+0x77c>
40008908:	25c0932e 	bgeu	r4,r23,40008b58 <__divdf3+0x77c>
4000890c:	94bfff84 	addi	r18,r18,-2
40008910:	2709883a 	add	r4,r4,fp
40008914:	4004943a 	slli	r2,r8,16
40008918:	25efc83a 	sub	r23,r4,r23
4000891c:	1490b03a 	or	r8,r2,r18
40008920:	4008d43a 	srli	r4,r8,16
40008924:	40ffffcc 	andi	r3,r8,65535
40008928:	30c5383a 	mul	r2,r6,r3
4000892c:	1a47383a 	mul	r3,r3,r9
40008930:	310d383a 	mul	r6,r6,r4
40008934:	100ad43a 	srli	r5,r2,16
40008938:	4913383a 	mul	r9,r9,r4
4000893c:	1987883a 	add	r3,r3,r6
40008940:	28c7883a 	add	r3,r5,r3
40008944:	1980022e 	bgeu	r3,r6,40008950 <__divdf3+0x574>
40008948:	01000074 	movhi	r4,1
4000894c:	4913883a 	add	r9,r9,r4
40008950:	1808d43a 	srli	r4,r3,16
40008954:	1806943a 	slli	r3,r3,16
40008958:	10bfffcc 	andi	r2,r2,65535
4000895c:	2253883a 	add	r9,r4,r9
40008960:	1887883a 	add	r3,r3,r2
40008964:	ba403836 	bltu	r23,r9,40008a48 <__divdf3+0x66c>
40008968:	ba403626 	beq	r23,r9,40008a44 <__divdf3+0x668>
4000896c:	42000054 	ori	r8,r8,1
40008970:	a880ffc4 	addi	r2,r21,1023
40008974:	00bf570e 	bge	zero,r2,400086d4 <__alt_data_end+0xc00086d4>
40008978:	40c001cc 	andi	r3,r8,7
4000897c:	18000726 	beq	r3,zero,4000899c <__divdf3+0x5c0>
40008980:	40c003cc 	andi	r3,r8,15
40008984:	01000104 	movi	r4,4
40008988:	19000426 	beq	r3,r4,4000899c <__divdf3+0x5c0>
4000898c:	4107883a 	add	r3,r8,r4
40008990:	1a11803a 	cmpltu	r8,r3,r8
40008994:	8a23883a 	add	r17,r17,r8
40008998:	1811883a 	mov	r8,r3
4000899c:	88c0402c 	andhi	r3,r17,256
400089a0:	18000426 	beq	r3,zero,400089b4 <__divdf3+0x5d8>
400089a4:	00ffc034 	movhi	r3,65280
400089a8:	18ffffc4 	addi	r3,r3,-1
400089ac:	a8810004 	addi	r2,r21,1024
400089b0:	88e2703a 	and	r17,r17,r3
400089b4:	00c1ff84 	movi	r3,2046
400089b8:	18bee316 	blt	r3,r2,40008548 <__alt_data_end+0xc0008548>
400089bc:	8824977a 	slli	r18,r17,29
400089c0:	4010d0fa 	srli	r8,r8,3
400089c4:	8822927a 	slli	r17,r17,9
400089c8:	1081ffcc 	andi	r2,r2,2047
400089cc:	9224b03a 	or	r18,r18,r8
400089d0:	880ad33a 	srli	r5,r17,12
400089d4:	98c0004c 	andi	r3,r19,1
400089d8:	003edf06 	br	40008558 <__alt_data_end+0xc0008558>
400089dc:	8080022c 	andhi	r2,r16,8
400089e0:	10001226 	beq	r2,zero,40008a2c <__divdf3+0x650>
400089e4:	8880022c 	andhi	r2,r17,8
400089e8:	1000101e 	bne	r2,zero,40008a2c <__divdf3+0x650>
400089ec:	00800434 	movhi	r2,16
400089f0:	89400234 	orhi	r5,r17,8
400089f4:	10bfffc4 	addi	r2,r2,-1
400089f8:	b007883a 	mov	r3,r22
400089fc:	288a703a 	and	r5,r5,r2
40008a00:	4025883a 	mov	r18,r8
40008a04:	003f3106 	br	400086cc <__alt_data_end+0xc00086cc>
40008a08:	008000c4 	movi	r2,3
40008a0c:	3880a626 	beq	r7,r2,40008ca8 <__divdf3+0x8cc>
40008a10:	00800044 	movi	r2,1
40008a14:	3880521e 	bne	r7,r2,40008b60 <__divdf3+0x784>
40008a18:	b807883a 	mov	r3,r23
40008a1c:	0005883a 	mov	r2,zero
40008a20:	000b883a 	mov	r5,zero
40008a24:	0025883a 	mov	r18,zero
40008a28:	003ecb06 	br	40008558 <__alt_data_end+0xc0008558>
40008a2c:	00800434 	movhi	r2,16
40008a30:	81400234 	orhi	r5,r16,8
40008a34:	10bfffc4 	addi	r2,r2,-1
40008a38:	a007883a 	mov	r3,r20
40008a3c:	288a703a 	and	r5,r5,r2
40008a40:	003f2206 	br	400086cc <__alt_data_end+0xc00086cc>
40008a44:	183fca26 	beq	r3,zero,40008970 <__alt_data_end+0xc0008970>
40008a48:	e5ef883a 	add	r23,fp,r23
40008a4c:	40bfffc4 	addi	r2,r8,-1
40008a50:	bf00392e 	bgeu	r23,fp,40008b38 <__divdf3+0x75c>
40008a54:	1011883a 	mov	r8,r2
40008a58:	ba7fc41e 	bne	r23,r9,4000896c <__alt_data_end+0xc000896c>
40008a5c:	b0ffc31e 	bne	r22,r3,4000896c <__alt_data_end+0xc000896c>
40008a60:	003fc306 	br	40008970 <__alt_data_end+0xc0008970>
40008a64:	143ff604 	addi	r16,r2,-40
40008a68:	9c20983a 	sll	r16,r19,r16
40008a6c:	0025883a 	mov	r18,zero
40008a70:	003ee206 	br	400085fc <__alt_data_end+0xc00085fc>
40008a74:	d9800315 	stw	r6,12(sp)
40008a78:	d9c00215 	stw	r7,8(sp)
40008a7c:	00095e00 	call	400095e0 <__clzsi2>
40008a80:	10800804 	addi	r2,r2,32
40008a84:	d9c00217 	ldw	r7,8(sp)
40008a88:	d9800317 	ldw	r6,12(sp)
40008a8c:	003ed106 	br	400085d4 <__alt_data_end+0xc00085d4>
40008a90:	147ff604 	addi	r17,r2,-40
40008a94:	3462983a 	sll	r17,r6,r17
40008a98:	0011883a 	mov	r8,zero
40008a9c:	003ef506 	br	40008674 <__alt_data_end+0xc0008674>
40008aa0:	3009883a 	mov	r4,r6
40008aa4:	d9800315 	stw	r6,12(sp)
40008aa8:	da400115 	stw	r9,4(sp)
40008aac:	00095e00 	call	400095e0 <__clzsi2>
40008ab0:	10800804 	addi	r2,r2,32
40008ab4:	da400117 	ldw	r9,4(sp)
40008ab8:	d9800317 	ldw	r6,12(sp)
40008abc:	003ee306 	br	4000864c <__alt_data_end+0xc000864c>
40008ac0:	85a1883a 	add	r16,r16,r22
40008ac4:	8585803a 	cmpltu	r2,r16,r22
40008ac8:	1705883a 	add	r2,r2,fp
40008acc:	14a5883a 	add	r18,r2,r18
40008ad0:	88bfffc4 	addi	r2,r17,-1
40008ad4:	e4800c2e 	bgeu	fp,r18,40008b08 <__divdf3+0x72c>
40008ad8:	90c03e36 	bltu	r18,r3,40008bd4 <__divdf3+0x7f8>
40008adc:	1c806926 	beq	r3,r18,40008c84 <__divdf3+0x8a8>
40008ae0:	90c7c83a 	sub	r3,r18,r3
40008ae4:	1023883a 	mov	r17,r2
40008ae8:	003f5206 	br	40008834 <__alt_data_end+0xc0008834>
40008aec:	923f0436 	bltu	r18,r8,40008700 <__alt_data_end+0xc0008700>
40008af0:	800897fa 	slli	r4,r16,31
40008af4:	9004d07a 	srli	r2,r18,1
40008af8:	8006d07a 	srli	r3,r16,1
40008afc:	902097fa 	slli	r16,r18,31
40008b00:	20a4b03a 	or	r18,r4,r2
40008b04:	003f0106 	br	4000870c <__alt_data_end+0xc000870c>
40008b08:	e4bff51e 	bne	fp,r18,40008ae0 <__alt_data_end+0xc0008ae0>
40008b0c:	85bff22e 	bgeu	r16,r22,40008ad8 <__alt_data_end+0xc0008ad8>
40008b10:	e0c7c83a 	sub	r3,fp,r3
40008b14:	1023883a 	mov	r17,r2
40008b18:	003f4606 	br	40008834 <__alt_data_end+0xc0008834>
40008b1c:	100f883a 	mov	r7,r2
40008b20:	003f2b06 	br	400087d0 <__alt_data_end+0xc00087d0>
40008b24:	180d883a 	mov	r6,r3
40008b28:	003f1306 	br	40008778 <__alt_data_end+0xc0008778>
40008b2c:	813fe436 	bltu	r16,r4,40008ac0 <__alt_data_end+0xc0008ac0>
40008b30:	0007883a 	mov	r3,zero
40008b34:	003f3f06 	br	40008834 <__alt_data_end+0xc0008834>
40008b38:	ba402c36 	bltu	r23,r9,40008bec <__divdf3+0x810>
40008b3c:	4dc05426 	beq	r9,r23,40008c90 <__divdf3+0x8b4>
40008b40:	1011883a 	mov	r8,r2
40008b44:	003f8906 	br	4000896c <__alt_data_end+0xc000896c>
40008b48:	023fffc4 	movi	r8,-1
40008b4c:	003f8806 	br	40008970 <__alt_data_end+0xc0008970>
40008b50:	1811883a 	mov	r8,r3
40008b54:	003f5406 	br	400088a8 <__alt_data_end+0xc00088a8>
40008b58:	1025883a 	mov	r18,r2
40008b5c:	003f6d06 	br	40008914 <__alt_data_end+0xc0008914>
40008b60:	b827883a 	mov	r19,r23
40008b64:	003f8206 	br	40008970 <__alt_data_end+0xc0008970>
40008b68:	010007c4 	movi	r4,31
40008b6c:	20c02616 	blt	r4,r3,40008c08 <__divdf3+0x82c>
40008b70:	00800804 	movi	r2,32
40008b74:	10c5c83a 	sub	r2,r2,r3
40008b78:	888a983a 	sll	r5,r17,r2
40008b7c:	40c8d83a 	srl	r4,r8,r3
40008b80:	4084983a 	sll	r2,r8,r2
40008b84:	88e2d83a 	srl	r17,r17,r3
40008b88:	2906b03a 	or	r3,r5,r4
40008b8c:	1004c03a 	cmpne	r2,r2,zero
40008b90:	1886b03a 	or	r3,r3,r2
40008b94:	188001cc 	andi	r2,r3,7
40008b98:	10000726 	beq	r2,zero,40008bb8 <__divdf3+0x7dc>
40008b9c:	188003cc 	andi	r2,r3,15
40008ba0:	01000104 	movi	r4,4
40008ba4:	11000426 	beq	r2,r4,40008bb8 <__divdf3+0x7dc>
40008ba8:	1805883a 	mov	r2,r3
40008bac:	10c00104 	addi	r3,r2,4
40008bb0:	1885803a 	cmpltu	r2,r3,r2
40008bb4:	88a3883a 	add	r17,r17,r2
40008bb8:	8880202c 	andhi	r2,r17,128
40008bbc:	10002726 	beq	r2,zero,40008c5c <__divdf3+0x880>
40008bc0:	98c0004c 	andi	r3,r19,1
40008bc4:	00800044 	movi	r2,1
40008bc8:	000b883a 	mov	r5,zero
40008bcc:	0025883a 	mov	r18,zero
40008bd0:	003e6106 	br	40008558 <__alt_data_end+0xc0008558>
40008bd4:	85a1883a 	add	r16,r16,r22
40008bd8:	8585803a 	cmpltu	r2,r16,r22
40008bdc:	1705883a 	add	r2,r2,fp
40008be0:	14a5883a 	add	r18,r2,r18
40008be4:	8c7fff84 	addi	r17,r17,-2
40008be8:	003f1106 	br	40008830 <__alt_data_end+0xc0008830>
40008bec:	b589883a 	add	r4,r22,r22
40008bf0:	25ad803a 	cmpltu	r22,r4,r22
40008bf4:	b739883a 	add	fp,r22,fp
40008bf8:	40bfff84 	addi	r2,r8,-2
40008bfc:	bf2f883a 	add	r23,r23,fp
40008c00:	202d883a 	mov	r22,r4
40008c04:	003f9306 	br	40008a54 <__alt_data_end+0xc0008a54>
40008c08:	013ff844 	movi	r4,-31
40008c0c:	2085c83a 	sub	r2,r4,r2
40008c10:	8888d83a 	srl	r4,r17,r2
40008c14:	00800804 	movi	r2,32
40008c18:	18802126 	beq	r3,r2,40008ca0 <__divdf3+0x8c4>
40008c1c:	00801004 	movi	r2,64
40008c20:	10c5c83a 	sub	r2,r2,r3
40008c24:	8884983a 	sll	r2,r17,r2
40008c28:	1204b03a 	or	r2,r2,r8
40008c2c:	1004c03a 	cmpne	r2,r2,zero
40008c30:	2084b03a 	or	r2,r4,r2
40008c34:	144001cc 	andi	r17,r2,7
40008c38:	88000d1e 	bne	r17,zero,40008c70 <__divdf3+0x894>
40008c3c:	000b883a 	mov	r5,zero
40008c40:	1024d0fa 	srli	r18,r2,3
40008c44:	98c0004c 	andi	r3,r19,1
40008c48:	0005883a 	mov	r2,zero
40008c4c:	9464b03a 	or	r18,r18,r17
40008c50:	003e4106 	br	40008558 <__alt_data_end+0xc0008558>
40008c54:	1007883a 	mov	r3,r2
40008c58:	0023883a 	mov	r17,zero
40008c5c:	880a927a 	slli	r5,r17,9
40008c60:	1805883a 	mov	r2,r3
40008c64:	8822977a 	slli	r17,r17,29
40008c68:	280ad33a 	srli	r5,r5,12
40008c6c:	003ff406 	br	40008c40 <__alt_data_end+0xc0008c40>
40008c70:	10c003cc 	andi	r3,r2,15
40008c74:	01000104 	movi	r4,4
40008c78:	193ff626 	beq	r3,r4,40008c54 <__alt_data_end+0xc0008c54>
40008c7c:	0023883a 	mov	r17,zero
40008c80:	003fca06 	br	40008bac <__alt_data_end+0xc0008bac>
40008c84:	813fd336 	bltu	r16,r4,40008bd4 <__alt_data_end+0xc0008bd4>
40008c88:	1023883a 	mov	r17,r2
40008c8c:	003fa806 	br	40008b30 <__alt_data_end+0xc0008b30>
40008c90:	b0ffd636 	bltu	r22,r3,40008bec <__alt_data_end+0xc0008bec>
40008c94:	1011883a 	mov	r8,r2
40008c98:	b0ff341e 	bne	r22,r3,4000896c <__alt_data_end+0xc000896c>
40008c9c:	003f3406 	br	40008970 <__alt_data_end+0xc0008970>
40008ca0:	0005883a 	mov	r2,zero
40008ca4:	003fe006 	br	40008c28 <__alt_data_end+0xc0008c28>
40008ca8:	00800434 	movhi	r2,16
40008cac:	89400234 	orhi	r5,r17,8
40008cb0:	10bfffc4 	addi	r2,r2,-1
40008cb4:	b807883a 	mov	r3,r23
40008cb8:	288a703a 	and	r5,r5,r2
40008cbc:	4025883a 	mov	r18,r8
40008cc0:	003e8206 	br	400086cc <__alt_data_end+0xc00086cc>

40008cc4 <__muldf3>:
40008cc4:	defff304 	addi	sp,sp,-52
40008cc8:	2804d53a 	srli	r2,r5,20
40008ccc:	dd800915 	stw	r22,36(sp)
40008cd0:	282cd7fa 	srli	r22,r5,31
40008cd4:	dc000315 	stw	r16,12(sp)
40008cd8:	04000434 	movhi	r16,16
40008cdc:	dd400815 	stw	r21,32(sp)
40008ce0:	dc800515 	stw	r18,20(sp)
40008ce4:	843fffc4 	addi	r16,r16,-1
40008ce8:	dfc00c15 	stw	ra,48(sp)
40008cec:	df000b15 	stw	fp,44(sp)
40008cf0:	ddc00a15 	stw	r23,40(sp)
40008cf4:	dd000715 	stw	r20,28(sp)
40008cf8:	dcc00615 	stw	r19,24(sp)
40008cfc:	dc400415 	stw	r17,16(sp)
40008d00:	1481ffcc 	andi	r18,r2,2047
40008d04:	2c20703a 	and	r16,r5,r16
40008d08:	b02b883a 	mov	r21,r22
40008d0c:	b2403fcc 	andi	r9,r22,255
40008d10:	90006026 	beq	r18,zero,40008e94 <__muldf3+0x1d0>
40008d14:	0081ffc4 	movi	r2,2047
40008d18:	2029883a 	mov	r20,r4
40008d1c:	90803626 	beq	r18,r2,40008df8 <__muldf3+0x134>
40008d20:	80800434 	orhi	r2,r16,16
40008d24:	100490fa 	slli	r2,r2,3
40008d28:	2020d77a 	srli	r16,r4,29
40008d2c:	202890fa 	slli	r20,r4,3
40008d30:	94bf0044 	addi	r18,r18,-1023
40008d34:	80a0b03a 	or	r16,r16,r2
40008d38:	0027883a 	mov	r19,zero
40008d3c:	0039883a 	mov	fp,zero
40008d40:	3804d53a 	srli	r2,r7,20
40008d44:	382ed7fa 	srli	r23,r7,31
40008d48:	04400434 	movhi	r17,16
40008d4c:	8c7fffc4 	addi	r17,r17,-1
40008d50:	1081ffcc 	andi	r2,r2,2047
40008d54:	3011883a 	mov	r8,r6
40008d58:	3c62703a 	and	r17,r7,r17
40008d5c:	ba803fcc 	andi	r10,r23,255
40008d60:	10006d26 	beq	r2,zero,40008f18 <__muldf3+0x254>
40008d64:	00c1ffc4 	movi	r3,2047
40008d68:	10c06526 	beq	r2,r3,40008f00 <__muldf3+0x23c>
40008d6c:	88c00434 	orhi	r3,r17,16
40008d70:	180690fa 	slli	r3,r3,3
40008d74:	3022d77a 	srli	r17,r6,29
40008d78:	301090fa 	slli	r8,r6,3
40008d7c:	10bf0044 	addi	r2,r2,-1023
40008d80:	88e2b03a 	or	r17,r17,r3
40008d84:	000b883a 	mov	r5,zero
40008d88:	9085883a 	add	r2,r18,r2
40008d8c:	2cc8b03a 	or	r4,r5,r19
40008d90:	00c003c4 	movi	r3,15
40008d94:	bdacf03a 	xor	r22,r23,r22
40008d98:	12c00044 	addi	r11,r2,1
40008d9c:	19009936 	bltu	r3,r4,40009004 <__muldf3+0x340>
40008da0:	200890ba 	slli	r4,r4,2
40008da4:	00d00074 	movhi	r3,16385
40008da8:	18e36e04 	addi	r3,r3,-29256
40008dac:	20c9883a 	add	r4,r4,r3
40008db0:	20c00017 	ldw	r3,0(r4)
40008db4:	1800683a 	jmp	r3
40008db8:	40009004 	addi	zero,r8,576
40008dbc:	40008e18 	cmpnei	zero,r8,568
40008dc0:	40008e18 	cmpnei	zero,r8,568
40008dc4:	40008e14 	ori	zero,r8,568
40008dc8:	40008fe0 	cmpeqi	zero,r8,575
40008dcc:	40008fe0 	cmpeqi	zero,r8,575
40008dd0:	40008fc8 	cmpgei	zero,r8,575
40008dd4:	40008e14 	ori	zero,r8,568
40008dd8:	40008fe0 	cmpeqi	zero,r8,575
40008ddc:	40008fc8 	cmpgei	zero,r8,575
40008de0:	40008fe0 	cmpeqi	zero,r8,575
40008de4:	40008e14 	ori	zero,r8,568
40008de8:	40008ff0 	cmpltui	zero,r8,575
40008dec:	40008ff0 	cmpltui	zero,r8,575
40008df0:	40008ff0 	cmpltui	zero,r8,575
40008df4:	4000920c 	andi	zero,r8,584
40008df8:	2404b03a 	or	r2,r4,r16
40008dfc:	10006f1e 	bne	r2,zero,40008fbc <__muldf3+0x2f8>
40008e00:	04c00204 	movi	r19,8
40008e04:	0021883a 	mov	r16,zero
40008e08:	0029883a 	mov	r20,zero
40008e0c:	07000084 	movi	fp,2
40008e10:	003fcb06 	br	40008d40 <__alt_data_end+0xc0008d40>
40008e14:	502d883a 	mov	r22,r10
40008e18:	00800084 	movi	r2,2
40008e1c:	28805726 	beq	r5,r2,40008f7c <__muldf3+0x2b8>
40008e20:	008000c4 	movi	r2,3
40008e24:	28816626 	beq	r5,r2,400093c0 <__muldf3+0x6fc>
40008e28:	00800044 	movi	r2,1
40008e2c:	2881411e 	bne	r5,r2,40009334 <__muldf3+0x670>
40008e30:	b02b883a 	mov	r21,r22
40008e34:	0005883a 	mov	r2,zero
40008e38:	000b883a 	mov	r5,zero
40008e3c:	0029883a 	mov	r20,zero
40008e40:	1004953a 	slli	r2,r2,20
40008e44:	a8c03fcc 	andi	r3,r21,255
40008e48:	04400434 	movhi	r17,16
40008e4c:	8c7fffc4 	addi	r17,r17,-1
40008e50:	180697fa 	slli	r3,r3,31
40008e54:	2c4a703a 	and	r5,r5,r17
40008e58:	288ab03a 	or	r5,r5,r2
40008e5c:	28c6b03a 	or	r3,r5,r3
40008e60:	a005883a 	mov	r2,r20
40008e64:	dfc00c17 	ldw	ra,48(sp)
40008e68:	df000b17 	ldw	fp,44(sp)
40008e6c:	ddc00a17 	ldw	r23,40(sp)
40008e70:	dd800917 	ldw	r22,36(sp)
40008e74:	dd400817 	ldw	r21,32(sp)
40008e78:	dd000717 	ldw	r20,28(sp)
40008e7c:	dcc00617 	ldw	r19,24(sp)
40008e80:	dc800517 	ldw	r18,20(sp)
40008e84:	dc400417 	ldw	r17,16(sp)
40008e88:	dc000317 	ldw	r16,12(sp)
40008e8c:	dec00d04 	addi	sp,sp,52
40008e90:	f800283a 	ret
40008e94:	2404b03a 	or	r2,r4,r16
40008e98:	2027883a 	mov	r19,r4
40008e9c:	10004226 	beq	r2,zero,40008fa8 <__muldf3+0x2e4>
40008ea0:	8000fc26 	beq	r16,zero,40009294 <__muldf3+0x5d0>
40008ea4:	8009883a 	mov	r4,r16
40008ea8:	d9800215 	stw	r6,8(sp)
40008eac:	d9c00015 	stw	r7,0(sp)
40008eb0:	da400115 	stw	r9,4(sp)
40008eb4:	00095e00 	call	400095e0 <__clzsi2>
40008eb8:	d9800217 	ldw	r6,8(sp)
40008ebc:	d9c00017 	ldw	r7,0(sp)
40008ec0:	da400117 	ldw	r9,4(sp)
40008ec4:	113ffd44 	addi	r4,r2,-11
40008ec8:	00c00704 	movi	r3,28
40008ecc:	1900ed16 	blt	r3,r4,40009284 <__muldf3+0x5c0>
40008ed0:	00c00744 	movi	r3,29
40008ed4:	147ffe04 	addi	r17,r2,-8
40008ed8:	1907c83a 	sub	r3,r3,r4
40008edc:	8460983a 	sll	r16,r16,r17
40008ee0:	98c6d83a 	srl	r3,r19,r3
40008ee4:	9c68983a 	sll	r20,r19,r17
40008ee8:	1c20b03a 	or	r16,r3,r16
40008eec:	1080fcc4 	addi	r2,r2,1011
40008ef0:	00a5c83a 	sub	r18,zero,r2
40008ef4:	0027883a 	mov	r19,zero
40008ef8:	0039883a 	mov	fp,zero
40008efc:	003f9006 	br	40008d40 <__alt_data_end+0xc0008d40>
40008f00:	3446b03a 	or	r3,r6,r17
40008f04:	1800261e 	bne	r3,zero,40008fa0 <__muldf3+0x2dc>
40008f08:	0023883a 	mov	r17,zero
40008f0c:	0011883a 	mov	r8,zero
40008f10:	01400084 	movi	r5,2
40008f14:	003f9c06 	br	40008d88 <__alt_data_end+0xc0008d88>
40008f18:	3446b03a 	or	r3,r6,r17
40008f1c:	18001c26 	beq	r3,zero,40008f90 <__muldf3+0x2cc>
40008f20:	8800ce26 	beq	r17,zero,4000925c <__muldf3+0x598>
40008f24:	8809883a 	mov	r4,r17
40008f28:	d9800215 	stw	r6,8(sp)
40008f2c:	da400115 	stw	r9,4(sp)
40008f30:	da800015 	stw	r10,0(sp)
40008f34:	00095e00 	call	400095e0 <__clzsi2>
40008f38:	d9800217 	ldw	r6,8(sp)
40008f3c:	da400117 	ldw	r9,4(sp)
40008f40:	da800017 	ldw	r10,0(sp)
40008f44:	113ffd44 	addi	r4,r2,-11
40008f48:	00c00704 	movi	r3,28
40008f4c:	1900bf16 	blt	r3,r4,4000924c <__muldf3+0x588>
40008f50:	00c00744 	movi	r3,29
40008f54:	123ffe04 	addi	r8,r2,-8
40008f58:	1907c83a 	sub	r3,r3,r4
40008f5c:	8a22983a 	sll	r17,r17,r8
40008f60:	30c6d83a 	srl	r3,r6,r3
40008f64:	3210983a 	sll	r8,r6,r8
40008f68:	1c62b03a 	or	r17,r3,r17
40008f6c:	1080fcc4 	addi	r2,r2,1011
40008f70:	0085c83a 	sub	r2,zero,r2
40008f74:	000b883a 	mov	r5,zero
40008f78:	003f8306 	br	40008d88 <__alt_data_end+0xc0008d88>
40008f7c:	b02b883a 	mov	r21,r22
40008f80:	0081ffc4 	movi	r2,2047
40008f84:	000b883a 	mov	r5,zero
40008f88:	0029883a 	mov	r20,zero
40008f8c:	003fac06 	br	40008e40 <__alt_data_end+0xc0008e40>
40008f90:	0023883a 	mov	r17,zero
40008f94:	0011883a 	mov	r8,zero
40008f98:	01400044 	movi	r5,1
40008f9c:	003f7a06 	br	40008d88 <__alt_data_end+0xc0008d88>
40008fa0:	014000c4 	movi	r5,3
40008fa4:	003f7806 	br	40008d88 <__alt_data_end+0xc0008d88>
40008fa8:	04c00104 	movi	r19,4
40008fac:	0021883a 	mov	r16,zero
40008fb0:	0029883a 	mov	r20,zero
40008fb4:	07000044 	movi	fp,1
40008fb8:	003f6106 	br	40008d40 <__alt_data_end+0xc0008d40>
40008fbc:	04c00304 	movi	r19,12
40008fc0:	070000c4 	movi	fp,3
40008fc4:	003f5e06 	br	40008d40 <__alt_data_end+0xc0008d40>
40008fc8:	01400434 	movhi	r5,16
40008fcc:	002b883a 	mov	r21,zero
40008fd0:	297fffc4 	addi	r5,r5,-1
40008fd4:	053fffc4 	movi	r20,-1
40008fd8:	0081ffc4 	movi	r2,2047
40008fdc:	003f9806 	br	40008e40 <__alt_data_end+0xc0008e40>
40008fe0:	8023883a 	mov	r17,r16
40008fe4:	a011883a 	mov	r8,r20
40008fe8:	e00b883a 	mov	r5,fp
40008fec:	003f8a06 	br	40008e18 <__alt_data_end+0xc0008e18>
40008ff0:	8023883a 	mov	r17,r16
40008ff4:	a011883a 	mov	r8,r20
40008ff8:	482d883a 	mov	r22,r9
40008ffc:	e00b883a 	mov	r5,fp
40009000:	003f8506 	br	40008e18 <__alt_data_end+0xc0008e18>
40009004:	a00ad43a 	srli	r5,r20,16
40009008:	401ad43a 	srli	r13,r8,16
4000900c:	a53fffcc 	andi	r20,r20,65535
40009010:	423fffcc 	andi	r8,r8,65535
40009014:	4519383a 	mul	r12,r8,r20
40009018:	4147383a 	mul	r3,r8,r5
4000901c:	6d09383a 	mul	r4,r13,r20
40009020:	600cd43a 	srli	r6,r12,16
40009024:	2b5d383a 	mul	r14,r5,r13
40009028:	20c9883a 	add	r4,r4,r3
4000902c:	310d883a 	add	r6,r6,r4
40009030:	30c0022e 	bgeu	r6,r3,4000903c <__muldf3+0x378>
40009034:	00c00074 	movhi	r3,1
40009038:	70dd883a 	add	r14,r14,r3
4000903c:	8826d43a 	srli	r19,r17,16
40009040:	8bffffcc 	andi	r15,r17,65535
40009044:	7d23383a 	mul	r17,r15,r20
40009048:	7949383a 	mul	r4,r15,r5
4000904c:	9d29383a 	mul	r20,r19,r20
40009050:	8814d43a 	srli	r10,r17,16
40009054:	3012943a 	slli	r9,r6,16
40009058:	a129883a 	add	r20,r20,r4
4000905c:	633fffcc 	andi	r12,r12,65535
40009060:	5515883a 	add	r10,r10,r20
40009064:	3006d43a 	srli	r3,r6,16
40009068:	4b13883a 	add	r9,r9,r12
4000906c:	2ccb383a 	mul	r5,r5,r19
40009070:	5100022e 	bgeu	r10,r4,4000907c <__muldf3+0x3b8>
40009074:	01000074 	movhi	r4,1
40009078:	290b883a 	add	r5,r5,r4
4000907c:	802ad43a 	srli	r21,r16,16
40009080:	843fffcc 	andi	r16,r16,65535
40009084:	440d383a 	mul	r6,r8,r16
40009088:	4565383a 	mul	r18,r8,r21
4000908c:	8349383a 	mul	r4,r16,r13
40009090:	500e943a 	slli	r7,r10,16
40009094:	3010d43a 	srli	r8,r6,16
40009098:	5028d43a 	srli	r20,r10,16
4000909c:	2489883a 	add	r4,r4,r18
400090a0:	8abfffcc 	andi	r10,r17,65535
400090a4:	3a95883a 	add	r10,r7,r10
400090a8:	4119883a 	add	r12,r8,r4
400090ac:	a169883a 	add	r20,r20,r5
400090b0:	1a87883a 	add	r3,r3,r10
400090b4:	6d5b383a 	mul	r13,r13,r21
400090b8:	6480022e 	bgeu	r12,r18,400090c4 <__muldf3+0x400>
400090bc:	01000074 	movhi	r4,1
400090c0:	691b883a 	add	r13,r13,r4
400090c4:	7c25383a 	mul	r18,r15,r16
400090c8:	7d4b383a 	mul	r5,r15,r21
400090cc:	84cf383a 	mul	r7,r16,r19
400090d0:	901ed43a 	srli	r15,r18,16
400090d4:	6008d43a 	srli	r4,r12,16
400090d8:	6010943a 	slli	r8,r12,16
400090dc:	394f883a 	add	r7,r7,r5
400090e0:	333fffcc 	andi	r12,r6,65535
400090e4:	79df883a 	add	r15,r15,r7
400090e8:	235b883a 	add	r13,r4,r13
400090ec:	9d63383a 	mul	r17,r19,r21
400090f0:	4309883a 	add	r4,r8,r12
400090f4:	7940022e 	bgeu	r15,r5,40009100 <__muldf3+0x43c>
400090f8:	01400074 	movhi	r5,1
400090fc:	8963883a 	add	r17,r17,r5
40009100:	780a943a 	slli	r5,r15,16
40009104:	91bfffcc 	andi	r6,r18,65535
40009108:	70c7883a 	add	r3,r14,r3
4000910c:	298d883a 	add	r6,r5,r6
40009110:	1a8f803a 	cmpltu	r7,r3,r10
40009114:	350b883a 	add	r5,r6,r20
40009118:	20c7883a 	add	r3,r4,r3
4000911c:	3955883a 	add	r10,r7,r5
40009120:	1909803a 	cmpltu	r4,r3,r4
40009124:	6a91883a 	add	r8,r13,r10
40009128:	780cd43a 	srli	r6,r15,16
4000912c:	2219883a 	add	r12,r4,r8
40009130:	2d0b803a 	cmpltu	r5,r5,r20
40009134:	51cf803a 	cmpltu	r7,r10,r7
40009138:	29ceb03a 	or	r7,r5,r7
4000913c:	4351803a 	cmpltu	r8,r8,r13
40009140:	610b803a 	cmpltu	r5,r12,r4
40009144:	4148b03a 	or	r4,r8,r5
40009148:	398f883a 	add	r7,r7,r6
4000914c:	3909883a 	add	r4,r7,r4
40009150:	1810927a 	slli	r8,r3,9
40009154:	2449883a 	add	r4,r4,r17
40009158:	2008927a 	slli	r4,r4,9
4000915c:	6022d5fa 	srli	r17,r12,23
40009160:	1806d5fa 	srli	r3,r3,23
40009164:	4252b03a 	or	r9,r8,r9
40009168:	600a927a 	slli	r5,r12,9
4000916c:	4810c03a 	cmpne	r8,r9,zero
40009170:	2462b03a 	or	r17,r4,r17
40009174:	40c6b03a 	or	r3,r8,r3
40009178:	8900402c 	andhi	r4,r17,256
4000917c:	1950b03a 	or	r8,r3,r5
40009180:	20000726 	beq	r4,zero,400091a0 <__muldf3+0x4dc>
40009184:	4006d07a 	srli	r3,r8,1
40009188:	880497fa 	slli	r2,r17,31
4000918c:	4200004c 	andi	r8,r8,1
40009190:	8822d07a 	srli	r17,r17,1
40009194:	1a10b03a 	or	r8,r3,r8
40009198:	1210b03a 	or	r8,r2,r8
4000919c:	5805883a 	mov	r2,r11
400091a0:	1140ffc4 	addi	r5,r2,1023
400091a4:	0140440e 	bge	zero,r5,400092b8 <__muldf3+0x5f4>
400091a8:	40c001cc 	andi	r3,r8,7
400091ac:	18000726 	beq	r3,zero,400091cc <__muldf3+0x508>
400091b0:	40c003cc 	andi	r3,r8,15
400091b4:	01000104 	movi	r4,4
400091b8:	19000426 	beq	r3,r4,400091cc <__muldf3+0x508>
400091bc:	4107883a 	add	r3,r8,r4
400091c0:	1a11803a 	cmpltu	r8,r3,r8
400091c4:	8a23883a 	add	r17,r17,r8
400091c8:	1811883a 	mov	r8,r3
400091cc:	88c0402c 	andhi	r3,r17,256
400091d0:	18000426 	beq	r3,zero,400091e4 <__muldf3+0x520>
400091d4:	11410004 	addi	r5,r2,1024
400091d8:	00bfc034 	movhi	r2,65280
400091dc:	10bfffc4 	addi	r2,r2,-1
400091e0:	88a2703a 	and	r17,r17,r2
400091e4:	0081ff84 	movi	r2,2046
400091e8:	117f6416 	blt	r2,r5,40008f7c <__alt_data_end+0xc0008f7c>
400091ec:	8828977a 	slli	r20,r17,29
400091f0:	4010d0fa 	srli	r8,r8,3
400091f4:	8822927a 	slli	r17,r17,9
400091f8:	2881ffcc 	andi	r2,r5,2047
400091fc:	a228b03a 	or	r20,r20,r8
40009200:	880ad33a 	srli	r5,r17,12
40009204:	b02b883a 	mov	r21,r22
40009208:	003f0d06 	br	40008e40 <__alt_data_end+0xc0008e40>
4000920c:	8080022c 	andhi	r2,r16,8
40009210:	10000926 	beq	r2,zero,40009238 <__muldf3+0x574>
40009214:	8880022c 	andhi	r2,r17,8
40009218:	1000071e 	bne	r2,zero,40009238 <__muldf3+0x574>
4000921c:	00800434 	movhi	r2,16
40009220:	89400234 	orhi	r5,r17,8
40009224:	10bfffc4 	addi	r2,r2,-1
40009228:	b82b883a 	mov	r21,r23
4000922c:	288a703a 	and	r5,r5,r2
40009230:	4029883a 	mov	r20,r8
40009234:	003f6806 	br	40008fd8 <__alt_data_end+0xc0008fd8>
40009238:	00800434 	movhi	r2,16
4000923c:	81400234 	orhi	r5,r16,8
40009240:	10bfffc4 	addi	r2,r2,-1
40009244:	288a703a 	and	r5,r5,r2
40009248:	003f6306 	br	40008fd8 <__alt_data_end+0xc0008fd8>
4000924c:	147ff604 	addi	r17,r2,-40
40009250:	3462983a 	sll	r17,r6,r17
40009254:	0011883a 	mov	r8,zero
40009258:	003f4406 	br	40008f6c <__alt_data_end+0xc0008f6c>
4000925c:	3009883a 	mov	r4,r6
40009260:	d9800215 	stw	r6,8(sp)
40009264:	da400115 	stw	r9,4(sp)
40009268:	da800015 	stw	r10,0(sp)
4000926c:	00095e00 	call	400095e0 <__clzsi2>
40009270:	10800804 	addi	r2,r2,32
40009274:	da800017 	ldw	r10,0(sp)
40009278:	da400117 	ldw	r9,4(sp)
4000927c:	d9800217 	ldw	r6,8(sp)
40009280:	003f3006 	br	40008f44 <__alt_data_end+0xc0008f44>
40009284:	143ff604 	addi	r16,r2,-40
40009288:	9c20983a 	sll	r16,r19,r16
4000928c:	0029883a 	mov	r20,zero
40009290:	003f1606 	br	40008eec <__alt_data_end+0xc0008eec>
40009294:	d9800215 	stw	r6,8(sp)
40009298:	d9c00015 	stw	r7,0(sp)
4000929c:	da400115 	stw	r9,4(sp)
400092a0:	00095e00 	call	400095e0 <__clzsi2>
400092a4:	10800804 	addi	r2,r2,32
400092a8:	da400117 	ldw	r9,4(sp)
400092ac:	d9c00017 	ldw	r7,0(sp)
400092b0:	d9800217 	ldw	r6,8(sp)
400092b4:	003f0306 	br	40008ec4 <__alt_data_end+0xc0008ec4>
400092b8:	00c00044 	movi	r3,1
400092bc:	1947c83a 	sub	r3,r3,r5
400092c0:	00800e04 	movi	r2,56
400092c4:	10feda16 	blt	r2,r3,40008e30 <__alt_data_end+0xc0008e30>
400092c8:	008007c4 	movi	r2,31
400092cc:	10c01b16 	blt	r2,r3,4000933c <__muldf3+0x678>
400092d0:	00800804 	movi	r2,32
400092d4:	10c5c83a 	sub	r2,r2,r3
400092d8:	888a983a 	sll	r5,r17,r2
400092dc:	40c8d83a 	srl	r4,r8,r3
400092e0:	4084983a 	sll	r2,r8,r2
400092e4:	88e2d83a 	srl	r17,r17,r3
400092e8:	2906b03a 	or	r3,r5,r4
400092ec:	1004c03a 	cmpne	r2,r2,zero
400092f0:	1886b03a 	or	r3,r3,r2
400092f4:	188001cc 	andi	r2,r3,7
400092f8:	10000726 	beq	r2,zero,40009318 <__muldf3+0x654>
400092fc:	188003cc 	andi	r2,r3,15
40009300:	01000104 	movi	r4,4
40009304:	11000426 	beq	r2,r4,40009318 <__muldf3+0x654>
40009308:	1805883a 	mov	r2,r3
4000930c:	10c00104 	addi	r3,r2,4
40009310:	1885803a 	cmpltu	r2,r3,r2
40009314:	88a3883a 	add	r17,r17,r2
40009318:	8880202c 	andhi	r2,r17,128
4000931c:	10001c26 	beq	r2,zero,40009390 <__muldf3+0x6cc>
40009320:	b02b883a 	mov	r21,r22
40009324:	00800044 	movi	r2,1
40009328:	000b883a 	mov	r5,zero
4000932c:	0029883a 	mov	r20,zero
40009330:	003ec306 	br	40008e40 <__alt_data_end+0xc0008e40>
40009334:	5805883a 	mov	r2,r11
40009338:	003f9906 	br	400091a0 <__alt_data_end+0xc00091a0>
4000933c:	00bff844 	movi	r2,-31
40009340:	1145c83a 	sub	r2,r2,r5
40009344:	8888d83a 	srl	r4,r17,r2
40009348:	00800804 	movi	r2,32
4000934c:	18801a26 	beq	r3,r2,400093b8 <__muldf3+0x6f4>
40009350:	00801004 	movi	r2,64
40009354:	10c5c83a 	sub	r2,r2,r3
40009358:	8884983a 	sll	r2,r17,r2
4000935c:	1204b03a 	or	r2,r2,r8
40009360:	1004c03a 	cmpne	r2,r2,zero
40009364:	2084b03a 	or	r2,r4,r2
40009368:	144001cc 	andi	r17,r2,7
4000936c:	88000d1e 	bne	r17,zero,400093a4 <__muldf3+0x6e0>
40009370:	000b883a 	mov	r5,zero
40009374:	1028d0fa 	srli	r20,r2,3
40009378:	b02b883a 	mov	r21,r22
4000937c:	0005883a 	mov	r2,zero
40009380:	a468b03a 	or	r20,r20,r17
40009384:	003eae06 	br	40008e40 <__alt_data_end+0xc0008e40>
40009388:	1007883a 	mov	r3,r2
4000938c:	0023883a 	mov	r17,zero
40009390:	880a927a 	slli	r5,r17,9
40009394:	1805883a 	mov	r2,r3
40009398:	8822977a 	slli	r17,r17,29
4000939c:	280ad33a 	srli	r5,r5,12
400093a0:	003ff406 	br	40009374 <__alt_data_end+0xc0009374>
400093a4:	10c003cc 	andi	r3,r2,15
400093a8:	01000104 	movi	r4,4
400093ac:	193ff626 	beq	r3,r4,40009388 <__alt_data_end+0xc0009388>
400093b0:	0023883a 	mov	r17,zero
400093b4:	003fd506 	br	4000930c <__alt_data_end+0xc000930c>
400093b8:	0005883a 	mov	r2,zero
400093bc:	003fe706 	br	4000935c <__alt_data_end+0xc000935c>
400093c0:	00800434 	movhi	r2,16
400093c4:	89400234 	orhi	r5,r17,8
400093c8:	10bfffc4 	addi	r2,r2,-1
400093cc:	b02b883a 	mov	r21,r22
400093d0:	288a703a 	and	r5,r5,r2
400093d4:	4029883a 	mov	r20,r8
400093d8:	003eff06 	br	40008fd8 <__alt_data_end+0xc0008fd8>

400093dc <__fixdfsi>:
400093dc:	280cd53a 	srli	r6,r5,20
400093e0:	00c00434 	movhi	r3,16
400093e4:	18ffffc4 	addi	r3,r3,-1
400093e8:	3181ffcc 	andi	r6,r6,2047
400093ec:	01c0ff84 	movi	r7,1022
400093f0:	28c6703a 	and	r3,r5,r3
400093f4:	280ad7fa 	srli	r5,r5,31
400093f8:	3980120e 	bge	r7,r6,40009444 <__fixdfsi+0x68>
400093fc:	00810744 	movi	r2,1053
40009400:	11800c16 	blt	r2,r6,40009434 <__fixdfsi+0x58>
40009404:	00810cc4 	movi	r2,1075
40009408:	1185c83a 	sub	r2,r2,r6
4000940c:	01c007c4 	movi	r7,31
40009410:	18c00434 	orhi	r3,r3,16
40009414:	38800d16 	blt	r7,r2,4000944c <__fixdfsi+0x70>
40009418:	31befb44 	addi	r6,r6,-1043
4000941c:	2084d83a 	srl	r2,r4,r2
40009420:	1986983a 	sll	r3,r3,r6
40009424:	1884b03a 	or	r2,r3,r2
40009428:	28000726 	beq	r5,zero,40009448 <__fixdfsi+0x6c>
4000942c:	0085c83a 	sub	r2,zero,r2
40009430:	f800283a 	ret
40009434:	00a00034 	movhi	r2,32768
40009438:	10bfffc4 	addi	r2,r2,-1
4000943c:	2885883a 	add	r2,r5,r2
40009440:	f800283a 	ret
40009444:	0005883a 	mov	r2,zero
40009448:	f800283a 	ret
4000944c:	008104c4 	movi	r2,1043
40009450:	1185c83a 	sub	r2,r2,r6
40009454:	1884d83a 	srl	r2,r3,r2
40009458:	003ff306 	br	40009428 <__alt_data_end+0xc0009428>

4000945c <__floatsidf>:
4000945c:	defffd04 	addi	sp,sp,-12
40009460:	dfc00215 	stw	ra,8(sp)
40009464:	dc400115 	stw	r17,4(sp)
40009468:	dc000015 	stw	r16,0(sp)
4000946c:	20002b26 	beq	r4,zero,4000951c <__floatsidf+0xc0>
40009470:	2023883a 	mov	r17,r4
40009474:	2020d7fa 	srli	r16,r4,31
40009478:	20002d16 	blt	r4,zero,40009530 <__floatsidf+0xd4>
4000947c:	8809883a 	mov	r4,r17
40009480:	00095e00 	call	400095e0 <__clzsi2>
40009484:	01410784 	movi	r5,1054
40009488:	288bc83a 	sub	r5,r5,r2
4000948c:	01010cc4 	movi	r4,1075
40009490:	2149c83a 	sub	r4,r4,r5
40009494:	00c007c4 	movi	r3,31
40009498:	1900160e 	bge	r3,r4,400094f4 <__floatsidf+0x98>
4000949c:	00c104c4 	movi	r3,1043
400094a0:	1947c83a 	sub	r3,r3,r5
400094a4:	88c6983a 	sll	r3,r17,r3
400094a8:	00800434 	movhi	r2,16
400094ac:	10bfffc4 	addi	r2,r2,-1
400094b0:	1886703a 	and	r3,r3,r2
400094b4:	2941ffcc 	andi	r5,r5,2047
400094b8:	800d883a 	mov	r6,r16
400094bc:	0005883a 	mov	r2,zero
400094c0:	280a953a 	slli	r5,r5,20
400094c4:	31803fcc 	andi	r6,r6,255
400094c8:	01000434 	movhi	r4,16
400094cc:	300c97fa 	slli	r6,r6,31
400094d0:	213fffc4 	addi	r4,r4,-1
400094d4:	1906703a 	and	r3,r3,r4
400094d8:	1946b03a 	or	r3,r3,r5
400094dc:	1986b03a 	or	r3,r3,r6
400094e0:	dfc00217 	ldw	ra,8(sp)
400094e4:	dc400117 	ldw	r17,4(sp)
400094e8:	dc000017 	ldw	r16,0(sp)
400094ec:	dec00304 	addi	sp,sp,12
400094f0:	f800283a 	ret
400094f4:	00c002c4 	movi	r3,11
400094f8:	1887c83a 	sub	r3,r3,r2
400094fc:	88c6d83a 	srl	r3,r17,r3
40009500:	8904983a 	sll	r2,r17,r4
40009504:	01000434 	movhi	r4,16
40009508:	213fffc4 	addi	r4,r4,-1
4000950c:	2941ffcc 	andi	r5,r5,2047
40009510:	1906703a 	and	r3,r3,r4
40009514:	800d883a 	mov	r6,r16
40009518:	003fe906 	br	400094c0 <__alt_data_end+0xc00094c0>
4000951c:	000d883a 	mov	r6,zero
40009520:	000b883a 	mov	r5,zero
40009524:	0007883a 	mov	r3,zero
40009528:	0005883a 	mov	r2,zero
4000952c:	003fe406 	br	400094c0 <__alt_data_end+0xc00094c0>
40009530:	0123c83a 	sub	r17,zero,r4
40009534:	003fd106 	br	4000947c <__alt_data_end+0xc000947c>

40009538 <__floatunsidf>:
40009538:	defffe04 	addi	sp,sp,-8
4000953c:	dc000015 	stw	r16,0(sp)
40009540:	dfc00115 	stw	ra,4(sp)
40009544:	2021883a 	mov	r16,r4
40009548:	20002226 	beq	r4,zero,400095d4 <__floatunsidf+0x9c>
4000954c:	00095e00 	call	400095e0 <__clzsi2>
40009550:	01010784 	movi	r4,1054
40009554:	2089c83a 	sub	r4,r4,r2
40009558:	01810cc4 	movi	r6,1075
4000955c:	310dc83a 	sub	r6,r6,r4
40009560:	00c007c4 	movi	r3,31
40009564:	1980120e 	bge	r3,r6,400095b0 <__floatunsidf+0x78>
40009568:	00c104c4 	movi	r3,1043
4000956c:	1907c83a 	sub	r3,r3,r4
40009570:	80ca983a 	sll	r5,r16,r3
40009574:	00800434 	movhi	r2,16
40009578:	10bfffc4 	addi	r2,r2,-1
4000957c:	2101ffcc 	andi	r4,r4,2047
40009580:	0021883a 	mov	r16,zero
40009584:	288a703a 	and	r5,r5,r2
40009588:	2008953a 	slli	r4,r4,20
4000958c:	00c00434 	movhi	r3,16
40009590:	18ffffc4 	addi	r3,r3,-1
40009594:	28c6703a 	and	r3,r5,r3
40009598:	8005883a 	mov	r2,r16
4000959c:	1906b03a 	or	r3,r3,r4
400095a0:	dfc00117 	ldw	ra,4(sp)
400095a4:	dc000017 	ldw	r16,0(sp)
400095a8:	dec00204 	addi	sp,sp,8
400095ac:	f800283a 	ret
400095b0:	00c002c4 	movi	r3,11
400095b4:	188bc83a 	sub	r5,r3,r2
400095b8:	814ad83a 	srl	r5,r16,r5
400095bc:	00c00434 	movhi	r3,16
400095c0:	18ffffc4 	addi	r3,r3,-1
400095c4:	81a0983a 	sll	r16,r16,r6
400095c8:	2101ffcc 	andi	r4,r4,2047
400095cc:	28ca703a 	and	r5,r5,r3
400095d0:	003fed06 	br	40009588 <__alt_data_end+0xc0009588>
400095d4:	0009883a 	mov	r4,zero
400095d8:	000b883a 	mov	r5,zero
400095dc:	003fea06 	br	40009588 <__alt_data_end+0xc0009588>

400095e0 <__clzsi2>:
400095e0:	00bfffd4 	movui	r2,65535
400095e4:	11000536 	bltu	r2,r4,400095fc <__clzsi2+0x1c>
400095e8:	00803fc4 	movi	r2,255
400095ec:	11000f36 	bltu	r2,r4,4000962c <__clzsi2+0x4c>
400095f0:	00800804 	movi	r2,32
400095f4:	0007883a 	mov	r3,zero
400095f8:	00000506 	br	40009610 <__clzsi2+0x30>
400095fc:	00804034 	movhi	r2,256
40009600:	10bfffc4 	addi	r2,r2,-1
40009604:	11000c2e 	bgeu	r2,r4,40009638 <__clzsi2+0x58>
40009608:	00800204 	movi	r2,8
4000960c:	00c00604 	movi	r3,24
40009610:	20c8d83a 	srl	r4,r4,r3
40009614:	00d000b4 	movhi	r3,16386
40009618:	18f92204 	addi	r3,r3,-7032
4000961c:	1909883a 	add	r4,r3,r4
40009620:	20c00003 	ldbu	r3,0(r4)
40009624:	10c5c83a 	sub	r2,r2,r3
40009628:	f800283a 	ret
4000962c:	00800604 	movi	r2,24
40009630:	00c00204 	movi	r3,8
40009634:	003ff606 	br	40009610 <__alt_data_end+0xc0009610>
40009638:	00800404 	movi	r2,16
4000963c:	1007883a 	mov	r3,r2
40009640:	003ff306 	br	40009610 <__alt_data_end+0xc0009610>

40009644 <calloc>:
40009644:	009000b4 	movhi	r2,16386
40009648:	108af604 	addi	r2,r2,11224
4000964c:	280d883a 	mov	r6,r5
40009650:	200b883a 	mov	r5,r4
40009654:	11000017 	ldw	r4,0(r2)
40009658:	000965c1 	jmpi	4000965c <_calloc_r>

4000965c <_calloc_r>:
4000965c:	298b383a 	mul	r5,r5,r6
40009660:	defffe04 	addi	sp,sp,-8
40009664:	dfc00115 	stw	ra,4(sp)
40009668:	dc000015 	stw	r16,0(sp)
4000966c:	000b0f00 	call	4000b0f0 <_malloc_r>
40009670:	10002926 	beq	r2,zero,40009718 <_calloc_r+0xbc>
40009674:	11bfff17 	ldw	r6,-4(r2)
40009678:	1021883a 	mov	r16,r2
4000967c:	00bfff04 	movi	r2,-4
40009680:	308c703a 	and	r6,r6,r2
40009684:	00c00904 	movi	r3,36
40009688:	308d883a 	add	r6,r6,r2
4000968c:	19801636 	bltu	r3,r6,400096e8 <_calloc_r+0x8c>
40009690:	008004c4 	movi	r2,19
40009694:	11800b2e 	bgeu	r2,r6,400096c4 <_calloc_r+0x68>
40009698:	80000015 	stw	zero,0(r16)
4000969c:	80000115 	stw	zero,4(r16)
400096a0:	008006c4 	movi	r2,27
400096a4:	11801a2e 	bgeu	r2,r6,40009710 <_calloc_r+0xb4>
400096a8:	80000215 	stw	zero,8(r16)
400096ac:	80000315 	stw	zero,12(r16)
400096b0:	30c0151e 	bne	r6,r3,40009708 <_calloc_r+0xac>
400096b4:	80000415 	stw	zero,16(r16)
400096b8:	80800604 	addi	r2,r16,24
400096bc:	80000515 	stw	zero,20(r16)
400096c0:	00000106 	br	400096c8 <_calloc_r+0x6c>
400096c4:	8005883a 	mov	r2,r16
400096c8:	10000015 	stw	zero,0(r2)
400096cc:	10000115 	stw	zero,4(r2)
400096d0:	10000215 	stw	zero,8(r2)
400096d4:	8005883a 	mov	r2,r16
400096d8:	dfc00117 	ldw	ra,4(sp)
400096dc:	dc000017 	ldw	r16,0(sp)
400096e0:	dec00204 	addi	sp,sp,8
400096e4:	f800283a 	ret
400096e8:	000b883a 	mov	r5,zero
400096ec:	8009883a 	mov	r4,r16
400096f0:	000ba440 	call	4000ba44 <memset>
400096f4:	8005883a 	mov	r2,r16
400096f8:	dfc00117 	ldw	ra,4(sp)
400096fc:	dc000017 	ldw	r16,0(sp)
40009700:	dec00204 	addi	sp,sp,8
40009704:	f800283a 	ret
40009708:	80800404 	addi	r2,r16,16
4000970c:	003fee06 	br	400096c8 <__alt_data_end+0xc00096c8>
40009710:	80800204 	addi	r2,r16,8
40009714:	003fec06 	br	400096c8 <__alt_data_end+0xc00096c8>
40009718:	0005883a 	mov	r2,zero
4000971c:	003fee06 	br	400096d8 <__alt_data_end+0xc00096d8>

40009720 <exit>:
40009720:	defffe04 	addi	sp,sp,-8
40009724:	000b883a 	mov	r5,zero
40009728:	dc000015 	stw	r16,0(sp)
4000972c:	dfc00115 	stw	ra,4(sp)
40009730:	2021883a 	mov	r16,r4
40009734:	000ef640 	call	4000ef64 <__call_exitprocs>
40009738:	009000b4 	movhi	r2,16386
4000973c:	108af504 	addi	r2,r2,11220
40009740:	11000017 	ldw	r4,0(r2)
40009744:	20800f17 	ldw	r2,60(r4)
40009748:	10000126 	beq	r2,zero,40009750 <exit+0x30>
4000974c:	103ee83a 	callr	r2
40009750:	8009883a 	mov	r4,r16
40009754:	0015ec80 	call	40015ec8 <_exit>

40009758 <_fclose_r>:
40009758:	28003926 	beq	r5,zero,40009840 <_fclose_r+0xe8>
4000975c:	defffc04 	addi	sp,sp,-16
40009760:	dc400115 	stw	r17,4(sp)
40009764:	dc000015 	stw	r16,0(sp)
40009768:	dfc00315 	stw	ra,12(sp)
4000976c:	dc800215 	stw	r18,8(sp)
40009770:	2023883a 	mov	r17,r4
40009774:	2821883a 	mov	r16,r5
40009778:	20000226 	beq	r4,zero,40009784 <_fclose_r+0x2c>
4000977c:	20800e17 	ldw	r2,56(r4)
40009780:	10002726 	beq	r2,zero,40009820 <_fclose_r+0xc8>
40009784:	8080030f 	ldh	r2,12(r16)
40009788:	1000071e 	bne	r2,zero,400097a8 <_fclose_r+0x50>
4000978c:	0005883a 	mov	r2,zero
40009790:	dfc00317 	ldw	ra,12(sp)
40009794:	dc800217 	ldw	r18,8(sp)
40009798:	dc400117 	ldw	r17,4(sp)
4000979c:	dc000017 	ldw	r16,0(sp)
400097a0:	dec00404 	addi	sp,sp,16
400097a4:	f800283a 	ret
400097a8:	800b883a 	mov	r5,r16
400097ac:	8809883a 	mov	r4,r17
400097b0:	000985c0 	call	4000985c <__sflush_r>
400097b4:	1025883a 	mov	r18,r2
400097b8:	80800b17 	ldw	r2,44(r16)
400097bc:	10000426 	beq	r2,zero,400097d0 <_fclose_r+0x78>
400097c0:	81400717 	ldw	r5,28(r16)
400097c4:	8809883a 	mov	r4,r17
400097c8:	103ee83a 	callr	r2
400097cc:	10001616 	blt	r2,zero,40009828 <_fclose_r+0xd0>
400097d0:	8080030b 	ldhu	r2,12(r16)
400097d4:	1080200c 	andi	r2,r2,128
400097d8:	1000151e 	bne	r2,zero,40009830 <_fclose_r+0xd8>
400097dc:	81400c17 	ldw	r5,48(r16)
400097e0:	28000526 	beq	r5,zero,400097f8 <_fclose_r+0xa0>
400097e4:	80801004 	addi	r2,r16,64
400097e8:	28800226 	beq	r5,r2,400097f4 <_fclose_r+0x9c>
400097ec:	8809883a 	mov	r4,r17
400097f0:	000a3800 	call	4000a380 <_free_r>
400097f4:	80000c15 	stw	zero,48(r16)
400097f8:	81401117 	ldw	r5,68(r16)
400097fc:	28000326 	beq	r5,zero,4000980c <_fclose_r+0xb4>
40009800:	8809883a 	mov	r4,r17
40009804:	000a3800 	call	4000a380 <_free_r>
40009808:	80001115 	stw	zero,68(r16)
4000980c:	0009e640 	call	40009e64 <__sfp_lock_acquire>
40009810:	8000030d 	sth	zero,12(r16)
40009814:	0009e680 	call	40009e68 <__sfp_lock_release>
40009818:	9005883a 	mov	r2,r18
4000981c:	003fdc06 	br	40009790 <__alt_data_end+0xc0009790>
40009820:	0009e540 	call	40009e54 <__sinit>
40009824:	003fd706 	br	40009784 <__alt_data_end+0xc0009784>
40009828:	04bfffc4 	movi	r18,-1
4000982c:	003fe806 	br	400097d0 <__alt_data_end+0xc00097d0>
40009830:	81400417 	ldw	r5,16(r16)
40009834:	8809883a 	mov	r4,r17
40009838:	000a3800 	call	4000a380 <_free_r>
4000983c:	003fe706 	br	400097dc <__alt_data_end+0xc00097dc>
40009840:	0005883a 	mov	r2,zero
40009844:	f800283a 	ret

40009848 <fclose>:
40009848:	009000b4 	movhi	r2,16386
4000984c:	108af604 	addi	r2,r2,11224
40009850:	200b883a 	mov	r5,r4
40009854:	11000017 	ldw	r4,0(r2)
40009858:	00097581 	jmpi	40009758 <_fclose_r>

4000985c <__sflush_r>:
4000985c:	2880030b 	ldhu	r2,12(r5)
40009860:	defffb04 	addi	sp,sp,-20
40009864:	dcc00315 	stw	r19,12(sp)
40009868:	dc400115 	stw	r17,4(sp)
4000986c:	dfc00415 	stw	ra,16(sp)
40009870:	dc800215 	stw	r18,8(sp)
40009874:	dc000015 	stw	r16,0(sp)
40009878:	10c0020c 	andi	r3,r2,8
4000987c:	2823883a 	mov	r17,r5
40009880:	2027883a 	mov	r19,r4
40009884:	1800311e 	bne	r3,zero,4000994c <__sflush_r+0xf0>
40009888:	28c00117 	ldw	r3,4(r5)
4000988c:	10820014 	ori	r2,r2,2048
40009890:	2880030d 	sth	r2,12(r5)
40009894:	00c04b0e 	bge	zero,r3,400099c4 <__sflush_r+0x168>
40009898:	8a000a17 	ldw	r8,40(r17)
4000989c:	40002326 	beq	r8,zero,4000992c <__sflush_r+0xd0>
400098a0:	9c000017 	ldw	r16,0(r19)
400098a4:	10c4000c 	andi	r3,r2,4096
400098a8:	98000015 	stw	zero,0(r19)
400098ac:	18004826 	beq	r3,zero,400099d0 <__sflush_r+0x174>
400098b0:	89801417 	ldw	r6,80(r17)
400098b4:	10c0010c 	andi	r3,r2,4
400098b8:	18000626 	beq	r3,zero,400098d4 <__sflush_r+0x78>
400098bc:	88c00117 	ldw	r3,4(r17)
400098c0:	88800c17 	ldw	r2,48(r17)
400098c4:	30cdc83a 	sub	r6,r6,r3
400098c8:	10000226 	beq	r2,zero,400098d4 <__sflush_r+0x78>
400098cc:	88800f17 	ldw	r2,60(r17)
400098d0:	308dc83a 	sub	r6,r6,r2
400098d4:	89400717 	ldw	r5,28(r17)
400098d8:	000f883a 	mov	r7,zero
400098dc:	9809883a 	mov	r4,r19
400098e0:	403ee83a 	callr	r8
400098e4:	00ffffc4 	movi	r3,-1
400098e8:	10c04426 	beq	r2,r3,400099fc <__sflush_r+0x1a0>
400098ec:	88c0030b 	ldhu	r3,12(r17)
400098f0:	89000417 	ldw	r4,16(r17)
400098f4:	88000115 	stw	zero,4(r17)
400098f8:	197dffcc 	andi	r5,r3,63487
400098fc:	8940030d 	sth	r5,12(r17)
40009900:	89000015 	stw	r4,0(r17)
40009904:	18c4000c 	andi	r3,r3,4096
40009908:	18002c1e 	bne	r3,zero,400099bc <__sflush_r+0x160>
4000990c:	89400c17 	ldw	r5,48(r17)
40009910:	9c000015 	stw	r16,0(r19)
40009914:	28000526 	beq	r5,zero,4000992c <__sflush_r+0xd0>
40009918:	88801004 	addi	r2,r17,64
4000991c:	28800226 	beq	r5,r2,40009928 <__sflush_r+0xcc>
40009920:	9809883a 	mov	r4,r19
40009924:	000a3800 	call	4000a380 <_free_r>
40009928:	88000c15 	stw	zero,48(r17)
4000992c:	0005883a 	mov	r2,zero
40009930:	dfc00417 	ldw	ra,16(sp)
40009934:	dcc00317 	ldw	r19,12(sp)
40009938:	dc800217 	ldw	r18,8(sp)
4000993c:	dc400117 	ldw	r17,4(sp)
40009940:	dc000017 	ldw	r16,0(sp)
40009944:	dec00504 	addi	sp,sp,20
40009948:	f800283a 	ret
4000994c:	2c800417 	ldw	r18,16(r5)
40009950:	903ff626 	beq	r18,zero,4000992c <__alt_data_end+0xc000992c>
40009954:	2c000017 	ldw	r16,0(r5)
40009958:	108000cc 	andi	r2,r2,3
4000995c:	2c800015 	stw	r18,0(r5)
40009960:	84a1c83a 	sub	r16,r16,r18
40009964:	1000131e 	bne	r2,zero,400099b4 <__sflush_r+0x158>
40009968:	28800517 	ldw	r2,20(r5)
4000996c:	88800215 	stw	r2,8(r17)
40009970:	04000316 	blt	zero,r16,40009980 <__sflush_r+0x124>
40009974:	003fed06 	br	4000992c <__alt_data_end+0xc000992c>
40009978:	90a5883a 	add	r18,r18,r2
4000997c:	043feb0e 	bge	zero,r16,4000992c <__alt_data_end+0xc000992c>
40009980:	88800917 	ldw	r2,36(r17)
40009984:	89400717 	ldw	r5,28(r17)
40009988:	800f883a 	mov	r7,r16
4000998c:	900d883a 	mov	r6,r18
40009990:	9809883a 	mov	r4,r19
40009994:	103ee83a 	callr	r2
40009998:	80a1c83a 	sub	r16,r16,r2
4000999c:	00bff616 	blt	zero,r2,40009978 <__alt_data_end+0xc0009978>
400099a0:	88c0030b 	ldhu	r3,12(r17)
400099a4:	00bfffc4 	movi	r2,-1
400099a8:	18c01014 	ori	r3,r3,64
400099ac:	88c0030d 	sth	r3,12(r17)
400099b0:	003fdf06 	br	40009930 <__alt_data_end+0xc0009930>
400099b4:	0005883a 	mov	r2,zero
400099b8:	003fec06 	br	4000996c <__alt_data_end+0xc000996c>
400099bc:	88801415 	stw	r2,80(r17)
400099c0:	003fd206 	br	4000990c <__alt_data_end+0xc000990c>
400099c4:	28c00f17 	ldw	r3,60(r5)
400099c8:	00ffb316 	blt	zero,r3,40009898 <__alt_data_end+0xc0009898>
400099cc:	003fd706 	br	4000992c <__alt_data_end+0xc000992c>
400099d0:	89400717 	ldw	r5,28(r17)
400099d4:	000d883a 	mov	r6,zero
400099d8:	01c00044 	movi	r7,1
400099dc:	9809883a 	mov	r4,r19
400099e0:	403ee83a 	callr	r8
400099e4:	100d883a 	mov	r6,r2
400099e8:	00bfffc4 	movi	r2,-1
400099ec:	30801426 	beq	r6,r2,40009a40 <__sflush_r+0x1e4>
400099f0:	8880030b 	ldhu	r2,12(r17)
400099f4:	8a000a17 	ldw	r8,40(r17)
400099f8:	003fae06 	br	400098b4 <__alt_data_end+0xc00098b4>
400099fc:	98c00017 	ldw	r3,0(r19)
40009a00:	183fba26 	beq	r3,zero,400098ec <__alt_data_end+0xc00098ec>
40009a04:	01000744 	movi	r4,29
40009a08:	19000626 	beq	r3,r4,40009a24 <__sflush_r+0x1c8>
40009a0c:	01000584 	movi	r4,22
40009a10:	19000426 	beq	r3,r4,40009a24 <__sflush_r+0x1c8>
40009a14:	88c0030b 	ldhu	r3,12(r17)
40009a18:	18c01014 	ori	r3,r3,64
40009a1c:	88c0030d 	sth	r3,12(r17)
40009a20:	003fc306 	br	40009930 <__alt_data_end+0xc0009930>
40009a24:	8880030b 	ldhu	r2,12(r17)
40009a28:	88c00417 	ldw	r3,16(r17)
40009a2c:	88000115 	stw	zero,4(r17)
40009a30:	10bdffcc 	andi	r2,r2,63487
40009a34:	8880030d 	sth	r2,12(r17)
40009a38:	88c00015 	stw	r3,0(r17)
40009a3c:	003fb306 	br	4000990c <__alt_data_end+0xc000990c>
40009a40:	98800017 	ldw	r2,0(r19)
40009a44:	103fea26 	beq	r2,zero,400099f0 <__alt_data_end+0xc00099f0>
40009a48:	00c00744 	movi	r3,29
40009a4c:	10c00226 	beq	r2,r3,40009a58 <__sflush_r+0x1fc>
40009a50:	00c00584 	movi	r3,22
40009a54:	10c0031e 	bne	r2,r3,40009a64 <__sflush_r+0x208>
40009a58:	9c000015 	stw	r16,0(r19)
40009a5c:	0005883a 	mov	r2,zero
40009a60:	003fb306 	br	40009930 <__alt_data_end+0xc0009930>
40009a64:	88c0030b 	ldhu	r3,12(r17)
40009a68:	3005883a 	mov	r2,r6
40009a6c:	18c01014 	ori	r3,r3,64
40009a70:	88c0030d 	sth	r3,12(r17)
40009a74:	003fae06 	br	40009930 <__alt_data_end+0xc0009930>

40009a78 <_fflush_r>:
40009a78:	defffd04 	addi	sp,sp,-12
40009a7c:	dc000115 	stw	r16,4(sp)
40009a80:	dfc00215 	stw	ra,8(sp)
40009a84:	2021883a 	mov	r16,r4
40009a88:	20000226 	beq	r4,zero,40009a94 <_fflush_r+0x1c>
40009a8c:	20800e17 	ldw	r2,56(r4)
40009a90:	10000c26 	beq	r2,zero,40009ac4 <_fflush_r+0x4c>
40009a94:	2880030f 	ldh	r2,12(r5)
40009a98:	1000051e 	bne	r2,zero,40009ab0 <_fflush_r+0x38>
40009a9c:	0005883a 	mov	r2,zero
40009aa0:	dfc00217 	ldw	ra,8(sp)
40009aa4:	dc000117 	ldw	r16,4(sp)
40009aa8:	dec00304 	addi	sp,sp,12
40009aac:	f800283a 	ret
40009ab0:	8009883a 	mov	r4,r16
40009ab4:	dfc00217 	ldw	ra,8(sp)
40009ab8:	dc000117 	ldw	r16,4(sp)
40009abc:	dec00304 	addi	sp,sp,12
40009ac0:	000985c1 	jmpi	4000985c <__sflush_r>
40009ac4:	d9400015 	stw	r5,0(sp)
40009ac8:	0009e540 	call	40009e54 <__sinit>
40009acc:	d9400017 	ldw	r5,0(sp)
40009ad0:	003ff006 	br	40009a94 <__alt_data_end+0xc0009a94>

40009ad4 <fflush>:
40009ad4:	20000526 	beq	r4,zero,40009aec <fflush+0x18>
40009ad8:	009000b4 	movhi	r2,16386
40009adc:	108af604 	addi	r2,r2,11224
40009ae0:	200b883a 	mov	r5,r4
40009ae4:	11000017 	ldw	r4,0(r2)
40009ae8:	0009a781 	jmpi	40009a78 <_fflush_r>
40009aec:	009000b4 	movhi	r2,16386
40009af0:	108af504 	addi	r2,r2,11220
40009af4:	11000017 	ldw	r4,0(r2)
40009af8:	01500074 	movhi	r5,16385
40009afc:	29669e04 	addi	r5,r5,-25992
40009b00:	000ad481 	jmpi	4000ad48 <_fwalk_reent>

40009b04 <__fp_unlock>:
40009b04:	0005883a 	mov	r2,zero
40009b08:	f800283a 	ret

40009b0c <_cleanup_r>:
40009b0c:	01500074 	movhi	r5,16385
40009b10:	2965d604 	addi	r5,r5,-26792
40009b14:	000ad481 	jmpi	4000ad48 <_fwalk_reent>

40009b18 <__sinit.part.1>:
40009b18:	defff704 	addi	sp,sp,-36
40009b1c:	00d00074 	movhi	r3,16385
40009b20:	dfc00815 	stw	ra,32(sp)
40009b24:	ddc00715 	stw	r23,28(sp)
40009b28:	dd800615 	stw	r22,24(sp)
40009b2c:	dd400515 	stw	r21,20(sp)
40009b30:	dd000415 	stw	r20,16(sp)
40009b34:	dcc00315 	stw	r19,12(sp)
40009b38:	dc800215 	stw	r18,8(sp)
40009b3c:	dc400115 	stw	r17,4(sp)
40009b40:	dc000015 	stw	r16,0(sp)
40009b44:	18e6c304 	addi	r3,r3,-25844
40009b48:	24000117 	ldw	r16,4(r4)
40009b4c:	20c00f15 	stw	r3,60(r4)
40009b50:	2080bb04 	addi	r2,r4,748
40009b54:	00c000c4 	movi	r3,3
40009b58:	20c0b915 	stw	r3,740(r4)
40009b5c:	2080ba15 	stw	r2,744(r4)
40009b60:	2000b815 	stw	zero,736(r4)
40009b64:	05c00204 	movi	r23,8
40009b68:	00800104 	movi	r2,4
40009b6c:	2025883a 	mov	r18,r4
40009b70:	b80d883a 	mov	r6,r23
40009b74:	81001704 	addi	r4,r16,92
40009b78:	000b883a 	mov	r5,zero
40009b7c:	80000015 	stw	zero,0(r16)
40009b80:	80000115 	stw	zero,4(r16)
40009b84:	80000215 	stw	zero,8(r16)
40009b88:	8080030d 	sth	r2,12(r16)
40009b8c:	80001915 	stw	zero,100(r16)
40009b90:	8000038d 	sth	zero,14(r16)
40009b94:	80000415 	stw	zero,16(r16)
40009b98:	80000515 	stw	zero,20(r16)
40009b9c:	80000615 	stw	zero,24(r16)
40009ba0:	000ba440 	call	4000ba44 <memset>
40009ba4:	05900074 	movhi	r22,16385
40009ba8:	94400217 	ldw	r17,8(r18)
40009bac:	05500074 	movhi	r21,16385
40009bb0:	05100074 	movhi	r20,16385
40009bb4:	04d00074 	movhi	r19,16385
40009bb8:	b5b08e04 	addi	r22,r22,-15816
40009bbc:	ad70a504 	addi	r21,r21,-15724
40009bc0:	a530c404 	addi	r20,r20,-15600
40009bc4:	9cf0db04 	addi	r19,r19,-15508
40009bc8:	85800815 	stw	r22,32(r16)
40009bcc:	85400915 	stw	r21,36(r16)
40009bd0:	85000a15 	stw	r20,40(r16)
40009bd4:	84c00b15 	stw	r19,44(r16)
40009bd8:	84000715 	stw	r16,28(r16)
40009bdc:	00800284 	movi	r2,10
40009be0:	8880030d 	sth	r2,12(r17)
40009be4:	00800044 	movi	r2,1
40009be8:	b80d883a 	mov	r6,r23
40009bec:	89001704 	addi	r4,r17,92
40009bf0:	000b883a 	mov	r5,zero
40009bf4:	88000015 	stw	zero,0(r17)
40009bf8:	88000115 	stw	zero,4(r17)
40009bfc:	88000215 	stw	zero,8(r17)
40009c00:	88001915 	stw	zero,100(r17)
40009c04:	8880038d 	sth	r2,14(r17)
40009c08:	88000415 	stw	zero,16(r17)
40009c0c:	88000515 	stw	zero,20(r17)
40009c10:	88000615 	stw	zero,24(r17)
40009c14:	000ba440 	call	4000ba44 <memset>
40009c18:	94000317 	ldw	r16,12(r18)
40009c1c:	00800484 	movi	r2,18
40009c20:	8c400715 	stw	r17,28(r17)
40009c24:	8d800815 	stw	r22,32(r17)
40009c28:	8d400915 	stw	r21,36(r17)
40009c2c:	8d000a15 	stw	r20,40(r17)
40009c30:	8cc00b15 	stw	r19,44(r17)
40009c34:	8080030d 	sth	r2,12(r16)
40009c38:	00800084 	movi	r2,2
40009c3c:	80000015 	stw	zero,0(r16)
40009c40:	80000115 	stw	zero,4(r16)
40009c44:	80000215 	stw	zero,8(r16)
40009c48:	80001915 	stw	zero,100(r16)
40009c4c:	8080038d 	sth	r2,14(r16)
40009c50:	80000415 	stw	zero,16(r16)
40009c54:	80000515 	stw	zero,20(r16)
40009c58:	80000615 	stw	zero,24(r16)
40009c5c:	b80d883a 	mov	r6,r23
40009c60:	000b883a 	mov	r5,zero
40009c64:	81001704 	addi	r4,r16,92
40009c68:	000ba440 	call	4000ba44 <memset>
40009c6c:	00800044 	movi	r2,1
40009c70:	84000715 	stw	r16,28(r16)
40009c74:	85800815 	stw	r22,32(r16)
40009c78:	85400915 	stw	r21,36(r16)
40009c7c:	85000a15 	stw	r20,40(r16)
40009c80:	84c00b15 	stw	r19,44(r16)
40009c84:	90800e15 	stw	r2,56(r18)
40009c88:	dfc00817 	ldw	ra,32(sp)
40009c8c:	ddc00717 	ldw	r23,28(sp)
40009c90:	dd800617 	ldw	r22,24(sp)
40009c94:	dd400517 	ldw	r21,20(sp)
40009c98:	dd000417 	ldw	r20,16(sp)
40009c9c:	dcc00317 	ldw	r19,12(sp)
40009ca0:	dc800217 	ldw	r18,8(sp)
40009ca4:	dc400117 	ldw	r17,4(sp)
40009ca8:	dc000017 	ldw	r16,0(sp)
40009cac:	dec00904 	addi	sp,sp,36
40009cb0:	f800283a 	ret

40009cb4 <__fp_lock>:
40009cb4:	0005883a 	mov	r2,zero
40009cb8:	f800283a 	ret

40009cbc <__sfmoreglue>:
40009cbc:	defffc04 	addi	sp,sp,-16
40009cc0:	dc400115 	stw	r17,4(sp)
40009cc4:	2c7fffc4 	addi	r17,r5,-1
40009cc8:	8c401a24 	muli	r17,r17,104
40009ccc:	dc800215 	stw	r18,8(sp)
40009cd0:	2825883a 	mov	r18,r5
40009cd4:	89401d04 	addi	r5,r17,116
40009cd8:	dc000015 	stw	r16,0(sp)
40009cdc:	dfc00315 	stw	ra,12(sp)
40009ce0:	000b0f00 	call	4000b0f0 <_malloc_r>
40009ce4:	1021883a 	mov	r16,r2
40009ce8:	10000726 	beq	r2,zero,40009d08 <__sfmoreglue+0x4c>
40009cec:	11000304 	addi	r4,r2,12
40009cf0:	10000015 	stw	zero,0(r2)
40009cf4:	14800115 	stw	r18,4(r2)
40009cf8:	11000215 	stw	r4,8(r2)
40009cfc:	89801a04 	addi	r6,r17,104
40009d00:	000b883a 	mov	r5,zero
40009d04:	000ba440 	call	4000ba44 <memset>
40009d08:	8005883a 	mov	r2,r16
40009d0c:	dfc00317 	ldw	ra,12(sp)
40009d10:	dc800217 	ldw	r18,8(sp)
40009d14:	dc400117 	ldw	r17,4(sp)
40009d18:	dc000017 	ldw	r16,0(sp)
40009d1c:	dec00404 	addi	sp,sp,16
40009d20:	f800283a 	ret

40009d24 <__sfp>:
40009d24:	defffb04 	addi	sp,sp,-20
40009d28:	dc000015 	stw	r16,0(sp)
40009d2c:	041000b4 	movhi	r16,16386
40009d30:	840af504 	addi	r16,r16,11220
40009d34:	dcc00315 	stw	r19,12(sp)
40009d38:	2027883a 	mov	r19,r4
40009d3c:	81000017 	ldw	r4,0(r16)
40009d40:	dfc00415 	stw	ra,16(sp)
40009d44:	dc800215 	stw	r18,8(sp)
40009d48:	20800e17 	ldw	r2,56(r4)
40009d4c:	dc400115 	stw	r17,4(sp)
40009d50:	1000021e 	bne	r2,zero,40009d5c <__sfp+0x38>
40009d54:	0009b180 	call	40009b18 <__sinit.part.1>
40009d58:	81000017 	ldw	r4,0(r16)
40009d5c:	2480b804 	addi	r18,r4,736
40009d60:	047fffc4 	movi	r17,-1
40009d64:	91000117 	ldw	r4,4(r18)
40009d68:	94000217 	ldw	r16,8(r18)
40009d6c:	213fffc4 	addi	r4,r4,-1
40009d70:	20000a16 	blt	r4,zero,40009d9c <__sfp+0x78>
40009d74:	8080030f 	ldh	r2,12(r16)
40009d78:	10000c26 	beq	r2,zero,40009dac <__sfp+0x88>
40009d7c:	80c01d04 	addi	r3,r16,116
40009d80:	00000206 	br	40009d8c <__sfp+0x68>
40009d84:	18bfe60f 	ldh	r2,-104(r3)
40009d88:	10000826 	beq	r2,zero,40009dac <__sfp+0x88>
40009d8c:	213fffc4 	addi	r4,r4,-1
40009d90:	1c3ffd04 	addi	r16,r3,-12
40009d94:	18c01a04 	addi	r3,r3,104
40009d98:	247ffa1e 	bne	r4,r17,40009d84 <__alt_data_end+0xc0009d84>
40009d9c:	90800017 	ldw	r2,0(r18)
40009da0:	10001d26 	beq	r2,zero,40009e18 <__sfp+0xf4>
40009da4:	1025883a 	mov	r18,r2
40009da8:	003fee06 	br	40009d64 <__alt_data_end+0xc0009d64>
40009dac:	00bfffc4 	movi	r2,-1
40009db0:	8080038d 	sth	r2,14(r16)
40009db4:	00800044 	movi	r2,1
40009db8:	8080030d 	sth	r2,12(r16)
40009dbc:	80001915 	stw	zero,100(r16)
40009dc0:	80000015 	stw	zero,0(r16)
40009dc4:	80000215 	stw	zero,8(r16)
40009dc8:	80000115 	stw	zero,4(r16)
40009dcc:	80000415 	stw	zero,16(r16)
40009dd0:	80000515 	stw	zero,20(r16)
40009dd4:	80000615 	stw	zero,24(r16)
40009dd8:	01800204 	movi	r6,8
40009ddc:	000b883a 	mov	r5,zero
40009de0:	81001704 	addi	r4,r16,92
40009de4:	000ba440 	call	4000ba44 <memset>
40009de8:	8005883a 	mov	r2,r16
40009dec:	80000c15 	stw	zero,48(r16)
40009df0:	80000d15 	stw	zero,52(r16)
40009df4:	80001115 	stw	zero,68(r16)
40009df8:	80001215 	stw	zero,72(r16)
40009dfc:	dfc00417 	ldw	ra,16(sp)
40009e00:	dcc00317 	ldw	r19,12(sp)
40009e04:	dc800217 	ldw	r18,8(sp)
40009e08:	dc400117 	ldw	r17,4(sp)
40009e0c:	dc000017 	ldw	r16,0(sp)
40009e10:	dec00504 	addi	sp,sp,20
40009e14:	f800283a 	ret
40009e18:	01400104 	movi	r5,4
40009e1c:	9809883a 	mov	r4,r19
40009e20:	0009cbc0 	call	40009cbc <__sfmoreglue>
40009e24:	90800015 	stw	r2,0(r18)
40009e28:	103fde1e 	bne	r2,zero,40009da4 <__alt_data_end+0xc0009da4>
40009e2c:	00800304 	movi	r2,12
40009e30:	98800015 	stw	r2,0(r19)
40009e34:	0005883a 	mov	r2,zero
40009e38:	003ff006 	br	40009dfc <__alt_data_end+0xc0009dfc>

40009e3c <_cleanup>:
40009e3c:	009000b4 	movhi	r2,16386
40009e40:	108af504 	addi	r2,r2,11220
40009e44:	11000017 	ldw	r4,0(r2)
40009e48:	01500074 	movhi	r5,16385
40009e4c:	2965d604 	addi	r5,r5,-26792
40009e50:	000ad481 	jmpi	4000ad48 <_fwalk_reent>

40009e54 <__sinit>:
40009e54:	20800e17 	ldw	r2,56(r4)
40009e58:	10000126 	beq	r2,zero,40009e60 <__sinit+0xc>
40009e5c:	f800283a 	ret
40009e60:	0009b181 	jmpi	40009b18 <__sinit.part.1>

40009e64 <__sfp_lock_acquire>:
40009e64:	f800283a 	ret

40009e68 <__sfp_lock_release>:
40009e68:	f800283a 	ret

40009e6c <__sinit_lock_acquire>:
40009e6c:	f800283a 	ret

40009e70 <__sinit_lock_release>:
40009e70:	f800283a 	ret

40009e74 <__fp_lock_all>:
40009e74:	009000b4 	movhi	r2,16386
40009e78:	108af604 	addi	r2,r2,11224
40009e7c:	11000017 	ldw	r4,0(r2)
40009e80:	01500074 	movhi	r5,16385
40009e84:	29672d04 	addi	r5,r5,-25420
40009e88:	000ac841 	jmpi	4000ac84 <_fwalk>

40009e8c <__fp_unlock_all>:
40009e8c:	009000b4 	movhi	r2,16386
40009e90:	108af604 	addi	r2,r2,11224
40009e94:	11000017 	ldw	r4,0(r2)
40009e98:	01500074 	movhi	r5,16385
40009e9c:	2966c104 	addi	r5,r5,-25852
40009ea0:	000ac841 	jmpi	4000ac84 <_fwalk>

40009ea4 <_fopen_r>:
40009ea4:	defffa04 	addi	sp,sp,-24
40009ea8:	3005883a 	mov	r2,r6
40009eac:	dcc00415 	stw	r19,16(sp)
40009eb0:	d80d883a 	mov	r6,sp
40009eb4:	2827883a 	mov	r19,r5
40009eb8:	100b883a 	mov	r5,r2
40009ebc:	dc800315 	stw	r18,12(sp)
40009ec0:	dfc00515 	stw	ra,20(sp)
40009ec4:	dc400215 	stw	r17,8(sp)
40009ec8:	dc000115 	stw	r16,4(sp)
40009ecc:	2025883a 	mov	r18,r4
40009ed0:	001096c0 	call	4001096c <__sflags>
40009ed4:	10002726 	beq	r2,zero,40009f74 <_fopen_r+0xd0>
40009ed8:	9009883a 	mov	r4,r18
40009edc:	1023883a 	mov	r17,r2
40009ee0:	0009d240 	call	40009d24 <__sfp>
40009ee4:	1021883a 	mov	r16,r2
40009ee8:	10002226 	beq	r2,zero,40009f74 <_fopen_r+0xd0>
40009eec:	d9800017 	ldw	r6,0(sp)
40009ef0:	01c06d84 	movi	r7,438
40009ef4:	980b883a 	mov	r5,r19
40009ef8:	9009883a 	mov	r4,r18
40009efc:	000bb6c0 	call	4000bb6c <_open_r>
40009f00:	10001916 	blt	r2,zero,40009f68 <_fopen_r+0xc4>
40009f04:	8080038d 	sth	r2,14(r16)
40009f08:	00900074 	movhi	r2,16385
40009f0c:	10b08e04 	addi	r2,r2,-15816
40009f10:	80800815 	stw	r2,32(r16)
40009f14:	00900074 	movhi	r2,16385
40009f18:	10b0a504 	addi	r2,r2,-15724
40009f1c:	80800915 	stw	r2,36(r16)
40009f20:	00900074 	movhi	r2,16385
40009f24:	10b0c404 	addi	r2,r2,-15600
40009f28:	80800a15 	stw	r2,40(r16)
40009f2c:	00900074 	movhi	r2,16385
40009f30:	10b0db04 	addi	r2,r2,-15508
40009f34:	8440030d 	sth	r17,12(r16)
40009f38:	84000715 	stw	r16,28(r16)
40009f3c:	80800b15 	stw	r2,44(r16)
40009f40:	8c40400c 	andi	r17,r17,256
40009f44:	88000d1e 	bne	r17,zero,40009f7c <_fopen_r+0xd8>
40009f48:	8005883a 	mov	r2,r16
40009f4c:	dfc00517 	ldw	ra,20(sp)
40009f50:	dcc00417 	ldw	r19,16(sp)
40009f54:	dc800317 	ldw	r18,12(sp)
40009f58:	dc400217 	ldw	r17,8(sp)
40009f5c:	dc000117 	ldw	r16,4(sp)
40009f60:	dec00604 	addi	sp,sp,24
40009f64:	f800283a 	ret
40009f68:	0009e640 	call	40009e64 <__sfp_lock_acquire>
40009f6c:	8000030d 	sth	zero,12(r16)
40009f70:	0009e680 	call	40009e68 <__sfp_lock_release>
40009f74:	0005883a 	mov	r2,zero
40009f78:	003ff406 	br	40009f4c <__alt_data_end+0xc0009f4c>
40009f7c:	01c00084 	movi	r7,2
40009f80:	000d883a 	mov	r6,zero
40009f84:	800b883a 	mov	r5,r16
40009f88:	9009883a 	mov	r4,r18
40009f8c:	000a6900 	call	4000a690 <_fseek_r>
40009f90:	8005883a 	mov	r2,r16
40009f94:	003fed06 	br	40009f4c <__alt_data_end+0xc0009f4c>

40009f98 <fopen>:
40009f98:	009000b4 	movhi	r2,16386
40009f9c:	108af604 	addi	r2,r2,11224
40009fa0:	280d883a 	mov	r6,r5
40009fa4:	200b883a 	mov	r5,r4
40009fa8:	11000017 	ldw	r4,0(r2)
40009fac:	0009ea41 	jmpi	40009ea4 <_fopen_r>

40009fb0 <_fprintf_r>:
40009fb0:	defffe04 	addi	sp,sp,-8
40009fb4:	2809883a 	mov	r4,r5
40009fb8:	300b883a 	mov	r5,r6
40009fbc:	dfc00015 	stw	ra,0(sp)
40009fc0:	d9c00115 	stw	r7,4(sp)
40009fc4:	d9800104 	addi	r6,sp,4
40009fc8:	000ec840 	call	4000ec84 <__vfprintf_internal>
40009fcc:	dfc00017 	ldw	ra,0(sp)
40009fd0:	dec00204 	addi	sp,sp,8
40009fd4:	f800283a 	ret

40009fd8 <fprintf>:
40009fd8:	defffd04 	addi	sp,sp,-12
40009fdc:	dfc00015 	stw	ra,0(sp)
40009fe0:	d9800115 	stw	r6,4(sp)
40009fe4:	d9c00215 	stw	r7,8(sp)
40009fe8:	d9800104 	addi	r6,sp,4
40009fec:	000ec840 	call	4000ec84 <__vfprintf_internal>
40009ff0:	dfc00017 	ldw	ra,0(sp)
40009ff4:	dec00304 	addi	sp,sp,12
40009ff8:	f800283a 	ret

40009ffc <_fread_r>:
40009ffc:	defff404 	addi	sp,sp,-48
4000a000:	dd800815 	stw	r22,32(sp)
4000a004:	39ad383a 	mul	r22,r7,r6
4000a008:	dc000215 	stw	r16,8(sp)
4000a00c:	dfc00b15 	stw	ra,44(sp)
4000a010:	df000a15 	stw	fp,40(sp)
4000a014:	ddc00915 	stw	r23,36(sp)
4000a018:	dd400715 	stw	r21,28(sp)
4000a01c:	dd000615 	stw	r20,24(sp)
4000a020:	dcc00515 	stw	r19,20(sp)
4000a024:	dc800415 	stw	r18,16(sp)
4000a028:	dc400315 	stw	r17,12(sp)
4000a02c:	dc000c17 	ldw	r16,48(sp)
4000a030:	b0003b26 	beq	r22,zero,4000a120 <_fread_r+0x124>
4000a034:	302f883a 	mov	r23,r6
4000a038:	382b883a 	mov	r21,r7
4000a03c:	2029883a 	mov	r20,r4
4000a040:	2827883a 	mov	r19,r5
4000a044:	20000226 	beq	r4,zero,4000a050 <_fread_r+0x54>
4000a048:	20800e17 	ldw	r2,56(r4)
4000a04c:	10006e26 	beq	r2,zero,4000a208 <_fread_r+0x20c>
4000a050:	8080030b 	ldhu	r2,12(r16)
4000a054:	10c8000c 	andi	r3,r2,8192
4000a058:	1800061e 	bne	r3,zero,4000a074 <_fread_r+0x78>
4000a05c:	81001917 	ldw	r4,100(r16)
4000a060:	00f7ffc4 	movi	r3,-8193
4000a064:	10880014 	ori	r2,r2,8192
4000a068:	20c6703a 	and	r3,r4,r3
4000a06c:	8080030d 	sth	r2,12(r16)
4000a070:	80c01915 	stw	r3,100(r16)
4000a074:	84400117 	ldw	r17,4(r16)
4000a078:	88005f16 	blt	r17,zero,4000a1f8 <_fread_r+0x1fc>
4000a07c:	8809883a 	mov	r4,r17
4000a080:	1080008c 	andi	r2,r2,2
4000a084:	1000281e 	bne	r2,zero,4000a128 <_fread_r+0x12c>
4000a088:	b025883a 	mov	r18,r22
4000a08c:	00000b06 	br	4000a0bc <_fread_r+0xc0>
4000a090:	000b8fc0 	call	4000b8fc <memcpy>
4000a094:	80800017 	ldw	r2,0(r16)
4000a098:	9c67883a 	add	r19,r19,r17
4000a09c:	9465c83a 	sub	r18,r18,r17
4000a0a0:	1463883a 	add	r17,r2,r17
4000a0a4:	800b883a 	mov	r5,r16
4000a0a8:	a009883a 	mov	r4,r20
4000a0ac:	84400015 	stw	r17,0(r16)
4000a0b0:	000be540 	call	4000be54 <__srefill_r>
4000a0b4:	10004c1e 	bne	r2,zero,4000a1e8 <_fread_r+0x1ec>
4000a0b8:	84400117 	ldw	r17,4(r16)
4000a0bc:	880d883a 	mov	r6,r17
4000a0c0:	9809883a 	mov	r4,r19
4000a0c4:	81400017 	ldw	r5,0(r16)
4000a0c8:	8cbff136 	bltu	r17,r18,4000a090 <__alt_data_end+0xc000a090>
4000a0cc:	900d883a 	mov	r6,r18
4000a0d0:	000b8fc0 	call	4000b8fc <memcpy>
4000a0d4:	80c00117 	ldw	r3,4(r16)
4000a0d8:	81000017 	ldw	r4,0(r16)
4000a0dc:	a805883a 	mov	r2,r21
4000a0e0:	1c87c83a 	sub	r3,r3,r18
4000a0e4:	24a5883a 	add	r18,r4,r18
4000a0e8:	80c00115 	stw	r3,4(r16)
4000a0ec:	84800015 	stw	r18,0(r16)
4000a0f0:	dfc00b17 	ldw	ra,44(sp)
4000a0f4:	df000a17 	ldw	fp,40(sp)
4000a0f8:	ddc00917 	ldw	r23,36(sp)
4000a0fc:	dd800817 	ldw	r22,32(sp)
4000a100:	dd400717 	ldw	r21,28(sp)
4000a104:	dd000617 	ldw	r20,24(sp)
4000a108:	dcc00517 	ldw	r19,20(sp)
4000a10c:	dc800417 	ldw	r18,16(sp)
4000a110:	dc400317 	ldw	r17,12(sp)
4000a114:	dc000217 	ldw	r16,8(sp)
4000a118:	dec00c04 	addi	sp,sp,48
4000a11c:	f800283a 	ret
4000a120:	0005883a 	mov	r2,zero
4000a124:	003ff206 	br	4000a0f0 <__alt_data_end+0xc000a0f0>
4000a128:	b007883a 	mov	r3,r22
4000a12c:	2580012e 	bgeu	r4,r22,4000a134 <_fread_r+0x138>
4000a130:	2007883a 	mov	r3,r4
4000a134:	81400017 	ldw	r5,0(r16)
4000a138:	180d883a 	mov	r6,r3
4000a13c:	9809883a 	mov	r4,r19
4000a140:	d8c00115 	stw	r3,4(sp)
4000a144:	000b8fc0 	call	4000b8fc <memcpy>
4000a148:	d8c00117 	ldw	r3,4(sp)
4000a14c:	84400017 	ldw	r17,0(r16)
4000a150:	80800117 	ldw	r2,4(r16)
4000a154:	81400c17 	ldw	r5,48(r16)
4000a158:	88e3883a 	add	r17,r17,r3
4000a15c:	10c5c83a 	sub	r2,r2,r3
4000a160:	84400015 	stw	r17,0(r16)
4000a164:	80800115 	stw	r2,4(r16)
4000a168:	b0e5c83a 	sub	r18,r22,r3
4000a16c:	28002b26 	beq	r5,zero,4000a21c <_fread_r+0x220>
4000a170:	90002b26 	beq	r18,zero,4000a220 <_fread_r+0x224>
4000a174:	80801004 	addi	r2,r16,64
4000a178:	28800526 	beq	r5,r2,4000a190 <_fread_r+0x194>
4000a17c:	a009883a 	mov	r4,r20
4000a180:	d8c00115 	stw	r3,4(sp)
4000a184:	000a3800 	call	4000a380 <_free_r>
4000a188:	d8c00117 	ldw	r3,4(sp)
4000a18c:	84400017 	ldw	r17,0(r16)
4000a190:	80000c15 	stw	zero,48(r16)
4000a194:	80800517 	ldw	r2,20(r16)
4000a198:	87000417 	ldw	fp,16(r16)
4000a19c:	98e7883a 	add	r19,r19,r3
4000a1a0:	d8800015 	stw	r2,0(sp)
4000a1a4:	00000106 	br	4000a1ac <_fread_r+0x1b0>
4000a1a8:	90001d26 	beq	r18,zero,4000a220 <_fread_r+0x224>
4000a1ac:	84c00415 	stw	r19,16(r16)
4000a1b0:	84800515 	stw	r18,20(r16)
4000a1b4:	84c00015 	stw	r19,0(r16)
4000a1b8:	a009883a 	mov	r4,r20
4000a1bc:	800b883a 	mov	r5,r16
4000a1c0:	000be540 	call	4000be54 <__srefill_r>
4000a1c4:	d9000017 	ldw	r4,0(sp)
4000a1c8:	80c00117 	ldw	r3,4(r16)
4000a1cc:	87000415 	stw	fp,16(r16)
4000a1d0:	81000515 	stw	r4,20(r16)
4000a1d4:	84400015 	stw	r17,0(r16)
4000a1d8:	80000115 	stw	zero,4(r16)
4000a1dc:	90e5c83a 	sub	r18,r18,r3
4000a1e0:	98e7883a 	add	r19,r19,r3
4000a1e4:	103ff026 	beq	r2,zero,4000a1a8 <__alt_data_end+0xc000a1a8>
4000a1e8:	b80b883a 	mov	r5,r23
4000a1ec:	b489c83a 	sub	r4,r22,r18
4000a1f0:	0007a740 	call	40007a74 <__udivsi3>
4000a1f4:	003fbe06 	br	4000a0f0 <__alt_data_end+0xc000a0f0>
4000a1f8:	80000115 	stw	zero,4(r16)
4000a1fc:	0009883a 	mov	r4,zero
4000a200:	0023883a 	mov	r17,zero
4000a204:	003f9e06 	br	4000a080 <__alt_data_end+0xc000a080>
4000a208:	0009e540 	call	40009e54 <__sinit>
4000a20c:	8080030b 	ldhu	r2,12(r16)
4000a210:	10c8000c 	andi	r3,r2,8192
4000a214:	183f971e 	bne	r3,zero,4000a074 <__alt_data_end+0xc000a074>
4000a218:	003f9006 	br	4000a05c <__alt_data_end+0xc000a05c>
4000a21c:	903fdd1e 	bne	r18,zero,4000a194 <__alt_data_end+0xc000a194>
4000a220:	a805883a 	mov	r2,r21
4000a224:	003fb206 	br	4000a0f0 <__alt_data_end+0xc000a0f0>

4000a228 <fread>:
4000a228:	defffe04 	addi	sp,sp,-8
4000a22c:	009000b4 	movhi	r2,16386
4000a230:	d9c00015 	stw	r7,0(sp)
4000a234:	108af604 	addi	r2,r2,11224
4000a238:	300f883a 	mov	r7,r6
4000a23c:	280d883a 	mov	r6,r5
4000a240:	200b883a 	mov	r5,r4
4000a244:	11000017 	ldw	r4,0(r2)
4000a248:	dfc00115 	stw	ra,4(sp)
4000a24c:	0009ffc0 	call	40009ffc <_fread_r>
4000a250:	dfc00117 	ldw	ra,4(sp)
4000a254:	dec00204 	addi	sp,sp,8
4000a258:	f800283a 	ret

4000a25c <_malloc_trim_r>:
4000a25c:	defffb04 	addi	sp,sp,-20
4000a260:	dcc00315 	stw	r19,12(sp)
4000a264:	04d000b4 	movhi	r19,16386
4000a268:	dc800215 	stw	r18,8(sp)
4000a26c:	dc400115 	stw	r17,4(sp)
4000a270:	dc000015 	stw	r16,0(sp)
4000a274:	dfc00415 	stw	ra,16(sp)
4000a278:	2821883a 	mov	r16,r5
4000a27c:	9cc53e04 	addi	r19,r19,5368
4000a280:	2025883a 	mov	r18,r4
4000a284:	00161800 	call	40016180 <__malloc_lock>
4000a288:	98800217 	ldw	r2,8(r19)
4000a28c:	14400117 	ldw	r17,4(r2)
4000a290:	00bfff04 	movi	r2,-4
4000a294:	88a2703a 	and	r17,r17,r2
4000a298:	8c21c83a 	sub	r16,r17,r16
4000a29c:	8403fbc4 	addi	r16,r16,4079
4000a2a0:	8020d33a 	srli	r16,r16,12
4000a2a4:	0083ffc4 	movi	r2,4095
4000a2a8:	843fffc4 	addi	r16,r16,-1
4000a2ac:	8020933a 	slli	r16,r16,12
4000a2b0:	1400060e 	bge	r2,r16,4000a2cc <_malloc_trim_r+0x70>
4000a2b4:	000b883a 	mov	r5,zero
4000a2b8:	9009883a 	mov	r4,r18
4000a2bc:	000c0280 	call	4000c028 <_sbrk_r>
4000a2c0:	98c00217 	ldw	r3,8(r19)
4000a2c4:	1c47883a 	add	r3,r3,r17
4000a2c8:	10c00a26 	beq	r2,r3,4000a2f4 <_malloc_trim_r+0x98>
4000a2cc:	9009883a 	mov	r4,r18
4000a2d0:	00161840 	call	40016184 <__malloc_unlock>
4000a2d4:	0005883a 	mov	r2,zero
4000a2d8:	dfc00417 	ldw	ra,16(sp)
4000a2dc:	dcc00317 	ldw	r19,12(sp)
4000a2e0:	dc800217 	ldw	r18,8(sp)
4000a2e4:	dc400117 	ldw	r17,4(sp)
4000a2e8:	dc000017 	ldw	r16,0(sp)
4000a2ec:	dec00504 	addi	sp,sp,20
4000a2f0:	f800283a 	ret
4000a2f4:	040bc83a 	sub	r5,zero,r16
4000a2f8:	9009883a 	mov	r4,r18
4000a2fc:	000c0280 	call	4000c028 <_sbrk_r>
4000a300:	00ffffc4 	movi	r3,-1
4000a304:	10c00d26 	beq	r2,r3,4000a33c <_malloc_trim_r+0xe0>
4000a308:	00d000f4 	movhi	r3,16387
4000a30c:	18eb1004 	addi	r3,r3,-21440
4000a310:	18800017 	ldw	r2,0(r3)
4000a314:	99000217 	ldw	r4,8(r19)
4000a318:	8c23c83a 	sub	r17,r17,r16
4000a31c:	8c400054 	ori	r17,r17,1
4000a320:	1421c83a 	sub	r16,r2,r16
4000a324:	24400115 	stw	r17,4(r4)
4000a328:	9009883a 	mov	r4,r18
4000a32c:	1c000015 	stw	r16,0(r3)
4000a330:	00161840 	call	40016184 <__malloc_unlock>
4000a334:	00800044 	movi	r2,1
4000a338:	003fe706 	br	4000a2d8 <__alt_data_end+0xc000a2d8>
4000a33c:	000b883a 	mov	r5,zero
4000a340:	9009883a 	mov	r4,r18
4000a344:	000c0280 	call	4000c028 <_sbrk_r>
4000a348:	99000217 	ldw	r4,8(r19)
4000a34c:	014003c4 	movi	r5,15
4000a350:	1107c83a 	sub	r3,r2,r4
4000a354:	28ffdd0e 	bge	r5,r3,4000a2cc <__alt_data_end+0xc000a2cc>
4000a358:	015000b4 	movhi	r5,16386
4000a35c:	294af704 	addi	r5,r5,11228
4000a360:	29400017 	ldw	r5,0(r5)
4000a364:	18c00054 	ori	r3,r3,1
4000a368:	20c00115 	stw	r3,4(r4)
4000a36c:	00d000f4 	movhi	r3,16387
4000a370:	1145c83a 	sub	r2,r2,r5
4000a374:	18eb1004 	addi	r3,r3,-21440
4000a378:	18800015 	stw	r2,0(r3)
4000a37c:	003fd306 	br	4000a2cc <__alt_data_end+0xc000a2cc>

4000a380 <_free_r>:
4000a380:	28004126 	beq	r5,zero,4000a488 <_free_r+0x108>
4000a384:	defffd04 	addi	sp,sp,-12
4000a388:	dc400115 	stw	r17,4(sp)
4000a38c:	dc000015 	stw	r16,0(sp)
4000a390:	2023883a 	mov	r17,r4
4000a394:	2821883a 	mov	r16,r5
4000a398:	dfc00215 	stw	ra,8(sp)
4000a39c:	00161800 	call	40016180 <__malloc_lock>
4000a3a0:	81ffff17 	ldw	r7,-4(r16)
4000a3a4:	00bfff84 	movi	r2,-2
4000a3a8:	011000b4 	movhi	r4,16386
4000a3ac:	81bffe04 	addi	r6,r16,-8
4000a3b0:	3884703a 	and	r2,r7,r2
4000a3b4:	21053e04 	addi	r4,r4,5368
4000a3b8:	308b883a 	add	r5,r6,r2
4000a3bc:	2a400117 	ldw	r9,4(r5)
4000a3c0:	22000217 	ldw	r8,8(r4)
4000a3c4:	00ffff04 	movi	r3,-4
4000a3c8:	48c6703a 	and	r3,r9,r3
4000a3cc:	2a005726 	beq	r5,r8,4000a52c <_free_r+0x1ac>
4000a3d0:	28c00115 	stw	r3,4(r5)
4000a3d4:	39c0004c 	andi	r7,r7,1
4000a3d8:	3800091e 	bne	r7,zero,4000a400 <_free_r+0x80>
4000a3dc:	823ffe17 	ldw	r8,-8(r16)
4000a3e0:	22400204 	addi	r9,r4,8
4000a3e4:	320dc83a 	sub	r6,r6,r8
4000a3e8:	31c00217 	ldw	r7,8(r6)
4000a3ec:	1205883a 	add	r2,r2,r8
4000a3f0:	3a406526 	beq	r7,r9,4000a588 <_free_r+0x208>
4000a3f4:	32000317 	ldw	r8,12(r6)
4000a3f8:	3a000315 	stw	r8,12(r7)
4000a3fc:	41c00215 	stw	r7,8(r8)
4000a400:	28cf883a 	add	r7,r5,r3
4000a404:	39c00117 	ldw	r7,4(r7)
4000a408:	39c0004c 	andi	r7,r7,1
4000a40c:	38003a26 	beq	r7,zero,4000a4f8 <_free_r+0x178>
4000a410:	10c00054 	ori	r3,r2,1
4000a414:	30c00115 	stw	r3,4(r6)
4000a418:	3087883a 	add	r3,r6,r2
4000a41c:	18800015 	stw	r2,0(r3)
4000a420:	00c07fc4 	movi	r3,511
4000a424:	18801936 	bltu	r3,r2,4000a48c <_free_r+0x10c>
4000a428:	1004d0fa 	srli	r2,r2,3
4000a42c:	01c00044 	movi	r7,1
4000a430:	21400117 	ldw	r5,4(r4)
4000a434:	10c00044 	addi	r3,r2,1
4000a438:	18c7883a 	add	r3,r3,r3
4000a43c:	1005d0ba 	srai	r2,r2,2
4000a440:	18c7883a 	add	r3,r3,r3
4000a444:	18c7883a 	add	r3,r3,r3
4000a448:	1907883a 	add	r3,r3,r4
4000a44c:	3884983a 	sll	r2,r7,r2
4000a450:	19c00017 	ldw	r7,0(r3)
4000a454:	1a3ffe04 	addi	r8,r3,-8
4000a458:	1144b03a 	or	r2,r2,r5
4000a45c:	32000315 	stw	r8,12(r6)
4000a460:	31c00215 	stw	r7,8(r6)
4000a464:	20800115 	stw	r2,4(r4)
4000a468:	19800015 	stw	r6,0(r3)
4000a46c:	39800315 	stw	r6,12(r7)
4000a470:	8809883a 	mov	r4,r17
4000a474:	dfc00217 	ldw	ra,8(sp)
4000a478:	dc400117 	ldw	r17,4(sp)
4000a47c:	dc000017 	ldw	r16,0(sp)
4000a480:	dec00304 	addi	sp,sp,12
4000a484:	00161841 	jmpi	40016184 <__malloc_unlock>
4000a488:	f800283a 	ret
4000a48c:	100ad27a 	srli	r5,r2,9
4000a490:	00c00104 	movi	r3,4
4000a494:	19404a36 	bltu	r3,r5,4000a5c0 <_free_r+0x240>
4000a498:	100ad1ba 	srli	r5,r2,6
4000a49c:	28c00e44 	addi	r3,r5,57
4000a4a0:	18c7883a 	add	r3,r3,r3
4000a4a4:	29400e04 	addi	r5,r5,56
4000a4a8:	18c7883a 	add	r3,r3,r3
4000a4ac:	18c7883a 	add	r3,r3,r3
4000a4b0:	1909883a 	add	r4,r3,r4
4000a4b4:	20c00017 	ldw	r3,0(r4)
4000a4b8:	01d000b4 	movhi	r7,16386
4000a4bc:	213ffe04 	addi	r4,r4,-8
4000a4c0:	39c53e04 	addi	r7,r7,5368
4000a4c4:	20c04426 	beq	r4,r3,4000a5d8 <_free_r+0x258>
4000a4c8:	01ffff04 	movi	r7,-4
4000a4cc:	19400117 	ldw	r5,4(r3)
4000a4d0:	29ca703a 	and	r5,r5,r7
4000a4d4:	1140022e 	bgeu	r2,r5,4000a4e0 <_free_r+0x160>
4000a4d8:	18c00217 	ldw	r3,8(r3)
4000a4dc:	20fffb1e 	bne	r4,r3,4000a4cc <__alt_data_end+0xc000a4cc>
4000a4e0:	19000317 	ldw	r4,12(r3)
4000a4e4:	31000315 	stw	r4,12(r6)
4000a4e8:	30c00215 	stw	r3,8(r6)
4000a4ec:	21800215 	stw	r6,8(r4)
4000a4f0:	19800315 	stw	r6,12(r3)
4000a4f4:	003fde06 	br	4000a470 <__alt_data_end+0xc000a470>
4000a4f8:	29c00217 	ldw	r7,8(r5)
4000a4fc:	10c5883a 	add	r2,r2,r3
4000a500:	00d000b4 	movhi	r3,16386
4000a504:	18c54004 	addi	r3,r3,5376
4000a508:	38c03b26 	beq	r7,r3,4000a5f8 <_free_r+0x278>
4000a50c:	2a000317 	ldw	r8,12(r5)
4000a510:	11400054 	ori	r5,r2,1
4000a514:	3087883a 	add	r3,r6,r2
4000a518:	3a000315 	stw	r8,12(r7)
4000a51c:	41c00215 	stw	r7,8(r8)
4000a520:	31400115 	stw	r5,4(r6)
4000a524:	18800015 	stw	r2,0(r3)
4000a528:	003fbd06 	br	4000a420 <__alt_data_end+0xc000a420>
4000a52c:	39c0004c 	andi	r7,r7,1
4000a530:	10c5883a 	add	r2,r2,r3
4000a534:	3800071e 	bne	r7,zero,4000a554 <_free_r+0x1d4>
4000a538:	81fffe17 	ldw	r7,-8(r16)
4000a53c:	31cdc83a 	sub	r6,r6,r7
4000a540:	30c00317 	ldw	r3,12(r6)
4000a544:	31400217 	ldw	r5,8(r6)
4000a548:	11c5883a 	add	r2,r2,r7
4000a54c:	28c00315 	stw	r3,12(r5)
4000a550:	19400215 	stw	r5,8(r3)
4000a554:	10c00054 	ori	r3,r2,1
4000a558:	30c00115 	stw	r3,4(r6)
4000a55c:	00d000b4 	movhi	r3,16386
4000a560:	18caf804 	addi	r3,r3,11232
4000a564:	18c00017 	ldw	r3,0(r3)
4000a568:	21800215 	stw	r6,8(r4)
4000a56c:	10ffc036 	bltu	r2,r3,4000a470 <__alt_data_end+0xc000a470>
4000a570:	009000b4 	movhi	r2,16386
4000a574:	109a9704 	addi	r2,r2,27228
4000a578:	11400017 	ldw	r5,0(r2)
4000a57c:	8809883a 	mov	r4,r17
4000a580:	000a25c0 	call	4000a25c <_malloc_trim_r>
4000a584:	003fba06 	br	4000a470 <__alt_data_end+0xc000a470>
4000a588:	28c9883a 	add	r4,r5,r3
4000a58c:	21000117 	ldw	r4,4(r4)
4000a590:	2100004c 	andi	r4,r4,1
4000a594:	2000391e 	bne	r4,zero,4000a67c <_free_r+0x2fc>
4000a598:	29c00217 	ldw	r7,8(r5)
4000a59c:	29000317 	ldw	r4,12(r5)
4000a5a0:	1885883a 	add	r2,r3,r2
4000a5a4:	10c00054 	ori	r3,r2,1
4000a5a8:	39000315 	stw	r4,12(r7)
4000a5ac:	21c00215 	stw	r7,8(r4)
4000a5b0:	30c00115 	stw	r3,4(r6)
4000a5b4:	308d883a 	add	r6,r6,r2
4000a5b8:	30800015 	stw	r2,0(r6)
4000a5bc:	003fac06 	br	4000a470 <__alt_data_end+0xc000a470>
4000a5c0:	00c00504 	movi	r3,20
4000a5c4:	19401536 	bltu	r3,r5,4000a61c <_free_r+0x29c>
4000a5c8:	28c01704 	addi	r3,r5,92
4000a5cc:	18c7883a 	add	r3,r3,r3
4000a5d0:	294016c4 	addi	r5,r5,91
4000a5d4:	003fb406 	br	4000a4a8 <__alt_data_end+0xc000a4a8>
4000a5d8:	280bd0ba 	srai	r5,r5,2
4000a5dc:	00c00044 	movi	r3,1
4000a5e0:	38800117 	ldw	r2,4(r7)
4000a5e4:	194a983a 	sll	r5,r3,r5
4000a5e8:	2007883a 	mov	r3,r4
4000a5ec:	2884b03a 	or	r2,r5,r2
4000a5f0:	38800115 	stw	r2,4(r7)
4000a5f4:	003fbb06 	br	4000a4e4 <__alt_data_end+0xc000a4e4>
4000a5f8:	21800515 	stw	r6,20(r4)
4000a5fc:	21800415 	stw	r6,16(r4)
4000a600:	10c00054 	ori	r3,r2,1
4000a604:	31c00315 	stw	r7,12(r6)
4000a608:	31c00215 	stw	r7,8(r6)
4000a60c:	30c00115 	stw	r3,4(r6)
4000a610:	308d883a 	add	r6,r6,r2
4000a614:	30800015 	stw	r2,0(r6)
4000a618:	003f9506 	br	4000a470 <__alt_data_end+0xc000a470>
4000a61c:	00c01504 	movi	r3,84
4000a620:	19400536 	bltu	r3,r5,4000a638 <_free_r+0x2b8>
4000a624:	100ad33a 	srli	r5,r2,12
4000a628:	28c01bc4 	addi	r3,r5,111
4000a62c:	18c7883a 	add	r3,r3,r3
4000a630:	29401b84 	addi	r5,r5,110
4000a634:	003f9c06 	br	4000a4a8 <__alt_data_end+0xc000a4a8>
4000a638:	00c05504 	movi	r3,340
4000a63c:	19400536 	bltu	r3,r5,4000a654 <_free_r+0x2d4>
4000a640:	100ad3fa 	srli	r5,r2,15
4000a644:	28c01e04 	addi	r3,r5,120
4000a648:	18c7883a 	add	r3,r3,r3
4000a64c:	29401dc4 	addi	r5,r5,119
4000a650:	003f9506 	br	4000a4a8 <__alt_data_end+0xc000a4a8>
4000a654:	00c15504 	movi	r3,1364
4000a658:	19400536 	bltu	r3,r5,4000a670 <_free_r+0x2f0>
4000a65c:	100ad4ba 	srli	r5,r2,18
4000a660:	28c01f44 	addi	r3,r5,125
4000a664:	18c7883a 	add	r3,r3,r3
4000a668:	29401f04 	addi	r5,r5,124
4000a66c:	003f8e06 	br	4000a4a8 <__alt_data_end+0xc000a4a8>
4000a670:	00c03f84 	movi	r3,254
4000a674:	01401f84 	movi	r5,126
4000a678:	003f8b06 	br	4000a4a8 <__alt_data_end+0xc000a4a8>
4000a67c:	10c00054 	ori	r3,r2,1
4000a680:	30c00115 	stw	r3,4(r6)
4000a684:	308d883a 	add	r6,r6,r2
4000a688:	30800015 	stw	r2,0(r6)
4000a68c:	003f7806 	br	4000a470 <__alt_data_end+0xc000a470>

4000a690 <_fseek_r>:
4000a690:	000a6b01 	jmpi	4000a6b0 <_fseeko_r>

4000a694 <fseek>:
4000a694:	009000b4 	movhi	r2,16386
4000a698:	108af604 	addi	r2,r2,11224
4000a69c:	300f883a 	mov	r7,r6
4000a6a0:	280d883a 	mov	r6,r5
4000a6a4:	200b883a 	mov	r5,r4
4000a6a8:	11000017 	ldw	r4,0(r2)
4000a6ac:	000a6b01 	jmpi	4000a6b0 <_fseeko_r>

4000a6b0 <_fseeko_r>:
4000a6b0:	deffe804 	addi	sp,sp,-96
4000a6b4:	dd401415 	stw	r21,80(sp)
4000a6b8:	dc801115 	stw	r18,68(sp)
4000a6bc:	dc401015 	stw	r17,64(sp)
4000a6c0:	dc000f15 	stw	r16,60(sp)
4000a6c4:	dfc01715 	stw	ra,92(sp)
4000a6c8:	ddc01615 	stw	r23,88(sp)
4000a6cc:	dd801515 	stw	r22,84(sp)
4000a6d0:	dd001315 	stw	r20,76(sp)
4000a6d4:	dcc01215 	stw	r19,72(sp)
4000a6d8:	2023883a 	mov	r17,r4
4000a6dc:	2821883a 	mov	r16,r5
4000a6e0:	302b883a 	mov	r21,r6
4000a6e4:	3825883a 	mov	r18,r7
4000a6e8:	20000226 	beq	r4,zero,4000a6f4 <_fseeko_r+0x44>
4000a6ec:	20800e17 	ldw	r2,56(r4)
4000a6f0:	10005a26 	beq	r2,zero,4000a85c <_fseeko_r+0x1ac>
4000a6f4:	8080030b 	ldhu	r2,12(r16)
4000a6f8:	00c04204 	movi	r3,264
4000a6fc:	1080420c 	andi	r2,r2,264
4000a700:	10c05b26 	beq	r2,r3,4000a870 <_fseeko_r+0x1c0>
4000a704:	85000a17 	ldw	r20,40(r16)
4000a708:	a000f626 	beq	r20,zero,4000aae4 <_fseeko_r+0x434>
4000a70c:	00800044 	movi	r2,1
4000a710:	90803e26 	beq	r18,r2,4000a80c <_fseeko_r+0x15c>
4000a714:	00800084 	movi	r2,2
4000a718:	90801026 	beq	r18,r2,4000a75c <_fseeko_r+0xac>
4000a71c:	90000f26 	beq	r18,zero,4000a75c <_fseeko_r+0xac>
4000a720:	00800584 	movi	r2,22
4000a724:	88800015 	stw	r2,0(r17)
4000a728:	04ffffc4 	movi	r19,-1
4000a72c:	9805883a 	mov	r2,r19
4000a730:	dfc01717 	ldw	ra,92(sp)
4000a734:	ddc01617 	ldw	r23,88(sp)
4000a738:	dd801517 	ldw	r22,84(sp)
4000a73c:	dd401417 	ldw	r21,80(sp)
4000a740:	dd001317 	ldw	r20,76(sp)
4000a744:	dcc01217 	ldw	r19,72(sp)
4000a748:	dc801117 	ldw	r18,68(sp)
4000a74c:	dc401017 	ldw	r17,64(sp)
4000a750:	dc000f17 	ldw	r16,60(sp)
4000a754:	dec01804 	addi	sp,sp,96
4000a758:	f800283a 	ret
4000a75c:	80800417 	ldw	r2,16(r16)
4000a760:	002f883a 	mov	r23,zero
4000a764:	0027883a 	mov	r19,zero
4000a768:	1000cb26 	beq	r2,zero,4000aa98 <_fseeko_r+0x3e8>
4000a76c:	8080030b 	ldhu	r2,12(r16)
4000a770:	10c2068c 	andi	r3,r2,2074
4000a774:	1800071e 	bne	r3,zero,4000a794 <_fseeko_r+0xe4>
4000a778:	10c1000c 	andi	r3,r2,1024
4000a77c:	1800451e 	bne	r3,zero,4000a894 <_fseeko_r+0x1e4>
4000a780:	00d00074 	movhi	r3,16385
4000a784:	18f0c404 	addi	r3,r3,-15600
4000a788:	a0c0b726 	beq	r20,r3,4000aa68 <_fseeko_r+0x3b8>
4000a78c:	10820014 	ori	r2,r2,2048
4000a790:	8080030d 	sth	r2,12(r16)
4000a794:	800b883a 	mov	r5,r16
4000a798:	8809883a 	mov	r4,r17
4000a79c:	0009a780 	call	40009a78 <_fflush_r>
4000a7a0:	1027883a 	mov	r19,r2
4000a7a4:	103fe01e 	bne	r2,zero,4000a728 <__alt_data_end+0xc000a728>
4000a7a8:	81400717 	ldw	r5,28(r16)
4000a7ac:	900f883a 	mov	r7,r18
4000a7b0:	a80d883a 	mov	r6,r21
4000a7b4:	8809883a 	mov	r4,r17
4000a7b8:	a03ee83a 	callr	r20
4000a7bc:	00ffffc4 	movi	r3,-1
4000a7c0:	10ffd926 	beq	r2,r3,4000a728 <__alt_data_end+0xc000a728>
4000a7c4:	81400c17 	ldw	r5,48(r16)
4000a7c8:	28000526 	beq	r5,zero,4000a7e0 <_fseeko_r+0x130>
4000a7cc:	80801004 	addi	r2,r16,64
4000a7d0:	28800226 	beq	r5,r2,4000a7dc <_fseeko_r+0x12c>
4000a7d4:	8809883a 	mov	r4,r17
4000a7d8:	000a3800 	call	4000a380 <_free_r>
4000a7dc:	80000c15 	stw	zero,48(r16)
4000a7e0:	8080030b 	ldhu	r2,12(r16)
4000a7e4:	80c00417 	ldw	r3,16(r16)
4000a7e8:	80000115 	stw	zero,4(r16)
4000a7ec:	10bdf7cc 	andi	r2,r2,63455
4000a7f0:	80c00015 	stw	r3,0(r16)
4000a7f4:	8080030d 	sth	r2,12(r16)
4000a7f8:	01800204 	movi	r6,8
4000a7fc:	000b883a 	mov	r5,zero
4000a800:	81001704 	addi	r4,r16,92
4000a804:	000ba440 	call	4000ba44 <memset>
4000a808:	003fc806 	br	4000a72c <__alt_data_end+0xc000a72c>
4000a80c:	800b883a 	mov	r5,r16
4000a810:	8809883a 	mov	r4,r17
4000a814:	0009a780 	call	40009a78 <_fflush_r>
4000a818:	8080030b 	ldhu	r2,12(r16)
4000a81c:	10c4000c 	andi	r3,r2,4096
4000a820:	18008726 	beq	r3,zero,4000aa40 <_fseeko_r+0x390>
4000a824:	84c01417 	ldw	r19,80(r16)
4000a828:	10c0010c 	andi	r3,r2,4
4000a82c:	1800431e 	bne	r3,zero,4000a93c <_fseeko_r+0x28c>
4000a830:	1080020c 	andi	r2,r2,8
4000a834:	10008026 	beq	r2,zero,4000aa38 <_fseeko_r+0x388>
4000a838:	80c00017 	ldw	r3,0(r16)
4000a83c:	80800417 	ldw	r2,16(r16)
4000a840:	18000226 	beq	r3,zero,4000a84c <_fseeko_r+0x19c>
4000a844:	1887c83a 	sub	r3,r3,r2
4000a848:	98e7883a 	add	r19,r19,r3
4000a84c:	aceb883a 	add	r21,r21,r19
4000a850:	05c00044 	movi	r23,1
4000a854:	0025883a 	mov	r18,zero
4000a858:	003fc306 	br	4000a768 <__alt_data_end+0xc000a768>
4000a85c:	0009e540 	call	40009e54 <__sinit>
4000a860:	8080030b 	ldhu	r2,12(r16)
4000a864:	00c04204 	movi	r3,264
4000a868:	1080420c 	andi	r2,r2,264
4000a86c:	10ffa51e 	bne	r2,r3,4000a704 <__alt_data_end+0xc000a704>
4000a870:	800b883a 	mov	r5,r16
4000a874:	8809883a 	mov	r4,r17
4000a878:	0009a780 	call	40009a78 <_fflush_r>
4000a87c:	003fa106 	br	4000a704 <__alt_data_end+0xc000a704>
4000a880:	8080030b 	ldhu	r2,12(r16)
4000a884:	00c10004 	movi	r3,1024
4000a888:	80c01315 	stw	r3,76(r16)
4000a88c:	10c4b03a 	or	r2,r2,r3
4000a890:	8080030d 	sth	r2,12(r16)
4000a894:	9000311e 	bne	r18,zero,4000a95c <_fseeko_r+0x2ac>
4000a898:	a82d883a 	mov	r22,r21
4000a89c:	b800371e 	bne	r23,zero,4000a97c <_fseeko_r+0x2cc>
4000a8a0:	8080030b 	ldhu	r2,12(r16)
4000a8a4:	1084000c 	andi	r2,r2,4096
4000a8a8:	10007f26 	beq	r2,zero,4000aaa8 <_fseeko_r+0x3f8>
4000a8ac:	80801417 	ldw	r2,80(r16)
4000a8b0:	81800117 	ldw	r6,4(r16)
4000a8b4:	81400c17 	ldw	r5,48(r16)
4000a8b8:	11a7c83a 	sub	r19,r2,r6
4000a8bc:	28008226 	beq	r5,zero,4000aac8 <_fseeko_r+0x418>
4000a8c0:	81c00f17 	ldw	r7,60(r16)
4000a8c4:	99e7c83a 	sub	r19,r19,r7
4000a8c8:	81000e17 	ldw	r4,56(r16)
4000a8cc:	80800417 	ldw	r2,16(r16)
4000a8d0:	99a7883a 	add	r19,r19,r6
4000a8d4:	2087c83a 	sub	r3,r4,r2
4000a8d8:	98e7c83a 	sub	r19,r19,r3
4000a8dc:	38c7883a 	add	r3,r7,r3
4000a8e0:	b4c02b16 	blt	r22,r19,4000a990 <_fseeko_r+0x2e0>
4000a8e4:	98c9883a 	add	r4,r19,r3
4000a8e8:	b100292e 	bgeu	r22,r4,4000a990 <_fseeko_r+0x2e0>
4000a8ec:	b4e7c83a 	sub	r19,r22,r19
4000a8f0:	14c5883a 	add	r2,r2,r19
4000a8f4:	1ce7c83a 	sub	r19,r3,r19
4000a8f8:	80800015 	stw	r2,0(r16)
4000a8fc:	84c00115 	stw	r19,4(r16)
4000a900:	28000526 	beq	r5,zero,4000a918 <_fseeko_r+0x268>
4000a904:	80801004 	addi	r2,r16,64
4000a908:	28800226 	beq	r5,r2,4000a914 <_fseeko_r+0x264>
4000a90c:	8809883a 	mov	r4,r17
4000a910:	000a3800 	call	4000a380 <_free_r>
4000a914:	80000c15 	stw	zero,48(r16)
4000a918:	8080030b 	ldhu	r2,12(r16)
4000a91c:	01800204 	movi	r6,8
4000a920:	000b883a 	mov	r5,zero
4000a924:	10bff7cc 	andi	r2,r2,65503
4000a928:	8080030d 	sth	r2,12(r16)
4000a92c:	81001704 	addi	r4,r16,92
4000a930:	000ba440 	call	4000ba44 <memset>
4000a934:	0027883a 	mov	r19,zero
4000a938:	003f7c06 	br	4000a72c <__alt_data_end+0xc000a72c>
4000a93c:	80c00117 	ldw	r3,4(r16)
4000a940:	80800c17 	ldw	r2,48(r16)
4000a944:	98e7c83a 	sub	r19,r19,r3
4000a948:	10003b26 	beq	r2,zero,4000aa38 <_fseeko_r+0x388>
4000a94c:	80c00f17 	ldw	r3,60(r16)
4000a950:	80800417 	ldw	r2,16(r16)
4000a954:	98e7c83a 	sub	r19,r19,r3
4000a958:	003fbc06 	br	4000a84c <__alt_data_end+0xc000a84c>
4000a95c:	8140038f 	ldh	r5,14(r16)
4000a960:	d80d883a 	mov	r6,sp
4000a964:	8809883a 	mov	r4,r17
4000a968:	000ab100 	call	4000ab10 <_fstat_r>
4000a96c:	103f891e 	bne	r2,zero,4000a794 <__alt_data_end+0xc000a794>
4000a970:	dd800417 	ldw	r22,16(sp)
4000a974:	adad883a 	add	r22,r21,r22
4000a978:	b83fc926 	beq	r23,zero,4000a8a0 <__alt_data_end+0xc000a8a0>
4000a97c:	81400c17 	ldw	r5,48(r16)
4000a980:	81800117 	ldw	r6,4(r16)
4000a984:	28005026 	beq	r5,zero,4000aac8 <_fseeko_r+0x418>
4000a988:	81c00f17 	ldw	r7,60(r16)
4000a98c:	003fce06 	br	4000a8c8 <__alt_data_end+0xc000a8c8>
4000a990:	84c01317 	ldw	r19,76(r16)
4000a994:	81400717 	ldw	r5,28(r16)
4000a998:	000f883a 	mov	r7,zero
4000a99c:	04e7c83a 	sub	r19,zero,r19
4000a9a0:	9da6703a 	and	r19,r19,r22
4000a9a4:	980d883a 	mov	r6,r19
4000a9a8:	8809883a 	mov	r4,r17
4000a9ac:	a03ee83a 	callr	r20
4000a9b0:	00ffffc4 	movi	r3,-1
4000a9b4:	10ff7726 	beq	r2,r3,4000a794 <__alt_data_end+0xc000a794>
4000a9b8:	80800417 	ldw	r2,16(r16)
4000a9bc:	81400c17 	ldw	r5,48(r16)
4000a9c0:	80000115 	stw	zero,4(r16)
4000a9c4:	80800015 	stw	r2,0(r16)
4000a9c8:	28000526 	beq	r5,zero,4000a9e0 <_fseeko_r+0x330>
4000a9cc:	80801004 	addi	r2,r16,64
4000a9d0:	28800226 	beq	r5,r2,4000a9dc <_fseeko_r+0x32c>
4000a9d4:	8809883a 	mov	r4,r17
4000a9d8:	000a3800 	call	4000a380 <_free_r>
4000a9dc:	80000c15 	stw	zero,48(r16)
4000a9e0:	8080030b 	ldhu	r2,12(r16)
4000a9e4:	b4e7c83a 	sub	r19,r22,r19
4000a9e8:	10bff7cc 	andi	r2,r2,65503
4000a9ec:	8080030d 	sth	r2,12(r16)
4000a9f0:	98000b26 	beq	r19,zero,4000aa20 <_fseeko_r+0x370>
4000a9f4:	800b883a 	mov	r5,r16
4000a9f8:	8809883a 	mov	r4,r17
4000a9fc:	000be540 	call	4000be54 <__srefill_r>
4000aa00:	103f641e 	bne	r2,zero,4000a794 <__alt_data_end+0xc000a794>
4000aa04:	80800117 	ldw	r2,4(r16)
4000aa08:	14ff6236 	bltu	r2,r19,4000a794 <__alt_data_end+0xc000a794>
4000aa0c:	80c00017 	ldw	r3,0(r16)
4000aa10:	14c5c83a 	sub	r2,r2,r19
4000aa14:	80800115 	stw	r2,4(r16)
4000aa18:	1ce7883a 	add	r19,r3,r19
4000aa1c:	84c00015 	stw	r19,0(r16)
4000aa20:	01800204 	movi	r6,8
4000aa24:	000b883a 	mov	r5,zero
4000aa28:	81001704 	addi	r4,r16,92
4000aa2c:	000ba440 	call	4000ba44 <memset>
4000aa30:	0027883a 	mov	r19,zero
4000aa34:	003f3d06 	br	4000a72c <__alt_data_end+0xc000a72c>
4000aa38:	80800417 	ldw	r2,16(r16)
4000aa3c:	003f8306 	br	4000a84c <__alt_data_end+0xc000a84c>
4000aa40:	81400717 	ldw	r5,28(r16)
4000aa44:	900f883a 	mov	r7,r18
4000aa48:	000d883a 	mov	r6,zero
4000aa4c:	8809883a 	mov	r4,r17
4000aa50:	a03ee83a 	callr	r20
4000aa54:	1027883a 	mov	r19,r2
4000aa58:	00bfffc4 	movi	r2,-1
4000aa5c:	98bf3226 	beq	r19,r2,4000a728 <__alt_data_end+0xc000a728>
4000aa60:	8080030b 	ldhu	r2,12(r16)
4000aa64:	003f7006 	br	4000a828 <__alt_data_end+0xc000a828>
4000aa68:	8140038f 	ldh	r5,14(r16)
4000aa6c:	283f4716 	blt	r5,zero,4000a78c <__alt_data_end+0xc000a78c>
4000aa70:	d80d883a 	mov	r6,sp
4000aa74:	8809883a 	mov	r4,r17
4000aa78:	000ab100 	call	4000ab10 <_fstat_r>
4000aa7c:	1000041e 	bne	r2,zero,4000aa90 <_fseeko_r+0x3e0>
4000aa80:	d8800117 	ldw	r2,4(sp)
4000aa84:	00e00014 	movui	r3,32768
4000aa88:	10bc000c 	andi	r2,r2,61440
4000aa8c:	10ff7c26 	beq	r2,r3,4000a880 <__alt_data_end+0xc000a880>
4000aa90:	8080030b 	ldhu	r2,12(r16)
4000aa94:	003f3d06 	br	4000a78c <__alt_data_end+0xc000a78c>
4000aa98:	800b883a 	mov	r5,r16
4000aa9c:	8809883a 	mov	r4,r17
4000aaa0:	000af0c0 	call	4000af0c <__smakebuf_r>
4000aaa4:	003f3106 	br	4000a76c <__alt_data_end+0xc000a76c>
4000aaa8:	81400717 	ldw	r5,28(r16)
4000aaac:	01c00044 	movi	r7,1
4000aab0:	000d883a 	mov	r6,zero
4000aab4:	8809883a 	mov	r4,r17
4000aab8:	a03ee83a 	callr	r20
4000aabc:	00ffffc4 	movi	r3,-1
4000aac0:	10ff7b1e 	bne	r2,r3,4000a8b0 <__alt_data_end+0xc000a8b0>
4000aac4:	003f3306 	br	4000a794 <__alt_data_end+0xc000a794>
4000aac8:	80c00017 	ldw	r3,0(r16)
4000aacc:	80800417 	ldw	r2,16(r16)
4000aad0:	000b883a 	mov	r5,zero
4000aad4:	1887c83a 	sub	r3,r3,r2
4000aad8:	98e7c83a 	sub	r19,r19,r3
4000aadc:	30c7883a 	add	r3,r6,r3
4000aae0:	003f7f06 	br	4000a8e0 <__alt_data_end+0xc000a8e0>
4000aae4:	00800744 	movi	r2,29
4000aae8:	88800015 	stw	r2,0(r17)
4000aaec:	04ffffc4 	movi	r19,-1
4000aaf0:	003f0e06 	br	4000a72c <__alt_data_end+0xc000a72c>

4000aaf4 <fseeko>:
4000aaf4:	009000b4 	movhi	r2,16386
4000aaf8:	108af604 	addi	r2,r2,11224
4000aafc:	300f883a 	mov	r7,r6
4000ab00:	280d883a 	mov	r6,r5
4000ab04:	200b883a 	mov	r5,r4
4000ab08:	11000017 	ldw	r4,0(r2)
4000ab0c:	000a6b01 	jmpi	4000a6b0 <_fseeko_r>

4000ab10 <_fstat_r>:
4000ab10:	defffd04 	addi	sp,sp,-12
4000ab14:	2805883a 	mov	r2,r5
4000ab18:	dc000015 	stw	r16,0(sp)
4000ab1c:	041000b4 	movhi	r16,16386
4000ab20:	dc400115 	stw	r17,4(sp)
4000ab24:	841a9404 	addi	r16,r16,27216
4000ab28:	2023883a 	mov	r17,r4
4000ab2c:	300b883a 	mov	r5,r6
4000ab30:	1009883a 	mov	r4,r2
4000ab34:	dfc00215 	stw	ra,8(sp)
4000ab38:	80000015 	stw	zero,0(r16)
4000ab3c:	0015edc0 	call	40015edc <fstat>
4000ab40:	00ffffc4 	movi	r3,-1
4000ab44:	10c00526 	beq	r2,r3,4000ab5c <_fstat_r+0x4c>
4000ab48:	dfc00217 	ldw	ra,8(sp)
4000ab4c:	dc400117 	ldw	r17,4(sp)
4000ab50:	dc000017 	ldw	r16,0(sp)
4000ab54:	dec00304 	addi	sp,sp,12
4000ab58:	f800283a 	ret
4000ab5c:	80c00017 	ldw	r3,0(r16)
4000ab60:	183ff926 	beq	r3,zero,4000ab48 <__alt_data_end+0xc000ab48>
4000ab64:	88c00015 	stw	r3,0(r17)
4000ab68:	003ff706 	br	4000ab48 <__alt_data_end+0xc000ab48>

4000ab6c <_ftell_r>:
4000ab6c:	000ab841 	jmpi	4000ab84 <_ftello_r>

4000ab70 <ftell>:
4000ab70:	009000b4 	movhi	r2,16386
4000ab74:	108af604 	addi	r2,r2,11224
4000ab78:	200b883a 	mov	r5,r4
4000ab7c:	11000017 	ldw	r4,0(r2)
4000ab80:	000ab841 	jmpi	4000ab84 <_ftello_r>

4000ab84 <_ftello_r>:
4000ab84:	defffd04 	addi	sp,sp,-12
4000ab88:	dc400115 	stw	r17,4(sp)
4000ab8c:	dc000015 	stw	r16,0(sp)
4000ab90:	dfc00215 	stw	ra,8(sp)
4000ab94:	2023883a 	mov	r17,r4
4000ab98:	2821883a 	mov	r16,r5
4000ab9c:	20000226 	beq	r4,zero,4000aba8 <_ftello_r+0x24>
4000aba0:	20800e17 	ldw	r2,56(r4)
4000aba4:	10002c26 	beq	r2,zero,4000ac58 <_ftello_r+0xd4>
4000aba8:	80800a17 	ldw	r2,40(r16)
4000abac:	10002c26 	beq	r2,zero,4000ac60 <_ftello_r+0xdc>
4000abb0:	80c0030b 	ldhu	r3,12(r16)
4000abb4:	1880020c 	andi	r2,r3,8
4000abb8:	1000221e 	bne	r2,zero,4000ac44 <_ftello_r+0xc0>
4000abbc:	1884000c 	andi	r2,r3,4096
4000abc0:	10001626 	beq	r2,zero,4000ac1c <_ftello_r+0x98>
4000abc4:	80801417 	ldw	r2,80(r16)
4000abc8:	1900010c 	andi	r4,r3,4
4000abcc:	20000b26 	beq	r4,zero,4000abfc <_ftello_r+0x78>
4000abd0:	81000117 	ldw	r4,4(r16)
4000abd4:	80c00c17 	ldw	r3,48(r16)
4000abd8:	1105c83a 	sub	r2,r2,r4
4000abdc:	18000226 	beq	r3,zero,4000abe8 <_ftello_r+0x64>
4000abe0:	80c00f17 	ldw	r3,60(r16)
4000abe4:	10c5c83a 	sub	r2,r2,r3
4000abe8:	dfc00217 	ldw	ra,8(sp)
4000abec:	dc400117 	ldw	r17,4(sp)
4000abf0:	dc000017 	ldw	r16,0(sp)
4000abf4:	dec00304 	addi	sp,sp,12
4000abf8:	f800283a 	ret
4000abfc:	18c0020c 	andi	r3,r3,8
4000ac00:	183ff926 	beq	r3,zero,4000abe8 <__alt_data_end+0xc000abe8>
4000ac04:	80c00017 	ldw	r3,0(r16)
4000ac08:	183ff726 	beq	r3,zero,4000abe8 <__alt_data_end+0xc000abe8>
4000ac0c:	81000417 	ldw	r4,16(r16)
4000ac10:	1907c83a 	sub	r3,r3,r4
4000ac14:	1885883a 	add	r2,r3,r2
4000ac18:	003ff306 	br	4000abe8 <__alt_data_end+0xc000abe8>
4000ac1c:	80800a17 	ldw	r2,40(r16)
4000ac20:	81400717 	ldw	r5,28(r16)
4000ac24:	01c00044 	movi	r7,1
4000ac28:	000d883a 	mov	r6,zero
4000ac2c:	8809883a 	mov	r4,r17
4000ac30:	103ee83a 	callr	r2
4000ac34:	00ffffc4 	movi	r3,-1
4000ac38:	10ffeb26 	beq	r2,r3,4000abe8 <__alt_data_end+0xc000abe8>
4000ac3c:	80c0030b 	ldhu	r3,12(r16)
4000ac40:	003fe106 	br	4000abc8 <__alt_data_end+0xc000abc8>
4000ac44:	800b883a 	mov	r5,r16
4000ac48:	8809883a 	mov	r4,r17
4000ac4c:	0009a780 	call	40009a78 <_fflush_r>
4000ac50:	80c0030b 	ldhu	r3,12(r16)
4000ac54:	003fd906 	br	4000abbc <__alt_data_end+0xc000abbc>
4000ac58:	0009e540 	call	40009e54 <__sinit>
4000ac5c:	003fd206 	br	4000aba8 <__alt_data_end+0xc000aba8>
4000ac60:	00800744 	movi	r2,29
4000ac64:	88800015 	stw	r2,0(r17)
4000ac68:	00bfffc4 	movi	r2,-1
4000ac6c:	003fde06 	br	4000abe8 <__alt_data_end+0xc000abe8>

4000ac70 <ftello>:
4000ac70:	009000b4 	movhi	r2,16386
4000ac74:	108af604 	addi	r2,r2,11224
4000ac78:	200b883a 	mov	r5,r4
4000ac7c:	11000017 	ldw	r4,0(r2)
4000ac80:	000ab841 	jmpi	4000ab84 <_ftello_r>

4000ac84 <_fwalk>:
4000ac84:	defff704 	addi	sp,sp,-36
4000ac88:	dd000415 	stw	r20,16(sp)
4000ac8c:	dfc00815 	stw	ra,32(sp)
4000ac90:	ddc00715 	stw	r23,28(sp)
4000ac94:	dd800615 	stw	r22,24(sp)
4000ac98:	dd400515 	stw	r21,20(sp)
4000ac9c:	dcc00315 	stw	r19,12(sp)
4000aca0:	dc800215 	stw	r18,8(sp)
4000aca4:	dc400115 	stw	r17,4(sp)
4000aca8:	dc000015 	stw	r16,0(sp)
4000acac:	2500b804 	addi	r20,r4,736
4000acb0:	a0002326 	beq	r20,zero,4000ad40 <_fwalk+0xbc>
4000acb4:	282b883a 	mov	r21,r5
4000acb8:	002f883a 	mov	r23,zero
4000acbc:	05800044 	movi	r22,1
4000acc0:	04ffffc4 	movi	r19,-1
4000acc4:	a4400117 	ldw	r17,4(r20)
4000acc8:	a4800217 	ldw	r18,8(r20)
4000accc:	8c7fffc4 	addi	r17,r17,-1
4000acd0:	88000d16 	blt	r17,zero,4000ad08 <_fwalk+0x84>
4000acd4:	94000304 	addi	r16,r18,12
4000acd8:	94800384 	addi	r18,r18,14
4000acdc:	8080000b 	ldhu	r2,0(r16)
4000ace0:	8c7fffc4 	addi	r17,r17,-1
4000ace4:	813ffd04 	addi	r4,r16,-12
4000ace8:	b080042e 	bgeu	r22,r2,4000acfc <_fwalk+0x78>
4000acec:	9080000f 	ldh	r2,0(r18)
4000acf0:	14c00226 	beq	r2,r19,4000acfc <_fwalk+0x78>
4000acf4:	a83ee83a 	callr	r21
4000acf8:	b8aeb03a 	or	r23,r23,r2
4000acfc:	84001a04 	addi	r16,r16,104
4000ad00:	94801a04 	addi	r18,r18,104
4000ad04:	8cfff51e 	bne	r17,r19,4000acdc <__alt_data_end+0xc000acdc>
4000ad08:	a5000017 	ldw	r20,0(r20)
4000ad0c:	a03fed1e 	bne	r20,zero,4000acc4 <__alt_data_end+0xc000acc4>
4000ad10:	b805883a 	mov	r2,r23
4000ad14:	dfc00817 	ldw	ra,32(sp)
4000ad18:	ddc00717 	ldw	r23,28(sp)
4000ad1c:	dd800617 	ldw	r22,24(sp)
4000ad20:	dd400517 	ldw	r21,20(sp)
4000ad24:	dd000417 	ldw	r20,16(sp)
4000ad28:	dcc00317 	ldw	r19,12(sp)
4000ad2c:	dc800217 	ldw	r18,8(sp)
4000ad30:	dc400117 	ldw	r17,4(sp)
4000ad34:	dc000017 	ldw	r16,0(sp)
4000ad38:	dec00904 	addi	sp,sp,36
4000ad3c:	f800283a 	ret
4000ad40:	002f883a 	mov	r23,zero
4000ad44:	003ff206 	br	4000ad10 <__alt_data_end+0xc000ad10>

4000ad48 <_fwalk_reent>:
4000ad48:	defff704 	addi	sp,sp,-36
4000ad4c:	dd000415 	stw	r20,16(sp)
4000ad50:	dfc00815 	stw	ra,32(sp)
4000ad54:	ddc00715 	stw	r23,28(sp)
4000ad58:	dd800615 	stw	r22,24(sp)
4000ad5c:	dd400515 	stw	r21,20(sp)
4000ad60:	dcc00315 	stw	r19,12(sp)
4000ad64:	dc800215 	stw	r18,8(sp)
4000ad68:	dc400115 	stw	r17,4(sp)
4000ad6c:	dc000015 	stw	r16,0(sp)
4000ad70:	2500b804 	addi	r20,r4,736
4000ad74:	a0002326 	beq	r20,zero,4000ae04 <_fwalk_reent+0xbc>
4000ad78:	282b883a 	mov	r21,r5
4000ad7c:	2027883a 	mov	r19,r4
4000ad80:	002f883a 	mov	r23,zero
4000ad84:	05800044 	movi	r22,1
4000ad88:	04bfffc4 	movi	r18,-1
4000ad8c:	a4400117 	ldw	r17,4(r20)
4000ad90:	a4000217 	ldw	r16,8(r20)
4000ad94:	8c7fffc4 	addi	r17,r17,-1
4000ad98:	88000c16 	blt	r17,zero,4000adcc <_fwalk_reent+0x84>
4000ad9c:	84000304 	addi	r16,r16,12
4000ada0:	8080000b 	ldhu	r2,0(r16)
4000ada4:	8c7fffc4 	addi	r17,r17,-1
4000ada8:	817ffd04 	addi	r5,r16,-12
4000adac:	b080052e 	bgeu	r22,r2,4000adc4 <_fwalk_reent+0x7c>
4000adb0:	8080008f 	ldh	r2,2(r16)
4000adb4:	9809883a 	mov	r4,r19
4000adb8:	14800226 	beq	r2,r18,4000adc4 <_fwalk_reent+0x7c>
4000adbc:	a83ee83a 	callr	r21
4000adc0:	b8aeb03a 	or	r23,r23,r2
4000adc4:	84001a04 	addi	r16,r16,104
4000adc8:	8cbff51e 	bne	r17,r18,4000ada0 <__alt_data_end+0xc000ada0>
4000adcc:	a5000017 	ldw	r20,0(r20)
4000add0:	a03fee1e 	bne	r20,zero,4000ad8c <__alt_data_end+0xc000ad8c>
4000add4:	b805883a 	mov	r2,r23
4000add8:	dfc00817 	ldw	ra,32(sp)
4000addc:	ddc00717 	ldw	r23,28(sp)
4000ade0:	dd800617 	ldw	r22,24(sp)
4000ade4:	dd400517 	ldw	r21,20(sp)
4000ade8:	dd000417 	ldw	r20,16(sp)
4000adec:	dcc00317 	ldw	r19,12(sp)
4000adf0:	dc800217 	ldw	r18,8(sp)
4000adf4:	dc400117 	ldw	r17,4(sp)
4000adf8:	dc000017 	ldw	r16,0(sp)
4000adfc:	dec00904 	addi	sp,sp,36
4000ae00:	f800283a 	ret
4000ae04:	002f883a 	mov	r23,zero
4000ae08:	003ff206 	br	4000add4 <__alt_data_end+0xc000add4>

4000ae0c <_fwrite_r>:
4000ae0c:	defff504 	addi	sp,sp,-44
4000ae10:	dc800815 	stw	r18,32(sp)
4000ae14:	39a5383a 	mul	r18,r7,r6
4000ae18:	d8800304 	addi	r2,sp,12
4000ae1c:	d8800015 	stw	r2,0(sp)
4000ae20:	00800044 	movi	r2,1
4000ae24:	dcc00915 	stw	r19,36(sp)
4000ae28:	dc400715 	stw	r17,28(sp)
4000ae2c:	dc000615 	stw	r16,24(sp)
4000ae30:	d9400315 	stw	r5,12(sp)
4000ae34:	dfc00a15 	stw	ra,40(sp)
4000ae38:	dc800415 	stw	r18,16(sp)
4000ae3c:	dc800215 	stw	r18,8(sp)
4000ae40:	d8800115 	stw	r2,4(sp)
4000ae44:	3027883a 	mov	r19,r6
4000ae48:	3821883a 	mov	r16,r7
4000ae4c:	2023883a 	mov	r17,r4
4000ae50:	d9400b17 	ldw	r5,44(sp)
4000ae54:	20000226 	beq	r4,zero,4000ae60 <_fwrite_r+0x54>
4000ae58:	20800e17 	ldw	r2,56(r4)
4000ae5c:	10001a26 	beq	r2,zero,4000aec8 <_fwrite_r+0xbc>
4000ae60:	2880030b 	ldhu	r2,12(r5)
4000ae64:	10c8000c 	andi	r3,r2,8192
4000ae68:	1800061e 	bne	r3,zero,4000ae84 <_fwrite_r+0x78>
4000ae6c:	29001917 	ldw	r4,100(r5)
4000ae70:	00f7ffc4 	movi	r3,-8193
4000ae74:	10880014 	ori	r2,r2,8192
4000ae78:	20c6703a 	and	r3,r4,r3
4000ae7c:	2880030d 	sth	r2,12(r5)
4000ae80:	28c01915 	stw	r3,100(r5)
4000ae84:	d80d883a 	mov	r6,sp
4000ae88:	8809883a 	mov	r4,r17
4000ae8c:	0010b6c0 	call	40010b6c <__sfvwrite_r>
4000ae90:	10000b26 	beq	r2,zero,4000aec0 <_fwrite_r+0xb4>
4000ae94:	d9000217 	ldw	r4,8(sp)
4000ae98:	980b883a 	mov	r5,r19
4000ae9c:	9109c83a 	sub	r4,r18,r4
4000aea0:	0007a740 	call	40007a74 <__udivsi3>
4000aea4:	dfc00a17 	ldw	ra,40(sp)
4000aea8:	dcc00917 	ldw	r19,36(sp)
4000aeac:	dc800817 	ldw	r18,32(sp)
4000aeb0:	dc400717 	ldw	r17,28(sp)
4000aeb4:	dc000617 	ldw	r16,24(sp)
4000aeb8:	dec00b04 	addi	sp,sp,44
4000aebc:	f800283a 	ret
4000aec0:	8005883a 	mov	r2,r16
4000aec4:	003ff706 	br	4000aea4 <__alt_data_end+0xc000aea4>
4000aec8:	d9400515 	stw	r5,20(sp)
4000aecc:	0009e540 	call	40009e54 <__sinit>
4000aed0:	d9400517 	ldw	r5,20(sp)
4000aed4:	003fe206 	br	4000ae60 <__alt_data_end+0xc000ae60>

4000aed8 <fwrite>:
4000aed8:	defffe04 	addi	sp,sp,-8
4000aedc:	009000b4 	movhi	r2,16386
4000aee0:	d9c00015 	stw	r7,0(sp)
4000aee4:	108af604 	addi	r2,r2,11224
4000aee8:	300f883a 	mov	r7,r6
4000aeec:	280d883a 	mov	r6,r5
4000aef0:	200b883a 	mov	r5,r4
4000aef4:	11000017 	ldw	r4,0(r2)
4000aef8:	dfc00115 	stw	ra,4(sp)
4000aefc:	000ae0c0 	call	4000ae0c <_fwrite_r>
4000af00:	dfc00117 	ldw	ra,4(sp)
4000af04:	dec00204 	addi	sp,sp,8
4000af08:	f800283a 	ret

4000af0c <__smakebuf_r>:
4000af0c:	2880030b 	ldhu	r2,12(r5)
4000af10:	10c0008c 	andi	r3,r2,2
4000af14:	1800411e 	bne	r3,zero,4000b01c <__smakebuf_r+0x110>
4000af18:	deffec04 	addi	sp,sp,-80
4000af1c:	dc000f15 	stw	r16,60(sp)
4000af20:	2821883a 	mov	r16,r5
4000af24:	2940038f 	ldh	r5,14(r5)
4000af28:	dc401015 	stw	r17,64(sp)
4000af2c:	dfc01315 	stw	ra,76(sp)
4000af30:	dcc01215 	stw	r19,72(sp)
4000af34:	dc801115 	stw	r18,68(sp)
4000af38:	2023883a 	mov	r17,r4
4000af3c:	28001c16 	blt	r5,zero,4000afb0 <__smakebuf_r+0xa4>
4000af40:	d80d883a 	mov	r6,sp
4000af44:	000ab100 	call	4000ab10 <_fstat_r>
4000af48:	10001816 	blt	r2,zero,4000afac <__smakebuf_r+0xa0>
4000af4c:	d8800117 	ldw	r2,4(sp)
4000af50:	00e00014 	movui	r3,32768
4000af54:	10bc000c 	andi	r2,r2,61440
4000af58:	14c80020 	cmpeqi	r19,r2,8192
4000af5c:	10c03726 	beq	r2,r3,4000b03c <__smakebuf_r+0x130>
4000af60:	80c0030b 	ldhu	r3,12(r16)
4000af64:	18c20014 	ori	r3,r3,2048
4000af68:	80c0030d 	sth	r3,12(r16)
4000af6c:	00c80004 	movi	r3,8192
4000af70:	10c0521e 	bne	r2,r3,4000b0bc <__smakebuf_r+0x1b0>
4000af74:	8140038f 	ldh	r5,14(r16)
4000af78:	8809883a 	mov	r4,r17
4000af7c:	00110280 	call	40011028 <_isatty_r>
4000af80:	10004c26 	beq	r2,zero,4000b0b4 <__smakebuf_r+0x1a8>
4000af84:	8080030b 	ldhu	r2,12(r16)
4000af88:	80c010c4 	addi	r3,r16,67
4000af8c:	80c00015 	stw	r3,0(r16)
4000af90:	10800054 	ori	r2,r2,1
4000af94:	8080030d 	sth	r2,12(r16)
4000af98:	00800044 	movi	r2,1
4000af9c:	80c00415 	stw	r3,16(r16)
4000afa0:	80800515 	stw	r2,20(r16)
4000afa4:	04810004 	movi	r18,1024
4000afa8:	00000706 	br	4000afc8 <__smakebuf_r+0xbc>
4000afac:	8080030b 	ldhu	r2,12(r16)
4000afb0:	10c0200c 	andi	r3,r2,128
4000afb4:	18001f1e 	bne	r3,zero,4000b034 <__smakebuf_r+0x128>
4000afb8:	04810004 	movi	r18,1024
4000afbc:	10820014 	ori	r2,r2,2048
4000afc0:	8080030d 	sth	r2,12(r16)
4000afc4:	0027883a 	mov	r19,zero
4000afc8:	900b883a 	mov	r5,r18
4000afcc:	8809883a 	mov	r4,r17
4000afd0:	000b0f00 	call	4000b0f0 <_malloc_r>
4000afd4:	10002c26 	beq	r2,zero,4000b088 <__smakebuf_r+0x17c>
4000afd8:	80c0030b 	ldhu	r3,12(r16)
4000afdc:	01100074 	movhi	r4,16385
4000afe0:	2126c304 	addi	r4,r4,-25844
4000afe4:	89000f15 	stw	r4,60(r17)
4000afe8:	18c02014 	ori	r3,r3,128
4000afec:	80c0030d 	sth	r3,12(r16)
4000aff0:	80800015 	stw	r2,0(r16)
4000aff4:	80800415 	stw	r2,16(r16)
4000aff8:	84800515 	stw	r18,20(r16)
4000affc:	98001a1e 	bne	r19,zero,4000b068 <__smakebuf_r+0x15c>
4000b000:	dfc01317 	ldw	ra,76(sp)
4000b004:	dcc01217 	ldw	r19,72(sp)
4000b008:	dc801117 	ldw	r18,68(sp)
4000b00c:	dc401017 	ldw	r17,64(sp)
4000b010:	dc000f17 	ldw	r16,60(sp)
4000b014:	dec01404 	addi	sp,sp,80
4000b018:	f800283a 	ret
4000b01c:	288010c4 	addi	r2,r5,67
4000b020:	28800015 	stw	r2,0(r5)
4000b024:	28800415 	stw	r2,16(r5)
4000b028:	00800044 	movi	r2,1
4000b02c:	28800515 	stw	r2,20(r5)
4000b030:	f800283a 	ret
4000b034:	04801004 	movi	r18,64
4000b038:	003fe006 	br	4000afbc <__alt_data_end+0xc000afbc>
4000b03c:	81000a17 	ldw	r4,40(r16)
4000b040:	00d00074 	movhi	r3,16385
4000b044:	18f0c404 	addi	r3,r3,-15600
4000b048:	20ffc51e 	bne	r4,r3,4000af60 <__alt_data_end+0xc000af60>
4000b04c:	8080030b 	ldhu	r2,12(r16)
4000b050:	04810004 	movi	r18,1024
4000b054:	84801315 	stw	r18,76(r16)
4000b058:	1484b03a 	or	r2,r2,r18
4000b05c:	8080030d 	sth	r2,12(r16)
4000b060:	0027883a 	mov	r19,zero
4000b064:	003fd806 	br	4000afc8 <__alt_data_end+0xc000afc8>
4000b068:	8140038f 	ldh	r5,14(r16)
4000b06c:	8809883a 	mov	r4,r17
4000b070:	00110280 	call	40011028 <_isatty_r>
4000b074:	103fe226 	beq	r2,zero,4000b000 <__alt_data_end+0xc000b000>
4000b078:	8080030b 	ldhu	r2,12(r16)
4000b07c:	10800054 	ori	r2,r2,1
4000b080:	8080030d 	sth	r2,12(r16)
4000b084:	003fde06 	br	4000b000 <__alt_data_end+0xc000b000>
4000b088:	8080030b 	ldhu	r2,12(r16)
4000b08c:	10c0800c 	andi	r3,r2,512
4000b090:	183fdb1e 	bne	r3,zero,4000b000 <__alt_data_end+0xc000b000>
4000b094:	10800094 	ori	r2,r2,2
4000b098:	80c010c4 	addi	r3,r16,67
4000b09c:	8080030d 	sth	r2,12(r16)
4000b0a0:	00800044 	movi	r2,1
4000b0a4:	80c00015 	stw	r3,0(r16)
4000b0a8:	80c00415 	stw	r3,16(r16)
4000b0ac:	80800515 	stw	r2,20(r16)
4000b0b0:	003fd306 	br	4000b000 <__alt_data_end+0xc000b000>
4000b0b4:	04810004 	movi	r18,1024
4000b0b8:	003fc306 	br	4000afc8 <__alt_data_end+0xc000afc8>
4000b0bc:	0027883a 	mov	r19,zero
4000b0c0:	04810004 	movi	r18,1024
4000b0c4:	003fc006 	br	4000afc8 <__alt_data_end+0xc000afc8>

4000b0c8 <malloc>:
4000b0c8:	009000b4 	movhi	r2,16386
4000b0cc:	108af604 	addi	r2,r2,11224
4000b0d0:	200b883a 	mov	r5,r4
4000b0d4:	11000017 	ldw	r4,0(r2)
4000b0d8:	000b0f01 	jmpi	4000b0f0 <_malloc_r>

4000b0dc <free>:
4000b0dc:	009000b4 	movhi	r2,16386
4000b0e0:	108af604 	addi	r2,r2,11224
4000b0e4:	200b883a 	mov	r5,r4
4000b0e8:	11000017 	ldw	r4,0(r2)
4000b0ec:	000a3801 	jmpi	4000a380 <_free_r>

4000b0f0 <_malloc_r>:
4000b0f0:	defff504 	addi	sp,sp,-44
4000b0f4:	dc800315 	stw	r18,12(sp)
4000b0f8:	dfc00a15 	stw	ra,40(sp)
4000b0fc:	df000915 	stw	fp,36(sp)
4000b100:	ddc00815 	stw	r23,32(sp)
4000b104:	dd800715 	stw	r22,28(sp)
4000b108:	dd400615 	stw	r21,24(sp)
4000b10c:	dd000515 	stw	r20,20(sp)
4000b110:	dcc00415 	stw	r19,16(sp)
4000b114:	dc400215 	stw	r17,8(sp)
4000b118:	dc000115 	stw	r16,4(sp)
4000b11c:	288002c4 	addi	r2,r5,11
4000b120:	00c00584 	movi	r3,22
4000b124:	2025883a 	mov	r18,r4
4000b128:	18807f2e 	bgeu	r3,r2,4000b328 <_malloc_r+0x238>
4000b12c:	047ffe04 	movi	r17,-8
4000b130:	1462703a 	and	r17,r2,r17
4000b134:	8800a316 	blt	r17,zero,4000b3c4 <_malloc_r+0x2d4>
4000b138:	8940a236 	bltu	r17,r5,4000b3c4 <_malloc_r+0x2d4>
4000b13c:	00161800 	call	40016180 <__malloc_lock>
4000b140:	00807dc4 	movi	r2,503
4000b144:	1441e92e 	bgeu	r2,r17,4000b8ec <_malloc_r+0x7fc>
4000b148:	8804d27a 	srli	r2,r17,9
4000b14c:	1000a126 	beq	r2,zero,4000b3d4 <_malloc_r+0x2e4>
4000b150:	00c00104 	movi	r3,4
4000b154:	18811e36 	bltu	r3,r2,4000b5d0 <_malloc_r+0x4e0>
4000b158:	8804d1ba 	srli	r2,r17,6
4000b15c:	12000e44 	addi	r8,r2,57
4000b160:	11c00e04 	addi	r7,r2,56
4000b164:	4209883a 	add	r4,r8,r8
4000b168:	04d000b4 	movhi	r19,16386
4000b16c:	2109883a 	add	r4,r4,r4
4000b170:	9cc53e04 	addi	r19,r19,5368
4000b174:	2109883a 	add	r4,r4,r4
4000b178:	9909883a 	add	r4,r19,r4
4000b17c:	24000117 	ldw	r16,4(r4)
4000b180:	213ffe04 	addi	r4,r4,-8
4000b184:	24009726 	beq	r4,r16,4000b3e4 <_malloc_r+0x2f4>
4000b188:	80800117 	ldw	r2,4(r16)
4000b18c:	01bfff04 	movi	r6,-4
4000b190:	014003c4 	movi	r5,15
4000b194:	1184703a 	and	r2,r2,r6
4000b198:	1447c83a 	sub	r3,r2,r17
4000b19c:	28c00716 	blt	r5,r3,4000b1bc <_malloc_r+0xcc>
4000b1a0:	1800920e 	bge	r3,zero,4000b3ec <_malloc_r+0x2fc>
4000b1a4:	84000317 	ldw	r16,12(r16)
4000b1a8:	24008e26 	beq	r4,r16,4000b3e4 <_malloc_r+0x2f4>
4000b1ac:	80800117 	ldw	r2,4(r16)
4000b1b0:	1184703a 	and	r2,r2,r6
4000b1b4:	1447c83a 	sub	r3,r2,r17
4000b1b8:	28fff90e 	bge	r5,r3,4000b1a0 <__alt_data_end+0xc000b1a0>
4000b1bc:	3809883a 	mov	r4,r7
4000b1c0:	019000b4 	movhi	r6,16386
4000b1c4:	9c000417 	ldw	r16,16(r19)
4000b1c8:	31853e04 	addi	r6,r6,5368
4000b1cc:	32000204 	addi	r8,r6,8
4000b1d0:	82013426 	beq	r16,r8,4000b6a4 <_malloc_r+0x5b4>
4000b1d4:	80c00117 	ldw	r3,4(r16)
4000b1d8:	00bfff04 	movi	r2,-4
4000b1dc:	188e703a 	and	r7,r3,r2
4000b1e0:	3c45c83a 	sub	r2,r7,r17
4000b1e4:	00c003c4 	movi	r3,15
4000b1e8:	18811f16 	blt	r3,r2,4000b668 <_malloc_r+0x578>
4000b1ec:	32000515 	stw	r8,20(r6)
4000b1f0:	32000415 	stw	r8,16(r6)
4000b1f4:	10007f0e 	bge	r2,zero,4000b3f4 <_malloc_r+0x304>
4000b1f8:	00807fc4 	movi	r2,511
4000b1fc:	11c0fd36 	bltu	r2,r7,4000b5f4 <_malloc_r+0x504>
4000b200:	3806d0fa 	srli	r3,r7,3
4000b204:	01c00044 	movi	r7,1
4000b208:	30800117 	ldw	r2,4(r6)
4000b20c:	19400044 	addi	r5,r3,1
4000b210:	294b883a 	add	r5,r5,r5
4000b214:	1807d0ba 	srai	r3,r3,2
4000b218:	294b883a 	add	r5,r5,r5
4000b21c:	294b883a 	add	r5,r5,r5
4000b220:	298b883a 	add	r5,r5,r6
4000b224:	38c6983a 	sll	r3,r7,r3
4000b228:	29c00017 	ldw	r7,0(r5)
4000b22c:	2a7ffe04 	addi	r9,r5,-8
4000b230:	1886b03a 	or	r3,r3,r2
4000b234:	82400315 	stw	r9,12(r16)
4000b238:	81c00215 	stw	r7,8(r16)
4000b23c:	30c00115 	stw	r3,4(r6)
4000b240:	2c000015 	stw	r16,0(r5)
4000b244:	3c000315 	stw	r16,12(r7)
4000b248:	2005d0ba 	srai	r2,r4,2
4000b24c:	01400044 	movi	r5,1
4000b250:	288a983a 	sll	r5,r5,r2
4000b254:	19406f36 	bltu	r3,r5,4000b414 <_malloc_r+0x324>
4000b258:	28c4703a 	and	r2,r5,r3
4000b25c:	10000a1e 	bne	r2,zero,4000b288 <_malloc_r+0x198>
4000b260:	00bfff04 	movi	r2,-4
4000b264:	294b883a 	add	r5,r5,r5
4000b268:	2088703a 	and	r4,r4,r2
4000b26c:	28c4703a 	and	r2,r5,r3
4000b270:	21000104 	addi	r4,r4,4
4000b274:	1000041e 	bne	r2,zero,4000b288 <_malloc_r+0x198>
4000b278:	294b883a 	add	r5,r5,r5
4000b27c:	28c4703a 	and	r2,r5,r3
4000b280:	21000104 	addi	r4,r4,4
4000b284:	103ffc26 	beq	r2,zero,4000b278 <__alt_data_end+0xc000b278>
4000b288:	02bfff04 	movi	r10,-4
4000b28c:	024003c4 	movi	r9,15
4000b290:	21800044 	addi	r6,r4,1
4000b294:	318d883a 	add	r6,r6,r6
4000b298:	318d883a 	add	r6,r6,r6
4000b29c:	318d883a 	add	r6,r6,r6
4000b2a0:	998d883a 	add	r6,r19,r6
4000b2a4:	333ffe04 	addi	r12,r6,-8
4000b2a8:	2017883a 	mov	r11,r4
4000b2ac:	31800104 	addi	r6,r6,4
4000b2b0:	34000017 	ldw	r16,0(r6)
4000b2b4:	31fffd04 	addi	r7,r6,-12
4000b2b8:	81c0041e 	bne	r16,r7,4000b2cc <_malloc_r+0x1dc>
4000b2bc:	0000fb06 	br	4000b6ac <_malloc_r+0x5bc>
4000b2c0:	1801030e 	bge	r3,zero,4000b6d0 <_malloc_r+0x5e0>
4000b2c4:	84000317 	ldw	r16,12(r16)
4000b2c8:	81c0f826 	beq	r16,r7,4000b6ac <_malloc_r+0x5bc>
4000b2cc:	80800117 	ldw	r2,4(r16)
4000b2d0:	1284703a 	and	r2,r2,r10
4000b2d4:	1447c83a 	sub	r3,r2,r17
4000b2d8:	48fff90e 	bge	r9,r3,4000b2c0 <__alt_data_end+0xc000b2c0>
4000b2dc:	80800317 	ldw	r2,12(r16)
4000b2e0:	81000217 	ldw	r4,8(r16)
4000b2e4:	89400054 	ori	r5,r17,1
4000b2e8:	81400115 	stw	r5,4(r16)
4000b2ec:	20800315 	stw	r2,12(r4)
4000b2f0:	11000215 	stw	r4,8(r2)
4000b2f4:	8463883a 	add	r17,r16,r17
4000b2f8:	9c400515 	stw	r17,20(r19)
4000b2fc:	9c400415 	stw	r17,16(r19)
4000b300:	18800054 	ori	r2,r3,1
4000b304:	88800115 	stw	r2,4(r17)
4000b308:	8a000315 	stw	r8,12(r17)
4000b30c:	8a000215 	stw	r8,8(r17)
4000b310:	88e3883a 	add	r17,r17,r3
4000b314:	88c00015 	stw	r3,0(r17)
4000b318:	9009883a 	mov	r4,r18
4000b31c:	00161840 	call	40016184 <__malloc_unlock>
4000b320:	80800204 	addi	r2,r16,8
4000b324:	00001b06 	br	4000b394 <_malloc_r+0x2a4>
4000b328:	04400404 	movi	r17,16
4000b32c:	89402536 	bltu	r17,r5,4000b3c4 <_malloc_r+0x2d4>
4000b330:	00161800 	call	40016180 <__malloc_lock>
4000b334:	00800184 	movi	r2,6
4000b338:	01000084 	movi	r4,2
4000b33c:	04d000b4 	movhi	r19,16386
4000b340:	1085883a 	add	r2,r2,r2
4000b344:	9cc53e04 	addi	r19,r19,5368
4000b348:	1085883a 	add	r2,r2,r2
4000b34c:	9885883a 	add	r2,r19,r2
4000b350:	14000117 	ldw	r16,4(r2)
4000b354:	10fffe04 	addi	r3,r2,-8
4000b358:	80c0d926 	beq	r16,r3,4000b6c0 <_malloc_r+0x5d0>
4000b35c:	80c00117 	ldw	r3,4(r16)
4000b360:	81000317 	ldw	r4,12(r16)
4000b364:	00bfff04 	movi	r2,-4
4000b368:	1884703a 	and	r2,r3,r2
4000b36c:	81400217 	ldw	r5,8(r16)
4000b370:	8085883a 	add	r2,r16,r2
4000b374:	10c00117 	ldw	r3,4(r2)
4000b378:	29000315 	stw	r4,12(r5)
4000b37c:	21400215 	stw	r5,8(r4)
4000b380:	18c00054 	ori	r3,r3,1
4000b384:	10c00115 	stw	r3,4(r2)
4000b388:	9009883a 	mov	r4,r18
4000b38c:	00161840 	call	40016184 <__malloc_unlock>
4000b390:	80800204 	addi	r2,r16,8
4000b394:	dfc00a17 	ldw	ra,40(sp)
4000b398:	df000917 	ldw	fp,36(sp)
4000b39c:	ddc00817 	ldw	r23,32(sp)
4000b3a0:	dd800717 	ldw	r22,28(sp)
4000b3a4:	dd400617 	ldw	r21,24(sp)
4000b3a8:	dd000517 	ldw	r20,20(sp)
4000b3ac:	dcc00417 	ldw	r19,16(sp)
4000b3b0:	dc800317 	ldw	r18,12(sp)
4000b3b4:	dc400217 	ldw	r17,8(sp)
4000b3b8:	dc000117 	ldw	r16,4(sp)
4000b3bc:	dec00b04 	addi	sp,sp,44
4000b3c0:	f800283a 	ret
4000b3c4:	00800304 	movi	r2,12
4000b3c8:	90800015 	stw	r2,0(r18)
4000b3cc:	0005883a 	mov	r2,zero
4000b3d0:	003ff006 	br	4000b394 <__alt_data_end+0xc000b394>
4000b3d4:	01002004 	movi	r4,128
4000b3d8:	02001004 	movi	r8,64
4000b3dc:	01c00fc4 	movi	r7,63
4000b3e0:	003f6106 	br	4000b168 <__alt_data_end+0xc000b168>
4000b3e4:	4009883a 	mov	r4,r8
4000b3e8:	003f7506 	br	4000b1c0 <__alt_data_end+0xc000b1c0>
4000b3ec:	81000317 	ldw	r4,12(r16)
4000b3f0:	003fde06 	br	4000b36c <__alt_data_end+0xc000b36c>
4000b3f4:	81c5883a 	add	r2,r16,r7
4000b3f8:	11400117 	ldw	r5,4(r2)
4000b3fc:	9009883a 	mov	r4,r18
4000b400:	29400054 	ori	r5,r5,1
4000b404:	11400115 	stw	r5,4(r2)
4000b408:	00161840 	call	40016184 <__malloc_unlock>
4000b40c:	80800204 	addi	r2,r16,8
4000b410:	003fe006 	br	4000b394 <__alt_data_end+0xc000b394>
4000b414:	9c000217 	ldw	r16,8(r19)
4000b418:	00bfff04 	movi	r2,-4
4000b41c:	85800117 	ldw	r22,4(r16)
4000b420:	b0ac703a 	and	r22,r22,r2
4000b424:	b4400336 	bltu	r22,r17,4000b434 <_malloc_r+0x344>
4000b428:	b445c83a 	sub	r2,r22,r17
4000b42c:	00c003c4 	movi	r3,15
4000b430:	18805d16 	blt	r3,r2,4000b5a8 <_malloc_r+0x4b8>
4000b434:	05d000b4 	movhi	r23,16386
4000b438:	009000b4 	movhi	r2,16386
4000b43c:	109a9704 	addi	r2,r2,27228
4000b440:	bdcaf704 	addi	r23,r23,11228
4000b444:	15400017 	ldw	r21,0(r2)
4000b448:	b8c00017 	ldw	r3,0(r23)
4000b44c:	00bfffc4 	movi	r2,-1
4000b450:	858d883a 	add	r6,r16,r22
4000b454:	8d6b883a 	add	r21,r17,r21
4000b458:	1880ea26 	beq	r3,r2,4000b804 <_malloc_r+0x714>
4000b45c:	ad4403c4 	addi	r21,r21,4111
4000b460:	00bc0004 	movi	r2,-4096
4000b464:	a8aa703a 	and	r21,r21,r2
4000b468:	a80b883a 	mov	r5,r21
4000b46c:	9009883a 	mov	r4,r18
4000b470:	d9800015 	stw	r6,0(sp)
4000b474:	000c0280 	call	4000c028 <_sbrk_r>
4000b478:	1029883a 	mov	r20,r2
4000b47c:	00bfffc4 	movi	r2,-1
4000b480:	d9800017 	ldw	r6,0(sp)
4000b484:	a080e826 	beq	r20,r2,4000b828 <_malloc_r+0x738>
4000b488:	a180a636 	bltu	r20,r6,4000b724 <_malloc_r+0x634>
4000b48c:	071000f4 	movhi	fp,16387
4000b490:	e72b1004 	addi	fp,fp,-21440
4000b494:	e0800017 	ldw	r2,0(fp)
4000b498:	a887883a 	add	r3,r21,r2
4000b49c:	e0c00015 	stw	r3,0(fp)
4000b4a0:	3500e626 	beq	r6,r20,4000b83c <_malloc_r+0x74c>
4000b4a4:	b9000017 	ldw	r4,0(r23)
4000b4a8:	00bfffc4 	movi	r2,-1
4000b4ac:	2080ee26 	beq	r4,r2,4000b868 <_malloc_r+0x778>
4000b4b0:	a185c83a 	sub	r2,r20,r6
4000b4b4:	10c5883a 	add	r2,r2,r3
4000b4b8:	e0800015 	stw	r2,0(fp)
4000b4bc:	a0c001cc 	andi	r3,r20,7
4000b4c0:	1800bc26 	beq	r3,zero,4000b7b4 <_malloc_r+0x6c4>
4000b4c4:	a0e9c83a 	sub	r20,r20,r3
4000b4c8:	00840204 	movi	r2,4104
4000b4cc:	a5000204 	addi	r20,r20,8
4000b4d0:	10c7c83a 	sub	r3,r2,r3
4000b4d4:	a545883a 	add	r2,r20,r21
4000b4d8:	1083ffcc 	andi	r2,r2,4095
4000b4dc:	18abc83a 	sub	r21,r3,r2
4000b4e0:	a80b883a 	mov	r5,r21
4000b4e4:	9009883a 	mov	r4,r18
4000b4e8:	000c0280 	call	4000c028 <_sbrk_r>
4000b4ec:	00ffffc4 	movi	r3,-1
4000b4f0:	10c0e126 	beq	r2,r3,4000b878 <_malloc_r+0x788>
4000b4f4:	1505c83a 	sub	r2,r2,r20
4000b4f8:	1545883a 	add	r2,r2,r21
4000b4fc:	10800054 	ori	r2,r2,1
4000b500:	e0c00017 	ldw	r3,0(fp)
4000b504:	9d000215 	stw	r20,8(r19)
4000b508:	a0800115 	stw	r2,4(r20)
4000b50c:	a8c7883a 	add	r3,r21,r3
4000b510:	e0c00015 	stw	r3,0(fp)
4000b514:	84c00e26 	beq	r16,r19,4000b550 <_malloc_r+0x460>
4000b518:	018003c4 	movi	r6,15
4000b51c:	3580a72e 	bgeu	r6,r22,4000b7bc <_malloc_r+0x6cc>
4000b520:	81400117 	ldw	r5,4(r16)
4000b524:	013ffe04 	movi	r4,-8
4000b528:	b0bffd04 	addi	r2,r22,-12
4000b52c:	1104703a 	and	r2,r2,r4
4000b530:	2900004c 	andi	r4,r5,1
4000b534:	2088b03a 	or	r4,r4,r2
4000b538:	81000115 	stw	r4,4(r16)
4000b53c:	01400144 	movi	r5,5
4000b540:	8089883a 	add	r4,r16,r2
4000b544:	21400115 	stw	r5,4(r4)
4000b548:	21400215 	stw	r5,8(r4)
4000b54c:	3080cd36 	bltu	r6,r2,4000b884 <_malloc_r+0x794>
4000b550:	009000b4 	movhi	r2,16386
4000b554:	109a9604 	addi	r2,r2,27224
4000b558:	11000017 	ldw	r4,0(r2)
4000b55c:	20c0012e 	bgeu	r4,r3,4000b564 <_malloc_r+0x474>
4000b560:	10c00015 	stw	r3,0(r2)
4000b564:	009000b4 	movhi	r2,16386
4000b568:	109a9504 	addi	r2,r2,27220
4000b56c:	11000017 	ldw	r4,0(r2)
4000b570:	9c000217 	ldw	r16,8(r19)
4000b574:	20c0012e 	bgeu	r4,r3,4000b57c <_malloc_r+0x48c>
4000b578:	10c00015 	stw	r3,0(r2)
4000b57c:	80c00117 	ldw	r3,4(r16)
4000b580:	00bfff04 	movi	r2,-4
4000b584:	1886703a 	and	r3,r3,r2
4000b588:	1c45c83a 	sub	r2,r3,r17
4000b58c:	1c400236 	bltu	r3,r17,4000b598 <_malloc_r+0x4a8>
4000b590:	00c003c4 	movi	r3,15
4000b594:	18800416 	blt	r3,r2,4000b5a8 <_malloc_r+0x4b8>
4000b598:	9009883a 	mov	r4,r18
4000b59c:	00161840 	call	40016184 <__malloc_unlock>
4000b5a0:	0005883a 	mov	r2,zero
4000b5a4:	003f7b06 	br	4000b394 <__alt_data_end+0xc000b394>
4000b5a8:	88c00054 	ori	r3,r17,1
4000b5ac:	80c00115 	stw	r3,4(r16)
4000b5b0:	8463883a 	add	r17,r16,r17
4000b5b4:	10800054 	ori	r2,r2,1
4000b5b8:	9c400215 	stw	r17,8(r19)
4000b5bc:	88800115 	stw	r2,4(r17)
4000b5c0:	9009883a 	mov	r4,r18
4000b5c4:	00161840 	call	40016184 <__malloc_unlock>
4000b5c8:	80800204 	addi	r2,r16,8
4000b5cc:	003f7106 	br	4000b394 <__alt_data_end+0xc000b394>
4000b5d0:	00c00504 	movi	r3,20
4000b5d4:	18804a2e 	bgeu	r3,r2,4000b700 <_malloc_r+0x610>
4000b5d8:	00c01504 	movi	r3,84
4000b5dc:	18806e36 	bltu	r3,r2,4000b798 <_malloc_r+0x6a8>
4000b5e0:	8804d33a 	srli	r2,r17,12
4000b5e4:	12001bc4 	addi	r8,r2,111
4000b5e8:	11c01b84 	addi	r7,r2,110
4000b5ec:	4209883a 	add	r4,r8,r8
4000b5f0:	003edd06 	br	4000b168 <__alt_data_end+0xc000b168>
4000b5f4:	3804d27a 	srli	r2,r7,9
4000b5f8:	00c00104 	movi	r3,4
4000b5fc:	1880442e 	bgeu	r3,r2,4000b710 <_malloc_r+0x620>
4000b600:	00c00504 	movi	r3,20
4000b604:	18808136 	bltu	r3,r2,4000b80c <_malloc_r+0x71c>
4000b608:	11401704 	addi	r5,r2,92
4000b60c:	10c016c4 	addi	r3,r2,91
4000b610:	294b883a 	add	r5,r5,r5
4000b614:	294b883a 	add	r5,r5,r5
4000b618:	294b883a 	add	r5,r5,r5
4000b61c:	994b883a 	add	r5,r19,r5
4000b620:	28800017 	ldw	r2,0(r5)
4000b624:	019000b4 	movhi	r6,16386
4000b628:	297ffe04 	addi	r5,r5,-8
4000b62c:	31853e04 	addi	r6,r6,5368
4000b630:	28806526 	beq	r5,r2,4000b7c8 <_malloc_r+0x6d8>
4000b634:	01bfff04 	movi	r6,-4
4000b638:	10c00117 	ldw	r3,4(r2)
4000b63c:	1986703a 	and	r3,r3,r6
4000b640:	38c0022e 	bgeu	r7,r3,4000b64c <_malloc_r+0x55c>
4000b644:	10800217 	ldw	r2,8(r2)
4000b648:	28bffb1e 	bne	r5,r2,4000b638 <__alt_data_end+0xc000b638>
4000b64c:	11400317 	ldw	r5,12(r2)
4000b650:	98c00117 	ldw	r3,4(r19)
4000b654:	81400315 	stw	r5,12(r16)
4000b658:	80800215 	stw	r2,8(r16)
4000b65c:	2c000215 	stw	r16,8(r5)
4000b660:	14000315 	stw	r16,12(r2)
4000b664:	003ef806 	br	4000b248 <__alt_data_end+0xc000b248>
4000b668:	88c00054 	ori	r3,r17,1
4000b66c:	80c00115 	stw	r3,4(r16)
4000b670:	8463883a 	add	r17,r16,r17
4000b674:	34400515 	stw	r17,20(r6)
4000b678:	34400415 	stw	r17,16(r6)
4000b67c:	10c00054 	ori	r3,r2,1
4000b680:	8a000315 	stw	r8,12(r17)
4000b684:	8a000215 	stw	r8,8(r17)
4000b688:	88c00115 	stw	r3,4(r17)
4000b68c:	88a3883a 	add	r17,r17,r2
4000b690:	88800015 	stw	r2,0(r17)
4000b694:	9009883a 	mov	r4,r18
4000b698:	00161840 	call	40016184 <__malloc_unlock>
4000b69c:	80800204 	addi	r2,r16,8
4000b6a0:	003f3c06 	br	4000b394 <__alt_data_end+0xc000b394>
4000b6a4:	30c00117 	ldw	r3,4(r6)
4000b6a8:	003ee706 	br	4000b248 <__alt_data_end+0xc000b248>
4000b6ac:	5ac00044 	addi	r11,r11,1
4000b6b0:	588000cc 	andi	r2,r11,3
4000b6b4:	31800204 	addi	r6,r6,8
4000b6b8:	103efd1e 	bne	r2,zero,4000b2b0 <__alt_data_end+0xc000b2b0>
4000b6bc:	00002406 	br	4000b750 <_malloc_r+0x660>
4000b6c0:	14000317 	ldw	r16,12(r2)
4000b6c4:	143f251e 	bne	r2,r16,4000b35c <__alt_data_end+0xc000b35c>
4000b6c8:	21000084 	addi	r4,r4,2
4000b6cc:	003ebc06 	br	4000b1c0 <__alt_data_end+0xc000b1c0>
4000b6d0:	8085883a 	add	r2,r16,r2
4000b6d4:	10c00117 	ldw	r3,4(r2)
4000b6d8:	81000317 	ldw	r4,12(r16)
4000b6dc:	81400217 	ldw	r5,8(r16)
4000b6e0:	18c00054 	ori	r3,r3,1
4000b6e4:	10c00115 	stw	r3,4(r2)
4000b6e8:	29000315 	stw	r4,12(r5)
4000b6ec:	21400215 	stw	r5,8(r4)
4000b6f0:	9009883a 	mov	r4,r18
4000b6f4:	00161840 	call	40016184 <__malloc_unlock>
4000b6f8:	80800204 	addi	r2,r16,8
4000b6fc:	003f2506 	br	4000b394 <__alt_data_end+0xc000b394>
4000b700:	12001704 	addi	r8,r2,92
4000b704:	11c016c4 	addi	r7,r2,91
4000b708:	4209883a 	add	r4,r8,r8
4000b70c:	003e9606 	br	4000b168 <__alt_data_end+0xc000b168>
4000b710:	3804d1ba 	srli	r2,r7,6
4000b714:	11400e44 	addi	r5,r2,57
4000b718:	10c00e04 	addi	r3,r2,56
4000b71c:	294b883a 	add	r5,r5,r5
4000b720:	003fbc06 	br	4000b614 <__alt_data_end+0xc000b614>
4000b724:	84ff5926 	beq	r16,r19,4000b48c <__alt_data_end+0xc000b48c>
4000b728:	009000b4 	movhi	r2,16386
4000b72c:	10853e04 	addi	r2,r2,5368
4000b730:	14000217 	ldw	r16,8(r2)
4000b734:	00bfff04 	movi	r2,-4
4000b738:	80c00117 	ldw	r3,4(r16)
4000b73c:	1886703a 	and	r3,r3,r2
4000b740:	003f9106 	br	4000b588 <__alt_data_end+0xc000b588>
4000b744:	60800217 	ldw	r2,8(r12)
4000b748:	213fffc4 	addi	r4,r4,-1
4000b74c:	1300651e 	bne	r2,r12,4000b8e4 <_malloc_r+0x7f4>
4000b750:	208000cc 	andi	r2,r4,3
4000b754:	633ffe04 	addi	r12,r12,-8
4000b758:	103ffa1e 	bne	r2,zero,4000b744 <__alt_data_end+0xc000b744>
4000b75c:	98800117 	ldw	r2,4(r19)
4000b760:	0146303a 	nor	r3,zero,r5
4000b764:	1884703a 	and	r2,r3,r2
4000b768:	98800115 	stw	r2,4(r19)
4000b76c:	294b883a 	add	r5,r5,r5
4000b770:	117f2836 	bltu	r2,r5,4000b414 <__alt_data_end+0xc000b414>
4000b774:	283f2726 	beq	r5,zero,4000b414 <__alt_data_end+0xc000b414>
4000b778:	2886703a 	and	r3,r5,r2
4000b77c:	5809883a 	mov	r4,r11
4000b780:	183ec31e 	bne	r3,zero,4000b290 <__alt_data_end+0xc000b290>
4000b784:	294b883a 	add	r5,r5,r5
4000b788:	2886703a 	and	r3,r5,r2
4000b78c:	21000104 	addi	r4,r4,4
4000b790:	183ffc26 	beq	r3,zero,4000b784 <__alt_data_end+0xc000b784>
4000b794:	003ebe06 	br	4000b290 <__alt_data_end+0xc000b290>
4000b798:	00c05504 	movi	r3,340
4000b79c:	18801236 	bltu	r3,r2,4000b7e8 <_malloc_r+0x6f8>
4000b7a0:	8804d3fa 	srli	r2,r17,15
4000b7a4:	12001e04 	addi	r8,r2,120
4000b7a8:	11c01dc4 	addi	r7,r2,119
4000b7ac:	4209883a 	add	r4,r8,r8
4000b7b0:	003e6d06 	br	4000b168 <__alt_data_end+0xc000b168>
4000b7b4:	00c40004 	movi	r3,4096
4000b7b8:	003f4606 	br	4000b4d4 <__alt_data_end+0xc000b4d4>
4000b7bc:	00800044 	movi	r2,1
4000b7c0:	a0800115 	stw	r2,4(r20)
4000b7c4:	003f7406 	br	4000b598 <__alt_data_end+0xc000b598>
4000b7c8:	1805d0ba 	srai	r2,r3,2
4000b7cc:	01c00044 	movi	r7,1
4000b7d0:	30c00117 	ldw	r3,4(r6)
4000b7d4:	388e983a 	sll	r7,r7,r2
4000b7d8:	2805883a 	mov	r2,r5
4000b7dc:	38c6b03a 	or	r3,r7,r3
4000b7e0:	30c00115 	stw	r3,4(r6)
4000b7e4:	003f9b06 	br	4000b654 <__alt_data_end+0xc000b654>
4000b7e8:	00c15504 	movi	r3,1364
4000b7ec:	18801a36 	bltu	r3,r2,4000b858 <_malloc_r+0x768>
4000b7f0:	8804d4ba 	srli	r2,r17,18
4000b7f4:	12001f44 	addi	r8,r2,125
4000b7f8:	11c01f04 	addi	r7,r2,124
4000b7fc:	4209883a 	add	r4,r8,r8
4000b800:	003e5906 	br	4000b168 <__alt_data_end+0xc000b168>
4000b804:	ad400404 	addi	r21,r21,16
4000b808:	003f1706 	br	4000b468 <__alt_data_end+0xc000b468>
4000b80c:	00c01504 	movi	r3,84
4000b810:	18802336 	bltu	r3,r2,4000b8a0 <_malloc_r+0x7b0>
4000b814:	3804d33a 	srli	r2,r7,12
4000b818:	11401bc4 	addi	r5,r2,111
4000b81c:	10c01b84 	addi	r3,r2,110
4000b820:	294b883a 	add	r5,r5,r5
4000b824:	003f7b06 	br	4000b614 <__alt_data_end+0xc000b614>
4000b828:	9c000217 	ldw	r16,8(r19)
4000b82c:	00bfff04 	movi	r2,-4
4000b830:	80c00117 	ldw	r3,4(r16)
4000b834:	1886703a 	and	r3,r3,r2
4000b838:	003f5306 	br	4000b588 <__alt_data_end+0xc000b588>
4000b83c:	3083ffcc 	andi	r2,r6,4095
4000b840:	103f181e 	bne	r2,zero,4000b4a4 <__alt_data_end+0xc000b4a4>
4000b844:	99000217 	ldw	r4,8(r19)
4000b848:	b545883a 	add	r2,r22,r21
4000b84c:	10800054 	ori	r2,r2,1
4000b850:	20800115 	stw	r2,4(r4)
4000b854:	003f3e06 	br	4000b550 <__alt_data_end+0xc000b550>
4000b858:	01003f84 	movi	r4,254
4000b85c:	02001fc4 	movi	r8,127
4000b860:	01c01f84 	movi	r7,126
4000b864:	003e4006 	br	4000b168 <__alt_data_end+0xc000b168>
4000b868:	009000b4 	movhi	r2,16386
4000b86c:	108af704 	addi	r2,r2,11228
4000b870:	15000015 	stw	r20,0(r2)
4000b874:	003f1106 	br	4000b4bc <__alt_data_end+0xc000b4bc>
4000b878:	00800044 	movi	r2,1
4000b87c:	002b883a 	mov	r21,zero
4000b880:	003f1f06 	br	4000b500 <__alt_data_end+0xc000b500>
4000b884:	81400204 	addi	r5,r16,8
4000b888:	9009883a 	mov	r4,r18
4000b88c:	000a3800 	call	4000a380 <_free_r>
4000b890:	009000f4 	movhi	r2,16387
4000b894:	10ab1004 	addi	r2,r2,-21440
4000b898:	10c00017 	ldw	r3,0(r2)
4000b89c:	003f2c06 	br	4000b550 <__alt_data_end+0xc000b550>
4000b8a0:	00c05504 	movi	r3,340
4000b8a4:	18800536 	bltu	r3,r2,4000b8bc <_malloc_r+0x7cc>
4000b8a8:	3804d3fa 	srli	r2,r7,15
4000b8ac:	11401e04 	addi	r5,r2,120
4000b8b0:	10c01dc4 	addi	r3,r2,119
4000b8b4:	294b883a 	add	r5,r5,r5
4000b8b8:	003f5606 	br	4000b614 <__alt_data_end+0xc000b614>
4000b8bc:	00c15504 	movi	r3,1364
4000b8c0:	18800536 	bltu	r3,r2,4000b8d8 <_malloc_r+0x7e8>
4000b8c4:	3804d4ba 	srli	r2,r7,18
4000b8c8:	11401f44 	addi	r5,r2,125
4000b8cc:	10c01f04 	addi	r3,r2,124
4000b8d0:	294b883a 	add	r5,r5,r5
4000b8d4:	003f4f06 	br	4000b614 <__alt_data_end+0xc000b614>
4000b8d8:	01403f84 	movi	r5,254
4000b8dc:	00c01f84 	movi	r3,126
4000b8e0:	003f4c06 	br	4000b614 <__alt_data_end+0xc000b614>
4000b8e4:	98800117 	ldw	r2,4(r19)
4000b8e8:	003fa006 	br	4000b76c <__alt_data_end+0xc000b76c>
4000b8ec:	8808d0fa 	srli	r4,r17,3
4000b8f0:	20800044 	addi	r2,r4,1
4000b8f4:	1085883a 	add	r2,r2,r2
4000b8f8:	003e9006 	br	4000b33c <__alt_data_end+0xc000b33c>

4000b8fc <memcpy>:
4000b8fc:	defffd04 	addi	sp,sp,-12
4000b900:	dfc00215 	stw	ra,8(sp)
4000b904:	dc400115 	stw	r17,4(sp)
4000b908:	dc000015 	stw	r16,0(sp)
4000b90c:	00c003c4 	movi	r3,15
4000b910:	2005883a 	mov	r2,r4
4000b914:	1980452e 	bgeu	r3,r6,4000ba2c <memcpy+0x130>
4000b918:	2906b03a 	or	r3,r5,r4
4000b91c:	18c000cc 	andi	r3,r3,3
4000b920:	1800441e 	bne	r3,zero,4000ba34 <memcpy+0x138>
4000b924:	347ffc04 	addi	r17,r6,-16
4000b928:	8822d13a 	srli	r17,r17,4
4000b92c:	28c00104 	addi	r3,r5,4
4000b930:	23400104 	addi	r13,r4,4
4000b934:	8820913a 	slli	r16,r17,4
4000b938:	2b000204 	addi	r12,r5,8
4000b93c:	22c00204 	addi	r11,r4,8
4000b940:	84000504 	addi	r16,r16,20
4000b944:	2a800304 	addi	r10,r5,12
4000b948:	22400304 	addi	r9,r4,12
4000b94c:	2c21883a 	add	r16,r5,r16
4000b950:	2811883a 	mov	r8,r5
4000b954:	200f883a 	mov	r7,r4
4000b958:	41000017 	ldw	r4,0(r8)
4000b95c:	1fc00017 	ldw	ra,0(r3)
4000b960:	63c00017 	ldw	r15,0(r12)
4000b964:	39000015 	stw	r4,0(r7)
4000b968:	53800017 	ldw	r14,0(r10)
4000b96c:	6fc00015 	stw	ra,0(r13)
4000b970:	5bc00015 	stw	r15,0(r11)
4000b974:	4b800015 	stw	r14,0(r9)
4000b978:	18c00404 	addi	r3,r3,16
4000b97c:	39c00404 	addi	r7,r7,16
4000b980:	42000404 	addi	r8,r8,16
4000b984:	6b400404 	addi	r13,r13,16
4000b988:	63000404 	addi	r12,r12,16
4000b98c:	5ac00404 	addi	r11,r11,16
4000b990:	52800404 	addi	r10,r10,16
4000b994:	4a400404 	addi	r9,r9,16
4000b998:	1c3fef1e 	bne	r3,r16,4000b958 <__alt_data_end+0xc000b958>
4000b99c:	89c00044 	addi	r7,r17,1
4000b9a0:	380e913a 	slli	r7,r7,4
4000b9a4:	310003cc 	andi	r4,r6,15
4000b9a8:	02c000c4 	movi	r11,3
4000b9ac:	11c7883a 	add	r3,r2,r7
4000b9b0:	29cb883a 	add	r5,r5,r7
4000b9b4:	5900212e 	bgeu	r11,r4,4000ba3c <memcpy+0x140>
4000b9b8:	1813883a 	mov	r9,r3
4000b9bc:	2811883a 	mov	r8,r5
4000b9c0:	200f883a 	mov	r7,r4
4000b9c4:	42800017 	ldw	r10,0(r8)
4000b9c8:	4a400104 	addi	r9,r9,4
4000b9cc:	39ffff04 	addi	r7,r7,-4
4000b9d0:	4abfff15 	stw	r10,-4(r9)
4000b9d4:	42000104 	addi	r8,r8,4
4000b9d8:	59fffa36 	bltu	r11,r7,4000b9c4 <__alt_data_end+0xc000b9c4>
4000b9dc:	213fff04 	addi	r4,r4,-4
4000b9e0:	2008d0ba 	srli	r4,r4,2
4000b9e4:	318000cc 	andi	r6,r6,3
4000b9e8:	21000044 	addi	r4,r4,1
4000b9ec:	2109883a 	add	r4,r4,r4
4000b9f0:	2109883a 	add	r4,r4,r4
4000b9f4:	1907883a 	add	r3,r3,r4
4000b9f8:	290b883a 	add	r5,r5,r4
4000b9fc:	30000626 	beq	r6,zero,4000ba18 <memcpy+0x11c>
4000ba00:	198d883a 	add	r6,r3,r6
4000ba04:	29c00003 	ldbu	r7,0(r5)
4000ba08:	18c00044 	addi	r3,r3,1
4000ba0c:	29400044 	addi	r5,r5,1
4000ba10:	19ffffc5 	stb	r7,-1(r3)
4000ba14:	19bffb1e 	bne	r3,r6,4000ba04 <__alt_data_end+0xc000ba04>
4000ba18:	dfc00217 	ldw	ra,8(sp)
4000ba1c:	dc400117 	ldw	r17,4(sp)
4000ba20:	dc000017 	ldw	r16,0(sp)
4000ba24:	dec00304 	addi	sp,sp,12
4000ba28:	f800283a 	ret
4000ba2c:	2007883a 	mov	r3,r4
4000ba30:	003ff206 	br	4000b9fc <__alt_data_end+0xc000b9fc>
4000ba34:	2007883a 	mov	r3,r4
4000ba38:	003ff106 	br	4000ba00 <__alt_data_end+0xc000ba00>
4000ba3c:	200d883a 	mov	r6,r4
4000ba40:	003fee06 	br	4000b9fc <__alt_data_end+0xc000b9fc>

4000ba44 <memset>:
4000ba44:	20c000cc 	andi	r3,r4,3
4000ba48:	2005883a 	mov	r2,r4
4000ba4c:	18004426 	beq	r3,zero,4000bb60 <memset+0x11c>
4000ba50:	31ffffc4 	addi	r7,r6,-1
4000ba54:	30004026 	beq	r6,zero,4000bb58 <memset+0x114>
4000ba58:	2813883a 	mov	r9,r5
4000ba5c:	200d883a 	mov	r6,r4
4000ba60:	2007883a 	mov	r3,r4
4000ba64:	00000406 	br	4000ba78 <memset+0x34>
4000ba68:	3a3fffc4 	addi	r8,r7,-1
4000ba6c:	31800044 	addi	r6,r6,1
4000ba70:	38003926 	beq	r7,zero,4000bb58 <memset+0x114>
4000ba74:	400f883a 	mov	r7,r8
4000ba78:	18c00044 	addi	r3,r3,1
4000ba7c:	32400005 	stb	r9,0(r6)
4000ba80:	1a0000cc 	andi	r8,r3,3
4000ba84:	403ff81e 	bne	r8,zero,4000ba68 <__alt_data_end+0xc000ba68>
4000ba88:	010000c4 	movi	r4,3
4000ba8c:	21c02d2e 	bgeu	r4,r7,4000bb44 <memset+0x100>
4000ba90:	29003fcc 	andi	r4,r5,255
4000ba94:	200c923a 	slli	r6,r4,8
4000ba98:	3108b03a 	or	r4,r6,r4
4000ba9c:	200c943a 	slli	r6,r4,16
4000baa0:	218cb03a 	or	r6,r4,r6
4000baa4:	010003c4 	movi	r4,15
4000baa8:	21c0182e 	bgeu	r4,r7,4000bb0c <memset+0xc8>
4000baac:	3b3ffc04 	addi	r12,r7,-16
4000bab0:	6018d13a 	srli	r12,r12,4
4000bab4:	1a000104 	addi	r8,r3,4
4000bab8:	1ac00204 	addi	r11,r3,8
4000babc:	6008913a 	slli	r4,r12,4
4000bac0:	1a800304 	addi	r10,r3,12
4000bac4:	1813883a 	mov	r9,r3
4000bac8:	21000504 	addi	r4,r4,20
4000bacc:	1909883a 	add	r4,r3,r4
4000bad0:	49800015 	stw	r6,0(r9)
4000bad4:	41800015 	stw	r6,0(r8)
4000bad8:	59800015 	stw	r6,0(r11)
4000badc:	51800015 	stw	r6,0(r10)
4000bae0:	42000404 	addi	r8,r8,16
4000bae4:	4a400404 	addi	r9,r9,16
4000bae8:	5ac00404 	addi	r11,r11,16
4000baec:	52800404 	addi	r10,r10,16
4000baf0:	413ff71e 	bne	r8,r4,4000bad0 <__alt_data_end+0xc000bad0>
4000baf4:	63000044 	addi	r12,r12,1
4000baf8:	6018913a 	slli	r12,r12,4
4000bafc:	39c003cc 	andi	r7,r7,15
4000bb00:	010000c4 	movi	r4,3
4000bb04:	1b07883a 	add	r3,r3,r12
4000bb08:	21c00e2e 	bgeu	r4,r7,4000bb44 <memset+0x100>
4000bb0c:	1813883a 	mov	r9,r3
4000bb10:	3811883a 	mov	r8,r7
4000bb14:	010000c4 	movi	r4,3
4000bb18:	49800015 	stw	r6,0(r9)
4000bb1c:	423fff04 	addi	r8,r8,-4
4000bb20:	4a400104 	addi	r9,r9,4
4000bb24:	223ffc36 	bltu	r4,r8,4000bb18 <__alt_data_end+0xc000bb18>
4000bb28:	393fff04 	addi	r4,r7,-4
4000bb2c:	2008d0ba 	srli	r4,r4,2
4000bb30:	39c000cc 	andi	r7,r7,3
4000bb34:	21000044 	addi	r4,r4,1
4000bb38:	2109883a 	add	r4,r4,r4
4000bb3c:	2109883a 	add	r4,r4,r4
4000bb40:	1907883a 	add	r3,r3,r4
4000bb44:	38000526 	beq	r7,zero,4000bb5c <memset+0x118>
4000bb48:	19cf883a 	add	r7,r3,r7
4000bb4c:	19400005 	stb	r5,0(r3)
4000bb50:	18c00044 	addi	r3,r3,1
4000bb54:	38fffd1e 	bne	r7,r3,4000bb4c <__alt_data_end+0xc000bb4c>
4000bb58:	f800283a 	ret
4000bb5c:	f800283a 	ret
4000bb60:	2007883a 	mov	r3,r4
4000bb64:	300f883a 	mov	r7,r6
4000bb68:	003fc706 	br	4000ba88 <__alt_data_end+0xc000ba88>

4000bb6c <_open_r>:
4000bb6c:	defffd04 	addi	sp,sp,-12
4000bb70:	2805883a 	mov	r2,r5
4000bb74:	dc000015 	stw	r16,0(sp)
4000bb78:	041000b4 	movhi	r16,16386
4000bb7c:	dc400115 	stw	r17,4(sp)
4000bb80:	300b883a 	mov	r5,r6
4000bb84:	841a9404 	addi	r16,r16,27216
4000bb88:	2023883a 	mov	r17,r4
4000bb8c:	380d883a 	mov	r6,r7
4000bb90:	1009883a 	mov	r4,r2
4000bb94:	dfc00215 	stw	ra,8(sp)
4000bb98:	80000015 	stw	zero,0(r16)
4000bb9c:	00161880 	call	40016188 <open>
4000bba0:	00ffffc4 	movi	r3,-1
4000bba4:	10c00526 	beq	r2,r3,4000bbbc <_open_r+0x50>
4000bba8:	dfc00217 	ldw	ra,8(sp)
4000bbac:	dc400117 	ldw	r17,4(sp)
4000bbb0:	dc000017 	ldw	r16,0(sp)
4000bbb4:	dec00304 	addi	sp,sp,12
4000bbb8:	f800283a 	ret
4000bbbc:	80c00017 	ldw	r3,0(r16)
4000bbc0:	183ff926 	beq	r3,zero,4000bba8 <__alt_data_end+0xc000bba8>
4000bbc4:	88c00015 	stw	r3,0(r17)
4000bbc8:	003ff706 	br	4000bba8 <__alt_data_end+0xc000bba8>

4000bbcc <_perror_r>:
4000bbcc:	defffd04 	addi	sp,sp,-12
4000bbd0:	dc000115 	stw	r16,4(sp)
4000bbd4:	dfc00215 	stw	ra,8(sp)
4000bbd8:	2021883a 	mov	r16,r4
4000bbdc:	28000326 	beq	r5,zero,4000bbec <_perror_r+0x20>
4000bbe0:	28c00007 	ldb	r3,0(r5)
4000bbe4:	2805883a 	mov	r2,r5
4000bbe8:	1800101e 	bne	r3,zero,4000bc2c <_perror_r+0x60>
4000bbec:	81400017 	ldw	r5,0(r16)
4000bbf0:	d80f883a 	mov	r7,sp
4000bbf4:	01800044 	movi	r6,1
4000bbf8:	8009883a 	mov	r4,r16
4000bbfc:	000c3740 	call	4000c374 <_strerror_r>
4000bc00:	10000326 	beq	r2,zero,4000bc10 <_perror_r+0x44>
4000bc04:	81400317 	ldw	r5,12(r16)
4000bc08:	1009883a 	mov	r4,r2
4000bc0c:	0010b540 	call	40010b54 <fputs>
4000bc10:	81400317 	ldw	r5,12(r16)
4000bc14:	01000284 	movi	r4,10
4000bc18:	0010a5c0 	call	40010a5c <fputc>
4000bc1c:	dfc00217 	ldw	ra,8(sp)
4000bc20:	dc000117 	ldw	r16,4(sp)
4000bc24:	dec00304 	addi	sp,sp,12
4000bc28:	f800283a 	ret
4000bc2c:	21400317 	ldw	r5,12(r4)
4000bc30:	1009883a 	mov	r4,r2
4000bc34:	0010b540 	call	40010b54 <fputs>
4000bc38:	81400317 	ldw	r5,12(r16)
4000bc3c:	011000b4 	movhi	r4,16386
4000bc40:	21396204 	addi	r4,r4,-6776
4000bc44:	0010b540 	call	40010b54 <fputs>
4000bc48:	003fe806 	br	4000bbec <__alt_data_end+0xc000bbec>

4000bc4c <perror>:
4000bc4c:	009000b4 	movhi	r2,16386
4000bc50:	108af604 	addi	r2,r2,11224
4000bc54:	200b883a 	mov	r5,r4
4000bc58:	11000017 	ldw	r4,0(r2)
4000bc5c:	000bbcc1 	jmpi	4000bbcc <_perror_r>

4000bc60 <_printf_r>:
4000bc60:	defffd04 	addi	sp,sp,-12
4000bc64:	2805883a 	mov	r2,r5
4000bc68:	dfc00015 	stw	ra,0(sp)
4000bc6c:	d9800115 	stw	r6,4(sp)
4000bc70:	d9c00215 	stw	r7,8(sp)
4000bc74:	21400217 	ldw	r5,8(r4)
4000bc78:	d9c00104 	addi	r7,sp,4
4000bc7c:	100d883a 	mov	r6,r2
4000bc80:	000ca8c0 	call	4000ca8c <___vfprintf_internal_r>
4000bc84:	dfc00017 	ldw	ra,0(sp)
4000bc88:	dec00304 	addi	sp,sp,12
4000bc8c:	f800283a 	ret

4000bc90 <printf>:
4000bc90:	defffc04 	addi	sp,sp,-16
4000bc94:	dfc00015 	stw	ra,0(sp)
4000bc98:	d9400115 	stw	r5,4(sp)
4000bc9c:	d9800215 	stw	r6,8(sp)
4000bca0:	d9c00315 	stw	r7,12(sp)
4000bca4:	009000b4 	movhi	r2,16386
4000bca8:	108af604 	addi	r2,r2,11224
4000bcac:	10800017 	ldw	r2,0(r2)
4000bcb0:	200b883a 	mov	r5,r4
4000bcb4:	d9800104 	addi	r6,sp,4
4000bcb8:	11000217 	ldw	r4,8(r2)
4000bcbc:	000ec840 	call	4000ec84 <__vfprintf_internal>
4000bcc0:	dfc00017 	ldw	ra,0(sp)
4000bcc4:	dec00404 	addi	sp,sp,16
4000bcc8:	f800283a 	ret

4000bccc <_putchar_r>:
4000bccc:	21800217 	ldw	r6,8(r4)
4000bcd0:	00123f41 	jmpi	400123f4 <_putc_r>

4000bcd4 <putchar>:
4000bcd4:	009000b4 	movhi	r2,16386
4000bcd8:	108af604 	addi	r2,r2,11224
4000bcdc:	200b883a 	mov	r5,r4
4000bce0:	11000017 	ldw	r4,0(r2)
4000bce4:	21800217 	ldw	r6,8(r4)
4000bce8:	00123f41 	jmpi	400123f4 <_putc_r>

4000bcec <_puts_r>:
4000bcec:	defff604 	addi	sp,sp,-40
4000bcf0:	dc000715 	stw	r16,28(sp)
4000bcf4:	2021883a 	mov	r16,r4
4000bcf8:	2809883a 	mov	r4,r5
4000bcfc:	dc400815 	stw	r17,32(sp)
4000bd00:	dfc00915 	stw	ra,36(sp)
4000bd04:	2823883a 	mov	r17,r5
4000bd08:	000c9ec0 	call	4000c9ec <strlen>
4000bd0c:	10c00044 	addi	r3,r2,1
4000bd10:	d8800115 	stw	r2,4(sp)
4000bd14:	009000b4 	movhi	r2,16386
4000bd18:	10b51a04 	addi	r2,r2,-11160
4000bd1c:	d8800215 	stw	r2,8(sp)
4000bd20:	00800044 	movi	r2,1
4000bd24:	d8800315 	stw	r2,12(sp)
4000bd28:	00800084 	movi	r2,2
4000bd2c:	dc400015 	stw	r17,0(sp)
4000bd30:	d8c00615 	stw	r3,24(sp)
4000bd34:	dec00415 	stw	sp,16(sp)
4000bd38:	d8800515 	stw	r2,20(sp)
4000bd3c:	80000226 	beq	r16,zero,4000bd48 <_puts_r+0x5c>
4000bd40:	80800e17 	ldw	r2,56(r16)
4000bd44:	10001426 	beq	r2,zero,4000bd98 <_puts_r+0xac>
4000bd48:	81400217 	ldw	r5,8(r16)
4000bd4c:	2880030b 	ldhu	r2,12(r5)
4000bd50:	10c8000c 	andi	r3,r2,8192
4000bd54:	1800061e 	bne	r3,zero,4000bd70 <_puts_r+0x84>
4000bd58:	29001917 	ldw	r4,100(r5)
4000bd5c:	00f7ffc4 	movi	r3,-8193
4000bd60:	10880014 	ori	r2,r2,8192
4000bd64:	20c6703a 	and	r3,r4,r3
4000bd68:	2880030d 	sth	r2,12(r5)
4000bd6c:	28c01915 	stw	r3,100(r5)
4000bd70:	d9800404 	addi	r6,sp,16
4000bd74:	8009883a 	mov	r4,r16
4000bd78:	0010b6c0 	call	40010b6c <__sfvwrite_r>
4000bd7c:	1000091e 	bne	r2,zero,4000bda4 <_puts_r+0xb8>
4000bd80:	00800284 	movi	r2,10
4000bd84:	dfc00917 	ldw	ra,36(sp)
4000bd88:	dc400817 	ldw	r17,32(sp)
4000bd8c:	dc000717 	ldw	r16,28(sp)
4000bd90:	dec00a04 	addi	sp,sp,40
4000bd94:	f800283a 	ret
4000bd98:	8009883a 	mov	r4,r16
4000bd9c:	0009e540 	call	40009e54 <__sinit>
4000bda0:	003fe906 	br	4000bd48 <__alt_data_end+0xc000bd48>
4000bda4:	00bfffc4 	movi	r2,-1
4000bda8:	003ff606 	br	4000bd84 <__alt_data_end+0xc000bd84>

4000bdac <puts>:
4000bdac:	009000b4 	movhi	r2,16386
4000bdb0:	108af604 	addi	r2,r2,11224
4000bdb4:	200b883a 	mov	r5,r4
4000bdb8:	11000017 	ldw	r4,0(r2)
4000bdbc:	000bcec1 	jmpi	4000bcec <_puts_r>

4000bdc0 <srand>:
4000bdc0:	009000b4 	movhi	r2,16386
4000bdc4:	108af604 	addi	r2,r2,11224
4000bdc8:	10800017 	ldw	r2,0(r2)
4000bdcc:	11002915 	stw	r4,164(r2)
4000bdd0:	10002a15 	stw	zero,168(r2)
4000bdd4:	f800283a 	ret

4000bdd8 <rand>:
4000bdd8:	009000b4 	movhi	r2,16386
4000bddc:	108af604 	addi	r2,r2,11224
4000bde0:	11c00017 	ldw	r7,0(r2)
4000bde4:	01532574 	movhi	r5,19605
4000bde8:	019614b4 	movhi	r6,22610
4000bdec:	38c02917 	ldw	r3,164(r7)
4000bdf0:	39002a17 	ldw	r4,168(r7)
4000bdf4:	295fcb44 	addi	r5,r5,32557
4000bdf8:	31bd0b44 	addi	r6,r6,-3027
4000bdfc:	1951383a 	mul	r8,r3,r5
4000be00:	2149383a 	mul	r4,r4,r5
4000be04:	198d383a 	mul	r6,r3,r6
4000be08:	194a383a 	mulxuu	r5,r3,r5
4000be0c:	40800044 	addi	r2,r8,1
4000be10:	2187883a 	add	r3,r4,r6
4000be14:	1949883a 	add	r4,r3,r5
4000be18:	38802915 	stw	r2,164(r7)
4000be1c:	1207803a 	cmpltu	r3,r2,r8
4000be20:	00a00034 	movhi	r2,32768
4000be24:	1907883a 	add	r3,r3,r4
4000be28:	10bfffc4 	addi	r2,r2,-1
4000be2c:	38c02a15 	stw	r3,168(r7)
4000be30:	1884703a 	and	r2,r3,r2
4000be34:	f800283a 	ret

4000be38 <lflush>:
4000be38:	2080030b 	ldhu	r2,12(r4)
4000be3c:	00c00244 	movi	r3,9
4000be40:	1080024c 	andi	r2,r2,9
4000be44:	10c00226 	beq	r2,r3,4000be50 <lflush+0x18>
4000be48:	0005883a 	mov	r2,zero
4000be4c:	f800283a 	ret
4000be50:	0009ad41 	jmpi	40009ad4 <fflush>

4000be54 <__srefill_r>:
4000be54:	defffc04 	addi	sp,sp,-16
4000be58:	dc400115 	stw	r17,4(sp)
4000be5c:	dc000015 	stw	r16,0(sp)
4000be60:	dfc00315 	stw	ra,12(sp)
4000be64:	dc800215 	stw	r18,8(sp)
4000be68:	2023883a 	mov	r17,r4
4000be6c:	2821883a 	mov	r16,r5
4000be70:	20000226 	beq	r4,zero,4000be7c <__srefill_r+0x28>
4000be74:	20800e17 	ldw	r2,56(r4)
4000be78:	10003c26 	beq	r2,zero,4000bf6c <__srefill_r+0x118>
4000be7c:	80c0030b 	ldhu	r3,12(r16)
4000be80:	1908000c 	andi	r4,r3,8192
4000be84:	1805883a 	mov	r2,r3
4000be88:	2000071e 	bne	r4,zero,4000bea8 <__srefill_r+0x54>
4000be8c:	81001917 	ldw	r4,100(r16)
4000be90:	18880014 	ori	r2,r3,8192
4000be94:	00f7ffc4 	movi	r3,-8193
4000be98:	20c8703a 	and	r4,r4,r3
4000be9c:	8080030d 	sth	r2,12(r16)
4000bea0:	1007883a 	mov	r3,r2
4000bea4:	81001915 	stw	r4,100(r16)
4000bea8:	80000115 	stw	zero,4(r16)
4000beac:	1100080c 	andi	r4,r2,32
4000beb0:	2000571e 	bne	r4,zero,4000c010 <__srefill_r+0x1bc>
4000beb4:	1100010c 	andi	r4,r2,4
4000beb8:	20001f26 	beq	r4,zero,4000bf38 <__srefill_r+0xe4>
4000bebc:	81400c17 	ldw	r5,48(r16)
4000bec0:	28000826 	beq	r5,zero,4000bee4 <__srefill_r+0x90>
4000bec4:	80801004 	addi	r2,r16,64
4000bec8:	28800226 	beq	r5,r2,4000bed4 <__srefill_r+0x80>
4000becc:	8809883a 	mov	r4,r17
4000bed0:	000a3800 	call	4000a380 <_free_r>
4000bed4:	80800f17 	ldw	r2,60(r16)
4000bed8:	80000c15 	stw	zero,48(r16)
4000bedc:	80800115 	stw	r2,4(r16)
4000bee0:	1000391e 	bne	r2,zero,4000bfc8 <__srefill_r+0x174>
4000bee4:	80800417 	ldw	r2,16(r16)
4000bee8:	10004b26 	beq	r2,zero,4000c018 <__srefill_r+0x1c4>
4000beec:	8480030b 	ldhu	r18,12(r16)
4000bef0:	908000cc 	andi	r2,r18,3
4000bef4:	10001f1e 	bne	r2,zero,4000bf74 <__srefill_r+0x120>
4000bef8:	81800417 	ldw	r6,16(r16)
4000befc:	80800817 	ldw	r2,32(r16)
4000bf00:	81c00517 	ldw	r7,20(r16)
4000bf04:	81400717 	ldw	r5,28(r16)
4000bf08:	81800015 	stw	r6,0(r16)
4000bf0c:	8809883a 	mov	r4,r17
4000bf10:	103ee83a 	callr	r2
4000bf14:	80800115 	stw	r2,4(r16)
4000bf18:	00800e0e 	bge	zero,r2,4000bf54 <__srefill_r+0x100>
4000bf1c:	0005883a 	mov	r2,zero
4000bf20:	dfc00317 	ldw	ra,12(sp)
4000bf24:	dc800217 	ldw	r18,8(sp)
4000bf28:	dc400117 	ldw	r17,4(sp)
4000bf2c:	dc000017 	ldw	r16,0(sp)
4000bf30:	dec00404 	addi	sp,sp,16
4000bf34:	f800283a 	ret
4000bf38:	1100040c 	andi	r4,r2,16
4000bf3c:	20003026 	beq	r4,zero,4000c000 <__srefill_r+0x1ac>
4000bf40:	1080020c 	andi	r2,r2,8
4000bf44:	1000241e 	bne	r2,zero,4000bfd8 <__srefill_r+0x184>
4000bf48:	18c00114 	ori	r3,r3,4
4000bf4c:	80c0030d 	sth	r3,12(r16)
4000bf50:	003fe406 	br	4000bee4 <__alt_data_end+0xc000bee4>
4000bf54:	80c0030b 	ldhu	r3,12(r16)
4000bf58:	1000161e 	bne	r2,zero,4000bfb4 <__srefill_r+0x160>
4000bf5c:	18c00814 	ori	r3,r3,32
4000bf60:	00bfffc4 	movi	r2,-1
4000bf64:	80c0030d 	sth	r3,12(r16)
4000bf68:	003fed06 	br	4000bf20 <__alt_data_end+0xc000bf20>
4000bf6c:	0009e540 	call	40009e54 <__sinit>
4000bf70:	003fc206 	br	4000be7c <__alt_data_end+0xc000be7c>
4000bf74:	009000b4 	movhi	r2,16386
4000bf78:	108af504 	addi	r2,r2,11220
4000bf7c:	11000017 	ldw	r4,0(r2)
4000bf80:	01500074 	movhi	r5,16385
4000bf84:	00800044 	movi	r2,1
4000bf88:	296f8e04 	addi	r5,r5,-16840
4000bf8c:	8080030d 	sth	r2,12(r16)
4000bf90:	000ac840 	call	4000ac84 <_fwalk>
4000bf94:	00800244 	movi	r2,9
4000bf98:	8480030d 	sth	r18,12(r16)
4000bf9c:	9480024c 	andi	r18,r18,9
4000bfa0:	90bfd51e 	bne	r18,r2,4000bef8 <__alt_data_end+0xc000bef8>
4000bfa4:	800b883a 	mov	r5,r16
4000bfa8:	8809883a 	mov	r4,r17
4000bfac:	000985c0 	call	4000985c <__sflush_r>
4000bfb0:	003fd106 	br	4000bef8 <__alt_data_end+0xc000bef8>
4000bfb4:	18c01014 	ori	r3,r3,64
4000bfb8:	80000115 	stw	zero,4(r16)
4000bfbc:	00bfffc4 	movi	r2,-1
4000bfc0:	80c0030d 	sth	r3,12(r16)
4000bfc4:	003fd606 	br	4000bf20 <__alt_data_end+0xc000bf20>
4000bfc8:	80c00e17 	ldw	r3,56(r16)
4000bfcc:	0005883a 	mov	r2,zero
4000bfd0:	80c00015 	stw	r3,0(r16)
4000bfd4:	003fd206 	br	4000bf20 <__alt_data_end+0xc000bf20>
4000bfd8:	800b883a 	mov	r5,r16
4000bfdc:	8809883a 	mov	r4,r17
4000bfe0:	0009a780 	call	40009a78 <_fflush_r>
4000bfe4:	10000a1e 	bne	r2,zero,4000c010 <__srefill_r+0x1bc>
4000bfe8:	8080030b 	ldhu	r2,12(r16)
4000bfec:	00fffdc4 	movi	r3,-9
4000bff0:	80000215 	stw	zero,8(r16)
4000bff4:	1886703a 	and	r3,r3,r2
4000bff8:	80000615 	stw	zero,24(r16)
4000bffc:	003fd206 	br	4000bf48 <__alt_data_end+0xc000bf48>
4000c000:	00800244 	movi	r2,9
4000c004:	88800015 	stw	r2,0(r17)
4000c008:	18c01014 	ori	r3,r3,64
4000c00c:	80c0030d 	sth	r3,12(r16)
4000c010:	00bfffc4 	movi	r2,-1
4000c014:	003fc206 	br	4000bf20 <__alt_data_end+0xc000bf20>
4000c018:	800b883a 	mov	r5,r16
4000c01c:	8809883a 	mov	r4,r17
4000c020:	000af0c0 	call	4000af0c <__smakebuf_r>
4000c024:	003fb106 	br	4000beec <__alt_data_end+0xc000beec>

4000c028 <_sbrk_r>:
4000c028:	defffd04 	addi	sp,sp,-12
4000c02c:	dc000015 	stw	r16,0(sp)
4000c030:	041000b4 	movhi	r16,16386
4000c034:	dc400115 	stw	r17,4(sp)
4000c038:	841a9404 	addi	r16,r16,27216
4000c03c:	2023883a 	mov	r17,r4
4000c040:	2809883a 	mov	r4,r5
4000c044:	dfc00215 	stw	ra,8(sp)
4000c048:	80000015 	stw	zero,0(r16)
4000c04c:	00163ec0 	call	400163ec <sbrk>
4000c050:	00ffffc4 	movi	r3,-1
4000c054:	10c00526 	beq	r2,r3,4000c06c <_sbrk_r+0x44>
4000c058:	dfc00217 	ldw	ra,8(sp)
4000c05c:	dc400117 	ldw	r17,4(sp)
4000c060:	dc000017 	ldw	r16,0(sp)
4000c064:	dec00304 	addi	sp,sp,12
4000c068:	f800283a 	ret
4000c06c:	80c00017 	ldw	r3,0(r16)
4000c070:	183ff926 	beq	r3,zero,4000c058 <__alt_data_end+0xc000c058>
4000c074:	88c00015 	stw	r3,0(r17)
4000c078:	003ff706 	br	4000c058 <__alt_data_end+0xc000c058>

4000c07c <setvbuf>:
4000c07c:	009000b4 	movhi	r2,16386
4000c080:	defff904 	addi	sp,sp,-28
4000c084:	108af604 	addi	r2,r2,11224
4000c088:	dc400115 	stw	r17,4(sp)
4000c08c:	14400017 	ldw	r17,0(r2)
4000c090:	dd400515 	stw	r21,20(sp)
4000c094:	dcc00315 	stw	r19,12(sp)
4000c098:	dc800215 	stw	r18,8(sp)
4000c09c:	dc000015 	stw	r16,0(sp)
4000c0a0:	dfc00615 	stw	ra,24(sp)
4000c0a4:	dd000415 	stw	r20,16(sp)
4000c0a8:	2021883a 	mov	r16,r4
4000c0ac:	282b883a 	mov	r21,r5
4000c0b0:	3027883a 	mov	r19,r6
4000c0b4:	3825883a 	mov	r18,r7
4000c0b8:	88000226 	beq	r17,zero,4000c0c4 <setvbuf+0x48>
4000c0bc:	88800e17 	ldw	r2,56(r17)
4000c0c0:	10003526 	beq	r2,zero,4000c198 <setvbuf+0x11c>
4000c0c4:	00800084 	movi	r2,2
4000c0c8:	14c05036 	bltu	r2,r19,4000c20c <setvbuf+0x190>
4000c0cc:	9029883a 	mov	r20,r18
4000c0d0:	90004e16 	blt	r18,zero,4000c20c <setvbuf+0x190>
4000c0d4:	800b883a 	mov	r5,r16
4000c0d8:	8809883a 	mov	r4,r17
4000c0dc:	0009a780 	call	40009a78 <_fflush_r>
4000c0e0:	80c0030b 	ldhu	r3,12(r16)
4000c0e4:	80000115 	stw	zero,4(r16)
4000c0e8:	80000615 	stw	zero,24(r16)
4000c0ec:	1880200c 	andi	r2,r3,128
4000c0f0:	1000241e 	bne	r2,zero,4000c184 <setvbuf+0x108>
4000c0f4:	00bfdf04 	movi	r2,-132
4000c0f8:	1886703a 	and	r3,r3,r2
4000c0fc:	80c0030d 	sth	r3,12(r16)
4000c100:	00800084 	movi	r2,2
4000c104:	98802b26 	beq	r19,r2,4000c1b4 <setvbuf+0x138>
4000c108:	a8003426 	beq	r21,zero,4000c1dc <setvbuf+0x160>
4000c10c:	00800044 	movi	r2,1
4000c110:	9880051e 	bne	r19,r2,4000c128 <setvbuf+0xac>
4000c114:	1884b03a 	or	r2,r3,r2
4000c118:	0489c83a 	sub	r4,zero,r18
4000c11c:	1007883a 	mov	r3,r2
4000c120:	8080030d 	sth	r2,12(r16)
4000c124:	81000615 	stw	r4,24(r16)
4000c128:	01100074 	movhi	r4,16385
4000c12c:	2126c304 	addi	r4,r4,-25844
4000c130:	89000f15 	stw	r4,60(r17)
4000c134:	1880020c 	andi	r2,r3,8
4000c138:	85400015 	stw	r21,0(r16)
4000c13c:	85400415 	stw	r21,16(r16)
4000c140:	84800515 	stw	r18,20(r16)
4000c144:	10000a1e 	bne	r2,zero,4000c170 <setvbuf+0xf4>
4000c148:	0005883a 	mov	r2,zero
4000c14c:	dfc00617 	ldw	ra,24(sp)
4000c150:	dd400517 	ldw	r21,20(sp)
4000c154:	dd000417 	ldw	r20,16(sp)
4000c158:	dcc00317 	ldw	r19,12(sp)
4000c15c:	dc800217 	ldw	r18,8(sp)
4000c160:	dc400117 	ldw	r17,4(sp)
4000c164:	dc000017 	ldw	r16,0(sp)
4000c168:	dec00704 	addi	sp,sp,28
4000c16c:	f800283a 	ret
4000c170:	18c000cc 	andi	r3,r3,3
4000c174:	18000b1e 	bne	r3,zero,4000c1a4 <setvbuf+0x128>
4000c178:	85000215 	stw	r20,8(r16)
4000c17c:	0005883a 	mov	r2,zero
4000c180:	003ff206 	br	4000c14c <__alt_data_end+0xc000c14c>
4000c184:	81400417 	ldw	r5,16(r16)
4000c188:	8809883a 	mov	r4,r17
4000c18c:	000a3800 	call	4000a380 <_free_r>
4000c190:	80c0030b 	ldhu	r3,12(r16)
4000c194:	003fd706 	br	4000c0f4 <__alt_data_end+0xc000c0f4>
4000c198:	8809883a 	mov	r4,r17
4000c19c:	0009e540 	call	40009e54 <__sinit>
4000c1a0:	003fc806 	br	4000c0c4 <__alt_data_end+0xc000c0c4>
4000c1a4:	0029883a 	mov	r20,zero
4000c1a8:	85000215 	stw	r20,8(r16)
4000c1ac:	0005883a 	mov	r2,zero
4000c1b0:	003fe606 	br	4000c14c <__alt_data_end+0xc000c14c>
4000c1b4:	0005883a 	mov	r2,zero
4000c1b8:	18c00094 	ori	r3,r3,2
4000c1bc:	810010c4 	addi	r4,r16,67
4000c1c0:	80c0030d 	sth	r3,12(r16)
4000c1c4:	00c00044 	movi	r3,1
4000c1c8:	80000215 	stw	zero,8(r16)
4000c1cc:	81000015 	stw	r4,0(r16)
4000c1d0:	81000415 	stw	r4,16(r16)
4000c1d4:	80c00515 	stw	r3,20(r16)
4000c1d8:	003fdc06 	br	4000c14c <__alt_data_end+0xc000c14c>
4000c1dc:	9000011e 	bne	r18,zero,4000c1e4 <setvbuf+0x168>
4000c1e0:	04810004 	movi	r18,1024
4000c1e4:	9009883a 	mov	r4,r18
4000c1e8:	000b0c80 	call	4000b0c8 <malloc>
4000c1ec:	102b883a 	mov	r21,r2
4000c1f0:	10000826 	beq	r2,zero,4000c214 <setvbuf+0x198>
4000c1f4:	8080030b 	ldhu	r2,12(r16)
4000c1f8:	9029883a 	mov	r20,r18
4000c1fc:	10802014 	ori	r2,r2,128
4000c200:	1007883a 	mov	r3,r2
4000c204:	8080030d 	sth	r2,12(r16)
4000c208:	003fc006 	br	4000c10c <__alt_data_end+0xc000c10c>
4000c20c:	00bfffc4 	movi	r2,-1
4000c210:	003fce06 	br	4000c14c <__alt_data_end+0xc000c14c>
4000c214:	01010004 	movi	r4,1024
4000c218:	000b0c80 	call	4000b0c8 <malloc>
4000c21c:	102b883a 	mov	r21,r2
4000c220:	1000031e 	bne	r2,zero,4000c230 <setvbuf+0x1b4>
4000c224:	80c0030b 	ldhu	r3,12(r16)
4000c228:	00bfffc4 	movi	r2,-1
4000c22c:	003fe206 	br	4000c1b8 <__alt_data_end+0xc000c1b8>
4000c230:	04810004 	movi	r18,1024
4000c234:	003fef06 	br	4000c1f4 <__alt_data_end+0xc000c1f4>

4000c238 <__sread>:
4000c238:	defffe04 	addi	sp,sp,-8
4000c23c:	dc000015 	stw	r16,0(sp)
4000c240:	2821883a 	mov	r16,r5
4000c244:	2940038f 	ldh	r5,14(r5)
4000c248:	dfc00115 	stw	ra,4(sp)
4000c24c:	001255c0 	call	4001255c <_read_r>
4000c250:	10000716 	blt	r2,zero,4000c270 <__sread+0x38>
4000c254:	80c01417 	ldw	r3,80(r16)
4000c258:	1887883a 	add	r3,r3,r2
4000c25c:	80c01415 	stw	r3,80(r16)
4000c260:	dfc00117 	ldw	ra,4(sp)
4000c264:	dc000017 	ldw	r16,0(sp)
4000c268:	dec00204 	addi	sp,sp,8
4000c26c:	f800283a 	ret
4000c270:	80c0030b 	ldhu	r3,12(r16)
4000c274:	18fbffcc 	andi	r3,r3,61439
4000c278:	80c0030d 	sth	r3,12(r16)
4000c27c:	dfc00117 	ldw	ra,4(sp)
4000c280:	dc000017 	ldw	r16,0(sp)
4000c284:	dec00204 	addi	sp,sp,8
4000c288:	f800283a 	ret

4000c28c <__seofread>:
4000c28c:	0005883a 	mov	r2,zero
4000c290:	f800283a 	ret

4000c294 <__swrite>:
4000c294:	2880030b 	ldhu	r2,12(r5)
4000c298:	defffb04 	addi	sp,sp,-20
4000c29c:	dcc00315 	stw	r19,12(sp)
4000c2a0:	dc800215 	stw	r18,8(sp)
4000c2a4:	dc400115 	stw	r17,4(sp)
4000c2a8:	dc000015 	stw	r16,0(sp)
4000c2ac:	dfc00415 	stw	ra,16(sp)
4000c2b0:	10c0400c 	andi	r3,r2,256
4000c2b4:	2821883a 	mov	r16,r5
4000c2b8:	2023883a 	mov	r17,r4
4000c2bc:	3025883a 	mov	r18,r6
4000c2c0:	3827883a 	mov	r19,r7
4000c2c4:	18000526 	beq	r3,zero,4000c2dc <__swrite+0x48>
4000c2c8:	2940038f 	ldh	r5,14(r5)
4000c2cc:	01c00084 	movi	r7,2
4000c2d0:	000d883a 	mov	r6,zero
4000c2d4:	00111580 	call	40011158 <_lseek_r>
4000c2d8:	8080030b 	ldhu	r2,12(r16)
4000c2dc:	8140038f 	ldh	r5,14(r16)
4000c2e0:	10bbffcc 	andi	r2,r2,61439
4000c2e4:	980f883a 	mov	r7,r19
4000c2e8:	900d883a 	mov	r6,r18
4000c2ec:	8809883a 	mov	r4,r17
4000c2f0:	8080030d 	sth	r2,12(r16)
4000c2f4:	dfc00417 	ldw	ra,16(sp)
4000c2f8:	dcc00317 	ldw	r19,12(sp)
4000c2fc:	dc800217 	ldw	r18,8(sp)
4000c300:	dc400117 	ldw	r17,4(sp)
4000c304:	dc000017 	ldw	r16,0(sp)
4000c308:	dec00504 	addi	sp,sp,20
4000c30c:	000ed5c1 	jmpi	4000ed5c <_write_r>

4000c310 <__sseek>:
4000c310:	defffe04 	addi	sp,sp,-8
4000c314:	dc000015 	stw	r16,0(sp)
4000c318:	2821883a 	mov	r16,r5
4000c31c:	2940038f 	ldh	r5,14(r5)
4000c320:	dfc00115 	stw	ra,4(sp)
4000c324:	00111580 	call	40011158 <_lseek_r>
4000c328:	00ffffc4 	movi	r3,-1
4000c32c:	10c00826 	beq	r2,r3,4000c350 <__sseek+0x40>
4000c330:	80c0030b 	ldhu	r3,12(r16)
4000c334:	80801415 	stw	r2,80(r16)
4000c338:	18c40014 	ori	r3,r3,4096
4000c33c:	80c0030d 	sth	r3,12(r16)
4000c340:	dfc00117 	ldw	ra,4(sp)
4000c344:	dc000017 	ldw	r16,0(sp)
4000c348:	dec00204 	addi	sp,sp,8
4000c34c:	f800283a 	ret
4000c350:	80c0030b 	ldhu	r3,12(r16)
4000c354:	18fbffcc 	andi	r3,r3,61439
4000c358:	80c0030d 	sth	r3,12(r16)
4000c35c:	dfc00117 	ldw	ra,4(sp)
4000c360:	dc000017 	ldw	r16,0(sp)
4000c364:	dec00204 	addi	sp,sp,8
4000c368:	f800283a 	ret

4000c36c <__sclose>:
4000c36c:	2940038f 	ldh	r5,14(r5)
4000c370:	000ef101 	jmpi	4000ef10 <_close_r>

4000c374 <_strerror_r>:
4000c374:	deffff04 	addi	sp,sp,-4
4000c378:	2807883a 	mov	r3,r5
4000c37c:	dfc00015 	stw	ra,0(sp)
4000c380:	00802384 	movi	r2,142
4000c384:	300b883a 	mov	r5,r6
4000c388:	10c18736 	bltu	r2,r3,4000c9a8 <_strerror_r+0x634>
4000c38c:	181090ba 	slli	r8,r3,2
4000c390:	00900074 	movhi	r2,16385
4000c394:	10b0e904 	addi	r2,r2,-15452
4000c398:	4085883a 	add	r2,r8,r2
4000c39c:	10800017 	ldw	r2,0(r2)
4000c3a0:	1000683a 	jmp	r2
4000c3a4:	4000c5e0 	cmpeqi	zero,r8,791
4000c3a8:	4000c99c 	xori	zero,r8,806
4000c3ac:	4000c990 	cmplti	zero,r8,806
4000c3b0:	4000c984 	addi	zero,r8,806
4000c3b4:	4000c978 	rdprs	zero,r8,805
4000c3b8:	4000c96c 	andhi	zero,r8,805
4000c3bc:	4000c960 	cmpeqi	zero,r8,805
4000c3c0:	4000c954 	ori	zero,r8,805
4000c3c4:	4000c948 	cmpgei	zero,r8,805
4000c3c8:	4000c93c 	xorhi	zero,r8,804
4000c3cc:	4000c930 	cmpltui	zero,r8,804
4000c3d0:	4000c924 	muli	zero,r8,804
4000c3d4:	4000c918 	cmpnei	zero,r8,804
4000c3d8:	4000c90c 	andi	zero,r8,804
4000c3dc:	4000c900 	call	44000c90 <__alt_heap_start+0x3fbb384>
4000c3e0:	4000c9a8 	cmpgeui	zero,r8,806
4000c3e4:	4000c8f4 	orhi	zero,r8,803
4000c3e8:	4000c8e8 	cmpgeui	zero,r8,803
4000c3ec:	4000c8dc 	xori	zero,r8,803
4000c3f0:	4000c8d0 	cmplti	zero,r8,803
4000c3f4:	4000c8c4 	addi	zero,r8,803
4000c3f8:	4000c8b8 	rdprs	zero,r8,802
4000c3fc:	4000c8ac 	andhi	zero,r8,802
4000c400:	4000c8a0 	cmpeqi	zero,r8,802
4000c404:	4000c894 	ori	zero,r8,802
4000c408:	4000c888 	cmpgei	zero,r8,802
4000c40c:	4000c87c 	xorhi	zero,r8,801
4000c410:	4000c870 	cmpltui	zero,r8,801
4000c414:	4000c864 	muli	zero,r8,801
4000c418:	4000c858 	cmpnei	zero,r8,801
4000c41c:	4000c84c 	andi	zero,r8,801
4000c420:	4000c840 	call	44000c84 <__alt_heap_start+0x3fbb378>
4000c424:	4000c834 	orhi	zero,r8,800
4000c428:	4000c828 	cmpgeui	zero,r8,800
4000c42c:	4000c81c 	xori	zero,r8,800
4000c430:	4000c810 	cmplti	zero,r8,800
4000c434:	4000c804 	addi	zero,r8,800
4000c438:	4000c9a8 	cmpgeui	zero,r8,806
4000c43c:	4000c9a8 	cmpgeui	zero,r8,806
4000c440:	4000c9a8 	cmpgeui	zero,r8,806
4000c444:	4000c9a8 	cmpgeui	zero,r8,806
4000c448:	4000c9a8 	cmpgeui	zero,r8,806
4000c44c:	4000c9a8 	cmpgeui	zero,r8,806
4000c450:	4000c9a8 	cmpgeui	zero,r8,806
4000c454:	4000c9a8 	cmpgeui	zero,r8,806
4000c458:	4000c7f8 	rdprs	zero,r8,799
4000c45c:	4000c7ec 	andhi	zero,r8,799
4000c460:	4000c9a8 	cmpgeui	zero,r8,806
4000c464:	4000c9a8 	cmpgeui	zero,r8,806
4000c468:	4000c9a8 	cmpgeui	zero,r8,806
4000c46c:	4000c9a8 	cmpgeui	zero,r8,806
4000c470:	4000c9a8 	cmpgeui	zero,r8,806
4000c474:	4000c9a8 	cmpgeui	zero,r8,806
4000c478:	4000c9a8 	cmpgeui	zero,r8,806
4000c47c:	4000c9a8 	cmpgeui	zero,r8,806
4000c480:	4000c9a8 	cmpgeui	zero,r8,806
4000c484:	4000c9a8 	cmpgeui	zero,r8,806
4000c488:	4000c9a8 	cmpgeui	zero,r8,806
4000c48c:	4000c9a8 	cmpgeui	zero,r8,806
4000c490:	4000c9a8 	cmpgeui	zero,r8,806
4000c494:	4000c7e0 	cmpeqi	zero,r8,799
4000c498:	4000c7d4 	ori	zero,r8,799
4000c49c:	4000c7c8 	cmpgei	zero,r8,799
4000c4a0:	4000c7bc 	xorhi	zero,r8,798
4000c4a4:	4000c9a8 	cmpgeui	zero,r8,806
4000c4a8:	4000c9a8 	cmpgeui	zero,r8,806
4000c4ac:	4000c9a8 	cmpgeui	zero,r8,806
4000c4b0:	4000c7b0 	cmpltui	zero,r8,798
4000c4b4:	4000c9a8 	cmpgeui	zero,r8,806
4000c4b8:	4000c9a8 	cmpgeui	zero,r8,806
4000c4bc:	4000c9a8 	cmpgeui	zero,r8,806
4000c4c0:	4000c7a4 	muli	zero,r8,798
4000c4c4:	4000c9a8 	cmpgeui	zero,r8,806
4000c4c8:	4000c9a8 	cmpgeui	zero,r8,806
4000c4cc:	4000c798 	cmpnei	zero,r8,798
4000c4d0:	4000c9a8 	cmpgeui	zero,r8,806
4000c4d4:	4000c9a8 	cmpgeui	zero,r8,806
4000c4d8:	4000c78c 	andi	zero,r8,798
4000c4dc:	4000c9a8 	cmpgeui	zero,r8,806
4000c4e0:	4000c9a8 	cmpgeui	zero,r8,806
4000c4e4:	4000c9a8 	cmpgeui	zero,r8,806
4000c4e8:	4000c9a8 	cmpgeui	zero,r8,806
4000c4ec:	4000c9a8 	cmpgeui	zero,r8,806
4000c4f0:	4000c9a8 	cmpgeui	zero,r8,806
4000c4f4:	4000c9a8 	cmpgeui	zero,r8,806
4000c4f8:	4000c9a8 	cmpgeui	zero,r8,806
4000c4fc:	4000c9a8 	cmpgeui	zero,r8,806
4000c500:	4000c9a8 	cmpgeui	zero,r8,806
4000c504:	4000c780 	call	44000c78 <__alt_heap_start+0x3fbb36c>
4000c508:	4000c9a8 	cmpgeui	zero,r8,806
4000c50c:	4000c774 	orhi	zero,r8,797
4000c510:	4000c768 	cmpgeui	zero,r8,797
4000c514:	4000c75c 	xori	zero,r8,797
4000c518:	4000c9a8 	cmpgeui	zero,r8,806
4000c51c:	4000c9a8 	cmpgeui	zero,r8,806
4000c520:	4000c750 	cmplti	zero,r8,797
4000c524:	4000c9a8 	cmpgeui	zero,r8,806
4000c528:	4000c9a8 	cmpgeui	zero,r8,806
4000c52c:	4000c9a8 	cmpgeui	zero,r8,806
4000c530:	4000c9a8 	cmpgeui	zero,r8,806
4000c534:	4000c9a8 	cmpgeui	zero,r8,806
4000c538:	4000c9a8 	cmpgeui	zero,r8,806
4000c53c:	4000c9a8 	cmpgeui	zero,r8,806
4000c540:	4000c9a8 	cmpgeui	zero,r8,806
4000c544:	4000c744 	addi	zero,r8,797
4000c548:	4000c738 	rdprs	zero,r8,796
4000c54c:	4000c72c 	andhi	zero,r8,796
4000c550:	4000c720 	cmpeqi	zero,r8,796
4000c554:	4000c714 	ori	zero,r8,796
4000c558:	4000c708 	cmpgei	zero,r8,796
4000c55c:	4000c9a8 	cmpgeui	zero,r8,806
4000c560:	4000c6fc 	xorhi	zero,r8,795
4000c564:	4000c6f0 	cmpltui	zero,r8,795
4000c568:	4000c6e4 	muli	zero,r8,795
4000c56c:	4000c6d8 	cmpnei	zero,r8,795
4000c570:	4000c6cc 	andi	zero,r8,795
4000c574:	4000c6c0 	call	44000c6c <__alt_heap_start+0x3fbb360>
4000c578:	4000c6b4 	orhi	zero,r8,794
4000c57c:	4000c6a8 	cmpgeui	zero,r8,794
4000c580:	4000c69c 	xori	zero,r8,794
4000c584:	4000c690 	cmplti	zero,r8,794
4000c588:	4000c684 	addi	zero,r8,794
4000c58c:	4000c678 	rdprs	zero,r8,793
4000c590:	4000c66c 	andhi	zero,r8,793
4000c594:	4000c9a8 	cmpgeui	zero,r8,806
4000c598:	4000c660 	cmpeqi	zero,r8,793
4000c59c:	4000c654 	ori	zero,r8,793
4000c5a0:	4000c648 	cmpgei	zero,r8,793
4000c5a4:	4000c63c 	xorhi	zero,r8,792
4000c5a8:	4000c9a8 	cmpgeui	zero,r8,806
4000c5ac:	4000c9a8 	cmpgeui	zero,r8,806
4000c5b0:	4000c9a8 	cmpgeui	zero,r8,806
4000c5b4:	4000c9a8 	cmpgeui	zero,r8,806
4000c5b8:	4000c9a8 	cmpgeui	zero,r8,806
4000c5bc:	4000c630 	cmpltui	zero,r8,792
4000c5c0:	4000c9a8 	cmpgeui	zero,r8,806
4000c5c4:	4000c9a8 	cmpgeui	zero,r8,806
4000c5c8:	4000c9a8 	cmpgeui	zero,r8,806
4000c5cc:	4000c624 	muli	zero,r8,792
4000c5d0:	4000c618 	cmpnei	zero,r8,792
4000c5d4:	4000c60c 	andi	zero,r8,792
4000c5d8:	4000c600 	call	44000c60 <__alt_heap_start+0x3fbb354>
4000c5dc:	4000c5f4 	orhi	zero,r8,791
4000c5e0:	009000b4 	movhi	r2,16386
4000c5e4:	10b96304 	addi	r2,r2,-6772
4000c5e8:	dfc00017 	ldw	ra,0(sp)
4000c5ec:	dec00104 	addi	sp,sp,4
4000c5f0:	f800283a 	ret
4000c5f4:	009000b4 	movhi	r2,16386
4000c5f8:	10bb0004 	addi	r2,r2,-5120
4000c5fc:	003ffa06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c600:	009000b4 	movhi	r2,16386
4000c604:	10bafa04 	addi	r2,r2,-5144
4000c608:	003ff706 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c60c:	009000b4 	movhi	r2,16386
4000c610:	10baf504 	addi	r2,r2,-5164
4000c614:	003ff406 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c618:	009000b4 	movhi	r2,16386
4000c61c:	10bb0e04 	addi	r2,r2,-5064
4000c620:	003ff106 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c624:	009000b4 	movhi	r2,16386
4000c628:	10ba4c04 	addi	r2,r2,-5840
4000c62c:	003fee06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c630:	009000b4 	movhi	r2,16386
4000c634:	10ba1a04 	addi	r2,r2,-6040
4000c638:	003feb06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c63c:	009000b4 	movhi	r2,16386
4000c640:	10bae804 	addi	r2,r2,-5216
4000c644:	003fe806 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c648:	009000b4 	movhi	r2,16386
4000c64c:	10baee04 	addi	r2,r2,-5192
4000c650:	003fe506 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c654:	009000b4 	movhi	r2,16386
4000c658:	10b9e904 	addi	r2,r2,-6236
4000c65c:	003fe206 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c660:	009000b4 	movhi	r2,16386
4000c664:	10bad904 	addi	r2,r2,-5276
4000c668:	003fdf06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c66c:	009000b4 	movhi	r2,16386
4000c670:	10ba7604 	addi	r2,r2,-5672
4000c674:	003fdc06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c678:	009000b4 	movhi	r2,16386
4000c67c:	10bb1804 	addi	r2,r2,-5024
4000c680:	003fd906 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c684:	009000b4 	movhi	r2,16386
4000c688:	10b99b04 	addi	r2,r2,-6548
4000c68c:	003fd606 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c690:	009000b4 	movhi	r2,16386
4000c694:	10b98d04 	addi	r2,r2,-6604
4000c698:	003fd306 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c69c:	009000b4 	movhi	r2,16386
4000c6a0:	10b9cf04 	addi	r2,r2,-6340
4000c6a4:	003fd006 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c6a8:	009000b4 	movhi	r2,16386
4000c6ac:	10ba0f04 	addi	r2,r2,-6084
4000c6b0:	003fcd06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c6b4:	009000b4 	movhi	r2,16386
4000c6b8:	10b9cb04 	addi	r2,r2,-6356
4000c6bc:	003fca06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c6c0:	009000b4 	movhi	r2,16386
4000c6c4:	10bb1d04 	addi	r2,r2,-5004
4000c6c8:	003fc706 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c6cc:	009000b4 	movhi	r2,16386
4000c6d0:	10b9e004 	addi	r2,r2,-6272
4000c6d4:	003fc406 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c6d8:	009000b4 	movhi	r2,16386
4000c6dc:	10ba5504 	addi	r2,r2,-5804
4000c6e0:	003fc106 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c6e4:	009000b4 	movhi	r2,16386
4000c6e8:	10badf04 	addi	r2,r2,-5252
4000c6ec:	003fbe06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c6f0:	009000b4 	movhi	r2,16386
4000c6f4:	10bad304 	addi	r2,r2,-5300
4000c6f8:	003fbb06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c6fc:	009000b4 	movhi	r2,16386
4000c700:	10bac704 	addi	r2,r2,-5348
4000c704:	003fb806 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c708:	009000b4 	movhi	r2,16386
4000c70c:	10bac104 	addi	r2,r2,-5372
4000c710:	003fb506 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c714:	009000b4 	movhi	r2,16386
4000c718:	10bab904 	addi	r2,r2,-5404
4000c71c:	003fb206 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c720:	009000b4 	movhi	r2,16386
4000c724:	10bab104 	addi	r2,r2,-5436
4000c728:	003faf06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c72c:	009000b4 	movhi	r2,16386
4000c730:	10baa504 	addi	r2,r2,-5484
4000c734:	003fac06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c738:	009000b4 	movhi	r2,16386
4000c73c:	10ba9c04 	addi	r2,r2,-5520
4000c740:	003fa906 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c744:	009000b4 	movhi	r2,16386
4000c748:	10bacc04 	addi	r2,r2,-5328
4000c74c:	003fa606 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c750:	009000b4 	movhi	r2,16386
4000c754:	10bb0504 	addi	r2,r2,-5100
4000c758:	003fa306 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c75c:	009000b4 	movhi	r2,16386
4000c760:	10ba9604 	addi	r2,r2,-5544
4000c764:	003fa006 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c768:	009000b4 	movhi	r2,16386
4000c76c:	10ba8f04 	addi	r2,r2,-5572
4000c770:	003f9d06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c774:	009000b4 	movhi	r2,16386
4000c778:	10ba8a04 	addi	r2,r2,-5592
4000c77c:	003f9a06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c780:	009000b4 	movhi	r2,16386
4000c784:	10ba8304 	addi	r2,r2,-5620
4000c788:	003f9706 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c78c:	009000b4 	movhi	r2,16386
4000c790:	10ba8004 	addi	r2,r2,-5632
4000c794:	003f9406 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c798:	009000b4 	movhi	r2,16386
4000c79c:	10ba7b04 	addi	r2,r2,-5652
4000c7a0:	003f9106 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c7a4:	009000b4 	movhi	r2,16386
4000c7a8:	10ba7204 	addi	r2,r2,-5688
4000c7ac:	003f8e06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c7b0:	009000b4 	movhi	r2,16386
4000c7b4:	10ba6c04 	addi	r2,r2,-5712
4000c7b8:	003f8b06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c7bc:	009000b4 	movhi	r2,16386
4000c7c0:	10ba6704 	addi	r2,r2,-5732
4000c7c4:	003f8806 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c7c8:	009000b4 	movhi	r2,16386
4000c7cc:	10ba6104 	addi	r2,r2,-5756
4000c7d0:	003f8506 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c7d4:	009000b4 	movhi	r2,16386
4000c7d8:	10baa304 	addi	r2,r2,-5492
4000c7dc:	003f8206 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c7e0:	009000b4 	movhi	r2,16386
4000c7e4:	10ba5d04 	addi	r2,r2,-5772
4000c7e8:	003f7f06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c7ec:	009000b4 	movhi	r2,16386
4000c7f0:	10ba5b04 	addi	r2,r2,-5780
4000c7f4:	003f7c06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c7f8:	009000b4 	movhi	r2,16386
4000c7fc:	10ba5204 	addi	r2,r2,-5816
4000c800:	003f7906 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c804:	009000b4 	movhi	r2,16386
4000c808:	10ba4704 	addi	r2,r2,-5860
4000c80c:	003f7606 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c810:	009000b4 	movhi	r2,16386
4000c814:	10ba4004 	addi	r2,r2,-5888
4000c818:	003f7306 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c81c:	009000b4 	movhi	r2,16386
4000c820:	10ba3b04 	addi	r2,r2,-5908
4000c824:	003f7006 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c828:	009000b4 	movhi	r2,16386
4000c82c:	10ba2f04 	addi	r2,r2,-5956
4000c830:	003f6d06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c834:	009000b4 	movhi	r2,16386
4000c838:	10ba2c04 	addi	r2,r2,-5968
4000c83c:	003f6a06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c840:	009000b4 	movhi	r2,16386
4000c844:	10ba2804 	addi	r2,r2,-5984
4000c848:	003f6706 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c84c:	009000b4 	movhi	r2,16386
4000c850:	10ba2204 	addi	r2,r2,-6008
4000c854:	003f6406 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c858:	009000b4 	movhi	r2,16386
4000c85c:	10ba1e04 	addi	r2,r2,-6024
4000c860:	003f6106 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c864:	009000b4 	movhi	r2,16386
4000c868:	10ba1404 	addi	r2,r2,-6064
4000c86c:	003f5e06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c870:	009000b4 	movhi	r2,16386
4000c874:	10ba0b04 	addi	r2,r2,-6100
4000c878:	003f5b06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c87c:	009000b4 	movhi	r2,16386
4000c880:	10ba0704 	addi	r2,r2,-6116
4000c884:	003f5806 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c888:	009000b4 	movhi	r2,16386
4000c88c:	10ba0104 	addi	r2,r2,-6140
4000c890:	003f5506 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c894:	009000b4 	movhi	r2,16386
4000c898:	10b9f904 	addi	r2,r2,-6172
4000c89c:	003f5206 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c8a0:	009000b4 	movhi	r2,16386
4000c8a4:	10b9f104 	addi	r2,r2,-6204
4000c8a8:	003f4f06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c8ac:	009000b4 	movhi	r2,16386
4000c8b0:	10b9db04 	addi	r2,r2,-6292
4000c8b4:	003f4c06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c8b8:	009000b4 	movhi	r2,16386
4000c8bc:	10b9d704 	addi	r2,r2,-6308
4000c8c0:	003f4906 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c8c4:	009000b4 	movhi	r2,16386
4000c8c8:	10b9c704 	addi	r2,r2,-6372
4000c8cc:	003f4606 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c8d0:	009000b4 	movhi	r2,16386
4000c8d4:	10b9c304 	addi	r2,r2,-6388
4000c8d8:	003f4306 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c8dc:	009000b4 	movhi	r2,16386
4000c8e0:	10b9be04 	addi	r2,r2,-6408
4000c8e4:	003f4006 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c8e8:	009000b4 	movhi	r2,16386
4000c8ec:	10b9bb04 	addi	r2,r2,-6420
4000c8f0:	003f3d06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c8f4:	009000b4 	movhi	r2,16386
4000c8f8:	10b9b504 	addi	r2,r2,-6444
4000c8fc:	003f3a06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c900:	009000b4 	movhi	r2,16386
4000c904:	10b9b204 	addi	r2,r2,-6456
4000c908:	003f3706 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c90c:	009000b4 	movhi	r2,16386
4000c910:	10b9ad04 	addi	r2,r2,-6476
4000c914:	003f3406 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c918:	009000b4 	movhi	r2,16386
4000c91c:	10b9a804 	addi	r2,r2,-6496
4000c920:	003f3106 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c924:	009000b4 	movhi	r2,16386
4000c928:	10b9a304 	addi	r2,r2,-6516
4000c92c:	003f2e06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c930:	009000b4 	movhi	r2,16386
4000c934:	10b99804 	addi	r2,r2,-6560
4000c938:	003f2b06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c93c:	009000b4 	movhi	r2,16386
4000c940:	10b99404 	addi	r2,r2,-6576
4000c944:	003f2806 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c948:	009000b4 	movhi	r2,16386
4000c94c:	10b98804 	addi	r2,r2,-6624
4000c950:	003f2506 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c954:	009000b4 	movhi	r2,16386
4000c958:	10b98304 	addi	r2,r2,-6644
4000c95c:	003f2206 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c960:	009000b4 	movhi	r2,16386
4000c964:	10b97c04 	addi	r2,r2,-6672
4000c968:	003f1f06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c96c:	009000b4 	movhi	r2,16386
4000c970:	10b97904 	addi	r2,r2,-6684
4000c974:	003f1c06 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c978:	009000b4 	movhi	r2,16386
4000c97c:	10b97304 	addi	r2,r2,-6708
4000c980:	003f1906 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c984:	009000b4 	movhi	r2,16386
4000c988:	10b96f04 	addi	r2,r2,-6724
4000c98c:	003f1606 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c990:	009000b4 	movhi	r2,16386
4000c994:	10b96804 	addi	r2,r2,-6752
4000c998:	003f1306 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c99c:	009000b4 	movhi	r2,16386
4000c9a0:	10b96504 	addi	r2,r2,-6764
4000c9a4:	003f1006 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c9a8:	38000726 	beq	r7,zero,4000c9c8 <_strerror_r+0x654>
4000c9ac:	380d883a 	mov	r6,r7
4000c9b0:	1809883a 	mov	r4,r3
4000c9b4:	000ca840 	call	4000ca84 <_user_strerror>
4000c9b8:	103f0b1e 	bne	r2,zero,4000c5e8 <__alt_data_end+0xc000c5e8>
4000c9bc:	009000b4 	movhi	r2,16386
4000c9c0:	10b59d04 	addi	r2,r2,-10636
4000c9c4:	003f0806 	br	4000c5e8 <__alt_data_end+0xc000c5e8>
4000c9c8:	200f883a 	mov	r7,r4
4000c9cc:	003ff706 	br	4000c9ac <__alt_data_end+0xc000c9ac>

4000c9d0 <strerror>:
4000c9d0:	009000b4 	movhi	r2,16386
4000c9d4:	108af604 	addi	r2,r2,11224
4000c9d8:	200b883a 	mov	r5,r4
4000c9dc:	11000017 	ldw	r4,0(r2)
4000c9e0:	000f883a 	mov	r7,zero
4000c9e4:	000d883a 	mov	r6,zero
4000c9e8:	000c3741 	jmpi	4000c374 <_strerror_r>

4000c9ec <strlen>:
4000c9ec:	208000cc 	andi	r2,r4,3
4000c9f0:	10002026 	beq	r2,zero,4000ca74 <strlen+0x88>
4000c9f4:	20800007 	ldb	r2,0(r4)
4000c9f8:	10002026 	beq	r2,zero,4000ca7c <strlen+0x90>
4000c9fc:	2005883a 	mov	r2,r4
4000ca00:	00000206 	br	4000ca0c <strlen+0x20>
4000ca04:	10c00007 	ldb	r3,0(r2)
4000ca08:	18001826 	beq	r3,zero,4000ca6c <strlen+0x80>
4000ca0c:	10800044 	addi	r2,r2,1
4000ca10:	10c000cc 	andi	r3,r2,3
4000ca14:	183ffb1e 	bne	r3,zero,4000ca04 <__alt_data_end+0xc000ca04>
4000ca18:	10c00017 	ldw	r3,0(r2)
4000ca1c:	01ffbff4 	movhi	r7,65279
4000ca20:	39ffbfc4 	addi	r7,r7,-257
4000ca24:	00ca303a 	nor	r5,zero,r3
4000ca28:	01a02074 	movhi	r6,32897
4000ca2c:	19c7883a 	add	r3,r3,r7
4000ca30:	31a02004 	addi	r6,r6,-32640
4000ca34:	1946703a 	and	r3,r3,r5
4000ca38:	1986703a 	and	r3,r3,r6
4000ca3c:	1800091e 	bne	r3,zero,4000ca64 <strlen+0x78>
4000ca40:	10800104 	addi	r2,r2,4
4000ca44:	10c00017 	ldw	r3,0(r2)
4000ca48:	19cb883a 	add	r5,r3,r7
4000ca4c:	00c6303a 	nor	r3,zero,r3
4000ca50:	28c6703a 	and	r3,r5,r3
4000ca54:	1986703a 	and	r3,r3,r6
4000ca58:	183ff926 	beq	r3,zero,4000ca40 <__alt_data_end+0xc000ca40>
4000ca5c:	00000106 	br	4000ca64 <strlen+0x78>
4000ca60:	10800044 	addi	r2,r2,1
4000ca64:	10c00007 	ldb	r3,0(r2)
4000ca68:	183ffd1e 	bne	r3,zero,4000ca60 <__alt_data_end+0xc000ca60>
4000ca6c:	1105c83a 	sub	r2,r2,r4
4000ca70:	f800283a 	ret
4000ca74:	2005883a 	mov	r2,r4
4000ca78:	003fe706 	br	4000ca18 <__alt_data_end+0xc000ca18>
4000ca7c:	0005883a 	mov	r2,zero
4000ca80:	f800283a 	ret

4000ca84 <_user_strerror>:
4000ca84:	0005883a 	mov	r2,zero
4000ca88:	f800283a 	ret

4000ca8c <___vfprintf_internal_r>:
4000ca8c:	deffb804 	addi	sp,sp,-288
4000ca90:	dfc04715 	stw	ra,284(sp)
4000ca94:	ddc04515 	stw	r23,276(sp)
4000ca98:	dd404315 	stw	r21,268(sp)
4000ca9c:	d9002c15 	stw	r4,176(sp)
4000caa0:	282f883a 	mov	r23,r5
4000caa4:	302b883a 	mov	r21,r6
4000caa8:	d9c02d15 	stw	r7,180(sp)
4000caac:	df004615 	stw	fp,280(sp)
4000cab0:	dd804415 	stw	r22,272(sp)
4000cab4:	dd004215 	stw	r20,264(sp)
4000cab8:	dcc04115 	stw	r19,260(sp)
4000cabc:	dc804015 	stw	r18,256(sp)
4000cac0:	dc403f15 	stw	r17,252(sp)
4000cac4:	dc003e15 	stw	r16,248(sp)
4000cac8:	00111280 	call	40011128 <_localeconv_r>
4000cacc:	10800017 	ldw	r2,0(r2)
4000cad0:	1009883a 	mov	r4,r2
4000cad4:	d8803415 	stw	r2,208(sp)
4000cad8:	000c9ec0 	call	4000c9ec <strlen>
4000cadc:	d8803715 	stw	r2,220(sp)
4000cae0:	d8802c17 	ldw	r2,176(sp)
4000cae4:	10000226 	beq	r2,zero,4000caf0 <___vfprintf_internal_r+0x64>
4000cae8:	10800e17 	ldw	r2,56(r2)
4000caec:	1000f926 	beq	r2,zero,4000ced4 <___vfprintf_internal_r+0x448>
4000caf0:	b880030b 	ldhu	r2,12(r23)
4000caf4:	10c8000c 	andi	r3,r2,8192
4000caf8:	1800061e 	bne	r3,zero,4000cb14 <___vfprintf_internal_r+0x88>
4000cafc:	b9001917 	ldw	r4,100(r23)
4000cb00:	00f7ffc4 	movi	r3,-8193
4000cb04:	10880014 	ori	r2,r2,8192
4000cb08:	20c6703a 	and	r3,r4,r3
4000cb0c:	b880030d 	sth	r2,12(r23)
4000cb10:	b8c01915 	stw	r3,100(r23)
4000cb14:	10c0020c 	andi	r3,r2,8
4000cb18:	1800c126 	beq	r3,zero,4000ce20 <___vfprintf_internal_r+0x394>
4000cb1c:	b8c00417 	ldw	r3,16(r23)
4000cb20:	1800bf26 	beq	r3,zero,4000ce20 <___vfprintf_internal_r+0x394>
4000cb24:	1080068c 	andi	r2,r2,26
4000cb28:	00c00284 	movi	r3,10
4000cb2c:	10c0c426 	beq	r2,r3,4000ce40 <___vfprintf_internal_r+0x3b4>
4000cb30:	d8c00404 	addi	r3,sp,16
4000cb34:	051000b4 	movhi	r20,16386
4000cb38:	d9001e04 	addi	r4,sp,120
4000cb3c:	a53b32c4 	addi	r20,r20,-4917
4000cb40:	d8c01e15 	stw	r3,120(sp)
4000cb44:	d8002015 	stw	zero,128(sp)
4000cb48:	d8001f15 	stw	zero,124(sp)
4000cb4c:	d8003315 	stw	zero,204(sp)
4000cb50:	d8003615 	stw	zero,216(sp)
4000cb54:	d8003815 	stw	zero,224(sp)
4000cb58:	1811883a 	mov	r8,r3
4000cb5c:	d8003915 	stw	zero,228(sp)
4000cb60:	d8003a15 	stw	zero,232(sp)
4000cb64:	d8002f15 	stw	zero,188(sp)
4000cb68:	d9002815 	stw	r4,160(sp)
4000cb6c:	a8800007 	ldb	r2,0(r21)
4000cb70:	10027b26 	beq	r2,zero,4000d560 <___vfprintf_internal_r+0xad4>
4000cb74:	00c00944 	movi	r3,37
4000cb78:	a821883a 	mov	r16,r21
4000cb7c:	10c0021e 	bne	r2,r3,4000cb88 <___vfprintf_internal_r+0xfc>
4000cb80:	00001406 	br	4000cbd4 <___vfprintf_internal_r+0x148>
4000cb84:	10c00326 	beq	r2,r3,4000cb94 <___vfprintf_internal_r+0x108>
4000cb88:	84000044 	addi	r16,r16,1
4000cb8c:	80800007 	ldb	r2,0(r16)
4000cb90:	103ffc1e 	bne	r2,zero,4000cb84 <__alt_data_end+0xc000cb84>
4000cb94:	8563c83a 	sub	r17,r16,r21
4000cb98:	88000e26 	beq	r17,zero,4000cbd4 <___vfprintf_internal_r+0x148>
4000cb9c:	d8c02017 	ldw	r3,128(sp)
4000cba0:	d8801f17 	ldw	r2,124(sp)
4000cba4:	45400015 	stw	r21,0(r8)
4000cba8:	1c47883a 	add	r3,r3,r17
4000cbac:	10800044 	addi	r2,r2,1
4000cbb0:	d8c02015 	stw	r3,128(sp)
4000cbb4:	44400115 	stw	r17,4(r8)
4000cbb8:	d8801f15 	stw	r2,124(sp)
4000cbbc:	00c001c4 	movi	r3,7
4000cbc0:	1880a716 	blt	r3,r2,4000ce60 <___vfprintf_internal_r+0x3d4>
4000cbc4:	42000204 	addi	r8,r8,8
4000cbc8:	d9402f17 	ldw	r5,188(sp)
4000cbcc:	2c4b883a 	add	r5,r5,r17
4000cbd0:	d9402f15 	stw	r5,188(sp)
4000cbd4:	80800007 	ldb	r2,0(r16)
4000cbd8:	1000a826 	beq	r2,zero,4000ce7c <___vfprintf_internal_r+0x3f0>
4000cbdc:	84400047 	ldb	r17,1(r16)
4000cbe0:	00bfffc4 	movi	r2,-1
4000cbe4:	85400044 	addi	r21,r16,1
4000cbe8:	d8002785 	stb	zero,158(sp)
4000cbec:	0007883a 	mov	r3,zero
4000cbf0:	000f883a 	mov	r7,zero
4000cbf4:	d8802915 	stw	r2,164(sp)
4000cbf8:	d8003115 	stw	zero,196(sp)
4000cbfc:	0025883a 	mov	r18,zero
4000cc00:	01401604 	movi	r5,88
4000cc04:	01800244 	movi	r6,9
4000cc08:	02800a84 	movi	r10,42
4000cc0c:	02401b04 	movi	r9,108
4000cc10:	ad400044 	addi	r21,r21,1
4000cc14:	88bff804 	addi	r2,r17,-32
4000cc18:	28830436 	bltu	r5,r2,4000d82c <___vfprintf_internal_r+0xda0>
4000cc1c:	100490ba 	slli	r2,r2,2
4000cc20:	01100074 	movhi	r4,16385
4000cc24:	21330d04 	addi	r4,r4,-13260
4000cc28:	1105883a 	add	r2,r2,r4
4000cc2c:	10800017 	ldw	r2,0(r2)
4000cc30:	1000683a 	jmp	r2
4000cc34:	4000d74c 	andi	zero,r8,861
4000cc38:	4000d82c 	andhi	zero,r8,864
4000cc3c:	4000d82c 	andhi	zero,r8,864
4000cc40:	4000d76c 	andhi	zero,r8,861
4000cc44:	4000d82c 	andhi	zero,r8,864
4000cc48:	4000d82c 	andhi	zero,r8,864
4000cc4c:	4000d82c 	andhi	zero,r8,864
4000cc50:	4000d82c 	andhi	zero,r8,864
4000cc54:	4000d82c 	andhi	zero,r8,864
4000cc58:	4000d82c 	andhi	zero,r8,864
4000cc5c:	4000cee0 	cmpeqi	zero,r8,827
4000cc60:	4000d688 	cmpgei	zero,r8,858
4000cc64:	4000d82c 	andhi	zero,r8,864
4000cc68:	4000cda8 	cmpgeui	zero,r8,822
4000cc6c:	4000cf08 	cmpgei	zero,r8,828
4000cc70:	4000d82c 	andhi	zero,r8,864
4000cc74:	4000cf48 	cmpgei	zero,r8,829
4000cc78:	4000cf54 	ori	zero,r8,829
4000cc7c:	4000cf54 	ori	zero,r8,829
4000cc80:	4000cf54 	ori	zero,r8,829
4000cc84:	4000cf54 	ori	zero,r8,829
4000cc88:	4000cf54 	ori	zero,r8,829
4000cc8c:	4000cf54 	ori	zero,r8,829
4000cc90:	4000cf54 	ori	zero,r8,829
4000cc94:	4000cf54 	ori	zero,r8,829
4000cc98:	4000cf54 	ori	zero,r8,829
4000cc9c:	4000d82c 	andhi	zero,r8,864
4000cca0:	4000d82c 	andhi	zero,r8,864
4000cca4:	4000d82c 	andhi	zero,r8,864
4000cca8:	4000d82c 	andhi	zero,r8,864
4000ccac:	4000d82c 	andhi	zero,r8,864
4000ccb0:	4000d82c 	andhi	zero,r8,864
4000ccb4:	4000d82c 	andhi	zero,r8,864
4000ccb8:	4000d82c 	andhi	zero,r8,864
4000ccbc:	4000d82c 	andhi	zero,r8,864
4000ccc0:	4000d82c 	andhi	zero,r8,864
4000ccc4:	4000cf88 	cmpgei	zero,r8,830
4000ccc8:	4000d044 	addi	zero,r8,833
4000cccc:	4000d82c 	andhi	zero,r8,864
4000ccd0:	4000d044 	addi	zero,r8,833
4000ccd4:	4000d82c 	andhi	zero,r8,864
4000ccd8:	4000d82c 	andhi	zero,r8,864
4000ccdc:	4000d82c 	andhi	zero,r8,864
4000cce0:	4000d82c 	andhi	zero,r8,864
4000cce4:	4000d0e4 	muli	zero,r8,835
4000cce8:	4000d82c 	andhi	zero,r8,864
4000ccec:	4000d82c 	andhi	zero,r8,864
4000ccf0:	4000d0f0 	cmpltui	zero,r8,835
4000ccf4:	4000d82c 	andhi	zero,r8,864
4000ccf8:	4000d82c 	andhi	zero,r8,864
4000ccfc:	4000d82c 	andhi	zero,r8,864
4000cd00:	4000d82c 	andhi	zero,r8,864
4000cd04:	4000d82c 	andhi	zero,r8,864
4000cd08:	4000d568 	cmpgeui	zero,r8,853
4000cd0c:	4000d82c 	andhi	zero,r8,864
4000cd10:	4000d82c 	andhi	zero,r8,864
4000cd14:	4000d5c8 	cmpgei	zero,r8,855
4000cd18:	4000d82c 	andhi	zero,r8,864
4000cd1c:	4000d82c 	andhi	zero,r8,864
4000cd20:	4000d82c 	andhi	zero,r8,864
4000cd24:	4000d82c 	andhi	zero,r8,864
4000cd28:	4000d82c 	andhi	zero,r8,864
4000cd2c:	4000d82c 	andhi	zero,r8,864
4000cd30:	4000d82c 	andhi	zero,r8,864
4000cd34:	4000d82c 	andhi	zero,r8,864
4000cd38:	4000d82c 	andhi	zero,r8,864
4000cd3c:	4000d82c 	andhi	zero,r8,864
4000cd40:	4000d7d8 	cmpnei	zero,r8,863
4000cd44:	4000d778 	rdprs	zero,r8,861
4000cd48:	4000d044 	addi	zero,r8,833
4000cd4c:	4000d044 	addi	zero,r8,833
4000cd50:	4000d044 	addi	zero,r8,833
4000cd54:	4000d788 	cmpgei	zero,r8,862
4000cd58:	4000d778 	rdprs	zero,r8,861
4000cd5c:	4000d82c 	andhi	zero,r8,864
4000cd60:	4000d82c 	andhi	zero,r8,864
4000cd64:	4000d794 	ori	zero,r8,862
4000cd68:	4000d82c 	andhi	zero,r8,864
4000cd6c:	4000d7a4 	muli	zero,r8,862
4000cd70:	4000d678 	rdprs	zero,r8,857
4000cd74:	4000cdb4 	orhi	zero,r8,822
4000cd78:	4000d698 	cmpnei	zero,r8,858
4000cd7c:	4000d82c 	andhi	zero,r8,864
4000cd80:	4000d6a4 	muli	zero,r8,858
4000cd84:	4000d82c 	andhi	zero,r8,864
4000cd88:	4000d700 	call	44000d70 <__alt_heap_start+0x3fbb464>
4000cd8c:	4000d82c 	andhi	zero,r8,864
4000cd90:	4000d82c 	andhi	zero,r8,864
4000cd94:	4000d710 	cmplti	zero,r8,860
4000cd98:	d9003117 	ldw	r4,196(sp)
4000cd9c:	d8802d15 	stw	r2,180(sp)
4000cda0:	0109c83a 	sub	r4,zero,r4
4000cda4:	d9003115 	stw	r4,196(sp)
4000cda8:	94800114 	ori	r18,r18,4
4000cdac:	ac400007 	ldb	r17,0(r21)
4000cdb0:	003f9706 	br	4000cc10 <__alt_data_end+0xc000cc10>
4000cdb4:	00800c04 	movi	r2,48
4000cdb8:	d9002d17 	ldw	r4,180(sp)
4000cdbc:	d9402917 	ldw	r5,164(sp)
4000cdc0:	d8802705 	stb	r2,156(sp)
4000cdc4:	00801e04 	movi	r2,120
4000cdc8:	d8802745 	stb	r2,157(sp)
4000cdcc:	d8002785 	stb	zero,158(sp)
4000cdd0:	20c00104 	addi	r3,r4,4
4000cdd4:	24c00017 	ldw	r19,0(r4)
4000cdd8:	002d883a 	mov	r22,zero
4000cddc:	90800094 	ori	r2,r18,2
4000cde0:	28029a16 	blt	r5,zero,4000d84c <___vfprintf_internal_r+0xdc0>
4000cde4:	00bfdfc4 	movi	r2,-129
4000cde8:	90a4703a 	and	r18,r18,r2
4000cdec:	d8c02d15 	stw	r3,180(sp)
4000cdf0:	94800094 	ori	r18,r18,2
4000cdf4:	9802871e 	bne	r19,zero,4000d814 <___vfprintf_internal_r+0xd88>
4000cdf8:	009000b4 	movhi	r2,16386
4000cdfc:	10bb2c04 	addi	r2,r2,-4944
4000ce00:	d8803915 	stw	r2,228(sp)
4000ce04:	04401e04 	movi	r17,120
4000ce08:	d8802917 	ldw	r2,164(sp)
4000ce0c:	0039883a 	mov	fp,zero
4000ce10:	1001e926 	beq	r2,zero,4000d5b8 <___vfprintf_internal_r+0xb2c>
4000ce14:	0027883a 	mov	r19,zero
4000ce18:	002d883a 	mov	r22,zero
4000ce1c:	00020506 	br	4000d634 <___vfprintf_internal_r+0xba8>
4000ce20:	d9002c17 	ldw	r4,176(sp)
4000ce24:	b80b883a 	mov	r5,r23
4000ce28:	000edbc0 	call	4000edbc <__swsetup_r>
4000ce2c:	1005ac1e 	bne	r2,zero,4000e4e0 <___vfprintf_internal_r+0x1a54>
4000ce30:	b880030b 	ldhu	r2,12(r23)
4000ce34:	00c00284 	movi	r3,10
4000ce38:	1080068c 	andi	r2,r2,26
4000ce3c:	10ff3c1e 	bne	r2,r3,4000cb30 <__alt_data_end+0xc000cb30>
4000ce40:	b880038f 	ldh	r2,14(r23)
4000ce44:	103f3a16 	blt	r2,zero,4000cb30 <__alt_data_end+0xc000cb30>
4000ce48:	d9c02d17 	ldw	r7,180(sp)
4000ce4c:	d9002c17 	ldw	r4,176(sp)
4000ce50:	a80d883a 	mov	r6,r21
4000ce54:	b80b883a 	mov	r5,r23
4000ce58:	000eca00 	call	4000eca0 <__sbprintf>
4000ce5c:	00001106 	br	4000cea4 <___vfprintf_internal_r+0x418>
4000ce60:	d9002c17 	ldw	r4,176(sp)
4000ce64:	d9801e04 	addi	r6,sp,120
4000ce68:	b80b883a 	mov	r5,r23
4000ce6c:	0012d6c0 	call	40012d6c <__sprint_r>
4000ce70:	1000081e 	bne	r2,zero,4000ce94 <___vfprintf_internal_r+0x408>
4000ce74:	da000404 	addi	r8,sp,16
4000ce78:	003f5306 	br	4000cbc8 <__alt_data_end+0xc000cbc8>
4000ce7c:	d8802017 	ldw	r2,128(sp)
4000ce80:	10000426 	beq	r2,zero,4000ce94 <___vfprintf_internal_r+0x408>
4000ce84:	d9002c17 	ldw	r4,176(sp)
4000ce88:	d9801e04 	addi	r6,sp,120
4000ce8c:	b80b883a 	mov	r5,r23
4000ce90:	0012d6c0 	call	40012d6c <__sprint_r>
4000ce94:	b880030b 	ldhu	r2,12(r23)
4000ce98:	1080100c 	andi	r2,r2,64
4000ce9c:	1005901e 	bne	r2,zero,4000e4e0 <___vfprintf_internal_r+0x1a54>
4000cea0:	d8802f17 	ldw	r2,188(sp)
4000cea4:	dfc04717 	ldw	ra,284(sp)
4000cea8:	df004617 	ldw	fp,280(sp)
4000ceac:	ddc04517 	ldw	r23,276(sp)
4000ceb0:	dd804417 	ldw	r22,272(sp)
4000ceb4:	dd404317 	ldw	r21,268(sp)
4000ceb8:	dd004217 	ldw	r20,264(sp)
4000cebc:	dcc04117 	ldw	r19,260(sp)
4000cec0:	dc804017 	ldw	r18,256(sp)
4000cec4:	dc403f17 	ldw	r17,252(sp)
4000cec8:	dc003e17 	ldw	r16,248(sp)
4000cecc:	dec04804 	addi	sp,sp,288
4000ced0:	f800283a 	ret
4000ced4:	d9002c17 	ldw	r4,176(sp)
4000ced8:	0009e540 	call	40009e54 <__sinit>
4000cedc:	003f0406 	br	4000caf0 <__alt_data_end+0xc000caf0>
4000cee0:	d8802d17 	ldw	r2,180(sp)
4000cee4:	d9002d17 	ldw	r4,180(sp)
4000cee8:	10800017 	ldw	r2,0(r2)
4000ceec:	d8803115 	stw	r2,196(sp)
4000cef0:	20800104 	addi	r2,r4,4
4000cef4:	d9003117 	ldw	r4,196(sp)
4000cef8:	203fa716 	blt	r4,zero,4000cd98 <__alt_data_end+0xc000cd98>
4000cefc:	d8802d15 	stw	r2,180(sp)
4000cf00:	ac400007 	ldb	r17,0(r21)
4000cf04:	003f4206 	br	4000cc10 <__alt_data_end+0xc000cc10>
4000cf08:	ac400007 	ldb	r17,0(r21)
4000cf0c:	aac00044 	addi	r11,r21,1
4000cf10:	8a872826 	beq	r17,r10,4000ebb4 <___vfprintf_internal_r+0x2128>
4000cf14:	88bff404 	addi	r2,r17,-48
4000cf18:	0009883a 	mov	r4,zero
4000cf1c:	30867d36 	bltu	r6,r2,4000e914 <___vfprintf_internal_r+0x1e88>
4000cf20:	5c400007 	ldb	r17,0(r11)
4000cf24:	210002a4 	muli	r4,r4,10
4000cf28:	5d400044 	addi	r21,r11,1
4000cf2c:	a817883a 	mov	r11,r21
4000cf30:	2089883a 	add	r4,r4,r2
4000cf34:	88bff404 	addi	r2,r17,-48
4000cf38:	30bff92e 	bgeu	r6,r2,4000cf20 <__alt_data_end+0xc000cf20>
4000cf3c:	2005c916 	blt	r4,zero,4000e664 <___vfprintf_internal_r+0x1bd8>
4000cf40:	d9002915 	stw	r4,164(sp)
4000cf44:	003f3306 	br	4000cc14 <__alt_data_end+0xc000cc14>
4000cf48:	94802014 	ori	r18,r18,128
4000cf4c:	ac400007 	ldb	r17,0(r21)
4000cf50:	003f2f06 	br	4000cc10 <__alt_data_end+0xc000cc10>
4000cf54:	a809883a 	mov	r4,r21
4000cf58:	d8003115 	stw	zero,196(sp)
4000cf5c:	88bff404 	addi	r2,r17,-48
4000cf60:	0017883a 	mov	r11,zero
4000cf64:	24400007 	ldb	r17,0(r4)
4000cf68:	5ac002a4 	muli	r11,r11,10
4000cf6c:	ad400044 	addi	r21,r21,1
4000cf70:	a809883a 	mov	r4,r21
4000cf74:	12d7883a 	add	r11,r2,r11
4000cf78:	88bff404 	addi	r2,r17,-48
4000cf7c:	30bff92e 	bgeu	r6,r2,4000cf64 <__alt_data_end+0xc000cf64>
4000cf80:	dac03115 	stw	r11,196(sp)
4000cf84:	003f2306 	br	4000cc14 <__alt_data_end+0xc000cc14>
4000cf88:	18c03fcc 	andi	r3,r3,255
4000cf8c:	18072b1e 	bne	r3,zero,4000ec3c <___vfprintf_internal_r+0x21b0>
4000cf90:	94800414 	ori	r18,r18,16
4000cf94:	9080080c 	andi	r2,r18,32
4000cf98:	10037b26 	beq	r2,zero,4000dd88 <___vfprintf_internal_r+0x12fc>
4000cf9c:	d9402d17 	ldw	r5,180(sp)
4000cfa0:	28800117 	ldw	r2,4(r5)
4000cfa4:	2cc00017 	ldw	r19,0(r5)
4000cfa8:	29400204 	addi	r5,r5,8
4000cfac:	d9402d15 	stw	r5,180(sp)
4000cfb0:	102d883a 	mov	r22,r2
4000cfb4:	10044b16 	blt	r2,zero,4000e0e4 <___vfprintf_internal_r+0x1658>
4000cfb8:	d9402917 	ldw	r5,164(sp)
4000cfbc:	df002783 	ldbu	fp,158(sp)
4000cfc0:	2803bc16 	blt	r5,zero,4000deb4 <___vfprintf_internal_r+0x1428>
4000cfc4:	00ffdfc4 	movi	r3,-129
4000cfc8:	9d84b03a 	or	r2,r19,r22
4000cfcc:	90e4703a 	and	r18,r18,r3
4000cfd0:	10017726 	beq	r2,zero,4000d5b0 <___vfprintf_internal_r+0xb24>
4000cfd4:	b0038326 	beq	r22,zero,4000dde4 <___vfprintf_internal_r+0x1358>
4000cfd8:	dc402a15 	stw	r17,168(sp)
4000cfdc:	dc001e04 	addi	r16,sp,120
4000cfe0:	b023883a 	mov	r17,r22
4000cfe4:	402d883a 	mov	r22,r8
4000cfe8:	9809883a 	mov	r4,r19
4000cfec:	880b883a 	mov	r5,r17
4000cff0:	01800284 	movi	r6,10
4000cff4:	000f883a 	mov	r7,zero
4000cff8:	0014d780 	call	40014d78 <__umoddi3>
4000cffc:	10800c04 	addi	r2,r2,48
4000d000:	843fffc4 	addi	r16,r16,-1
4000d004:	9809883a 	mov	r4,r19
4000d008:	880b883a 	mov	r5,r17
4000d00c:	80800005 	stb	r2,0(r16)
4000d010:	01800284 	movi	r6,10
4000d014:	000f883a 	mov	r7,zero
4000d018:	00148000 	call	40014800 <__udivdi3>
4000d01c:	1027883a 	mov	r19,r2
4000d020:	10c4b03a 	or	r2,r2,r3
4000d024:	1823883a 	mov	r17,r3
4000d028:	103fef1e 	bne	r2,zero,4000cfe8 <__alt_data_end+0xc000cfe8>
4000d02c:	d8c02817 	ldw	r3,160(sp)
4000d030:	dc402a17 	ldw	r17,168(sp)
4000d034:	b011883a 	mov	r8,r22
4000d038:	1c07c83a 	sub	r3,r3,r16
4000d03c:	d8c02e15 	stw	r3,184(sp)
4000d040:	00005906 	br	4000d1a8 <___vfprintf_internal_r+0x71c>
4000d044:	18c03fcc 	andi	r3,r3,255
4000d048:	1806fa1e 	bne	r3,zero,4000ec34 <___vfprintf_internal_r+0x21a8>
4000d04c:	9080020c 	andi	r2,r18,8
4000d050:	10048a26 	beq	r2,zero,4000e27c <___vfprintf_internal_r+0x17f0>
4000d054:	d8c02d17 	ldw	r3,180(sp)
4000d058:	d9002d17 	ldw	r4,180(sp)
4000d05c:	d9402d17 	ldw	r5,180(sp)
4000d060:	18c00017 	ldw	r3,0(r3)
4000d064:	21000117 	ldw	r4,4(r4)
4000d068:	29400204 	addi	r5,r5,8
4000d06c:	d8c03615 	stw	r3,216(sp)
4000d070:	d9003815 	stw	r4,224(sp)
4000d074:	d9402d15 	stw	r5,180(sp)
4000d078:	d9003617 	ldw	r4,216(sp)
4000d07c:	d9403817 	ldw	r5,224(sp)
4000d080:	da003d15 	stw	r8,244(sp)
4000d084:	04000044 	movi	r16,1
4000d088:	0012b200 	call	40012b20 <__fpclassifyd>
4000d08c:	da003d17 	ldw	r8,244(sp)
4000d090:	14041f1e 	bne	r2,r16,4000e110 <___vfprintf_internal_r+0x1684>
4000d094:	d9003617 	ldw	r4,216(sp)
4000d098:	d9403817 	ldw	r5,224(sp)
4000d09c:	000d883a 	mov	r6,zero
4000d0a0:	000f883a 	mov	r7,zero
4000d0a4:	00154140 	call	40015414 <__ledf2>
4000d0a8:	da003d17 	ldw	r8,244(sp)
4000d0ac:	1005be16 	blt	r2,zero,4000e7a8 <___vfprintf_internal_r+0x1d1c>
4000d0b0:	df002783 	ldbu	fp,158(sp)
4000d0b4:	008011c4 	movi	r2,71
4000d0b8:	1445330e 	bge	r2,r17,4000e588 <___vfprintf_internal_r+0x1afc>
4000d0bc:	041000b4 	movhi	r16,16386
4000d0c0:	843b2404 	addi	r16,r16,-4976
4000d0c4:	00c000c4 	movi	r3,3
4000d0c8:	00bfdfc4 	movi	r2,-129
4000d0cc:	d8c02a15 	stw	r3,168(sp)
4000d0d0:	90a4703a 	and	r18,r18,r2
4000d0d4:	d8c02e15 	stw	r3,184(sp)
4000d0d8:	d8002915 	stw	zero,164(sp)
4000d0dc:	d8003215 	stw	zero,200(sp)
4000d0e0:	00003706 	br	4000d1c0 <___vfprintf_internal_r+0x734>
4000d0e4:	94800214 	ori	r18,r18,8
4000d0e8:	ac400007 	ldb	r17,0(r21)
4000d0ec:	003ec806 	br	4000cc10 <__alt_data_end+0xc000cc10>
4000d0f0:	18c03fcc 	andi	r3,r3,255
4000d0f4:	1806db1e 	bne	r3,zero,4000ec64 <___vfprintf_internal_r+0x21d8>
4000d0f8:	94800414 	ori	r18,r18,16
4000d0fc:	9080080c 	andi	r2,r18,32
4000d100:	1002d826 	beq	r2,zero,4000dc64 <___vfprintf_internal_r+0x11d8>
4000d104:	d9402d17 	ldw	r5,180(sp)
4000d108:	d8c02917 	ldw	r3,164(sp)
4000d10c:	d8002785 	stb	zero,158(sp)
4000d110:	28800204 	addi	r2,r5,8
4000d114:	2cc00017 	ldw	r19,0(r5)
4000d118:	2d800117 	ldw	r22,4(r5)
4000d11c:	18048f16 	blt	r3,zero,4000e35c <___vfprintf_internal_r+0x18d0>
4000d120:	013fdfc4 	movi	r4,-129
4000d124:	9d86b03a 	or	r3,r19,r22
4000d128:	d8802d15 	stw	r2,180(sp)
4000d12c:	9124703a 	and	r18,r18,r4
4000d130:	1802d91e 	bne	r3,zero,4000dc98 <___vfprintf_internal_r+0x120c>
4000d134:	d8c02917 	ldw	r3,164(sp)
4000d138:	0039883a 	mov	fp,zero
4000d13c:	1805c326 	beq	r3,zero,4000e84c <___vfprintf_internal_r+0x1dc0>
4000d140:	0027883a 	mov	r19,zero
4000d144:	002d883a 	mov	r22,zero
4000d148:	dc001e04 	addi	r16,sp,120
4000d14c:	9806d0fa 	srli	r3,r19,3
4000d150:	b008977a 	slli	r4,r22,29
4000d154:	b02cd0fa 	srli	r22,r22,3
4000d158:	9cc001cc 	andi	r19,r19,7
4000d15c:	98800c04 	addi	r2,r19,48
4000d160:	843fffc4 	addi	r16,r16,-1
4000d164:	20e6b03a 	or	r19,r4,r3
4000d168:	80800005 	stb	r2,0(r16)
4000d16c:	9d86b03a 	or	r3,r19,r22
4000d170:	183ff61e 	bne	r3,zero,4000d14c <__alt_data_end+0xc000d14c>
4000d174:	90c0004c 	andi	r3,r18,1
4000d178:	18013b26 	beq	r3,zero,4000d668 <___vfprintf_internal_r+0xbdc>
4000d17c:	10803fcc 	andi	r2,r2,255
4000d180:	1080201c 	xori	r2,r2,128
4000d184:	10bfe004 	addi	r2,r2,-128
4000d188:	00c00c04 	movi	r3,48
4000d18c:	10c13626 	beq	r2,r3,4000d668 <___vfprintf_internal_r+0xbdc>
4000d190:	80ffffc5 	stb	r3,-1(r16)
4000d194:	d8c02817 	ldw	r3,160(sp)
4000d198:	80bfffc4 	addi	r2,r16,-1
4000d19c:	1021883a 	mov	r16,r2
4000d1a0:	1887c83a 	sub	r3,r3,r2
4000d1a4:	d8c02e15 	stw	r3,184(sp)
4000d1a8:	d8802e17 	ldw	r2,184(sp)
4000d1ac:	d9002917 	ldw	r4,164(sp)
4000d1b0:	1100010e 	bge	r2,r4,4000d1b8 <___vfprintf_internal_r+0x72c>
4000d1b4:	2005883a 	mov	r2,r4
4000d1b8:	d8802a15 	stw	r2,168(sp)
4000d1bc:	d8003215 	stw	zero,200(sp)
4000d1c0:	e7003fcc 	andi	fp,fp,255
4000d1c4:	e700201c 	xori	fp,fp,128
4000d1c8:	e73fe004 	addi	fp,fp,-128
4000d1cc:	e0000326 	beq	fp,zero,4000d1dc <___vfprintf_internal_r+0x750>
4000d1d0:	d8c02a17 	ldw	r3,168(sp)
4000d1d4:	18c00044 	addi	r3,r3,1
4000d1d8:	d8c02a15 	stw	r3,168(sp)
4000d1dc:	90c0008c 	andi	r3,r18,2
4000d1e0:	d8c02b15 	stw	r3,172(sp)
4000d1e4:	18000326 	beq	r3,zero,4000d1f4 <___vfprintf_internal_r+0x768>
4000d1e8:	d8c02a17 	ldw	r3,168(sp)
4000d1ec:	18c00084 	addi	r3,r3,2
4000d1f0:	d8c02a15 	stw	r3,168(sp)
4000d1f4:	90c0210c 	andi	r3,r18,132
4000d1f8:	d8c03015 	stw	r3,192(sp)
4000d1fc:	1801a31e 	bne	r3,zero,4000d88c <___vfprintf_internal_r+0xe00>
4000d200:	d9003117 	ldw	r4,196(sp)
4000d204:	d8c02a17 	ldw	r3,168(sp)
4000d208:	20e7c83a 	sub	r19,r4,r3
4000d20c:	04c19f0e 	bge	zero,r19,4000d88c <___vfprintf_internal_r+0xe00>
4000d210:	02400404 	movi	r9,16
4000d214:	d8c02017 	ldw	r3,128(sp)
4000d218:	d8801f17 	ldw	r2,124(sp)
4000d21c:	4cc50d0e 	bge	r9,r19,4000e654 <___vfprintf_internal_r+0x1bc8>
4000d220:	015000b4 	movhi	r5,16386
4000d224:	297b36c4 	addi	r5,r5,-4901
4000d228:	dc403b15 	stw	r17,236(sp)
4000d22c:	d9403515 	stw	r5,212(sp)
4000d230:	9823883a 	mov	r17,r19
4000d234:	482d883a 	mov	r22,r9
4000d238:	9027883a 	mov	r19,r18
4000d23c:	070001c4 	movi	fp,7
4000d240:	8025883a 	mov	r18,r16
4000d244:	dc002c17 	ldw	r16,176(sp)
4000d248:	00000306 	br	4000d258 <___vfprintf_internal_r+0x7cc>
4000d24c:	8c7ffc04 	addi	r17,r17,-16
4000d250:	42000204 	addi	r8,r8,8
4000d254:	b440130e 	bge	r22,r17,4000d2a4 <___vfprintf_internal_r+0x818>
4000d258:	011000b4 	movhi	r4,16386
4000d25c:	18c00404 	addi	r3,r3,16
4000d260:	10800044 	addi	r2,r2,1
4000d264:	213b36c4 	addi	r4,r4,-4901
4000d268:	41000015 	stw	r4,0(r8)
4000d26c:	45800115 	stw	r22,4(r8)
4000d270:	d8c02015 	stw	r3,128(sp)
4000d274:	d8801f15 	stw	r2,124(sp)
4000d278:	e0bff40e 	bge	fp,r2,4000d24c <__alt_data_end+0xc000d24c>
4000d27c:	d9801e04 	addi	r6,sp,120
4000d280:	b80b883a 	mov	r5,r23
4000d284:	8009883a 	mov	r4,r16
4000d288:	0012d6c0 	call	40012d6c <__sprint_r>
4000d28c:	103f011e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000d290:	8c7ffc04 	addi	r17,r17,-16
4000d294:	d8c02017 	ldw	r3,128(sp)
4000d298:	d8801f17 	ldw	r2,124(sp)
4000d29c:	da000404 	addi	r8,sp,16
4000d2a0:	b47fed16 	blt	r22,r17,4000d258 <__alt_data_end+0xc000d258>
4000d2a4:	9021883a 	mov	r16,r18
4000d2a8:	9825883a 	mov	r18,r19
4000d2ac:	8827883a 	mov	r19,r17
4000d2b0:	dc403b17 	ldw	r17,236(sp)
4000d2b4:	d9403517 	ldw	r5,212(sp)
4000d2b8:	98c7883a 	add	r3,r19,r3
4000d2bc:	10800044 	addi	r2,r2,1
4000d2c0:	41400015 	stw	r5,0(r8)
4000d2c4:	44c00115 	stw	r19,4(r8)
4000d2c8:	d8c02015 	stw	r3,128(sp)
4000d2cc:	d8801f15 	stw	r2,124(sp)
4000d2d0:	010001c4 	movi	r4,7
4000d2d4:	2082a316 	blt	r4,r2,4000dd64 <___vfprintf_internal_r+0x12d8>
4000d2d8:	df002787 	ldb	fp,158(sp)
4000d2dc:	42000204 	addi	r8,r8,8
4000d2e0:	e0000c26 	beq	fp,zero,4000d314 <___vfprintf_internal_r+0x888>
4000d2e4:	d8801f17 	ldw	r2,124(sp)
4000d2e8:	d9002784 	addi	r4,sp,158
4000d2ec:	18c00044 	addi	r3,r3,1
4000d2f0:	10800044 	addi	r2,r2,1
4000d2f4:	41000015 	stw	r4,0(r8)
4000d2f8:	01000044 	movi	r4,1
4000d2fc:	41000115 	stw	r4,4(r8)
4000d300:	d8c02015 	stw	r3,128(sp)
4000d304:	d8801f15 	stw	r2,124(sp)
4000d308:	010001c4 	movi	r4,7
4000d30c:	20823c16 	blt	r4,r2,4000dc00 <___vfprintf_internal_r+0x1174>
4000d310:	42000204 	addi	r8,r8,8
4000d314:	d8802b17 	ldw	r2,172(sp)
4000d318:	10000c26 	beq	r2,zero,4000d34c <___vfprintf_internal_r+0x8c0>
4000d31c:	d8801f17 	ldw	r2,124(sp)
4000d320:	d9002704 	addi	r4,sp,156
4000d324:	18c00084 	addi	r3,r3,2
4000d328:	10800044 	addi	r2,r2,1
4000d32c:	41000015 	stw	r4,0(r8)
4000d330:	01000084 	movi	r4,2
4000d334:	41000115 	stw	r4,4(r8)
4000d338:	d8c02015 	stw	r3,128(sp)
4000d33c:	d8801f15 	stw	r2,124(sp)
4000d340:	010001c4 	movi	r4,7
4000d344:	20823616 	blt	r4,r2,4000dc20 <___vfprintf_internal_r+0x1194>
4000d348:	42000204 	addi	r8,r8,8
4000d34c:	d9003017 	ldw	r4,192(sp)
4000d350:	00802004 	movi	r2,128
4000d354:	20819926 	beq	r4,r2,4000d9bc <___vfprintf_internal_r+0xf30>
4000d358:	d9402917 	ldw	r5,164(sp)
4000d35c:	d8802e17 	ldw	r2,184(sp)
4000d360:	28adc83a 	sub	r22,r5,r2
4000d364:	0580310e 	bge	zero,r22,4000d42c <___vfprintf_internal_r+0x9a0>
4000d368:	07000404 	movi	fp,16
4000d36c:	d8801f17 	ldw	r2,124(sp)
4000d370:	e584140e 	bge	fp,r22,4000e3c4 <___vfprintf_internal_r+0x1938>
4000d374:	015000b4 	movhi	r5,16386
4000d378:	297b32c4 	addi	r5,r5,-4917
4000d37c:	dc402915 	stw	r17,164(sp)
4000d380:	d9402b15 	stw	r5,172(sp)
4000d384:	b023883a 	mov	r17,r22
4000d388:	04c001c4 	movi	r19,7
4000d38c:	a82d883a 	mov	r22,r21
4000d390:	902b883a 	mov	r21,r18
4000d394:	8025883a 	mov	r18,r16
4000d398:	dc002c17 	ldw	r16,176(sp)
4000d39c:	00000306 	br	4000d3ac <___vfprintf_internal_r+0x920>
4000d3a0:	8c7ffc04 	addi	r17,r17,-16
4000d3a4:	42000204 	addi	r8,r8,8
4000d3a8:	e440110e 	bge	fp,r17,4000d3f0 <___vfprintf_internal_r+0x964>
4000d3ac:	18c00404 	addi	r3,r3,16
4000d3b0:	10800044 	addi	r2,r2,1
4000d3b4:	45000015 	stw	r20,0(r8)
4000d3b8:	47000115 	stw	fp,4(r8)
4000d3bc:	d8c02015 	stw	r3,128(sp)
4000d3c0:	d8801f15 	stw	r2,124(sp)
4000d3c4:	98bff60e 	bge	r19,r2,4000d3a0 <__alt_data_end+0xc000d3a0>
4000d3c8:	d9801e04 	addi	r6,sp,120
4000d3cc:	b80b883a 	mov	r5,r23
4000d3d0:	8009883a 	mov	r4,r16
4000d3d4:	0012d6c0 	call	40012d6c <__sprint_r>
4000d3d8:	103eae1e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000d3dc:	8c7ffc04 	addi	r17,r17,-16
4000d3e0:	d8c02017 	ldw	r3,128(sp)
4000d3e4:	d8801f17 	ldw	r2,124(sp)
4000d3e8:	da000404 	addi	r8,sp,16
4000d3ec:	e47fef16 	blt	fp,r17,4000d3ac <__alt_data_end+0xc000d3ac>
4000d3f0:	9021883a 	mov	r16,r18
4000d3f4:	a825883a 	mov	r18,r21
4000d3f8:	b02b883a 	mov	r21,r22
4000d3fc:	882d883a 	mov	r22,r17
4000d400:	dc402917 	ldw	r17,164(sp)
4000d404:	d9002b17 	ldw	r4,172(sp)
4000d408:	1d87883a 	add	r3,r3,r22
4000d40c:	10800044 	addi	r2,r2,1
4000d410:	41000015 	stw	r4,0(r8)
4000d414:	45800115 	stw	r22,4(r8)
4000d418:	d8c02015 	stw	r3,128(sp)
4000d41c:	d8801f15 	stw	r2,124(sp)
4000d420:	010001c4 	movi	r4,7
4000d424:	2081ee16 	blt	r4,r2,4000dbe0 <___vfprintf_internal_r+0x1154>
4000d428:	42000204 	addi	r8,r8,8
4000d42c:	9080400c 	andi	r2,r18,256
4000d430:	1001181e 	bne	r2,zero,4000d894 <___vfprintf_internal_r+0xe08>
4000d434:	d9402e17 	ldw	r5,184(sp)
4000d438:	d8801f17 	ldw	r2,124(sp)
4000d43c:	44000015 	stw	r16,0(r8)
4000d440:	1947883a 	add	r3,r3,r5
4000d444:	10800044 	addi	r2,r2,1
4000d448:	41400115 	stw	r5,4(r8)
4000d44c:	d8c02015 	stw	r3,128(sp)
4000d450:	d8801f15 	stw	r2,124(sp)
4000d454:	010001c4 	movi	r4,7
4000d458:	2081d316 	blt	r4,r2,4000dba8 <___vfprintf_internal_r+0x111c>
4000d45c:	42000204 	addi	r8,r8,8
4000d460:	9480010c 	andi	r18,r18,4
4000d464:	90003226 	beq	r18,zero,4000d530 <___vfprintf_internal_r+0xaa4>
4000d468:	d9403117 	ldw	r5,196(sp)
4000d46c:	d8802a17 	ldw	r2,168(sp)
4000d470:	28a1c83a 	sub	r16,r5,r2
4000d474:	04002e0e 	bge	zero,r16,4000d530 <___vfprintf_internal_r+0xaa4>
4000d478:	04400404 	movi	r17,16
4000d47c:	d8801f17 	ldw	r2,124(sp)
4000d480:	8c04a20e 	bge	r17,r16,4000e70c <___vfprintf_internal_r+0x1c80>
4000d484:	015000b4 	movhi	r5,16386
4000d488:	297b36c4 	addi	r5,r5,-4901
4000d48c:	d9403515 	stw	r5,212(sp)
4000d490:	048001c4 	movi	r18,7
4000d494:	dcc02c17 	ldw	r19,176(sp)
4000d498:	00000306 	br	4000d4a8 <___vfprintf_internal_r+0xa1c>
4000d49c:	843ffc04 	addi	r16,r16,-16
4000d4a0:	42000204 	addi	r8,r8,8
4000d4a4:	8c00130e 	bge	r17,r16,4000d4f4 <___vfprintf_internal_r+0xa68>
4000d4a8:	011000b4 	movhi	r4,16386
4000d4ac:	18c00404 	addi	r3,r3,16
4000d4b0:	10800044 	addi	r2,r2,1
4000d4b4:	213b36c4 	addi	r4,r4,-4901
4000d4b8:	41000015 	stw	r4,0(r8)
4000d4bc:	44400115 	stw	r17,4(r8)
4000d4c0:	d8c02015 	stw	r3,128(sp)
4000d4c4:	d8801f15 	stw	r2,124(sp)
4000d4c8:	90bff40e 	bge	r18,r2,4000d49c <__alt_data_end+0xc000d49c>
4000d4cc:	d9801e04 	addi	r6,sp,120
4000d4d0:	b80b883a 	mov	r5,r23
4000d4d4:	9809883a 	mov	r4,r19
4000d4d8:	0012d6c0 	call	40012d6c <__sprint_r>
4000d4dc:	103e6d1e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000d4e0:	843ffc04 	addi	r16,r16,-16
4000d4e4:	d8c02017 	ldw	r3,128(sp)
4000d4e8:	d8801f17 	ldw	r2,124(sp)
4000d4ec:	da000404 	addi	r8,sp,16
4000d4f0:	8c3fed16 	blt	r17,r16,4000d4a8 <__alt_data_end+0xc000d4a8>
4000d4f4:	d9403517 	ldw	r5,212(sp)
4000d4f8:	1c07883a 	add	r3,r3,r16
4000d4fc:	10800044 	addi	r2,r2,1
4000d500:	41400015 	stw	r5,0(r8)
4000d504:	44000115 	stw	r16,4(r8)
4000d508:	d8c02015 	stw	r3,128(sp)
4000d50c:	d8801f15 	stw	r2,124(sp)
4000d510:	010001c4 	movi	r4,7
4000d514:	2080060e 	bge	r4,r2,4000d530 <___vfprintf_internal_r+0xaa4>
4000d518:	d9002c17 	ldw	r4,176(sp)
4000d51c:	d9801e04 	addi	r6,sp,120
4000d520:	b80b883a 	mov	r5,r23
4000d524:	0012d6c0 	call	40012d6c <__sprint_r>
4000d528:	103e5a1e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000d52c:	d8c02017 	ldw	r3,128(sp)
4000d530:	d8803117 	ldw	r2,196(sp)
4000d534:	d9002a17 	ldw	r4,168(sp)
4000d538:	1100010e 	bge	r2,r4,4000d540 <___vfprintf_internal_r+0xab4>
4000d53c:	2005883a 	mov	r2,r4
4000d540:	d9402f17 	ldw	r5,188(sp)
4000d544:	288b883a 	add	r5,r5,r2
4000d548:	d9402f15 	stw	r5,188(sp)
4000d54c:	18019e1e 	bne	r3,zero,4000dbc8 <___vfprintf_internal_r+0x113c>
4000d550:	a8800007 	ldb	r2,0(r21)
4000d554:	d8001f15 	stw	zero,124(sp)
4000d558:	da000404 	addi	r8,sp,16
4000d55c:	103d851e 	bne	r2,zero,4000cb74 <__alt_data_end+0xc000cb74>
4000d560:	a821883a 	mov	r16,r21
4000d564:	003d9b06 	br	4000cbd4 <__alt_data_end+0xc000cbd4>
4000d568:	18c03fcc 	andi	r3,r3,255
4000d56c:	1805c11e 	bne	r3,zero,4000ec74 <___vfprintf_internal_r+0x21e8>
4000d570:	94800414 	ori	r18,r18,16
4000d574:	9080080c 	andi	r2,r18,32
4000d578:	10020c26 	beq	r2,zero,4000ddac <___vfprintf_internal_r+0x1320>
4000d57c:	d8802d17 	ldw	r2,180(sp)
4000d580:	d9002917 	ldw	r4,164(sp)
4000d584:	d8002785 	stb	zero,158(sp)
4000d588:	10c00204 	addi	r3,r2,8
4000d58c:	14c00017 	ldw	r19,0(r2)
4000d590:	15800117 	ldw	r22,4(r2)
4000d594:	20040f16 	blt	r4,zero,4000e5d4 <___vfprintf_internal_r+0x1b48>
4000d598:	013fdfc4 	movi	r4,-129
4000d59c:	9d84b03a 	or	r2,r19,r22
4000d5a0:	d8c02d15 	stw	r3,180(sp)
4000d5a4:	9124703a 	and	r18,r18,r4
4000d5a8:	0039883a 	mov	fp,zero
4000d5ac:	103e891e 	bne	r2,zero,4000cfd4 <__alt_data_end+0xc000cfd4>
4000d5b0:	d9002917 	ldw	r4,164(sp)
4000d5b4:	2002c11e 	bne	r4,zero,4000e0bc <___vfprintf_internal_r+0x1630>
4000d5b8:	d8002915 	stw	zero,164(sp)
4000d5bc:	d8002e15 	stw	zero,184(sp)
4000d5c0:	dc001e04 	addi	r16,sp,120
4000d5c4:	003ef806 	br	4000d1a8 <__alt_data_end+0xc000d1a8>
4000d5c8:	18c03fcc 	andi	r3,r3,255
4000d5cc:	18059d1e 	bne	r3,zero,4000ec44 <___vfprintf_internal_r+0x21b8>
4000d5d0:	015000b4 	movhi	r5,16386
4000d5d4:	297b2704 	addi	r5,r5,-4964
4000d5d8:	d9403915 	stw	r5,228(sp)
4000d5dc:	9080080c 	andi	r2,r18,32
4000d5e0:	10005226 	beq	r2,zero,4000d72c <___vfprintf_internal_r+0xca0>
4000d5e4:	d8802d17 	ldw	r2,180(sp)
4000d5e8:	14c00017 	ldw	r19,0(r2)
4000d5ec:	15800117 	ldw	r22,4(r2)
4000d5f0:	10800204 	addi	r2,r2,8
4000d5f4:	d8802d15 	stw	r2,180(sp)
4000d5f8:	9080004c 	andi	r2,r18,1
4000d5fc:	10019026 	beq	r2,zero,4000dc40 <___vfprintf_internal_r+0x11b4>
4000d600:	9d84b03a 	or	r2,r19,r22
4000d604:	10036926 	beq	r2,zero,4000e3ac <___vfprintf_internal_r+0x1920>
4000d608:	d8c02917 	ldw	r3,164(sp)
4000d60c:	00800c04 	movi	r2,48
4000d610:	d8802705 	stb	r2,156(sp)
4000d614:	dc402745 	stb	r17,157(sp)
4000d618:	d8002785 	stb	zero,158(sp)
4000d61c:	90800094 	ori	r2,r18,2
4000d620:	18045d16 	blt	r3,zero,4000e798 <___vfprintf_internal_r+0x1d0c>
4000d624:	00bfdfc4 	movi	r2,-129
4000d628:	90a4703a 	and	r18,r18,r2
4000d62c:	94800094 	ori	r18,r18,2
4000d630:	0039883a 	mov	fp,zero
4000d634:	d9003917 	ldw	r4,228(sp)
4000d638:	dc001e04 	addi	r16,sp,120
4000d63c:	988003cc 	andi	r2,r19,15
4000d640:	b006973a 	slli	r3,r22,28
4000d644:	2085883a 	add	r2,r4,r2
4000d648:	9826d13a 	srli	r19,r19,4
4000d64c:	10800003 	ldbu	r2,0(r2)
4000d650:	b02cd13a 	srli	r22,r22,4
4000d654:	843fffc4 	addi	r16,r16,-1
4000d658:	1ce6b03a 	or	r19,r3,r19
4000d65c:	80800005 	stb	r2,0(r16)
4000d660:	9d84b03a 	or	r2,r19,r22
4000d664:	103ff51e 	bne	r2,zero,4000d63c <__alt_data_end+0xc000d63c>
4000d668:	d8c02817 	ldw	r3,160(sp)
4000d66c:	1c07c83a 	sub	r3,r3,r16
4000d670:	d8c02e15 	stw	r3,184(sp)
4000d674:	003ecc06 	br	4000d1a8 <__alt_data_end+0xc000d1a8>
4000d678:	18c03fcc 	andi	r3,r3,255
4000d67c:	183e9f26 	beq	r3,zero,4000d0fc <__alt_data_end+0xc000d0fc>
4000d680:	d9c02785 	stb	r7,158(sp)
4000d684:	003e9d06 	br	4000d0fc <__alt_data_end+0xc000d0fc>
4000d688:	00c00044 	movi	r3,1
4000d68c:	01c00ac4 	movi	r7,43
4000d690:	ac400007 	ldb	r17,0(r21)
4000d694:	003d5e06 	br	4000cc10 <__alt_data_end+0xc000cc10>
4000d698:	94800814 	ori	r18,r18,32
4000d69c:	ac400007 	ldb	r17,0(r21)
4000d6a0:	003d5b06 	br	4000cc10 <__alt_data_end+0xc000cc10>
4000d6a4:	d8c02d17 	ldw	r3,180(sp)
4000d6a8:	d8002785 	stb	zero,158(sp)
4000d6ac:	1c000017 	ldw	r16,0(r3)
4000d6b0:	1cc00104 	addi	r19,r3,4
4000d6b4:	80041926 	beq	r16,zero,4000e71c <___vfprintf_internal_r+0x1c90>
4000d6b8:	d9002917 	ldw	r4,164(sp)
4000d6bc:	2003d016 	blt	r4,zero,4000e600 <___vfprintf_internal_r+0x1b74>
4000d6c0:	200d883a 	mov	r6,r4
4000d6c4:	000b883a 	mov	r5,zero
4000d6c8:	8009883a 	mov	r4,r16
4000d6cc:	da003d15 	stw	r8,244(sp)
4000d6d0:	00111b80 	call	400111b8 <memchr>
4000d6d4:	da003d17 	ldw	r8,244(sp)
4000d6d8:	10045426 	beq	r2,zero,4000e82c <___vfprintf_internal_r+0x1da0>
4000d6dc:	1405c83a 	sub	r2,r2,r16
4000d6e0:	d8802e15 	stw	r2,184(sp)
4000d6e4:	1003cc16 	blt	r2,zero,4000e618 <___vfprintf_internal_r+0x1b8c>
4000d6e8:	df002783 	ldbu	fp,158(sp)
4000d6ec:	d8802a15 	stw	r2,168(sp)
4000d6f0:	dcc02d15 	stw	r19,180(sp)
4000d6f4:	d8002915 	stw	zero,164(sp)
4000d6f8:	d8003215 	stw	zero,200(sp)
4000d6fc:	003eb006 	br	4000d1c0 <__alt_data_end+0xc000d1c0>
4000d700:	18c03fcc 	andi	r3,r3,255
4000d704:	183f9b26 	beq	r3,zero,4000d574 <__alt_data_end+0xc000d574>
4000d708:	d9c02785 	stb	r7,158(sp)
4000d70c:	003f9906 	br	4000d574 <__alt_data_end+0xc000d574>
4000d710:	18c03fcc 	andi	r3,r3,255
4000d714:	1805551e 	bne	r3,zero,4000ec6c <___vfprintf_internal_r+0x21e0>
4000d718:	015000b4 	movhi	r5,16386
4000d71c:	297b2c04 	addi	r5,r5,-4944
4000d720:	d9403915 	stw	r5,228(sp)
4000d724:	9080080c 	andi	r2,r18,32
4000d728:	103fae1e 	bne	r2,zero,4000d5e4 <__alt_data_end+0xc000d5e4>
4000d72c:	9080040c 	andi	r2,r18,16
4000d730:	1002de26 	beq	r2,zero,4000e2ac <___vfprintf_internal_r+0x1820>
4000d734:	d8c02d17 	ldw	r3,180(sp)
4000d738:	002d883a 	mov	r22,zero
4000d73c:	1cc00017 	ldw	r19,0(r3)
4000d740:	18c00104 	addi	r3,r3,4
4000d744:	d8c02d15 	stw	r3,180(sp)
4000d748:	003fab06 	br	4000d5f8 <__alt_data_end+0xc000d5f8>
4000d74c:	38803fcc 	andi	r2,r7,255
4000d750:	1080201c 	xori	r2,r2,128
4000d754:	10bfe004 	addi	r2,r2,-128
4000d758:	1002d21e 	bne	r2,zero,4000e2a4 <___vfprintf_internal_r+0x1818>
4000d75c:	00c00044 	movi	r3,1
4000d760:	01c00804 	movi	r7,32
4000d764:	ac400007 	ldb	r17,0(r21)
4000d768:	003d2906 	br	4000cc10 <__alt_data_end+0xc000cc10>
4000d76c:	94800054 	ori	r18,r18,1
4000d770:	ac400007 	ldb	r17,0(r21)
4000d774:	003d2606 	br	4000cc10 <__alt_data_end+0xc000cc10>
4000d778:	18c03fcc 	andi	r3,r3,255
4000d77c:	183e0526 	beq	r3,zero,4000cf94 <__alt_data_end+0xc000cf94>
4000d780:	d9c02785 	stb	r7,158(sp)
4000d784:	003e0306 	br	4000cf94 <__alt_data_end+0xc000cf94>
4000d788:	94801014 	ori	r18,r18,64
4000d78c:	ac400007 	ldb	r17,0(r21)
4000d790:	003d1f06 	br	4000cc10 <__alt_data_end+0xc000cc10>
4000d794:	ac400007 	ldb	r17,0(r21)
4000d798:	8a438726 	beq	r17,r9,4000e5b8 <___vfprintf_internal_r+0x1b2c>
4000d79c:	94800414 	ori	r18,r18,16
4000d7a0:	003d1b06 	br	4000cc10 <__alt_data_end+0xc000cc10>
4000d7a4:	18c03fcc 	andi	r3,r3,255
4000d7a8:	1805341e 	bne	r3,zero,4000ec7c <___vfprintf_internal_r+0x21f0>
4000d7ac:	9080080c 	andi	r2,r18,32
4000d7b0:	1002cd26 	beq	r2,zero,4000e2e8 <___vfprintf_internal_r+0x185c>
4000d7b4:	d9402d17 	ldw	r5,180(sp)
4000d7b8:	d9002f17 	ldw	r4,188(sp)
4000d7bc:	28800017 	ldw	r2,0(r5)
4000d7c0:	2007d7fa 	srai	r3,r4,31
4000d7c4:	29400104 	addi	r5,r5,4
4000d7c8:	d9402d15 	stw	r5,180(sp)
4000d7cc:	11000015 	stw	r4,0(r2)
4000d7d0:	10c00115 	stw	r3,4(r2)
4000d7d4:	003ce506 	br	4000cb6c <__alt_data_end+0xc000cb6c>
4000d7d8:	d8c02d17 	ldw	r3,180(sp)
4000d7dc:	d9002d17 	ldw	r4,180(sp)
4000d7e0:	d8002785 	stb	zero,158(sp)
4000d7e4:	18800017 	ldw	r2,0(r3)
4000d7e8:	21000104 	addi	r4,r4,4
4000d7ec:	00c00044 	movi	r3,1
4000d7f0:	d8c02a15 	stw	r3,168(sp)
4000d7f4:	d8801405 	stb	r2,80(sp)
4000d7f8:	d9002d15 	stw	r4,180(sp)
4000d7fc:	d8c02e15 	stw	r3,184(sp)
4000d800:	d8002915 	stw	zero,164(sp)
4000d804:	d8003215 	stw	zero,200(sp)
4000d808:	dc001404 	addi	r16,sp,80
4000d80c:	0039883a 	mov	fp,zero
4000d810:	003e7206 	br	4000d1dc <__alt_data_end+0xc000d1dc>
4000d814:	011000b4 	movhi	r4,16386
4000d818:	213b2c04 	addi	r4,r4,-4944
4000d81c:	0039883a 	mov	fp,zero
4000d820:	d9003915 	stw	r4,228(sp)
4000d824:	04401e04 	movi	r17,120
4000d828:	003f8206 	br	4000d634 <__alt_data_end+0xc000d634>
4000d82c:	18c03fcc 	andi	r3,r3,255
4000d830:	1805061e 	bne	r3,zero,4000ec4c <___vfprintf_internal_r+0x21c0>
4000d834:	883d9126 	beq	r17,zero,4000ce7c <__alt_data_end+0xc000ce7c>
4000d838:	00c00044 	movi	r3,1
4000d83c:	d8c02a15 	stw	r3,168(sp)
4000d840:	dc401405 	stb	r17,80(sp)
4000d844:	d8002785 	stb	zero,158(sp)
4000d848:	003fec06 	br	4000d7fc <__alt_data_end+0xc000d7fc>
4000d84c:	015000b4 	movhi	r5,16386
4000d850:	297b2c04 	addi	r5,r5,-4944
4000d854:	d9403915 	stw	r5,228(sp)
4000d858:	d8c02d15 	stw	r3,180(sp)
4000d85c:	1025883a 	mov	r18,r2
4000d860:	04401e04 	movi	r17,120
4000d864:	9d84b03a 	or	r2,r19,r22
4000d868:	1000fc1e 	bne	r2,zero,4000dc5c <___vfprintf_internal_r+0x11d0>
4000d86c:	0039883a 	mov	fp,zero
4000d870:	00800084 	movi	r2,2
4000d874:	10803fcc 	andi	r2,r2,255
4000d878:	00c00044 	movi	r3,1
4000d87c:	10c20f26 	beq	r2,r3,4000e0bc <___vfprintf_internal_r+0x1630>
4000d880:	00c00084 	movi	r3,2
4000d884:	10fd6326 	beq	r2,r3,4000ce14 <__alt_data_end+0xc000ce14>
4000d888:	003e2d06 	br	4000d140 <__alt_data_end+0xc000d140>
4000d88c:	d8c02017 	ldw	r3,128(sp)
4000d890:	003e9306 	br	4000d2e0 <__alt_data_end+0xc000d2e0>
4000d894:	00801944 	movi	r2,101
4000d898:	14407e0e 	bge	r2,r17,4000da94 <___vfprintf_internal_r+0x1008>
4000d89c:	d9003617 	ldw	r4,216(sp)
4000d8a0:	d9403817 	ldw	r5,224(sp)
4000d8a4:	000d883a 	mov	r6,zero
4000d8a8:	000f883a 	mov	r7,zero
4000d8ac:	d8c03c15 	stw	r3,240(sp)
4000d8b0:	da003d15 	stw	r8,244(sp)
4000d8b4:	00152b00 	call	400152b0 <__eqdf2>
4000d8b8:	d8c03c17 	ldw	r3,240(sp)
4000d8bc:	da003d17 	ldw	r8,244(sp)
4000d8c0:	1000f71e 	bne	r2,zero,4000dca0 <___vfprintf_internal_r+0x1214>
4000d8c4:	d8801f17 	ldw	r2,124(sp)
4000d8c8:	011000b4 	movhi	r4,16386
4000d8cc:	21387404 	addi	r4,r4,-7728
4000d8d0:	18c00044 	addi	r3,r3,1
4000d8d4:	10800044 	addi	r2,r2,1
4000d8d8:	41000015 	stw	r4,0(r8)
4000d8dc:	01000044 	movi	r4,1
4000d8e0:	41000115 	stw	r4,4(r8)
4000d8e4:	d8c02015 	stw	r3,128(sp)
4000d8e8:	d8801f15 	stw	r2,124(sp)
4000d8ec:	010001c4 	movi	r4,7
4000d8f0:	2082b816 	blt	r4,r2,4000e3d4 <___vfprintf_internal_r+0x1948>
4000d8f4:	42000204 	addi	r8,r8,8
4000d8f8:	d8802617 	ldw	r2,152(sp)
4000d8fc:	d9403317 	ldw	r5,204(sp)
4000d900:	11400216 	blt	r2,r5,4000d90c <___vfprintf_internal_r+0xe80>
4000d904:	9080004c 	andi	r2,r18,1
4000d908:	103ed526 	beq	r2,zero,4000d460 <__alt_data_end+0xc000d460>
4000d90c:	d8803717 	ldw	r2,220(sp)
4000d910:	d9003417 	ldw	r4,208(sp)
4000d914:	d9403717 	ldw	r5,220(sp)
4000d918:	1887883a 	add	r3,r3,r2
4000d91c:	d8801f17 	ldw	r2,124(sp)
4000d920:	41000015 	stw	r4,0(r8)
4000d924:	41400115 	stw	r5,4(r8)
4000d928:	10800044 	addi	r2,r2,1
4000d92c:	d8c02015 	stw	r3,128(sp)
4000d930:	d8801f15 	stw	r2,124(sp)
4000d934:	010001c4 	movi	r4,7
4000d938:	20832916 	blt	r4,r2,4000e5e0 <___vfprintf_internal_r+0x1b54>
4000d93c:	42000204 	addi	r8,r8,8
4000d940:	d8803317 	ldw	r2,204(sp)
4000d944:	143fffc4 	addi	r16,r2,-1
4000d948:	043ec50e 	bge	zero,r16,4000d460 <__alt_data_end+0xc000d460>
4000d94c:	04400404 	movi	r17,16
4000d950:	d8801f17 	ldw	r2,124(sp)
4000d954:	8c00880e 	bge	r17,r16,4000db78 <___vfprintf_internal_r+0x10ec>
4000d958:	015000b4 	movhi	r5,16386
4000d95c:	297b32c4 	addi	r5,r5,-4917
4000d960:	d9402b15 	stw	r5,172(sp)
4000d964:	058001c4 	movi	r22,7
4000d968:	dcc02c17 	ldw	r19,176(sp)
4000d96c:	00000306 	br	4000d97c <___vfprintf_internal_r+0xef0>
4000d970:	42000204 	addi	r8,r8,8
4000d974:	843ffc04 	addi	r16,r16,-16
4000d978:	8c00820e 	bge	r17,r16,4000db84 <___vfprintf_internal_r+0x10f8>
4000d97c:	18c00404 	addi	r3,r3,16
4000d980:	10800044 	addi	r2,r2,1
4000d984:	45000015 	stw	r20,0(r8)
4000d988:	44400115 	stw	r17,4(r8)
4000d98c:	d8c02015 	stw	r3,128(sp)
4000d990:	d8801f15 	stw	r2,124(sp)
4000d994:	b0bff60e 	bge	r22,r2,4000d970 <__alt_data_end+0xc000d970>
4000d998:	d9801e04 	addi	r6,sp,120
4000d99c:	b80b883a 	mov	r5,r23
4000d9a0:	9809883a 	mov	r4,r19
4000d9a4:	0012d6c0 	call	40012d6c <__sprint_r>
4000d9a8:	103d3a1e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000d9ac:	d8c02017 	ldw	r3,128(sp)
4000d9b0:	d8801f17 	ldw	r2,124(sp)
4000d9b4:	da000404 	addi	r8,sp,16
4000d9b8:	003fee06 	br	4000d974 <__alt_data_end+0xc000d974>
4000d9bc:	d9403117 	ldw	r5,196(sp)
4000d9c0:	d8802a17 	ldw	r2,168(sp)
4000d9c4:	28adc83a 	sub	r22,r5,r2
4000d9c8:	05be630e 	bge	zero,r22,4000d358 <__alt_data_end+0xc000d358>
4000d9cc:	07000404 	movi	fp,16
4000d9d0:	d8801f17 	ldw	r2,124(sp)
4000d9d4:	e5838f0e 	bge	fp,r22,4000e814 <___vfprintf_internal_r+0x1d88>
4000d9d8:	015000b4 	movhi	r5,16386
4000d9dc:	297b32c4 	addi	r5,r5,-4917
4000d9e0:	dc403015 	stw	r17,192(sp)
4000d9e4:	d9402b15 	stw	r5,172(sp)
4000d9e8:	b023883a 	mov	r17,r22
4000d9ec:	04c001c4 	movi	r19,7
4000d9f0:	a82d883a 	mov	r22,r21
4000d9f4:	902b883a 	mov	r21,r18
4000d9f8:	8025883a 	mov	r18,r16
4000d9fc:	dc002c17 	ldw	r16,176(sp)
4000da00:	00000306 	br	4000da10 <___vfprintf_internal_r+0xf84>
4000da04:	8c7ffc04 	addi	r17,r17,-16
4000da08:	42000204 	addi	r8,r8,8
4000da0c:	e440110e 	bge	fp,r17,4000da54 <___vfprintf_internal_r+0xfc8>
4000da10:	18c00404 	addi	r3,r3,16
4000da14:	10800044 	addi	r2,r2,1
4000da18:	45000015 	stw	r20,0(r8)
4000da1c:	47000115 	stw	fp,4(r8)
4000da20:	d8c02015 	stw	r3,128(sp)
4000da24:	d8801f15 	stw	r2,124(sp)
4000da28:	98bff60e 	bge	r19,r2,4000da04 <__alt_data_end+0xc000da04>
4000da2c:	d9801e04 	addi	r6,sp,120
4000da30:	b80b883a 	mov	r5,r23
4000da34:	8009883a 	mov	r4,r16
4000da38:	0012d6c0 	call	40012d6c <__sprint_r>
4000da3c:	103d151e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000da40:	8c7ffc04 	addi	r17,r17,-16
4000da44:	d8c02017 	ldw	r3,128(sp)
4000da48:	d8801f17 	ldw	r2,124(sp)
4000da4c:	da000404 	addi	r8,sp,16
4000da50:	e47fef16 	blt	fp,r17,4000da10 <__alt_data_end+0xc000da10>
4000da54:	9021883a 	mov	r16,r18
4000da58:	a825883a 	mov	r18,r21
4000da5c:	b02b883a 	mov	r21,r22
4000da60:	882d883a 	mov	r22,r17
4000da64:	dc403017 	ldw	r17,192(sp)
4000da68:	d9002b17 	ldw	r4,172(sp)
4000da6c:	1d87883a 	add	r3,r3,r22
4000da70:	10800044 	addi	r2,r2,1
4000da74:	41000015 	stw	r4,0(r8)
4000da78:	45800115 	stw	r22,4(r8)
4000da7c:	d8c02015 	stw	r3,128(sp)
4000da80:	d8801f15 	stw	r2,124(sp)
4000da84:	010001c4 	movi	r4,7
4000da88:	20818e16 	blt	r4,r2,4000e0c4 <___vfprintf_internal_r+0x1638>
4000da8c:	42000204 	addi	r8,r8,8
4000da90:	003e3106 	br	4000d358 <__alt_data_end+0xc000d358>
4000da94:	d9403317 	ldw	r5,204(sp)
4000da98:	00800044 	movi	r2,1
4000da9c:	18c00044 	addi	r3,r3,1
4000daa0:	1141530e 	bge	r2,r5,4000dff0 <___vfprintf_internal_r+0x1564>
4000daa4:	dc401f17 	ldw	r17,124(sp)
4000daa8:	00800044 	movi	r2,1
4000daac:	40800115 	stw	r2,4(r8)
4000dab0:	8c400044 	addi	r17,r17,1
4000dab4:	44000015 	stw	r16,0(r8)
4000dab8:	d8c02015 	stw	r3,128(sp)
4000dabc:	dc401f15 	stw	r17,124(sp)
4000dac0:	008001c4 	movi	r2,7
4000dac4:	14416b16 	blt	r2,r17,4000e074 <___vfprintf_internal_r+0x15e8>
4000dac8:	42000204 	addi	r8,r8,8
4000dacc:	d8803717 	ldw	r2,220(sp)
4000dad0:	d9003417 	ldw	r4,208(sp)
4000dad4:	8c400044 	addi	r17,r17,1
4000dad8:	10c7883a 	add	r3,r2,r3
4000dadc:	40800115 	stw	r2,4(r8)
4000dae0:	41000015 	stw	r4,0(r8)
4000dae4:	d8c02015 	stw	r3,128(sp)
4000dae8:	dc401f15 	stw	r17,124(sp)
4000daec:	008001c4 	movi	r2,7
4000daf0:	14416916 	blt	r2,r17,4000e098 <___vfprintf_internal_r+0x160c>
4000daf4:	45800204 	addi	r22,r8,8
4000daf8:	d9003617 	ldw	r4,216(sp)
4000dafc:	d9403817 	ldw	r5,224(sp)
4000db00:	000d883a 	mov	r6,zero
4000db04:	000f883a 	mov	r7,zero
4000db08:	d8c03c15 	stw	r3,240(sp)
4000db0c:	00152b00 	call	400152b0 <__eqdf2>
4000db10:	d8c03c17 	ldw	r3,240(sp)
4000db14:	1000bc26 	beq	r2,zero,4000de08 <___vfprintf_internal_r+0x137c>
4000db18:	d9403317 	ldw	r5,204(sp)
4000db1c:	84000044 	addi	r16,r16,1
4000db20:	8c400044 	addi	r17,r17,1
4000db24:	28bfffc4 	addi	r2,r5,-1
4000db28:	1887883a 	add	r3,r3,r2
4000db2c:	b0800115 	stw	r2,4(r22)
4000db30:	b4000015 	stw	r16,0(r22)
4000db34:	d8c02015 	stw	r3,128(sp)
4000db38:	dc401f15 	stw	r17,124(sp)
4000db3c:	008001c4 	movi	r2,7
4000db40:	14414316 	blt	r2,r17,4000e050 <___vfprintf_internal_r+0x15c4>
4000db44:	b5800204 	addi	r22,r22,8
4000db48:	d9003a17 	ldw	r4,232(sp)
4000db4c:	df0022c4 	addi	fp,sp,139
4000db50:	8c400044 	addi	r17,r17,1
4000db54:	20c7883a 	add	r3,r4,r3
4000db58:	b7000015 	stw	fp,0(r22)
4000db5c:	b1000115 	stw	r4,4(r22)
4000db60:	d8c02015 	stw	r3,128(sp)
4000db64:	dc401f15 	stw	r17,124(sp)
4000db68:	008001c4 	movi	r2,7
4000db6c:	14400e16 	blt	r2,r17,4000dba8 <___vfprintf_internal_r+0x111c>
4000db70:	b2000204 	addi	r8,r22,8
4000db74:	003e3a06 	br	4000d460 <__alt_data_end+0xc000d460>
4000db78:	011000b4 	movhi	r4,16386
4000db7c:	213b32c4 	addi	r4,r4,-4917
4000db80:	d9002b15 	stw	r4,172(sp)
4000db84:	d9002b17 	ldw	r4,172(sp)
4000db88:	1c07883a 	add	r3,r3,r16
4000db8c:	44000115 	stw	r16,4(r8)
4000db90:	41000015 	stw	r4,0(r8)
4000db94:	10800044 	addi	r2,r2,1
4000db98:	d8c02015 	stw	r3,128(sp)
4000db9c:	d8801f15 	stw	r2,124(sp)
4000dba0:	010001c4 	movi	r4,7
4000dba4:	20be2d0e 	bge	r4,r2,4000d45c <__alt_data_end+0xc000d45c>
4000dba8:	d9002c17 	ldw	r4,176(sp)
4000dbac:	d9801e04 	addi	r6,sp,120
4000dbb0:	b80b883a 	mov	r5,r23
4000dbb4:	0012d6c0 	call	40012d6c <__sprint_r>
4000dbb8:	103cb61e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000dbbc:	d8c02017 	ldw	r3,128(sp)
4000dbc0:	da000404 	addi	r8,sp,16
4000dbc4:	003e2606 	br	4000d460 <__alt_data_end+0xc000d460>
4000dbc8:	d9002c17 	ldw	r4,176(sp)
4000dbcc:	d9801e04 	addi	r6,sp,120
4000dbd0:	b80b883a 	mov	r5,r23
4000dbd4:	0012d6c0 	call	40012d6c <__sprint_r>
4000dbd8:	103e5d26 	beq	r2,zero,4000d550 <__alt_data_end+0xc000d550>
4000dbdc:	003cad06 	br	4000ce94 <__alt_data_end+0xc000ce94>
4000dbe0:	d9002c17 	ldw	r4,176(sp)
4000dbe4:	d9801e04 	addi	r6,sp,120
4000dbe8:	b80b883a 	mov	r5,r23
4000dbec:	0012d6c0 	call	40012d6c <__sprint_r>
4000dbf0:	103ca81e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000dbf4:	d8c02017 	ldw	r3,128(sp)
4000dbf8:	da000404 	addi	r8,sp,16
4000dbfc:	003e0b06 	br	4000d42c <__alt_data_end+0xc000d42c>
4000dc00:	d9002c17 	ldw	r4,176(sp)
4000dc04:	d9801e04 	addi	r6,sp,120
4000dc08:	b80b883a 	mov	r5,r23
4000dc0c:	0012d6c0 	call	40012d6c <__sprint_r>
4000dc10:	103ca01e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000dc14:	d8c02017 	ldw	r3,128(sp)
4000dc18:	da000404 	addi	r8,sp,16
4000dc1c:	003dbd06 	br	4000d314 <__alt_data_end+0xc000d314>
4000dc20:	d9002c17 	ldw	r4,176(sp)
4000dc24:	d9801e04 	addi	r6,sp,120
4000dc28:	b80b883a 	mov	r5,r23
4000dc2c:	0012d6c0 	call	40012d6c <__sprint_r>
4000dc30:	103c981e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000dc34:	d8c02017 	ldw	r3,128(sp)
4000dc38:	da000404 	addi	r8,sp,16
4000dc3c:	003dc306 	br	4000d34c <__alt_data_end+0xc000d34c>
4000dc40:	d8802917 	ldw	r2,164(sp)
4000dc44:	d8002785 	stb	zero,158(sp)
4000dc48:	103f0616 	blt	r2,zero,4000d864 <__alt_data_end+0xc000d864>
4000dc4c:	00ffdfc4 	movi	r3,-129
4000dc50:	9d84b03a 	or	r2,r19,r22
4000dc54:	90e4703a 	and	r18,r18,r3
4000dc58:	103c6b26 	beq	r2,zero,4000ce08 <__alt_data_end+0xc000ce08>
4000dc5c:	0039883a 	mov	fp,zero
4000dc60:	003e7406 	br	4000d634 <__alt_data_end+0xc000d634>
4000dc64:	9080040c 	andi	r2,r18,16
4000dc68:	1001b326 	beq	r2,zero,4000e338 <___vfprintf_internal_r+0x18ac>
4000dc6c:	d9002d17 	ldw	r4,180(sp)
4000dc70:	d9402917 	ldw	r5,164(sp)
4000dc74:	d8002785 	stb	zero,158(sp)
4000dc78:	20800104 	addi	r2,r4,4
4000dc7c:	24c00017 	ldw	r19,0(r4)
4000dc80:	002d883a 	mov	r22,zero
4000dc84:	2801b516 	blt	r5,zero,4000e35c <___vfprintf_internal_r+0x18d0>
4000dc88:	00ffdfc4 	movi	r3,-129
4000dc8c:	d8802d15 	stw	r2,180(sp)
4000dc90:	90e4703a 	and	r18,r18,r3
4000dc94:	983d2726 	beq	r19,zero,4000d134 <__alt_data_end+0xc000d134>
4000dc98:	0039883a 	mov	fp,zero
4000dc9c:	003d2a06 	br	4000d148 <__alt_data_end+0xc000d148>
4000dca0:	dc402617 	ldw	r17,152(sp)
4000dca4:	0441d30e 	bge	zero,r17,4000e3f4 <___vfprintf_internal_r+0x1968>
4000dca8:	dc403217 	ldw	r17,200(sp)
4000dcac:	d8803317 	ldw	r2,204(sp)
4000dcb0:	1440010e 	bge	r2,r17,4000dcb8 <___vfprintf_internal_r+0x122c>
4000dcb4:	1023883a 	mov	r17,r2
4000dcb8:	04400a0e 	bge	zero,r17,4000dce4 <___vfprintf_internal_r+0x1258>
4000dcbc:	d8801f17 	ldw	r2,124(sp)
4000dcc0:	1c47883a 	add	r3,r3,r17
4000dcc4:	44000015 	stw	r16,0(r8)
4000dcc8:	10800044 	addi	r2,r2,1
4000dccc:	44400115 	stw	r17,4(r8)
4000dcd0:	d8c02015 	stw	r3,128(sp)
4000dcd4:	d8801f15 	stw	r2,124(sp)
4000dcd8:	010001c4 	movi	r4,7
4000dcdc:	20826516 	blt	r4,r2,4000e674 <___vfprintf_internal_r+0x1be8>
4000dce0:	42000204 	addi	r8,r8,8
4000dce4:	88026116 	blt	r17,zero,4000e66c <___vfprintf_internal_r+0x1be0>
4000dce8:	d9003217 	ldw	r4,200(sp)
4000dcec:	2463c83a 	sub	r17,r4,r17
4000dcf0:	04407b0e 	bge	zero,r17,4000dee0 <___vfprintf_internal_r+0x1454>
4000dcf4:	05800404 	movi	r22,16
4000dcf8:	d8801f17 	ldw	r2,124(sp)
4000dcfc:	b4419d0e 	bge	r22,r17,4000e374 <___vfprintf_internal_r+0x18e8>
4000dd00:	011000b4 	movhi	r4,16386
4000dd04:	213b32c4 	addi	r4,r4,-4917
4000dd08:	d9002b15 	stw	r4,172(sp)
4000dd0c:	070001c4 	movi	fp,7
4000dd10:	dcc02c17 	ldw	r19,176(sp)
4000dd14:	00000306 	br	4000dd24 <___vfprintf_internal_r+0x1298>
4000dd18:	42000204 	addi	r8,r8,8
4000dd1c:	8c7ffc04 	addi	r17,r17,-16
4000dd20:	b441970e 	bge	r22,r17,4000e380 <___vfprintf_internal_r+0x18f4>
4000dd24:	18c00404 	addi	r3,r3,16
4000dd28:	10800044 	addi	r2,r2,1
4000dd2c:	45000015 	stw	r20,0(r8)
4000dd30:	45800115 	stw	r22,4(r8)
4000dd34:	d8c02015 	stw	r3,128(sp)
4000dd38:	d8801f15 	stw	r2,124(sp)
4000dd3c:	e0bff60e 	bge	fp,r2,4000dd18 <__alt_data_end+0xc000dd18>
4000dd40:	d9801e04 	addi	r6,sp,120
4000dd44:	b80b883a 	mov	r5,r23
4000dd48:	9809883a 	mov	r4,r19
4000dd4c:	0012d6c0 	call	40012d6c <__sprint_r>
4000dd50:	103c501e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000dd54:	d8c02017 	ldw	r3,128(sp)
4000dd58:	d8801f17 	ldw	r2,124(sp)
4000dd5c:	da000404 	addi	r8,sp,16
4000dd60:	003fee06 	br	4000dd1c <__alt_data_end+0xc000dd1c>
4000dd64:	d9002c17 	ldw	r4,176(sp)
4000dd68:	d9801e04 	addi	r6,sp,120
4000dd6c:	b80b883a 	mov	r5,r23
4000dd70:	0012d6c0 	call	40012d6c <__sprint_r>
4000dd74:	103c471e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000dd78:	d8c02017 	ldw	r3,128(sp)
4000dd7c:	df002787 	ldb	fp,158(sp)
4000dd80:	da000404 	addi	r8,sp,16
4000dd84:	003d5606 	br	4000d2e0 <__alt_data_end+0xc000d2e0>
4000dd88:	9080040c 	andi	r2,r18,16
4000dd8c:	10016126 	beq	r2,zero,4000e314 <___vfprintf_internal_r+0x1888>
4000dd90:	d8802d17 	ldw	r2,180(sp)
4000dd94:	14c00017 	ldw	r19,0(r2)
4000dd98:	10800104 	addi	r2,r2,4
4000dd9c:	d8802d15 	stw	r2,180(sp)
4000dda0:	982dd7fa 	srai	r22,r19,31
4000dda4:	b005883a 	mov	r2,r22
4000dda8:	003c8206 	br	4000cfb4 <__alt_data_end+0xc000cfb4>
4000ddac:	9080040c 	andi	r2,r18,16
4000ddb0:	10003526 	beq	r2,zero,4000de88 <___vfprintf_internal_r+0x13fc>
4000ddb4:	d9402d17 	ldw	r5,180(sp)
4000ddb8:	d8c02917 	ldw	r3,164(sp)
4000ddbc:	d8002785 	stb	zero,158(sp)
4000ddc0:	28800104 	addi	r2,r5,4
4000ddc4:	2cc00017 	ldw	r19,0(r5)
4000ddc8:	002d883a 	mov	r22,zero
4000ddcc:	18003716 	blt	r3,zero,4000deac <___vfprintf_internal_r+0x1420>
4000ddd0:	00ffdfc4 	movi	r3,-129
4000ddd4:	d8802d15 	stw	r2,180(sp)
4000ddd8:	90e4703a 	and	r18,r18,r3
4000dddc:	0039883a 	mov	fp,zero
4000dde0:	983df326 	beq	r19,zero,4000d5b0 <__alt_data_end+0xc000d5b0>
4000dde4:	00800244 	movi	r2,9
4000dde8:	14fc7b36 	bltu	r2,r19,4000cfd8 <__alt_data_end+0xc000cfd8>
4000ddec:	d8c02817 	ldw	r3,160(sp)
4000ddf0:	dc001dc4 	addi	r16,sp,119
4000ddf4:	9cc00c04 	addi	r19,r19,48
4000ddf8:	1c07c83a 	sub	r3,r3,r16
4000ddfc:	dcc01dc5 	stb	r19,119(sp)
4000de00:	d8c02e15 	stw	r3,184(sp)
4000de04:	003ce806 	br	4000d1a8 <__alt_data_end+0xc000d1a8>
4000de08:	d8803317 	ldw	r2,204(sp)
4000de0c:	143fffc4 	addi	r16,r2,-1
4000de10:	043f4d0e 	bge	zero,r16,4000db48 <__alt_data_end+0xc000db48>
4000de14:	07000404 	movi	fp,16
4000de18:	e400810e 	bge	fp,r16,4000e020 <___vfprintf_internal_r+0x1594>
4000de1c:	015000b4 	movhi	r5,16386
4000de20:	297b32c4 	addi	r5,r5,-4917
4000de24:	d9402b15 	stw	r5,172(sp)
4000de28:	01c001c4 	movi	r7,7
4000de2c:	dcc02c17 	ldw	r19,176(sp)
4000de30:	00000306 	br	4000de40 <___vfprintf_internal_r+0x13b4>
4000de34:	b5800204 	addi	r22,r22,8
4000de38:	843ffc04 	addi	r16,r16,-16
4000de3c:	e4007b0e 	bge	fp,r16,4000e02c <___vfprintf_internal_r+0x15a0>
4000de40:	18c00404 	addi	r3,r3,16
4000de44:	8c400044 	addi	r17,r17,1
4000de48:	b5000015 	stw	r20,0(r22)
4000de4c:	b7000115 	stw	fp,4(r22)
4000de50:	d8c02015 	stw	r3,128(sp)
4000de54:	dc401f15 	stw	r17,124(sp)
4000de58:	3c7ff60e 	bge	r7,r17,4000de34 <__alt_data_end+0xc000de34>
4000de5c:	d9801e04 	addi	r6,sp,120
4000de60:	b80b883a 	mov	r5,r23
4000de64:	9809883a 	mov	r4,r19
4000de68:	d9c03c15 	stw	r7,240(sp)
4000de6c:	0012d6c0 	call	40012d6c <__sprint_r>
4000de70:	d9c03c17 	ldw	r7,240(sp)
4000de74:	103c071e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000de78:	d8c02017 	ldw	r3,128(sp)
4000de7c:	dc401f17 	ldw	r17,124(sp)
4000de80:	dd800404 	addi	r22,sp,16
4000de84:	003fec06 	br	4000de38 <__alt_data_end+0xc000de38>
4000de88:	9080100c 	andi	r2,r18,64
4000de8c:	d8002785 	stb	zero,158(sp)
4000de90:	10010e26 	beq	r2,zero,4000e2cc <___vfprintf_internal_r+0x1840>
4000de94:	d9002d17 	ldw	r4,180(sp)
4000de98:	d9402917 	ldw	r5,164(sp)
4000de9c:	002d883a 	mov	r22,zero
4000dea0:	20800104 	addi	r2,r4,4
4000dea4:	24c0000b 	ldhu	r19,0(r4)
4000dea8:	283fc90e 	bge	r5,zero,4000ddd0 <__alt_data_end+0xc000ddd0>
4000deac:	d8802d15 	stw	r2,180(sp)
4000deb0:	0039883a 	mov	fp,zero
4000deb4:	9d84b03a 	or	r2,r19,r22
4000deb8:	103c461e 	bne	r2,zero,4000cfd4 <__alt_data_end+0xc000cfd4>
4000debc:	00800044 	movi	r2,1
4000dec0:	003e6c06 	br	4000d874 <__alt_data_end+0xc000d874>
4000dec4:	d9002c17 	ldw	r4,176(sp)
4000dec8:	d9801e04 	addi	r6,sp,120
4000decc:	b80b883a 	mov	r5,r23
4000ded0:	0012d6c0 	call	40012d6c <__sprint_r>
4000ded4:	103bef1e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000ded8:	d8c02017 	ldw	r3,128(sp)
4000dedc:	da000404 	addi	r8,sp,16
4000dee0:	d9003217 	ldw	r4,200(sp)
4000dee4:	d8802617 	ldw	r2,152(sp)
4000dee8:	d9403317 	ldw	r5,204(sp)
4000deec:	8123883a 	add	r17,r16,r4
4000def0:	11400216 	blt	r2,r5,4000defc <___vfprintf_internal_r+0x1470>
4000def4:	9100004c 	andi	r4,r18,1
4000def8:	20000d26 	beq	r4,zero,4000df30 <___vfprintf_internal_r+0x14a4>
4000defc:	d9003717 	ldw	r4,220(sp)
4000df00:	d9403417 	ldw	r5,208(sp)
4000df04:	1907883a 	add	r3,r3,r4
4000df08:	d9001f17 	ldw	r4,124(sp)
4000df0c:	41400015 	stw	r5,0(r8)
4000df10:	d9403717 	ldw	r5,220(sp)
4000df14:	21000044 	addi	r4,r4,1
4000df18:	d8c02015 	stw	r3,128(sp)
4000df1c:	41400115 	stw	r5,4(r8)
4000df20:	d9001f15 	stw	r4,124(sp)
4000df24:	014001c4 	movi	r5,7
4000df28:	2901e816 	blt	r5,r4,4000e6cc <___vfprintf_internal_r+0x1c40>
4000df2c:	42000204 	addi	r8,r8,8
4000df30:	d9003317 	ldw	r4,204(sp)
4000df34:	8121883a 	add	r16,r16,r4
4000df38:	2085c83a 	sub	r2,r4,r2
4000df3c:	8461c83a 	sub	r16,r16,r17
4000df40:	1400010e 	bge	r2,r16,4000df48 <___vfprintf_internal_r+0x14bc>
4000df44:	1021883a 	mov	r16,r2
4000df48:	04000a0e 	bge	zero,r16,4000df74 <___vfprintf_internal_r+0x14e8>
4000df4c:	d9001f17 	ldw	r4,124(sp)
4000df50:	1c07883a 	add	r3,r3,r16
4000df54:	44400015 	stw	r17,0(r8)
4000df58:	21000044 	addi	r4,r4,1
4000df5c:	44000115 	stw	r16,4(r8)
4000df60:	d8c02015 	stw	r3,128(sp)
4000df64:	d9001f15 	stw	r4,124(sp)
4000df68:	014001c4 	movi	r5,7
4000df6c:	2901fb16 	blt	r5,r4,4000e75c <___vfprintf_internal_r+0x1cd0>
4000df70:	42000204 	addi	r8,r8,8
4000df74:	8001f716 	blt	r16,zero,4000e754 <___vfprintf_internal_r+0x1cc8>
4000df78:	1421c83a 	sub	r16,r2,r16
4000df7c:	043d380e 	bge	zero,r16,4000d460 <__alt_data_end+0xc000d460>
4000df80:	04400404 	movi	r17,16
4000df84:	d8801f17 	ldw	r2,124(sp)
4000df88:	8c3efb0e 	bge	r17,r16,4000db78 <__alt_data_end+0xc000db78>
4000df8c:	015000b4 	movhi	r5,16386
4000df90:	297b32c4 	addi	r5,r5,-4917
4000df94:	d9402b15 	stw	r5,172(sp)
4000df98:	058001c4 	movi	r22,7
4000df9c:	dcc02c17 	ldw	r19,176(sp)
4000dfa0:	00000306 	br	4000dfb0 <___vfprintf_internal_r+0x1524>
4000dfa4:	42000204 	addi	r8,r8,8
4000dfa8:	843ffc04 	addi	r16,r16,-16
4000dfac:	8c3ef50e 	bge	r17,r16,4000db84 <__alt_data_end+0xc000db84>
4000dfb0:	18c00404 	addi	r3,r3,16
4000dfb4:	10800044 	addi	r2,r2,1
4000dfb8:	45000015 	stw	r20,0(r8)
4000dfbc:	44400115 	stw	r17,4(r8)
4000dfc0:	d8c02015 	stw	r3,128(sp)
4000dfc4:	d8801f15 	stw	r2,124(sp)
4000dfc8:	b0bff60e 	bge	r22,r2,4000dfa4 <__alt_data_end+0xc000dfa4>
4000dfcc:	d9801e04 	addi	r6,sp,120
4000dfd0:	b80b883a 	mov	r5,r23
4000dfd4:	9809883a 	mov	r4,r19
4000dfd8:	0012d6c0 	call	40012d6c <__sprint_r>
4000dfdc:	103bad1e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000dfe0:	d8c02017 	ldw	r3,128(sp)
4000dfe4:	d8801f17 	ldw	r2,124(sp)
4000dfe8:	da000404 	addi	r8,sp,16
4000dfec:	003fee06 	br	4000dfa8 <__alt_data_end+0xc000dfa8>
4000dff0:	9088703a 	and	r4,r18,r2
4000dff4:	203eab1e 	bne	r4,zero,4000daa4 <__alt_data_end+0xc000daa4>
4000dff8:	dc401f17 	ldw	r17,124(sp)
4000dffc:	40800115 	stw	r2,4(r8)
4000e000:	44000015 	stw	r16,0(r8)
4000e004:	8c400044 	addi	r17,r17,1
4000e008:	d8c02015 	stw	r3,128(sp)
4000e00c:	dc401f15 	stw	r17,124(sp)
4000e010:	008001c4 	movi	r2,7
4000e014:	14400e16 	blt	r2,r17,4000e050 <___vfprintf_internal_r+0x15c4>
4000e018:	45800204 	addi	r22,r8,8
4000e01c:	003eca06 	br	4000db48 <__alt_data_end+0xc000db48>
4000e020:	011000b4 	movhi	r4,16386
4000e024:	213b32c4 	addi	r4,r4,-4917
4000e028:	d9002b15 	stw	r4,172(sp)
4000e02c:	d8802b17 	ldw	r2,172(sp)
4000e030:	1c07883a 	add	r3,r3,r16
4000e034:	8c400044 	addi	r17,r17,1
4000e038:	b0800015 	stw	r2,0(r22)
4000e03c:	b4000115 	stw	r16,4(r22)
4000e040:	d8c02015 	stw	r3,128(sp)
4000e044:	dc401f15 	stw	r17,124(sp)
4000e048:	008001c4 	movi	r2,7
4000e04c:	147ebd0e 	bge	r2,r17,4000db44 <__alt_data_end+0xc000db44>
4000e050:	d9002c17 	ldw	r4,176(sp)
4000e054:	d9801e04 	addi	r6,sp,120
4000e058:	b80b883a 	mov	r5,r23
4000e05c:	0012d6c0 	call	40012d6c <__sprint_r>
4000e060:	103b8c1e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000e064:	d8c02017 	ldw	r3,128(sp)
4000e068:	dc401f17 	ldw	r17,124(sp)
4000e06c:	dd800404 	addi	r22,sp,16
4000e070:	003eb506 	br	4000db48 <__alt_data_end+0xc000db48>
4000e074:	d9002c17 	ldw	r4,176(sp)
4000e078:	d9801e04 	addi	r6,sp,120
4000e07c:	b80b883a 	mov	r5,r23
4000e080:	0012d6c0 	call	40012d6c <__sprint_r>
4000e084:	103b831e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000e088:	d8c02017 	ldw	r3,128(sp)
4000e08c:	dc401f17 	ldw	r17,124(sp)
4000e090:	da000404 	addi	r8,sp,16
4000e094:	003e8d06 	br	4000dacc <__alt_data_end+0xc000dacc>
4000e098:	d9002c17 	ldw	r4,176(sp)
4000e09c:	d9801e04 	addi	r6,sp,120
4000e0a0:	b80b883a 	mov	r5,r23
4000e0a4:	0012d6c0 	call	40012d6c <__sprint_r>
4000e0a8:	103b7a1e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000e0ac:	d8c02017 	ldw	r3,128(sp)
4000e0b0:	dc401f17 	ldw	r17,124(sp)
4000e0b4:	dd800404 	addi	r22,sp,16
4000e0b8:	003e8f06 	br	4000daf8 <__alt_data_end+0xc000daf8>
4000e0bc:	0027883a 	mov	r19,zero
4000e0c0:	003f4a06 	br	4000ddec <__alt_data_end+0xc000ddec>
4000e0c4:	d9002c17 	ldw	r4,176(sp)
4000e0c8:	d9801e04 	addi	r6,sp,120
4000e0cc:	b80b883a 	mov	r5,r23
4000e0d0:	0012d6c0 	call	40012d6c <__sprint_r>
4000e0d4:	103b6f1e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000e0d8:	d8c02017 	ldw	r3,128(sp)
4000e0dc:	da000404 	addi	r8,sp,16
4000e0e0:	003c9d06 	br	4000d358 <__alt_data_end+0xc000d358>
4000e0e4:	04e7c83a 	sub	r19,zero,r19
4000e0e8:	9804c03a 	cmpne	r2,r19,zero
4000e0ec:	05adc83a 	sub	r22,zero,r22
4000e0f0:	b0adc83a 	sub	r22,r22,r2
4000e0f4:	d8802917 	ldw	r2,164(sp)
4000e0f8:	07000b44 	movi	fp,45
4000e0fc:	df002785 	stb	fp,158(sp)
4000e100:	10017b16 	blt	r2,zero,4000e6f0 <___vfprintf_internal_r+0x1c64>
4000e104:	00bfdfc4 	movi	r2,-129
4000e108:	90a4703a 	and	r18,r18,r2
4000e10c:	003bb106 	br	4000cfd4 <__alt_data_end+0xc000cfd4>
4000e110:	d9003617 	ldw	r4,216(sp)
4000e114:	d9403817 	ldw	r5,224(sp)
4000e118:	da003d15 	stw	r8,244(sp)
4000e11c:	0012b200 	call	40012b20 <__fpclassifyd>
4000e120:	da003d17 	ldw	r8,244(sp)
4000e124:	1000f026 	beq	r2,zero,4000e4e8 <___vfprintf_internal_r+0x1a5c>
4000e128:	d9002917 	ldw	r4,164(sp)
4000e12c:	05bff7c4 	movi	r22,-33
4000e130:	00bfffc4 	movi	r2,-1
4000e134:	8dac703a 	and	r22,r17,r22
4000e138:	20820026 	beq	r4,r2,4000e93c <___vfprintf_internal_r+0x1eb0>
4000e13c:	008011c4 	movi	r2,71
4000e140:	b081f726 	beq	r22,r2,4000e920 <___vfprintf_internal_r+0x1e94>
4000e144:	d9003817 	ldw	r4,224(sp)
4000e148:	90c04014 	ori	r3,r18,256
4000e14c:	d8c02b15 	stw	r3,172(sp)
4000e150:	20021516 	blt	r4,zero,4000e9a8 <___vfprintf_internal_r+0x1f1c>
4000e154:	dcc03817 	ldw	r19,224(sp)
4000e158:	d8002a05 	stb	zero,168(sp)
4000e15c:	00801984 	movi	r2,102
4000e160:	8881f926 	beq	r17,r2,4000e948 <___vfprintf_internal_r+0x1ebc>
4000e164:	00801184 	movi	r2,70
4000e168:	88821c26 	beq	r17,r2,4000e9dc <___vfprintf_internal_r+0x1f50>
4000e16c:	00801144 	movi	r2,69
4000e170:	b081ef26 	beq	r22,r2,4000e930 <___vfprintf_internal_r+0x1ea4>
4000e174:	d8c02917 	ldw	r3,164(sp)
4000e178:	d8802104 	addi	r2,sp,132
4000e17c:	d8800315 	stw	r2,12(sp)
4000e180:	d9403617 	ldw	r5,216(sp)
4000e184:	d8802504 	addi	r2,sp,148
4000e188:	d9002c17 	ldw	r4,176(sp)
4000e18c:	d8800215 	stw	r2,8(sp)
4000e190:	d8802604 	addi	r2,sp,152
4000e194:	d8c00015 	stw	r3,0(sp)
4000e198:	d8800115 	stw	r2,4(sp)
4000e19c:	01c00084 	movi	r7,2
4000e1a0:	980d883a 	mov	r6,r19
4000e1a4:	d8c03c15 	stw	r3,240(sp)
4000e1a8:	da003d15 	stw	r8,244(sp)
4000e1ac:	000f2e40 	call	4000f2e4 <_dtoa_r>
4000e1b0:	1021883a 	mov	r16,r2
4000e1b4:	008019c4 	movi	r2,103
4000e1b8:	d8c03c17 	ldw	r3,240(sp)
4000e1bc:	da003d17 	ldw	r8,244(sp)
4000e1c0:	88817126 	beq	r17,r2,4000e788 <___vfprintf_internal_r+0x1cfc>
4000e1c4:	008011c4 	movi	r2,71
4000e1c8:	88829226 	beq	r17,r2,4000ec14 <___vfprintf_internal_r+0x2188>
4000e1cc:	80f9883a 	add	fp,r16,r3
4000e1d0:	d9003617 	ldw	r4,216(sp)
4000e1d4:	000d883a 	mov	r6,zero
4000e1d8:	000f883a 	mov	r7,zero
4000e1dc:	980b883a 	mov	r5,r19
4000e1e0:	da003d15 	stw	r8,244(sp)
4000e1e4:	00152b00 	call	400152b0 <__eqdf2>
4000e1e8:	da003d17 	ldw	r8,244(sp)
4000e1ec:	10018d26 	beq	r2,zero,4000e824 <___vfprintf_internal_r+0x1d98>
4000e1f0:	d8802117 	ldw	r2,132(sp)
4000e1f4:	1700062e 	bgeu	r2,fp,4000e210 <___vfprintf_internal_r+0x1784>
4000e1f8:	01000c04 	movi	r4,48
4000e1fc:	10c00044 	addi	r3,r2,1
4000e200:	d8c02115 	stw	r3,132(sp)
4000e204:	11000005 	stb	r4,0(r2)
4000e208:	d8802117 	ldw	r2,132(sp)
4000e20c:	173ffb36 	bltu	r2,fp,4000e1fc <__alt_data_end+0xc000e1fc>
4000e210:	1405c83a 	sub	r2,r2,r16
4000e214:	d8803315 	stw	r2,204(sp)
4000e218:	008011c4 	movi	r2,71
4000e21c:	b0817626 	beq	r22,r2,4000e7f8 <___vfprintf_internal_r+0x1d6c>
4000e220:	00801944 	movi	r2,101
4000e224:	1442810e 	bge	r2,r17,4000ec2c <___vfprintf_internal_r+0x21a0>
4000e228:	d8c02617 	ldw	r3,152(sp)
4000e22c:	00801984 	movi	r2,102
4000e230:	d8c03215 	stw	r3,200(sp)
4000e234:	8881fe26 	beq	r17,r2,4000ea30 <___vfprintf_internal_r+0x1fa4>
4000e238:	d8c03217 	ldw	r3,200(sp)
4000e23c:	d9003317 	ldw	r4,204(sp)
4000e240:	1901dd16 	blt	r3,r4,4000e9b8 <___vfprintf_internal_r+0x1f2c>
4000e244:	9480004c 	andi	r18,r18,1
4000e248:	90022b1e 	bne	r18,zero,4000eaf8 <___vfprintf_internal_r+0x206c>
4000e24c:	1805883a 	mov	r2,r3
4000e250:	18028016 	blt	r3,zero,4000ec54 <___vfprintf_internal_r+0x21c8>
4000e254:	d8c03217 	ldw	r3,200(sp)
4000e258:	044019c4 	movi	r17,103
4000e25c:	d8c02e15 	stw	r3,184(sp)
4000e260:	df002a07 	ldb	fp,168(sp)
4000e264:	e001531e 	bne	fp,zero,4000e7b4 <___vfprintf_internal_r+0x1d28>
4000e268:	df002783 	ldbu	fp,158(sp)
4000e26c:	d8802a15 	stw	r2,168(sp)
4000e270:	dc802b17 	ldw	r18,172(sp)
4000e274:	d8002915 	stw	zero,164(sp)
4000e278:	003bd106 	br	4000d1c0 <__alt_data_end+0xc000d1c0>
4000e27c:	d8802d17 	ldw	r2,180(sp)
4000e280:	d8c02d17 	ldw	r3,180(sp)
4000e284:	d9002d17 	ldw	r4,180(sp)
4000e288:	10800017 	ldw	r2,0(r2)
4000e28c:	18c00117 	ldw	r3,4(r3)
4000e290:	21000204 	addi	r4,r4,8
4000e294:	d8803615 	stw	r2,216(sp)
4000e298:	d8c03815 	stw	r3,224(sp)
4000e29c:	d9002d15 	stw	r4,180(sp)
4000e2a0:	003b7506 	br	4000d078 <__alt_data_end+0xc000d078>
4000e2a4:	ac400007 	ldb	r17,0(r21)
4000e2a8:	003a5906 	br	4000cc10 <__alt_data_end+0xc000cc10>
4000e2ac:	9080100c 	andi	r2,r18,64
4000e2b0:	1000a826 	beq	r2,zero,4000e554 <___vfprintf_internal_r+0x1ac8>
4000e2b4:	d9002d17 	ldw	r4,180(sp)
4000e2b8:	002d883a 	mov	r22,zero
4000e2bc:	24c0000b 	ldhu	r19,0(r4)
4000e2c0:	21000104 	addi	r4,r4,4
4000e2c4:	d9002d15 	stw	r4,180(sp)
4000e2c8:	003ccb06 	br	4000d5f8 <__alt_data_end+0xc000d5f8>
4000e2cc:	d8c02d17 	ldw	r3,180(sp)
4000e2d0:	d9002917 	ldw	r4,164(sp)
4000e2d4:	002d883a 	mov	r22,zero
4000e2d8:	18800104 	addi	r2,r3,4
4000e2dc:	1cc00017 	ldw	r19,0(r3)
4000e2e0:	203ebb0e 	bge	r4,zero,4000ddd0 <__alt_data_end+0xc000ddd0>
4000e2e4:	003ef106 	br	4000deac <__alt_data_end+0xc000deac>
4000e2e8:	9080040c 	andi	r2,r18,16
4000e2ec:	1000921e 	bne	r2,zero,4000e538 <___vfprintf_internal_r+0x1aac>
4000e2f0:	9480100c 	andi	r18,r18,64
4000e2f4:	90013926 	beq	r18,zero,4000e7dc <___vfprintf_internal_r+0x1d50>
4000e2f8:	d9002d17 	ldw	r4,180(sp)
4000e2fc:	d9402f17 	ldw	r5,188(sp)
4000e300:	20800017 	ldw	r2,0(r4)
4000e304:	21000104 	addi	r4,r4,4
4000e308:	d9002d15 	stw	r4,180(sp)
4000e30c:	1140000d 	sth	r5,0(r2)
4000e310:	003a1606 	br	4000cb6c <__alt_data_end+0xc000cb6c>
4000e314:	9080100c 	andi	r2,r18,64
4000e318:	10008026 	beq	r2,zero,4000e51c <___vfprintf_internal_r+0x1a90>
4000e31c:	d8c02d17 	ldw	r3,180(sp)
4000e320:	1cc0000f 	ldh	r19,0(r3)
4000e324:	18c00104 	addi	r3,r3,4
4000e328:	d8c02d15 	stw	r3,180(sp)
4000e32c:	982dd7fa 	srai	r22,r19,31
4000e330:	b005883a 	mov	r2,r22
4000e334:	003b1f06 	br	4000cfb4 <__alt_data_end+0xc000cfb4>
4000e338:	9080100c 	andi	r2,r18,64
4000e33c:	d8002785 	stb	zero,158(sp)
4000e340:	10008a1e 	bne	r2,zero,4000e56c <___vfprintf_internal_r+0x1ae0>
4000e344:	d9402d17 	ldw	r5,180(sp)
4000e348:	d8c02917 	ldw	r3,164(sp)
4000e34c:	002d883a 	mov	r22,zero
4000e350:	28800104 	addi	r2,r5,4
4000e354:	2cc00017 	ldw	r19,0(r5)
4000e358:	183e4b0e 	bge	r3,zero,4000dc88 <__alt_data_end+0xc000dc88>
4000e35c:	9d86b03a 	or	r3,r19,r22
4000e360:	d8802d15 	stw	r2,180(sp)
4000e364:	183e4c1e 	bne	r3,zero,4000dc98 <__alt_data_end+0xc000dc98>
4000e368:	0039883a 	mov	fp,zero
4000e36c:	0005883a 	mov	r2,zero
4000e370:	003d4006 	br	4000d874 <__alt_data_end+0xc000d874>
4000e374:	015000b4 	movhi	r5,16386
4000e378:	297b32c4 	addi	r5,r5,-4917
4000e37c:	d9402b15 	stw	r5,172(sp)
4000e380:	d9402b17 	ldw	r5,172(sp)
4000e384:	1c47883a 	add	r3,r3,r17
4000e388:	10800044 	addi	r2,r2,1
4000e38c:	41400015 	stw	r5,0(r8)
4000e390:	44400115 	stw	r17,4(r8)
4000e394:	d8c02015 	stw	r3,128(sp)
4000e398:	d8801f15 	stw	r2,124(sp)
4000e39c:	010001c4 	movi	r4,7
4000e3a0:	20bec816 	blt	r4,r2,4000dec4 <__alt_data_end+0xc000dec4>
4000e3a4:	42000204 	addi	r8,r8,8
4000e3a8:	003ecd06 	br	4000dee0 <__alt_data_end+0xc000dee0>
4000e3ac:	d9002917 	ldw	r4,164(sp)
4000e3b0:	d8002785 	stb	zero,158(sp)
4000e3b4:	203d2d16 	blt	r4,zero,4000d86c <__alt_data_end+0xc000d86c>
4000e3b8:	00bfdfc4 	movi	r2,-129
4000e3bc:	90a4703a 	and	r18,r18,r2
4000e3c0:	003a9106 	br	4000ce08 <__alt_data_end+0xc000ce08>
4000e3c4:	011000b4 	movhi	r4,16386
4000e3c8:	213b32c4 	addi	r4,r4,-4917
4000e3cc:	d9002b15 	stw	r4,172(sp)
4000e3d0:	003c0c06 	br	4000d404 <__alt_data_end+0xc000d404>
4000e3d4:	d9002c17 	ldw	r4,176(sp)
4000e3d8:	d9801e04 	addi	r6,sp,120
4000e3dc:	b80b883a 	mov	r5,r23
4000e3e0:	0012d6c0 	call	40012d6c <__sprint_r>
4000e3e4:	103aab1e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000e3e8:	d8c02017 	ldw	r3,128(sp)
4000e3ec:	da000404 	addi	r8,sp,16
4000e3f0:	003d4106 	br	4000d8f8 <__alt_data_end+0xc000d8f8>
4000e3f4:	d8801f17 	ldw	r2,124(sp)
4000e3f8:	015000b4 	movhi	r5,16386
4000e3fc:	01000044 	movi	r4,1
4000e400:	18c00044 	addi	r3,r3,1
4000e404:	10800044 	addi	r2,r2,1
4000e408:	29787404 	addi	r5,r5,-7728
4000e40c:	41000115 	stw	r4,4(r8)
4000e410:	41400015 	stw	r5,0(r8)
4000e414:	d8c02015 	stw	r3,128(sp)
4000e418:	d8801f15 	stw	r2,124(sp)
4000e41c:	010001c4 	movi	r4,7
4000e420:	20805c16 	blt	r4,r2,4000e594 <___vfprintf_internal_r+0x1b08>
4000e424:	42000204 	addi	r8,r8,8
4000e428:	8800041e 	bne	r17,zero,4000e43c <___vfprintf_internal_r+0x19b0>
4000e42c:	d8803317 	ldw	r2,204(sp)
4000e430:	1000021e 	bne	r2,zero,4000e43c <___vfprintf_internal_r+0x19b0>
4000e434:	9080004c 	andi	r2,r18,1
4000e438:	103c0926 	beq	r2,zero,4000d460 <__alt_data_end+0xc000d460>
4000e43c:	d9003717 	ldw	r4,220(sp)
4000e440:	d8801f17 	ldw	r2,124(sp)
4000e444:	d9403417 	ldw	r5,208(sp)
4000e448:	20c7883a 	add	r3,r4,r3
4000e44c:	10800044 	addi	r2,r2,1
4000e450:	41000115 	stw	r4,4(r8)
4000e454:	41400015 	stw	r5,0(r8)
4000e458:	d8c02015 	stw	r3,128(sp)
4000e45c:	d8801f15 	stw	r2,124(sp)
4000e460:	010001c4 	movi	r4,7
4000e464:	20812116 	blt	r4,r2,4000e8ec <___vfprintf_internal_r+0x1e60>
4000e468:	42000204 	addi	r8,r8,8
4000e46c:	0463c83a 	sub	r17,zero,r17
4000e470:	0440730e 	bge	zero,r17,4000e640 <___vfprintf_internal_r+0x1bb4>
4000e474:	05800404 	movi	r22,16
4000e478:	b440860e 	bge	r22,r17,4000e694 <___vfprintf_internal_r+0x1c08>
4000e47c:	015000b4 	movhi	r5,16386
4000e480:	297b32c4 	addi	r5,r5,-4917
4000e484:	d9402b15 	stw	r5,172(sp)
4000e488:	070001c4 	movi	fp,7
4000e48c:	dcc02c17 	ldw	r19,176(sp)
4000e490:	00000306 	br	4000e4a0 <___vfprintf_internal_r+0x1a14>
4000e494:	42000204 	addi	r8,r8,8
4000e498:	8c7ffc04 	addi	r17,r17,-16
4000e49c:	b440800e 	bge	r22,r17,4000e6a0 <___vfprintf_internal_r+0x1c14>
4000e4a0:	18c00404 	addi	r3,r3,16
4000e4a4:	10800044 	addi	r2,r2,1
4000e4a8:	45000015 	stw	r20,0(r8)
4000e4ac:	45800115 	stw	r22,4(r8)
4000e4b0:	d8c02015 	stw	r3,128(sp)
4000e4b4:	d8801f15 	stw	r2,124(sp)
4000e4b8:	e0bff60e 	bge	fp,r2,4000e494 <__alt_data_end+0xc000e494>
4000e4bc:	d9801e04 	addi	r6,sp,120
4000e4c0:	b80b883a 	mov	r5,r23
4000e4c4:	9809883a 	mov	r4,r19
4000e4c8:	0012d6c0 	call	40012d6c <__sprint_r>
4000e4cc:	103a711e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000e4d0:	d8c02017 	ldw	r3,128(sp)
4000e4d4:	d8801f17 	ldw	r2,124(sp)
4000e4d8:	da000404 	addi	r8,sp,16
4000e4dc:	003fee06 	br	4000e498 <__alt_data_end+0xc000e498>
4000e4e0:	00bfffc4 	movi	r2,-1
4000e4e4:	003a6f06 	br	4000cea4 <__alt_data_end+0xc000cea4>
4000e4e8:	008011c4 	movi	r2,71
4000e4ec:	1440b816 	blt	r2,r17,4000e7d0 <___vfprintf_internal_r+0x1d44>
4000e4f0:	041000b4 	movhi	r16,16386
4000e4f4:	843b2504 	addi	r16,r16,-4972
4000e4f8:	00c000c4 	movi	r3,3
4000e4fc:	00bfdfc4 	movi	r2,-129
4000e500:	d8c02a15 	stw	r3,168(sp)
4000e504:	90a4703a 	and	r18,r18,r2
4000e508:	df002783 	ldbu	fp,158(sp)
4000e50c:	d8c02e15 	stw	r3,184(sp)
4000e510:	d8002915 	stw	zero,164(sp)
4000e514:	d8003215 	stw	zero,200(sp)
4000e518:	003b2906 	br	4000d1c0 <__alt_data_end+0xc000d1c0>
4000e51c:	d9002d17 	ldw	r4,180(sp)
4000e520:	24c00017 	ldw	r19,0(r4)
4000e524:	21000104 	addi	r4,r4,4
4000e528:	d9002d15 	stw	r4,180(sp)
4000e52c:	982dd7fa 	srai	r22,r19,31
4000e530:	b005883a 	mov	r2,r22
4000e534:	003a9f06 	br	4000cfb4 <__alt_data_end+0xc000cfb4>
4000e538:	d9402d17 	ldw	r5,180(sp)
4000e53c:	d8c02f17 	ldw	r3,188(sp)
4000e540:	28800017 	ldw	r2,0(r5)
4000e544:	29400104 	addi	r5,r5,4
4000e548:	d9402d15 	stw	r5,180(sp)
4000e54c:	10c00015 	stw	r3,0(r2)
4000e550:	00398606 	br	4000cb6c <__alt_data_end+0xc000cb6c>
4000e554:	d9402d17 	ldw	r5,180(sp)
4000e558:	002d883a 	mov	r22,zero
4000e55c:	2cc00017 	ldw	r19,0(r5)
4000e560:	29400104 	addi	r5,r5,4
4000e564:	d9402d15 	stw	r5,180(sp)
4000e568:	003c2306 	br	4000d5f8 <__alt_data_end+0xc000d5f8>
4000e56c:	d8c02d17 	ldw	r3,180(sp)
4000e570:	d9002917 	ldw	r4,164(sp)
4000e574:	002d883a 	mov	r22,zero
4000e578:	18800104 	addi	r2,r3,4
4000e57c:	1cc0000b 	ldhu	r19,0(r3)
4000e580:	203dc10e 	bge	r4,zero,4000dc88 <__alt_data_end+0xc000dc88>
4000e584:	003f7506 	br	4000e35c <__alt_data_end+0xc000e35c>
4000e588:	041000b4 	movhi	r16,16386
4000e58c:	843b2304 	addi	r16,r16,-4980
4000e590:	003acc06 	br	4000d0c4 <__alt_data_end+0xc000d0c4>
4000e594:	d9002c17 	ldw	r4,176(sp)
4000e598:	d9801e04 	addi	r6,sp,120
4000e59c:	b80b883a 	mov	r5,r23
4000e5a0:	0012d6c0 	call	40012d6c <__sprint_r>
4000e5a4:	103a3b1e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000e5a8:	dc402617 	ldw	r17,152(sp)
4000e5ac:	d8c02017 	ldw	r3,128(sp)
4000e5b0:	da000404 	addi	r8,sp,16
4000e5b4:	003f9c06 	br	4000e428 <__alt_data_end+0xc000e428>
4000e5b8:	ac400043 	ldbu	r17,1(r21)
4000e5bc:	94800814 	ori	r18,r18,32
4000e5c0:	ad400044 	addi	r21,r21,1
4000e5c4:	8c403fcc 	andi	r17,r17,255
4000e5c8:	8c40201c 	xori	r17,r17,128
4000e5cc:	8c7fe004 	addi	r17,r17,-128
4000e5d0:	00398f06 	br	4000cc10 <__alt_data_end+0xc000cc10>
4000e5d4:	d8c02d15 	stw	r3,180(sp)
4000e5d8:	0039883a 	mov	fp,zero
4000e5dc:	003e3506 	br	4000deb4 <__alt_data_end+0xc000deb4>
4000e5e0:	d9002c17 	ldw	r4,176(sp)
4000e5e4:	d9801e04 	addi	r6,sp,120
4000e5e8:	b80b883a 	mov	r5,r23
4000e5ec:	0012d6c0 	call	40012d6c <__sprint_r>
4000e5f0:	103a281e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000e5f4:	d8c02017 	ldw	r3,128(sp)
4000e5f8:	da000404 	addi	r8,sp,16
4000e5fc:	003cd006 	br	4000d940 <__alt_data_end+0xc000d940>
4000e600:	8009883a 	mov	r4,r16
4000e604:	da003d15 	stw	r8,244(sp)
4000e608:	000c9ec0 	call	4000c9ec <strlen>
4000e60c:	d8802e15 	stw	r2,184(sp)
4000e610:	da003d17 	ldw	r8,244(sp)
4000e614:	103c340e 	bge	r2,zero,4000d6e8 <__alt_data_end+0xc000d6e8>
4000e618:	0005883a 	mov	r2,zero
4000e61c:	003c3206 	br	4000d6e8 <__alt_data_end+0xc000d6e8>
4000e620:	d9002c17 	ldw	r4,176(sp)
4000e624:	d9801e04 	addi	r6,sp,120
4000e628:	b80b883a 	mov	r5,r23
4000e62c:	0012d6c0 	call	40012d6c <__sprint_r>
4000e630:	103a181e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000e634:	d8c02017 	ldw	r3,128(sp)
4000e638:	d8801f17 	ldw	r2,124(sp)
4000e63c:	da000404 	addi	r8,sp,16
4000e640:	d9403317 	ldw	r5,204(sp)
4000e644:	10800044 	addi	r2,r2,1
4000e648:	44000015 	stw	r16,0(r8)
4000e64c:	28c7883a 	add	r3,r5,r3
4000e650:	003b7d06 	br	4000d448 <__alt_data_end+0xc000d448>
4000e654:	011000b4 	movhi	r4,16386
4000e658:	213b36c4 	addi	r4,r4,-4901
4000e65c:	d9003515 	stw	r4,212(sp)
4000e660:	003b1406 	br	4000d2b4 <__alt_data_end+0xc000d2b4>
4000e664:	013fffc4 	movi	r4,-1
4000e668:	003a3506 	br	4000cf40 <__alt_data_end+0xc000cf40>
4000e66c:	0023883a 	mov	r17,zero
4000e670:	003d9d06 	br	4000dce8 <__alt_data_end+0xc000dce8>
4000e674:	d9002c17 	ldw	r4,176(sp)
4000e678:	d9801e04 	addi	r6,sp,120
4000e67c:	b80b883a 	mov	r5,r23
4000e680:	0012d6c0 	call	40012d6c <__sprint_r>
4000e684:	103a031e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000e688:	d8c02017 	ldw	r3,128(sp)
4000e68c:	da000404 	addi	r8,sp,16
4000e690:	003d9406 	br	4000dce4 <__alt_data_end+0xc000dce4>
4000e694:	011000b4 	movhi	r4,16386
4000e698:	213b32c4 	addi	r4,r4,-4917
4000e69c:	d9002b15 	stw	r4,172(sp)
4000e6a0:	d9002b17 	ldw	r4,172(sp)
4000e6a4:	1c47883a 	add	r3,r3,r17
4000e6a8:	10800044 	addi	r2,r2,1
4000e6ac:	41000015 	stw	r4,0(r8)
4000e6b0:	44400115 	stw	r17,4(r8)
4000e6b4:	d8c02015 	stw	r3,128(sp)
4000e6b8:	d8801f15 	stw	r2,124(sp)
4000e6bc:	010001c4 	movi	r4,7
4000e6c0:	20bfd716 	blt	r4,r2,4000e620 <__alt_data_end+0xc000e620>
4000e6c4:	42000204 	addi	r8,r8,8
4000e6c8:	003fdd06 	br	4000e640 <__alt_data_end+0xc000e640>
4000e6cc:	d9002c17 	ldw	r4,176(sp)
4000e6d0:	d9801e04 	addi	r6,sp,120
4000e6d4:	b80b883a 	mov	r5,r23
4000e6d8:	0012d6c0 	call	40012d6c <__sprint_r>
4000e6dc:	1039ed1e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000e6e0:	d8802617 	ldw	r2,152(sp)
4000e6e4:	d8c02017 	ldw	r3,128(sp)
4000e6e8:	da000404 	addi	r8,sp,16
4000e6ec:	003e1006 	br	4000df30 <__alt_data_end+0xc000df30>
4000e6f0:	00800044 	movi	r2,1
4000e6f4:	10803fcc 	andi	r2,r2,255
4000e6f8:	00c00044 	movi	r3,1
4000e6fc:	10fa3526 	beq	r2,r3,4000cfd4 <__alt_data_end+0xc000cfd4>
4000e700:	00c00084 	movi	r3,2
4000e704:	10fbcb26 	beq	r2,r3,4000d634 <__alt_data_end+0xc000d634>
4000e708:	003a8f06 	br	4000d148 <__alt_data_end+0xc000d148>
4000e70c:	011000b4 	movhi	r4,16386
4000e710:	213b36c4 	addi	r4,r4,-4901
4000e714:	d9003515 	stw	r4,212(sp)
4000e718:	003b7606 	br	4000d4f4 <__alt_data_end+0xc000d4f4>
4000e71c:	d8802917 	ldw	r2,164(sp)
4000e720:	00c00184 	movi	r3,6
4000e724:	1880012e 	bgeu	r3,r2,4000e72c <___vfprintf_internal_r+0x1ca0>
4000e728:	1805883a 	mov	r2,r3
4000e72c:	d8802e15 	stw	r2,184(sp)
4000e730:	1000ef16 	blt	r2,zero,4000eaf0 <___vfprintf_internal_r+0x2064>
4000e734:	041000b4 	movhi	r16,16386
4000e738:	d8802a15 	stw	r2,168(sp)
4000e73c:	dcc02d15 	stw	r19,180(sp)
4000e740:	d8002915 	stw	zero,164(sp)
4000e744:	d8003215 	stw	zero,200(sp)
4000e748:	843b3104 	addi	r16,r16,-4924
4000e74c:	0039883a 	mov	fp,zero
4000e750:	003aa206 	br	4000d1dc <__alt_data_end+0xc000d1dc>
4000e754:	0021883a 	mov	r16,zero
4000e758:	003e0706 	br	4000df78 <__alt_data_end+0xc000df78>
4000e75c:	d9002c17 	ldw	r4,176(sp)
4000e760:	d9801e04 	addi	r6,sp,120
4000e764:	b80b883a 	mov	r5,r23
4000e768:	0012d6c0 	call	40012d6c <__sprint_r>
4000e76c:	1039c91e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000e770:	d8802617 	ldw	r2,152(sp)
4000e774:	d9403317 	ldw	r5,204(sp)
4000e778:	d8c02017 	ldw	r3,128(sp)
4000e77c:	da000404 	addi	r8,sp,16
4000e780:	2885c83a 	sub	r2,r5,r2
4000e784:	003dfb06 	br	4000df74 <__alt_data_end+0xc000df74>
4000e788:	9080004c 	andi	r2,r18,1
4000e78c:	103e8f1e 	bne	r2,zero,4000e1cc <__alt_data_end+0xc000e1cc>
4000e790:	d8802117 	ldw	r2,132(sp)
4000e794:	003e9e06 	br	4000e210 <__alt_data_end+0xc000e210>
4000e798:	1025883a 	mov	r18,r2
4000e79c:	0039883a 	mov	fp,zero
4000e7a0:	00800084 	movi	r2,2
4000e7a4:	003fd306 	br	4000e6f4 <__alt_data_end+0xc000e6f4>
4000e7a8:	07000b44 	movi	fp,45
4000e7ac:	df002785 	stb	fp,158(sp)
4000e7b0:	003a4006 	br	4000d0b4 <__alt_data_end+0xc000d0b4>
4000e7b4:	00c00b44 	movi	r3,45
4000e7b8:	d8c02785 	stb	r3,158(sp)
4000e7bc:	d8802a15 	stw	r2,168(sp)
4000e7c0:	dc802b17 	ldw	r18,172(sp)
4000e7c4:	d8002915 	stw	zero,164(sp)
4000e7c8:	07000b44 	movi	fp,45
4000e7cc:	003a8006 	br	4000d1d0 <__alt_data_end+0xc000d1d0>
4000e7d0:	041000b4 	movhi	r16,16386
4000e7d4:	843b2604 	addi	r16,r16,-4968
4000e7d8:	003f4706 	br	4000e4f8 <__alt_data_end+0xc000e4f8>
4000e7dc:	d8c02d17 	ldw	r3,180(sp)
4000e7e0:	d9002f17 	ldw	r4,188(sp)
4000e7e4:	18800017 	ldw	r2,0(r3)
4000e7e8:	18c00104 	addi	r3,r3,4
4000e7ec:	d8c02d15 	stw	r3,180(sp)
4000e7f0:	11000015 	stw	r4,0(r2)
4000e7f4:	0038dd06 	br	4000cb6c <__alt_data_end+0xc000cb6c>
4000e7f8:	dd802617 	ldw	r22,152(sp)
4000e7fc:	00bfff44 	movi	r2,-3
4000e800:	b0801c16 	blt	r22,r2,4000e874 <___vfprintf_internal_r+0x1de8>
4000e804:	d9402917 	ldw	r5,164(sp)
4000e808:	2d801a16 	blt	r5,r22,4000e874 <___vfprintf_internal_r+0x1de8>
4000e80c:	dd803215 	stw	r22,200(sp)
4000e810:	003e8906 	br	4000e238 <__alt_data_end+0xc000e238>
4000e814:	011000b4 	movhi	r4,16386
4000e818:	213b32c4 	addi	r4,r4,-4917
4000e81c:	d9002b15 	stw	r4,172(sp)
4000e820:	003c9106 	br	4000da68 <__alt_data_end+0xc000da68>
4000e824:	e005883a 	mov	r2,fp
4000e828:	003e7906 	br	4000e210 <__alt_data_end+0xc000e210>
4000e82c:	d9402917 	ldw	r5,164(sp)
4000e830:	df002783 	ldbu	fp,158(sp)
4000e834:	dcc02d15 	stw	r19,180(sp)
4000e838:	d9402a15 	stw	r5,168(sp)
4000e83c:	d9402e15 	stw	r5,184(sp)
4000e840:	d8002915 	stw	zero,164(sp)
4000e844:	d8003215 	stw	zero,200(sp)
4000e848:	003a5d06 	br	4000d1c0 <__alt_data_end+0xc000d1c0>
4000e84c:	9080004c 	andi	r2,r18,1
4000e850:	0039883a 	mov	fp,zero
4000e854:	10000426 	beq	r2,zero,4000e868 <___vfprintf_internal_r+0x1ddc>
4000e858:	00800c04 	movi	r2,48
4000e85c:	dc001dc4 	addi	r16,sp,119
4000e860:	d8801dc5 	stb	r2,119(sp)
4000e864:	003b8006 	br	4000d668 <__alt_data_end+0xc000d668>
4000e868:	d8002e15 	stw	zero,184(sp)
4000e86c:	dc001e04 	addi	r16,sp,120
4000e870:	003a4d06 	br	4000d1a8 <__alt_data_end+0xc000d1a8>
4000e874:	8c7fff84 	addi	r17,r17,-2
4000e878:	b5bfffc4 	addi	r22,r22,-1
4000e87c:	dd802615 	stw	r22,152(sp)
4000e880:	dc4022c5 	stb	r17,139(sp)
4000e884:	b000bf16 	blt	r22,zero,4000eb84 <___vfprintf_internal_r+0x20f8>
4000e888:	00800ac4 	movi	r2,43
4000e88c:	d8802305 	stb	r2,140(sp)
4000e890:	00800244 	movi	r2,9
4000e894:	15807016 	blt	r2,r22,4000ea58 <___vfprintf_internal_r+0x1fcc>
4000e898:	00800c04 	movi	r2,48
4000e89c:	b5800c04 	addi	r22,r22,48
4000e8a0:	d8802345 	stb	r2,141(sp)
4000e8a4:	dd802385 	stb	r22,142(sp)
4000e8a8:	d88023c4 	addi	r2,sp,143
4000e8ac:	df0022c4 	addi	fp,sp,139
4000e8b0:	d8c03317 	ldw	r3,204(sp)
4000e8b4:	1739c83a 	sub	fp,r2,fp
4000e8b8:	d9003317 	ldw	r4,204(sp)
4000e8bc:	e0c7883a 	add	r3,fp,r3
4000e8c0:	df003a15 	stw	fp,232(sp)
4000e8c4:	d8c02e15 	stw	r3,184(sp)
4000e8c8:	00800044 	movi	r2,1
4000e8cc:	1100b30e 	bge	r2,r4,4000eb9c <___vfprintf_internal_r+0x2110>
4000e8d0:	d8c02e17 	ldw	r3,184(sp)
4000e8d4:	18c00044 	addi	r3,r3,1
4000e8d8:	d8c02e15 	stw	r3,184(sp)
4000e8dc:	1805883a 	mov	r2,r3
4000e8e0:	1800ac16 	blt	r3,zero,4000eb94 <___vfprintf_internal_r+0x2108>
4000e8e4:	d8003215 	stw	zero,200(sp)
4000e8e8:	003e5d06 	br	4000e260 <__alt_data_end+0xc000e260>
4000e8ec:	d9002c17 	ldw	r4,176(sp)
4000e8f0:	d9801e04 	addi	r6,sp,120
4000e8f4:	b80b883a 	mov	r5,r23
4000e8f8:	0012d6c0 	call	40012d6c <__sprint_r>
4000e8fc:	1039651e 	bne	r2,zero,4000ce94 <__alt_data_end+0xc000ce94>
4000e900:	dc402617 	ldw	r17,152(sp)
4000e904:	d8c02017 	ldw	r3,128(sp)
4000e908:	d8801f17 	ldw	r2,124(sp)
4000e90c:	da000404 	addi	r8,sp,16
4000e910:	003ed606 	br	4000e46c <__alt_data_end+0xc000e46c>
4000e914:	582b883a 	mov	r21,r11
4000e918:	d8002915 	stw	zero,164(sp)
4000e91c:	0038bd06 	br	4000cc14 <__alt_data_end+0xc000cc14>
4000e920:	d8802917 	ldw	r2,164(sp)
4000e924:	103e071e 	bne	r2,zero,4000e144 <__alt_data_end+0xc000e144>
4000e928:	dc002915 	stw	r16,164(sp)
4000e92c:	003e0506 	br	4000e144 <__alt_data_end+0xc000e144>
4000e930:	d9002917 	ldw	r4,164(sp)
4000e934:	20c00044 	addi	r3,r4,1
4000e938:	003e0f06 	br	4000e178 <__alt_data_end+0xc000e178>
4000e93c:	01400184 	movi	r5,6
4000e940:	d9402915 	stw	r5,164(sp)
4000e944:	003dff06 	br	4000e144 <__alt_data_end+0xc000e144>
4000e948:	d8802104 	addi	r2,sp,132
4000e94c:	d8800315 	stw	r2,12(sp)
4000e950:	d8802504 	addi	r2,sp,148
4000e954:	d8800215 	stw	r2,8(sp)
4000e958:	d8802604 	addi	r2,sp,152
4000e95c:	d8800115 	stw	r2,4(sp)
4000e960:	d8802917 	ldw	r2,164(sp)
4000e964:	d9403617 	ldw	r5,216(sp)
4000e968:	d9002c17 	ldw	r4,176(sp)
4000e96c:	d8800015 	stw	r2,0(sp)
4000e970:	01c000c4 	movi	r7,3
4000e974:	980d883a 	mov	r6,r19
4000e978:	da003d15 	stw	r8,244(sp)
4000e97c:	000f2e40 	call	4000f2e4 <_dtoa_r>
4000e980:	d8c02917 	ldw	r3,164(sp)
4000e984:	da003d17 	ldw	r8,244(sp)
4000e988:	1021883a 	mov	r16,r2
4000e98c:	10f9883a 	add	fp,r2,r3
4000e990:	81000007 	ldb	r4,0(r16)
4000e994:	00800c04 	movi	r2,48
4000e998:	20805e26 	beq	r4,r2,4000eb14 <___vfprintf_internal_r+0x2088>
4000e99c:	d8c02617 	ldw	r3,152(sp)
4000e9a0:	e0f9883a 	add	fp,fp,r3
4000e9a4:	003e0a06 	br	4000e1d0 <__alt_data_end+0xc000e1d0>
4000e9a8:	00c00b44 	movi	r3,45
4000e9ac:	24e0003c 	xorhi	r19,r4,32768
4000e9b0:	d8c02a05 	stb	r3,168(sp)
4000e9b4:	003de906 	br	4000e15c <__alt_data_end+0xc000e15c>
4000e9b8:	d8c03217 	ldw	r3,200(sp)
4000e9bc:	00c07a0e 	bge	zero,r3,4000eba8 <___vfprintf_internal_r+0x211c>
4000e9c0:	00800044 	movi	r2,1
4000e9c4:	d9003317 	ldw	r4,204(sp)
4000e9c8:	1105883a 	add	r2,r2,r4
4000e9cc:	d8802e15 	stw	r2,184(sp)
4000e9d0:	10004e16 	blt	r2,zero,4000eb0c <___vfprintf_internal_r+0x2080>
4000e9d4:	044019c4 	movi	r17,103
4000e9d8:	003e2106 	br	4000e260 <__alt_data_end+0xc000e260>
4000e9dc:	d9002917 	ldw	r4,164(sp)
4000e9e0:	d8802104 	addi	r2,sp,132
4000e9e4:	d8800315 	stw	r2,12(sp)
4000e9e8:	d9000015 	stw	r4,0(sp)
4000e9ec:	d8802504 	addi	r2,sp,148
4000e9f0:	d9403617 	ldw	r5,216(sp)
4000e9f4:	d9002c17 	ldw	r4,176(sp)
4000e9f8:	d8800215 	stw	r2,8(sp)
4000e9fc:	d8802604 	addi	r2,sp,152
4000ea00:	d8800115 	stw	r2,4(sp)
4000ea04:	01c000c4 	movi	r7,3
4000ea08:	980d883a 	mov	r6,r19
4000ea0c:	da003d15 	stw	r8,244(sp)
4000ea10:	000f2e40 	call	4000f2e4 <_dtoa_r>
4000ea14:	d8c02917 	ldw	r3,164(sp)
4000ea18:	da003d17 	ldw	r8,244(sp)
4000ea1c:	1021883a 	mov	r16,r2
4000ea20:	00801184 	movi	r2,70
4000ea24:	80f9883a 	add	fp,r16,r3
4000ea28:	88bfd926 	beq	r17,r2,4000e990 <__alt_data_end+0xc000e990>
4000ea2c:	003de806 	br	4000e1d0 <__alt_data_end+0xc000e1d0>
4000ea30:	d9002917 	ldw	r4,164(sp)
4000ea34:	00c04d0e 	bge	zero,r3,4000eb6c <___vfprintf_internal_r+0x20e0>
4000ea38:	2000441e 	bne	r4,zero,4000eb4c <___vfprintf_internal_r+0x20c0>
4000ea3c:	9480004c 	andi	r18,r18,1
4000ea40:	9000421e 	bne	r18,zero,4000eb4c <___vfprintf_internal_r+0x20c0>
4000ea44:	1805883a 	mov	r2,r3
4000ea48:	18007016 	blt	r3,zero,4000ec0c <___vfprintf_internal_r+0x2180>
4000ea4c:	d8c03217 	ldw	r3,200(sp)
4000ea50:	d8c02e15 	stw	r3,184(sp)
4000ea54:	003e0206 	br	4000e260 <__alt_data_end+0xc000e260>
4000ea58:	df0022c4 	addi	fp,sp,139
4000ea5c:	dc002915 	stw	r16,164(sp)
4000ea60:	4027883a 	mov	r19,r8
4000ea64:	e021883a 	mov	r16,fp
4000ea68:	b009883a 	mov	r4,r22
4000ea6c:	01400284 	movi	r5,10
4000ea70:	0007a000 	call	40007a00 <__modsi3>
4000ea74:	10800c04 	addi	r2,r2,48
4000ea78:	843fffc4 	addi	r16,r16,-1
4000ea7c:	b009883a 	mov	r4,r22
4000ea80:	01400284 	movi	r5,10
4000ea84:	80800005 	stb	r2,0(r16)
4000ea88:	000797c0 	call	4000797c <__divsi3>
4000ea8c:	102d883a 	mov	r22,r2
4000ea90:	00800244 	movi	r2,9
4000ea94:	15bff416 	blt	r2,r22,4000ea68 <__alt_data_end+0xc000ea68>
4000ea98:	9811883a 	mov	r8,r19
4000ea9c:	b0800c04 	addi	r2,r22,48
4000eaa0:	8027883a 	mov	r19,r16
4000eaa4:	997fffc4 	addi	r5,r19,-1
4000eaa8:	98bfffc5 	stb	r2,-1(r19)
4000eaac:	dc002917 	ldw	r16,164(sp)
4000eab0:	2f006a2e 	bgeu	r5,fp,4000ec5c <___vfprintf_internal_r+0x21d0>
4000eab4:	d9c02384 	addi	r7,sp,142
4000eab8:	3ccfc83a 	sub	r7,r7,r19
4000eabc:	d9002344 	addi	r4,sp,141
4000eac0:	e1cf883a 	add	r7,fp,r7
4000eac4:	00000106 	br	4000eacc <___vfprintf_internal_r+0x2040>
4000eac8:	28800003 	ldbu	r2,0(r5)
4000eacc:	20800005 	stb	r2,0(r4)
4000ead0:	21000044 	addi	r4,r4,1
4000ead4:	29400044 	addi	r5,r5,1
4000ead8:	393ffb1e 	bne	r7,r4,4000eac8 <__alt_data_end+0xc000eac8>
4000eadc:	d8802304 	addi	r2,sp,140
4000eae0:	14c5c83a 	sub	r2,r2,r19
4000eae4:	d8c02344 	addi	r3,sp,141
4000eae8:	1885883a 	add	r2,r3,r2
4000eaec:	003f7006 	br	4000e8b0 <__alt_data_end+0xc000e8b0>
4000eaf0:	0005883a 	mov	r2,zero
4000eaf4:	003f0f06 	br	4000e734 <__alt_data_end+0xc000e734>
4000eaf8:	d8c03217 	ldw	r3,200(sp)
4000eafc:	18c00044 	addi	r3,r3,1
4000eb00:	d8c02e15 	stw	r3,184(sp)
4000eb04:	1805883a 	mov	r2,r3
4000eb08:	183fb20e 	bge	r3,zero,4000e9d4 <__alt_data_end+0xc000e9d4>
4000eb0c:	0005883a 	mov	r2,zero
4000eb10:	003fb006 	br	4000e9d4 <__alt_data_end+0xc000e9d4>
4000eb14:	d9003617 	ldw	r4,216(sp)
4000eb18:	000d883a 	mov	r6,zero
4000eb1c:	000f883a 	mov	r7,zero
4000eb20:	980b883a 	mov	r5,r19
4000eb24:	d8c03c15 	stw	r3,240(sp)
4000eb28:	da003d15 	stw	r8,244(sp)
4000eb2c:	00152b00 	call	400152b0 <__eqdf2>
4000eb30:	d8c03c17 	ldw	r3,240(sp)
4000eb34:	da003d17 	ldw	r8,244(sp)
4000eb38:	103f9826 	beq	r2,zero,4000e99c <__alt_data_end+0xc000e99c>
4000eb3c:	00800044 	movi	r2,1
4000eb40:	10c7c83a 	sub	r3,r2,r3
4000eb44:	d8c02615 	stw	r3,152(sp)
4000eb48:	003f9506 	br	4000e9a0 <__alt_data_end+0xc000e9a0>
4000eb4c:	d9002917 	ldw	r4,164(sp)
4000eb50:	d8c03217 	ldw	r3,200(sp)
4000eb54:	20800044 	addi	r2,r4,1
4000eb58:	1885883a 	add	r2,r3,r2
4000eb5c:	d8802e15 	stw	r2,184(sp)
4000eb60:	103dbf0e 	bge	r2,zero,4000e260 <__alt_data_end+0xc000e260>
4000eb64:	0005883a 	mov	r2,zero
4000eb68:	003dbd06 	br	4000e260 <__alt_data_end+0xc000e260>
4000eb6c:	2000211e 	bne	r4,zero,4000ebf4 <___vfprintf_internal_r+0x2168>
4000eb70:	9480004c 	andi	r18,r18,1
4000eb74:	90001f1e 	bne	r18,zero,4000ebf4 <___vfprintf_internal_r+0x2168>
4000eb78:	00800044 	movi	r2,1
4000eb7c:	d8802e15 	stw	r2,184(sp)
4000eb80:	003db706 	br	4000e260 <__alt_data_end+0xc000e260>
4000eb84:	00800b44 	movi	r2,45
4000eb88:	05adc83a 	sub	r22,zero,r22
4000eb8c:	d8802305 	stb	r2,140(sp)
4000eb90:	003f3f06 	br	4000e890 <__alt_data_end+0xc000e890>
4000eb94:	0005883a 	mov	r2,zero
4000eb98:	003f5206 	br	4000e8e4 <__alt_data_end+0xc000e8e4>
4000eb9c:	90a4703a 	and	r18,r18,r2
4000eba0:	903f4e26 	beq	r18,zero,4000e8dc <__alt_data_end+0xc000e8dc>
4000eba4:	003f4a06 	br	4000e8d0 <__alt_data_end+0xc000e8d0>
4000eba8:	00800084 	movi	r2,2
4000ebac:	10c5c83a 	sub	r2,r2,r3
4000ebb0:	003f8406 	br	4000e9c4 <__alt_data_end+0xc000e9c4>
4000ebb4:	d8802d17 	ldw	r2,180(sp)
4000ebb8:	d9002d17 	ldw	r4,180(sp)
4000ebbc:	ac400043 	ldbu	r17,1(r21)
4000ebc0:	10800017 	ldw	r2,0(r2)
4000ebc4:	582b883a 	mov	r21,r11
4000ebc8:	d8802915 	stw	r2,164(sp)
4000ebcc:	20800104 	addi	r2,r4,4
4000ebd0:	d9002917 	ldw	r4,164(sp)
4000ebd4:	d8802d15 	stw	r2,180(sp)
4000ebd8:	203e7a0e 	bge	r4,zero,4000e5c4 <__alt_data_end+0xc000e5c4>
4000ebdc:	8c403fcc 	andi	r17,r17,255
4000ebe0:	00bfffc4 	movi	r2,-1
4000ebe4:	8c40201c 	xori	r17,r17,128
4000ebe8:	d8802915 	stw	r2,164(sp)
4000ebec:	8c7fe004 	addi	r17,r17,-128
4000ebf0:	00380706 	br	4000cc10 <__alt_data_end+0xc000cc10>
4000ebf4:	d8c02917 	ldw	r3,164(sp)
4000ebf8:	18c00084 	addi	r3,r3,2
4000ebfc:	d8c02e15 	stw	r3,184(sp)
4000ec00:	1805883a 	mov	r2,r3
4000ec04:	183d960e 	bge	r3,zero,4000e260 <__alt_data_end+0xc000e260>
4000ec08:	003fd606 	br	4000eb64 <__alt_data_end+0xc000eb64>
4000ec0c:	0005883a 	mov	r2,zero
4000ec10:	003f8e06 	br	4000ea4c <__alt_data_end+0xc000ea4c>
4000ec14:	9080004c 	andi	r2,r18,1
4000ec18:	103f811e 	bne	r2,zero,4000ea20 <__alt_data_end+0xc000ea20>
4000ec1c:	d8802117 	ldw	r2,132(sp)
4000ec20:	1405c83a 	sub	r2,r2,r16
4000ec24:	d8803315 	stw	r2,204(sp)
4000ec28:	b47ef326 	beq	r22,r17,4000e7f8 <__alt_data_end+0xc000e7f8>
4000ec2c:	dd802617 	ldw	r22,152(sp)
4000ec30:	003f1106 	br	4000e878 <__alt_data_end+0xc000e878>
4000ec34:	d9c02785 	stb	r7,158(sp)
4000ec38:	00390406 	br	4000d04c <__alt_data_end+0xc000d04c>
4000ec3c:	d9c02785 	stb	r7,158(sp)
4000ec40:	0038d306 	br	4000cf90 <__alt_data_end+0xc000cf90>
4000ec44:	d9c02785 	stb	r7,158(sp)
4000ec48:	003a6106 	br	4000d5d0 <__alt_data_end+0xc000d5d0>
4000ec4c:	d9c02785 	stb	r7,158(sp)
4000ec50:	003af806 	br	4000d834 <__alt_data_end+0xc000d834>
4000ec54:	0005883a 	mov	r2,zero
4000ec58:	003d7e06 	br	4000e254 <__alt_data_end+0xc000e254>
4000ec5c:	d8802344 	addi	r2,sp,141
4000ec60:	003f1306 	br	4000e8b0 <__alt_data_end+0xc000e8b0>
4000ec64:	d9c02785 	stb	r7,158(sp)
4000ec68:	00392306 	br	4000d0f8 <__alt_data_end+0xc000d0f8>
4000ec6c:	d9c02785 	stb	r7,158(sp)
4000ec70:	003aa906 	br	4000d718 <__alt_data_end+0xc000d718>
4000ec74:	d9c02785 	stb	r7,158(sp)
4000ec78:	003a3d06 	br	4000d570 <__alt_data_end+0xc000d570>
4000ec7c:	d9c02785 	stb	r7,158(sp)
4000ec80:	003aca06 	br	4000d7ac <__alt_data_end+0xc000d7ac>

4000ec84 <__vfprintf_internal>:
4000ec84:	009000b4 	movhi	r2,16386
4000ec88:	108af604 	addi	r2,r2,11224
4000ec8c:	300f883a 	mov	r7,r6
4000ec90:	280d883a 	mov	r6,r5
4000ec94:	200b883a 	mov	r5,r4
4000ec98:	11000017 	ldw	r4,0(r2)
4000ec9c:	000ca8c1 	jmpi	4000ca8c <___vfprintf_internal_r>

4000eca0 <__sbprintf>:
4000eca0:	2880030b 	ldhu	r2,12(r5)
4000eca4:	2ac01917 	ldw	r11,100(r5)
4000eca8:	2a80038b 	ldhu	r10,14(r5)
4000ecac:	2a400717 	ldw	r9,28(r5)
4000ecb0:	2a000917 	ldw	r8,36(r5)
4000ecb4:	defee204 	addi	sp,sp,-1144
4000ecb8:	00c10004 	movi	r3,1024
4000ecbc:	dc011a15 	stw	r16,1128(sp)
4000ecc0:	10bfff4c 	andi	r2,r2,65533
4000ecc4:	2821883a 	mov	r16,r5
4000ecc8:	d8cb883a 	add	r5,sp,r3
4000eccc:	dc811c15 	stw	r18,1136(sp)
4000ecd0:	dc411b15 	stw	r17,1132(sp)
4000ecd4:	dfc11d15 	stw	ra,1140(sp)
4000ecd8:	2025883a 	mov	r18,r4
4000ecdc:	d881030d 	sth	r2,1036(sp)
4000ece0:	dac11915 	stw	r11,1124(sp)
4000ece4:	da81038d 	sth	r10,1038(sp)
4000ece8:	da410715 	stw	r9,1052(sp)
4000ecec:	da010915 	stw	r8,1060(sp)
4000ecf0:	dec10015 	stw	sp,1024(sp)
4000ecf4:	dec10415 	stw	sp,1040(sp)
4000ecf8:	d8c10215 	stw	r3,1032(sp)
4000ecfc:	d8c10515 	stw	r3,1044(sp)
4000ed00:	d8010615 	stw	zero,1048(sp)
4000ed04:	000ca8c0 	call	4000ca8c <___vfprintf_internal_r>
4000ed08:	1023883a 	mov	r17,r2
4000ed0c:	10000416 	blt	r2,zero,4000ed20 <__sbprintf+0x80>
4000ed10:	d9410004 	addi	r5,sp,1024
4000ed14:	9009883a 	mov	r4,r18
4000ed18:	0009a780 	call	40009a78 <_fflush_r>
4000ed1c:	10000d1e 	bne	r2,zero,4000ed54 <__sbprintf+0xb4>
4000ed20:	d881030b 	ldhu	r2,1036(sp)
4000ed24:	1080100c 	andi	r2,r2,64
4000ed28:	10000326 	beq	r2,zero,4000ed38 <__sbprintf+0x98>
4000ed2c:	8080030b 	ldhu	r2,12(r16)
4000ed30:	10801014 	ori	r2,r2,64
4000ed34:	8080030d 	sth	r2,12(r16)
4000ed38:	8805883a 	mov	r2,r17
4000ed3c:	dfc11d17 	ldw	ra,1140(sp)
4000ed40:	dc811c17 	ldw	r18,1136(sp)
4000ed44:	dc411b17 	ldw	r17,1132(sp)
4000ed48:	dc011a17 	ldw	r16,1128(sp)
4000ed4c:	dec11e04 	addi	sp,sp,1144
4000ed50:	f800283a 	ret
4000ed54:	047fffc4 	movi	r17,-1
4000ed58:	003ff106 	br	4000ed20 <__alt_data_end+0xc000ed20>

4000ed5c <_write_r>:
4000ed5c:	defffd04 	addi	sp,sp,-12
4000ed60:	2805883a 	mov	r2,r5
4000ed64:	dc000015 	stw	r16,0(sp)
4000ed68:	041000b4 	movhi	r16,16386
4000ed6c:	dc400115 	stw	r17,4(sp)
4000ed70:	300b883a 	mov	r5,r6
4000ed74:	841a9404 	addi	r16,r16,27216
4000ed78:	2023883a 	mov	r17,r4
4000ed7c:	380d883a 	mov	r6,r7
4000ed80:	1009883a 	mov	r4,r2
4000ed84:	dfc00215 	stw	ra,8(sp)
4000ed88:	80000015 	stw	zero,0(r16)
4000ed8c:	001643c0 	call	4001643c <write>
4000ed90:	00ffffc4 	movi	r3,-1
4000ed94:	10c00526 	beq	r2,r3,4000edac <_write_r+0x50>
4000ed98:	dfc00217 	ldw	ra,8(sp)
4000ed9c:	dc400117 	ldw	r17,4(sp)
4000eda0:	dc000017 	ldw	r16,0(sp)
4000eda4:	dec00304 	addi	sp,sp,12
4000eda8:	f800283a 	ret
4000edac:	80c00017 	ldw	r3,0(r16)
4000edb0:	183ff926 	beq	r3,zero,4000ed98 <__alt_data_end+0xc000ed98>
4000edb4:	88c00015 	stw	r3,0(r17)
4000edb8:	003ff706 	br	4000ed98 <__alt_data_end+0xc000ed98>

4000edbc <__swsetup_r>:
4000edbc:	009000b4 	movhi	r2,16386
4000edc0:	defffd04 	addi	sp,sp,-12
4000edc4:	108af604 	addi	r2,r2,11224
4000edc8:	dc400115 	stw	r17,4(sp)
4000edcc:	2023883a 	mov	r17,r4
4000edd0:	11000017 	ldw	r4,0(r2)
4000edd4:	dc000015 	stw	r16,0(sp)
4000edd8:	dfc00215 	stw	ra,8(sp)
4000eddc:	2821883a 	mov	r16,r5
4000ede0:	20000226 	beq	r4,zero,4000edec <__swsetup_r+0x30>
4000ede4:	20800e17 	ldw	r2,56(r4)
4000ede8:	10003126 	beq	r2,zero,4000eeb0 <__swsetup_r+0xf4>
4000edec:	8080030b 	ldhu	r2,12(r16)
4000edf0:	10c0020c 	andi	r3,r2,8
4000edf4:	1009883a 	mov	r4,r2
4000edf8:	18000f26 	beq	r3,zero,4000ee38 <__swsetup_r+0x7c>
4000edfc:	80c00417 	ldw	r3,16(r16)
4000ee00:	18001526 	beq	r3,zero,4000ee58 <__swsetup_r+0x9c>
4000ee04:	1100004c 	andi	r4,r2,1
4000ee08:	20001c1e 	bne	r4,zero,4000ee7c <__swsetup_r+0xc0>
4000ee0c:	1080008c 	andi	r2,r2,2
4000ee10:	1000291e 	bne	r2,zero,4000eeb8 <__swsetup_r+0xfc>
4000ee14:	80800517 	ldw	r2,20(r16)
4000ee18:	80800215 	stw	r2,8(r16)
4000ee1c:	18001c26 	beq	r3,zero,4000ee90 <__swsetup_r+0xd4>
4000ee20:	0005883a 	mov	r2,zero
4000ee24:	dfc00217 	ldw	ra,8(sp)
4000ee28:	dc400117 	ldw	r17,4(sp)
4000ee2c:	dc000017 	ldw	r16,0(sp)
4000ee30:	dec00304 	addi	sp,sp,12
4000ee34:	f800283a 	ret
4000ee38:	2080040c 	andi	r2,r4,16
4000ee3c:	10002e26 	beq	r2,zero,4000eef8 <__swsetup_r+0x13c>
4000ee40:	2080010c 	andi	r2,r4,4
4000ee44:	10001e1e 	bne	r2,zero,4000eec0 <__swsetup_r+0x104>
4000ee48:	80c00417 	ldw	r3,16(r16)
4000ee4c:	20800214 	ori	r2,r4,8
4000ee50:	8080030d 	sth	r2,12(r16)
4000ee54:	183feb1e 	bne	r3,zero,4000ee04 <__alt_data_end+0xc000ee04>
4000ee58:	1100a00c 	andi	r4,r2,640
4000ee5c:	01408004 	movi	r5,512
4000ee60:	217fe826 	beq	r4,r5,4000ee04 <__alt_data_end+0xc000ee04>
4000ee64:	800b883a 	mov	r5,r16
4000ee68:	8809883a 	mov	r4,r17
4000ee6c:	000af0c0 	call	4000af0c <__smakebuf_r>
4000ee70:	8080030b 	ldhu	r2,12(r16)
4000ee74:	80c00417 	ldw	r3,16(r16)
4000ee78:	003fe206 	br	4000ee04 <__alt_data_end+0xc000ee04>
4000ee7c:	80800517 	ldw	r2,20(r16)
4000ee80:	80000215 	stw	zero,8(r16)
4000ee84:	0085c83a 	sub	r2,zero,r2
4000ee88:	80800615 	stw	r2,24(r16)
4000ee8c:	183fe41e 	bne	r3,zero,4000ee20 <__alt_data_end+0xc000ee20>
4000ee90:	80c0030b 	ldhu	r3,12(r16)
4000ee94:	0005883a 	mov	r2,zero
4000ee98:	1900200c 	andi	r4,r3,128
4000ee9c:	203fe126 	beq	r4,zero,4000ee24 <__alt_data_end+0xc000ee24>
4000eea0:	18c01014 	ori	r3,r3,64
4000eea4:	80c0030d 	sth	r3,12(r16)
4000eea8:	00bfffc4 	movi	r2,-1
4000eeac:	003fdd06 	br	4000ee24 <__alt_data_end+0xc000ee24>
4000eeb0:	0009e540 	call	40009e54 <__sinit>
4000eeb4:	003fcd06 	br	4000edec <__alt_data_end+0xc000edec>
4000eeb8:	0005883a 	mov	r2,zero
4000eebc:	003fd606 	br	4000ee18 <__alt_data_end+0xc000ee18>
4000eec0:	81400c17 	ldw	r5,48(r16)
4000eec4:	28000626 	beq	r5,zero,4000eee0 <__swsetup_r+0x124>
4000eec8:	80801004 	addi	r2,r16,64
4000eecc:	28800326 	beq	r5,r2,4000eedc <__swsetup_r+0x120>
4000eed0:	8809883a 	mov	r4,r17
4000eed4:	000a3800 	call	4000a380 <_free_r>
4000eed8:	8100030b 	ldhu	r4,12(r16)
4000eedc:	80000c15 	stw	zero,48(r16)
4000eee0:	80c00417 	ldw	r3,16(r16)
4000eee4:	00bff6c4 	movi	r2,-37
4000eee8:	1108703a 	and	r4,r2,r4
4000eeec:	80000115 	stw	zero,4(r16)
4000eef0:	80c00015 	stw	r3,0(r16)
4000eef4:	003fd506 	br	4000ee4c <__alt_data_end+0xc000ee4c>
4000eef8:	00800244 	movi	r2,9
4000eefc:	88800015 	stw	r2,0(r17)
4000ef00:	20801014 	ori	r2,r4,64
4000ef04:	8080030d 	sth	r2,12(r16)
4000ef08:	00bfffc4 	movi	r2,-1
4000ef0c:	003fc506 	br	4000ee24 <__alt_data_end+0xc000ee24>

4000ef10 <_close_r>:
4000ef10:	defffd04 	addi	sp,sp,-12
4000ef14:	dc000015 	stw	r16,0(sp)
4000ef18:	041000b4 	movhi	r16,16386
4000ef1c:	dc400115 	stw	r17,4(sp)
4000ef20:	841a9404 	addi	r16,r16,27216
4000ef24:	2023883a 	mov	r17,r4
4000ef28:	2809883a 	mov	r4,r5
4000ef2c:	dfc00215 	stw	ra,8(sp)
4000ef30:	80000015 	stw	zero,0(r16)
4000ef34:	0015e040 	call	40015e04 <close>
4000ef38:	00ffffc4 	movi	r3,-1
4000ef3c:	10c00526 	beq	r2,r3,4000ef54 <_close_r+0x44>
4000ef40:	dfc00217 	ldw	ra,8(sp)
4000ef44:	dc400117 	ldw	r17,4(sp)
4000ef48:	dc000017 	ldw	r16,0(sp)
4000ef4c:	dec00304 	addi	sp,sp,12
4000ef50:	f800283a 	ret
4000ef54:	80c00017 	ldw	r3,0(r16)
4000ef58:	183ff926 	beq	r3,zero,4000ef40 <__alt_data_end+0xc000ef40>
4000ef5c:	88c00015 	stw	r3,0(r17)
4000ef60:	003ff706 	br	4000ef40 <__alt_data_end+0xc000ef40>

4000ef64 <__call_exitprocs>:
4000ef64:	defff504 	addi	sp,sp,-44
4000ef68:	df000915 	stw	fp,36(sp)
4000ef6c:	dd400615 	stw	r21,24(sp)
4000ef70:	dc800315 	stw	r18,12(sp)
4000ef74:	dfc00a15 	stw	ra,40(sp)
4000ef78:	ddc00815 	stw	r23,32(sp)
4000ef7c:	dd800715 	stw	r22,28(sp)
4000ef80:	dd000515 	stw	r20,20(sp)
4000ef84:	dcc00415 	stw	r19,16(sp)
4000ef88:	dc400215 	stw	r17,8(sp)
4000ef8c:	dc000115 	stw	r16,4(sp)
4000ef90:	d9000015 	stw	r4,0(sp)
4000ef94:	2839883a 	mov	fp,r5
4000ef98:	04800044 	movi	r18,1
4000ef9c:	057fffc4 	movi	r21,-1
4000efa0:	009000b4 	movhi	r2,16386
4000efa4:	108af504 	addi	r2,r2,11220
4000efa8:	12000017 	ldw	r8,0(r2)
4000efac:	45005217 	ldw	r20,328(r8)
4000efb0:	44c05204 	addi	r19,r8,328
4000efb4:	a0001c26 	beq	r20,zero,4000f028 <__call_exitprocs+0xc4>
4000efb8:	a0800117 	ldw	r2,4(r20)
4000efbc:	15ffffc4 	addi	r23,r2,-1
4000efc0:	b8000d16 	blt	r23,zero,4000eff8 <__call_exitprocs+0x94>
4000efc4:	14000044 	addi	r16,r2,1
4000efc8:	8421883a 	add	r16,r16,r16
4000efcc:	8421883a 	add	r16,r16,r16
4000efd0:	84402004 	addi	r17,r16,128
4000efd4:	a463883a 	add	r17,r20,r17
4000efd8:	a421883a 	add	r16,r20,r16
4000efdc:	e0001e26 	beq	fp,zero,4000f058 <__call_exitprocs+0xf4>
4000efe0:	80804017 	ldw	r2,256(r16)
4000efe4:	e0801c26 	beq	fp,r2,4000f058 <__call_exitprocs+0xf4>
4000efe8:	bdffffc4 	addi	r23,r23,-1
4000efec:	843fff04 	addi	r16,r16,-4
4000eff0:	8c7fff04 	addi	r17,r17,-4
4000eff4:	bd7ff91e 	bne	r23,r21,4000efdc <__alt_data_end+0xc000efdc>
4000eff8:	00900074 	movhi	r2,16385
4000effc:	10ac3704 	addi	r2,r2,-20260
4000f000:	10000926 	beq	r2,zero,4000f028 <__call_exitprocs+0xc4>
4000f004:	a0800117 	ldw	r2,4(r20)
4000f008:	1000301e 	bne	r2,zero,4000f0cc <__call_exitprocs+0x168>
4000f00c:	a0800017 	ldw	r2,0(r20)
4000f010:	10003226 	beq	r2,zero,4000f0dc <__call_exitprocs+0x178>
4000f014:	a009883a 	mov	r4,r20
4000f018:	98800015 	stw	r2,0(r19)
4000f01c:	000b0dc0 	call	4000b0dc <free>
4000f020:	9d000017 	ldw	r20,0(r19)
4000f024:	a03fe41e 	bne	r20,zero,4000efb8 <__alt_data_end+0xc000efb8>
4000f028:	dfc00a17 	ldw	ra,40(sp)
4000f02c:	df000917 	ldw	fp,36(sp)
4000f030:	ddc00817 	ldw	r23,32(sp)
4000f034:	dd800717 	ldw	r22,28(sp)
4000f038:	dd400617 	ldw	r21,24(sp)
4000f03c:	dd000517 	ldw	r20,20(sp)
4000f040:	dcc00417 	ldw	r19,16(sp)
4000f044:	dc800317 	ldw	r18,12(sp)
4000f048:	dc400217 	ldw	r17,8(sp)
4000f04c:	dc000117 	ldw	r16,4(sp)
4000f050:	dec00b04 	addi	sp,sp,44
4000f054:	f800283a 	ret
4000f058:	a0800117 	ldw	r2,4(r20)
4000f05c:	80c00017 	ldw	r3,0(r16)
4000f060:	10bfffc4 	addi	r2,r2,-1
4000f064:	15c01426 	beq	r2,r23,4000f0b8 <__call_exitprocs+0x154>
4000f068:	80000015 	stw	zero,0(r16)
4000f06c:	183fde26 	beq	r3,zero,4000efe8 <__alt_data_end+0xc000efe8>
4000f070:	95c8983a 	sll	r4,r18,r23
4000f074:	a0806217 	ldw	r2,392(r20)
4000f078:	a5800117 	ldw	r22,4(r20)
4000f07c:	2084703a 	and	r2,r4,r2
4000f080:	10000b26 	beq	r2,zero,4000f0b0 <__call_exitprocs+0x14c>
4000f084:	a0806317 	ldw	r2,396(r20)
4000f088:	2088703a 	and	r4,r4,r2
4000f08c:	20000c1e 	bne	r4,zero,4000f0c0 <__call_exitprocs+0x15c>
4000f090:	89400017 	ldw	r5,0(r17)
4000f094:	d9000017 	ldw	r4,0(sp)
4000f098:	183ee83a 	callr	r3
4000f09c:	a0800117 	ldw	r2,4(r20)
4000f0a0:	15bfbf1e 	bne	r2,r22,4000efa0 <__alt_data_end+0xc000efa0>
4000f0a4:	98800017 	ldw	r2,0(r19)
4000f0a8:	153fcf26 	beq	r2,r20,4000efe8 <__alt_data_end+0xc000efe8>
4000f0ac:	003fbc06 	br	4000efa0 <__alt_data_end+0xc000efa0>
4000f0b0:	183ee83a 	callr	r3
4000f0b4:	003ff906 	br	4000f09c <__alt_data_end+0xc000f09c>
4000f0b8:	a5c00115 	stw	r23,4(r20)
4000f0bc:	003feb06 	br	4000f06c <__alt_data_end+0xc000f06c>
4000f0c0:	89000017 	ldw	r4,0(r17)
4000f0c4:	183ee83a 	callr	r3
4000f0c8:	003ff406 	br	4000f09c <__alt_data_end+0xc000f09c>
4000f0cc:	a0800017 	ldw	r2,0(r20)
4000f0d0:	a027883a 	mov	r19,r20
4000f0d4:	1029883a 	mov	r20,r2
4000f0d8:	003fb606 	br	4000efb4 <__alt_data_end+0xc000efb4>
4000f0dc:	0005883a 	mov	r2,zero
4000f0e0:	003ffb06 	br	4000f0d0 <__alt_data_end+0xc000f0d0>

4000f0e4 <quorem>:
4000f0e4:	defff704 	addi	sp,sp,-36
4000f0e8:	dc800215 	stw	r18,8(sp)
4000f0ec:	20800417 	ldw	r2,16(r4)
4000f0f0:	2c800417 	ldw	r18,16(r5)
4000f0f4:	dfc00815 	stw	ra,32(sp)
4000f0f8:	ddc00715 	stw	r23,28(sp)
4000f0fc:	dd800615 	stw	r22,24(sp)
4000f100:	dd400515 	stw	r21,20(sp)
4000f104:	dd000415 	stw	r20,16(sp)
4000f108:	dcc00315 	stw	r19,12(sp)
4000f10c:	dc400115 	stw	r17,4(sp)
4000f110:	dc000015 	stw	r16,0(sp)
4000f114:	14807116 	blt	r2,r18,4000f2dc <quorem+0x1f8>
4000f118:	94bfffc4 	addi	r18,r18,-1
4000f11c:	94ad883a 	add	r22,r18,r18
4000f120:	b5ad883a 	add	r22,r22,r22
4000f124:	2c400504 	addi	r17,r5,20
4000f128:	8da9883a 	add	r20,r17,r22
4000f12c:	25400504 	addi	r21,r4,20
4000f130:	282f883a 	mov	r23,r5
4000f134:	adad883a 	add	r22,r21,r22
4000f138:	a1400017 	ldw	r5,0(r20)
4000f13c:	2021883a 	mov	r16,r4
4000f140:	b1000017 	ldw	r4,0(r22)
4000f144:	29400044 	addi	r5,r5,1
4000f148:	0007a740 	call	40007a74 <__udivsi3>
4000f14c:	1027883a 	mov	r19,r2
4000f150:	10002c26 	beq	r2,zero,4000f204 <quorem+0x120>
4000f154:	a813883a 	mov	r9,r21
4000f158:	880b883a 	mov	r5,r17
4000f15c:	0009883a 	mov	r4,zero
4000f160:	000d883a 	mov	r6,zero
4000f164:	2a000017 	ldw	r8,0(r5)
4000f168:	49c00017 	ldw	r7,0(r9)
4000f16c:	29400104 	addi	r5,r5,4
4000f170:	40bfffcc 	andi	r2,r8,65535
4000f174:	14c5383a 	mul	r2,r2,r19
4000f178:	4010d43a 	srli	r8,r8,16
4000f17c:	38ffffcc 	andi	r3,r7,65535
4000f180:	1105883a 	add	r2,r2,r4
4000f184:	1008d43a 	srli	r4,r2,16
4000f188:	44d1383a 	mul	r8,r8,r19
4000f18c:	198d883a 	add	r6,r3,r6
4000f190:	10ffffcc 	andi	r3,r2,65535
4000f194:	30c7c83a 	sub	r3,r6,r3
4000f198:	380ed43a 	srli	r7,r7,16
4000f19c:	4105883a 	add	r2,r8,r4
4000f1a0:	180dd43a 	srai	r6,r3,16
4000f1a4:	113fffcc 	andi	r4,r2,65535
4000f1a8:	390fc83a 	sub	r7,r7,r4
4000f1ac:	398d883a 	add	r6,r7,r6
4000f1b0:	300e943a 	slli	r7,r6,16
4000f1b4:	18ffffcc 	andi	r3,r3,65535
4000f1b8:	1008d43a 	srli	r4,r2,16
4000f1bc:	38ceb03a 	or	r7,r7,r3
4000f1c0:	49c00015 	stw	r7,0(r9)
4000f1c4:	300dd43a 	srai	r6,r6,16
4000f1c8:	4a400104 	addi	r9,r9,4
4000f1cc:	a17fe52e 	bgeu	r20,r5,4000f164 <__alt_data_end+0xc000f164>
4000f1d0:	b0800017 	ldw	r2,0(r22)
4000f1d4:	10000b1e 	bne	r2,zero,4000f204 <quorem+0x120>
4000f1d8:	b0bfff04 	addi	r2,r22,-4
4000f1dc:	a880082e 	bgeu	r21,r2,4000f200 <quorem+0x11c>
4000f1e0:	b0ffff17 	ldw	r3,-4(r22)
4000f1e4:	18000326 	beq	r3,zero,4000f1f4 <quorem+0x110>
4000f1e8:	00000506 	br	4000f200 <quorem+0x11c>
4000f1ec:	10c00017 	ldw	r3,0(r2)
4000f1f0:	1800031e 	bne	r3,zero,4000f200 <quorem+0x11c>
4000f1f4:	10bfff04 	addi	r2,r2,-4
4000f1f8:	94bfffc4 	addi	r18,r18,-1
4000f1fc:	a8bffb36 	bltu	r21,r2,4000f1ec <__alt_data_end+0xc000f1ec>
4000f200:	84800415 	stw	r18,16(r16)
4000f204:	b80b883a 	mov	r5,r23
4000f208:	8009883a 	mov	r4,r16
4000f20c:	0011cc00 	call	40011cc0 <__mcmp>
4000f210:	10002616 	blt	r2,zero,4000f2ac <quorem+0x1c8>
4000f214:	9cc00044 	addi	r19,r19,1
4000f218:	a805883a 	mov	r2,r21
4000f21c:	000b883a 	mov	r5,zero
4000f220:	11000017 	ldw	r4,0(r2)
4000f224:	89800017 	ldw	r6,0(r17)
4000f228:	10800104 	addi	r2,r2,4
4000f22c:	20ffffcc 	andi	r3,r4,65535
4000f230:	194b883a 	add	r5,r3,r5
4000f234:	30ffffcc 	andi	r3,r6,65535
4000f238:	28c7c83a 	sub	r3,r5,r3
4000f23c:	300cd43a 	srli	r6,r6,16
4000f240:	2008d43a 	srli	r4,r4,16
4000f244:	180bd43a 	srai	r5,r3,16
4000f248:	18ffffcc 	andi	r3,r3,65535
4000f24c:	2189c83a 	sub	r4,r4,r6
4000f250:	2149883a 	add	r4,r4,r5
4000f254:	200c943a 	slli	r6,r4,16
4000f258:	8c400104 	addi	r17,r17,4
4000f25c:	200bd43a 	srai	r5,r4,16
4000f260:	30c6b03a 	or	r3,r6,r3
4000f264:	10ffff15 	stw	r3,-4(r2)
4000f268:	a47fed2e 	bgeu	r20,r17,4000f220 <__alt_data_end+0xc000f220>
4000f26c:	9485883a 	add	r2,r18,r18
4000f270:	1085883a 	add	r2,r2,r2
4000f274:	a887883a 	add	r3,r21,r2
4000f278:	18800017 	ldw	r2,0(r3)
4000f27c:	10000b1e 	bne	r2,zero,4000f2ac <quorem+0x1c8>
4000f280:	18bfff04 	addi	r2,r3,-4
4000f284:	a880082e 	bgeu	r21,r2,4000f2a8 <quorem+0x1c4>
4000f288:	18ffff17 	ldw	r3,-4(r3)
4000f28c:	18000326 	beq	r3,zero,4000f29c <quorem+0x1b8>
4000f290:	00000506 	br	4000f2a8 <quorem+0x1c4>
4000f294:	10c00017 	ldw	r3,0(r2)
4000f298:	1800031e 	bne	r3,zero,4000f2a8 <quorem+0x1c4>
4000f29c:	10bfff04 	addi	r2,r2,-4
4000f2a0:	94bfffc4 	addi	r18,r18,-1
4000f2a4:	a8bffb36 	bltu	r21,r2,4000f294 <__alt_data_end+0xc000f294>
4000f2a8:	84800415 	stw	r18,16(r16)
4000f2ac:	9805883a 	mov	r2,r19
4000f2b0:	dfc00817 	ldw	ra,32(sp)
4000f2b4:	ddc00717 	ldw	r23,28(sp)
4000f2b8:	dd800617 	ldw	r22,24(sp)
4000f2bc:	dd400517 	ldw	r21,20(sp)
4000f2c0:	dd000417 	ldw	r20,16(sp)
4000f2c4:	dcc00317 	ldw	r19,12(sp)
4000f2c8:	dc800217 	ldw	r18,8(sp)
4000f2cc:	dc400117 	ldw	r17,4(sp)
4000f2d0:	dc000017 	ldw	r16,0(sp)
4000f2d4:	dec00904 	addi	sp,sp,36
4000f2d8:	f800283a 	ret
4000f2dc:	0005883a 	mov	r2,zero
4000f2e0:	003ff306 	br	4000f2b0 <__alt_data_end+0xc000f2b0>

4000f2e4 <_dtoa_r>:
4000f2e4:	20801017 	ldw	r2,64(r4)
4000f2e8:	deffde04 	addi	sp,sp,-136
4000f2ec:	df002015 	stw	fp,128(sp)
4000f2f0:	dcc01b15 	stw	r19,108(sp)
4000f2f4:	dc801a15 	stw	r18,104(sp)
4000f2f8:	dc401915 	stw	r17,100(sp)
4000f2fc:	dc001815 	stw	r16,96(sp)
4000f300:	dfc02115 	stw	ra,132(sp)
4000f304:	ddc01f15 	stw	r23,124(sp)
4000f308:	dd801e15 	stw	r22,120(sp)
4000f30c:	dd401d15 	stw	r21,116(sp)
4000f310:	dd001c15 	stw	r20,112(sp)
4000f314:	d9c00315 	stw	r7,12(sp)
4000f318:	2039883a 	mov	fp,r4
4000f31c:	3023883a 	mov	r17,r6
4000f320:	2825883a 	mov	r18,r5
4000f324:	dc002417 	ldw	r16,144(sp)
4000f328:	3027883a 	mov	r19,r6
4000f32c:	10000826 	beq	r2,zero,4000f350 <_dtoa_r+0x6c>
4000f330:	21801117 	ldw	r6,68(r4)
4000f334:	00c00044 	movi	r3,1
4000f338:	100b883a 	mov	r5,r2
4000f33c:	1986983a 	sll	r3,r3,r6
4000f340:	11800115 	stw	r6,4(r2)
4000f344:	10c00215 	stw	r3,8(r2)
4000f348:	00114a00 	call	400114a0 <_Bfree>
4000f34c:	e0001015 	stw	zero,64(fp)
4000f350:	88002e16 	blt	r17,zero,4000f40c <_dtoa_r+0x128>
4000f354:	80000015 	stw	zero,0(r16)
4000f358:	889ffc2c 	andhi	r2,r17,32752
4000f35c:	00dffc34 	movhi	r3,32752
4000f360:	10c01c26 	beq	r2,r3,4000f3d4 <_dtoa_r+0xf0>
4000f364:	000d883a 	mov	r6,zero
4000f368:	000f883a 	mov	r7,zero
4000f36c:	9009883a 	mov	r4,r18
4000f370:	980b883a 	mov	r5,r19
4000f374:	00152b00 	call	400152b0 <__eqdf2>
4000f378:	10002b1e 	bne	r2,zero,4000f428 <_dtoa_r+0x144>
4000f37c:	d9c02317 	ldw	r7,140(sp)
4000f380:	00800044 	movi	r2,1
4000f384:	38800015 	stw	r2,0(r7)
4000f388:	d8802517 	ldw	r2,148(sp)
4000f38c:	10019e26 	beq	r2,zero,4000fa08 <_dtoa_r+0x724>
4000f390:	d8c02517 	ldw	r3,148(sp)
4000f394:	009000b4 	movhi	r2,16386
4000f398:	10b87444 	addi	r2,r2,-7727
4000f39c:	18800015 	stw	r2,0(r3)
4000f3a0:	10bfffc4 	addi	r2,r2,-1
4000f3a4:	dfc02117 	ldw	ra,132(sp)
4000f3a8:	df002017 	ldw	fp,128(sp)
4000f3ac:	ddc01f17 	ldw	r23,124(sp)
4000f3b0:	dd801e17 	ldw	r22,120(sp)
4000f3b4:	dd401d17 	ldw	r21,116(sp)
4000f3b8:	dd001c17 	ldw	r20,112(sp)
4000f3bc:	dcc01b17 	ldw	r19,108(sp)
4000f3c0:	dc801a17 	ldw	r18,104(sp)
4000f3c4:	dc401917 	ldw	r17,100(sp)
4000f3c8:	dc001817 	ldw	r16,96(sp)
4000f3cc:	dec02204 	addi	sp,sp,136
4000f3d0:	f800283a 	ret
4000f3d4:	d8c02317 	ldw	r3,140(sp)
4000f3d8:	0089c3c4 	movi	r2,9999
4000f3dc:	18800015 	stw	r2,0(r3)
4000f3e0:	90017726 	beq	r18,zero,4000f9c0 <_dtoa_r+0x6dc>
4000f3e4:	009000b4 	movhi	r2,16386
4000f3e8:	10bb3e04 	addi	r2,r2,-4872
4000f3ec:	d9002517 	ldw	r4,148(sp)
4000f3f0:	203fec26 	beq	r4,zero,4000f3a4 <__alt_data_end+0xc000f3a4>
4000f3f4:	10c000c7 	ldb	r3,3(r2)
4000f3f8:	1801781e 	bne	r3,zero,4000f9dc <_dtoa_r+0x6f8>
4000f3fc:	10c000c4 	addi	r3,r2,3
4000f400:	d9802517 	ldw	r6,148(sp)
4000f404:	30c00015 	stw	r3,0(r6)
4000f408:	003fe606 	br	4000f3a4 <__alt_data_end+0xc000f3a4>
4000f40c:	04e00034 	movhi	r19,32768
4000f410:	9cffffc4 	addi	r19,r19,-1
4000f414:	00800044 	movi	r2,1
4000f418:	8ce6703a 	and	r19,r17,r19
4000f41c:	80800015 	stw	r2,0(r16)
4000f420:	9823883a 	mov	r17,r19
4000f424:	003fcc06 	br	4000f358 <__alt_data_end+0xc000f358>
4000f428:	d8800204 	addi	r2,sp,8
4000f42c:	d8800015 	stw	r2,0(sp)
4000f430:	d9c00104 	addi	r7,sp,4
4000f434:	900b883a 	mov	r5,r18
4000f438:	980d883a 	mov	r6,r19
4000f43c:	e009883a 	mov	r4,fp
4000f440:	8820d53a 	srli	r16,r17,20
4000f444:	001208c0 	call	4001208c <__d2b>
4000f448:	d8800915 	stw	r2,36(sp)
4000f44c:	8001651e 	bne	r16,zero,4000f9e4 <_dtoa_r+0x700>
4000f450:	dd800217 	ldw	r22,8(sp)
4000f454:	dc000117 	ldw	r16,4(sp)
4000f458:	00800804 	movi	r2,32
4000f45c:	b421883a 	add	r16,r22,r16
4000f460:	80c10c84 	addi	r3,r16,1074
4000f464:	10c2d10e 	bge	r2,r3,4000ffac <_dtoa_r+0xcc8>
4000f468:	00801004 	movi	r2,64
4000f46c:	81010484 	addi	r4,r16,1042
4000f470:	10c7c83a 	sub	r3,r2,r3
4000f474:	9108d83a 	srl	r4,r18,r4
4000f478:	88e2983a 	sll	r17,r17,r3
4000f47c:	2448b03a 	or	r4,r4,r17
4000f480:	00095380 	call	40009538 <__floatunsidf>
4000f484:	017f8434 	movhi	r5,65040
4000f488:	01800044 	movi	r6,1
4000f48c:	1009883a 	mov	r4,r2
4000f490:	194b883a 	add	r5,r3,r5
4000f494:	843fffc4 	addi	r16,r16,-1
4000f498:	d9801115 	stw	r6,68(sp)
4000f49c:	000d883a 	mov	r6,zero
4000f4a0:	01cffe34 	movhi	r7,16376
4000f4a4:	00155080 	call	40015508 <__subdf3>
4000f4a8:	0198dbf4 	movhi	r6,25455
4000f4ac:	01cff4f4 	movhi	r7,16339
4000f4b0:	3190d844 	addi	r6,r6,17249
4000f4b4:	39e1e9c4 	addi	r7,r7,-30809
4000f4b8:	1009883a 	mov	r4,r2
4000f4bc:	180b883a 	mov	r5,r3
4000f4c0:	0008cc40 	call	40008cc4 <__muldf3>
4000f4c4:	01a2d874 	movhi	r6,35681
4000f4c8:	01cff1f4 	movhi	r7,16327
4000f4cc:	31b22cc4 	addi	r6,r6,-14157
4000f4d0:	39e28a04 	addi	r7,r7,-30168
4000f4d4:	180b883a 	mov	r5,r3
4000f4d8:	1009883a 	mov	r4,r2
4000f4dc:	0007b300 	call	40007b30 <__adddf3>
4000f4e0:	8009883a 	mov	r4,r16
4000f4e4:	1029883a 	mov	r20,r2
4000f4e8:	1823883a 	mov	r17,r3
4000f4ec:	000945c0 	call	4000945c <__floatsidf>
4000f4f0:	019427f4 	movhi	r6,20639
4000f4f4:	01cff4f4 	movhi	r7,16339
4000f4f8:	319e7ec4 	addi	r6,r6,31227
4000f4fc:	39d104c4 	addi	r7,r7,17427
4000f500:	1009883a 	mov	r4,r2
4000f504:	180b883a 	mov	r5,r3
4000f508:	0008cc40 	call	40008cc4 <__muldf3>
4000f50c:	100d883a 	mov	r6,r2
4000f510:	180f883a 	mov	r7,r3
4000f514:	a009883a 	mov	r4,r20
4000f518:	880b883a 	mov	r5,r17
4000f51c:	0007b300 	call	40007b30 <__adddf3>
4000f520:	1009883a 	mov	r4,r2
4000f524:	180b883a 	mov	r5,r3
4000f528:	1029883a 	mov	r20,r2
4000f52c:	1823883a 	mov	r17,r3
4000f530:	00093dc0 	call	400093dc <__fixdfsi>
4000f534:	000d883a 	mov	r6,zero
4000f538:	000f883a 	mov	r7,zero
4000f53c:	a009883a 	mov	r4,r20
4000f540:	880b883a 	mov	r5,r17
4000f544:	d8800515 	stw	r2,20(sp)
4000f548:	00154140 	call	40015414 <__ledf2>
4000f54c:	10028716 	blt	r2,zero,4000ff6c <_dtoa_r+0xc88>
4000f550:	d8c00517 	ldw	r3,20(sp)
4000f554:	00800584 	movi	r2,22
4000f558:	10c27536 	bltu	r2,r3,4000ff30 <_dtoa_r+0xc4c>
4000f55c:	180490fa 	slli	r2,r3,3
4000f560:	00d000b4 	movhi	r3,16386
4000f564:	18fb5904 	addi	r3,r3,-4764
4000f568:	1885883a 	add	r2,r3,r2
4000f56c:	11000017 	ldw	r4,0(r2)
4000f570:	11400117 	ldw	r5,4(r2)
4000f574:	900d883a 	mov	r6,r18
4000f578:	980f883a 	mov	r7,r19
4000f57c:	00153380 	call	40015338 <__gedf2>
4000f580:	00828d0e 	bge	zero,r2,4000ffb8 <_dtoa_r+0xcd4>
4000f584:	d9000517 	ldw	r4,20(sp)
4000f588:	d8000e15 	stw	zero,56(sp)
4000f58c:	213fffc4 	addi	r4,r4,-1
4000f590:	d9000515 	stw	r4,20(sp)
4000f594:	b42dc83a 	sub	r22,r22,r16
4000f598:	b5bfffc4 	addi	r22,r22,-1
4000f59c:	b0026f16 	blt	r22,zero,4000ff5c <_dtoa_r+0xc78>
4000f5a0:	d8000815 	stw	zero,32(sp)
4000f5a4:	d9c00517 	ldw	r7,20(sp)
4000f5a8:	38026416 	blt	r7,zero,4000ff3c <_dtoa_r+0xc58>
4000f5ac:	b1ed883a 	add	r22,r22,r7
4000f5b0:	d9c00d15 	stw	r7,52(sp)
4000f5b4:	d8000a15 	stw	zero,40(sp)
4000f5b8:	d9800317 	ldw	r6,12(sp)
4000f5bc:	00800244 	movi	r2,9
4000f5c0:	11811436 	bltu	r2,r6,4000fa14 <_dtoa_r+0x730>
4000f5c4:	00800144 	movi	r2,5
4000f5c8:	1184e10e 	bge	r2,r6,40010950 <_dtoa_r+0x166c>
4000f5cc:	31bfff04 	addi	r6,r6,-4
4000f5d0:	d9800315 	stw	r6,12(sp)
4000f5d4:	0023883a 	mov	r17,zero
4000f5d8:	d9800317 	ldw	r6,12(sp)
4000f5dc:	008000c4 	movi	r2,3
4000f5e0:	30836726 	beq	r6,r2,40010380 <_dtoa_r+0x109c>
4000f5e4:	1183410e 	bge	r2,r6,400102ec <_dtoa_r+0x1008>
4000f5e8:	d9c00317 	ldw	r7,12(sp)
4000f5ec:	00800104 	movi	r2,4
4000f5f0:	38827c26 	beq	r7,r2,4000ffe4 <_dtoa_r+0xd00>
4000f5f4:	00800144 	movi	r2,5
4000f5f8:	3884c41e 	bne	r7,r2,4001090c <_dtoa_r+0x1628>
4000f5fc:	00800044 	movi	r2,1
4000f600:	d8800b15 	stw	r2,44(sp)
4000f604:	d8c00517 	ldw	r3,20(sp)
4000f608:	d9002217 	ldw	r4,136(sp)
4000f60c:	1907883a 	add	r3,r3,r4
4000f610:	19800044 	addi	r6,r3,1
4000f614:	d8c00c15 	stw	r3,48(sp)
4000f618:	d9800615 	stw	r6,24(sp)
4000f61c:	0183a40e 	bge	zero,r6,400104b0 <_dtoa_r+0x11cc>
4000f620:	d9800617 	ldw	r6,24(sp)
4000f624:	3021883a 	mov	r16,r6
4000f628:	e0001115 	stw	zero,68(fp)
4000f62c:	008005c4 	movi	r2,23
4000f630:	1184c92e 	bgeu	r2,r6,40010958 <_dtoa_r+0x1674>
4000f634:	00c00044 	movi	r3,1
4000f638:	00800104 	movi	r2,4
4000f63c:	1085883a 	add	r2,r2,r2
4000f640:	11000504 	addi	r4,r2,20
4000f644:	180b883a 	mov	r5,r3
4000f648:	18c00044 	addi	r3,r3,1
4000f64c:	313ffb2e 	bgeu	r6,r4,4000f63c <__alt_data_end+0xc000f63c>
4000f650:	e1401115 	stw	r5,68(fp)
4000f654:	e009883a 	mov	r4,fp
4000f658:	00113f80 	call	400113f8 <_Balloc>
4000f65c:	d8800715 	stw	r2,28(sp)
4000f660:	e0801015 	stw	r2,64(fp)
4000f664:	00800384 	movi	r2,14
4000f668:	1400f736 	bltu	r2,r16,4000fa48 <_dtoa_r+0x764>
4000f66c:	8800f626 	beq	r17,zero,4000fa48 <_dtoa_r+0x764>
4000f670:	d9c00517 	ldw	r7,20(sp)
4000f674:	01c39a0e 	bge	zero,r7,400104e0 <_dtoa_r+0x11fc>
4000f678:	388003cc 	andi	r2,r7,15
4000f67c:	100490fa 	slli	r2,r2,3
4000f680:	382bd13a 	srai	r21,r7,4
4000f684:	00d000b4 	movhi	r3,16386
4000f688:	18fb5904 	addi	r3,r3,-4764
4000f68c:	1885883a 	add	r2,r3,r2
4000f690:	a8c0040c 	andi	r3,r21,16
4000f694:	12400017 	ldw	r9,0(r2)
4000f698:	12000117 	ldw	r8,4(r2)
4000f69c:	18037926 	beq	r3,zero,40010484 <_dtoa_r+0x11a0>
4000f6a0:	009000b4 	movhi	r2,16386
4000f6a4:	10bb4f04 	addi	r2,r2,-4804
4000f6a8:	11800817 	ldw	r6,32(r2)
4000f6ac:	11c00917 	ldw	r7,36(r2)
4000f6b0:	9009883a 	mov	r4,r18
4000f6b4:	980b883a 	mov	r5,r19
4000f6b8:	da001715 	stw	r8,92(sp)
4000f6bc:	da401615 	stw	r9,88(sp)
4000f6c0:	00083dc0 	call	400083dc <__divdf3>
4000f6c4:	da001717 	ldw	r8,92(sp)
4000f6c8:	da401617 	ldw	r9,88(sp)
4000f6cc:	ad4003cc 	andi	r21,r21,15
4000f6d0:	040000c4 	movi	r16,3
4000f6d4:	1023883a 	mov	r17,r2
4000f6d8:	1829883a 	mov	r20,r3
4000f6dc:	a8001126 	beq	r21,zero,4000f724 <_dtoa_r+0x440>
4000f6e0:	05d000b4 	movhi	r23,16386
4000f6e4:	bdfb4f04 	addi	r23,r23,-4804
4000f6e8:	4805883a 	mov	r2,r9
4000f6ec:	4007883a 	mov	r3,r8
4000f6f0:	a980004c 	andi	r6,r21,1
4000f6f4:	1009883a 	mov	r4,r2
4000f6f8:	a82bd07a 	srai	r21,r21,1
4000f6fc:	180b883a 	mov	r5,r3
4000f700:	30000426 	beq	r6,zero,4000f714 <_dtoa_r+0x430>
4000f704:	b9800017 	ldw	r6,0(r23)
4000f708:	b9c00117 	ldw	r7,4(r23)
4000f70c:	84000044 	addi	r16,r16,1
4000f710:	0008cc40 	call	40008cc4 <__muldf3>
4000f714:	bdc00204 	addi	r23,r23,8
4000f718:	a83ff51e 	bne	r21,zero,4000f6f0 <__alt_data_end+0xc000f6f0>
4000f71c:	1013883a 	mov	r9,r2
4000f720:	1811883a 	mov	r8,r3
4000f724:	480d883a 	mov	r6,r9
4000f728:	400f883a 	mov	r7,r8
4000f72c:	8809883a 	mov	r4,r17
4000f730:	a00b883a 	mov	r5,r20
4000f734:	00083dc0 	call	400083dc <__divdf3>
4000f738:	d8800f15 	stw	r2,60(sp)
4000f73c:	d8c01015 	stw	r3,64(sp)
4000f740:	d8c00e17 	ldw	r3,56(sp)
4000f744:	18000626 	beq	r3,zero,4000f760 <_dtoa_r+0x47c>
4000f748:	d9000f17 	ldw	r4,60(sp)
4000f74c:	d9401017 	ldw	r5,64(sp)
4000f750:	000d883a 	mov	r6,zero
4000f754:	01cffc34 	movhi	r7,16368
4000f758:	00154140 	call	40015414 <__ledf2>
4000f75c:	10040b16 	blt	r2,zero,4001078c <_dtoa_r+0x14a8>
4000f760:	8009883a 	mov	r4,r16
4000f764:	000945c0 	call	4000945c <__floatsidf>
4000f768:	d9800f17 	ldw	r6,60(sp)
4000f76c:	d9c01017 	ldw	r7,64(sp)
4000f770:	1009883a 	mov	r4,r2
4000f774:	180b883a 	mov	r5,r3
4000f778:	0008cc40 	call	40008cc4 <__muldf3>
4000f77c:	000d883a 	mov	r6,zero
4000f780:	01d00734 	movhi	r7,16412
4000f784:	1009883a 	mov	r4,r2
4000f788:	180b883a 	mov	r5,r3
4000f78c:	0007b300 	call	40007b30 <__adddf3>
4000f790:	1021883a 	mov	r16,r2
4000f794:	d8800617 	ldw	r2,24(sp)
4000f798:	047f3034 	movhi	r17,64704
4000f79c:	1c63883a 	add	r17,r3,r17
4000f7a0:	10031826 	beq	r2,zero,40010404 <_dtoa_r+0x1120>
4000f7a4:	d8c00517 	ldw	r3,20(sp)
4000f7a8:	db000617 	ldw	r12,24(sp)
4000f7ac:	d8c01315 	stw	r3,76(sp)
4000f7b0:	d9000b17 	ldw	r4,44(sp)
4000f7b4:	20038f26 	beq	r4,zero,400105f4 <_dtoa_r+0x1310>
4000f7b8:	60bfffc4 	addi	r2,r12,-1
4000f7bc:	100490fa 	slli	r2,r2,3
4000f7c0:	00d000b4 	movhi	r3,16386
4000f7c4:	18fb5904 	addi	r3,r3,-4764
4000f7c8:	1885883a 	add	r2,r3,r2
4000f7cc:	11800017 	ldw	r6,0(r2)
4000f7d0:	11c00117 	ldw	r7,4(r2)
4000f7d4:	d8800717 	ldw	r2,28(sp)
4000f7d8:	0009883a 	mov	r4,zero
4000f7dc:	014ff834 	movhi	r5,16352
4000f7e0:	db001615 	stw	r12,88(sp)
4000f7e4:	15c00044 	addi	r23,r2,1
4000f7e8:	00083dc0 	call	400083dc <__divdf3>
4000f7ec:	800d883a 	mov	r6,r16
4000f7f0:	880f883a 	mov	r7,r17
4000f7f4:	1009883a 	mov	r4,r2
4000f7f8:	180b883a 	mov	r5,r3
4000f7fc:	00155080 	call	40015508 <__subdf3>
4000f800:	d9401017 	ldw	r5,64(sp)
4000f804:	d9000f17 	ldw	r4,60(sp)
4000f808:	102b883a 	mov	r21,r2
4000f80c:	d8c01215 	stw	r3,72(sp)
4000f810:	00093dc0 	call	400093dc <__fixdfsi>
4000f814:	1009883a 	mov	r4,r2
4000f818:	1029883a 	mov	r20,r2
4000f81c:	000945c0 	call	4000945c <__floatsidf>
4000f820:	d9000f17 	ldw	r4,60(sp)
4000f824:	d9401017 	ldw	r5,64(sp)
4000f828:	100d883a 	mov	r6,r2
4000f82c:	180f883a 	mov	r7,r3
4000f830:	00155080 	call	40015508 <__subdf3>
4000f834:	1823883a 	mov	r17,r3
4000f838:	d8c00717 	ldw	r3,28(sp)
4000f83c:	d9401217 	ldw	r5,72(sp)
4000f840:	a2000c04 	addi	r8,r20,48
4000f844:	1021883a 	mov	r16,r2
4000f848:	1a000005 	stb	r8,0(r3)
4000f84c:	800d883a 	mov	r6,r16
4000f850:	880f883a 	mov	r7,r17
4000f854:	a809883a 	mov	r4,r21
4000f858:	4029883a 	mov	r20,r8
4000f85c:	00153380 	call	40015338 <__gedf2>
4000f860:	00841d16 	blt	zero,r2,400108d8 <_dtoa_r+0x15f4>
4000f864:	800d883a 	mov	r6,r16
4000f868:	880f883a 	mov	r7,r17
4000f86c:	0009883a 	mov	r4,zero
4000f870:	014ffc34 	movhi	r5,16368
4000f874:	00155080 	call	40015508 <__subdf3>
4000f878:	d9401217 	ldw	r5,72(sp)
4000f87c:	100d883a 	mov	r6,r2
4000f880:	180f883a 	mov	r7,r3
4000f884:	a809883a 	mov	r4,r21
4000f888:	00153380 	call	40015338 <__gedf2>
4000f88c:	db001617 	ldw	r12,88(sp)
4000f890:	00840e16 	blt	zero,r2,400108cc <_dtoa_r+0x15e8>
4000f894:	00800044 	movi	r2,1
4000f898:	13006b0e 	bge	r2,r12,4000fa48 <_dtoa_r+0x764>
4000f89c:	d9000717 	ldw	r4,28(sp)
4000f8a0:	dd800f15 	stw	r22,60(sp)
4000f8a4:	dcc01015 	stw	r19,64(sp)
4000f8a8:	2319883a 	add	r12,r4,r12
4000f8ac:	dcc01217 	ldw	r19,72(sp)
4000f8b0:	602d883a 	mov	r22,r12
4000f8b4:	dc801215 	stw	r18,72(sp)
4000f8b8:	b825883a 	mov	r18,r23
4000f8bc:	00000906 	br	4000f8e4 <_dtoa_r+0x600>
4000f8c0:	00155080 	call	40015508 <__subdf3>
4000f8c4:	a80d883a 	mov	r6,r21
4000f8c8:	980f883a 	mov	r7,r19
4000f8cc:	1009883a 	mov	r4,r2
4000f8d0:	180b883a 	mov	r5,r3
4000f8d4:	00154140 	call	40015414 <__ledf2>
4000f8d8:	1003e816 	blt	r2,zero,4001087c <_dtoa_r+0x1598>
4000f8dc:	b825883a 	mov	r18,r23
4000f8e0:	bd83e926 	beq	r23,r22,40010888 <_dtoa_r+0x15a4>
4000f8e4:	a809883a 	mov	r4,r21
4000f8e8:	980b883a 	mov	r5,r19
4000f8ec:	000d883a 	mov	r6,zero
4000f8f0:	01d00934 	movhi	r7,16420
4000f8f4:	0008cc40 	call	40008cc4 <__muldf3>
4000f8f8:	000d883a 	mov	r6,zero
4000f8fc:	01d00934 	movhi	r7,16420
4000f900:	8009883a 	mov	r4,r16
4000f904:	880b883a 	mov	r5,r17
4000f908:	102b883a 	mov	r21,r2
4000f90c:	1827883a 	mov	r19,r3
4000f910:	0008cc40 	call	40008cc4 <__muldf3>
4000f914:	180b883a 	mov	r5,r3
4000f918:	1009883a 	mov	r4,r2
4000f91c:	1821883a 	mov	r16,r3
4000f920:	1023883a 	mov	r17,r2
4000f924:	00093dc0 	call	400093dc <__fixdfsi>
4000f928:	1009883a 	mov	r4,r2
4000f92c:	1029883a 	mov	r20,r2
4000f930:	000945c0 	call	4000945c <__floatsidf>
4000f934:	8809883a 	mov	r4,r17
4000f938:	800b883a 	mov	r5,r16
4000f93c:	100d883a 	mov	r6,r2
4000f940:	180f883a 	mov	r7,r3
4000f944:	00155080 	call	40015508 <__subdf3>
4000f948:	a5000c04 	addi	r20,r20,48
4000f94c:	a80d883a 	mov	r6,r21
4000f950:	980f883a 	mov	r7,r19
4000f954:	1009883a 	mov	r4,r2
4000f958:	180b883a 	mov	r5,r3
4000f95c:	95000005 	stb	r20,0(r18)
4000f960:	1021883a 	mov	r16,r2
4000f964:	1823883a 	mov	r17,r3
4000f968:	00154140 	call	40015414 <__ledf2>
4000f96c:	bdc00044 	addi	r23,r23,1
4000f970:	800d883a 	mov	r6,r16
4000f974:	880f883a 	mov	r7,r17
4000f978:	0009883a 	mov	r4,zero
4000f97c:	014ffc34 	movhi	r5,16368
4000f980:	103fcf0e 	bge	r2,zero,4000f8c0 <__alt_data_end+0xc000f8c0>
4000f984:	d8c01317 	ldw	r3,76(sp)
4000f988:	d8c00515 	stw	r3,20(sp)
4000f98c:	d9400917 	ldw	r5,36(sp)
4000f990:	e009883a 	mov	r4,fp
4000f994:	00114a00 	call	400114a0 <_Bfree>
4000f998:	d9000517 	ldw	r4,20(sp)
4000f99c:	d9802317 	ldw	r6,140(sp)
4000f9a0:	d9c02517 	ldw	r7,148(sp)
4000f9a4:	b8000005 	stb	zero,0(r23)
4000f9a8:	20800044 	addi	r2,r4,1
4000f9ac:	30800015 	stw	r2,0(r6)
4000f9b0:	3802aa26 	beq	r7,zero,4001045c <_dtoa_r+0x1178>
4000f9b4:	3dc00015 	stw	r23,0(r7)
4000f9b8:	d8800717 	ldw	r2,28(sp)
4000f9bc:	003e7906 	br	4000f3a4 <__alt_data_end+0xc000f3a4>
4000f9c0:	00800434 	movhi	r2,16
4000f9c4:	10bfffc4 	addi	r2,r2,-1
4000f9c8:	88a2703a 	and	r17,r17,r2
4000f9cc:	883e851e 	bne	r17,zero,4000f3e4 <__alt_data_end+0xc000f3e4>
4000f9d0:	009000b4 	movhi	r2,16386
4000f9d4:	10bb3b04 	addi	r2,r2,-4884
4000f9d8:	003e8406 	br	4000f3ec <__alt_data_end+0xc000f3ec>
4000f9dc:	10c00204 	addi	r3,r2,8
4000f9e0:	003e8706 	br	4000f400 <__alt_data_end+0xc000f400>
4000f9e4:	01400434 	movhi	r5,16
4000f9e8:	297fffc4 	addi	r5,r5,-1
4000f9ec:	994a703a 	and	r5,r19,r5
4000f9f0:	9009883a 	mov	r4,r18
4000f9f4:	843f0044 	addi	r16,r16,-1023
4000f9f8:	294ffc34 	orhi	r5,r5,16368
4000f9fc:	dd800217 	ldw	r22,8(sp)
4000fa00:	d8001115 	stw	zero,68(sp)
4000fa04:	003ea506 	br	4000f49c <__alt_data_end+0xc000f49c>
4000fa08:	009000b4 	movhi	r2,16386
4000fa0c:	10b87404 	addi	r2,r2,-7728
4000fa10:	003e6406 	br	4000f3a4 <__alt_data_end+0xc000f3a4>
4000fa14:	e0001115 	stw	zero,68(fp)
4000fa18:	000b883a 	mov	r5,zero
4000fa1c:	e009883a 	mov	r4,fp
4000fa20:	00113f80 	call	400113f8 <_Balloc>
4000fa24:	01bfffc4 	movi	r6,-1
4000fa28:	01c00044 	movi	r7,1
4000fa2c:	d8800715 	stw	r2,28(sp)
4000fa30:	d9800c15 	stw	r6,48(sp)
4000fa34:	e0801015 	stw	r2,64(fp)
4000fa38:	d8000315 	stw	zero,12(sp)
4000fa3c:	d9c00b15 	stw	r7,44(sp)
4000fa40:	d9800615 	stw	r6,24(sp)
4000fa44:	d8002215 	stw	zero,136(sp)
4000fa48:	d8800117 	ldw	r2,4(sp)
4000fa4c:	10008916 	blt	r2,zero,4000fc74 <_dtoa_r+0x990>
4000fa50:	d9000517 	ldw	r4,20(sp)
4000fa54:	00c00384 	movi	r3,14
4000fa58:	19008616 	blt	r3,r4,4000fc74 <_dtoa_r+0x990>
4000fa5c:	200490fa 	slli	r2,r4,3
4000fa60:	00d000b4 	movhi	r3,16386
4000fa64:	d9802217 	ldw	r6,136(sp)
4000fa68:	18fb5904 	addi	r3,r3,-4764
4000fa6c:	1885883a 	add	r2,r3,r2
4000fa70:	14000017 	ldw	r16,0(r2)
4000fa74:	14400117 	ldw	r17,4(r2)
4000fa78:	30016316 	blt	r6,zero,40010008 <_dtoa_r+0xd24>
4000fa7c:	800d883a 	mov	r6,r16
4000fa80:	880f883a 	mov	r7,r17
4000fa84:	9009883a 	mov	r4,r18
4000fa88:	980b883a 	mov	r5,r19
4000fa8c:	00083dc0 	call	400083dc <__divdf3>
4000fa90:	180b883a 	mov	r5,r3
4000fa94:	1009883a 	mov	r4,r2
4000fa98:	00093dc0 	call	400093dc <__fixdfsi>
4000fa9c:	1009883a 	mov	r4,r2
4000faa0:	102b883a 	mov	r21,r2
4000faa4:	000945c0 	call	4000945c <__floatsidf>
4000faa8:	800d883a 	mov	r6,r16
4000faac:	880f883a 	mov	r7,r17
4000fab0:	1009883a 	mov	r4,r2
4000fab4:	180b883a 	mov	r5,r3
4000fab8:	0008cc40 	call	40008cc4 <__muldf3>
4000fabc:	100d883a 	mov	r6,r2
4000fac0:	180f883a 	mov	r7,r3
4000fac4:	9009883a 	mov	r4,r18
4000fac8:	980b883a 	mov	r5,r19
4000facc:	00155080 	call	40015508 <__subdf3>
4000fad0:	d9c00717 	ldw	r7,28(sp)
4000fad4:	1009883a 	mov	r4,r2
4000fad8:	a8800c04 	addi	r2,r21,48
4000fadc:	38800005 	stb	r2,0(r7)
4000fae0:	3dc00044 	addi	r23,r7,1
4000fae4:	d9c00617 	ldw	r7,24(sp)
4000fae8:	01800044 	movi	r6,1
4000faec:	180b883a 	mov	r5,r3
4000faf0:	2005883a 	mov	r2,r4
4000faf4:	39803826 	beq	r7,r6,4000fbd8 <_dtoa_r+0x8f4>
4000faf8:	000d883a 	mov	r6,zero
4000fafc:	01d00934 	movhi	r7,16420
4000fb00:	0008cc40 	call	40008cc4 <__muldf3>
4000fb04:	000d883a 	mov	r6,zero
4000fb08:	000f883a 	mov	r7,zero
4000fb0c:	1009883a 	mov	r4,r2
4000fb10:	180b883a 	mov	r5,r3
4000fb14:	1025883a 	mov	r18,r2
4000fb18:	1827883a 	mov	r19,r3
4000fb1c:	00152b00 	call	400152b0 <__eqdf2>
4000fb20:	103f9a26 	beq	r2,zero,4000f98c <__alt_data_end+0xc000f98c>
4000fb24:	d9c00617 	ldw	r7,24(sp)
4000fb28:	d8c00717 	ldw	r3,28(sp)
4000fb2c:	b829883a 	mov	r20,r23
4000fb30:	38bfffc4 	addi	r2,r7,-1
4000fb34:	18ad883a 	add	r22,r3,r2
4000fb38:	00000a06 	br	4000fb64 <_dtoa_r+0x880>
4000fb3c:	0008cc40 	call	40008cc4 <__muldf3>
4000fb40:	000d883a 	mov	r6,zero
4000fb44:	000f883a 	mov	r7,zero
4000fb48:	1009883a 	mov	r4,r2
4000fb4c:	180b883a 	mov	r5,r3
4000fb50:	1025883a 	mov	r18,r2
4000fb54:	1827883a 	mov	r19,r3
4000fb58:	b829883a 	mov	r20,r23
4000fb5c:	00152b00 	call	400152b0 <__eqdf2>
4000fb60:	103f8a26 	beq	r2,zero,4000f98c <__alt_data_end+0xc000f98c>
4000fb64:	800d883a 	mov	r6,r16
4000fb68:	880f883a 	mov	r7,r17
4000fb6c:	9009883a 	mov	r4,r18
4000fb70:	980b883a 	mov	r5,r19
4000fb74:	00083dc0 	call	400083dc <__divdf3>
4000fb78:	180b883a 	mov	r5,r3
4000fb7c:	1009883a 	mov	r4,r2
4000fb80:	00093dc0 	call	400093dc <__fixdfsi>
4000fb84:	1009883a 	mov	r4,r2
4000fb88:	102b883a 	mov	r21,r2
4000fb8c:	000945c0 	call	4000945c <__floatsidf>
4000fb90:	800d883a 	mov	r6,r16
4000fb94:	880f883a 	mov	r7,r17
4000fb98:	1009883a 	mov	r4,r2
4000fb9c:	180b883a 	mov	r5,r3
4000fba0:	0008cc40 	call	40008cc4 <__muldf3>
4000fba4:	100d883a 	mov	r6,r2
4000fba8:	180f883a 	mov	r7,r3
4000fbac:	9009883a 	mov	r4,r18
4000fbb0:	980b883a 	mov	r5,r19
4000fbb4:	00155080 	call	40015508 <__subdf3>
4000fbb8:	aa000c04 	addi	r8,r21,48
4000fbbc:	a2000005 	stb	r8,0(r20)
4000fbc0:	000d883a 	mov	r6,zero
4000fbc4:	01d00934 	movhi	r7,16420
4000fbc8:	1009883a 	mov	r4,r2
4000fbcc:	180b883a 	mov	r5,r3
4000fbd0:	a5c00044 	addi	r23,r20,1
4000fbd4:	b53fd91e 	bne	r22,r20,4000fb3c <__alt_data_end+0xc000fb3c>
4000fbd8:	100d883a 	mov	r6,r2
4000fbdc:	180f883a 	mov	r7,r3
4000fbe0:	1009883a 	mov	r4,r2
4000fbe4:	180b883a 	mov	r5,r3
4000fbe8:	0007b300 	call	40007b30 <__adddf3>
4000fbec:	100d883a 	mov	r6,r2
4000fbf0:	180f883a 	mov	r7,r3
4000fbf4:	8009883a 	mov	r4,r16
4000fbf8:	880b883a 	mov	r5,r17
4000fbfc:	1027883a 	mov	r19,r2
4000fc00:	1825883a 	mov	r18,r3
4000fc04:	00154140 	call	40015414 <__ledf2>
4000fc08:	10000816 	blt	r2,zero,4000fc2c <_dtoa_r+0x948>
4000fc0c:	980d883a 	mov	r6,r19
4000fc10:	900f883a 	mov	r7,r18
4000fc14:	8009883a 	mov	r4,r16
4000fc18:	880b883a 	mov	r5,r17
4000fc1c:	00152b00 	call	400152b0 <__eqdf2>
4000fc20:	103f5a1e 	bne	r2,zero,4000f98c <__alt_data_end+0xc000f98c>
4000fc24:	ad40004c 	andi	r21,r21,1
4000fc28:	a83f5826 	beq	r21,zero,4000f98c <__alt_data_end+0xc000f98c>
4000fc2c:	bd3fffc3 	ldbu	r20,-1(r23)
4000fc30:	b8bfffc4 	addi	r2,r23,-1
4000fc34:	1007883a 	mov	r3,r2
4000fc38:	01400e44 	movi	r5,57
4000fc3c:	d9800717 	ldw	r6,28(sp)
4000fc40:	00000506 	br	4000fc58 <_dtoa_r+0x974>
4000fc44:	18ffffc4 	addi	r3,r3,-1
4000fc48:	11824726 	beq	r2,r6,40010568 <_dtoa_r+0x1284>
4000fc4c:	1d000003 	ldbu	r20,0(r3)
4000fc50:	102f883a 	mov	r23,r2
4000fc54:	10bfffc4 	addi	r2,r2,-1
4000fc58:	a1003fcc 	andi	r4,r20,255
4000fc5c:	2100201c 	xori	r4,r4,128
4000fc60:	213fe004 	addi	r4,r4,-128
4000fc64:	217ff726 	beq	r4,r5,4000fc44 <__alt_data_end+0xc000fc44>
4000fc68:	a2000044 	addi	r8,r20,1
4000fc6c:	12000005 	stb	r8,0(r2)
4000fc70:	003f4606 	br	4000f98c <__alt_data_end+0xc000f98c>
4000fc74:	d9000b17 	ldw	r4,44(sp)
4000fc78:	2000c826 	beq	r4,zero,4000ff9c <_dtoa_r+0xcb8>
4000fc7c:	d9800317 	ldw	r6,12(sp)
4000fc80:	00c00044 	movi	r3,1
4000fc84:	1980f90e 	bge	r3,r6,4001006c <_dtoa_r+0xd88>
4000fc88:	d8800617 	ldw	r2,24(sp)
4000fc8c:	d8c00a17 	ldw	r3,40(sp)
4000fc90:	157fffc4 	addi	r21,r2,-1
4000fc94:	1d41f316 	blt	r3,r21,40010464 <_dtoa_r+0x1180>
4000fc98:	1d6bc83a 	sub	r21,r3,r21
4000fc9c:	d9c00617 	ldw	r7,24(sp)
4000fca0:	3802aa16 	blt	r7,zero,4001074c <_dtoa_r+0x1468>
4000fca4:	dd000817 	ldw	r20,32(sp)
4000fca8:	d8800617 	ldw	r2,24(sp)
4000fcac:	d8c00817 	ldw	r3,32(sp)
4000fcb0:	01400044 	movi	r5,1
4000fcb4:	e009883a 	mov	r4,fp
4000fcb8:	1887883a 	add	r3,r3,r2
4000fcbc:	d8c00815 	stw	r3,32(sp)
4000fcc0:	b0ad883a 	add	r22,r22,r2
4000fcc4:	00118040 	call	40011804 <__i2b>
4000fcc8:	1023883a 	mov	r17,r2
4000fccc:	a0000826 	beq	r20,zero,4000fcf0 <_dtoa_r+0xa0c>
4000fcd0:	0580070e 	bge	zero,r22,4000fcf0 <_dtoa_r+0xa0c>
4000fcd4:	a005883a 	mov	r2,r20
4000fcd8:	b500b916 	blt	r22,r20,4000ffc0 <_dtoa_r+0xcdc>
4000fcdc:	d9000817 	ldw	r4,32(sp)
4000fce0:	a0a9c83a 	sub	r20,r20,r2
4000fce4:	b0adc83a 	sub	r22,r22,r2
4000fce8:	2089c83a 	sub	r4,r4,r2
4000fcec:	d9000815 	stw	r4,32(sp)
4000fcf0:	d9800a17 	ldw	r6,40(sp)
4000fcf4:	0181810e 	bge	zero,r6,400102fc <_dtoa_r+0x1018>
4000fcf8:	d9c00b17 	ldw	r7,44(sp)
4000fcfc:	3800b326 	beq	r7,zero,4000ffcc <_dtoa_r+0xce8>
4000fd00:	a800b226 	beq	r21,zero,4000ffcc <_dtoa_r+0xce8>
4000fd04:	880b883a 	mov	r5,r17
4000fd08:	a80d883a 	mov	r6,r21
4000fd0c:	e009883a 	mov	r4,fp
4000fd10:	0011a380 	call	40011a38 <__pow5mult>
4000fd14:	d9800917 	ldw	r6,36(sp)
4000fd18:	100b883a 	mov	r5,r2
4000fd1c:	e009883a 	mov	r4,fp
4000fd20:	1023883a 	mov	r17,r2
4000fd24:	00118400 	call	40011840 <__multiply>
4000fd28:	1021883a 	mov	r16,r2
4000fd2c:	d8800a17 	ldw	r2,40(sp)
4000fd30:	d9400917 	ldw	r5,36(sp)
4000fd34:	e009883a 	mov	r4,fp
4000fd38:	1545c83a 	sub	r2,r2,r21
4000fd3c:	d8800a15 	stw	r2,40(sp)
4000fd40:	00114a00 	call	400114a0 <_Bfree>
4000fd44:	d8c00a17 	ldw	r3,40(sp)
4000fd48:	18009f1e 	bne	r3,zero,4000ffc8 <_dtoa_r+0xce4>
4000fd4c:	05c00044 	movi	r23,1
4000fd50:	e009883a 	mov	r4,fp
4000fd54:	b80b883a 	mov	r5,r23
4000fd58:	00118040 	call	40011804 <__i2b>
4000fd5c:	d9000d17 	ldw	r4,52(sp)
4000fd60:	102b883a 	mov	r21,r2
4000fd64:	2000ce26 	beq	r4,zero,400100a0 <_dtoa_r+0xdbc>
4000fd68:	200d883a 	mov	r6,r4
4000fd6c:	100b883a 	mov	r5,r2
4000fd70:	e009883a 	mov	r4,fp
4000fd74:	0011a380 	call	40011a38 <__pow5mult>
4000fd78:	d9800317 	ldw	r6,12(sp)
4000fd7c:	102b883a 	mov	r21,r2
4000fd80:	b981810e 	bge	r23,r6,40010388 <_dtoa_r+0x10a4>
4000fd84:	0027883a 	mov	r19,zero
4000fd88:	a8800417 	ldw	r2,16(r21)
4000fd8c:	05c00804 	movi	r23,32
4000fd90:	10800104 	addi	r2,r2,4
4000fd94:	1085883a 	add	r2,r2,r2
4000fd98:	1085883a 	add	r2,r2,r2
4000fd9c:	a885883a 	add	r2,r21,r2
4000fda0:	11000017 	ldw	r4,0(r2)
4000fda4:	00116ec0 	call	400116ec <__hi0bits>
4000fda8:	b885c83a 	sub	r2,r23,r2
4000fdac:	1585883a 	add	r2,r2,r22
4000fdb0:	108007cc 	andi	r2,r2,31
4000fdb4:	1000b326 	beq	r2,zero,40010084 <_dtoa_r+0xda0>
4000fdb8:	00c00804 	movi	r3,32
4000fdbc:	1887c83a 	sub	r3,r3,r2
4000fdc0:	01000104 	movi	r4,4
4000fdc4:	20c2cd0e 	bge	r4,r3,400108fc <_dtoa_r+0x1618>
4000fdc8:	00c00704 	movi	r3,28
4000fdcc:	1885c83a 	sub	r2,r3,r2
4000fdd0:	d8c00817 	ldw	r3,32(sp)
4000fdd4:	a0a9883a 	add	r20,r20,r2
4000fdd8:	b0ad883a 	add	r22,r22,r2
4000fddc:	1887883a 	add	r3,r3,r2
4000fde0:	d8c00815 	stw	r3,32(sp)
4000fde4:	d9800817 	ldw	r6,32(sp)
4000fde8:	0180040e 	bge	zero,r6,4000fdfc <_dtoa_r+0xb18>
4000fdec:	800b883a 	mov	r5,r16
4000fdf0:	e009883a 	mov	r4,fp
4000fdf4:	0011b780 	call	40011b78 <__lshift>
4000fdf8:	1021883a 	mov	r16,r2
4000fdfc:	0580050e 	bge	zero,r22,4000fe14 <_dtoa_r+0xb30>
4000fe00:	a80b883a 	mov	r5,r21
4000fe04:	b00d883a 	mov	r6,r22
4000fe08:	e009883a 	mov	r4,fp
4000fe0c:	0011b780 	call	40011b78 <__lshift>
4000fe10:	102b883a 	mov	r21,r2
4000fe14:	d9c00e17 	ldw	r7,56(sp)
4000fe18:	3801211e 	bne	r7,zero,400102a0 <_dtoa_r+0xfbc>
4000fe1c:	d9800617 	ldw	r6,24(sp)
4000fe20:	0181380e 	bge	zero,r6,40010304 <_dtoa_r+0x1020>
4000fe24:	d8c00b17 	ldw	r3,44(sp)
4000fe28:	1800ab1e 	bne	r3,zero,400100d8 <_dtoa_r+0xdf4>
4000fe2c:	dc800717 	ldw	r18,28(sp)
4000fe30:	dcc00617 	ldw	r19,24(sp)
4000fe34:	9029883a 	mov	r20,r18
4000fe38:	00000206 	br	4000fe44 <_dtoa_r+0xb60>
4000fe3c:	00114c80 	call	400114c8 <__multadd>
4000fe40:	1021883a 	mov	r16,r2
4000fe44:	a80b883a 	mov	r5,r21
4000fe48:	8009883a 	mov	r4,r16
4000fe4c:	000f0e40 	call	4000f0e4 <quorem>
4000fe50:	10800c04 	addi	r2,r2,48
4000fe54:	90800005 	stb	r2,0(r18)
4000fe58:	94800044 	addi	r18,r18,1
4000fe5c:	9507c83a 	sub	r3,r18,r20
4000fe60:	000f883a 	mov	r7,zero
4000fe64:	01800284 	movi	r6,10
4000fe68:	800b883a 	mov	r5,r16
4000fe6c:	e009883a 	mov	r4,fp
4000fe70:	1cfff216 	blt	r3,r19,4000fe3c <__alt_data_end+0xc000fe3c>
4000fe74:	1011883a 	mov	r8,r2
4000fe78:	d8800617 	ldw	r2,24(sp)
4000fe7c:	0082370e 	bge	zero,r2,4001075c <_dtoa_r+0x1478>
4000fe80:	d9000717 	ldw	r4,28(sp)
4000fe84:	0025883a 	mov	r18,zero
4000fe88:	20af883a 	add	r23,r4,r2
4000fe8c:	01800044 	movi	r6,1
4000fe90:	800b883a 	mov	r5,r16
4000fe94:	e009883a 	mov	r4,fp
4000fe98:	da001715 	stw	r8,92(sp)
4000fe9c:	0011b780 	call	40011b78 <__lshift>
4000fea0:	a80b883a 	mov	r5,r21
4000fea4:	1009883a 	mov	r4,r2
4000fea8:	d8800915 	stw	r2,36(sp)
4000feac:	0011cc00 	call	40011cc0 <__mcmp>
4000feb0:	da001717 	ldw	r8,92(sp)
4000feb4:	0081800e 	bge	zero,r2,400104b8 <_dtoa_r+0x11d4>
4000feb8:	b93fffc3 	ldbu	r4,-1(r23)
4000febc:	b8bfffc4 	addi	r2,r23,-1
4000fec0:	1007883a 	mov	r3,r2
4000fec4:	01800e44 	movi	r6,57
4000fec8:	d9c00717 	ldw	r7,28(sp)
4000fecc:	00000506 	br	4000fee4 <_dtoa_r+0xc00>
4000fed0:	18ffffc4 	addi	r3,r3,-1
4000fed4:	11c12326 	beq	r2,r7,40010364 <_dtoa_r+0x1080>
4000fed8:	19000003 	ldbu	r4,0(r3)
4000fedc:	102f883a 	mov	r23,r2
4000fee0:	10bfffc4 	addi	r2,r2,-1
4000fee4:	21403fcc 	andi	r5,r4,255
4000fee8:	2940201c 	xori	r5,r5,128
4000feec:	297fe004 	addi	r5,r5,-128
4000fef0:	29bff726 	beq	r5,r6,4000fed0 <__alt_data_end+0xc000fed0>
4000fef4:	21000044 	addi	r4,r4,1
4000fef8:	11000005 	stb	r4,0(r2)
4000fefc:	a80b883a 	mov	r5,r21
4000ff00:	e009883a 	mov	r4,fp
4000ff04:	00114a00 	call	400114a0 <_Bfree>
4000ff08:	883ea026 	beq	r17,zero,4000f98c <__alt_data_end+0xc000f98c>
4000ff0c:	90000426 	beq	r18,zero,4000ff20 <_dtoa_r+0xc3c>
4000ff10:	94400326 	beq	r18,r17,4000ff20 <_dtoa_r+0xc3c>
4000ff14:	900b883a 	mov	r5,r18
4000ff18:	e009883a 	mov	r4,fp
4000ff1c:	00114a00 	call	400114a0 <_Bfree>
4000ff20:	880b883a 	mov	r5,r17
4000ff24:	e009883a 	mov	r4,fp
4000ff28:	00114a00 	call	400114a0 <_Bfree>
4000ff2c:	003e9706 	br	4000f98c <__alt_data_end+0xc000f98c>
4000ff30:	01800044 	movi	r6,1
4000ff34:	d9800e15 	stw	r6,56(sp)
4000ff38:	003d9606 	br	4000f594 <__alt_data_end+0xc000f594>
4000ff3c:	d8800817 	ldw	r2,32(sp)
4000ff40:	d8c00517 	ldw	r3,20(sp)
4000ff44:	d8000d15 	stw	zero,52(sp)
4000ff48:	10c5c83a 	sub	r2,r2,r3
4000ff4c:	00c9c83a 	sub	r4,zero,r3
4000ff50:	d8800815 	stw	r2,32(sp)
4000ff54:	d9000a15 	stw	r4,40(sp)
4000ff58:	003d9706 	br	4000f5b8 <__alt_data_end+0xc000f5b8>
4000ff5c:	05adc83a 	sub	r22,zero,r22
4000ff60:	dd800815 	stw	r22,32(sp)
4000ff64:	002d883a 	mov	r22,zero
4000ff68:	003d8e06 	br	4000f5a4 <__alt_data_end+0xc000f5a4>
4000ff6c:	d9000517 	ldw	r4,20(sp)
4000ff70:	000945c0 	call	4000945c <__floatsidf>
4000ff74:	100d883a 	mov	r6,r2
4000ff78:	180f883a 	mov	r7,r3
4000ff7c:	a009883a 	mov	r4,r20
4000ff80:	880b883a 	mov	r5,r17
4000ff84:	00152b00 	call	400152b0 <__eqdf2>
4000ff88:	103d7126 	beq	r2,zero,4000f550 <__alt_data_end+0xc000f550>
4000ff8c:	d9c00517 	ldw	r7,20(sp)
4000ff90:	39ffffc4 	addi	r7,r7,-1
4000ff94:	d9c00515 	stw	r7,20(sp)
4000ff98:	003d6d06 	br	4000f550 <__alt_data_end+0xc000f550>
4000ff9c:	dd400a17 	ldw	r21,40(sp)
4000ffa0:	dd000817 	ldw	r20,32(sp)
4000ffa4:	0023883a 	mov	r17,zero
4000ffa8:	003f4806 	br	4000fccc <__alt_data_end+0xc000fccc>
4000ffac:	10e3c83a 	sub	r17,r2,r3
4000ffb0:	9448983a 	sll	r4,r18,r17
4000ffb4:	003d3206 	br	4000f480 <__alt_data_end+0xc000f480>
4000ffb8:	d8000e15 	stw	zero,56(sp)
4000ffbc:	003d7506 	br	4000f594 <__alt_data_end+0xc000f594>
4000ffc0:	b005883a 	mov	r2,r22
4000ffc4:	003f4506 	br	4000fcdc <__alt_data_end+0xc000fcdc>
4000ffc8:	dc000915 	stw	r16,36(sp)
4000ffcc:	d9800a17 	ldw	r6,40(sp)
4000ffd0:	d9400917 	ldw	r5,36(sp)
4000ffd4:	e009883a 	mov	r4,fp
4000ffd8:	0011a380 	call	40011a38 <__pow5mult>
4000ffdc:	1021883a 	mov	r16,r2
4000ffe0:	003f5a06 	br	4000fd4c <__alt_data_end+0xc000fd4c>
4000ffe4:	01c00044 	movi	r7,1
4000ffe8:	d9c00b15 	stw	r7,44(sp)
4000ffec:	d8802217 	ldw	r2,136(sp)
4000fff0:	0081280e 	bge	zero,r2,40010494 <_dtoa_r+0x11b0>
4000fff4:	100d883a 	mov	r6,r2
4000fff8:	1021883a 	mov	r16,r2
4000fffc:	d8800c15 	stw	r2,48(sp)
40010000:	d8800615 	stw	r2,24(sp)
40010004:	003d8806 	br	4000f628 <__alt_data_end+0xc000f628>
40010008:	d8800617 	ldw	r2,24(sp)
4001000c:	00be9b16 	blt	zero,r2,4000fa7c <__alt_data_end+0xc000fa7c>
40010010:	10010f1e 	bne	r2,zero,40010450 <_dtoa_r+0x116c>
40010014:	880b883a 	mov	r5,r17
40010018:	000d883a 	mov	r6,zero
4001001c:	01d00534 	movhi	r7,16404
40010020:	8009883a 	mov	r4,r16
40010024:	0008cc40 	call	40008cc4 <__muldf3>
40010028:	900d883a 	mov	r6,r18
4001002c:	980f883a 	mov	r7,r19
40010030:	1009883a 	mov	r4,r2
40010034:	180b883a 	mov	r5,r3
40010038:	00153380 	call	40015338 <__gedf2>
4001003c:	002b883a 	mov	r21,zero
40010040:	0023883a 	mov	r17,zero
40010044:	1000bf16 	blt	r2,zero,40010344 <_dtoa_r+0x1060>
40010048:	d9802217 	ldw	r6,136(sp)
4001004c:	ddc00717 	ldw	r23,28(sp)
40010050:	018c303a 	nor	r6,zero,r6
40010054:	d9800515 	stw	r6,20(sp)
40010058:	a80b883a 	mov	r5,r21
4001005c:	e009883a 	mov	r4,fp
40010060:	00114a00 	call	400114a0 <_Bfree>
40010064:	883e4926 	beq	r17,zero,4000f98c <__alt_data_end+0xc000f98c>
40010068:	003fad06 	br	4000ff20 <__alt_data_end+0xc000ff20>
4001006c:	d9c01117 	ldw	r7,68(sp)
40010070:	3801bc26 	beq	r7,zero,40010764 <_dtoa_r+0x1480>
40010074:	10810cc4 	addi	r2,r2,1075
40010078:	dd400a17 	ldw	r21,40(sp)
4001007c:	dd000817 	ldw	r20,32(sp)
40010080:	003f0a06 	br	4000fcac <__alt_data_end+0xc000fcac>
40010084:	00800704 	movi	r2,28
40010088:	d9000817 	ldw	r4,32(sp)
4001008c:	a0a9883a 	add	r20,r20,r2
40010090:	b0ad883a 	add	r22,r22,r2
40010094:	2089883a 	add	r4,r4,r2
40010098:	d9000815 	stw	r4,32(sp)
4001009c:	003f5106 	br	4000fde4 <__alt_data_end+0xc000fde4>
400100a0:	d8c00317 	ldw	r3,12(sp)
400100a4:	b8c1fc0e 	bge	r23,r3,40010898 <_dtoa_r+0x15b4>
400100a8:	0027883a 	mov	r19,zero
400100ac:	b805883a 	mov	r2,r23
400100b0:	003f3e06 	br	4000fdac <__alt_data_end+0xc000fdac>
400100b4:	880b883a 	mov	r5,r17
400100b8:	e009883a 	mov	r4,fp
400100bc:	000f883a 	mov	r7,zero
400100c0:	01800284 	movi	r6,10
400100c4:	00114c80 	call	400114c8 <__multadd>
400100c8:	d9000c17 	ldw	r4,48(sp)
400100cc:	1023883a 	mov	r17,r2
400100d0:	0102040e 	bge	zero,r4,400108e4 <_dtoa_r+0x1600>
400100d4:	d9000615 	stw	r4,24(sp)
400100d8:	0500050e 	bge	zero,r20,400100f0 <_dtoa_r+0xe0c>
400100dc:	880b883a 	mov	r5,r17
400100e0:	a00d883a 	mov	r6,r20
400100e4:	e009883a 	mov	r4,fp
400100e8:	0011b780 	call	40011b78 <__lshift>
400100ec:	1023883a 	mov	r17,r2
400100f0:	9801241e 	bne	r19,zero,40010584 <_dtoa_r+0x12a0>
400100f4:	8829883a 	mov	r20,r17
400100f8:	d9000617 	ldw	r4,24(sp)
400100fc:	dcc00717 	ldw	r19,28(sp)
40010100:	9480004c 	andi	r18,r18,1
40010104:	20bfffc4 	addi	r2,r4,-1
40010108:	9885883a 	add	r2,r19,r2
4001010c:	d8800415 	stw	r2,16(sp)
40010110:	dc800615 	stw	r18,24(sp)
40010114:	a80b883a 	mov	r5,r21
40010118:	8009883a 	mov	r4,r16
4001011c:	000f0e40 	call	4000f0e4 <quorem>
40010120:	880b883a 	mov	r5,r17
40010124:	8009883a 	mov	r4,r16
40010128:	102f883a 	mov	r23,r2
4001012c:	0011cc00 	call	40011cc0 <__mcmp>
40010130:	a80b883a 	mov	r5,r21
40010134:	a00d883a 	mov	r6,r20
40010138:	e009883a 	mov	r4,fp
4001013c:	102d883a 	mov	r22,r2
40010140:	0011d200 	call	40011d20 <__mdiff>
40010144:	1007883a 	mov	r3,r2
40010148:	10800317 	ldw	r2,12(r2)
4001014c:	bc800c04 	addi	r18,r23,48
40010150:	180b883a 	mov	r5,r3
40010154:	10004e1e 	bne	r2,zero,40010290 <_dtoa_r+0xfac>
40010158:	8009883a 	mov	r4,r16
4001015c:	d8c01615 	stw	r3,88(sp)
40010160:	0011cc00 	call	40011cc0 <__mcmp>
40010164:	d8c01617 	ldw	r3,88(sp)
40010168:	e009883a 	mov	r4,fp
4001016c:	d8801615 	stw	r2,88(sp)
40010170:	180b883a 	mov	r5,r3
40010174:	00114a00 	call	400114a0 <_Bfree>
40010178:	d8801617 	ldw	r2,88(sp)
4001017c:	1000041e 	bne	r2,zero,40010190 <_dtoa_r+0xeac>
40010180:	d9800317 	ldw	r6,12(sp)
40010184:	3000021e 	bne	r6,zero,40010190 <_dtoa_r+0xeac>
40010188:	d8c00617 	ldw	r3,24(sp)
4001018c:	18003726 	beq	r3,zero,4001026c <_dtoa_r+0xf88>
40010190:	b0002016 	blt	r22,zero,40010214 <_dtoa_r+0xf30>
40010194:	b000041e 	bne	r22,zero,400101a8 <_dtoa_r+0xec4>
40010198:	d9000317 	ldw	r4,12(sp)
4001019c:	2000021e 	bne	r4,zero,400101a8 <_dtoa_r+0xec4>
400101a0:	d8c00617 	ldw	r3,24(sp)
400101a4:	18001b26 	beq	r3,zero,40010214 <_dtoa_r+0xf30>
400101a8:	00810716 	blt	zero,r2,400105c8 <_dtoa_r+0x12e4>
400101ac:	d8c00417 	ldw	r3,16(sp)
400101b0:	9d800044 	addi	r22,r19,1
400101b4:	9c800005 	stb	r18,0(r19)
400101b8:	b02f883a 	mov	r23,r22
400101bc:	98c10626 	beq	r19,r3,400105d8 <_dtoa_r+0x12f4>
400101c0:	800b883a 	mov	r5,r16
400101c4:	000f883a 	mov	r7,zero
400101c8:	01800284 	movi	r6,10
400101cc:	e009883a 	mov	r4,fp
400101d0:	00114c80 	call	400114c8 <__multadd>
400101d4:	1021883a 	mov	r16,r2
400101d8:	000f883a 	mov	r7,zero
400101dc:	01800284 	movi	r6,10
400101e0:	880b883a 	mov	r5,r17
400101e4:	e009883a 	mov	r4,fp
400101e8:	8d002526 	beq	r17,r20,40010280 <_dtoa_r+0xf9c>
400101ec:	00114c80 	call	400114c8 <__multadd>
400101f0:	a00b883a 	mov	r5,r20
400101f4:	000f883a 	mov	r7,zero
400101f8:	01800284 	movi	r6,10
400101fc:	e009883a 	mov	r4,fp
40010200:	1023883a 	mov	r17,r2
40010204:	00114c80 	call	400114c8 <__multadd>
40010208:	1029883a 	mov	r20,r2
4001020c:	b027883a 	mov	r19,r22
40010210:	003fc006 	br	40010114 <__alt_data_end+0xc0010114>
40010214:	9011883a 	mov	r8,r18
40010218:	00800e0e 	bge	zero,r2,40010254 <_dtoa_r+0xf70>
4001021c:	800b883a 	mov	r5,r16
40010220:	01800044 	movi	r6,1
40010224:	e009883a 	mov	r4,fp
40010228:	da001715 	stw	r8,92(sp)
4001022c:	0011b780 	call	40011b78 <__lshift>
40010230:	a80b883a 	mov	r5,r21
40010234:	1009883a 	mov	r4,r2
40010238:	1021883a 	mov	r16,r2
4001023c:	0011cc00 	call	40011cc0 <__mcmp>
40010240:	da001717 	ldw	r8,92(sp)
40010244:	0081960e 	bge	zero,r2,400108a0 <_dtoa_r+0x15bc>
40010248:	00800e44 	movi	r2,57
4001024c:	40817026 	beq	r8,r2,40010810 <_dtoa_r+0x152c>
40010250:	ba000c44 	addi	r8,r23,49
40010254:	8825883a 	mov	r18,r17
40010258:	9dc00044 	addi	r23,r19,1
4001025c:	9a000005 	stb	r8,0(r19)
40010260:	a023883a 	mov	r17,r20
40010264:	dc000915 	stw	r16,36(sp)
40010268:	003f2406 	br	4000fefc <__alt_data_end+0xc000fefc>
4001026c:	00800e44 	movi	r2,57
40010270:	9011883a 	mov	r8,r18
40010274:	90816626 	beq	r18,r2,40010810 <_dtoa_r+0x152c>
40010278:	05bff516 	blt	zero,r22,40010250 <__alt_data_end+0xc0010250>
4001027c:	003ff506 	br	40010254 <__alt_data_end+0xc0010254>
40010280:	00114c80 	call	400114c8 <__multadd>
40010284:	1023883a 	mov	r17,r2
40010288:	1029883a 	mov	r20,r2
4001028c:	003fdf06 	br	4001020c <__alt_data_end+0xc001020c>
40010290:	e009883a 	mov	r4,fp
40010294:	00114a00 	call	400114a0 <_Bfree>
40010298:	00800044 	movi	r2,1
4001029c:	003fbc06 	br	40010190 <__alt_data_end+0xc0010190>
400102a0:	a80b883a 	mov	r5,r21
400102a4:	8009883a 	mov	r4,r16
400102a8:	0011cc00 	call	40011cc0 <__mcmp>
400102ac:	103edb0e 	bge	r2,zero,4000fe1c <__alt_data_end+0xc000fe1c>
400102b0:	800b883a 	mov	r5,r16
400102b4:	000f883a 	mov	r7,zero
400102b8:	01800284 	movi	r6,10
400102bc:	e009883a 	mov	r4,fp
400102c0:	00114c80 	call	400114c8 <__multadd>
400102c4:	1021883a 	mov	r16,r2
400102c8:	d8800517 	ldw	r2,20(sp)
400102cc:	d8c00b17 	ldw	r3,44(sp)
400102d0:	10bfffc4 	addi	r2,r2,-1
400102d4:	d8800515 	stw	r2,20(sp)
400102d8:	183f761e 	bne	r3,zero,400100b4 <__alt_data_end+0xc00100b4>
400102dc:	d9000c17 	ldw	r4,48(sp)
400102e0:	0101730e 	bge	zero,r4,400108b0 <_dtoa_r+0x15cc>
400102e4:	d9000615 	stw	r4,24(sp)
400102e8:	003ed006 	br	4000fe2c <__alt_data_end+0xc000fe2c>
400102ec:	00800084 	movi	r2,2
400102f0:	3081861e 	bne	r6,r2,4001090c <_dtoa_r+0x1628>
400102f4:	d8000b15 	stw	zero,44(sp)
400102f8:	003f3c06 	br	4000ffec <__alt_data_end+0xc000ffec>
400102fc:	dc000917 	ldw	r16,36(sp)
40010300:	003e9206 	br	4000fd4c <__alt_data_end+0xc000fd4c>
40010304:	d9c00317 	ldw	r7,12(sp)
40010308:	00800084 	movi	r2,2
4001030c:	11fec50e 	bge	r2,r7,4000fe24 <__alt_data_end+0xc000fe24>
40010310:	d9000617 	ldw	r4,24(sp)
40010314:	20013c1e 	bne	r4,zero,40010808 <_dtoa_r+0x1524>
40010318:	a80b883a 	mov	r5,r21
4001031c:	000f883a 	mov	r7,zero
40010320:	01800144 	movi	r6,5
40010324:	e009883a 	mov	r4,fp
40010328:	00114c80 	call	400114c8 <__multadd>
4001032c:	100b883a 	mov	r5,r2
40010330:	8009883a 	mov	r4,r16
40010334:	102b883a 	mov	r21,r2
40010338:	0011cc00 	call	40011cc0 <__mcmp>
4001033c:	dc000915 	stw	r16,36(sp)
40010340:	00bf410e 	bge	zero,r2,40010048 <__alt_data_end+0xc0010048>
40010344:	d9c00717 	ldw	r7,28(sp)
40010348:	00800c44 	movi	r2,49
4001034c:	38800005 	stb	r2,0(r7)
40010350:	d8800517 	ldw	r2,20(sp)
40010354:	3dc00044 	addi	r23,r7,1
40010358:	10800044 	addi	r2,r2,1
4001035c:	d8800515 	stw	r2,20(sp)
40010360:	003f3d06 	br	40010058 <__alt_data_end+0xc0010058>
40010364:	d9800517 	ldw	r6,20(sp)
40010368:	d9c00717 	ldw	r7,28(sp)
4001036c:	00800c44 	movi	r2,49
40010370:	31800044 	addi	r6,r6,1
40010374:	d9800515 	stw	r6,20(sp)
40010378:	38800005 	stb	r2,0(r7)
4001037c:	003edf06 	br	4000fefc <__alt_data_end+0xc000fefc>
40010380:	d8000b15 	stw	zero,44(sp)
40010384:	003c9f06 	br	4000f604 <__alt_data_end+0xc000f604>
40010388:	903e7e1e 	bne	r18,zero,4000fd84 <__alt_data_end+0xc000fd84>
4001038c:	00800434 	movhi	r2,16
40010390:	10bfffc4 	addi	r2,r2,-1
40010394:	9884703a 	and	r2,r19,r2
40010398:	1000ea1e 	bne	r2,zero,40010744 <_dtoa_r+0x1460>
4001039c:	9cdffc2c 	andhi	r19,r19,32752
400103a0:	9800e826 	beq	r19,zero,40010744 <_dtoa_r+0x1460>
400103a4:	d9c00817 	ldw	r7,32(sp)
400103a8:	b5800044 	addi	r22,r22,1
400103ac:	04c00044 	movi	r19,1
400103b0:	39c00044 	addi	r7,r7,1
400103b4:	d9c00815 	stw	r7,32(sp)
400103b8:	d8800d17 	ldw	r2,52(sp)
400103bc:	103e721e 	bne	r2,zero,4000fd88 <__alt_data_end+0xc000fd88>
400103c0:	00800044 	movi	r2,1
400103c4:	003e7906 	br	4000fdac <__alt_data_end+0xc000fdac>
400103c8:	8009883a 	mov	r4,r16
400103cc:	000945c0 	call	4000945c <__floatsidf>
400103d0:	d9800f17 	ldw	r6,60(sp)
400103d4:	d9c01017 	ldw	r7,64(sp)
400103d8:	1009883a 	mov	r4,r2
400103dc:	180b883a 	mov	r5,r3
400103e0:	0008cc40 	call	40008cc4 <__muldf3>
400103e4:	000d883a 	mov	r6,zero
400103e8:	01d00734 	movhi	r7,16412
400103ec:	1009883a 	mov	r4,r2
400103f0:	180b883a 	mov	r5,r3
400103f4:	0007b300 	call	40007b30 <__adddf3>
400103f8:	047f3034 	movhi	r17,64704
400103fc:	1021883a 	mov	r16,r2
40010400:	1c63883a 	add	r17,r3,r17
40010404:	d9000f17 	ldw	r4,60(sp)
40010408:	d9401017 	ldw	r5,64(sp)
4001040c:	000d883a 	mov	r6,zero
40010410:	01d00534 	movhi	r7,16404
40010414:	00155080 	call	40015508 <__subdf3>
40010418:	800d883a 	mov	r6,r16
4001041c:	880f883a 	mov	r7,r17
40010420:	1009883a 	mov	r4,r2
40010424:	180b883a 	mov	r5,r3
40010428:	102b883a 	mov	r21,r2
4001042c:	1829883a 	mov	r20,r3
40010430:	00153380 	call	40015338 <__gedf2>
40010434:	00806c16 	blt	zero,r2,400105e8 <_dtoa_r+0x1304>
40010438:	89e0003c 	xorhi	r7,r17,32768
4001043c:	800d883a 	mov	r6,r16
40010440:	a809883a 	mov	r4,r21
40010444:	a00b883a 	mov	r5,r20
40010448:	00154140 	call	40015414 <__ledf2>
4001044c:	103d7e0e 	bge	r2,zero,4000fa48 <__alt_data_end+0xc000fa48>
40010450:	002b883a 	mov	r21,zero
40010454:	0023883a 	mov	r17,zero
40010458:	003efb06 	br	40010048 <__alt_data_end+0xc0010048>
4001045c:	d8800717 	ldw	r2,28(sp)
40010460:	003bd006 	br	4000f3a4 <__alt_data_end+0xc000f3a4>
40010464:	d9000a17 	ldw	r4,40(sp)
40010468:	d9800d17 	ldw	r6,52(sp)
4001046c:	dd400a15 	stw	r21,40(sp)
40010470:	a905c83a 	sub	r2,r21,r4
40010474:	308d883a 	add	r6,r6,r2
40010478:	d9800d15 	stw	r6,52(sp)
4001047c:	002b883a 	mov	r21,zero
40010480:	003e0606 	br	4000fc9c <__alt_data_end+0xc000fc9c>
40010484:	9023883a 	mov	r17,r18
40010488:	9829883a 	mov	r20,r19
4001048c:	04000084 	movi	r16,2
40010490:	003c9206 	br	4000f6dc <__alt_data_end+0xc000f6dc>
40010494:	04000044 	movi	r16,1
40010498:	dc000c15 	stw	r16,48(sp)
4001049c:	dc000615 	stw	r16,24(sp)
400104a0:	dc002215 	stw	r16,136(sp)
400104a4:	e0001115 	stw	zero,68(fp)
400104a8:	000b883a 	mov	r5,zero
400104ac:	003c6906 	br	4000f654 <__alt_data_end+0xc000f654>
400104b0:	3021883a 	mov	r16,r6
400104b4:	003ffb06 	br	400104a4 <__alt_data_end+0xc00104a4>
400104b8:	1000021e 	bne	r2,zero,400104c4 <_dtoa_r+0x11e0>
400104bc:	4200004c 	andi	r8,r8,1
400104c0:	403e7d1e 	bne	r8,zero,4000feb8 <__alt_data_end+0xc000feb8>
400104c4:	01000c04 	movi	r4,48
400104c8:	00000106 	br	400104d0 <_dtoa_r+0x11ec>
400104cc:	102f883a 	mov	r23,r2
400104d0:	b8bfffc4 	addi	r2,r23,-1
400104d4:	10c00007 	ldb	r3,0(r2)
400104d8:	193ffc26 	beq	r3,r4,400104cc <__alt_data_end+0xc00104cc>
400104dc:	003e8706 	br	4000fefc <__alt_data_end+0xc000fefc>
400104e0:	d8800517 	ldw	r2,20(sp)
400104e4:	00a3c83a 	sub	r17,zero,r2
400104e8:	8800a426 	beq	r17,zero,4001077c <_dtoa_r+0x1498>
400104ec:	888003cc 	andi	r2,r17,15
400104f0:	100490fa 	slli	r2,r2,3
400104f4:	00d000b4 	movhi	r3,16386
400104f8:	18fb5904 	addi	r3,r3,-4764
400104fc:	1885883a 	add	r2,r3,r2
40010500:	11800017 	ldw	r6,0(r2)
40010504:	11c00117 	ldw	r7,4(r2)
40010508:	9009883a 	mov	r4,r18
4001050c:	980b883a 	mov	r5,r19
40010510:	8823d13a 	srai	r17,r17,4
40010514:	0008cc40 	call	40008cc4 <__muldf3>
40010518:	d8800f15 	stw	r2,60(sp)
4001051c:	d8c01015 	stw	r3,64(sp)
40010520:	8800e826 	beq	r17,zero,400108c4 <_dtoa_r+0x15e0>
40010524:	051000b4 	movhi	r20,16386
40010528:	a53b4f04 	addi	r20,r20,-4804
4001052c:	04000084 	movi	r16,2
40010530:	8980004c 	andi	r6,r17,1
40010534:	1009883a 	mov	r4,r2
40010538:	8823d07a 	srai	r17,r17,1
4001053c:	180b883a 	mov	r5,r3
40010540:	30000426 	beq	r6,zero,40010554 <_dtoa_r+0x1270>
40010544:	a1800017 	ldw	r6,0(r20)
40010548:	a1c00117 	ldw	r7,4(r20)
4001054c:	84000044 	addi	r16,r16,1
40010550:	0008cc40 	call	40008cc4 <__muldf3>
40010554:	a5000204 	addi	r20,r20,8
40010558:	883ff51e 	bne	r17,zero,40010530 <__alt_data_end+0xc0010530>
4001055c:	d8800f15 	stw	r2,60(sp)
40010560:	d8c01015 	stw	r3,64(sp)
40010564:	003c7606 	br	4000f740 <__alt_data_end+0xc000f740>
40010568:	00c00c04 	movi	r3,48
4001056c:	10c00005 	stb	r3,0(r2)
40010570:	d8c00517 	ldw	r3,20(sp)
40010574:	bd3fffc3 	ldbu	r20,-1(r23)
40010578:	18c00044 	addi	r3,r3,1
4001057c:	d8c00515 	stw	r3,20(sp)
40010580:	003db906 	br	4000fc68 <__alt_data_end+0xc000fc68>
40010584:	89400117 	ldw	r5,4(r17)
40010588:	e009883a 	mov	r4,fp
4001058c:	00113f80 	call	400113f8 <_Balloc>
40010590:	89800417 	ldw	r6,16(r17)
40010594:	89400304 	addi	r5,r17,12
40010598:	11000304 	addi	r4,r2,12
4001059c:	31800084 	addi	r6,r6,2
400105a0:	318d883a 	add	r6,r6,r6
400105a4:	318d883a 	add	r6,r6,r6
400105a8:	1027883a 	mov	r19,r2
400105ac:	000b8fc0 	call	4000b8fc <memcpy>
400105b0:	01800044 	movi	r6,1
400105b4:	980b883a 	mov	r5,r19
400105b8:	e009883a 	mov	r4,fp
400105bc:	0011b780 	call	40011b78 <__lshift>
400105c0:	1029883a 	mov	r20,r2
400105c4:	003ecc06 	br	400100f8 <__alt_data_end+0xc00100f8>
400105c8:	00800e44 	movi	r2,57
400105cc:	90809026 	beq	r18,r2,40010810 <_dtoa_r+0x152c>
400105d0:	92000044 	addi	r8,r18,1
400105d4:	003f1f06 	br	40010254 <__alt_data_end+0xc0010254>
400105d8:	9011883a 	mov	r8,r18
400105dc:	8825883a 	mov	r18,r17
400105e0:	a023883a 	mov	r17,r20
400105e4:	003e2906 	br	4000fe8c <__alt_data_end+0xc000fe8c>
400105e8:	002b883a 	mov	r21,zero
400105ec:	0023883a 	mov	r17,zero
400105f0:	003f5406 	br	40010344 <__alt_data_end+0xc0010344>
400105f4:	61bfffc4 	addi	r6,r12,-1
400105f8:	300490fa 	slli	r2,r6,3
400105fc:	00d000b4 	movhi	r3,16386
40010600:	18fb5904 	addi	r3,r3,-4764
40010604:	1885883a 	add	r2,r3,r2
40010608:	11000017 	ldw	r4,0(r2)
4001060c:	11400117 	ldw	r5,4(r2)
40010610:	d8800717 	ldw	r2,28(sp)
40010614:	880f883a 	mov	r7,r17
40010618:	d9801215 	stw	r6,72(sp)
4001061c:	800d883a 	mov	r6,r16
40010620:	db001615 	stw	r12,88(sp)
40010624:	15c00044 	addi	r23,r2,1
40010628:	0008cc40 	call	40008cc4 <__muldf3>
4001062c:	d9401017 	ldw	r5,64(sp)
40010630:	d9000f17 	ldw	r4,60(sp)
40010634:	d8c01515 	stw	r3,84(sp)
40010638:	d8801415 	stw	r2,80(sp)
4001063c:	00093dc0 	call	400093dc <__fixdfsi>
40010640:	1009883a 	mov	r4,r2
40010644:	1021883a 	mov	r16,r2
40010648:	000945c0 	call	4000945c <__floatsidf>
4001064c:	d9000f17 	ldw	r4,60(sp)
40010650:	d9401017 	ldw	r5,64(sp)
40010654:	100d883a 	mov	r6,r2
40010658:	180f883a 	mov	r7,r3
4001065c:	00155080 	call	40015508 <__subdf3>
40010660:	1829883a 	mov	r20,r3
40010664:	d8c00717 	ldw	r3,28(sp)
40010668:	84000c04 	addi	r16,r16,48
4001066c:	1023883a 	mov	r17,r2
40010670:	1c000005 	stb	r16,0(r3)
40010674:	db001617 	ldw	r12,88(sp)
40010678:	00800044 	movi	r2,1
4001067c:	60802226 	beq	r12,r2,40010708 <_dtoa_r+0x1424>
40010680:	d9c00717 	ldw	r7,28(sp)
40010684:	8805883a 	mov	r2,r17
40010688:	b82b883a 	mov	r21,r23
4001068c:	3b19883a 	add	r12,r7,r12
40010690:	6023883a 	mov	r17,r12
40010694:	a007883a 	mov	r3,r20
40010698:	dc800f15 	stw	r18,60(sp)
4001069c:	000d883a 	mov	r6,zero
400106a0:	01d00934 	movhi	r7,16420
400106a4:	1009883a 	mov	r4,r2
400106a8:	180b883a 	mov	r5,r3
400106ac:	0008cc40 	call	40008cc4 <__muldf3>
400106b0:	180b883a 	mov	r5,r3
400106b4:	1009883a 	mov	r4,r2
400106b8:	1829883a 	mov	r20,r3
400106bc:	1025883a 	mov	r18,r2
400106c0:	00093dc0 	call	400093dc <__fixdfsi>
400106c4:	1009883a 	mov	r4,r2
400106c8:	1021883a 	mov	r16,r2
400106cc:	000945c0 	call	4000945c <__floatsidf>
400106d0:	100d883a 	mov	r6,r2
400106d4:	180f883a 	mov	r7,r3
400106d8:	9009883a 	mov	r4,r18
400106dc:	a00b883a 	mov	r5,r20
400106e0:	84000c04 	addi	r16,r16,48
400106e4:	00155080 	call	40015508 <__subdf3>
400106e8:	ad400044 	addi	r21,r21,1
400106ec:	ac3fffc5 	stb	r16,-1(r21)
400106f0:	ac7fea1e 	bne	r21,r17,4001069c <__alt_data_end+0xc001069c>
400106f4:	1023883a 	mov	r17,r2
400106f8:	d8801217 	ldw	r2,72(sp)
400106fc:	dc800f17 	ldw	r18,60(sp)
40010700:	1829883a 	mov	r20,r3
40010704:	b8af883a 	add	r23,r23,r2
40010708:	d9001417 	ldw	r4,80(sp)
4001070c:	d9401517 	ldw	r5,84(sp)
40010710:	000d883a 	mov	r6,zero
40010714:	01cff834 	movhi	r7,16352
40010718:	0007b300 	call	40007b30 <__adddf3>
4001071c:	880d883a 	mov	r6,r17
40010720:	a00f883a 	mov	r7,r20
40010724:	1009883a 	mov	r4,r2
40010728:	180b883a 	mov	r5,r3
4001072c:	00154140 	call	40015414 <__ledf2>
40010730:	10003e0e 	bge	r2,zero,4001082c <_dtoa_r+0x1548>
40010734:	d9001317 	ldw	r4,76(sp)
40010738:	bd3fffc3 	ldbu	r20,-1(r23)
4001073c:	d9000515 	stw	r4,20(sp)
40010740:	003d3b06 	br	4000fc30 <__alt_data_end+0xc000fc30>
40010744:	0027883a 	mov	r19,zero
40010748:	003f1b06 	br	400103b8 <__alt_data_end+0xc00103b8>
4001074c:	d8800817 	ldw	r2,32(sp)
40010750:	11e9c83a 	sub	r20,r2,r7
40010754:	0005883a 	mov	r2,zero
40010758:	003d5406 	br	4000fcac <__alt_data_end+0xc000fcac>
4001075c:	00800044 	movi	r2,1
40010760:	003dc706 	br	4000fe80 <__alt_data_end+0xc000fe80>
40010764:	d8c00217 	ldw	r3,8(sp)
40010768:	00800d84 	movi	r2,54
4001076c:	dd400a17 	ldw	r21,40(sp)
40010770:	10c5c83a 	sub	r2,r2,r3
40010774:	dd000817 	ldw	r20,32(sp)
40010778:	003d4c06 	br	4000fcac <__alt_data_end+0xc000fcac>
4001077c:	dc800f15 	stw	r18,60(sp)
40010780:	dcc01015 	stw	r19,64(sp)
40010784:	04000084 	movi	r16,2
40010788:	003bed06 	br	4000f740 <__alt_data_end+0xc000f740>
4001078c:	d9000617 	ldw	r4,24(sp)
40010790:	203f0d26 	beq	r4,zero,400103c8 <__alt_data_end+0xc00103c8>
40010794:	d9800c17 	ldw	r6,48(sp)
40010798:	01bcab0e 	bge	zero,r6,4000fa48 <__alt_data_end+0xc000fa48>
4001079c:	d9401017 	ldw	r5,64(sp)
400107a0:	d9000f17 	ldw	r4,60(sp)
400107a4:	000d883a 	mov	r6,zero
400107a8:	01d00934 	movhi	r7,16420
400107ac:	0008cc40 	call	40008cc4 <__muldf3>
400107b0:	81000044 	addi	r4,r16,1
400107b4:	d8800f15 	stw	r2,60(sp)
400107b8:	d8c01015 	stw	r3,64(sp)
400107bc:	000945c0 	call	4000945c <__floatsidf>
400107c0:	d9800f17 	ldw	r6,60(sp)
400107c4:	d9c01017 	ldw	r7,64(sp)
400107c8:	1009883a 	mov	r4,r2
400107cc:	180b883a 	mov	r5,r3
400107d0:	0008cc40 	call	40008cc4 <__muldf3>
400107d4:	01d00734 	movhi	r7,16412
400107d8:	000d883a 	mov	r6,zero
400107dc:	1009883a 	mov	r4,r2
400107e0:	180b883a 	mov	r5,r3
400107e4:	0007b300 	call	40007b30 <__adddf3>
400107e8:	d9c00517 	ldw	r7,20(sp)
400107ec:	047f3034 	movhi	r17,64704
400107f0:	1021883a 	mov	r16,r2
400107f4:	39ffffc4 	addi	r7,r7,-1
400107f8:	d9c01315 	stw	r7,76(sp)
400107fc:	1c63883a 	add	r17,r3,r17
40010800:	db000c17 	ldw	r12,48(sp)
40010804:	003bea06 	br	4000f7b0 <__alt_data_end+0xc000f7b0>
40010808:	dc000915 	stw	r16,36(sp)
4001080c:	003e0e06 	br	40010048 <__alt_data_end+0xc0010048>
40010810:	01000e44 	movi	r4,57
40010814:	8825883a 	mov	r18,r17
40010818:	9dc00044 	addi	r23,r19,1
4001081c:	99000005 	stb	r4,0(r19)
40010820:	a023883a 	mov	r17,r20
40010824:	dc000915 	stw	r16,36(sp)
40010828:	003da406 	br	4000febc <__alt_data_end+0xc000febc>
4001082c:	d9801417 	ldw	r6,80(sp)
40010830:	d9c01517 	ldw	r7,84(sp)
40010834:	0009883a 	mov	r4,zero
40010838:	014ff834 	movhi	r5,16352
4001083c:	00155080 	call	40015508 <__subdf3>
40010840:	880d883a 	mov	r6,r17
40010844:	a00f883a 	mov	r7,r20
40010848:	1009883a 	mov	r4,r2
4001084c:	180b883a 	mov	r5,r3
40010850:	00153380 	call	40015338 <__gedf2>
40010854:	00bc7c0e 	bge	zero,r2,4000fa48 <__alt_data_end+0xc000fa48>
40010858:	01000c04 	movi	r4,48
4001085c:	00000106 	br	40010864 <_dtoa_r+0x1580>
40010860:	102f883a 	mov	r23,r2
40010864:	b8bfffc4 	addi	r2,r23,-1
40010868:	10c00007 	ldb	r3,0(r2)
4001086c:	193ffc26 	beq	r3,r4,40010860 <__alt_data_end+0xc0010860>
40010870:	d9801317 	ldw	r6,76(sp)
40010874:	d9800515 	stw	r6,20(sp)
40010878:	003c4406 	br	4000f98c <__alt_data_end+0xc000f98c>
4001087c:	d9801317 	ldw	r6,76(sp)
40010880:	d9800515 	stw	r6,20(sp)
40010884:	003cea06 	br	4000fc30 <__alt_data_end+0xc000fc30>
40010888:	dd800f17 	ldw	r22,60(sp)
4001088c:	dcc01017 	ldw	r19,64(sp)
40010890:	dc801217 	ldw	r18,72(sp)
40010894:	003c6c06 	br	4000fa48 <__alt_data_end+0xc000fa48>
40010898:	903e031e 	bne	r18,zero,400100a8 <__alt_data_end+0xc00100a8>
4001089c:	003ebb06 	br	4001038c <__alt_data_end+0xc001038c>
400108a0:	103e6c1e 	bne	r2,zero,40010254 <__alt_data_end+0xc0010254>
400108a4:	4080004c 	andi	r2,r8,1
400108a8:	103e6a26 	beq	r2,zero,40010254 <__alt_data_end+0xc0010254>
400108ac:	003e6606 	br	40010248 <__alt_data_end+0xc0010248>
400108b0:	d8c00317 	ldw	r3,12(sp)
400108b4:	00800084 	movi	r2,2
400108b8:	10c02916 	blt	r2,r3,40010960 <_dtoa_r+0x167c>
400108bc:	d9000c17 	ldw	r4,48(sp)
400108c0:	003e8806 	br	400102e4 <__alt_data_end+0xc00102e4>
400108c4:	04000084 	movi	r16,2
400108c8:	003b9d06 	br	4000f740 <__alt_data_end+0xc000f740>
400108cc:	d9001317 	ldw	r4,76(sp)
400108d0:	d9000515 	stw	r4,20(sp)
400108d4:	003cd606 	br	4000fc30 <__alt_data_end+0xc000fc30>
400108d8:	d8801317 	ldw	r2,76(sp)
400108dc:	d8800515 	stw	r2,20(sp)
400108e0:	003c2a06 	br	4000f98c <__alt_data_end+0xc000f98c>
400108e4:	d9800317 	ldw	r6,12(sp)
400108e8:	00800084 	movi	r2,2
400108ec:	11801516 	blt	r2,r6,40010944 <_dtoa_r+0x1660>
400108f0:	d9c00c17 	ldw	r7,48(sp)
400108f4:	d9c00615 	stw	r7,24(sp)
400108f8:	003df706 	br	400100d8 <__alt_data_end+0xc00100d8>
400108fc:	193d3926 	beq	r3,r4,4000fde4 <__alt_data_end+0xc000fde4>
40010900:	00c00f04 	movi	r3,60
40010904:	1885c83a 	sub	r2,r3,r2
40010908:	003ddf06 	br	40010088 <__alt_data_end+0xc0010088>
4001090c:	e009883a 	mov	r4,fp
40010910:	e0001115 	stw	zero,68(fp)
40010914:	000b883a 	mov	r5,zero
40010918:	00113f80 	call	400113f8 <_Balloc>
4001091c:	d8800715 	stw	r2,28(sp)
40010920:	d8c00717 	ldw	r3,28(sp)
40010924:	00bfffc4 	movi	r2,-1
40010928:	01000044 	movi	r4,1
4001092c:	d8800c15 	stw	r2,48(sp)
40010930:	e0c01015 	stw	r3,64(fp)
40010934:	d9000b15 	stw	r4,44(sp)
40010938:	d8800615 	stw	r2,24(sp)
4001093c:	d8002215 	stw	zero,136(sp)
40010940:	003c4106 	br	4000fa48 <__alt_data_end+0xc000fa48>
40010944:	d8c00c17 	ldw	r3,48(sp)
40010948:	d8c00615 	stw	r3,24(sp)
4001094c:	003e7006 	br	40010310 <__alt_data_end+0xc0010310>
40010950:	04400044 	movi	r17,1
40010954:	003b2006 	br	4000f5d8 <__alt_data_end+0xc000f5d8>
40010958:	000b883a 	mov	r5,zero
4001095c:	003b3d06 	br	4000f654 <__alt_data_end+0xc000f654>
40010960:	d8800c17 	ldw	r2,48(sp)
40010964:	d8800615 	stw	r2,24(sp)
40010968:	003e6906 	br	40010310 <__alt_data_end+0xc0010310>

4001096c <__sflags>:
4001096c:	28800007 	ldb	r2,0(r5)
40010970:	00c01c84 	movi	r3,114
40010974:	10c02426 	beq	r2,r3,40010a08 <__sflags+0x9c>
40010978:	00c01dc4 	movi	r3,119
4001097c:	10c01e26 	beq	r2,r3,400109f8 <__sflags+0x8c>
40010980:	00c01844 	movi	r3,97
40010984:	10c00426 	beq	r2,r3,40010998 <__sflags+0x2c>
40010988:	00800584 	movi	r2,22
4001098c:	20800015 	stw	r2,0(r4)
40010990:	0005883a 	mov	r2,zero
40010994:	f800283a 	ret
40010998:	02c08204 	movi	r11,520
4001099c:	01000044 	movi	r4,1
400109a0:	00804204 	movi	r2,264
400109a4:	01c00ac4 	movi	r7,43
400109a8:	02bff8c4 	movi	r10,-29
400109ac:	027fff04 	movi	r9,-4
400109b0:	02001e04 	movi	r8,120
400109b4:	29400044 	addi	r5,r5,1
400109b8:	28c00007 	ldb	r3,0(r5)
400109bc:	18000626 	beq	r3,zero,400109d8 <__sflags+0x6c>
400109c0:	19c00826 	beq	r3,r7,400109e4 <__sflags+0x78>
400109c4:	1a3ffb1e 	bne	r3,r8,400109b4 <__alt_data_end+0xc00109b4>
400109c8:	29400044 	addi	r5,r5,1
400109cc:	28c00007 	ldb	r3,0(r5)
400109d0:	21020014 	ori	r4,r4,2048
400109d4:	183ffa1e 	bne	r3,zero,400109c0 <__alt_data_end+0xc00109c0>
400109d8:	22c8b03a 	or	r4,r4,r11
400109dc:	31000015 	stw	r4,0(r6)
400109e0:	f800283a 	ret
400109e4:	1284703a 	and	r2,r2,r10
400109e8:	2248703a 	and	r4,r4,r9
400109ec:	10800414 	ori	r2,r2,16
400109f0:	21000094 	ori	r4,r4,2
400109f4:	003fef06 	br	400109b4 <__alt_data_end+0xc00109b4>
400109f8:	02c18004 	movi	r11,1536
400109fc:	01000044 	movi	r4,1
40010a00:	00800204 	movi	r2,8
40010a04:	003fe706 	br	400109a4 <__alt_data_end+0xc00109a4>
40010a08:	0017883a 	mov	r11,zero
40010a0c:	0009883a 	mov	r4,zero
40010a10:	00800104 	movi	r2,4
40010a14:	003fe306 	br	400109a4 <__alt_data_end+0xc00109a4>

40010a18 <_fputc_r>:
40010a18:	defffc04 	addi	sp,sp,-16
40010a1c:	dc000215 	stw	r16,8(sp)
40010a20:	dfc00315 	stw	ra,12(sp)
40010a24:	2021883a 	mov	r16,r4
40010a28:	20000726 	beq	r4,zero,40010a48 <_fputc_r+0x30>
40010a2c:	20800e17 	ldw	r2,56(r4)
40010a30:	1000051e 	bne	r2,zero,40010a48 <_fputc_r+0x30>
40010a34:	d9400015 	stw	r5,0(sp)
40010a38:	d9800115 	stw	r6,4(sp)
40010a3c:	0009e540 	call	40009e54 <__sinit>
40010a40:	d9800117 	ldw	r6,4(sp)
40010a44:	d9400017 	ldw	r5,0(sp)
40010a48:	8009883a 	mov	r4,r16
40010a4c:	dfc00317 	ldw	ra,12(sp)
40010a50:	dc000217 	ldw	r16,8(sp)
40010a54:	dec00404 	addi	sp,sp,16
40010a58:	00123f41 	jmpi	400123f4 <_putc_r>

40010a5c <fputc>:
40010a5c:	009000b4 	movhi	r2,16386
40010a60:	defffc04 	addi	sp,sp,-16
40010a64:	108af604 	addi	r2,r2,11224
40010a68:	dc000115 	stw	r16,4(sp)
40010a6c:	14000017 	ldw	r16,0(r2)
40010a70:	dc400215 	stw	r17,8(sp)
40010a74:	dfc00315 	stw	ra,12(sp)
40010a78:	2023883a 	mov	r17,r4
40010a7c:	80000626 	beq	r16,zero,40010a98 <fputc+0x3c>
40010a80:	80800e17 	ldw	r2,56(r16)
40010a84:	1000041e 	bne	r2,zero,40010a98 <fputc+0x3c>
40010a88:	8009883a 	mov	r4,r16
40010a8c:	d9400015 	stw	r5,0(sp)
40010a90:	0009e540 	call	40009e54 <__sinit>
40010a94:	d9400017 	ldw	r5,0(sp)
40010a98:	280d883a 	mov	r6,r5
40010a9c:	8009883a 	mov	r4,r16
40010aa0:	880b883a 	mov	r5,r17
40010aa4:	dfc00317 	ldw	ra,12(sp)
40010aa8:	dc400217 	ldw	r17,8(sp)
40010aac:	dc000117 	ldw	r16,4(sp)
40010ab0:	dec00404 	addi	sp,sp,16
40010ab4:	00123f41 	jmpi	400123f4 <_putc_r>

40010ab8 <_fputs_r>:
40010ab8:	defff804 	addi	sp,sp,-32
40010abc:	dc400615 	stw	r17,24(sp)
40010ac0:	2023883a 	mov	r17,r4
40010ac4:	2809883a 	mov	r4,r5
40010ac8:	dc000515 	stw	r16,20(sp)
40010acc:	dfc00715 	stw	ra,28(sp)
40010ad0:	3021883a 	mov	r16,r6
40010ad4:	d9400315 	stw	r5,12(sp)
40010ad8:	000c9ec0 	call	4000c9ec <strlen>
40010adc:	d8800215 	stw	r2,8(sp)
40010ae0:	d8800415 	stw	r2,16(sp)
40010ae4:	d8800304 	addi	r2,sp,12
40010ae8:	d8800015 	stw	r2,0(sp)
40010aec:	00800044 	movi	r2,1
40010af0:	d8800115 	stw	r2,4(sp)
40010af4:	88000226 	beq	r17,zero,40010b00 <_fputs_r+0x48>
40010af8:	88800e17 	ldw	r2,56(r17)
40010afc:	10001226 	beq	r2,zero,40010b48 <_fputs_r+0x90>
40010b00:	8080030b 	ldhu	r2,12(r16)
40010b04:	10c8000c 	andi	r3,r2,8192
40010b08:	1800061e 	bne	r3,zero,40010b24 <_fputs_r+0x6c>
40010b0c:	81001917 	ldw	r4,100(r16)
40010b10:	00f7ffc4 	movi	r3,-8193
40010b14:	10880014 	ori	r2,r2,8192
40010b18:	20c6703a 	and	r3,r4,r3
40010b1c:	8080030d 	sth	r2,12(r16)
40010b20:	80c01915 	stw	r3,100(r16)
40010b24:	d80d883a 	mov	r6,sp
40010b28:	800b883a 	mov	r5,r16
40010b2c:	8809883a 	mov	r4,r17
40010b30:	0010b6c0 	call	40010b6c <__sfvwrite_r>
40010b34:	dfc00717 	ldw	ra,28(sp)
40010b38:	dc400617 	ldw	r17,24(sp)
40010b3c:	dc000517 	ldw	r16,20(sp)
40010b40:	dec00804 	addi	sp,sp,32
40010b44:	f800283a 	ret
40010b48:	8809883a 	mov	r4,r17
40010b4c:	0009e540 	call	40009e54 <__sinit>
40010b50:	003feb06 	br	40010b00 <__alt_data_end+0xc0010b00>

40010b54 <fputs>:
40010b54:	009000b4 	movhi	r2,16386
40010b58:	108af604 	addi	r2,r2,11224
40010b5c:	280d883a 	mov	r6,r5
40010b60:	200b883a 	mov	r5,r4
40010b64:	11000017 	ldw	r4,0(r2)
40010b68:	0010ab81 	jmpi	40010ab8 <_fputs_r>

40010b6c <__sfvwrite_r>:
40010b6c:	30800217 	ldw	r2,8(r6)
40010b70:	10006726 	beq	r2,zero,40010d10 <__sfvwrite_r+0x1a4>
40010b74:	28c0030b 	ldhu	r3,12(r5)
40010b78:	defff404 	addi	sp,sp,-48
40010b7c:	dd400715 	stw	r21,28(sp)
40010b80:	dd000615 	stw	r20,24(sp)
40010b84:	dc000215 	stw	r16,8(sp)
40010b88:	dfc00b15 	stw	ra,44(sp)
40010b8c:	df000a15 	stw	fp,40(sp)
40010b90:	ddc00915 	stw	r23,36(sp)
40010b94:	dd800815 	stw	r22,32(sp)
40010b98:	dcc00515 	stw	r19,20(sp)
40010b9c:	dc800415 	stw	r18,16(sp)
40010ba0:	dc400315 	stw	r17,12(sp)
40010ba4:	1880020c 	andi	r2,r3,8
40010ba8:	2821883a 	mov	r16,r5
40010bac:	202b883a 	mov	r21,r4
40010bb0:	3029883a 	mov	r20,r6
40010bb4:	10002726 	beq	r2,zero,40010c54 <__sfvwrite_r+0xe8>
40010bb8:	28800417 	ldw	r2,16(r5)
40010bbc:	10002526 	beq	r2,zero,40010c54 <__sfvwrite_r+0xe8>
40010bc0:	1880008c 	andi	r2,r3,2
40010bc4:	a4400017 	ldw	r17,0(r20)
40010bc8:	10002a26 	beq	r2,zero,40010c74 <__sfvwrite_r+0x108>
40010bcc:	05a00034 	movhi	r22,32768
40010bd0:	0027883a 	mov	r19,zero
40010bd4:	0025883a 	mov	r18,zero
40010bd8:	b5bf0004 	addi	r22,r22,-1024
40010bdc:	980d883a 	mov	r6,r19
40010be0:	a809883a 	mov	r4,r21
40010be4:	90004626 	beq	r18,zero,40010d00 <__sfvwrite_r+0x194>
40010be8:	900f883a 	mov	r7,r18
40010bec:	b480022e 	bgeu	r22,r18,40010bf8 <__sfvwrite_r+0x8c>
40010bf0:	01e00034 	movhi	r7,32768
40010bf4:	39ff0004 	addi	r7,r7,-1024
40010bf8:	80800917 	ldw	r2,36(r16)
40010bfc:	81400717 	ldw	r5,28(r16)
40010c00:	103ee83a 	callr	r2
40010c04:	0080570e 	bge	zero,r2,40010d64 <__sfvwrite_r+0x1f8>
40010c08:	a0c00217 	ldw	r3,8(r20)
40010c0c:	98a7883a 	add	r19,r19,r2
40010c10:	90a5c83a 	sub	r18,r18,r2
40010c14:	1885c83a 	sub	r2,r3,r2
40010c18:	a0800215 	stw	r2,8(r20)
40010c1c:	103fef1e 	bne	r2,zero,40010bdc <__alt_data_end+0xc0010bdc>
40010c20:	0005883a 	mov	r2,zero
40010c24:	dfc00b17 	ldw	ra,44(sp)
40010c28:	df000a17 	ldw	fp,40(sp)
40010c2c:	ddc00917 	ldw	r23,36(sp)
40010c30:	dd800817 	ldw	r22,32(sp)
40010c34:	dd400717 	ldw	r21,28(sp)
40010c38:	dd000617 	ldw	r20,24(sp)
40010c3c:	dcc00517 	ldw	r19,20(sp)
40010c40:	dc800417 	ldw	r18,16(sp)
40010c44:	dc400317 	ldw	r17,12(sp)
40010c48:	dc000217 	ldw	r16,8(sp)
40010c4c:	dec00c04 	addi	sp,sp,48
40010c50:	f800283a 	ret
40010c54:	800b883a 	mov	r5,r16
40010c58:	a809883a 	mov	r4,r21
40010c5c:	000edbc0 	call	4000edbc <__swsetup_r>
40010c60:	1000eb1e 	bne	r2,zero,40011010 <__sfvwrite_r+0x4a4>
40010c64:	80c0030b 	ldhu	r3,12(r16)
40010c68:	a4400017 	ldw	r17,0(r20)
40010c6c:	1880008c 	andi	r2,r3,2
40010c70:	103fd61e 	bne	r2,zero,40010bcc <__alt_data_end+0xc0010bcc>
40010c74:	1880004c 	andi	r2,r3,1
40010c78:	10003f1e 	bne	r2,zero,40010d78 <__sfvwrite_r+0x20c>
40010c7c:	0039883a 	mov	fp,zero
40010c80:	0025883a 	mov	r18,zero
40010c84:	90001a26 	beq	r18,zero,40010cf0 <__sfvwrite_r+0x184>
40010c88:	1880800c 	andi	r2,r3,512
40010c8c:	84c00217 	ldw	r19,8(r16)
40010c90:	10002126 	beq	r2,zero,40010d18 <__sfvwrite_r+0x1ac>
40010c94:	982f883a 	mov	r23,r19
40010c98:	94c09336 	bltu	r18,r19,40010ee8 <__sfvwrite_r+0x37c>
40010c9c:	1881200c 	andi	r2,r3,1152
40010ca0:	10009e1e 	bne	r2,zero,40010f1c <__sfvwrite_r+0x3b0>
40010ca4:	81000017 	ldw	r4,0(r16)
40010ca8:	b80d883a 	mov	r6,r23
40010cac:	e00b883a 	mov	r5,fp
40010cb0:	001129c0 	call	4001129c <memmove>
40010cb4:	80c00217 	ldw	r3,8(r16)
40010cb8:	81000017 	ldw	r4,0(r16)
40010cbc:	9005883a 	mov	r2,r18
40010cc0:	1ce7c83a 	sub	r19,r3,r19
40010cc4:	25cf883a 	add	r7,r4,r23
40010cc8:	84c00215 	stw	r19,8(r16)
40010ccc:	81c00015 	stw	r7,0(r16)
40010cd0:	a0c00217 	ldw	r3,8(r20)
40010cd4:	e0b9883a 	add	fp,fp,r2
40010cd8:	90a5c83a 	sub	r18,r18,r2
40010cdc:	18a7c83a 	sub	r19,r3,r2
40010ce0:	a4c00215 	stw	r19,8(r20)
40010ce4:	983fce26 	beq	r19,zero,40010c20 <__alt_data_end+0xc0010c20>
40010ce8:	80c0030b 	ldhu	r3,12(r16)
40010cec:	903fe61e 	bne	r18,zero,40010c88 <__alt_data_end+0xc0010c88>
40010cf0:	8f000017 	ldw	fp,0(r17)
40010cf4:	8c800117 	ldw	r18,4(r17)
40010cf8:	8c400204 	addi	r17,r17,8
40010cfc:	003fe106 	br	40010c84 <__alt_data_end+0xc0010c84>
40010d00:	8cc00017 	ldw	r19,0(r17)
40010d04:	8c800117 	ldw	r18,4(r17)
40010d08:	8c400204 	addi	r17,r17,8
40010d0c:	003fb306 	br	40010bdc <__alt_data_end+0xc0010bdc>
40010d10:	0005883a 	mov	r2,zero
40010d14:	f800283a 	ret
40010d18:	81000017 	ldw	r4,0(r16)
40010d1c:	80800417 	ldw	r2,16(r16)
40010d20:	11005736 	bltu	r2,r4,40010e80 <__sfvwrite_r+0x314>
40010d24:	85c00517 	ldw	r23,20(r16)
40010d28:	95c05536 	bltu	r18,r23,40010e80 <__sfvwrite_r+0x314>
40010d2c:	00a00034 	movhi	r2,32768
40010d30:	10bfffc4 	addi	r2,r2,-1
40010d34:	9009883a 	mov	r4,r18
40010d38:	1480012e 	bgeu	r2,r18,40010d40 <__sfvwrite_r+0x1d4>
40010d3c:	1009883a 	mov	r4,r2
40010d40:	b80b883a 	mov	r5,r23
40010d44:	000797c0 	call	4000797c <__divsi3>
40010d48:	15cf383a 	mul	r7,r2,r23
40010d4c:	81400717 	ldw	r5,28(r16)
40010d50:	80800917 	ldw	r2,36(r16)
40010d54:	e00d883a 	mov	r6,fp
40010d58:	a809883a 	mov	r4,r21
40010d5c:	103ee83a 	callr	r2
40010d60:	00bfdb16 	blt	zero,r2,40010cd0 <__alt_data_end+0xc0010cd0>
40010d64:	8080030b 	ldhu	r2,12(r16)
40010d68:	10801014 	ori	r2,r2,64
40010d6c:	8080030d 	sth	r2,12(r16)
40010d70:	00bfffc4 	movi	r2,-1
40010d74:	003fab06 	br	40010c24 <__alt_data_end+0xc0010c24>
40010d78:	0027883a 	mov	r19,zero
40010d7c:	0011883a 	mov	r8,zero
40010d80:	0039883a 	mov	fp,zero
40010d84:	0025883a 	mov	r18,zero
40010d88:	90001f26 	beq	r18,zero,40010e08 <__sfvwrite_r+0x29c>
40010d8c:	40005a26 	beq	r8,zero,40010ef8 <__sfvwrite_r+0x38c>
40010d90:	982d883a 	mov	r22,r19
40010d94:	94c0012e 	bgeu	r18,r19,40010d9c <__sfvwrite_r+0x230>
40010d98:	902d883a 	mov	r22,r18
40010d9c:	81000017 	ldw	r4,0(r16)
40010da0:	80800417 	ldw	r2,16(r16)
40010da4:	b02f883a 	mov	r23,r22
40010da8:	81c00517 	ldw	r7,20(r16)
40010dac:	1100032e 	bgeu	r2,r4,40010dbc <__sfvwrite_r+0x250>
40010db0:	80c00217 	ldw	r3,8(r16)
40010db4:	38c7883a 	add	r3,r7,r3
40010db8:	1d801816 	blt	r3,r22,40010e1c <__sfvwrite_r+0x2b0>
40010dbc:	b1c03e16 	blt	r22,r7,40010eb8 <__sfvwrite_r+0x34c>
40010dc0:	80800917 	ldw	r2,36(r16)
40010dc4:	81400717 	ldw	r5,28(r16)
40010dc8:	e00d883a 	mov	r6,fp
40010dcc:	da000115 	stw	r8,4(sp)
40010dd0:	a809883a 	mov	r4,r21
40010dd4:	103ee83a 	callr	r2
40010dd8:	102f883a 	mov	r23,r2
40010ddc:	da000117 	ldw	r8,4(sp)
40010de0:	00bfe00e 	bge	zero,r2,40010d64 <__alt_data_end+0xc0010d64>
40010de4:	9de7c83a 	sub	r19,r19,r23
40010de8:	98001f26 	beq	r19,zero,40010e68 <__sfvwrite_r+0x2fc>
40010dec:	a0800217 	ldw	r2,8(r20)
40010df0:	e5f9883a 	add	fp,fp,r23
40010df4:	95e5c83a 	sub	r18,r18,r23
40010df8:	15efc83a 	sub	r23,r2,r23
40010dfc:	a5c00215 	stw	r23,8(r20)
40010e00:	b83f8726 	beq	r23,zero,40010c20 <__alt_data_end+0xc0010c20>
40010e04:	903fe11e 	bne	r18,zero,40010d8c <__alt_data_end+0xc0010d8c>
40010e08:	8f000017 	ldw	fp,0(r17)
40010e0c:	8c800117 	ldw	r18,4(r17)
40010e10:	0011883a 	mov	r8,zero
40010e14:	8c400204 	addi	r17,r17,8
40010e18:	003fdb06 	br	40010d88 <__alt_data_end+0xc0010d88>
40010e1c:	180d883a 	mov	r6,r3
40010e20:	e00b883a 	mov	r5,fp
40010e24:	da000115 	stw	r8,4(sp)
40010e28:	d8c00015 	stw	r3,0(sp)
40010e2c:	001129c0 	call	4001129c <memmove>
40010e30:	d8c00017 	ldw	r3,0(sp)
40010e34:	80800017 	ldw	r2,0(r16)
40010e38:	800b883a 	mov	r5,r16
40010e3c:	a809883a 	mov	r4,r21
40010e40:	10c5883a 	add	r2,r2,r3
40010e44:	80800015 	stw	r2,0(r16)
40010e48:	d8c00015 	stw	r3,0(sp)
40010e4c:	0009a780 	call	40009a78 <_fflush_r>
40010e50:	d8c00017 	ldw	r3,0(sp)
40010e54:	da000117 	ldw	r8,4(sp)
40010e58:	103fc21e 	bne	r2,zero,40010d64 <__alt_data_end+0xc0010d64>
40010e5c:	182f883a 	mov	r23,r3
40010e60:	9de7c83a 	sub	r19,r19,r23
40010e64:	983fe11e 	bne	r19,zero,40010dec <__alt_data_end+0xc0010dec>
40010e68:	800b883a 	mov	r5,r16
40010e6c:	a809883a 	mov	r4,r21
40010e70:	0009a780 	call	40009a78 <_fflush_r>
40010e74:	103fbb1e 	bne	r2,zero,40010d64 <__alt_data_end+0xc0010d64>
40010e78:	0011883a 	mov	r8,zero
40010e7c:	003fdb06 	br	40010dec <__alt_data_end+0xc0010dec>
40010e80:	94c0012e 	bgeu	r18,r19,40010e88 <__sfvwrite_r+0x31c>
40010e84:	9027883a 	mov	r19,r18
40010e88:	980d883a 	mov	r6,r19
40010e8c:	e00b883a 	mov	r5,fp
40010e90:	001129c0 	call	4001129c <memmove>
40010e94:	80800217 	ldw	r2,8(r16)
40010e98:	80c00017 	ldw	r3,0(r16)
40010e9c:	14c5c83a 	sub	r2,r2,r19
40010ea0:	1cc7883a 	add	r3,r3,r19
40010ea4:	80800215 	stw	r2,8(r16)
40010ea8:	80c00015 	stw	r3,0(r16)
40010eac:	10004326 	beq	r2,zero,40010fbc <__sfvwrite_r+0x450>
40010eb0:	9805883a 	mov	r2,r19
40010eb4:	003f8606 	br	40010cd0 <__alt_data_end+0xc0010cd0>
40010eb8:	b00d883a 	mov	r6,r22
40010ebc:	e00b883a 	mov	r5,fp
40010ec0:	da000115 	stw	r8,4(sp)
40010ec4:	001129c0 	call	4001129c <memmove>
40010ec8:	80800217 	ldw	r2,8(r16)
40010ecc:	80c00017 	ldw	r3,0(r16)
40010ed0:	da000117 	ldw	r8,4(sp)
40010ed4:	1585c83a 	sub	r2,r2,r22
40010ed8:	1dad883a 	add	r22,r3,r22
40010edc:	80800215 	stw	r2,8(r16)
40010ee0:	85800015 	stw	r22,0(r16)
40010ee4:	003fbf06 	br	40010de4 <__alt_data_end+0xc0010de4>
40010ee8:	81000017 	ldw	r4,0(r16)
40010eec:	9027883a 	mov	r19,r18
40010ef0:	902f883a 	mov	r23,r18
40010ef4:	003f6c06 	br	40010ca8 <__alt_data_end+0xc0010ca8>
40010ef8:	900d883a 	mov	r6,r18
40010efc:	01400284 	movi	r5,10
40010f00:	e009883a 	mov	r4,fp
40010f04:	00111b80 	call	400111b8 <memchr>
40010f08:	10003e26 	beq	r2,zero,40011004 <__sfvwrite_r+0x498>
40010f0c:	10800044 	addi	r2,r2,1
40010f10:	1727c83a 	sub	r19,r2,fp
40010f14:	02000044 	movi	r8,1
40010f18:	003f9d06 	br	40010d90 <__alt_data_end+0xc0010d90>
40010f1c:	80800517 	ldw	r2,20(r16)
40010f20:	81400417 	ldw	r5,16(r16)
40010f24:	81c00017 	ldw	r7,0(r16)
40010f28:	10a7883a 	add	r19,r2,r2
40010f2c:	9885883a 	add	r2,r19,r2
40010f30:	1026d7fa 	srli	r19,r2,31
40010f34:	396dc83a 	sub	r22,r7,r5
40010f38:	b1000044 	addi	r4,r22,1
40010f3c:	9885883a 	add	r2,r19,r2
40010f40:	1027d07a 	srai	r19,r2,1
40010f44:	2485883a 	add	r2,r4,r18
40010f48:	980d883a 	mov	r6,r19
40010f4c:	9880022e 	bgeu	r19,r2,40010f58 <__sfvwrite_r+0x3ec>
40010f50:	1027883a 	mov	r19,r2
40010f54:	100d883a 	mov	r6,r2
40010f58:	18c1000c 	andi	r3,r3,1024
40010f5c:	18001c26 	beq	r3,zero,40010fd0 <__sfvwrite_r+0x464>
40010f60:	300b883a 	mov	r5,r6
40010f64:	a809883a 	mov	r4,r21
40010f68:	000b0f00 	call	4000b0f0 <_malloc_r>
40010f6c:	102f883a 	mov	r23,r2
40010f70:	10002926 	beq	r2,zero,40011018 <__sfvwrite_r+0x4ac>
40010f74:	81400417 	ldw	r5,16(r16)
40010f78:	b00d883a 	mov	r6,r22
40010f7c:	1009883a 	mov	r4,r2
40010f80:	000b8fc0 	call	4000b8fc <memcpy>
40010f84:	8080030b 	ldhu	r2,12(r16)
40010f88:	00fedfc4 	movi	r3,-1153
40010f8c:	10c4703a 	and	r2,r2,r3
40010f90:	10802014 	ori	r2,r2,128
40010f94:	8080030d 	sth	r2,12(r16)
40010f98:	bd89883a 	add	r4,r23,r22
40010f9c:	9d8fc83a 	sub	r7,r19,r22
40010fa0:	85c00415 	stw	r23,16(r16)
40010fa4:	84c00515 	stw	r19,20(r16)
40010fa8:	81000015 	stw	r4,0(r16)
40010fac:	9027883a 	mov	r19,r18
40010fb0:	81c00215 	stw	r7,8(r16)
40010fb4:	902f883a 	mov	r23,r18
40010fb8:	003f3b06 	br	40010ca8 <__alt_data_end+0xc0010ca8>
40010fbc:	800b883a 	mov	r5,r16
40010fc0:	a809883a 	mov	r4,r21
40010fc4:	0009a780 	call	40009a78 <_fflush_r>
40010fc8:	103fb926 	beq	r2,zero,40010eb0 <__alt_data_end+0xc0010eb0>
40010fcc:	003f6506 	br	40010d64 <__alt_data_end+0xc0010d64>
40010fd0:	a809883a 	mov	r4,r21
40010fd4:	00125bc0 	call	400125bc <_realloc_r>
40010fd8:	102f883a 	mov	r23,r2
40010fdc:	103fee1e 	bne	r2,zero,40010f98 <__alt_data_end+0xc0010f98>
40010fe0:	81400417 	ldw	r5,16(r16)
40010fe4:	a809883a 	mov	r4,r21
40010fe8:	000a3800 	call	4000a380 <_free_r>
40010fec:	8080030b 	ldhu	r2,12(r16)
40010ff0:	00ffdfc4 	movi	r3,-129
40010ff4:	1884703a 	and	r2,r3,r2
40010ff8:	00c00304 	movi	r3,12
40010ffc:	a8c00015 	stw	r3,0(r21)
40011000:	003f5906 	br	40010d68 <__alt_data_end+0xc0010d68>
40011004:	94c00044 	addi	r19,r18,1
40011008:	02000044 	movi	r8,1
4001100c:	003f6006 	br	40010d90 <__alt_data_end+0xc0010d90>
40011010:	00bfffc4 	movi	r2,-1
40011014:	003f0306 	br	40010c24 <__alt_data_end+0xc0010c24>
40011018:	00800304 	movi	r2,12
4001101c:	a8800015 	stw	r2,0(r21)
40011020:	8080030b 	ldhu	r2,12(r16)
40011024:	003f5006 	br	40010d68 <__alt_data_end+0xc0010d68>

40011028 <_isatty_r>:
40011028:	defffd04 	addi	sp,sp,-12
4001102c:	dc000015 	stw	r16,0(sp)
40011030:	041000b4 	movhi	r16,16386
40011034:	dc400115 	stw	r17,4(sp)
40011038:	841a9404 	addi	r16,r16,27216
4001103c:	2023883a 	mov	r17,r4
40011040:	2809883a 	mov	r4,r5
40011044:	dfc00215 	stw	ra,8(sp)
40011048:	80000015 	stw	zero,0(r16)
4001104c:	0015f540 	call	40015f54 <isatty>
40011050:	00ffffc4 	movi	r3,-1
40011054:	10c00526 	beq	r2,r3,4001106c <_isatty_r+0x44>
40011058:	dfc00217 	ldw	ra,8(sp)
4001105c:	dc400117 	ldw	r17,4(sp)
40011060:	dc000017 	ldw	r16,0(sp)
40011064:	dec00304 	addi	sp,sp,12
40011068:	f800283a 	ret
4001106c:	80c00017 	ldw	r3,0(r16)
40011070:	183ff926 	beq	r3,zero,40011058 <__alt_data_end+0xc0011058>
40011074:	88c00015 	stw	r3,0(r17)
40011078:	003ff706 	br	40011058 <__alt_data_end+0xc0011058>

4001107c <_setlocale_r>:
4001107c:	30001b26 	beq	r6,zero,400110ec <_setlocale_r+0x70>
40011080:	015000b4 	movhi	r5,16386
40011084:	defffe04 	addi	sp,sp,-8
40011088:	297b3f04 	addi	r5,r5,-4868
4001108c:	3009883a 	mov	r4,r6
40011090:	dc000015 	stw	r16,0(sp)
40011094:	dfc00115 	stw	ra,4(sp)
40011098:	3021883a 	mov	r16,r6
4001109c:	0012b940 	call	40012b94 <strcmp>
400110a0:	1000061e 	bne	r2,zero,400110bc <_setlocale_r+0x40>
400110a4:	009000b4 	movhi	r2,16386
400110a8:	10b89404 	addi	r2,r2,-7600
400110ac:	dfc00117 	ldw	ra,4(sp)
400110b0:	dc000017 	ldw	r16,0(sp)
400110b4:	dec00204 	addi	sp,sp,8
400110b8:	f800283a 	ret
400110bc:	015000b4 	movhi	r5,16386
400110c0:	29789404 	addi	r5,r5,-7600
400110c4:	8009883a 	mov	r4,r16
400110c8:	0012b940 	call	40012b94 <strcmp>
400110cc:	103ff526 	beq	r2,zero,400110a4 <__alt_data_end+0xc00110a4>
400110d0:	015000b4 	movhi	r5,16386
400110d4:	29759d04 	addi	r5,r5,-10636
400110d8:	8009883a 	mov	r4,r16
400110dc:	0012b940 	call	40012b94 <strcmp>
400110e0:	103ff026 	beq	r2,zero,400110a4 <__alt_data_end+0xc00110a4>
400110e4:	0005883a 	mov	r2,zero
400110e8:	003ff006 	br	400110ac <__alt_data_end+0xc00110ac>
400110ec:	009000b4 	movhi	r2,16386
400110f0:	10b89404 	addi	r2,r2,-7600
400110f4:	f800283a 	ret

400110f8 <__locale_charset>:
400110f8:	009000b4 	movhi	r2,16386
400110fc:	10864804 	addi	r2,r2,6432
40011100:	f800283a 	ret

40011104 <__locale_mb_cur_max>:
40011104:	009000b4 	movhi	r2,16386
40011108:	108af904 	addi	r2,r2,11236
4001110c:	10800017 	ldw	r2,0(r2)
40011110:	f800283a 	ret

40011114 <__locale_msgcharset>:
40011114:	009000b4 	movhi	r2,16386
40011118:	10864004 	addi	r2,r2,6400
4001111c:	f800283a 	ret

40011120 <__locale_cjk_lang>:
40011120:	0005883a 	mov	r2,zero
40011124:	f800283a 	ret

40011128 <_localeconv_r>:
40011128:	009000b4 	movhi	r2,16386
4001112c:	10865004 	addi	r2,r2,6464
40011130:	f800283a 	ret

40011134 <setlocale>:
40011134:	009000b4 	movhi	r2,16386
40011138:	108af604 	addi	r2,r2,11224
4001113c:	280d883a 	mov	r6,r5
40011140:	200b883a 	mov	r5,r4
40011144:	11000017 	ldw	r4,0(r2)
40011148:	001107c1 	jmpi	4001107c <_setlocale_r>

4001114c <localeconv>:
4001114c:	009000b4 	movhi	r2,16386
40011150:	10865004 	addi	r2,r2,6464
40011154:	f800283a 	ret

40011158 <_lseek_r>:
40011158:	defffd04 	addi	sp,sp,-12
4001115c:	2805883a 	mov	r2,r5
40011160:	dc000015 	stw	r16,0(sp)
40011164:	041000b4 	movhi	r16,16386
40011168:	dc400115 	stw	r17,4(sp)
4001116c:	300b883a 	mov	r5,r6
40011170:	841a9404 	addi	r16,r16,27216
40011174:	2023883a 	mov	r17,r4
40011178:	380d883a 	mov	r6,r7
4001117c:	1009883a 	mov	r4,r2
40011180:	dfc00215 	stw	ra,8(sp)
40011184:	80000015 	stw	zero,0(r16)
40011188:	00160a40 	call	400160a4 <lseek>
4001118c:	00ffffc4 	movi	r3,-1
40011190:	10c00526 	beq	r2,r3,400111a8 <_lseek_r+0x50>
40011194:	dfc00217 	ldw	ra,8(sp)
40011198:	dc400117 	ldw	r17,4(sp)
4001119c:	dc000017 	ldw	r16,0(sp)
400111a0:	dec00304 	addi	sp,sp,12
400111a4:	f800283a 	ret
400111a8:	80c00017 	ldw	r3,0(r16)
400111ac:	183ff926 	beq	r3,zero,40011194 <__alt_data_end+0xc0011194>
400111b0:	88c00015 	stw	r3,0(r17)
400111b4:	003ff706 	br	40011194 <__alt_data_end+0xc0011194>

400111b8 <memchr>:
400111b8:	208000cc 	andi	r2,r4,3
400111bc:	280f883a 	mov	r7,r5
400111c0:	10003426 	beq	r2,zero,40011294 <memchr+0xdc>
400111c4:	30bfffc4 	addi	r2,r6,-1
400111c8:	30001a26 	beq	r6,zero,40011234 <memchr+0x7c>
400111cc:	20c00003 	ldbu	r3,0(r4)
400111d0:	29803fcc 	andi	r6,r5,255
400111d4:	30c0051e 	bne	r6,r3,400111ec <memchr+0x34>
400111d8:	00001806 	br	4001123c <memchr+0x84>
400111dc:	10001526 	beq	r2,zero,40011234 <memchr+0x7c>
400111e0:	20c00003 	ldbu	r3,0(r4)
400111e4:	10bfffc4 	addi	r2,r2,-1
400111e8:	30c01426 	beq	r6,r3,4001123c <memchr+0x84>
400111ec:	21000044 	addi	r4,r4,1
400111f0:	20c000cc 	andi	r3,r4,3
400111f4:	183ff91e 	bne	r3,zero,400111dc <__alt_data_end+0xc00111dc>
400111f8:	020000c4 	movi	r8,3
400111fc:	40801136 	bltu	r8,r2,40011244 <memchr+0x8c>
40011200:	10000c26 	beq	r2,zero,40011234 <memchr+0x7c>
40011204:	20c00003 	ldbu	r3,0(r4)
40011208:	29403fcc 	andi	r5,r5,255
4001120c:	28c00b26 	beq	r5,r3,4001123c <memchr+0x84>
40011210:	20c00044 	addi	r3,r4,1
40011214:	39803fcc 	andi	r6,r7,255
40011218:	2089883a 	add	r4,r4,r2
4001121c:	00000306 	br	4001122c <memchr+0x74>
40011220:	18c00044 	addi	r3,r3,1
40011224:	197fffc3 	ldbu	r5,-1(r3)
40011228:	31400526 	beq	r6,r5,40011240 <memchr+0x88>
4001122c:	1805883a 	mov	r2,r3
40011230:	20fffb1e 	bne	r4,r3,40011220 <__alt_data_end+0xc0011220>
40011234:	0005883a 	mov	r2,zero
40011238:	f800283a 	ret
4001123c:	2005883a 	mov	r2,r4
40011240:	f800283a 	ret
40011244:	28c03fcc 	andi	r3,r5,255
40011248:	1812923a 	slli	r9,r3,8
4001124c:	02ffbff4 	movhi	r11,65279
40011250:	02a02074 	movhi	r10,32897
40011254:	48d2b03a 	or	r9,r9,r3
40011258:	4806943a 	slli	r3,r9,16
4001125c:	5affbfc4 	addi	r11,r11,-257
40011260:	52a02004 	addi	r10,r10,-32640
40011264:	48d2b03a 	or	r9,r9,r3
40011268:	20c00017 	ldw	r3,0(r4)
4001126c:	48c6f03a 	xor	r3,r9,r3
40011270:	1acd883a 	add	r6,r3,r11
40011274:	00c6303a 	nor	r3,zero,r3
40011278:	30c6703a 	and	r3,r6,r3
4001127c:	1a86703a 	and	r3,r3,r10
40011280:	183fe01e 	bne	r3,zero,40011204 <__alt_data_end+0xc0011204>
40011284:	10bfff04 	addi	r2,r2,-4
40011288:	21000104 	addi	r4,r4,4
4001128c:	40bff636 	bltu	r8,r2,40011268 <__alt_data_end+0xc0011268>
40011290:	003fdb06 	br	40011200 <__alt_data_end+0xc0011200>
40011294:	3005883a 	mov	r2,r6
40011298:	003fd706 	br	400111f8 <__alt_data_end+0xc00111f8>

4001129c <memmove>:
4001129c:	2005883a 	mov	r2,r4
400112a0:	29000b2e 	bgeu	r5,r4,400112d0 <memmove+0x34>
400112a4:	298f883a 	add	r7,r5,r6
400112a8:	21c0092e 	bgeu	r4,r7,400112d0 <memmove+0x34>
400112ac:	2187883a 	add	r3,r4,r6
400112b0:	198bc83a 	sub	r5,r3,r6
400112b4:	30004826 	beq	r6,zero,400113d8 <memmove+0x13c>
400112b8:	39ffffc4 	addi	r7,r7,-1
400112bc:	39000003 	ldbu	r4,0(r7)
400112c0:	18ffffc4 	addi	r3,r3,-1
400112c4:	19000005 	stb	r4,0(r3)
400112c8:	28fffb1e 	bne	r5,r3,400112b8 <__alt_data_end+0xc00112b8>
400112cc:	f800283a 	ret
400112d0:	00c003c4 	movi	r3,15
400112d4:	1980412e 	bgeu	r3,r6,400113dc <memmove+0x140>
400112d8:	2886b03a 	or	r3,r5,r2
400112dc:	18c000cc 	andi	r3,r3,3
400112e0:	1800401e 	bne	r3,zero,400113e4 <memmove+0x148>
400112e4:	33fffc04 	addi	r15,r6,-16
400112e8:	781ed13a 	srli	r15,r15,4
400112ec:	28c00104 	addi	r3,r5,4
400112f0:	13400104 	addi	r13,r2,4
400112f4:	781c913a 	slli	r14,r15,4
400112f8:	2b000204 	addi	r12,r5,8
400112fc:	12c00204 	addi	r11,r2,8
40011300:	73800504 	addi	r14,r14,20
40011304:	2a800304 	addi	r10,r5,12
40011308:	12400304 	addi	r9,r2,12
4001130c:	2b9d883a 	add	r14,r5,r14
40011310:	2811883a 	mov	r8,r5
40011314:	100f883a 	mov	r7,r2
40011318:	41000017 	ldw	r4,0(r8)
4001131c:	39c00404 	addi	r7,r7,16
40011320:	18c00404 	addi	r3,r3,16
40011324:	393ffc15 	stw	r4,-16(r7)
40011328:	193ffc17 	ldw	r4,-16(r3)
4001132c:	6b400404 	addi	r13,r13,16
40011330:	5ac00404 	addi	r11,r11,16
40011334:	693ffc15 	stw	r4,-16(r13)
40011338:	61000017 	ldw	r4,0(r12)
4001133c:	4a400404 	addi	r9,r9,16
40011340:	42000404 	addi	r8,r8,16
40011344:	593ffc15 	stw	r4,-16(r11)
40011348:	51000017 	ldw	r4,0(r10)
4001134c:	63000404 	addi	r12,r12,16
40011350:	52800404 	addi	r10,r10,16
40011354:	493ffc15 	stw	r4,-16(r9)
40011358:	1bbfef1e 	bne	r3,r14,40011318 <__alt_data_end+0xc0011318>
4001135c:	79000044 	addi	r4,r15,1
40011360:	2008913a 	slli	r4,r4,4
40011364:	328003cc 	andi	r10,r6,15
40011368:	02c000c4 	movi	r11,3
4001136c:	1107883a 	add	r3,r2,r4
40011370:	290b883a 	add	r5,r5,r4
40011374:	5a801e2e 	bgeu	r11,r10,400113f0 <memmove+0x154>
40011378:	1813883a 	mov	r9,r3
4001137c:	2811883a 	mov	r8,r5
40011380:	500f883a 	mov	r7,r10
40011384:	41000017 	ldw	r4,0(r8)
40011388:	4a400104 	addi	r9,r9,4
4001138c:	39ffff04 	addi	r7,r7,-4
40011390:	493fff15 	stw	r4,-4(r9)
40011394:	42000104 	addi	r8,r8,4
40011398:	59fffa36 	bltu	r11,r7,40011384 <__alt_data_end+0xc0011384>
4001139c:	513fff04 	addi	r4,r10,-4
400113a0:	2008d0ba 	srli	r4,r4,2
400113a4:	318000cc 	andi	r6,r6,3
400113a8:	21000044 	addi	r4,r4,1
400113ac:	2109883a 	add	r4,r4,r4
400113b0:	2109883a 	add	r4,r4,r4
400113b4:	1907883a 	add	r3,r3,r4
400113b8:	290b883a 	add	r5,r5,r4
400113bc:	30000b26 	beq	r6,zero,400113ec <memmove+0x150>
400113c0:	198d883a 	add	r6,r3,r6
400113c4:	29c00003 	ldbu	r7,0(r5)
400113c8:	18c00044 	addi	r3,r3,1
400113cc:	29400044 	addi	r5,r5,1
400113d0:	19ffffc5 	stb	r7,-1(r3)
400113d4:	19bffb1e 	bne	r3,r6,400113c4 <__alt_data_end+0xc00113c4>
400113d8:	f800283a 	ret
400113dc:	1007883a 	mov	r3,r2
400113e0:	003ff606 	br	400113bc <__alt_data_end+0xc00113bc>
400113e4:	1007883a 	mov	r3,r2
400113e8:	003ff506 	br	400113c0 <__alt_data_end+0xc00113c0>
400113ec:	f800283a 	ret
400113f0:	500d883a 	mov	r6,r10
400113f4:	003ff106 	br	400113bc <__alt_data_end+0xc00113bc>

400113f8 <_Balloc>:
400113f8:	20801317 	ldw	r2,76(r4)
400113fc:	defffc04 	addi	sp,sp,-16
40011400:	dc400115 	stw	r17,4(sp)
40011404:	dc000015 	stw	r16,0(sp)
40011408:	dfc00315 	stw	ra,12(sp)
4001140c:	dc800215 	stw	r18,8(sp)
40011410:	2023883a 	mov	r17,r4
40011414:	2821883a 	mov	r16,r5
40011418:	10000f26 	beq	r2,zero,40011458 <_Balloc+0x60>
4001141c:	8407883a 	add	r3,r16,r16
40011420:	18c7883a 	add	r3,r3,r3
40011424:	10c7883a 	add	r3,r2,r3
40011428:	18800017 	ldw	r2,0(r3)
4001142c:	10001126 	beq	r2,zero,40011474 <_Balloc+0x7c>
40011430:	11000017 	ldw	r4,0(r2)
40011434:	19000015 	stw	r4,0(r3)
40011438:	10000415 	stw	zero,16(r2)
4001143c:	10000315 	stw	zero,12(r2)
40011440:	dfc00317 	ldw	ra,12(sp)
40011444:	dc800217 	ldw	r18,8(sp)
40011448:	dc400117 	ldw	r17,4(sp)
4001144c:	dc000017 	ldw	r16,0(sp)
40011450:	dec00404 	addi	sp,sp,16
40011454:	f800283a 	ret
40011458:	01800844 	movi	r6,33
4001145c:	01400104 	movi	r5,4
40011460:	000965c0 	call	4000965c <_calloc_r>
40011464:	88801315 	stw	r2,76(r17)
40011468:	103fec1e 	bne	r2,zero,4001141c <__alt_data_end+0xc001141c>
4001146c:	0005883a 	mov	r2,zero
40011470:	003ff306 	br	40011440 <__alt_data_end+0xc0011440>
40011474:	01400044 	movi	r5,1
40011478:	2c24983a 	sll	r18,r5,r16
4001147c:	8809883a 	mov	r4,r17
40011480:	91800144 	addi	r6,r18,5
40011484:	318d883a 	add	r6,r6,r6
40011488:	318d883a 	add	r6,r6,r6
4001148c:	000965c0 	call	4000965c <_calloc_r>
40011490:	103ff626 	beq	r2,zero,4001146c <__alt_data_end+0xc001146c>
40011494:	14000115 	stw	r16,4(r2)
40011498:	14800215 	stw	r18,8(r2)
4001149c:	003fe606 	br	40011438 <__alt_data_end+0xc0011438>

400114a0 <_Bfree>:
400114a0:	28000826 	beq	r5,zero,400114c4 <_Bfree+0x24>
400114a4:	28c00117 	ldw	r3,4(r5)
400114a8:	20801317 	ldw	r2,76(r4)
400114ac:	18c7883a 	add	r3,r3,r3
400114b0:	18c7883a 	add	r3,r3,r3
400114b4:	10c5883a 	add	r2,r2,r3
400114b8:	10c00017 	ldw	r3,0(r2)
400114bc:	28c00015 	stw	r3,0(r5)
400114c0:	11400015 	stw	r5,0(r2)
400114c4:	f800283a 	ret

400114c8 <__multadd>:
400114c8:	defffa04 	addi	sp,sp,-24
400114cc:	dc800315 	stw	r18,12(sp)
400114d0:	dc400215 	stw	r17,8(sp)
400114d4:	dc000115 	stw	r16,4(sp)
400114d8:	2823883a 	mov	r17,r5
400114dc:	2c000417 	ldw	r16,16(r5)
400114e0:	dfc00515 	stw	ra,20(sp)
400114e4:	dcc00415 	stw	r19,16(sp)
400114e8:	2025883a 	mov	r18,r4
400114ec:	29400504 	addi	r5,r5,20
400114f0:	0011883a 	mov	r8,zero
400114f4:	28c00017 	ldw	r3,0(r5)
400114f8:	29400104 	addi	r5,r5,4
400114fc:	42000044 	addi	r8,r8,1
40011500:	18bfffcc 	andi	r2,r3,65535
40011504:	1185383a 	mul	r2,r2,r6
40011508:	1806d43a 	srli	r3,r3,16
4001150c:	11cf883a 	add	r7,r2,r7
40011510:	3808d43a 	srli	r4,r7,16
40011514:	1987383a 	mul	r3,r3,r6
40011518:	38bfffcc 	andi	r2,r7,65535
4001151c:	1907883a 	add	r3,r3,r4
40011520:	1808943a 	slli	r4,r3,16
40011524:	180ed43a 	srli	r7,r3,16
40011528:	2085883a 	add	r2,r4,r2
4001152c:	28bfff15 	stw	r2,-4(r5)
40011530:	443ff016 	blt	r8,r16,400114f4 <__alt_data_end+0xc00114f4>
40011534:	38000926 	beq	r7,zero,4001155c <__multadd+0x94>
40011538:	88800217 	ldw	r2,8(r17)
4001153c:	80800f0e 	bge	r16,r2,4001157c <__multadd+0xb4>
40011540:	80800144 	addi	r2,r16,5
40011544:	1085883a 	add	r2,r2,r2
40011548:	1085883a 	add	r2,r2,r2
4001154c:	8885883a 	add	r2,r17,r2
40011550:	11c00015 	stw	r7,0(r2)
40011554:	84000044 	addi	r16,r16,1
40011558:	8c000415 	stw	r16,16(r17)
4001155c:	8805883a 	mov	r2,r17
40011560:	dfc00517 	ldw	ra,20(sp)
40011564:	dcc00417 	ldw	r19,16(sp)
40011568:	dc800317 	ldw	r18,12(sp)
4001156c:	dc400217 	ldw	r17,8(sp)
40011570:	dc000117 	ldw	r16,4(sp)
40011574:	dec00604 	addi	sp,sp,24
40011578:	f800283a 	ret
4001157c:	89400117 	ldw	r5,4(r17)
40011580:	9009883a 	mov	r4,r18
40011584:	d9c00015 	stw	r7,0(sp)
40011588:	29400044 	addi	r5,r5,1
4001158c:	00113f80 	call	400113f8 <_Balloc>
40011590:	89800417 	ldw	r6,16(r17)
40011594:	89400304 	addi	r5,r17,12
40011598:	11000304 	addi	r4,r2,12
4001159c:	31800084 	addi	r6,r6,2
400115a0:	318d883a 	add	r6,r6,r6
400115a4:	318d883a 	add	r6,r6,r6
400115a8:	1027883a 	mov	r19,r2
400115ac:	000b8fc0 	call	4000b8fc <memcpy>
400115b0:	d9c00017 	ldw	r7,0(sp)
400115b4:	88000a26 	beq	r17,zero,400115e0 <__multadd+0x118>
400115b8:	88c00117 	ldw	r3,4(r17)
400115bc:	90801317 	ldw	r2,76(r18)
400115c0:	18c7883a 	add	r3,r3,r3
400115c4:	18c7883a 	add	r3,r3,r3
400115c8:	10c5883a 	add	r2,r2,r3
400115cc:	10c00017 	ldw	r3,0(r2)
400115d0:	88c00015 	stw	r3,0(r17)
400115d4:	14400015 	stw	r17,0(r2)
400115d8:	9823883a 	mov	r17,r19
400115dc:	003fd806 	br	40011540 <__alt_data_end+0xc0011540>
400115e0:	9823883a 	mov	r17,r19
400115e4:	003fd606 	br	40011540 <__alt_data_end+0xc0011540>

400115e8 <__s2b>:
400115e8:	defff904 	addi	sp,sp,-28
400115ec:	dc400115 	stw	r17,4(sp)
400115f0:	dc000015 	stw	r16,0(sp)
400115f4:	2023883a 	mov	r17,r4
400115f8:	2821883a 	mov	r16,r5
400115fc:	39000204 	addi	r4,r7,8
40011600:	01400244 	movi	r5,9
40011604:	dcc00315 	stw	r19,12(sp)
40011608:	dc800215 	stw	r18,8(sp)
4001160c:	dfc00615 	stw	ra,24(sp)
40011610:	dd400515 	stw	r21,20(sp)
40011614:	dd000415 	stw	r20,16(sp)
40011618:	3825883a 	mov	r18,r7
4001161c:	3027883a 	mov	r19,r6
40011620:	000797c0 	call	4000797c <__divsi3>
40011624:	00c00044 	movi	r3,1
40011628:	000b883a 	mov	r5,zero
4001162c:	1880030e 	bge	r3,r2,4001163c <__s2b+0x54>
40011630:	18c7883a 	add	r3,r3,r3
40011634:	29400044 	addi	r5,r5,1
40011638:	18bffd16 	blt	r3,r2,40011630 <__alt_data_end+0xc0011630>
4001163c:	8809883a 	mov	r4,r17
40011640:	00113f80 	call	400113f8 <_Balloc>
40011644:	d8c00717 	ldw	r3,28(sp)
40011648:	10c00515 	stw	r3,20(r2)
4001164c:	00c00044 	movi	r3,1
40011650:	10c00415 	stw	r3,16(r2)
40011654:	00c00244 	movi	r3,9
40011658:	1cc0210e 	bge	r3,r19,400116e0 <__s2b+0xf8>
4001165c:	80eb883a 	add	r21,r16,r3
40011660:	a829883a 	mov	r20,r21
40011664:	84e1883a 	add	r16,r16,r19
40011668:	a1c00007 	ldb	r7,0(r20)
4001166c:	01800284 	movi	r6,10
40011670:	a5000044 	addi	r20,r20,1
40011674:	100b883a 	mov	r5,r2
40011678:	39fff404 	addi	r7,r7,-48
4001167c:	8809883a 	mov	r4,r17
40011680:	00114c80 	call	400114c8 <__multadd>
40011684:	a43ff81e 	bne	r20,r16,40011668 <__alt_data_end+0xc0011668>
40011688:	ace1883a 	add	r16,r21,r19
4001168c:	843ffe04 	addi	r16,r16,-8
40011690:	9c800a0e 	bge	r19,r18,400116bc <__s2b+0xd4>
40011694:	94e5c83a 	sub	r18,r18,r19
40011698:	84a5883a 	add	r18,r16,r18
4001169c:	81c00007 	ldb	r7,0(r16)
400116a0:	01800284 	movi	r6,10
400116a4:	84000044 	addi	r16,r16,1
400116a8:	100b883a 	mov	r5,r2
400116ac:	39fff404 	addi	r7,r7,-48
400116b0:	8809883a 	mov	r4,r17
400116b4:	00114c80 	call	400114c8 <__multadd>
400116b8:	84bff81e 	bne	r16,r18,4001169c <__alt_data_end+0xc001169c>
400116bc:	dfc00617 	ldw	ra,24(sp)
400116c0:	dd400517 	ldw	r21,20(sp)
400116c4:	dd000417 	ldw	r20,16(sp)
400116c8:	dcc00317 	ldw	r19,12(sp)
400116cc:	dc800217 	ldw	r18,8(sp)
400116d0:	dc400117 	ldw	r17,4(sp)
400116d4:	dc000017 	ldw	r16,0(sp)
400116d8:	dec00704 	addi	sp,sp,28
400116dc:	f800283a 	ret
400116e0:	84000284 	addi	r16,r16,10
400116e4:	1827883a 	mov	r19,r3
400116e8:	003fe906 	br	40011690 <__alt_data_end+0xc0011690>

400116ec <__hi0bits>:
400116ec:	20bfffec 	andhi	r2,r4,65535
400116f0:	1000141e 	bne	r2,zero,40011744 <__hi0bits+0x58>
400116f4:	2008943a 	slli	r4,r4,16
400116f8:	00800404 	movi	r2,16
400116fc:	20ffc02c 	andhi	r3,r4,65280
40011700:	1800021e 	bne	r3,zero,4001170c <__hi0bits+0x20>
40011704:	2008923a 	slli	r4,r4,8
40011708:	10800204 	addi	r2,r2,8
4001170c:	20fc002c 	andhi	r3,r4,61440
40011710:	1800021e 	bne	r3,zero,4001171c <__hi0bits+0x30>
40011714:	2008913a 	slli	r4,r4,4
40011718:	10800104 	addi	r2,r2,4
4001171c:	20f0002c 	andhi	r3,r4,49152
40011720:	1800031e 	bne	r3,zero,40011730 <__hi0bits+0x44>
40011724:	2109883a 	add	r4,r4,r4
40011728:	10800084 	addi	r2,r2,2
4001172c:	2109883a 	add	r4,r4,r4
40011730:	20000316 	blt	r4,zero,40011740 <__hi0bits+0x54>
40011734:	2110002c 	andhi	r4,r4,16384
40011738:	2000041e 	bne	r4,zero,4001174c <__hi0bits+0x60>
4001173c:	00800804 	movi	r2,32
40011740:	f800283a 	ret
40011744:	0005883a 	mov	r2,zero
40011748:	003fec06 	br	400116fc <__alt_data_end+0xc00116fc>
4001174c:	10800044 	addi	r2,r2,1
40011750:	f800283a 	ret

40011754 <__lo0bits>:
40011754:	20c00017 	ldw	r3,0(r4)
40011758:	188001cc 	andi	r2,r3,7
4001175c:	10000826 	beq	r2,zero,40011780 <__lo0bits+0x2c>
40011760:	1880004c 	andi	r2,r3,1
40011764:	1000211e 	bne	r2,zero,400117ec <__lo0bits+0x98>
40011768:	1880008c 	andi	r2,r3,2
4001176c:	1000211e 	bne	r2,zero,400117f4 <__lo0bits+0xa0>
40011770:	1806d0ba 	srli	r3,r3,2
40011774:	00800084 	movi	r2,2
40011778:	20c00015 	stw	r3,0(r4)
4001177c:	f800283a 	ret
40011780:	18bfffcc 	andi	r2,r3,65535
40011784:	10001326 	beq	r2,zero,400117d4 <__lo0bits+0x80>
40011788:	0005883a 	mov	r2,zero
4001178c:	19403fcc 	andi	r5,r3,255
40011790:	2800021e 	bne	r5,zero,4001179c <__lo0bits+0x48>
40011794:	1806d23a 	srli	r3,r3,8
40011798:	10800204 	addi	r2,r2,8
4001179c:	194003cc 	andi	r5,r3,15
400117a0:	2800021e 	bne	r5,zero,400117ac <__lo0bits+0x58>
400117a4:	1806d13a 	srli	r3,r3,4
400117a8:	10800104 	addi	r2,r2,4
400117ac:	194000cc 	andi	r5,r3,3
400117b0:	2800021e 	bne	r5,zero,400117bc <__lo0bits+0x68>
400117b4:	1806d0ba 	srli	r3,r3,2
400117b8:	10800084 	addi	r2,r2,2
400117bc:	1940004c 	andi	r5,r3,1
400117c0:	2800081e 	bne	r5,zero,400117e4 <__lo0bits+0x90>
400117c4:	1806d07a 	srli	r3,r3,1
400117c8:	1800051e 	bne	r3,zero,400117e0 <__lo0bits+0x8c>
400117cc:	00800804 	movi	r2,32
400117d0:	f800283a 	ret
400117d4:	1806d43a 	srli	r3,r3,16
400117d8:	00800404 	movi	r2,16
400117dc:	003feb06 	br	4001178c <__alt_data_end+0xc001178c>
400117e0:	10800044 	addi	r2,r2,1
400117e4:	20c00015 	stw	r3,0(r4)
400117e8:	f800283a 	ret
400117ec:	0005883a 	mov	r2,zero
400117f0:	f800283a 	ret
400117f4:	1806d07a 	srli	r3,r3,1
400117f8:	00800044 	movi	r2,1
400117fc:	20c00015 	stw	r3,0(r4)
40011800:	f800283a 	ret

40011804 <__i2b>:
40011804:	defffd04 	addi	sp,sp,-12
40011808:	dc000015 	stw	r16,0(sp)
4001180c:	04000044 	movi	r16,1
40011810:	dc400115 	stw	r17,4(sp)
40011814:	2823883a 	mov	r17,r5
40011818:	800b883a 	mov	r5,r16
4001181c:	dfc00215 	stw	ra,8(sp)
40011820:	00113f80 	call	400113f8 <_Balloc>
40011824:	14400515 	stw	r17,20(r2)
40011828:	14000415 	stw	r16,16(r2)
4001182c:	dfc00217 	ldw	ra,8(sp)
40011830:	dc400117 	ldw	r17,4(sp)
40011834:	dc000017 	ldw	r16,0(sp)
40011838:	dec00304 	addi	sp,sp,12
4001183c:	f800283a 	ret

40011840 <__multiply>:
40011840:	defffa04 	addi	sp,sp,-24
40011844:	dcc00315 	stw	r19,12(sp)
40011848:	dc800215 	stw	r18,8(sp)
4001184c:	34c00417 	ldw	r19,16(r6)
40011850:	2c800417 	ldw	r18,16(r5)
40011854:	dd000415 	stw	r20,16(sp)
40011858:	dc400115 	stw	r17,4(sp)
4001185c:	dfc00515 	stw	ra,20(sp)
40011860:	dc000015 	stw	r16,0(sp)
40011864:	2829883a 	mov	r20,r5
40011868:	3023883a 	mov	r17,r6
4001186c:	94c0050e 	bge	r18,r19,40011884 <__multiply+0x44>
40011870:	9007883a 	mov	r3,r18
40011874:	3029883a 	mov	r20,r6
40011878:	9825883a 	mov	r18,r19
4001187c:	2823883a 	mov	r17,r5
40011880:	1827883a 	mov	r19,r3
40011884:	a0800217 	ldw	r2,8(r20)
40011888:	94e1883a 	add	r16,r18,r19
4001188c:	a1400117 	ldw	r5,4(r20)
40011890:	1400010e 	bge	r2,r16,40011898 <__multiply+0x58>
40011894:	29400044 	addi	r5,r5,1
40011898:	00113f80 	call	400113f8 <_Balloc>
4001189c:	8415883a 	add	r10,r16,r16
400118a0:	12c00504 	addi	r11,r2,20
400118a4:	5295883a 	add	r10,r10,r10
400118a8:	5a95883a 	add	r10,r11,r10
400118ac:	5807883a 	mov	r3,r11
400118b0:	5a80032e 	bgeu	r11,r10,400118c0 <__multiply+0x80>
400118b4:	18000015 	stw	zero,0(r3)
400118b8:	18c00104 	addi	r3,r3,4
400118bc:	1abffd36 	bltu	r3,r10,400118b4 <__alt_data_end+0xc00118b4>
400118c0:	9ce7883a 	add	r19,r19,r19
400118c4:	94a5883a 	add	r18,r18,r18
400118c8:	89800504 	addi	r6,r17,20
400118cc:	9ce7883a 	add	r19,r19,r19
400118d0:	a3400504 	addi	r13,r20,20
400118d4:	94a5883a 	add	r18,r18,r18
400118d8:	34d9883a 	add	r12,r6,r19
400118dc:	6c93883a 	add	r9,r13,r18
400118e0:	3300422e 	bgeu	r6,r12,400119ec <__multiply+0x1ac>
400118e4:	37c00017 	ldw	ra,0(r6)
400118e8:	fbffffcc 	andi	r15,ra,65535
400118ec:	78001b26 	beq	r15,zero,4001195c <__multiply+0x11c>
400118f0:	5811883a 	mov	r8,r11
400118f4:	681d883a 	mov	r14,r13
400118f8:	000f883a 	mov	r7,zero
400118fc:	71000017 	ldw	r4,0(r14)
40011900:	40c00017 	ldw	r3,0(r8)
40011904:	73800104 	addi	r14,r14,4
40011908:	217fffcc 	andi	r5,r4,65535
4001190c:	2bcb383a 	mul	r5,r5,r15
40011910:	2008d43a 	srli	r4,r4,16
40011914:	1c7fffcc 	andi	r17,r3,65535
40011918:	2c4b883a 	add	r5,r5,r17
4001191c:	29cb883a 	add	r5,r5,r7
40011920:	23c9383a 	mul	r4,r4,r15
40011924:	1806d43a 	srli	r3,r3,16
40011928:	280ed43a 	srli	r7,r5,16
4001192c:	297fffcc 	andi	r5,r5,65535
40011930:	20c7883a 	add	r3,r4,r3
40011934:	19c7883a 	add	r3,r3,r7
40011938:	1808943a 	slli	r4,r3,16
4001193c:	4023883a 	mov	r17,r8
40011940:	180ed43a 	srli	r7,r3,16
40011944:	214ab03a 	or	r5,r4,r5
40011948:	41400015 	stw	r5,0(r8)
4001194c:	42000104 	addi	r8,r8,4
40011950:	727fea36 	bltu	r14,r9,400118fc <__alt_data_end+0xc00118fc>
40011954:	89c00115 	stw	r7,4(r17)
40011958:	37c00017 	ldw	ra,0(r6)
4001195c:	f83ed43a 	srli	ra,ra,16
40011960:	f8001f26 	beq	ra,zero,400119e0 <__multiply+0x1a0>
40011964:	58c00017 	ldw	r3,0(r11)
40011968:	681d883a 	mov	r14,r13
4001196c:	581f883a 	mov	r15,r11
40011970:	1811883a 	mov	r8,r3
40011974:	5825883a 	mov	r18,r11
40011978:	000f883a 	mov	r7,zero
4001197c:	00000106 	br	40011984 <__multiply+0x144>
40011980:	8825883a 	mov	r18,r17
40011984:	7140000b 	ldhu	r5,0(r14)
40011988:	4010d43a 	srli	r8,r8,16
4001198c:	193fffcc 	andi	r4,r3,65535
40011990:	2fcb383a 	mul	r5,r5,ra
40011994:	7bc00104 	addi	r15,r15,4
40011998:	73800104 	addi	r14,r14,4
4001199c:	2a0b883a 	add	r5,r5,r8
400119a0:	29cb883a 	add	r5,r5,r7
400119a4:	2806943a 	slli	r3,r5,16
400119a8:	94400104 	addi	r17,r18,4
400119ac:	280ad43a 	srli	r5,r5,16
400119b0:	1908b03a 	or	r4,r3,r4
400119b4:	793fff15 	stw	r4,-4(r15)
400119b8:	70ffff17 	ldw	r3,-4(r14)
400119bc:	8a000017 	ldw	r8,0(r17)
400119c0:	1806d43a 	srli	r3,r3,16
400119c4:	413fffcc 	andi	r4,r8,65535
400119c8:	1fc7383a 	mul	r3,r3,ra
400119cc:	1907883a 	add	r3,r3,r4
400119d0:	1947883a 	add	r3,r3,r5
400119d4:	180ed43a 	srli	r7,r3,16
400119d8:	727fe936 	bltu	r14,r9,40011980 <__alt_data_end+0xc0011980>
400119dc:	90c00115 	stw	r3,4(r18)
400119e0:	31800104 	addi	r6,r6,4
400119e4:	5ac00104 	addi	r11,r11,4
400119e8:	333fbe36 	bltu	r6,r12,400118e4 <__alt_data_end+0xc00118e4>
400119ec:	0400090e 	bge	zero,r16,40011a14 <__multiply+0x1d4>
400119f0:	50ffff17 	ldw	r3,-4(r10)
400119f4:	52bfff04 	addi	r10,r10,-4
400119f8:	18000326 	beq	r3,zero,40011a08 <__multiply+0x1c8>
400119fc:	00000506 	br	40011a14 <__multiply+0x1d4>
40011a00:	50c00017 	ldw	r3,0(r10)
40011a04:	1800031e 	bne	r3,zero,40011a14 <__multiply+0x1d4>
40011a08:	843fffc4 	addi	r16,r16,-1
40011a0c:	52bfff04 	addi	r10,r10,-4
40011a10:	803ffb1e 	bne	r16,zero,40011a00 <__alt_data_end+0xc0011a00>
40011a14:	14000415 	stw	r16,16(r2)
40011a18:	dfc00517 	ldw	ra,20(sp)
40011a1c:	dd000417 	ldw	r20,16(sp)
40011a20:	dcc00317 	ldw	r19,12(sp)
40011a24:	dc800217 	ldw	r18,8(sp)
40011a28:	dc400117 	ldw	r17,4(sp)
40011a2c:	dc000017 	ldw	r16,0(sp)
40011a30:	dec00604 	addi	sp,sp,24
40011a34:	f800283a 	ret

40011a38 <__pow5mult>:
40011a38:	defffa04 	addi	sp,sp,-24
40011a3c:	dcc00315 	stw	r19,12(sp)
40011a40:	dc000015 	stw	r16,0(sp)
40011a44:	dfc00515 	stw	ra,20(sp)
40011a48:	dd000415 	stw	r20,16(sp)
40011a4c:	dc800215 	stw	r18,8(sp)
40011a50:	dc400115 	stw	r17,4(sp)
40011a54:	308000cc 	andi	r2,r6,3
40011a58:	3021883a 	mov	r16,r6
40011a5c:	2027883a 	mov	r19,r4
40011a60:	10002f1e 	bne	r2,zero,40011b20 <__pow5mult+0xe8>
40011a64:	2825883a 	mov	r18,r5
40011a68:	8021d0ba 	srai	r16,r16,2
40011a6c:	80001a26 	beq	r16,zero,40011ad8 <__pow5mult+0xa0>
40011a70:	9c401217 	ldw	r17,72(r19)
40011a74:	8800061e 	bne	r17,zero,40011a90 <__pow5mult+0x58>
40011a78:	00003406 	br	40011b4c <__pow5mult+0x114>
40011a7c:	8021d07a 	srai	r16,r16,1
40011a80:	80001526 	beq	r16,zero,40011ad8 <__pow5mult+0xa0>
40011a84:	88800017 	ldw	r2,0(r17)
40011a88:	10001c26 	beq	r2,zero,40011afc <__pow5mult+0xc4>
40011a8c:	1023883a 	mov	r17,r2
40011a90:	8080004c 	andi	r2,r16,1
40011a94:	103ff926 	beq	r2,zero,40011a7c <__alt_data_end+0xc0011a7c>
40011a98:	880d883a 	mov	r6,r17
40011a9c:	900b883a 	mov	r5,r18
40011aa0:	9809883a 	mov	r4,r19
40011aa4:	00118400 	call	40011840 <__multiply>
40011aa8:	90001b26 	beq	r18,zero,40011b18 <__pow5mult+0xe0>
40011aac:	91000117 	ldw	r4,4(r18)
40011ab0:	98c01317 	ldw	r3,76(r19)
40011ab4:	8021d07a 	srai	r16,r16,1
40011ab8:	2109883a 	add	r4,r4,r4
40011abc:	2109883a 	add	r4,r4,r4
40011ac0:	1907883a 	add	r3,r3,r4
40011ac4:	19000017 	ldw	r4,0(r3)
40011ac8:	91000015 	stw	r4,0(r18)
40011acc:	1c800015 	stw	r18,0(r3)
40011ad0:	1025883a 	mov	r18,r2
40011ad4:	803feb1e 	bne	r16,zero,40011a84 <__alt_data_end+0xc0011a84>
40011ad8:	9005883a 	mov	r2,r18
40011adc:	dfc00517 	ldw	ra,20(sp)
40011ae0:	dd000417 	ldw	r20,16(sp)
40011ae4:	dcc00317 	ldw	r19,12(sp)
40011ae8:	dc800217 	ldw	r18,8(sp)
40011aec:	dc400117 	ldw	r17,4(sp)
40011af0:	dc000017 	ldw	r16,0(sp)
40011af4:	dec00604 	addi	sp,sp,24
40011af8:	f800283a 	ret
40011afc:	880d883a 	mov	r6,r17
40011b00:	880b883a 	mov	r5,r17
40011b04:	9809883a 	mov	r4,r19
40011b08:	00118400 	call	40011840 <__multiply>
40011b0c:	88800015 	stw	r2,0(r17)
40011b10:	10000015 	stw	zero,0(r2)
40011b14:	003fdd06 	br	40011a8c <__alt_data_end+0xc0011a8c>
40011b18:	1025883a 	mov	r18,r2
40011b1c:	003fd706 	br	40011a7c <__alt_data_end+0xc0011a7c>
40011b20:	10bfffc4 	addi	r2,r2,-1
40011b24:	1085883a 	add	r2,r2,r2
40011b28:	00d000b4 	movhi	r3,16386
40011b2c:	18fb4204 	addi	r3,r3,-4856
40011b30:	1085883a 	add	r2,r2,r2
40011b34:	1885883a 	add	r2,r3,r2
40011b38:	11800017 	ldw	r6,0(r2)
40011b3c:	000f883a 	mov	r7,zero
40011b40:	00114c80 	call	400114c8 <__multadd>
40011b44:	1025883a 	mov	r18,r2
40011b48:	003fc706 	br	40011a68 <__alt_data_end+0xc0011a68>
40011b4c:	05000044 	movi	r20,1
40011b50:	a00b883a 	mov	r5,r20
40011b54:	9809883a 	mov	r4,r19
40011b58:	00113f80 	call	400113f8 <_Balloc>
40011b5c:	1023883a 	mov	r17,r2
40011b60:	00809c44 	movi	r2,625
40011b64:	88800515 	stw	r2,20(r17)
40011b68:	8d000415 	stw	r20,16(r17)
40011b6c:	9c401215 	stw	r17,72(r19)
40011b70:	88000015 	stw	zero,0(r17)
40011b74:	003fc606 	br	40011a90 <__alt_data_end+0xc0011a90>

40011b78 <__lshift>:
40011b78:	defff904 	addi	sp,sp,-28
40011b7c:	dd400515 	stw	r21,20(sp)
40011b80:	dcc00315 	stw	r19,12(sp)
40011b84:	302bd17a 	srai	r21,r6,5
40011b88:	2cc00417 	ldw	r19,16(r5)
40011b8c:	28800217 	ldw	r2,8(r5)
40011b90:	dd000415 	stw	r20,16(sp)
40011b94:	ace7883a 	add	r19,r21,r19
40011b98:	dc800215 	stw	r18,8(sp)
40011b9c:	dc400115 	stw	r17,4(sp)
40011ba0:	dc000015 	stw	r16,0(sp)
40011ba4:	dfc00615 	stw	ra,24(sp)
40011ba8:	9c000044 	addi	r16,r19,1
40011bac:	2823883a 	mov	r17,r5
40011bb0:	3029883a 	mov	r20,r6
40011bb4:	2025883a 	mov	r18,r4
40011bb8:	29400117 	ldw	r5,4(r5)
40011bbc:	1400030e 	bge	r2,r16,40011bcc <__lshift+0x54>
40011bc0:	1085883a 	add	r2,r2,r2
40011bc4:	29400044 	addi	r5,r5,1
40011bc8:	143ffd16 	blt	r2,r16,40011bc0 <__alt_data_end+0xc0011bc0>
40011bcc:	9009883a 	mov	r4,r18
40011bd0:	00113f80 	call	400113f8 <_Balloc>
40011bd4:	10c00504 	addi	r3,r2,20
40011bd8:	0540070e 	bge	zero,r21,40011bf8 <__lshift+0x80>
40011bdc:	ad6b883a 	add	r21,r21,r21
40011be0:	ad6b883a 	add	r21,r21,r21
40011be4:	1809883a 	mov	r4,r3
40011be8:	1d47883a 	add	r3,r3,r21
40011bec:	20000015 	stw	zero,0(r4)
40011bf0:	21000104 	addi	r4,r4,4
40011bf4:	193ffd1e 	bne	r3,r4,40011bec <__alt_data_end+0xc0011bec>
40011bf8:	8a000417 	ldw	r8,16(r17)
40011bfc:	89000504 	addi	r4,r17,20
40011c00:	a18007cc 	andi	r6,r20,31
40011c04:	4211883a 	add	r8,r8,r8
40011c08:	4211883a 	add	r8,r8,r8
40011c0c:	2211883a 	add	r8,r4,r8
40011c10:	30002326 	beq	r6,zero,40011ca0 <__lshift+0x128>
40011c14:	02400804 	movi	r9,32
40011c18:	4993c83a 	sub	r9,r9,r6
40011c1c:	000b883a 	mov	r5,zero
40011c20:	21c00017 	ldw	r7,0(r4)
40011c24:	1815883a 	mov	r10,r3
40011c28:	18c00104 	addi	r3,r3,4
40011c2c:	398e983a 	sll	r7,r7,r6
40011c30:	21000104 	addi	r4,r4,4
40011c34:	394ab03a 	or	r5,r7,r5
40011c38:	197fff15 	stw	r5,-4(r3)
40011c3c:	217fff17 	ldw	r5,-4(r4)
40011c40:	2a4ad83a 	srl	r5,r5,r9
40011c44:	223ff636 	bltu	r4,r8,40011c20 <__alt_data_end+0xc0011c20>
40011c48:	51400115 	stw	r5,4(r10)
40011c4c:	28001a1e 	bne	r5,zero,40011cb8 <__lshift+0x140>
40011c50:	843fffc4 	addi	r16,r16,-1
40011c54:	14000415 	stw	r16,16(r2)
40011c58:	88000826 	beq	r17,zero,40011c7c <__lshift+0x104>
40011c5c:	89000117 	ldw	r4,4(r17)
40011c60:	90c01317 	ldw	r3,76(r18)
40011c64:	2109883a 	add	r4,r4,r4
40011c68:	2109883a 	add	r4,r4,r4
40011c6c:	1907883a 	add	r3,r3,r4
40011c70:	19000017 	ldw	r4,0(r3)
40011c74:	89000015 	stw	r4,0(r17)
40011c78:	1c400015 	stw	r17,0(r3)
40011c7c:	dfc00617 	ldw	ra,24(sp)
40011c80:	dd400517 	ldw	r21,20(sp)
40011c84:	dd000417 	ldw	r20,16(sp)
40011c88:	dcc00317 	ldw	r19,12(sp)
40011c8c:	dc800217 	ldw	r18,8(sp)
40011c90:	dc400117 	ldw	r17,4(sp)
40011c94:	dc000017 	ldw	r16,0(sp)
40011c98:	dec00704 	addi	sp,sp,28
40011c9c:	f800283a 	ret
40011ca0:	21400017 	ldw	r5,0(r4)
40011ca4:	18c00104 	addi	r3,r3,4
40011ca8:	21000104 	addi	r4,r4,4
40011cac:	197fff15 	stw	r5,-4(r3)
40011cb0:	223ffb36 	bltu	r4,r8,40011ca0 <__alt_data_end+0xc0011ca0>
40011cb4:	003fe606 	br	40011c50 <__alt_data_end+0xc0011c50>
40011cb8:	9c000084 	addi	r16,r19,2
40011cbc:	003fe406 	br	40011c50 <__alt_data_end+0xc0011c50>

40011cc0 <__mcmp>:
40011cc0:	20800417 	ldw	r2,16(r4)
40011cc4:	28c00417 	ldw	r3,16(r5)
40011cc8:	10c5c83a 	sub	r2,r2,r3
40011ccc:	1000111e 	bne	r2,zero,40011d14 <__mcmp+0x54>
40011cd0:	18c7883a 	add	r3,r3,r3
40011cd4:	18c7883a 	add	r3,r3,r3
40011cd8:	21000504 	addi	r4,r4,20
40011cdc:	29400504 	addi	r5,r5,20
40011ce0:	20c5883a 	add	r2,r4,r3
40011ce4:	28cb883a 	add	r5,r5,r3
40011ce8:	00000106 	br	40011cf0 <__mcmp+0x30>
40011cec:	20800a2e 	bgeu	r4,r2,40011d18 <__mcmp+0x58>
40011cf0:	10bfff04 	addi	r2,r2,-4
40011cf4:	297fff04 	addi	r5,r5,-4
40011cf8:	11800017 	ldw	r6,0(r2)
40011cfc:	28c00017 	ldw	r3,0(r5)
40011d00:	30fffa26 	beq	r6,r3,40011cec <__alt_data_end+0xc0011cec>
40011d04:	30c00236 	bltu	r6,r3,40011d10 <__mcmp+0x50>
40011d08:	00800044 	movi	r2,1
40011d0c:	f800283a 	ret
40011d10:	00bfffc4 	movi	r2,-1
40011d14:	f800283a 	ret
40011d18:	0005883a 	mov	r2,zero
40011d1c:	f800283a 	ret

40011d20 <__mdiff>:
40011d20:	28c00417 	ldw	r3,16(r5)
40011d24:	30800417 	ldw	r2,16(r6)
40011d28:	defffa04 	addi	sp,sp,-24
40011d2c:	dcc00315 	stw	r19,12(sp)
40011d30:	dc800215 	stw	r18,8(sp)
40011d34:	dfc00515 	stw	ra,20(sp)
40011d38:	dd000415 	stw	r20,16(sp)
40011d3c:	dc400115 	stw	r17,4(sp)
40011d40:	dc000015 	stw	r16,0(sp)
40011d44:	1887c83a 	sub	r3,r3,r2
40011d48:	2825883a 	mov	r18,r5
40011d4c:	3027883a 	mov	r19,r6
40011d50:	1800141e 	bne	r3,zero,40011da4 <__mdiff+0x84>
40011d54:	1085883a 	add	r2,r2,r2
40011d58:	1085883a 	add	r2,r2,r2
40011d5c:	2a000504 	addi	r8,r5,20
40011d60:	34000504 	addi	r16,r6,20
40011d64:	4087883a 	add	r3,r8,r2
40011d68:	8085883a 	add	r2,r16,r2
40011d6c:	00000106 	br	40011d74 <__mdiff+0x54>
40011d70:	40c0592e 	bgeu	r8,r3,40011ed8 <__mdiff+0x1b8>
40011d74:	18ffff04 	addi	r3,r3,-4
40011d78:	10bfff04 	addi	r2,r2,-4
40011d7c:	19c00017 	ldw	r7,0(r3)
40011d80:	11400017 	ldw	r5,0(r2)
40011d84:	397ffa26 	beq	r7,r5,40011d70 <__alt_data_end+0xc0011d70>
40011d88:	3940592e 	bgeu	r7,r5,40011ef0 <__mdiff+0x1d0>
40011d8c:	9005883a 	mov	r2,r18
40011d90:	4023883a 	mov	r17,r8
40011d94:	9825883a 	mov	r18,r19
40011d98:	05000044 	movi	r20,1
40011d9c:	1027883a 	mov	r19,r2
40011da0:	00000406 	br	40011db4 <__mdiff+0x94>
40011da4:	18005616 	blt	r3,zero,40011f00 <__mdiff+0x1e0>
40011da8:	34400504 	addi	r17,r6,20
40011dac:	2c000504 	addi	r16,r5,20
40011db0:	0029883a 	mov	r20,zero
40011db4:	91400117 	ldw	r5,4(r18)
40011db8:	00113f80 	call	400113f8 <_Balloc>
40011dbc:	92400417 	ldw	r9,16(r18)
40011dc0:	9b000417 	ldw	r12,16(r19)
40011dc4:	12c00504 	addi	r11,r2,20
40011dc8:	4a51883a 	add	r8,r9,r9
40011dcc:	6319883a 	add	r12,r12,r12
40011dd0:	4211883a 	add	r8,r8,r8
40011dd4:	6319883a 	add	r12,r12,r12
40011dd8:	15000315 	stw	r20,12(r2)
40011ddc:	8211883a 	add	r8,r16,r8
40011de0:	8b19883a 	add	r12,r17,r12
40011de4:	0007883a 	mov	r3,zero
40011de8:	81400017 	ldw	r5,0(r16)
40011dec:	89c00017 	ldw	r7,0(r17)
40011df0:	59800104 	addi	r6,r11,4
40011df4:	293fffcc 	andi	r4,r5,65535
40011df8:	20c7883a 	add	r3,r4,r3
40011dfc:	393fffcc 	andi	r4,r7,65535
40011e00:	1909c83a 	sub	r4,r3,r4
40011e04:	280ad43a 	srli	r5,r5,16
40011e08:	380ed43a 	srli	r7,r7,16
40011e0c:	2007d43a 	srai	r3,r4,16
40011e10:	213fffcc 	andi	r4,r4,65535
40011e14:	29cbc83a 	sub	r5,r5,r7
40011e18:	28c7883a 	add	r3,r5,r3
40011e1c:	180a943a 	slli	r5,r3,16
40011e20:	8c400104 	addi	r17,r17,4
40011e24:	84000104 	addi	r16,r16,4
40011e28:	2908b03a 	or	r4,r5,r4
40011e2c:	59000015 	stw	r4,0(r11)
40011e30:	1807d43a 	srai	r3,r3,16
40011e34:	3015883a 	mov	r10,r6
40011e38:	3017883a 	mov	r11,r6
40011e3c:	8b3fea36 	bltu	r17,r12,40011de8 <__alt_data_end+0xc0011de8>
40011e40:	8200162e 	bgeu	r16,r8,40011e9c <__mdiff+0x17c>
40011e44:	8017883a 	mov	r11,r16
40011e48:	59400017 	ldw	r5,0(r11)
40011e4c:	31800104 	addi	r6,r6,4
40011e50:	5ac00104 	addi	r11,r11,4
40011e54:	293fffcc 	andi	r4,r5,65535
40011e58:	20c7883a 	add	r3,r4,r3
40011e5c:	280ed43a 	srli	r7,r5,16
40011e60:	180bd43a 	srai	r5,r3,16
40011e64:	193fffcc 	andi	r4,r3,65535
40011e68:	3947883a 	add	r3,r7,r5
40011e6c:	180a943a 	slli	r5,r3,16
40011e70:	1807d43a 	srai	r3,r3,16
40011e74:	2908b03a 	or	r4,r5,r4
40011e78:	313fff15 	stw	r4,-4(r6)
40011e7c:	5a3ff236 	bltu	r11,r8,40011e48 <__alt_data_end+0xc0011e48>
40011e80:	0406303a 	nor	r3,zero,r16
40011e84:	1a07883a 	add	r3,r3,r8
40011e88:	1806d0ba 	srli	r3,r3,2
40011e8c:	18c00044 	addi	r3,r3,1
40011e90:	18c7883a 	add	r3,r3,r3
40011e94:	18c7883a 	add	r3,r3,r3
40011e98:	50d5883a 	add	r10,r10,r3
40011e9c:	50ffff04 	addi	r3,r10,-4
40011ea0:	2000041e 	bne	r4,zero,40011eb4 <__mdiff+0x194>
40011ea4:	18ffff04 	addi	r3,r3,-4
40011ea8:	19000017 	ldw	r4,0(r3)
40011eac:	4a7fffc4 	addi	r9,r9,-1
40011eb0:	203ffc26 	beq	r4,zero,40011ea4 <__alt_data_end+0xc0011ea4>
40011eb4:	12400415 	stw	r9,16(r2)
40011eb8:	dfc00517 	ldw	ra,20(sp)
40011ebc:	dd000417 	ldw	r20,16(sp)
40011ec0:	dcc00317 	ldw	r19,12(sp)
40011ec4:	dc800217 	ldw	r18,8(sp)
40011ec8:	dc400117 	ldw	r17,4(sp)
40011ecc:	dc000017 	ldw	r16,0(sp)
40011ed0:	dec00604 	addi	sp,sp,24
40011ed4:	f800283a 	ret
40011ed8:	000b883a 	mov	r5,zero
40011edc:	00113f80 	call	400113f8 <_Balloc>
40011ee0:	00c00044 	movi	r3,1
40011ee4:	10c00415 	stw	r3,16(r2)
40011ee8:	10000515 	stw	zero,20(r2)
40011eec:	003ff206 	br	40011eb8 <__alt_data_end+0xc0011eb8>
40011ef0:	8023883a 	mov	r17,r16
40011ef4:	0029883a 	mov	r20,zero
40011ef8:	4021883a 	mov	r16,r8
40011efc:	003fad06 	br	40011db4 <__alt_data_end+0xc0011db4>
40011f00:	9005883a 	mov	r2,r18
40011f04:	94400504 	addi	r17,r18,20
40011f08:	9c000504 	addi	r16,r19,20
40011f0c:	9825883a 	mov	r18,r19
40011f10:	05000044 	movi	r20,1
40011f14:	1027883a 	mov	r19,r2
40011f18:	003fa606 	br	40011db4 <__alt_data_end+0xc0011db4>

40011f1c <__ulp>:
40011f1c:	295ffc2c 	andhi	r5,r5,32752
40011f20:	00bf3034 	movhi	r2,64704
40011f24:	2887883a 	add	r3,r5,r2
40011f28:	00c0020e 	bge	zero,r3,40011f34 <__ulp+0x18>
40011f2c:	0005883a 	mov	r2,zero
40011f30:	f800283a 	ret
40011f34:	00c7c83a 	sub	r3,zero,r3
40011f38:	1807d53a 	srai	r3,r3,20
40011f3c:	008004c4 	movi	r2,19
40011f40:	10c00b0e 	bge	r2,r3,40011f70 <__ulp+0x54>
40011f44:	18bffb04 	addi	r2,r3,-20
40011f48:	01000784 	movi	r4,30
40011f4c:	0007883a 	mov	r3,zero
40011f50:	20800516 	blt	r4,r2,40011f68 <__ulp+0x4c>
40011f54:	010007c4 	movi	r4,31
40011f58:	2089c83a 	sub	r4,r4,r2
40011f5c:	00800044 	movi	r2,1
40011f60:	1104983a 	sll	r2,r2,r4
40011f64:	f800283a 	ret
40011f68:	00800044 	movi	r2,1
40011f6c:	f800283a 	ret
40011f70:	01400234 	movhi	r5,8
40011f74:	28c7d83a 	sra	r3,r5,r3
40011f78:	0005883a 	mov	r2,zero
40011f7c:	f800283a 	ret

40011f80 <__b2d>:
40011f80:	defffa04 	addi	sp,sp,-24
40011f84:	dc000015 	stw	r16,0(sp)
40011f88:	24000417 	ldw	r16,16(r4)
40011f8c:	dc400115 	stw	r17,4(sp)
40011f90:	24400504 	addi	r17,r4,20
40011f94:	8421883a 	add	r16,r16,r16
40011f98:	8421883a 	add	r16,r16,r16
40011f9c:	8c21883a 	add	r16,r17,r16
40011fa0:	dc800215 	stw	r18,8(sp)
40011fa4:	84bfff17 	ldw	r18,-4(r16)
40011fa8:	dd000415 	stw	r20,16(sp)
40011fac:	dcc00315 	stw	r19,12(sp)
40011fb0:	9009883a 	mov	r4,r18
40011fb4:	2829883a 	mov	r20,r5
40011fb8:	dfc00515 	stw	ra,20(sp)
40011fbc:	00116ec0 	call	400116ec <__hi0bits>
40011fc0:	00c00804 	movi	r3,32
40011fc4:	1889c83a 	sub	r4,r3,r2
40011fc8:	a1000015 	stw	r4,0(r20)
40011fcc:	01000284 	movi	r4,10
40011fd0:	84ffff04 	addi	r19,r16,-4
40011fd4:	20801216 	blt	r4,r2,40012020 <__b2d+0xa0>
40011fd8:	018002c4 	movi	r6,11
40011fdc:	308dc83a 	sub	r6,r6,r2
40011fe0:	9186d83a 	srl	r3,r18,r6
40011fe4:	18cffc34 	orhi	r3,r3,16368
40011fe8:	8cc0212e 	bgeu	r17,r19,40012070 <__b2d+0xf0>
40011fec:	813ffe17 	ldw	r4,-8(r16)
40011ff0:	218cd83a 	srl	r6,r4,r6
40011ff4:	10800544 	addi	r2,r2,21
40011ff8:	9084983a 	sll	r2,r18,r2
40011ffc:	1184b03a 	or	r2,r2,r6
40012000:	dfc00517 	ldw	ra,20(sp)
40012004:	dd000417 	ldw	r20,16(sp)
40012008:	dcc00317 	ldw	r19,12(sp)
4001200c:	dc800217 	ldw	r18,8(sp)
40012010:	dc400117 	ldw	r17,4(sp)
40012014:	dc000017 	ldw	r16,0(sp)
40012018:	dec00604 	addi	sp,sp,24
4001201c:	f800283a 	ret
40012020:	8cc00f2e 	bgeu	r17,r19,40012060 <__b2d+0xe0>
40012024:	117ffd44 	addi	r5,r2,-11
40012028:	80bffe17 	ldw	r2,-8(r16)
4001202c:	28000e26 	beq	r5,zero,40012068 <__b2d+0xe8>
40012030:	1949c83a 	sub	r4,r3,r5
40012034:	9164983a 	sll	r18,r18,r5
40012038:	1106d83a 	srl	r3,r2,r4
4001203c:	81bffe04 	addi	r6,r16,-8
40012040:	948ffc34 	orhi	r18,r18,16368
40012044:	90c6b03a 	or	r3,r18,r3
40012048:	89800e2e 	bgeu	r17,r6,40012084 <__b2d+0x104>
4001204c:	81bffd17 	ldw	r6,-12(r16)
40012050:	1144983a 	sll	r2,r2,r5
40012054:	310ad83a 	srl	r5,r6,r4
40012058:	2884b03a 	or	r2,r5,r2
4001205c:	003fe806 	br	40012000 <__alt_data_end+0xc0012000>
40012060:	10bffd44 	addi	r2,r2,-11
40012064:	1000041e 	bne	r2,zero,40012078 <__b2d+0xf8>
40012068:	90cffc34 	orhi	r3,r18,16368
4001206c:	003fe406 	br	40012000 <__alt_data_end+0xc0012000>
40012070:	000d883a 	mov	r6,zero
40012074:	003fdf06 	br	40011ff4 <__alt_data_end+0xc0011ff4>
40012078:	90a4983a 	sll	r18,r18,r2
4001207c:	0005883a 	mov	r2,zero
40012080:	003ff906 	br	40012068 <__alt_data_end+0xc0012068>
40012084:	1144983a 	sll	r2,r2,r5
40012088:	003fdd06 	br	40012000 <__alt_data_end+0xc0012000>

4001208c <__d2b>:
4001208c:	defff804 	addi	sp,sp,-32
40012090:	dc000215 	stw	r16,8(sp)
40012094:	3021883a 	mov	r16,r6
40012098:	dc400315 	stw	r17,12(sp)
4001209c:	8022907a 	slli	r17,r16,1
400120a0:	dd000615 	stw	r20,24(sp)
400120a4:	2829883a 	mov	r20,r5
400120a8:	01400044 	movi	r5,1
400120ac:	dcc00515 	stw	r19,20(sp)
400120b0:	dc800415 	stw	r18,16(sp)
400120b4:	dfc00715 	stw	ra,28(sp)
400120b8:	3825883a 	mov	r18,r7
400120bc:	8822d57a 	srli	r17,r17,21
400120c0:	00113f80 	call	400113f8 <_Balloc>
400120c4:	1027883a 	mov	r19,r2
400120c8:	00800434 	movhi	r2,16
400120cc:	10bfffc4 	addi	r2,r2,-1
400120d0:	808c703a 	and	r6,r16,r2
400120d4:	88000126 	beq	r17,zero,400120dc <__d2b+0x50>
400120d8:	31800434 	orhi	r6,r6,16
400120dc:	d9800015 	stw	r6,0(sp)
400120e0:	a0002426 	beq	r20,zero,40012174 <__d2b+0xe8>
400120e4:	d9000104 	addi	r4,sp,4
400120e8:	dd000115 	stw	r20,4(sp)
400120ec:	00117540 	call	40011754 <__lo0bits>
400120f0:	d8c00017 	ldw	r3,0(sp)
400120f4:	10002f1e 	bne	r2,zero,400121b4 <__d2b+0x128>
400120f8:	d9000117 	ldw	r4,4(sp)
400120fc:	99000515 	stw	r4,20(r19)
40012100:	1821003a 	cmpeq	r16,r3,zero
40012104:	01000084 	movi	r4,2
40012108:	2421c83a 	sub	r16,r4,r16
4001210c:	98c00615 	stw	r3,24(r19)
40012110:	9c000415 	stw	r16,16(r19)
40012114:	88001f1e 	bne	r17,zero,40012194 <__d2b+0x108>
40012118:	10bef384 	addi	r2,r2,-1074
4001211c:	90800015 	stw	r2,0(r18)
40012120:	00900034 	movhi	r2,16384
40012124:	10bfffc4 	addi	r2,r2,-1
40012128:	8085883a 	add	r2,r16,r2
4001212c:	1085883a 	add	r2,r2,r2
40012130:	1085883a 	add	r2,r2,r2
40012134:	9885883a 	add	r2,r19,r2
40012138:	11000517 	ldw	r4,20(r2)
4001213c:	8020917a 	slli	r16,r16,5
40012140:	00116ec0 	call	400116ec <__hi0bits>
40012144:	d8c00817 	ldw	r3,32(sp)
40012148:	8085c83a 	sub	r2,r16,r2
4001214c:	18800015 	stw	r2,0(r3)
40012150:	9805883a 	mov	r2,r19
40012154:	dfc00717 	ldw	ra,28(sp)
40012158:	dd000617 	ldw	r20,24(sp)
4001215c:	dcc00517 	ldw	r19,20(sp)
40012160:	dc800417 	ldw	r18,16(sp)
40012164:	dc400317 	ldw	r17,12(sp)
40012168:	dc000217 	ldw	r16,8(sp)
4001216c:	dec00804 	addi	sp,sp,32
40012170:	f800283a 	ret
40012174:	d809883a 	mov	r4,sp
40012178:	00117540 	call	40011754 <__lo0bits>
4001217c:	d8c00017 	ldw	r3,0(sp)
40012180:	04000044 	movi	r16,1
40012184:	9c000415 	stw	r16,16(r19)
40012188:	98c00515 	stw	r3,20(r19)
4001218c:	10800804 	addi	r2,r2,32
40012190:	883fe126 	beq	r17,zero,40012118 <__alt_data_end+0xc0012118>
40012194:	00c00d44 	movi	r3,53
40012198:	8c7ef344 	addi	r17,r17,-1075
4001219c:	88a3883a 	add	r17,r17,r2
400121a0:	1885c83a 	sub	r2,r3,r2
400121a4:	d8c00817 	ldw	r3,32(sp)
400121a8:	94400015 	stw	r17,0(r18)
400121ac:	18800015 	stw	r2,0(r3)
400121b0:	003fe706 	br	40012150 <__alt_data_end+0xc0012150>
400121b4:	01000804 	movi	r4,32
400121b8:	2089c83a 	sub	r4,r4,r2
400121bc:	1908983a 	sll	r4,r3,r4
400121c0:	d9400117 	ldw	r5,4(sp)
400121c4:	1886d83a 	srl	r3,r3,r2
400121c8:	2148b03a 	or	r4,r4,r5
400121cc:	99000515 	stw	r4,20(r19)
400121d0:	d8c00015 	stw	r3,0(sp)
400121d4:	003fca06 	br	40012100 <__alt_data_end+0xc0012100>

400121d8 <__ratio>:
400121d8:	defff904 	addi	sp,sp,-28
400121dc:	dc400315 	stw	r17,12(sp)
400121e0:	2823883a 	mov	r17,r5
400121e4:	d9400104 	addi	r5,sp,4
400121e8:	dfc00615 	stw	ra,24(sp)
400121ec:	dcc00515 	stw	r19,20(sp)
400121f0:	dc800415 	stw	r18,16(sp)
400121f4:	2027883a 	mov	r19,r4
400121f8:	dc000215 	stw	r16,8(sp)
400121fc:	0011f800 	call	40011f80 <__b2d>
40012200:	d80b883a 	mov	r5,sp
40012204:	8809883a 	mov	r4,r17
40012208:	1025883a 	mov	r18,r2
4001220c:	1821883a 	mov	r16,r3
40012210:	0011f800 	call	40011f80 <__b2d>
40012214:	8a000417 	ldw	r8,16(r17)
40012218:	99000417 	ldw	r4,16(r19)
4001221c:	d9400117 	ldw	r5,4(sp)
40012220:	2209c83a 	sub	r4,r4,r8
40012224:	2010917a 	slli	r8,r4,5
40012228:	d9000017 	ldw	r4,0(sp)
4001222c:	2909c83a 	sub	r4,r5,r4
40012230:	4109883a 	add	r4,r8,r4
40012234:	01000e0e 	bge	zero,r4,40012270 <__ratio+0x98>
40012238:	2008953a 	slli	r4,r4,20
4001223c:	2421883a 	add	r16,r4,r16
40012240:	100d883a 	mov	r6,r2
40012244:	180f883a 	mov	r7,r3
40012248:	9009883a 	mov	r4,r18
4001224c:	800b883a 	mov	r5,r16
40012250:	00083dc0 	call	400083dc <__divdf3>
40012254:	dfc00617 	ldw	ra,24(sp)
40012258:	dcc00517 	ldw	r19,20(sp)
4001225c:	dc800417 	ldw	r18,16(sp)
40012260:	dc400317 	ldw	r17,12(sp)
40012264:	dc000217 	ldw	r16,8(sp)
40012268:	dec00704 	addi	sp,sp,28
4001226c:	f800283a 	ret
40012270:	2008953a 	slli	r4,r4,20
40012274:	1907c83a 	sub	r3,r3,r4
40012278:	003ff106 	br	40012240 <__alt_data_end+0xc0012240>

4001227c <_mprec_log10>:
4001227c:	defffe04 	addi	sp,sp,-8
40012280:	dc000015 	stw	r16,0(sp)
40012284:	dfc00115 	stw	ra,4(sp)
40012288:	008005c4 	movi	r2,23
4001228c:	2021883a 	mov	r16,r4
40012290:	11000d0e 	bge	r2,r4,400122c8 <_mprec_log10+0x4c>
40012294:	0005883a 	mov	r2,zero
40012298:	00cffc34 	movhi	r3,16368
4001229c:	843fffc4 	addi	r16,r16,-1
400122a0:	000d883a 	mov	r6,zero
400122a4:	01d00934 	movhi	r7,16420
400122a8:	1009883a 	mov	r4,r2
400122ac:	180b883a 	mov	r5,r3
400122b0:	0008cc40 	call	40008cc4 <__muldf3>
400122b4:	803ff91e 	bne	r16,zero,4001229c <__alt_data_end+0xc001229c>
400122b8:	dfc00117 	ldw	ra,4(sp)
400122bc:	dc000017 	ldw	r16,0(sp)
400122c0:	dec00204 	addi	sp,sp,8
400122c4:	f800283a 	ret
400122c8:	202090fa 	slli	r16,r4,3
400122cc:	009000b4 	movhi	r2,16386
400122d0:	10bb5904 	addi	r2,r2,-4764
400122d4:	1421883a 	add	r16,r2,r16
400122d8:	80800017 	ldw	r2,0(r16)
400122dc:	80c00117 	ldw	r3,4(r16)
400122e0:	dfc00117 	ldw	ra,4(sp)
400122e4:	dc000017 	ldw	r16,0(sp)
400122e8:	dec00204 	addi	sp,sp,8
400122ec:	f800283a 	ret

400122f0 <__copybits>:
400122f0:	297fffc4 	addi	r5,r5,-1
400122f4:	280fd17a 	srai	r7,r5,5
400122f8:	30c00417 	ldw	r3,16(r6)
400122fc:	30800504 	addi	r2,r6,20
40012300:	39c00044 	addi	r7,r7,1
40012304:	18c7883a 	add	r3,r3,r3
40012308:	39cf883a 	add	r7,r7,r7
4001230c:	18c7883a 	add	r3,r3,r3
40012310:	39cf883a 	add	r7,r7,r7
40012314:	10c7883a 	add	r3,r2,r3
40012318:	21cf883a 	add	r7,r4,r7
4001231c:	10c00d2e 	bgeu	r2,r3,40012354 <__copybits+0x64>
40012320:	200b883a 	mov	r5,r4
40012324:	12000017 	ldw	r8,0(r2)
40012328:	29400104 	addi	r5,r5,4
4001232c:	10800104 	addi	r2,r2,4
40012330:	2a3fff15 	stw	r8,-4(r5)
40012334:	10fffb36 	bltu	r2,r3,40012324 <__alt_data_end+0xc0012324>
40012338:	1985c83a 	sub	r2,r3,r6
4001233c:	10bffac4 	addi	r2,r2,-21
40012340:	1004d0ba 	srli	r2,r2,2
40012344:	10800044 	addi	r2,r2,1
40012348:	1085883a 	add	r2,r2,r2
4001234c:	1085883a 	add	r2,r2,r2
40012350:	2089883a 	add	r4,r4,r2
40012354:	21c0032e 	bgeu	r4,r7,40012364 <__copybits+0x74>
40012358:	20000015 	stw	zero,0(r4)
4001235c:	21000104 	addi	r4,r4,4
40012360:	21fffd36 	bltu	r4,r7,40012358 <__alt_data_end+0xc0012358>
40012364:	f800283a 	ret

40012368 <__any_on>:
40012368:	20c00417 	ldw	r3,16(r4)
4001236c:	2805d17a 	srai	r2,r5,5
40012370:	21000504 	addi	r4,r4,20
40012374:	18800d0e 	bge	r3,r2,400123ac <__any_on+0x44>
40012378:	18c7883a 	add	r3,r3,r3
4001237c:	18c7883a 	add	r3,r3,r3
40012380:	20c7883a 	add	r3,r4,r3
40012384:	20c0192e 	bgeu	r4,r3,400123ec <__any_on+0x84>
40012388:	18bfff17 	ldw	r2,-4(r3)
4001238c:	18ffff04 	addi	r3,r3,-4
40012390:	1000041e 	bne	r2,zero,400123a4 <__any_on+0x3c>
40012394:	20c0142e 	bgeu	r4,r3,400123e8 <__any_on+0x80>
40012398:	18ffff04 	addi	r3,r3,-4
4001239c:	19400017 	ldw	r5,0(r3)
400123a0:	283ffc26 	beq	r5,zero,40012394 <__alt_data_end+0xc0012394>
400123a4:	00800044 	movi	r2,1
400123a8:	f800283a 	ret
400123ac:	10c00a0e 	bge	r2,r3,400123d8 <__any_on+0x70>
400123b0:	1085883a 	add	r2,r2,r2
400123b4:	1085883a 	add	r2,r2,r2
400123b8:	294007cc 	andi	r5,r5,31
400123bc:	2087883a 	add	r3,r4,r2
400123c0:	283ff026 	beq	r5,zero,40012384 <__alt_data_end+0xc0012384>
400123c4:	19800017 	ldw	r6,0(r3)
400123c8:	3144d83a 	srl	r2,r6,r5
400123cc:	114a983a 	sll	r5,r2,r5
400123d0:	317ff41e 	bne	r6,r5,400123a4 <__alt_data_end+0xc00123a4>
400123d4:	003feb06 	br	40012384 <__alt_data_end+0xc0012384>
400123d8:	1085883a 	add	r2,r2,r2
400123dc:	1085883a 	add	r2,r2,r2
400123e0:	2087883a 	add	r3,r4,r2
400123e4:	003fe706 	br	40012384 <__alt_data_end+0xc0012384>
400123e8:	f800283a 	ret
400123ec:	0005883a 	mov	r2,zero
400123f0:	f800283a 	ret

400123f4 <_putc_r>:
400123f4:	defffc04 	addi	sp,sp,-16
400123f8:	dc000215 	stw	r16,8(sp)
400123fc:	dfc00315 	stw	ra,12(sp)
40012400:	2021883a 	mov	r16,r4
40012404:	20000226 	beq	r4,zero,40012410 <_putc_r+0x1c>
40012408:	20800e17 	ldw	r2,56(r4)
4001240c:	10001b26 	beq	r2,zero,4001247c <_putc_r+0x88>
40012410:	30800217 	ldw	r2,8(r6)
40012414:	10bfffc4 	addi	r2,r2,-1
40012418:	30800215 	stw	r2,8(r6)
4001241c:	10000a16 	blt	r2,zero,40012448 <_putc_r+0x54>
40012420:	30800017 	ldw	r2,0(r6)
40012424:	11400005 	stb	r5,0(r2)
40012428:	30800017 	ldw	r2,0(r6)
4001242c:	10c00044 	addi	r3,r2,1
40012430:	30c00015 	stw	r3,0(r6)
40012434:	10800003 	ldbu	r2,0(r2)
40012438:	dfc00317 	ldw	ra,12(sp)
4001243c:	dc000217 	ldw	r16,8(sp)
40012440:	dec00404 	addi	sp,sp,16
40012444:	f800283a 	ret
40012448:	30c00617 	ldw	r3,24(r6)
4001244c:	10c00616 	blt	r2,r3,40012468 <_putc_r+0x74>
40012450:	30800017 	ldw	r2,0(r6)
40012454:	00c00284 	movi	r3,10
40012458:	11400005 	stb	r5,0(r2)
4001245c:	30800017 	ldw	r2,0(r6)
40012460:	11400003 	ldbu	r5,0(r2)
40012464:	28fff11e 	bne	r5,r3,4001242c <__alt_data_end+0xc001242c>
40012468:	8009883a 	mov	r4,r16
4001246c:	dfc00317 	ldw	ra,12(sp)
40012470:	dc000217 	ldw	r16,8(sp)
40012474:	dec00404 	addi	sp,sp,16
40012478:	00142b81 	jmpi	400142b8 <__swbuf_r>
4001247c:	d9400015 	stw	r5,0(sp)
40012480:	d9800115 	stw	r6,4(sp)
40012484:	0009e540 	call	40009e54 <__sinit>
40012488:	d9800117 	ldw	r6,4(sp)
4001248c:	d9400017 	ldw	r5,0(sp)
40012490:	003fdf06 	br	40012410 <__alt_data_end+0xc0012410>

40012494 <putc>:
40012494:	009000b4 	movhi	r2,16386
40012498:	defffc04 	addi	sp,sp,-16
4001249c:	108af604 	addi	r2,r2,11224
400124a0:	dc000115 	stw	r16,4(sp)
400124a4:	14000017 	ldw	r16,0(r2)
400124a8:	dc400215 	stw	r17,8(sp)
400124ac:	dfc00315 	stw	ra,12(sp)
400124b0:	2023883a 	mov	r17,r4
400124b4:	80000226 	beq	r16,zero,400124c0 <putc+0x2c>
400124b8:	80800e17 	ldw	r2,56(r16)
400124bc:	10001a26 	beq	r2,zero,40012528 <putc+0x94>
400124c0:	28800217 	ldw	r2,8(r5)
400124c4:	10bfffc4 	addi	r2,r2,-1
400124c8:	28800215 	stw	r2,8(r5)
400124cc:	10000b16 	blt	r2,zero,400124fc <putc+0x68>
400124d0:	28800017 	ldw	r2,0(r5)
400124d4:	14400005 	stb	r17,0(r2)
400124d8:	28800017 	ldw	r2,0(r5)
400124dc:	10c00044 	addi	r3,r2,1
400124e0:	28c00015 	stw	r3,0(r5)
400124e4:	10800003 	ldbu	r2,0(r2)
400124e8:	dfc00317 	ldw	ra,12(sp)
400124ec:	dc400217 	ldw	r17,8(sp)
400124f0:	dc000117 	ldw	r16,4(sp)
400124f4:	dec00404 	addi	sp,sp,16
400124f8:	f800283a 	ret
400124fc:	28c00617 	ldw	r3,24(r5)
40012500:	10c00e16 	blt	r2,r3,4001253c <putc+0xa8>
40012504:	28800017 	ldw	r2,0(r5)
40012508:	01000284 	movi	r4,10
4001250c:	14400005 	stb	r17,0(r2)
40012510:	28800017 	ldw	r2,0(r5)
40012514:	10c00003 	ldbu	r3,0(r2)
40012518:	193ff01e 	bne	r3,r4,400124dc <__alt_data_end+0xc00124dc>
4001251c:	280d883a 	mov	r6,r5
40012520:	180b883a 	mov	r5,r3
40012524:	00000706 	br	40012544 <putc+0xb0>
40012528:	8009883a 	mov	r4,r16
4001252c:	d9400015 	stw	r5,0(sp)
40012530:	0009e540 	call	40009e54 <__sinit>
40012534:	d9400017 	ldw	r5,0(sp)
40012538:	003fe106 	br	400124c0 <__alt_data_end+0xc00124c0>
4001253c:	280d883a 	mov	r6,r5
40012540:	880b883a 	mov	r5,r17
40012544:	8009883a 	mov	r4,r16
40012548:	dfc00317 	ldw	ra,12(sp)
4001254c:	dc400217 	ldw	r17,8(sp)
40012550:	dc000117 	ldw	r16,4(sp)
40012554:	dec00404 	addi	sp,sp,16
40012558:	00142b81 	jmpi	400142b8 <__swbuf_r>

4001255c <_read_r>:
4001255c:	defffd04 	addi	sp,sp,-12
40012560:	2805883a 	mov	r2,r5
40012564:	dc000015 	stw	r16,0(sp)
40012568:	041000b4 	movhi	r16,16386
4001256c:	dc400115 	stw	r17,4(sp)
40012570:	300b883a 	mov	r5,r6
40012574:	841a9404 	addi	r16,r16,27216
40012578:	2023883a 	mov	r17,r4
4001257c:	380d883a 	mov	r6,r7
40012580:	1009883a 	mov	r4,r2
40012584:	dfc00215 	stw	ra,8(sp)
40012588:	80000015 	stw	zero,0(r16)
4001258c:	00163000 	call	40016300 <read>
40012590:	00ffffc4 	movi	r3,-1
40012594:	10c00526 	beq	r2,r3,400125ac <_read_r+0x50>
40012598:	dfc00217 	ldw	ra,8(sp)
4001259c:	dc400117 	ldw	r17,4(sp)
400125a0:	dc000017 	ldw	r16,0(sp)
400125a4:	dec00304 	addi	sp,sp,12
400125a8:	f800283a 	ret
400125ac:	80c00017 	ldw	r3,0(r16)
400125b0:	183ff926 	beq	r3,zero,40012598 <__alt_data_end+0xc0012598>
400125b4:	88c00015 	stw	r3,0(r17)
400125b8:	003ff706 	br	40012598 <__alt_data_end+0xc0012598>

400125bc <_realloc_r>:
400125bc:	defff604 	addi	sp,sp,-40
400125c0:	dc800215 	stw	r18,8(sp)
400125c4:	dfc00915 	stw	ra,36(sp)
400125c8:	df000815 	stw	fp,32(sp)
400125cc:	ddc00715 	stw	r23,28(sp)
400125d0:	dd800615 	stw	r22,24(sp)
400125d4:	dd400515 	stw	r21,20(sp)
400125d8:	dd000415 	stw	r20,16(sp)
400125dc:	dcc00315 	stw	r19,12(sp)
400125e0:	dc400115 	stw	r17,4(sp)
400125e4:	dc000015 	stw	r16,0(sp)
400125e8:	3025883a 	mov	r18,r6
400125ec:	2800b726 	beq	r5,zero,400128cc <_realloc_r+0x310>
400125f0:	282b883a 	mov	r21,r5
400125f4:	2029883a 	mov	r20,r4
400125f8:	00161800 	call	40016180 <__malloc_lock>
400125fc:	a8bfff17 	ldw	r2,-4(r21)
40012600:	043fff04 	movi	r16,-4
40012604:	90c002c4 	addi	r3,r18,11
40012608:	01000584 	movi	r4,22
4001260c:	acfffe04 	addi	r19,r21,-8
40012610:	1420703a 	and	r16,r2,r16
40012614:	20c0332e 	bgeu	r4,r3,400126e4 <_realloc_r+0x128>
40012618:	047ffe04 	movi	r17,-8
4001261c:	1c62703a 	and	r17,r3,r17
40012620:	8807883a 	mov	r3,r17
40012624:	88005816 	blt	r17,zero,40012788 <_realloc_r+0x1cc>
40012628:	8c805736 	bltu	r17,r18,40012788 <_realloc_r+0x1cc>
4001262c:	80c0300e 	bge	r16,r3,400126f0 <_realloc_r+0x134>
40012630:	071000b4 	movhi	fp,16386
40012634:	e7053e04 	addi	fp,fp,5368
40012638:	e1c00217 	ldw	r7,8(fp)
4001263c:	9c09883a 	add	r4,r19,r16
40012640:	22000117 	ldw	r8,4(r4)
40012644:	21c06326 	beq	r4,r7,400127d4 <_realloc_r+0x218>
40012648:	017fff84 	movi	r5,-2
4001264c:	414a703a 	and	r5,r8,r5
40012650:	214b883a 	add	r5,r4,r5
40012654:	29800117 	ldw	r6,4(r5)
40012658:	3180004c 	andi	r6,r6,1
4001265c:	30003f26 	beq	r6,zero,4001275c <_realloc_r+0x1a0>
40012660:	1080004c 	andi	r2,r2,1
40012664:	10008326 	beq	r2,zero,40012874 <_realloc_r+0x2b8>
40012668:	900b883a 	mov	r5,r18
4001266c:	a009883a 	mov	r4,r20
40012670:	000b0f00 	call	4000b0f0 <_malloc_r>
40012674:	1025883a 	mov	r18,r2
40012678:	10011e26 	beq	r2,zero,40012af4 <_realloc_r+0x538>
4001267c:	a93fff17 	ldw	r4,-4(r21)
40012680:	10fffe04 	addi	r3,r2,-8
40012684:	00bfff84 	movi	r2,-2
40012688:	2084703a 	and	r2,r4,r2
4001268c:	9885883a 	add	r2,r19,r2
40012690:	1880ee26 	beq	r3,r2,40012a4c <_realloc_r+0x490>
40012694:	81bfff04 	addi	r6,r16,-4
40012698:	00800904 	movi	r2,36
4001269c:	1180b836 	bltu	r2,r6,40012980 <_realloc_r+0x3c4>
400126a0:	00c004c4 	movi	r3,19
400126a4:	19809636 	bltu	r3,r6,40012900 <_realloc_r+0x344>
400126a8:	9005883a 	mov	r2,r18
400126ac:	a807883a 	mov	r3,r21
400126b0:	19000017 	ldw	r4,0(r3)
400126b4:	11000015 	stw	r4,0(r2)
400126b8:	19000117 	ldw	r4,4(r3)
400126bc:	11000115 	stw	r4,4(r2)
400126c0:	18c00217 	ldw	r3,8(r3)
400126c4:	10c00215 	stw	r3,8(r2)
400126c8:	a80b883a 	mov	r5,r21
400126cc:	a009883a 	mov	r4,r20
400126d0:	000a3800 	call	4000a380 <_free_r>
400126d4:	a009883a 	mov	r4,r20
400126d8:	00161840 	call	40016184 <__malloc_unlock>
400126dc:	9005883a 	mov	r2,r18
400126e0:	00001206 	br	4001272c <_realloc_r+0x170>
400126e4:	00c00404 	movi	r3,16
400126e8:	1823883a 	mov	r17,r3
400126ec:	003fce06 	br	40012628 <__alt_data_end+0xc0012628>
400126f0:	a825883a 	mov	r18,r21
400126f4:	8445c83a 	sub	r2,r16,r17
400126f8:	00c003c4 	movi	r3,15
400126fc:	18802636 	bltu	r3,r2,40012798 <_realloc_r+0x1dc>
40012700:	99800117 	ldw	r6,4(r19)
40012704:	9c07883a 	add	r3,r19,r16
40012708:	3180004c 	andi	r6,r6,1
4001270c:	3420b03a 	or	r16,r6,r16
40012710:	9c000115 	stw	r16,4(r19)
40012714:	18800117 	ldw	r2,4(r3)
40012718:	10800054 	ori	r2,r2,1
4001271c:	18800115 	stw	r2,4(r3)
40012720:	a009883a 	mov	r4,r20
40012724:	00161840 	call	40016184 <__malloc_unlock>
40012728:	9005883a 	mov	r2,r18
4001272c:	dfc00917 	ldw	ra,36(sp)
40012730:	df000817 	ldw	fp,32(sp)
40012734:	ddc00717 	ldw	r23,28(sp)
40012738:	dd800617 	ldw	r22,24(sp)
4001273c:	dd400517 	ldw	r21,20(sp)
40012740:	dd000417 	ldw	r20,16(sp)
40012744:	dcc00317 	ldw	r19,12(sp)
40012748:	dc800217 	ldw	r18,8(sp)
4001274c:	dc400117 	ldw	r17,4(sp)
40012750:	dc000017 	ldw	r16,0(sp)
40012754:	dec00a04 	addi	sp,sp,40
40012758:	f800283a 	ret
4001275c:	017fff04 	movi	r5,-4
40012760:	414a703a 	and	r5,r8,r5
40012764:	814d883a 	add	r6,r16,r5
40012768:	30c01f16 	blt	r6,r3,400127e8 <_realloc_r+0x22c>
4001276c:	20800317 	ldw	r2,12(r4)
40012770:	20c00217 	ldw	r3,8(r4)
40012774:	a825883a 	mov	r18,r21
40012778:	3021883a 	mov	r16,r6
4001277c:	18800315 	stw	r2,12(r3)
40012780:	10c00215 	stw	r3,8(r2)
40012784:	003fdb06 	br	400126f4 <__alt_data_end+0xc00126f4>
40012788:	00800304 	movi	r2,12
4001278c:	a0800015 	stw	r2,0(r20)
40012790:	0005883a 	mov	r2,zero
40012794:	003fe506 	br	4001272c <__alt_data_end+0xc001272c>
40012798:	98c00117 	ldw	r3,4(r19)
4001279c:	9c4b883a 	add	r5,r19,r17
400127a0:	11000054 	ori	r4,r2,1
400127a4:	18c0004c 	andi	r3,r3,1
400127a8:	1c62b03a 	or	r17,r3,r17
400127ac:	9c400115 	stw	r17,4(r19)
400127b0:	29000115 	stw	r4,4(r5)
400127b4:	2885883a 	add	r2,r5,r2
400127b8:	10c00117 	ldw	r3,4(r2)
400127bc:	29400204 	addi	r5,r5,8
400127c0:	a009883a 	mov	r4,r20
400127c4:	18c00054 	ori	r3,r3,1
400127c8:	10c00115 	stw	r3,4(r2)
400127cc:	000a3800 	call	4000a380 <_free_r>
400127d0:	003fd306 	br	40012720 <__alt_data_end+0xc0012720>
400127d4:	017fff04 	movi	r5,-4
400127d8:	414a703a 	and	r5,r8,r5
400127dc:	89800404 	addi	r6,r17,16
400127e0:	8151883a 	add	r8,r16,r5
400127e4:	4180590e 	bge	r8,r6,4001294c <_realloc_r+0x390>
400127e8:	1080004c 	andi	r2,r2,1
400127ec:	103f9e1e 	bne	r2,zero,40012668 <__alt_data_end+0xc0012668>
400127f0:	adbffe17 	ldw	r22,-8(r21)
400127f4:	00bfff04 	movi	r2,-4
400127f8:	9dadc83a 	sub	r22,r19,r22
400127fc:	b1800117 	ldw	r6,4(r22)
40012800:	3084703a 	and	r2,r6,r2
40012804:	20002026 	beq	r4,zero,40012888 <_realloc_r+0x2cc>
40012808:	80af883a 	add	r23,r16,r2
4001280c:	b96f883a 	add	r23,r23,r5
40012810:	21c05f26 	beq	r4,r7,40012990 <_realloc_r+0x3d4>
40012814:	b8c01c16 	blt	r23,r3,40012888 <_realloc_r+0x2cc>
40012818:	20800317 	ldw	r2,12(r4)
4001281c:	20c00217 	ldw	r3,8(r4)
40012820:	81bfff04 	addi	r6,r16,-4
40012824:	01000904 	movi	r4,36
40012828:	18800315 	stw	r2,12(r3)
4001282c:	10c00215 	stw	r3,8(r2)
40012830:	b0c00217 	ldw	r3,8(r22)
40012834:	b0800317 	ldw	r2,12(r22)
40012838:	b4800204 	addi	r18,r22,8
4001283c:	18800315 	stw	r2,12(r3)
40012840:	10c00215 	stw	r3,8(r2)
40012844:	21801b36 	bltu	r4,r6,400128b4 <_realloc_r+0x2f8>
40012848:	008004c4 	movi	r2,19
4001284c:	1180352e 	bgeu	r2,r6,40012924 <_realloc_r+0x368>
40012850:	a8800017 	ldw	r2,0(r21)
40012854:	b0800215 	stw	r2,8(r22)
40012858:	a8800117 	ldw	r2,4(r21)
4001285c:	b0800315 	stw	r2,12(r22)
40012860:	008006c4 	movi	r2,27
40012864:	11807f36 	bltu	r2,r6,40012a64 <_realloc_r+0x4a8>
40012868:	b0800404 	addi	r2,r22,16
4001286c:	ad400204 	addi	r21,r21,8
40012870:	00002d06 	br	40012928 <_realloc_r+0x36c>
40012874:	adbffe17 	ldw	r22,-8(r21)
40012878:	00bfff04 	movi	r2,-4
4001287c:	9dadc83a 	sub	r22,r19,r22
40012880:	b1000117 	ldw	r4,4(r22)
40012884:	2084703a 	and	r2,r4,r2
40012888:	b03f7726 	beq	r22,zero,40012668 <__alt_data_end+0xc0012668>
4001288c:	80af883a 	add	r23,r16,r2
40012890:	b8ff7516 	blt	r23,r3,40012668 <__alt_data_end+0xc0012668>
40012894:	b0800317 	ldw	r2,12(r22)
40012898:	b0c00217 	ldw	r3,8(r22)
4001289c:	81bfff04 	addi	r6,r16,-4
400128a0:	01000904 	movi	r4,36
400128a4:	18800315 	stw	r2,12(r3)
400128a8:	10c00215 	stw	r3,8(r2)
400128ac:	b4800204 	addi	r18,r22,8
400128b0:	21bfe52e 	bgeu	r4,r6,40012848 <__alt_data_end+0xc0012848>
400128b4:	a80b883a 	mov	r5,r21
400128b8:	9009883a 	mov	r4,r18
400128bc:	001129c0 	call	4001129c <memmove>
400128c0:	b821883a 	mov	r16,r23
400128c4:	b027883a 	mov	r19,r22
400128c8:	003f8a06 	br	400126f4 <__alt_data_end+0xc00126f4>
400128cc:	300b883a 	mov	r5,r6
400128d0:	dfc00917 	ldw	ra,36(sp)
400128d4:	df000817 	ldw	fp,32(sp)
400128d8:	ddc00717 	ldw	r23,28(sp)
400128dc:	dd800617 	ldw	r22,24(sp)
400128e0:	dd400517 	ldw	r21,20(sp)
400128e4:	dd000417 	ldw	r20,16(sp)
400128e8:	dcc00317 	ldw	r19,12(sp)
400128ec:	dc800217 	ldw	r18,8(sp)
400128f0:	dc400117 	ldw	r17,4(sp)
400128f4:	dc000017 	ldw	r16,0(sp)
400128f8:	dec00a04 	addi	sp,sp,40
400128fc:	000b0f01 	jmpi	4000b0f0 <_malloc_r>
40012900:	a8c00017 	ldw	r3,0(r21)
40012904:	90c00015 	stw	r3,0(r18)
40012908:	a8c00117 	ldw	r3,4(r21)
4001290c:	90c00115 	stw	r3,4(r18)
40012910:	00c006c4 	movi	r3,27
40012914:	19804536 	bltu	r3,r6,40012a2c <_realloc_r+0x470>
40012918:	90800204 	addi	r2,r18,8
4001291c:	a8c00204 	addi	r3,r21,8
40012920:	003f6306 	br	400126b0 <__alt_data_end+0xc00126b0>
40012924:	9005883a 	mov	r2,r18
40012928:	a8c00017 	ldw	r3,0(r21)
4001292c:	b821883a 	mov	r16,r23
40012930:	b027883a 	mov	r19,r22
40012934:	10c00015 	stw	r3,0(r2)
40012938:	a8c00117 	ldw	r3,4(r21)
4001293c:	10c00115 	stw	r3,4(r2)
40012940:	a8c00217 	ldw	r3,8(r21)
40012944:	10c00215 	stw	r3,8(r2)
40012948:	003f6a06 	br	400126f4 <__alt_data_end+0xc00126f4>
4001294c:	9c67883a 	add	r19,r19,r17
40012950:	4445c83a 	sub	r2,r8,r17
40012954:	e4c00215 	stw	r19,8(fp)
40012958:	10800054 	ori	r2,r2,1
4001295c:	98800115 	stw	r2,4(r19)
40012960:	a8bfff17 	ldw	r2,-4(r21)
40012964:	a009883a 	mov	r4,r20
40012968:	1080004c 	andi	r2,r2,1
4001296c:	1462b03a 	or	r17,r2,r17
40012970:	ac7fff15 	stw	r17,-4(r21)
40012974:	00161840 	call	40016184 <__malloc_unlock>
40012978:	a805883a 	mov	r2,r21
4001297c:	003f6b06 	br	4001272c <__alt_data_end+0xc001272c>
40012980:	a80b883a 	mov	r5,r21
40012984:	9009883a 	mov	r4,r18
40012988:	001129c0 	call	4001129c <memmove>
4001298c:	003f4e06 	br	400126c8 <__alt_data_end+0xc00126c8>
40012990:	89000404 	addi	r4,r17,16
40012994:	b93fbc16 	blt	r23,r4,40012888 <__alt_data_end+0xc0012888>
40012998:	b0800317 	ldw	r2,12(r22)
4001299c:	b0c00217 	ldw	r3,8(r22)
400129a0:	81bfff04 	addi	r6,r16,-4
400129a4:	01000904 	movi	r4,36
400129a8:	18800315 	stw	r2,12(r3)
400129ac:	10c00215 	stw	r3,8(r2)
400129b0:	b4800204 	addi	r18,r22,8
400129b4:	21804336 	bltu	r4,r6,40012ac4 <_realloc_r+0x508>
400129b8:	008004c4 	movi	r2,19
400129bc:	11803f2e 	bgeu	r2,r6,40012abc <_realloc_r+0x500>
400129c0:	a8800017 	ldw	r2,0(r21)
400129c4:	b0800215 	stw	r2,8(r22)
400129c8:	a8800117 	ldw	r2,4(r21)
400129cc:	b0800315 	stw	r2,12(r22)
400129d0:	008006c4 	movi	r2,27
400129d4:	11803f36 	bltu	r2,r6,40012ad4 <_realloc_r+0x518>
400129d8:	b0800404 	addi	r2,r22,16
400129dc:	ad400204 	addi	r21,r21,8
400129e0:	a8c00017 	ldw	r3,0(r21)
400129e4:	10c00015 	stw	r3,0(r2)
400129e8:	a8c00117 	ldw	r3,4(r21)
400129ec:	10c00115 	stw	r3,4(r2)
400129f0:	a8c00217 	ldw	r3,8(r21)
400129f4:	10c00215 	stw	r3,8(r2)
400129f8:	b447883a 	add	r3,r22,r17
400129fc:	bc45c83a 	sub	r2,r23,r17
40012a00:	e0c00215 	stw	r3,8(fp)
40012a04:	10800054 	ori	r2,r2,1
40012a08:	18800115 	stw	r2,4(r3)
40012a0c:	b0800117 	ldw	r2,4(r22)
40012a10:	a009883a 	mov	r4,r20
40012a14:	1080004c 	andi	r2,r2,1
40012a18:	1462b03a 	or	r17,r2,r17
40012a1c:	b4400115 	stw	r17,4(r22)
40012a20:	00161840 	call	40016184 <__malloc_unlock>
40012a24:	9005883a 	mov	r2,r18
40012a28:	003f4006 	br	4001272c <__alt_data_end+0xc001272c>
40012a2c:	a8c00217 	ldw	r3,8(r21)
40012a30:	90c00215 	stw	r3,8(r18)
40012a34:	a8c00317 	ldw	r3,12(r21)
40012a38:	90c00315 	stw	r3,12(r18)
40012a3c:	30801126 	beq	r6,r2,40012a84 <_realloc_r+0x4c8>
40012a40:	90800404 	addi	r2,r18,16
40012a44:	a8c00404 	addi	r3,r21,16
40012a48:	003f1906 	br	400126b0 <__alt_data_end+0xc00126b0>
40012a4c:	90ffff17 	ldw	r3,-4(r18)
40012a50:	00bfff04 	movi	r2,-4
40012a54:	a825883a 	mov	r18,r21
40012a58:	1884703a 	and	r2,r3,r2
40012a5c:	80a1883a 	add	r16,r16,r2
40012a60:	003f2406 	br	400126f4 <__alt_data_end+0xc00126f4>
40012a64:	a8800217 	ldw	r2,8(r21)
40012a68:	b0800415 	stw	r2,16(r22)
40012a6c:	a8800317 	ldw	r2,12(r21)
40012a70:	b0800515 	stw	r2,20(r22)
40012a74:	31000a26 	beq	r6,r4,40012aa0 <_realloc_r+0x4e4>
40012a78:	b0800604 	addi	r2,r22,24
40012a7c:	ad400404 	addi	r21,r21,16
40012a80:	003fa906 	br	40012928 <__alt_data_end+0xc0012928>
40012a84:	a9000417 	ldw	r4,16(r21)
40012a88:	90800604 	addi	r2,r18,24
40012a8c:	a8c00604 	addi	r3,r21,24
40012a90:	91000415 	stw	r4,16(r18)
40012a94:	a9000517 	ldw	r4,20(r21)
40012a98:	91000515 	stw	r4,20(r18)
40012a9c:	003f0406 	br	400126b0 <__alt_data_end+0xc00126b0>
40012aa0:	a8c00417 	ldw	r3,16(r21)
40012aa4:	ad400604 	addi	r21,r21,24
40012aa8:	b0800804 	addi	r2,r22,32
40012aac:	b0c00615 	stw	r3,24(r22)
40012ab0:	a8ffff17 	ldw	r3,-4(r21)
40012ab4:	b0c00715 	stw	r3,28(r22)
40012ab8:	003f9b06 	br	40012928 <__alt_data_end+0xc0012928>
40012abc:	9005883a 	mov	r2,r18
40012ac0:	003fc706 	br	400129e0 <__alt_data_end+0xc00129e0>
40012ac4:	a80b883a 	mov	r5,r21
40012ac8:	9009883a 	mov	r4,r18
40012acc:	001129c0 	call	4001129c <memmove>
40012ad0:	003fc906 	br	400129f8 <__alt_data_end+0xc00129f8>
40012ad4:	a8800217 	ldw	r2,8(r21)
40012ad8:	b0800415 	stw	r2,16(r22)
40012adc:	a8800317 	ldw	r2,12(r21)
40012ae0:	b0800515 	stw	r2,20(r22)
40012ae4:	31000726 	beq	r6,r4,40012b04 <_realloc_r+0x548>
40012ae8:	b0800604 	addi	r2,r22,24
40012aec:	ad400404 	addi	r21,r21,16
40012af0:	003fbb06 	br	400129e0 <__alt_data_end+0xc00129e0>
40012af4:	a009883a 	mov	r4,r20
40012af8:	00161840 	call	40016184 <__malloc_unlock>
40012afc:	0005883a 	mov	r2,zero
40012b00:	003f0a06 	br	4001272c <__alt_data_end+0xc001272c>
40012b04:	a8c00417 	ldw	r3,16(r21)
40012b08:	ad400604 	addi	r21,r21,24
40012b0c:	b0800804 	addi	r2,r22,32
40012b10:	b0c00615 	stw	r3,24(r22)
40012b14:	a8ffff17 	ldw	r3,-4(r21)
40012b18:	b0c00715 	stw	r3,28(r22)
40012b1c:	003fb006 	br	400129e0 <__alt_data_end+0xc00129e0>

40012b20 <__fpclassifyd>:
40012b20:	00a00034 	movhi	r2,32768
40012b24:	10bfffc4 	addi	r2,r2,-1
40012b28:	2884703a 	and	r2,r5,r2
40012b2c:	10000726 	beq	r2,zero,40012b4c <__fpclassifyd+0x2c>
40012b30:	00fffc34 	movhi	r3,65520
40012b34:	019ff834 	movhi	r6,32736
40012b38:	28c7883a 	add	r3,r5,r3
40012b3c:	31bfffc4 	addi	r6,r6,-1
40012b40:	30c00536 	bltu	r6,r3,40012b58 <__fpclassifyd+0x38>
40012b44:	00800104 	movi	r2,4
40012b48:	f800283a 	ret
40012b4c:	2000021e 	bne	r4,zero,40012b58 <__fpclassifyd+0x38>
40012b50:	00800084 	movi	r2,2
40012b54:	f800283a 	ret
40012b58:	00dffc34 	movhi	r3,32752
40012b5c:	019ff834 	movhi	r6,32736
40012b60:	28cb883a 	add	r5,r5,r3
40012b64:	31bfffc4 	addi	r6,r6,-1
40012b68:	317ff62e 	bgeu	r6,r5,40012b44 <__alt_data_end+0xc0012b44>
40012b6c:	01400434 	movhi	r5,16
40012b70:	297fffc4 	addi	r5,r5,-1
40012b74:	28800236 	bltu	r5,r2,40012b80 <__fpclassifyd+0x60>
40012b78:	008000c4 	movi	r2,3
40012b7c:	f800283a 	ret
40012b80:	10c00226 	beq	r2,r3,40012b8c <__fpclassifyd+0x6c>
40012b84:	0005883a 	mov	r2,zero
40012b88:	f800283a 	ret
40012b8c:	2005003a 	cmpeq	r2,r4,zero
40012b90:	f800283a 	ret

40012b94 <strcmp>:
40012b94:	2144b03a 	or	r2,r4,r5
40012b98:	108000cc 	andi	r2,r2,3
40012b9c:	1000171e 	bne	r2,zero,40012bfc <strcmp+0x68>
40012ba0:	20800017 	ldw	r2,0(r4)
40012ba4:	28c00017 	ldw	r3,0(r5)
40012ba8:	10c0141e 	bne	r2,r3,40012bfc <strcmp+0x68>
40012bac:	027fbff4 	movhi	r9,65279
40012bb0:	4a7fbfc4 	addi	r9,r9,-257
40012bb4:	0086303a 	nor	r3,zero,r2
40012bb8:	02202074 	movhi	r8,32897
40012bbc:	1245883a 	add	r2,r2,r9
40012bc0:	42202004 	addi	r8,r8,-32640
40012bc4:	10c4703a 	and	r2,r2,r3
40012bc8:	1204703a 	and	r2,r2,r8
40012bcc:	10000226 	beq	r2,zero,40012bd8 <strcmp+0x44>
40012bd0:	00002306 	br	40012c60 <strcmp+0xcc>
40012bd4:	1000221e 	bne	r2,zero,40012c60 <strcmp+0xcc>
40012bd8:	21000104 	addi	r4,r4,4
40012bdc:	20c00017 	ldw	r3,0(r4)
40012be0:	29400104 	addi	r5,r5,4
40012be4:	29800017 	ldw	r6,0(r5)
40012be8:	1a4f883a 	add	r7,r3,r9
40012bec:	00c4303a 	nor	r2,zero,r3
40012bf0:	3884703a 	and	r2,r7,r2
40012bf4:	1204703a 	and	r2,r2,r8
40012bf8:	19bff626 	beq	r3,r6,40012bd4 <__alt_data_end+0xc0012bd4>
40012bfc:	20800003 	ldbu	r2,0(r4)
40012c00:	10c03fcc 	andi	r3,r2,255
40012c04:	18c0201c 	xori	r3,r3,128
40012c08:	18ffe004 	addi	r3,r3,-128
40012c0c:	18000c26 	beq	r3,zero,40012c40 <strcmp+0xac>
40012c10:	29800007 	ldb	r6,0(r5)
40012c14:	19800326 	beq	r3,r6,40012c24 <strcmp+0x90>
40012c18:	00001306 	br	40012c68 <strcmp+0xd4>
40012c1c:	29800007 	ldb	r6,0(r5)
40012c20:	11800b1e 	bne	r2,r6,40012c50 <strcmp+0xbc>
40012c24:	21000044 	addi	r4,r4,1
40012c28:	20c00003 	ldbu	r3,0(r4)
40012c2c:	29400044 	addi	r5,r5,1
40012c30:	18803fcc 	andi	r2,r3,255
40012c34:	1080201c 	xori	r2,r2,128
40012c38:	10bfe004 	addi	r2,r2,-128
40012c3c:	103ff71e 	bne	r2,zero,40012c1c <__alt_data_end+0xc0012c1c>
40012c40:	0007883a 	mov	r3,zero
40012c44:	28800003 	ldbu	r2,0(r5)
40012c48:	1885c83a 	sub	r2,r3,r2
40012c4c:	f800283a 	ret
40012c50:	28800003 	ldbu	r2,0(r5)
40012c54:	18c03fcc 	andi	r3,r3,255
40012c58:	1885c83a 	sub	r2,r3,r2
40012c5c:	f800283a 	ret
40012c60:	0005883a 	mov	r2,zero
40012c64:	f800283a 	ret
40012c68:	10c03fcc 	andi	r3,r2,255
40012c6c:	003ff506 	br	40012c44 <__alt_data_end+0xc0012c44>

40012c70 <__sprint_r.part.0>:
40012c70:	28801917 	ldw	r2,100(r5)
40012c74:	defff604 	addi	sp,sp,-40
40012c78:	dd400515 	stw	r21,20(sp)
40012c7c:	dfc00915 	stw	ra,36(sp)
40012c80:	df000815 	stw	fp,32(sp)
40012c84:	ddc00715 	stw	r23,28(sp)
40012c88:	dd800615 	stw	r22,24(sp)
40012c8c:	dd000415 	stw	r20,16(sp)
40012c90:	dcc00315 	stw	r19,12(sp)
40012c94:	dc800215 	stw	r18,8(sp)
40012c98:	dc400115 	stw	r17,4(sp)
40012c9c:	dc000015 	stw	r16,0(sp)
40012ca0:	1088000c 	andi	r2,r2,8192
40012ca4:	302b883a 	mov	r21,r6
40012ca8:	10002e26 	beq	r2,zero,40012d64 <__sprint_r.part.0+0xf4>
40012cac:	30800217 	ldw	r2,8(r6)
40012cb0:	35800017 	ldw	r22,0(r6)
40012cb4:	10002926 	beq	r2,zero,40012d5c <__sprint_r.part.0+0xec>
40012cb8:	2827883a 	mov	r19,r5
40012cbc:	2029883a 	mov	r20,r4
40012cc0:	b5c00104 	addi	r23,r22,4
40012cc4:	04bfffc4 	movi	r18,-1
40012cc8:	bc400017 	ldw	r17,0(r23)
40012ccc:	b4000017 	ldw	r16,0(r22)
40012cd0:	0039883a 	mov	fp,zero
40012cd4:	8822d0ba 	srli	r17,r17,2
40012cd8:	8800031e 	bne	r17,zero,40012ce8 <__sprint_r.part.0+0x78>
40012cdc:	00001806 	br	40012d40 <__sprint_r.part.0+0xd0>
40012ce0:	84000104 	addi	r16,r16,4
40012ce4:	8f001526 	beq	r17,fp,40012d3c <__sprint_r.part.0+0xcc>
40012ce8:	81400017 	ldw	r5,0(r16)
40012cec:	980d883a 	mov	r6,r19
40012cf0:	a009883a 	mov	r4,r20
40012cf4:	00145740 	call	40014574 <_fputwc_r>
40012cf8:	e7000044 	addi	fp,fp,1
40012cfc:	14bff81e 	bne	r2,r18,40012ce0 <__alt_data_end+0xc0012ce0>
40012d00:	9005883a 	mov	r2,r18
40012d04:	a8000215 	stw	zero,8(r21)
40012d08:	a8000115 	stw	zero,4(r21)
40012d0c:	dfc00917 	ldw	ra,36(sp)
40012d10:	df000817 	ldw	fp,32(sp)
40012d14:	ddc00717 	ldw	r23,28(sp)
40012d18:	dd800617 	ldw	r22,24(sp)
40012d1c:	dd400517 	ldw	r21,20(sp)
40012d20:	dd000417 	ldw	r20,16(sp)
40012d24:	dcc00317 	ldw	r19,12(sp)
40012d28:	dc800217 	ldw	r18,8(sp)
40012d2c:	dc400117 	ldw	r17,4(sp)
40012d30:	dc000017 	ldw	r16,0(sp)
40012d34:	dec00a04 	addi	sp,sp,40
40012d38:	f800283a 	ret
40012d3c:	a8800217 	ldw	r2,8(r21)
40012d40:	8c63883a 	add	r17,r17,r17
40012d44:	8c63883a 	add	r17,r17,r17
40012d48:	1445c83a 	sub	r2,r2,r17
40012d4c:	a8800215 	stw	r2,8(r21)
40012d50:	b5800204 	addi	r22,r22,8
40012d54:	bdc00204 	addi	r23,r23,8
40012d58:	103fdb1e 	bne	r2,zero,40012cc8 <__alt_data_end+0xc0012cc8>
40012d5c:	0005883a 	mov	r2,zero
40012d60:	003fe806 	br	40012d04 <__alt_data_end+0xc0012d04>
40012d64:	0010b6c0 	call	40010b6c <__sfvwrite_r>
40012d68:	003fe606 	br	40012d04 <__alt_data_end+0xc0012d04>

40012d6c <__sprint_r>:
40012d6c:	30c00217 	ldw	r3,8(r6)
40012d70:	18000126 	beq	r3,zero,40012d78 <__sprint_r+0xc>
40012d74:	0012c701 	jmpi	40012c70 <__sprint_r.part.0>
40012d78:	30000115 	stw	zero,4(r6)
40012d7c:	0005883a 	mov	r2,zero
40012d80:	f800283a 	ret

40012d84 <___vfiprintf_internal_r>:
40012d84:	deffc904 	addi	sp,sp,-220
40012d88:	df003515 	stw	fp,212(sp)
40012d8c:	dd003115 	stw	r20,196(sp)
40012d90:	dfc03615 	stw	ra,216(sp)
40012d94:	ddc03415 	stw	r23,208(sp)
40012d98:	dd803315 	stw	r22,204(sp)
40012d9c:	dd403215 	stw	r21,200(sp)
40012da0:	dcc03015 	stw	r19,192(sp)
40012da4:	dc802f15 	stw	r18,188(sp)
40012da8:	dc402e15 	stw	r17,184(sp)
40012dac:	dc002d15 	stw	r16,180(sp)
40012db0:	d9002015 	stw	r4,128(sp)
40012db4:	d9c02215 	stw	r7,136(sp)
40012db8:	2829883a 	mov	r20,r5
40012dbc:	3039883a 	mov	fp,r6
40012dc0:	20000226 	beq	r4,zero,40012dcc <___vfiprintf_internal_r+0x48>
40012dc4:	20800e17 	ldw	r2,56(r4)
40012dc8:	1000cf26 	beq	r2,zero,40013108 <___vfiprintf_internal_r+0x384>
40012dcc:	a080030b 	ldhu	r2,12(r20)
40012dd0:	10c8000c 	andi	r3,r2,8192
40012dd4:	1800061e 	bne	r3,zero,40012df0 <___vfiprintf_internal_r+0x6c>
40012dd8:	a1001917 	ldw	r4,100(r20)
40012ddc:	00f7ffc4 	movi	r3,-8193
40012de0:	10880014 	ori	r2,r2,8192
40012de4:	20c6703a 	and	r3,r4,r3
40012de8:	a080030d 	sth	r2,12(r20)
40012dec:	a0c01915 	stw	r3,100(r20)
40012df0:	10c0020c 	andi	r3,r2,8
40012df4:	1800a926 	beq	r3,zero,4001309c <___vfiprintf_internal_r+0x318>
40012df8:	a0c00417 	ldw	r3,16(r20)
40012dfc:	1800a726 	beq	r3,zero,4001309c <___vfiprintf_internal_r+0x318>
40012e00:	1080068c 	andi	r2,r2,26
40012e04:	00c00284 	movi	r3,10
40012e08:	10c0ac26 	beq	r2,r3,400130bc <___vfiprintf_internal_r+0x338>
40012e0c:	da801a04 	addi	r10,sp,104
40012e10:	da801e15 	stw	r10,120(sp)
40012e14:	d8801e17 	ldw	r2,120(sp)
40012e18:	da8019c4 	addi	r10,sp,103
40012e1c:	059000b4 	movhi	r22,16386
40012e20:	05d000b4 	movhi	r23,16386
40012e24:	da801f15 	stw	r10,124(sp)
40012e28:	1295c83a 	sub	r10,r2,r10
40012e2c:	b5bb8f04 	addi	r22,r22,-4548
40012e30:	bdfb8b04 	addi	r23,r23,-4564
40012e34:	dec01a15 	stw	sp,104(sp)
40012e38:	d8001c15 	stw	zero,112(sp)
40012e3c:	d8001b15 	stw	zero,108(sp)
40012e40:	d8002615 	stw	zero,152(sp)
40012e44:	d8002315 	stw	zero,140(sp)
40012e48:	da802715 	stw	r10,156(sp)
40012e4c:	d811883a 	mov	r8,sp
40012e50:	dd002115 	stw	r20,132(sp)
40012e54:	e021883a 	mov	r16,fp
40012e58:	80800007 	ldb	r2,0(r16)
40012e5c:	1003ea26 	beq	r2,zero,40013e08 <___vfiprintf_internal_r+0x1084>
40012e60:	00c00944 	movi	r3,37
40012e64:	8025883a 	mov	r18,r16
40012e68:	10c0021e 	bne	r2,r3,40012e74 <___vfiprintf_internal_r+0xf0>
40012e6c:	00001606 	br	40012ec8 <___vfiprintf_internal_r+0x144>
40012e70:	10c00326 	beq	r2,r3,40012e80 <___vfiprintf_internal_r+0xfc>
40012e74:	94800044 	addi	r18,r18,1
40012e78:	90800007 	ldb	r2,0(r18)
40012e7c:	103ffc1e 	bne	r2,zero,40012e70 <__alt_data_end+0xc0012e70>
40012e80:	9423c83a 	sub	r17,r18,r16
40012e84:	88001026 	beq	r17,zero,40012ec8 <___vfiprintf_internal_r+0x144>
40012e88:	d8c01c17 	ldw	r3,112(sp)
40012e8c:	d8801b17 	ldw	r2,108(sp)
40012e90:	44000015 	stw	r16,0(r8)
40012e94:	88c7883a 	add	r3,r17,r3
40012e98:	10800044 	addi	r2,r2,1
40012e9c:	44400115 	stw	r17,4(r8)
40012ea0:	d8c01c15 	stw	r3,112(sp)
40012ea4:	d8801b15 	stw	r2,108(sp)
40012ea8:	010001c4 	movi	r4,7
40012eac:	2080760e 	bge	r4,r2,40013088 <___vfiprintf_internal_r+0x304>
40012eb0:	1803821e 	bne	r3,zero,40013cbc <___vfiprintf_internal_r+0xf38>
40012eb4:	da802317 	ldw	r10,140(sp)
40012eb8:	d8001b15 	stw	zero,108(sp)
40012ebc:	d811883a 	mov	r8,sp
40012ec0:	5455883a 	add	r10,r10,r17
40012ec4:	da802315 	stw	r10,140(sp)
40012ec8:	90800007 	ldb	r2,0(r18)
40012ecc:	10044626 	beq	r2,zero,40013fe8 <___vfiprintf_internal_r+0x1264>
40012ed0:	90c00047 	ldb	r3,1(r18)
40012ed4:	94000044 	addi	r16,r18,1
40012ed8:	d8001d85 	stb	zero,118(sp)
40012edc:	0009883a 	mov	r4,zero
40012ee0:	000f883a 	mov	r7,zero
40012ee4:	027fffc4 	movi	r9,-1
40012ee8:	0023883a 	mov	r17,zero
40012eec:	0029883a 	mov	r20,zero
40012ef0:	01401604 	movi	r5,88
40012ef4:	01800244 	movi	r6,9
40012ef8:	03400a84 	movi	r13,42
40012efc:	03001b04 	movi	r12,108
40012f00:	84000044 	addi	r16,r16,1
40012f04:	18bff804 	addi	r2,r3,-32
40012f08:	28827336 	bltu	r5,r2,400138d8 <___vfiprintf_internal_r+0xb54>
40012f0c:	100490ba 	slli	r2,r2,2
40012f10:	02900074 	movhi	r10,16385
40012f14:	528bc904 	addi	r10,r10,12068
40012f18:	1285883a 	add	r2,r2,r10
40012f1c:	10800017 	ldw	r2,0(r2)
40012f20:	1000683a 	jmp	r2
40012f24:	4001360c 	andi	zero,r8,1240
40012f28:	400138d8 	cmpnei	zero,r8,1251
40012f2c:	400138d8 	cmpnei	zero,r8,1251
40012f30:	4001362c 	andhi	zero,r8,1240
40012f34:	400138d8 	cmpnei	zero,r8,1251
40012f38:	400138d8 	cmpnei	zero,r8,1251
40012f3c:	400138d8 	cmpnei	zero,r8,1251
40012f40:	400138d8 	cmpnei	zero,r8,1251
40012f44:	400138d8 	cmpnei	zero,r8,1251
40012f48:	400138d8 	cmpnei	zero,r8,1251
40012f4c:	40013814 	ori	zero,r8,1248
40012f50:	40013830 	cmpltui	zero,r8,1248
40012f54:	400138d8 	cmpnei	zero,r8,1251
40012f58:	40013118 	cmpnei	zero,r8,1220
40012f5c:	40013840 	call	44001384 <__alt_heap_start+0x3fbba78>
40012f60:	400138d8 	cmpnei	zero,r8,1251
40012f64:	40013638 	rdprs	zero,r8,1240
40012f68:	40013644 	addi	zero,r8,1241
40012f6c:	40013644 	addi	zero,r8,1241
40012f70:	40013644 	addi	zero,r8,1241
40012f74:	40013644 	addi	zero,r8,1241
40012f78:	40013644 	addi	zero,r8,1241
40012f7c:	40013644 	addi	zero,r8,1241
40012f80:	40013644 	addi	zero,r8,1241
40012f84:	40013644 	addi	zero,r8,1241
40012f88:	40013644 	addi	zero,r8,1241
40012f8c:	400138d8 	cmpnei	zero,r8,1251
40012f90:	400138d8 	cmpnei	zero,r8,1251
40012f94:	400138d8 	cmpnei	zero,r8,1251
40012f98:	400138d8 	cmpnei	zero,r8,1251
40012f9c:	400138d8 	cmpnei	zero,r8,1251
40012fa0:	400138d8 	cmpnei	zero,r8,1251
40012fa4:	400138d8 	cmpnei	zero,r8,1251
40012fa8:	400138d8 	cmpnei	zero,r8,1251
40012fac:	400138d8 	cmpnei	zero,r8,1251
40012fb0:	400138d8 	cmpnei	zero,r8,1251
40012fb4:	40013670 	cmpltui	zero,r8,1241
40012fb8:	400138d8 	cmpnei	zero,r8,1251
40012fbc:	400138d8 	cmpnei	zero,r8,1251
40012fc0:	400138d8 	cmpnei	zero,r8,1251
40012fc4:	400138d8 	cmpnei	zero,r8,1251
40012fc8:	400138d8 	cmpnei	zero,r8,1251
40012fcc:	400138d8 	cmpnei	zero,r8,1251
40012fd0:	400138d8 	cmpnei	zero,r8,1251
40012fd4:	400138d8 	cmpnei	zero,r8,1251
40012fd8:	400138d8 	cmpnei	zero,r8,1251
40012fdc:	400138d8 	cmpnei	zero,r8,1251
40012fe0:	400136a8 	cmpgeui	zero,r8,1242
40012fe4:	400138d8 	cmpnei	zero,r8,1251
40012fe8:	400138d8 	cmpnei	zero,r8,1251
40012fec:	400138d8 	cmpnei	zero,r8,1251
40012ff0:	400138d8 	cmpnei	zero,r8,1251
40012ff4:	400138d8 	cmpnei	zero,r8,1251
40012ff8:	40013700 	call	44001370 <__alt_heap_start+0x3fbba64>
40012ffc:	400138d8 	cmpnei	zero,r8,1251
40013000:	400138d8 	cmpnei	zero,r8,1251
40013004:	40013770 	cmpltui	zero,r8,1245
40013008:	400138d8 	cmpnei	zero,r8,1251
4001300c:	400138d8 	cmpnei	zero,r8,1251
40013010:	400138d8 	cmpnei	zero,r8,1251
40013014:	400138d8 	cmpnei	zero,r8,1251
40013018:	400138d8 	cmpnei	zero,r8,1251
4001301c:	400138d8 	cmpnei	zero,r8,1251
40013020:	400138d8 	cmpnei	zero,r8,1251
40013024:	400138d8 	cmpnei	zero,r8,1251
40013028:	400138d8 	cmpnei	zero,r8,1251
4001302c:	400138d8 	cmpnei	zero,r8,1251
40013030:	4001351c 	xori	zero,r8,1236
40013034:	40013548 	cmpgei	zero,r8,1237
40013038:	400138d8 	cmpnei	zero,r8,1251
4001303c:	400138d8 	cmpnei	zero,r8,1251
40013040:	400138d8 	cmpnei	zero,r8,1251
40013044:	40013880 	call	44001388 <__alt_heap_start+0x3fbba7c>
40013048:	40013548 	cmpgei	zero,r8,1237
4001304c:	400138d8 	cmpnei	zero,r8,1251
40013050:	400138d8 	cmpnei	zero,r8,1251
40013054:	400133dc 	xori	zero,r8,1231
40013058:	400138d8 	cmpnei	zero,r8,1251
4001305c:	400133ec 	andhi	zero,r8,1231
40013060:	40013428 	cmpgeui	zero,r8,1232
40013064:	40013124 	muli	zero,r8,1220
40013068:	400133d0 	cmplti	zero,r8,1231
4001306c:	400138d8 	cmpnei	zero,r8,1251
40013070:	400137ac 	andhi	zero,r8,1246
40013074:	400138d8 	cmpnei	zero,r8,1251
40013078:	40013804 	addi	zero,r8,1248
4001307c:	400138d8 	cmpnei	zero,r8,1251
40013080:	400138d8 	cmpnei	zero,r8,1251
40013084:	400134c8 	cmpgei	zero,r8,1235
40013088:	42000204 	addi	r8,r8,8
4001308c:	da802317 	ldw	r10,140(sp)
40013090:	5455883a 	add	r10,r10,r17
40013094:	da802315 	stw	r10,140(sp)
40013098:	003f8b06 	br	40012ec8 <__alt_data_end+0xc0012ec8>
4001309c:	d9002017 	ldw	r4,128(sp)
400130a0:	a00b883a 	mov	r5,r20
400130a4:	000edbc0 	call	4000edbc <__swsetup_r>
400130a8:	1003b11e 	bne	r2,zero,40013f70 <___vfiprintf_internal_r+0x11ec>
400130ac:	a080030b 	ldhu	r2,12(r20)
400130b0:	00c00284 	movi	r3,10
400130b4:	1080068c 	andi	r2,r2,26
400130b8:	10ff541e 	bne	r2,r3,40012e0c <__alt_data_end+0xc0012e0c>
400130bc:	a080038f 	ldh	r2,14(r20)
400130c0:	103f5216 	blt	r2,zero,40012e0c <__alt_data_end+0xc0012e0c>
400130c4:	d9c02217 	ldw	r7,136(sp)
400130c8:	d9002017 	ldw	r4,128(sp)
400130cc:	e00d883a 	mov	r6,fp
400130d0:	a00b883a 	mov	r5,r20
400130d4:	00141fc0 	call	400141fc <__sbprintf>
400130d8:	dfc03617 	ldw	ra,216(sp)
400130dc:	df003517 	ldw	fp,212(sp)
400130e0:	ddc03417 	ldw	r23,208(sp)
400130e4:	dd803317 	ldw	r22,204(sp)
400130e8:	dd403217 	ldw	r21,200(sp)
400130ec:	dd003117 	ldw	r20,196(sp)
400130f0:	dcc03017 	ldw	r19,192(sp)
400130f4:	dc802f17 	ldw	r18,188(sp)
400130f8:	dc402e17 	ldw	r17,184(sp)
400130fc:	dc002d17 	ldw	r16,180(sp)
40013100:	dec03704 	addi	sp,sp,220
40013104:	f800283a 	ret
40013108:	0009e540 	call	40009e54 <__sinit>
4001310c:	003f2f06 	br	40012dcc <__alt_data_end+0xc0012dcc>
40013110:	0463c83a 	sub	r17,zero,r17
40013114:	d8802215 	stw	r2,136(sp)
40013118:	a5000114 	ori	r20,r20,4
4001311c:	80c00007 	ldb	r3,0(r16)
40013120:	003f7706 	br	40012f00 <__alt_data_end+0xc0012f00>
40013124:	00800c04 	movi	r2,48
40013128:	da802217 	ldw	r10,136(sp)
4001312c:	d8801d05 	stb	r2,116(sp)
40013130:	00801e04 	movi	r2,120
40013134:	d8801d45 	stb	r2,117(sp)
40013138:	d8001d85 	stb	zero,118(sp)
4001313c:	50c00104 	addi	r3,r10,4
40013140:	54800017 	ldw	r18,0(r10)
40013144:	0027883a 	mov	r19,zero
40013148:	a0800094 	ori	r2,r20,2
4001314c:	48030b16 	blt	r9,zero,40013d7c <___vfiprintf_internal_r+0xff8>
40013150:	00bfdfc4 	movi	r2,-129
40013154:	a096703a 	and	r11,r20,r2
40013158:	d8c02215 	stw	r3,136(sp)
4001315c:	5d000094 	ori	r20,r11,2
40013160:	90032b1e 	bne	r18,zero,40013e10 <___vfiprintf_internal_r+0x108c>
40013164:	009000b4 	movhi	r2,16386
40013168:	10bb2c04 	addi	r2,r2,-4944
4001316c:	d8802615 	stw	r2,152(sp)
40013170:	0039883a 	mov	fp,zero
40013174:	48017b1e 	bne	r9,zero,40013764 <___vfiprintf_internal_r+0x9e0>
40013178:	0013883a 	mov	r9,zero
4001317c:	0027883a 	mov	r19,zero
40013180:	dd401a04 	addi	r21,sp,104
40013184:	4825883a 	mov	r18,r9
40013188:	4cc0010e 	bge	r9,r19,40013190 <___vfiprintf_internal_r+0x40c>
4001318c:	9825883a 	mov	r18,r19
40013190:	e7003fcc 	andi	fp,fp,255
40013194:	e700201c 	xori	fp,fp,128
40013198:	e73fe004 	addi	fp,fp,-128
4001319c:	e0000126 	beq	fp,zero,400131a4 <___vfiprintf_internal_r+0x420>
400131a0:	94800044 	addi	r18,r18,1
400131a4:	a380008c 	andi	r14,r20,2
400131a8:	70000126 	beq	r14,zero,400131b0 <___vfiprintf_internal_r+0x42c>
400131ac:	94800084 	addi	r18,r18,2
400131b0:	a700210c 	andi	fp,r20,132
400131b4:	e001df1e 	bne	fp,zero,40013934 <___vfiprintf_internal_r+0xbb0>
400131b8:	8c87c83a 	sub	r3,r17,r18
400131bc:	00c1dd0e 	bge	zero,r3,40013934 <___vfiprintf_internal_r+0xbb0>
400131c0:	01c00404 	movi	r7,16
400131c4:	d8801c17 	ldw	r2,112(sp)
400131c8:	38c3ad0e 	bge	r7,r3,40014080 <___vfiprintf_internal_r+0x12fc>
400131cc:	029000b4 	movhi	r10,16386
400131d0:	52bb8f04 	addi	r10,r10,-4548
400131d4:	dc002915 	stw	r16,164(sp)
400131d8:	d9801b17 	ldw	r6,108(sp)
400131dc:	da802415 	stw	r10,144(sp)
400131e0:	03c001c4 	movi	r15,7
400131e4:	da402515 	stw	r9,148(sp)
400131e8:	db802815 	stw	r14,160(sp)
400131ec:	1821883a 	mov	r16,r3
400131f0:	00000506 	br	40013208 <___vfiprintf_internal_r+0x484>
400131f4:	31400084 	addi	r5,r6,2
400131f8:	42000204 	addi	r8,r8,8
400131fc:	200d883a 	mov	r6,r4
40013200:	843ffc04 	addi	r16,r16,-16
40013204:	3c000d0e 	bge	r7,r16,4001323c <___vfiprintf_internal_r+0x4b8>
40013208:	10800404 	addi	r2,r2,16
4001320c:	31000044 	addi	r4,r6,1
40013210:	45800015 	stw	r22,0(r8)
40013214:	41c00115 	stw	r7,4(r8)
40013218:	d8801c15 	stw	r2,112(sp)
4001321c:	d9001b15 	stw	r4,108(sp)
40013220:	793ff40e 	bge	r15,r4,400131f4 <__alt_data_end+0xc00131f4>
40013224:	1001b51e 	bne	r2,zero,400138fc <___vfiprintf_internal_r+0xb78>
40013228:	843ffc04 	addi	r16,r16,-16
4001322c:	000d883a 	mov	r6,zero
40013230:	01400044 	movi	r5,1
40013234:	d811883a 	mov	r8,sp
40013238:	3c3ff316 	blt	r7,r16,40013208 <__alt_data_end+0xc0013208>
4001323c:	8007883a 	mov	r3,r16
40013240:	da402517 	ldw	r9,148(sp)
40013244:	db802817 	ldw	r14,160(sp)
40013248:	dc002917 	ldw	r16,164(sp)
4001324c:	da802417 	ldw	r10,144(sp)
40013250:	1885883a 	add	r2,r3,r2
40013254:	40c00115 	stw	r3,4(r8)
40013258:	42800015 	stw	r10,0(r8)
4001325c:	d8801c15 	stw	r2,112(sp)
40013260:	d9401b15 	stw	r5,108(sp)
40013264:	00c001c4 	movi	r3,7
40013268:	19426016 	blt	r3,r5,40013bec <___vfiprintf_internal_r+0xe68>
4001326c:	d8c01d87 	ldb	r3,118(sp)
40013270:	42000204 	addi	r8,r8,8
40013274:	29000044 	addi	r4,r5,1
40013278:	1801b31e 	bne	r3,zero,40013948 <___vfiprintf_internal_r+0xbc4>
4001327c:	7001c026 	beq	r14,zero,40013980 <___vfiprintf_internal_r+0xbfc>
40013280:	d8c01d04 	addi	r3,sp,116
40013284:	10800084 	addi	r2,r2,2
40013288:	40c00015 	stw	r3,0(r8)
4001328c:	00c00084 	movi	r3,2
40013290:	40c00115 	stw	r3,4(r8)
40013294:	d8801c15 	stw	r2,112(sp)
40013298:	d9001b15 	stw	r4,108(sp)
4001329c:	00c001c4 	movi	r3,7
400132a0:	1902650e 	bge	r3,r4,40013c38 <___vfiprintf_internal_r+0xeb4>
400132a4:	10029a1e 	bne	r2,zero,40013d10 <___vfiprintf_internal_r+0xf8c>
400132a8:	00c02004 	movi	r3,128
400132ac:	01000044 	movi	r4,1
400132b0:	000b883a 	mov	r5,zero
400132b4:	d811883a 	mov	r8,sp
400132b8:	e0c1b31e 	bne	fp,r3,40013988 <___vfiprintf_internal_r+0xc04>
400132bc:	8cb9c83a 	sub	fp,r17,r18
400132c0:	0701b10e 	bge	zero,fp,40013988 <___vfiprintf_internal_r+0xc04>
400132c4:	01c00404 	movi	r7,16
400132c8:	3f03890e 	bge	r7,fp,400140f0 <___vfiprintf_internal_r+0x136c>
400132cc:	00d000b4 	movhi	r3,16386
400132d0:	18fb8b04 	addi	r3,r3,-4564
400132d4:	d8c02415 	stw	r3,144(sp)
400132d8:	8007883a 	mov	r3,r16
400132dc:	034001c4 	movi	r13,7
400132e0:	e021883a 	mov	r16,fp
400132e4:	da402515 	stw	r9,148(sp)
400132e8:	1839883a 	mov	fp,r3
400132ec:	00000506 	br	40013304 <___vfiprintf_internal_r+0x580>
400132f0:	29800084 	addi	r6,r5,2
400132f4:	42000204 	addi	r8,r8,8
400132f8:	180b883a 	mov	r5,r3
400132fc:	843ffc04 	addi	r16,r16,-16
40013300:	3c000d0e 	bge	r7,r16,40013338 <___vfiprintf_internal_r+0x5b4>
40013304:	10800404 	addi	r2,r2,16
40013308:	28c00044 	addi	r3,r5,1
4001330c:	45c00015 	stw	r23,0(r8)
40013310:	41c00115 	stw	r7,4(r8)
40013314:	d8801c15 	stw	r2,112(sp)
40013318:	d8c01b15 	stw	r3,108(sp)
4001331c:	68fff40e 	bge	r13,r3,400132f0 <__alt_data_end+0xc00132f0>
40013320:	1002241e 	bne	r2,zero,40013bb4 <___vfiprintf_internal_r+0xe30>
40013324:	843ffc04 	addi	r16,r16,-16
40013328:	01800044 	movi	r6,1
4001332c:	000b883a 	mov	r5,zero
40013330:	d811883a 	mov	r8,sp
40013334:	3c3ff316 	blt	r7,r16,40013304 <__alt_data_end+0xc0013304>
40013338:	da402517 	ldw	r9,148(sp)
4001333c:	e007883a 	mov	r3,fp
40013340:	8039883a 	mov	fp,r16
40013344:	1821883a 	mov	r16,r3
40013348:	d8c02417 	ldw	r3,144(sp)
4001334c:	1705883a 	add	r2,r2,fp
40013350:	47000115 	stw	fp,4(r8)
40013354:	40c00015 	stw	r3,0(r8)
40013358:	d8801c15 	stw	r2,112(sp)
4001335c:	d9801b15 	stw	r6,108(sp)
40013360:	00c001c4 	movi	r3,7
40013364:	19827616 	blt	r3,r6,40013d40 <___vfiprintf_internal_r+0xfbc>
40013368:	4cf9c83a 	sub	fp,r9,r19
4001336c:	42000204 	addi	r8,r8,8
40013370:	31000044 	addi	r4,r6,1
40013374:	300b883a 	mov	r5,r6
40013378:	07018516 	blt	zero,fp,40013990 <___vfiprintf_internal_r+0xc0c>
4001337c:	9885883a 	add	r2,r19,r2
40013380:	45400015 	stw	r21,0(r8)
40013384:	44c00115 	stw	r19,4(r8)
40013388:	d8801c15 	stw	r2,112(sp)
4001338c:	d9001b15 	stw	r4,108(sp)
40013390:	00c001c4 	movi	r3,7
40013394:	1901dd0e 	bge	r3,r4,40013b0c <___vfiprintf_internal_r+0xd88>
40013398:	1002401e 	bne	r2,zero,40013c9c <___vfiprintf_internal_r+0xf18>
4001339c:	d8001b15 	stw	zero,108(sp)
400133a0:	a2c0010c 	andi	r11,r20,4
400133a4:	58000226 	beq	r11,zero,400133b0 <___vfiprintf_internal_r+0x62c>
400133a8:	8ca7c83a 	sub	r19,r17,r18
400133ac:	04c2f216 	blt	zero,r19,40013f78 <___vfiprintf_internal_r+0x11f4>
400133b0:	8c80010e 	bge	r17,r18,400133b8 <___vfiprintf_internal_r+0x634>
400133b4:	9023883a 	mov	r17,r18
400133b8:	da802317 	ldw	r10,140(sp)
400133bc:	5455883a 	add	r10,r10,r17
400133c0:	da802315 	stw	r10,140(sp)
400133c4:	d8001b15 	stw	zero,108(sp)
400133c8:	d811883a 	mov	r8,sp
400133cc:	003ea206 	br	40012e58 <__alt_data_end+0xc0012e58>
400133d0:	a5000814 	ori	r20,r20,32
400133d4:	80c00007 	ldb	r3,0(r16)
400133d8:	003ec906 	br	40012f00 <__alt_data_end+0xc0012f00>
400133dc:	80c00007 	ldb	r3,0(r16)
400133e0:	1b030926 	beq	r3,r12,40014008 <___vfiprintf_internal_r+0x1284>
400133e4:	a5000414 	ori	r20,r20,16
400133e8:	003ec506 	br	40012f00 <__alt_data_end+0xc0012f00>
400133ec:	21003fcc 	andi	r4,r4,255
400133f0:	20035e1e 	bne	r4,zero,4001416c <___vfiprintf_internal_r+0x13e8>
400133f4:	a080080c 	andi	r2,r20,32
400133f8:	1002a526 	beq	r2,zero,40013e90 <___vfiprintf_internal_r+0x110c>
400133fc:	da802217 	ldw	r10,136(sp)
40013400:	50800017 	ldw	r2,0(r10)
40013404:	da802317 	ldw	r10,140(sp)
40013408:	5007d7fa 	srai	r3,r10,31
4001340c:	da802217 	ldw	r10,136(sp)
40013410:	10c00115 	stw	r3,4(r2)
40013414:	52800104 	addi	r10,r10,4
40013418:	da802215 	stw	r10,136(sp)
4001341c:	da802317 	ldw	r10,140(sp)
40013420:	12800015 	stw	r10,0(r2)
40013424:	003e8c06 	br	40012e58 <__alt_data_end+0xc0012e58>
40013428:	21003fcc 	andi	r4,r4,255
4001342c:	2003511e 	bne	r4,zero,40014174 <___vfiprintf_internal_r+0x13f0>
40013430:	a080080c 	andi	r2,r20,32
40013434:	1000a126 	beq	r2,zero,400136bc <___vfiprintf_internal_r+0x938>
40013438:	da802217 	ldw	r10,136(sp)
4001343c:	d8001d85 	stb	zero,118(sp)
40013440:	50800204 	addi	r2,r10,8
40013444:	54800017 	ldw	r18,0(r10)
40013448:	54c00117 	ldw	r19,4(r10)
4001344c:	4802b416 	blt	r9,zero,40013f20 <___vfiprintf_internal_r+0x119c>
40013450:	013fdfc4 	movi	r4,-129
40013454:	94c6b03a 	or	r3,r18,r19
40013458:	d8802215 	stw	r2,136(sp)
4001345c:	a128703a 	and	r20,r20,r4
40013460:	1800a226 	beq	r3,zero,400136ec <___vfiprintf_internal_r+0x968>
40013464:	0039883a 	mov	fp,zero
40013468:	dd401a04 	addi	r21,sp,104
4001346c:	9006d0fa 	srli	r3,r18,3
40013470:	9808977a 	slli	r4,r19,29
40013474:	9826d0fa 	srli	r19,r19,3
40013478:	948001cc 	andi	r18,r18,7
4001347c:	90800c04 	addi	r2,r18,48
40013480:	ad7fffc4 	addi	r21,r21,-1
40013484:	20e4b03a 	or	r18,r4,r3
40013488:	a8800005 	stb	r2,0(r21)
4001348c:	94c6b03a 	or	r3,r18,r19
40013490:	183ff61e 	bne	r3,zero,4001346c <__alt_data_end+0xc001346c>
40013494:	a0c0004c 	andi	r3,r20,1
40013498:	18005926 	beq	r3,zero,40013600 <___vfiprintf_internal_r+0x87c>
4001349c:	10803fcc 	andi	r2,r2,255
400134a0:	1080201c 	xori	r2,r2,128
400134a4:	10bfe004 	addi	r2,r2,-128
400134a8:	00c00c04 	movi	r3,48
400134ac:	10c05426 	beq	r2,r3,40013600 <___vfiprintf_internal_r+0x87c>
400134b0:	da801e17 	ldw	r10,120(sp)
400134b4:	a8bfffc4 	addi	r2,r21,-1
400134b8:	a8ffffc5 	stb	r3,-1(r21)
400134bc:	50a7c83a 	sub	r19,r10,r2
400134c0:	102b883a 	mov	r21,r2
400134c4:	003f2f06 	br	40013184 <__alt_data_end+0xc0013184>
400134c8:	21003fcc 	andi	r4,r4,255
400134cc:	2003421e 	bne	r4,zero,400141d8 <___vfiprintf_internal_r+0x1454>
400134d0:	009000b4 	movhi	r2,16386
400134d4:	10bb2c04 	addi	r2,r2,-4944
400134d8:	d8802615 	stw	r2,152(sp)
400134dc:	a080080c 	andi	r2,r20,32
400134e0:	1000aa26 	beq	r2,zero,4001378c <___vfiprintf_internal_r+0xa08>
400134e4:	da802217 	ldw	r10,136(sp)
400134e8:	54800017 	ldw	r18,0(r10)
400134ec:	54c00117 	ldw	r19,4(r10)
400134f0:	52800204 	addi	r10,r10,8
400134f4:	da802215 	stw	r10,136(sp)
400134f8:	a080004c 	andi	r2,r20,1
400134fc:	1001d226 	beq	r2,zero,40013c48 <___vfiprintf_internal_r+0xec4>
40013500:	94c4b03a 	or	r2,r18,r19
40013504:	1002351e 	bne	r2,zero,40013ddc <___vfiprintf_internal_r+0x1058>
40013508:	d8001d85 	stb	zero,118(sp)
4001350c:	48022216 	blt	r9,zero,40013d98 <___vfiprintf_internal_r+0x1014>
40013510:	00bfdfc4 	movi	r2,-129
40013514:	a0a8703a 	and	r20,r20,r2
40013518:	003f1506 	br	40013170 <__alt_data_end+0xc0013170>
4001351c:	da802217 	ldw	r10,136(sp)
40013520:	04800044 	movi	r18,1
40013524:	d8001d85 	stb	zero,118(sp)
40013528:	50800017 	ldw	r2,0(r10)
4001352c:	52800104 	addi	r10,r10,4
40013530:	da802215 	stw	r10,136(sp)
40013534:	d8801005 	stb	r2,64(sp)
40013538:	9027883a 	mov	r19,r18
4001353c:	dd401004 	addi	r21,sp,64
40013540:	0013883a 	mov	r9,zero
40013544:	003f1706 	br	400131a4 <__alt_data_end+0xc00131a4>
40013548:	21003fcc 	andi	r4,r4,255
4001354c:	2003201e 	bne	r4,zero,400141d0 <___vfiprintf_internal_r+0x144c>
40013550:	a080080c 	andi	r2,r20,32
40013554:	10004b26 	beq	r2,zero,40013684 <___vfiprintf_internal_r+0x900>
40013558:	da802217 	ldw	r10,136(sp)
4001355c:	50800117 	ldw	r2,4(r10)
40013560:	54800017 	ldw	r18,0(r10)
40013564:	52800204 	addi	r10,r10,8
40013568:	da802215 	stw	r10,136(sp)
4001356c:	1027883a 	mov	r19,r2
40013570:	10022c16 	blt	r2,zero,40013e24 <___vfiprintf_internal_r+0x10a0>
40013574:	df001d83 	ldbu	fp,118(sp)
40013578:	48007216 	blt	r9,zero,40013744 <___vfiprintf_internal_r+0x9c0>
4001357c:	00ffdfc4 	movi	r3,-129
40013580:	94c4b03a 	or	r2,r18,r19
40013584:	a0e8703a 	and	r20,r20,r3
40013588:	1000cc26 	beq	r2,zero,400138bc <___vfiprintf_internal_r+0xb38>
4001358c:	98021026 	beq	r19,zero,40013dd0 <___vfiprintf_internal_r+0x104c>
40013590:	dc402415 	stw	r17,144(sp)
40013594:	dc002515 	stw	r16,148(sp)
40013598:	9823883a 	mov	r17,r19
4001359c:	9021883a 	mov	r16,r18
400135a0:	dd401a04 	addi	r21,sp,104
400135a4:	4825883a 	mov	r18,r9
400135a8:	4027883a 	mov	r19,r8
400135ac:	8009883a 	mov	r4,r16
400135b0:	880b883a 	mov	r5,r17
400135b4:	01800284 	movi	r6,10
400135b8:	000f883a 	mov	r7,zero
400135bc:	0014d780 	call	40014d78 <__umoddi3>
400135c0:	10800c04 	addi	r2,r2,48
400135c4:	ad7fffc4 	addi	r21,r21,-1
400135c8:	8009883a 	mov	r4,r16
400135cc:	880b883a 	mov	r5,r17
400135d0:	a8800005 	stb	r2,0(r21)
400135d4:	01800284 	movi	r6,10
400135d8:	000f883a 	mov	r7,zero
400135dc:	00148000 	call	40014800 <__udivdi3>
400135e0:	1021883a 	mov	r16,r2
400135e4:	10c4b03a 	or	r2,r2,r3
400135e8:	1823883a 	mov	r17,r3
400135ec:	103fef1e 	bne	r2,zero,400135ac <__alt_data_end+0xc00135ac>
400135f0:	dc402417 	ldw	r17,144(sp)
400135f4:	dc002517 	ldw	r16,148(sp)
400135f8:	9013883a 	mov	r9,r18
400135fc:	9811883a 	mov	r8,r19
40013600:	da801e17 	ldw	r10,120(sp)
40013604:	5567c83a 	sub	r19,r10,r21
40013608:	003ede06 	br	40013184 <__alt_data_end+0xc0013184>
4001360c:	38803fcc 	andi	r2,r7,255
40013610:	1080201c 	xori	r2,r2,128
40013614:	10bfe004 	addi	r2,r2,-128
40013618:	1002371e 	bne	r2,zero,40013ef8 <___vfiprintf_internal_r+0x1174>
4001361c:	01000044 	movi	r4,1
40013620:	01c00804 	movi	r7,32
40013624:	80c00007 	ldb	r3,0(r16)
40013628:	003e3506 	br	40012f00 <__alt_data_end+0xc0012f00>
4001362c:	a5000054 	ori	r20,r20,1
40013630:	80c00007 	ldb	r3,0(r16)
40013634:	003e3206 	br	40012f00 <__alt_data_end+0xc0012f00>
40013638:	a5002014 	ori	r20,r20,128
4001363c:	80c00007 	ldb	r3,0(r16)
40013640:	003e2f06 	br	40012f00 <__alt_data_end+0xc0012f00>
40013644:	8015883a 	mov	r10,r16
40013648:	0023883a 	mov	r17,zero
4001364c:	18bff404 	addi	r2,r3,-48
40013650:	50c00007 	ldb	r3,0(r10)
40013654:	8c4002a4 	muli	r17,r17,10
40013658:	84000044 	addi	r16,r16,1
4001365c:	8015883a 	mov	r10,r16
40013660:	1463883a 	add	r17,r2,r17
40013664:	18bff404 	addi	r2,r3,-48
40013668:	30bff92e 	bgeu	r6,r2,40013650 <__alt_data_end+0xc0013650>
4001366c:	003e2506 	br	40012f04 <__alt_data_end+0xc0012f04>
40013670:	21003fcc 	andi	r4,r4,255
40013674:	2002d41e 	bne	r4,zero,400141c8 <___vfiprintf_internal_r+0x1444>
40013678:	a5000414 	ori	r20,r20,16
4001367c:	a080080c 	andi	r2,r20,32
40013680:	103fb51e 	bne	r2,zero,40013558 <__alt_data_end+0xc0013558>
40013684:	a080040c 	andi	r2,r20,16
40013688:	1001f826 	beq	r2,zero,40013e6c <___vfiprintf_internal_r+0x10e8>
4001368c:	da802217 	ldw	r10,136(sp)
40013690:	54800017 	ldw	r18,0(r10)
40013694:	52800104 	addi	r10,r10,4
40013698:	da802215 	stw	r10,136(sp)
4001369c:	9027d7fa 	srai	r19,r18,31
400136a0:	9805883a 	mov	r2,r19
400136a4:	003fb206 	br	40013570 <__alt_data_end+0xc0013570>
400136a8:	21003fcc 	andi	r4,r4,255
400136ac:	2002c41e 	bne	r4,zero,400141c0 <___vfiprintf_internal_r+0x143c>
400136b0:	a5000414 	ori	r20,r20,16
400136b4:	a080080c 	andi	r2,r20,32
400136b8:	103f5f1e 	bne	r2,zero,40013438 <__alt_data_end+0xc0013438>
400136bc:	a080040c 	andi	r2,r20,16
400136c0:	10020f26 	beq	r2,zero,40013f00 <___vfiprintf_internal_r+0x117c>
400136c4:	da802217 	ldw	r10,136(sp)
400136c8:	d8001d85 	stb	zero,118(sp)
400136cc:	0027883a 	mov	r19,zero
400136d0:	50800104 	addi	r2,r10,4
400136d4:	54800017 	ldw	r18,0(r10)
400136d8:	48021116 	blt	r9,zero,40013f20 <___vfiprintf_internal_r+0x119c>
400136dc:	00ffdfc4 	movi	r3,-129
400136e0:	d8802215 	stw	r2,136(sp)
400136e4:	a0e8703a 	and	r20,r20,r3
400136e8:	903f5e1e 	bne	r18,zero,40013464 <__alt_data_end+0xc0013464>
400136ec:	0039883a 	mov	fp,zero
400136f0:	4802a626 	beq	r9,zero,4001418c <___vfiprintf_internal_r+0x1408>
400136f4:	0025883a 	mov	r18,zero
400136f8:	0027883a 	mov	r19,zero
400136fc:	003f5a06 	br	40013468 <__alt_data_end+0xc0013468>
40013700:	21003fcc 	andi	r4,r4,255
40013704:	20029f1e 	bne	r4,zero,40014184 <___vfiprintf_internal_r+0x1400>
40013708:	a5000414 	ori	r20,r20,16
4001370c:	a080080c 	andi	r2,r20,32
40013710:	10005e1e 	bne	r2,zero,4001388c <___vfiprintf_internal_r+0xb08>
40013714:	a080040c 	andi	r2,r20,16
40013718:	1001a21e 	bne	r2,zero,40013da4 <___vfiprintf_internal_r+0x1020>
4001371c:	a080100c 	andi	r2,r20,64
40013720:	d8001d85 	stb	zero,118(sp)
40013724:	da802217 	ldw	r10,136(sp)
40013728:	1002231e 	bne	r2,zero,40013fb8 <___vfiprintf_internal_r+0x1234>
4001372c:	50800104 	addi	r2,r10,4
40013730:	54800017 	ldw	r18,0(r10)
40013734:	0027883a 	mov	r19,zero
40013738:	4801a00e 	bge	r9,zero,40013dbc <___vfiprintf_internal_r+0x1038>
4001373c:	d8802215 	stw	r2,136(sp)
40013740:	0039883a 	mov	fp,zero
40013744:	94c4b03a 	or	r2,r18,r19
40013748:	103f901e 	bne	r2,zero,4001358c <__alt_data_end+0xc001358c>
4001374c:	00800044 	movi	r2,1
40013750:	10803fcc 	andi	r2,r2,255
40013754:	00c00044 	movi	r3,1
40013758:	10c05926 	beq	r2,r3,400138c0 <___vfiprintf_internal_r+0xb3c>
4001375c:	00c00084 	movi	r3,2
40013760:	10ffe41e 	bne	r2,r3,400136f4 <__alt_data_end+0xc00136f4>
40013764:	0025883a 	mov	r18,zero
40013768:	0027883a 	mov	r19,zero
4001376c:	00013d06 	br	40013c64 <___vfiprintf_internal_r+0xee0>
40013770:	21003fcc 	andi	r4,r4,255
40013774:	2002811e 	bne	r4,zero,4001417c <___vfiprintf_internal_r+0x13f8>
40013778:	009000b4 	movhi	r2,16386
4001377c:	10bb2704 	addi	r2,r2,-4964
40013780:	d8802615 	stw	r2,152(sp)
40013784:	a080080c 	andi	r2,r20,32
40013788:	103f561e 	bne	r2,zero,400134e4 <__alt_data_end+0xc00134e4>
4001378c:	a080040c 	andi	r2,r20,16
40013790:	1001d126 	beq	r2,zero,40013ed8 <___vfiprintf_internal_r+0x1154>
40013794:	da802217 	ldw	r10,136(sp)
40013798:	0027883a 	mov	r19,zero
4001379c:	54800017 	ldw	r18,0(r10)
400137a0:	52800104 	addi	r10,r10,4
400137a4:	da802215 	stw	r10,136(sp)
400137a8:	003f5306 	br	400134f8 <__alt_data_end+0xc00134f8>
400137ac:	da802217 	ldw	r10,136(sp)
400137b0:	d8001d85 	stb	zero,118(sp)
400137b4:	55400017 	ldw	r21,0(r10)
400137b8:	50c00104 	addi	r3,r10,4
400137bc:	a8024226 	beq	r21,zero,400140c8 <___vfiprintf_internal_r+0x1344>
400137c0:	48021816 	blt	r9,zero,40014024 <___vfiprintf_internal_r+0x12a0>
400137c4:	480d883a 	mov	r6,r9
400137c8:	000b883a 	mov	r5,zero
400137cc:	a809883a 	mov	r4,r21
400137d0:	d8c02a15 	stw	r3,168(sp)
400137d4:	da002b15 	stw	r8,172(sp)
400137d8:	da402c15 	stw	r9,176(sp)
400137dc:	00111b80 	call	400111b8 <memchr>
400137e0:	d8c02a17 	ldw	r3,168(sp)
400137e4:	da002b17 	ldw	r8,172(sp)
400137e8:	da402c17 	ldw	r9,176(sp)
400137ec:	10024826 	beq	r2,zero,40014110 <___vfiprintf_internal_r+0x138c>
400137f0:	1567c83a 	sub	r19,r2,r21
400137f4:	df001d83 	ldbu	fp,118(sp)
400137f8:	d8c02215 	stw	r3,136(sp)
400137fc:	0013883a 	mov	r9,zero
40013800:	003e6006 	br	40013184 <__alt_data_end+0xc0013184>
40013804:	21003fcc 	andi	r4,r4,255
40013808:	203fc026 	beq	r4,zero,4001370c <__alt_data_end+0xc001370c>
4001380c:	d9c01d85 	stb	r7,118(sp)
40013810:	003fbe06 	br	4001370c <__alt_data_end+0xc001370c>
40013814:	da802217 	ldw	r10,136(sp)
40013818:	54400017 	ldw	r17,0(r10)
4001381c:	50800104 	addi	r2,r10,4
40013820:	883e3b16 	blt	r17,zero,40013110 <__alt_data_end+0xc0013110>
40013824:	d8802215 	stw	r2,136(sp)
40013828:	80c00007 	ldb	r3,0(r16)
4001382c:	003db406 	br	40012f00 <__alt_data_end+0xc0012f00>
40013830:	01000044 	movi	r4,1
40013834:	01c00ac4 	movi	r7,43
40013838:	80c00007 	ldb	r3,0(r16)
4001383c:	003db006 	br	40012f00 <__alt_data_end+0xc0012f00>
40013840:	80c00007 	ldb	r3,0(r16)
40013844:	82800044 	addi	r10,r16,1
40013848:	1b423c26 	beq	r3,r13,4001413c <___vfiprintf_internal_r+0x13b8>
4001384c:	18bff404 	addi	r2,r3,-48
40013850:	0013883a 	mov	r9,zero
40013854:	30822b36 	bltu	r6,r2,40014104 <___vfiprintf_internal_r+0x1380>
40013858:	50c00007 	ldb	r3,0(r10)
4001385c:	4a4002a4 	muli	r9,r9,10
40013860:	54000044 	addi	r16,r10,1
40013864:	8015883a 	mov	r10,r16
40013868:	4893883a 	add	r9,r9,r2
4001386c:	18bff404 	addi	r2,r3,-48
40013870:	30bff92e 	bgeu	r6,r2,40013858 <__alt_data_end+0xc0013858>
40013874:	483da30e 	bge	r9,zero,40012f04 <__alt_data_end+0xc0012f04>
40013878:	027fffc4 	movi	r9,-1
4001387c:	003da106 	br	40012f04 <__alt_data_end+0xc0012f04>
40013880:	a5001014 	ori	r20,r20,64
40013884:	80c00007 	ldb	r3,0(r16)
40013888:	003d9d06 	br	40012f00 <__alt_data_end+0xc0012f00>
4001388c:	da802217 	ldw	r10,136(sp)
40013890:	d8001d85 	stb	zero,118(sp)
40013894:	50c00204 	addi	r3,r10,8
40013898:	54800017 	ldw	r18,0(r10)
4001389c:	54c00117 	ldw	r19,4(r10)
400138a0:	4801ca16 	blt	r9,zero,40013fcc <___vfiprintf_internal_r+0x1248>
400138a4:	013fdfc4 	movi	r4,-129
400138a8:	94c4b03a 	or	r2,r18,r19
400138ac:	d8c02215 	stw	r3,136(sp)
400138b0:	a128703a 	and	r20,r20,r4
400138b4:	0039883a 	mov	fp,zero
400138b8:	103f341e 	bne	r2,zero,4001358c <__alt_data_end+0xc001358c>
400138bc:	483e2e26 	beq	r9,zero,40013178 <__alt_data_end+0xc0013178>
400138c0:	0025883a 	mov	r18,zero
400138c4:	94800c04 	addi	r18,r18,48
400138c8:	dc8019c5 	stb	r18,103(sp)
400138cc:	dcc02717 	ldw	r19,156(sp)
400138d0:	dd4019c4 	addi	r21,sp,103
400138d4:	003e2b06 	br	40013184 <__alt_data_end+0xc0013184>
400138d8:	21003fcc 	andi	r4,r4,255
400138dc:	2002361e 	bne	r4,zero,400141b8 <___vfiprintf_internal_r+0x1434>
400138e0:	1801c126 	beq	r3,zero,40013fe8 <___vfiprintf_internal_r+0x1264>
400138e4:	04800044 	movi	r18,1
400138e8:	d8c01005 	stb	r3,64(sp)
400138ec:	d8001d85 	stb	zero,118(sp)
400138f0:	9027883a 	mov	r19,r18
400138f4:	dd401004 	addi	r21,sp,64
400138f8:	003f1106 	br	40013540 <__alt_data_end+0xc0013540>
400138fc:	d9402117 	ldw	r5,132(sp)
40013900:	d9002017 	ldw	r4,128(sp)
40013904:	d9801a04 	addi	r6,sp,104
40013908:	d9c02b15 	stw	r7,172(sp)
4001390c:	dbc02a15 	stw	r15,168(sp)
40013910:	0012c700 	call	40012c70 <__sprint_r.part.0>
40013914:	d9c02b17 	ldw	r7,172(sp)
40013918:	dbc02a17 	ldw	r15,168(sp)
4001391c:	10006d1e 	bne	r2,zero,40013ad4 <___vfiprintf_internal_r+0xd50>
40013920:	d9801b17 	ldw	r6,108(sp)
40013924:	d8801c17 	ldw	r2,112(sp)
40013928:	d811883a 	mov	r8,sp
4001392c:	31400044 	addi	r5,r6,1
40013930:	003e3306 	br	40013200 <__alt_data_end+0xc0013200>
40013934:	d9401b17 	ldw	r5,108(sp)
40013938:	d8801c17 	ldw	r2,112(sp)
4001393c:	29000044 	addi	r4,r5,1
40013940:	d8c01d87 	ldb	r3,118(sp)
40013944:	183e4d26 	beq	r3,zero,4001327c <__alt_data_end+0xc001327c>
40013948:	00c00044 	movi	r3,1
4001394c:	d9401d84 	addi	r5,sp,118
40013950:	10c5883a 	add	r2,r2,r3
40013954:	41400015 	stw	r5,0(r8)
40013958:	40c00115 	stw	r3,4(r8)
4001395c:	d8801c15 	stw	r2,112(sp)
40013960:	d9001b15 	stw	r4,108(sp)
40013964:	014001c4 	movi	r5,7
40013968:	2900a90e 	bge	r5,r4,40013c10 <___vfiprintf_internal_r+0xe8c>
4001396c:	1000da1e 	bne	r2,zero,40013cd8 <___vfiprintf_internal_r+0xf54>
40013970:	7000ab1e 	bne	r14,zero,40013c20 <___vfiprintf_internal_r+0xe9c>
40013974:	000b883a 	mov	r5,zero
40013978:	1809883a 	mov	r4,r3
4001397c:	d811883a 	mov	r8,sp
40013980:	00c02004 	movi	r3,128
40013984:	e0fe4d26 	beq	fp,r3,400132bc <__alt_data_end+0xc00132bc>
40013988:	4cf9c83a 	sub	fp,r9,r19
4001398c:	073e7b0e 	bge	zero,fp,4001337c <__alt_data_end+0xc001337c>
40013990:	01c00404 	movi	r7,16
40013994:	3f01900e 	bge	r7,fp,40013fd8 <___vfiprintf_internal_r+0x1254>
40013998:	00d000b4 	movhi	r3,16386
4001399c:	18fb8b04 	addi	r3,r3,-4564
400139a0:	d8c02415 	stw	r3,144(sp)
400139a4:	034001c4 	movi	r13,7
400139a8:	00000506 	br	400139c0 <___vfiprintf_internal_r+0xc3c>
400139ac:	29000084 	addi	r4,r5,2
400139b0:	42000204 	addi	r8,r8,8
400139b4:	180b883a 	mov	r5,r3
400139b8:	e73ffc04 	addi	fp,fp,-16
400139bc:	3f000d0e 	bge	r7,fp,400139f4 <___vfiprintf_internal_r+0xc70>
400139c0:	10800404 	addi	r2,r2,16
400139c4:	28c00044 	addi	r3,r5,1
400139c8:	45c00015 	stw	r23,0(r8)
400139cc:	41c00115 	stw	r7,4(r8)
400139d0:	d8801c15 	stw	r2,112(sp)
400139d4:	d8c01b15 	stw	r3,108(sp)
400139d8:	68fff40e 	bge	r13,r3,400139ac <__alt_data_end+0xc00139ac>
400139dc:	1000101e 	bne	r2,zero,40013a20 <___vfiprintf_internal_r+0xc9c>
400139e0:	e73ffc04 	addi	fp,fp,-16
400139e4:	01000044 	movi	r4,1
400139e8:	000b883a 	mov	r5,zero
400139ec:	d811883a 	mov	r8,sp
400139f0:	3f3ff316 	blt	r7,fp,400139c0 <__alt_data_end+0xc00139c0>
400139f4:	da802417 	ldw	r10,144(sp)
400139f8:	1705883a 	add	r2,r2,fp
400139fc:	47000115 	stw	fp,4(r8)
40013a00:	42800015 	stw	r10,0(r8)
40013a04:	d8801c15 	stw	r2,112(sp)
40013a08:	d9001b15 	stw	r4,108(sp)
40013a0c:	00c001c4 	movi	r3,7
40013a10:	19003616 	blt	r3,r4,40013aec <___vfiprintf_internal_r+0xd68>
40013a14:	42000204 	addi	r8,r8,8
40013a18:	21000044 	addi	r4,r4,1
40013a1c:	003e5706 	br	4001337c <__alt_data_end+0xc001337c>
40013a20:	d9402117 	ldw	r5,132(sp)
40013a24:	d9002017 	ldw	r4,128(sp)
40013a28:	d9801a04 	addi	r6,sp,104
40013a2c:	d9c02b15 	stw	r7,172(sp)
40013a30:	db402a15 	stw	r13,168(sp)
40013a34:	0012c700 	call	40012c70 <__sprint_r.part.0>
40013a38:	d9c02b17 	ldw	r7,172(sp)
40013a3c:	db402a17 	ldw	r13,168(sp)
40013a40:	1000241e 	bne	r2,zero,40013ad4 <___vfiprintf_internal_r+0xd50>
40013a44:	d9401b17 	ldw	r5,108(sp)
40013a48:	d8801c17 	ldw	r2,112(sp)
40013a4c:	d811883a 	mov	r8,sp
40013a50:	29000044 	addi	r4,r5,1
40013a54:	003fd806 	br	400139b8 <__alt_data_end+0xc00139b8>
40013a58:	d9401b17 	ldw	r5,108(sp)
40013a5c:	00d000b4 	movhi	r3,16386
40013a60:	18fb8f04 	addi	r3,r3,-4548
40013a64:	d8c02415 	stw	r3,144(sp)
40013a68:	29400044 	addi	r5,r5,1
40013a6c:	d8c02417 	ldw	r3,144(sp)
40013a70:	14c5883a 	add	r2,r2,r19
40013a74:	44c00115 	stw	r19,4(r8)
40013a78:	40c00015 	stw	r3,0(r8)
40013a7c:	d8801c15 	stw	r2,112(sp)
40013a80:	d9401b15 	stw	r5,108(sp)
40013a84:	00c001c4 	movi	r3,7
40013a88:	1940070e 	bge	r3,r5,40013aa8 <___vfiprintf_internal_r+0xd24>
40013a8c:	103e4826 	beq	r2,zero,400133b0 <__alt_data_end+0xc00133b0>
40013a90:	d9402117 	ldw	r5,132(sp)
40013a94:	d9002017 	ldw	r4,128(sp)
40013a98:	d9801a04 	addi	r6,sp,104
40013a9c:	0012c700 	call	40012c70 <__sprint_r.part.0>
40013aa0:	10000c1e 	bne	r2,zero,40013ad4 <___vfiprintf_internal_r+0xd50>
40013aa4:	d8801c17 	ldw	r2,112(sp)
40013aa8:	8c80010e 	bge	r17,r18,40013ab0 <___vfiprintf_internal_r+0xd2c>
40013aac:	9023883a 	mov	r17,r18
40013ab0:	da802317 	ldw	r10,140(sp)
40013ab4:	5455883a 	add	r10,r10,r17
40013ab8:	da802315 	stw	r10,140(sp)
40013abc:	103e4126 	beq	r2,zero,400133c4 <__alt_data_end+0xc00133c4>
40013ac0:	d9402117 	ldw	r5,132(sp)
40013ac4:	d9002017 	ldw	r4,128(sp)
40013ac8:	d9801a04 	addi	r6,sp,104
40013acc:	0012c700 	call	40012c70 <__sprint_r.part.0>
40013ad0:	103e3c26 	beq	r2,zero,400133c4 <__alt_data_end+0xc00133c4>
40013ad4:	dd002117 	ldw	r20,132(sp)
40013ad8:	a080030b 	ldhu	r2,12(r20)
40013adc:	1080100c 	andi	r2,r2,64
40013ae0:	1001231e 	bne	r2,zero,40013f70 <___vfiprintf_internal_r+0x11ec>
40013ae4:	d8802317 	ldw	r2,140(sp)
40013ae8:	003d7b06 	br	400130d8 <__alt_data_end+0xc00130d8>
40013aec:	1000991e 	bne	r2,zero,40013d54 <___vfiprintf_internal_r+0xfd0>
40013af0:	00c00044 	movi	r3,1
40013af4:	9805883a 	mov	r2,r19
40013af8:	dd400015 	stw	r21,0(sp)
40013afc:	dcc00115 	stw	r19,4(sp)
40013b00:	dcc01c15 	stw	r19,112(sp)
40013b04:	d8c01b15 	stw	r3,108(sp)
40013b08:	d811883a 	mov	r8,sp
40013b0c:	42000204 	addi	r8,r8,8
40013b10:	a2c0010c 	andi	r11,r20,4
40013b14:	583fe426 	beq	r11,zero,40013aa8 <__alt_data_end+0xc0013aa8>
40013b18:	8ca7c83a 	sub	r19,r17,r18
40013b1c:	04ffe20e 	bge	zero,r19,40013aa8 <__alt_data_end+0xc0013aa8>
40013b20:	01c00404 	movi	r7,16
40013b24:	3cffcc0e 	bge	r7,r19,40013a58 <__alt_data_end+0xc0013a58>
40013b28:	029000b4 	movhi	r10,16386
40013b2c:	52bb8f04 	addi	r10,r10,-4548
40013b30:	d9001b17 	ldw	r4,108(sp)
40013b34:	da802415 	stw	r10,144(sp)
40013b38:	382b883a 	mov	r21,r7
40013b3c:	050001c4 	movi	r20,7
40013b40:	df002017 	ldw	fp,128(sp)
40013b44:	00000506 	br	40013b5c <___vfiprintf_internal_r+0xdd8>
40013b48:	21400084 	addi	r5,r4,2
40013b4c:	42000204 	addi	r8,r8,8
40013b50:	1809883a 	mov	r4,r3
40013b54:	9cfffc04 	addi	r19,r19,-16
40013b58:	acffc40e 	bge	r21,r19,40013a6c <__alt_data_end+0xc0013a6c>
40013b5c:	10800404 	addi	r2,r2,16
40013b60:	20c00044 	addi	r3,r4,1
40013b64:	45800015 	stw	r22,0(r8)
40013b68:	45400115 	stw	r21,4(r8)
40013b6c:	d8801c15 	stw	r2,112(sp)
40013b70:	d8c01b15 	stw	r3,108(sp)
40013b74:	a0fff40e 	bge	r20,r3,40013b48 <__alt_data_end+0xc0013b48>
40013b78:	1000041e 	bne	r2,zero,40013b8c <___vfiprintf_internal_r+0xe08>
40013b7c:	01400044 	movi	r5,1
40013b80:	0009883a 	mov	r4,zero
40013b84:	d811883a 	mov	r8,sp
40013b88:	003ff206 	br	40013b54 <__alt_data_end+0xc0013b54>
40013b8c:	d9402117 	ldw	r5,132(sp)
40013b90:	d9801a04 	addi	r6,sp,104
40013b94:	e009883a 	mov	r4,fp
40013b98:	0012c700 	call	40012c70 <__sprint_r.part.0>
40013b9c:	103fcd1e 	bne	r2,zero,40013ad4 <__alt_data_end+0xc0013ad4>
40013ba0:	d9001b17 	ldw	r4,108(sp)
40013ba4:	d8801c17 	ldw	r2,112(sp)
40013ba8:	d811883a 	mov	r8,sp
40013bac:	21400044 	addi	r5,r4,1
40013bb0:	003fe806 	br	40013b54 <__alt_data_end+0xc0013b54>
40013bb4:	d9402117 	ldw	r5,132(sp)
40013bb8:	d9002017 	ldw	r4,128(sp)
40013bbc:	d9801a04 	addi	r6,sp,104
40013bc0:	d9c02b15 	stw	r7,172(sp)
40013bc4:	db402a15 	stw	r13,168(sp)
40013bc8:	0012c700 	call	40012c70 <__sprint_r.part.0>
40013bcc:	d9c02b17 	ldw	r7,172(sp)
40013bd0:	db402a17 	ldw	r13,168(sp)
40013bd4:	103fbf1e 	bne	r2,zero,40013ad4 <__alt_data_end+0xc0013ad4>
40013bd8:	d9401b17 	ldw	r5,108(sp)
40013bdc:	d8801c17 	ldw	r2,112(sp)
40013be0:	d811883a 	mov	r8,sp
40013be4:	29800044 	addi	r6,r5,1
40013be8:	003dc406 	br	400132fc <__alt_data_end+0xc00132fc>
40013bec:	1000d21e 	bne	r2,zero,40013f38 <___vfiprintf_internal_r+0x11b4>
40013bf0:	d8c01d87 	ldb	r3,118(sp)
40013bf4:	18009526 	beq	r3,zero,40013e4c <___vfiprintf_internal_r+0x10c8>
40013bf8:	00800044 	movi	r2,1
40013bfc:	d8c01d84 	addi	r3,sp,118
40013c00:	1009883a 	mov	r4,r2
40013c04:	d8c00015 	stw	r3,0(sp)
40013c08:	d8800115 	stw	r2,4(sp)
40013c0c:	d811883a 	mov	r8,sp
40013c10:	200b883a 	mov	r5,r4
40013c14:	42000204 	addi	r8,r8,8
40013c18:	21000044 	addi	r4,r4,1
40013c1c:	003d9706 	br	4001327c <__alt_data_end+0xc001327c>
40013c20:	d9001d04 	addi	r4,sp,116
40013c24:	00800084 	movi	r2,2
40013c28:	d9000015 	stw	r4,0(sp)
40013c2c:	d8800115 	stw	r2,4(sp)
40013c30:	1809883a 	mov	r4,r3
40013c34:	d811883a 	mov	r8,sp
40013c38:	200b883a 	mov	r5,r4
40013c3c:	42000204 	addi	r8,r8,8
40013c40:	21000044 	addi	r4,r4,1
40013c44:	003f4e06 	br	40013980 <__alt_data_end+0xc0013980>
40013c48:	d8001d85 	stb	zero,118(sp)
40013c4c:	48005016 	blt	r9,zero,40013d90 <___vfiprintf_internal_r+0x100c>
40013c50:	00ffdfc4 	movi	r3,-129
40013c54:	94c4b03a 	or	r2,r18,r19
40013c58:	a0e8703a 	and	r20,r20,r3
40013c5c:	103d4426 	beq	r2,zero,40013170 <__alt_data_end+0xc0013170>
40013c60:	0039883a 	mov	fp,zero
40013c64:	d9002617 	ldw	r4,152(sp)
40013c68:	dd401a04 	addi	r21,sp,104
40013c6c:	908003cc 	andi	r2,r18,15
40013c70:	9806973a 	slli	r3,r19,28
40013c74:	2085883a 	add	r2,r4,r2
40013c78:	9024d13a 	srli	r18,r18,4
40013c7c:	10800003 	ldbu	r2,0(r2)
40013c80:	9826d13a 	srli	r19,r19,4
40013c84:	ad7fffc4 	addi	r21,r21,-1
40013c88:	1ca4b03a 	or	r18,r3,r18
40013c8c:	a8800005 	stb	r2,0(r21)
40013c90:	94c4b03a 	or	r2,r18,r19
40013c94:	103ff51e 	bne	r2,zero,40013c6c <__alt_data_end+0xc0013c6c>
40013c98:	003e5906 	br	40013600 <__alt_data_end+0xc0013600>
40013c9c:	d9402117 	ldw	r5,132(sp)
40013ca0:	d9002017 	ldw	r4,128(sp)
40013ca4:	d9801a04 	addi	r6,sp,104
40013ca8:	0012c700 	call	40012c70 <__sprint_r.part.0>
40013cac:	103f891e 	bne	r2,zero,40013ad4 <__alt_data_end+0xc0013ad4>
40013cb0:	d8801c17 	ldw	r2,112(sp)
40013cb4:	d811883a 	mov	r8,sp
40013cb8:	003f9506 	br	40013b10 <__alt_data_end+0xc0013b10>
40013cbc:	d9402117 	ldw	r5,132(sp)
40013cc0:	d9002017 	ldw	r4,128(sp)
40013cc4:	d9801a04 	addi	r6,sp,104
40013cc8:	0012c700 	call	40012c70 <__sprint_r.part.0>
40013ccc:	103f811e 	bne	r2,zero,40013ad4 <__alt_data_end+0xc0013ad4>
40013cd0:	d811883a 	mov	r8,sp
40013cd4:	003ced06 	br	4001308c <__alt_data_end+0xc001308c>
40013cd8:	d9402117 	ldw	r5,132(sp)
40013cdc:	d9002017 	ldw	r4,128(sp)
40013ce0:	d9801a04 	addi	r6,sp,104
40013ce4:	da402c15 	stw	r9,176(sp)
40013ce8:	db802a15 	stw	r14,168(sp)
40013cec:	0012c700 	call	40012c70 <__sprint_r.part.0>
40013cf0:	da402c17 	ldw	r9,176(sp)
40013cf4:	db802a17 	ldw	r14,168(sp)
40013cf8:	103f761e 	bne	r2,zero,40013ad4 <__alt_data_end+0xc0013ad4>
40013cfc:	d9401b17 	ldw	r5,108(sp)
40013d00:	d8801c17 	ldw	r2,112(sp)
40013d04:	d811883a 	mov	r8,sp
40013d08:	29000044 	addi	r4,r5,1
40013d0c:	003d5b06 	br	4001327c <__alt_data_end+0xc001327c>
40013d10:	d9402117 	ldw	r5,132(sp)
40013d14:	d9002017 	ldw	r4,128(sp)
40013d18:	d9801a04 	addi	r6,sp,104
40013d1c:	da402c15 	stw	r9,176(sp)
40013d20:	0012c700 	call	40012c70 <__sprint_r.part.0>
40013d24:	da402c17 	ldw	r9,176(sp)
40013d28:	103f6a1e 	bne	r2,zero,40013ad4 <__alt_data_end+0xc0013ad4>
40013d2c:	d9401b17 	ldw	r5,108(sp)
40013d30:	d8801c17 	ldw	r2,112(sp)
40013d34:	d811883a 	mov	r8,sp
40013d38:	29000044 	addi	r4,r5,1
40013d3c:	003f1006 	br	40013980 <__alt_data_end+0xc0013980>
40013d40:	1000c31e 	bne	r2,zero,40014050 <___vfiprintf_internal_r+0x12cc>
40013d44:	01000044 	movi	r4,1
40013d48:	000b883a 	mov	r5,zero
40013d4c:	d811883a 	mov	r8,sp
40013d50:	003f0d06 	br	40013988 <__alt_data_end+0xc0013988>
40013d54:	d9402117 	ldw	r5,132(sp)
40013d58:	d9002017 	ldw	r4,128(sp)
40013d5c:	d9801a04 	addi	r6,sp,104
40013d60:	0012c700 	call	40012c70 <__sprint_r.part.0>
40013d64:	103f5b1e 	bne	r2,zero,40013ad4 <__alt_data_end+0xc0013ad4>
40013d68:	d9001b17 	ldw	r4,108(sp)
40013d6c:	d8801c17 	ldw	r2,112(sp)
40013d70:	d811883a 	mov	r8,sp
40013d74:	21000044 	addi	r4,r4,1
40013d78:	003d8006 	br	4001337c <__alt_data_end+0xc001337c>
40013d7c:	011000b4 	movhi	r4,16386
40013d80:	213b2c04 	addi	r4,r4,-4944
40013d84:	d9002615 	stw	r4,152(sp)
40013d88:	d8c02215 	stw	r3,136(sp)
40013d8c:	1029883a 	mov	r20,r2
40013d90:	94c4b03a 	or	r2,r18,r19
40013d94:	103fb21e 	bne	r2,zero,40013c60 <__alt_data_end+0xc0013c60>
40013d98:	0039883a 	mov	fp,zero
40013d9c:	00800084 	movi	r2,2
40013da0:	003e6b06 	br	40013750 <__alt_data_end+0xc0013750>
40013da4:	da802217 	ldw	r10,136(sp)
40013da8:	d8001d85 	stb	zero,118(sp)
40013dac:	0027883a 	mov	r19,zero
40013db0:	50800104 	addi	r2,r10,4
40013db4:	54800017 	ldw	r18,0(r10)
40013db8:	483e6016 	blt	r9,zero,4001373c <__alt_data_end+0xc001373c>
40013dbc:	00ffdfc4 	movi	r3,-129
40013dc0:	d8802215 	stw	r2,136(sp)
40013dc4:	a0e8703a 	and	r20,r20,r3
40013dc8:	0039883a 	mov	fp,zero
40013dcc:	903ebb26 	beq	r18,zero,400138bc <__alt_data_end+0xc00138bc>
40013dd0:	00800244 	movi	r2,9
40013dd4:	14bdee36 	bltu	r2,r18,40013590 <__alt_data_end+0xc0013590>
40013dd8:	003eba06 	br	400138c4 <__alt_data_end+0xc00138c4>
40013ddc:	00800c04 	movi	r2,48
40013de0:	d8c01d45 	stb	r3,117(sp)
40013de4:	d8801d05 	stb	r2,116(sp)
40013de8:	d8001d85 	stb	zero,118(sp)
40013dec:	a0c00094 	ori	r3,r20,2
40013df0:	4800a916 	blt	r9,zero,40014098 <___vfiprintf_internal_r+0x1314>
40013df4:	00bfdfc4 	movi	r2,-129
40013df8:	a096703a 	and	r11,r20,r2
40013dfc:	5d000094 	ori	r20,r11,2
40013e00:	0039883a 	mov	fp,zero
40013e04:	003f9706 	br	40013c64 <__alt_data_end+0xc0013c64>
40013e08:	8025883a 	mov	r18,r16
40013e0c:	003c2e06 	br	40012ec8 <__alt_data_end+0xc0012ec8>
40013e10:	009000b4 	movhi	r2,16386
40013e14:	10bb2c04 	addi	r2,r2,-4944
40013e18:	0039883a 	mov	fp,zero
40013e1c:	d8802615 	stw	r2,152(sp)
40013e20:	003f9006 	br	40013c64 <__alt_data_end+0xc0013c64>
40013e24:	04a5c83a 	sub	r18,zero,r18
40013e28:	07000b44 	movi	fp,45
40013e2c:	9004c03a 	cmpne	r2,r18,zero
40013e30:	04e7c83a 	sub	r19,zero,r19
40013e34:	df001d85 	stb	fp,118(sp)
40013e38:	98a7c83a 	sub	r19,r19,r2
40013e3c:	48009f16 	blt	r9,zero,400140bc <___vfiprintf_internal_r+0x1338>
40013e40:	00bfdfc4 	movi	r2,-129
40013e44:	a0a8703a 	and	r20,r20,r2
40013e48:	003dd006 	br	4001358c <__alt_data_end+0xc001358c>
40013e4c:	70004c26 	beq	r14,zero,40013f80 <___vfiprintf_internal_r+0x11fc>
40013e50:	00800084 	movi	r2,2
40013e54:	d8c01d04 	addi	r3,sp,116
40013e58:	d8c00015 	stw	r3,0(sp)
40013e5c:	d8800115 	stw	r2,4(sp)
40013e60:	01000044 	movi	r4,1
40013e64:	d811883a 	mov	r8,sp
40013e68:	003f7306 	br	40013c38 <__alt_data_end+0xc0013c38>
40013e6c:	a080100c 	andi	r2,r20,64
40013e70:	da802217 	ldw	r10,136(sp)
40013e74:	103e0626 	beq	r2,zero,40013690 <__alt_data_end+0xc0013690>
40013e78:	5480000f 	ldh	r18,0(r10)
40013e7c:	52800104 	addi	r10,r10,4
40013e80:	da802215 	stw	r10,136(sp)
40013e84:	9027d7fa 	srai	r19,r18,31
40013e88:	9805883a 	mov	r2,r19
40013e8c:	003db806 	br	40013570 <__alt_data_end+0xc0013570>
40013e90:	a080040c 	andi	r2,r20,16
40013e94:	1000091e 	bne	r2,zero,40013ebc <___vfiprintf_internal_r+0x1138>
40013e98:	a2c0100c 	andi	r11,r20,64
40013e9c:	58000726 	beq	r11,zero,40013ebc <___vfiprintf_internal_r+0x1138>
40013ea0:	da802217 	ldw	r10,136(sp)
40013ea4:	50800017 	ldw	r2,0(r10)
40013ea8:	52800104 	addi	r10,r10,4
40013eac:	da802215 	stw	r10,136(sp)
40013eb0:	da802317 	ldw	r10,140(sp)
40013eb4:	1280000d 	sth	r10,0(r2)
40013eb8:	003be706 	br	40012e58 <__alt_data_end+0xc0012e58>
40013ebc:	da802217 	ldw	r10,136(sp)
40013ec0:	50800017 	ldw	r2,0(r10)
40013ec4:	52800104 	addi	r10,r10,4
40013ec8:	da802215 	stw	r10,136(sp)
40013ecc:	da802317 	ldw	r10,140(sp)
40013ed0:	12800015 	stw	r10,0(r2)
40013ed4:	003be006 	br	40012e58 <__alt_data_end+0xc0012e58>
40013ed8:	a080100c 	andi	r2,r20,64
40013edc:	da802217 	ldw	r10,136(sp)
40013ee0:	10003026 	beq	r2,zero,40013fa4 <___vfiprintf_internal_r+0x1220>
40013ee4:	5480000b 	ldhu	r18,0(r10)
40013ee8:	52800104 	addi	r10,r10,4
40013eec:	0027883a 	mov	r19,zero
40013ef0:	da802215 	stw	r10,136(sp)
40013ef4:	003d8006 	br	400134f8 <__alt_data_end+0xc00134f8>
40013ef8:	80c00007 	ldb	r3,0(r16)
40013efc:	003c0006 	br	40012f00 <__alt_data_end+0xc0012f00>
40013f00:	a080100c 	andi	r2,r20,64
40013f04:	d8001d85 	stb	zero,118(sp)
40013f08:	da802217 	ldw	r10,136(sp)
40013f0c:	1000201e 	bne	r2,zero,40013f90 <___vfiprintf_internal_r+0x120c>
40013f10:	50800104 	addi	r2,r10,4
40013f14:	54800017 	ldw	r18,0(r10)
40013f18:	0027883a 	mov	r19,zero
40013f1c:	483def0e 	bge	r9,zero,400136dc <__alt_data_end+0xc00136dc>
40013f20:	94c6b03a 	or	r3,r18,r19
40013f24:	d8802215 	stw	r2,136(sp)
40013f28:	183d4e1e 	bne	r3,zero,40013464 <__alt_data_end+0xc0013464>
40013f2c:	0039883a 	mov	fp,zero
40013f30:	0005883a 	mov	r2,zero
40013f34:	003e0606 	br	40013750 <__alt_data_end+0xc0013750>
40013f38:	d9402117 	ldw	r5,132(sp)
40013f3c:	d9002017 	ldw	r4,128(sp)
40013f40:	d9801a04 	addi	r6,sp,104
40013f44:	da402c15 	stw	r9,176(sp)
40013f48:	db802a15 	stw	r14,168(sp)
40013f4c:	0012c700 	call	40012c70 <__sprint_r.part.0>
40013f50:	da402c17 	ldw	r9,176(sp)
40013f54:	db802a17 	ldw	r14,168(sp)
40013f58:	103ede1e 	bne	r2,zero,40013ad4 <__alt_data_end+0xc0013ad4>
40013f5c:	d9401b17 	ldw	r5,108(sp)
40013f60:	d8801c17 	ldw	r2,112(sp)
40013f64:	d811883a 	mov	r8,sp
40013f68:	29000044 	addi	r4,r5,1
40013f6c:	003e7406 	br	40013940 <__alt_data_end+0xc0013940>
40013f70:	00bfffc4 	movi	r2,-1
40013f74:	003c5806 	br	400130d8 <__alt_data_end+0xc00130d8>
40013f78:	d811883a 	mov	r8,sp
40013f7c:	003ee806 	br	40013b20 <__alt_data_end+0xc0013b20>
40013f80:	000b883a 	mov	r5,zero
40013f84:	01000044 	movi	r4,1
40013f88:	d811883a 	mov	r8,sp
40013f8c:	003e7c06 	br	40013980 <__alt_data_end+0xc0013980>
40013f90:	50800104 	addi	r2,r10,4
40013f94:	5480000b 	ldhu	r18,0(r10)
40013f98:	0027883a 	mov	r19,zero
40013f9c:	483dcf0e 	bge	r9,zero,400136dc <__alt_data_end+0xc00136dc>
40013fa0:	003fdf06 	br	40013f20 <__alt_data_end+0xc0013f20>
40013fa4:	54800017 	ldw	r18,0(r10)
40013fa8:	52800104 	addi	r10,r10,4
40013fac:	0027883a 	mov	r19,zero
40013fb0:	da802215 	stw	r10,136(sp)
40013fb4:	003d5006 	br	400134f8 <__alt_data_end+0xc00134f8>
40013fb8:	50800104 	addi	r2,r10,4
40013fbc:	5480000b 	ldhu	r18,0(r10)
40013fc0:	0027883a 	mov	r19,zero
40013fc4:	483f7d0e 	bge	r9,zero,40013dbc <__alt_data_end+0xc0013dbc>
40013fc8:	003ddc06 	br	4001373c <__alt_data_end+0xc001373c>
40013fcc:	d8c02215 	stw	r3,136(sp)
40013fd0:	0039883a 	mov	fp,zero
40013fd4:	003ddb06 	br	40013744 <__alt_data_end+0xc0013744>
40013fd8:	029000b4 	movhi	r10,16386
40013fdc:	52bb8b04 	addi	r10,r10,-4564
40013fe0:	da802415 	stw	r10,144(sp)
40013fe4:	003e8306 	br	400139f4 <__alt_data_end+0xc00139f4>
40013fe8:	d8801c17 	ldw	r2,112(sp)
40013fec:	dd002117 	ldw	r20,132(sp)
40013ff0:	103eb926 	beq	r2,zero,40013ad8 <__alt_data_end+0xc0013ad8>
40013ff4:	d9002017 	ldw	r4,128(sp)
40013ff8:	d9801a04 	addi	r6,sp,104
40013ffc:	a00b883a 	mov	r5,r20
40014000:	0012c700 	call	40012c70 <__sprint_r.part.0>
40014004:	003eb406 	br	40013ad8 <__alt_data_end+0xc0013ad8>
40014008:	80c00043 	ldbu	r3,1(r16)
4001400c:	a5000814 	ori	r20,r20,32
40014010:	84000044 	addi	r16,r16,1
40014014:	18c03fcc 	andi	r3,r3,255
40014018:	18c0201c 	xori	r3,r3,128
4001401c:	18ffe004 	addi	r3,r3,-128
40014020:	003bb706 	br	40012f00 <__alt_data_end+0xc0012f00>
40014024:	a809883a 	mov	r4,r21
40014028:	d8c02a15 	stw	r3,168(sp)
4001402c:	da002b15 	stw	r8,172(sp)
40014030:	000c9ec0 	call	4000c9ec <strlen>
40014034:	d8c02a17 	ldw	r3,168(sp)
40014038:	1027883a 	mov	r19,r2
4001403c:	df001d83 	ldbu	fp,118(sp)
40014040:	d8c02215 	stw	r3,136(sp)
40014044:	0013883a 	mov	r9,zero
40014048:	da002b17 	ldw	r8,172(sp)
4001404c:	003c4d06 	br	40013184 <__alt_data_end+0xc0013184>
40014050:	d9402117 	ldw	r5,132(sp)
40014054:	d9002017 	ldw	r4,128(sp)
40014058:	d9801a04 	addi	r6,sp,104
4001405c:	da402c15 	stw	r9,176(sp)
40014060:	0012c700 	call	40012c70 <__sprint_r.part.0>
40014064:	da402c17 	ldw	r9,176(sp)
40014068:	103e9a1e 	bne	r2,zero,40013ad4 <__alt_data_end+0xc0013ad4>
4001406c:	d9401b17 	ldw	r5,108(sp)
40014070:	d8801c17 	ldw	r2,112(sp)
40014074:	d811883a 	mov	r8,sp
40014078:	29000044 	addi	r4,r5,1
4001407c:	003e4206 	br	40013988 <__alt_data_end+0xc0013988>
40014080:	d9401b17 	ldw	r5,108(sp)
40014084:	011000b4 	movhi	r4,16386
40014088:	213b8f04 	addi	r4,r4,-4548
4001408c:	d9002415 	stw	r4,144(sp)
40014090:	29400044 	addi	r5,r5,1
40014094:	003c6d06 	br	4001324c <__alt_data_end+0xc001324c>
40014098:	0039883a 	mov	fp,zero
4001409c:	00800084 	movi	r2,2
400140a0:	10803fcc 	andi	r2,r2,255
400140a4:	01000044 	movi	r4,1
400140a8:	11001e26 	beq	r2,r4,40014124 <___vfiprintf_internal_r+0x13a0>
400140ac:	01000084 	movi	r4,2
400140b0:	11001e1e 	bne	r2,r4,4001412c <___vfiprintf_internal_r+0x13a8>
400140b4:	1829883a 	mov	r20,r3
400140b8:	003eea06 	br	40013c64 <__alt_data_end+0xc0013c64>
400140bc:	a007883a 	mov	r3,r20
400140c0:	00800044 	movi	r2,1
400140c4:	003ff606 	br	400140a0 <__alt_data_end+0xc00140a0>
400140c8:	00800184 	movi	r2,6
400140cc:	1240012e 	bgeu	r2,r9,400140d4 <___vfiprintf_internal_r+0x1350>
400140d0:	1013883a 	mov	r9,r2
400140d4:	4827883a 	mov	r19,r9
400140d8:	4825883a 	mov	r18,r9
400140dc:	48001516 	blt	r9,zero,40014134 <___vfiprintf_internal_r+0x13b0>
400140e0:	055000b4 	movhi	r21,16386
400140e4:	d8c02215 	stw	r3,136(sp)
400140e8:	ad7b3104 	addi	r21,r21,-4924
400140ec:	003d1406 	br	40013540 <__alt_data_end+0xc0013540>
400140f0:	029000b4 	movhi	r10,16386
400140f4:	52bb8b04 	addi	r10,r10,-4564
400140f8:	da802415 	stw	r10,144(sp)
400140fc:	200d883a 	mov	r6,r4
40014100:	003c9106 	br	40013348 <__alt_data_end+0xc0013348>
40014104:	5021883a 	mov	r16,r10
40014108:	0013883a 	mov	r9,zero
4001410c:	003b7d06 	br	40012f04 <__alt_data_end+0xc0012f04>
40014110:	4827883a 	mov	r19,r9
40014114:	df001d83 	ldbu	fp,118(sp)
40014118:	d8c02215 	stw	r3,136(sp)
4001411c:	0013883a 	mov	r9,zero
40014120:	003c1806 	br	40013184 <__alt_data_end+0xc0013184>
40014124:	1829883a 	mov	r20,r3
40014128:	003d1806 	br	4001358c <__alt_data_end+0xc001358c>
4001412c:	1829883a 	mov	r20,r3
40014130:	003ccd06 	br	40013468 <__alt_data_end+0xc0013468>
40014134:	0025883a 	mov	r18,zero
40014138:	003fe906 	br	400140e0 <__alt_data_end+0xc00140e0>
4001413c:	d8802217 	ldw	r2,136(sp)
40014140:	80c00043 	ldbu	r3,1(r16)
40014144:	5021883a 	mov	r16,r10
40014148:	12400017 	ldw	r9,0(r2)
4001414c:	10800104 	addi	r2,r2,4
40014150:	d8802215 	stw	r2,136(sp)
40014154:	483faf0e 	bge	r9,zero,40014014 <__alt_data_end+0xc0014014>
40014158:	18c03fcc 	andi	r3,r3,255
4001415c:	18c0201c 	xori	r3,r3,128
40014160:	027fffc4 	movi	r9,-1
40014164:	18ffe004 	addi	r3,r3,-128
40014168:	003b6506 	br	40012f00 <__alt_data_end+0xc0012f00>
4001416c:	d9c01d85 	stb	r7,118(sp)
40014170:	003ca006 	br	400133f4 <__alt_data_end+0xc00133f4>
40014174:	d9c01d85 	stb	r7,118(sp)
40014178:	003cad06 	br	40013430 <__alt_data_end+0xc0013430>
4001417c:	d9c01d85 	stb	r7,118(sp)
40014180:	003d7d06 	br	40013778 <__alt_data_end+0xc0013778>
40014184:	d9c01d85 	stb	r7,118(sp)
40014188:	003d5f06 	br	40013708 <__alt_data_end+0xc0013708>
4001418c:	a080004c 	andi	r2,r20,1
40014190:	0039883a 	mov	fp,zero
40014194:	10000526 	beq	r2,zero,400141ac <___vfiprintf_internal_r+0x1428>
40014198:	00800c04 	movi	r2,48
4001419c:	d88019c5 	stb	r2,103(sp)
400141a0:	dcc02717 	ldw	r19,156(sp)
400141a4:	dd4019c4 	addi	r21,sp,103
400141a8:	003bf606 	br	40013184 <__alt_data_end+0xc0013184>
400141ac:	0027883a 	mov	r19,zero
400141b0:	dd401a04 	addi	r21,sp,104
400141b4:	003bf306 	br	40013184 <__alt_data_end+0xc0013184>
400141b8:	d9c01d85 	stb	r7,118(sp)
400141bc:	003dc806 	br	400138e0 <__alt_data_end+0xc00138e0>
400141c0:	d9c01d85 	stb	r7,118(sp)
400141c4:	003d3a06 	br	400136b0 <__alt_data_end+0xc00136b0>
400141c8:	d9c01d85 	stb	r7,118(sp)
400141cc:	003d2a06 	br	40013678 <__alt_data_end+0xc0013678>
400141d0:	d9c01d85 	stb	r7,118(sp)
400141d4:	003cde06 	br	40013550 <__alt_data_end+0xc0013550>
400141d8:	d9c01d85 	stb	r7,118(sp)
400141dc:	003cbc06 	br	400134d0 <__alt_data_end+0xc00134d0>

400141e0 <__vfiprintf_internal>:
400141e0:	009000b4 	movhi	r2,16386
400141e4:	108af604 	addi	r2,r2,11224
400141e8:	300f883a 	mov	r7,r6
400141ec:	280d883a 	mov	r6,r5
400141f0:	200b883a 	mov	r5,r4
400141f4:	11000017 	ldw	r4,0(r2)
400141f8:	0012d841 	jmpi	40012d84 <___vfiprintf_internal_r>

400141fc <__sbprintf>:
400141fc:	2880030b 	ldhu	r2,12(r5)
40014200:	2ac01917 	ldw	r11,100(r5)
40014204:	2a80038b 	ldhu	r10,14(r5)
40014208:	2a400717 	ldw	r9,28(r5)
4001420c:	2a000917 	ldw	r8,36(r5)
40014210:	defee204 	addi	sp,sp,-1144
40014214:	00c10004 	movi	r3,1024
40014218:	dc011a15 	stw	r16,1128(sp)
4001421c:	10bfff4c 	andi	r2,r2,65533
40014220:	2821883a 	mov	r16,r5
40014224:	d8cb883a 	add	r5,sp,r3
40014228:	dc811c15 	stw	r18,1136(sp)
4001422c:	dc411b15 	stw	r17,1132(sp)
40014230:	dfc11d15 	stw	ra,1140(sp)
40014234:	2025883a 	mov	r18,r4
40014238:	d881030d 	sth	r2,1036(sp)
4001423c:	dac11915 	stw	r11,1124(sp)
40014240:	da81038d 	sth	r10,1038(sp)
40014244:	da410715 	stw	r9,1052(sp)
40014248:	da010915 	stw	r8,1060(sp)
4001424c:	dec10015 	stw	sp,1024(sp)
40014250:	dec10415 	stw	sp,1040(sp)
40014254:	d8c10215 	stw	r3,1032(sp)
40014258:	d8c10515 	stw	r3,1044(sp)
4001425c:	d8010615 	stw	zero,1048(sp)
40014260:	0012d840 	call	40012d84 <___vfiprintf_internal_r>
40014264:	1023883a 	mov	r17,r2
40014268:	10000416 	blt	r2,zero,4001427c <__sbprintf+0x80>
4001426c:	d9410004 	addi	r5,sp,1024
40014270:	9009883a 	mov	r4,r18
40014274:	0009a780 	call	40009a78 <_fflush_r>
40014278:	10000d1e 	bne	r2,zero,400142b0 <__sbprintf+0xb4>
4001427c:	d881030b 	ldhu	r2,1036(sp)
40014280:	1080100c 	andi	r2,r2,64
40014284:	10000326 	beq	r2,zero,40014294 <__sbprintf+0x98>
40014288:	8080030b 	ldhu	r2,12(r16)
4001428c:	10801014 	ori	r2,r2,64
40014290:	8080030d 	sth	r2,12(r16)
40014294:	8805883a 	mov	r2,r17
40014298:	dfc11d17 	ldw	ra,1140(sp)
4001429c:	dc811c17 	ldw	r18,1136(sp)
400142a0:	dc411b17 	ldw	r17,1132(sp)
400142a4:	dc011a17 	ldw	r16,1128(sp)
400142a8:	dec11e04 	addi	sp,sp,1144
400142ac:	f800283a 	ret
400142b0:	047fffc4 	movi	r17,-1
400142b4:	003ff106 	br	4001427c <__alt_data_end+0xc001427c>

400142b8 <__swbuf_r>:
400142b8:	defffb04 	addi	sp,sp,-20
400142bc:	dcc00315 	stw	r19,12(sp)
400142c0:	dc800215 	stw	r18,8(sp)
400142c4:	dc000015 	stw	r16,0(sp)
400142c8:	dfc00415 	stw	ra,16(sp)
400142cc:	dc400115 	stw	r17,4(sp)
400142d0:	2025883a 	mov	r18,r4
400142d4:	2827883a 	mov	r19,r5
400142d8:	3021883a 	mov	r16,r6
400142dc:	20000226 	beq	r4,zero,400142e8 <__swbuf_r+0x30>
400142e0:	20800e17 	ldw	r2,56(r4)
400142e4:	10004226 	beq	r2,zero,400143f0 <__swbuf_r+0x138>
400142e8:	80800617 	ldw	r2,24(r16)
400142ec:	8100030b 	ldhu	r4,12(r16)
400142f0:	80800215 	stw	r2,8(r16)
400142f4:	2080020c 	andi	r2,r4,8
400142f8:	10003626 	beq	r2,zero,400143d4 <__swbuf_r+0x11c>
400142fc:	80c00417 	ldw	r3,16(r16)
40014300:	18003426 	beq	r3,zero,400143d4 <__swbuf_r+0x11c>
40014304:	2088000c 	andi	r2,r4,8192
40014308:	9c403fcc 	andi	r17,r19,255
4001430c:	10001a26 	beq	r2,zero,40014378 <__swbuf_r+0xc0>
40014310:	80800017 	ldw	r2,0(r16)
40014314:	81000517 	ldw	r4,20(r16)
40014318:	10c7c83a 	sub	r3,r2,r3
4001431c:	1900200e 	bge	r3,r4,400143a0 <__swbuf_r+0xe8>
40014320:	18c00044 	addi	r3,r3,1
40014324:	81000217 	ldw	r4,8(r16)
40014328:	11400044 	addi	r5,r2,1
4001432c:	81400015 	stw	r5,0(r16)
40014330:	213fffc4 	addi	r4,r4,-1
40014334:	81000215 	stw	r4,8(r16)
40014338:	14c00005 	stb	r19,0(r2)
4001433c:	80800517 	ldw	r2,20(r16)
40014340:	10c01e26 	beq	r2,r3,400143bc <__swbuf_r+0x104>
40014344:	8080030b 	ldhu	r2,12(r16)
40014348:	1080004c 	andi	r2,r2,1
4001434c:	10000226 	beq	r2,zero,40014358 <__swbuf_r+0xa0>
40014350:	00800284 	movi	r2,10
40014354:	88801926 	beq	r17,r2,400143bc <__swbuf_r+0x104>
40014358:	8805883a 	mov	r2,r17
4001435c:	dfc00417 	ldw	ra,16(sp)
40014360:	dcc00317 	ldw	r19,12(sp)
40014364:	dc800217 	ldw	r18,8(sp)
40014368:	dc400117 	ldw	r17,4(sp)
4001436c:	dc000017 	ldw	r16,0(sp)
40014370:	dec00504 	addi	sp,sp,20
40014374:	f800283a 	ret
40014378:	81401917 	ldw	r5,100(r16)
4001437c:	00b7ffc4 	movi	r2,-8193
40014380:	21080014 	ori	r4,r4,8192
40014384:	2884703a 	and	r2,r5,r2
40014388:	80801915 	stw	r2,100(r16)
4001438c:	80800017 	ldw	r2,0(r16)
40014390:	8100030d 	sth	r4,12(r16)
40014394:	81000517 	ldw	r4,20(r16)
40014398:	10c7c83a 	sub	r3,r2,r3
4001439c:	193fe016 	blt	r3,r4,40014320 <__alt_data_end+0xc0014320>
400143a0:	800b883a 	mov	r5,r16
400143a4:	9009883a 	mov	r4,r18
400143a8:	0009a780 	call	40009a78 <_fflush_r>
400143ac:	1000071e 	bne	r2,zero,400143cc <__swbuf_r+0x114>
400143b0:	80800017 	ldw	r2,0(r16)
400143b4:	00c00044 	movi	r3,1
400143b8:	003fda06 	br	40014324 <__alt_data_end+0xc0014324>
400143bc:	800b883a 	mov	r5,r16
400143c0:	9009883a 	mov	r4,r18
400143c4:	0009a780 	call	40009a78 <_fflush_r>
400143c8:	103fe326 	beq	r2,zero,40014358 <__alt_data_end+0xc0014358>
400143cc:	00bfffc4 	movi	r2,-1
400143d0:	003fe206 	br	4001435c <__alt_data_end+0xc001435c>
400143d4:	800b883a 	mov	r5,r16
400143d8:	9009883a 	mov	r4,r18
400143dc:	000edbc0 	call	4000edbc <__swsetup_r>
400143e0:	103ffa1e 	bne	r2,zero,400143cc <__alt_data_end+0xc00143cc>
400143e4:	8100030b 	ldhu	r4,12(r16)
400143e8:	80c00417 	ldw	r3,16(r16)
400143ec:	003fc506 	br	40014304 <__alt_data_end+0xc0014304>
400143f0:	0009e540 	call	40009e54 <__sinit>
400143f4:	003fbc06 	br	400142e8 <__alt_data_end+0xc00142e8>

400143f8 <__swbuf>:
400143f8:	009000b4 	movhi	r2,16386
400143fc:	108af604 	addi	r2,r2,11224
40014400:	280d883a 	mov	r6,r5
40014404:	200b883a 	mov	r5,r4
40014408:	11000017 	ldw	r4,0(r2)
4001440c:	00142b81 	jmpi	400142b8 <__swbuf_r>

40014410 <__fputwc>:
40014410:	defff804 	addi	sp,sp,-32
40014414:	dcc00415 	stw	r19,16(sp)
40014418:	dc800315 	stw	r18,12(sp)
4001441c:	dc000115 	stw	r16,4(sp)
40014420:	dfc00715 	stw	ra,28(sp)
40014424:	dd400615 	stw	r21,24(sp)
40014428:	dd000515 	stw	r20,20(sp)
4001442c:	dc400215 	stw	r17,8(sp)
40014430:	2027883a 	mov	r19,r4
40014434:	2825883a 	mov	r18,r5
40014438:	3021883a 	mov	r16,r6
4001443c:	00111040 	call	40011104 <__locale_mb_cur_max>
40014440:	00c00044 	movi	r3,1
40014444:	10c03e26 	beq	r2,r3,40014540 <__fputwc+0x130>
40014448:	81c01704 	addi	r7,r16,92
4001444c:	900d883a 	mov	r6,r18
40014450:	d80b883a 	mov	r5,sp
40014454:	9809883a 	mov	r4,r19
40014458:	00146180 	call	40014618 <_wcrtomb_r>
4001445c:	1029883a 	mov	r20,r2
40014460:	00bfffc4 	movi	r2,-1
40014464:	a0802026 	beq	r20,r2,400144e8 <__fputwc+0xd8>
40014468:	d9400003 	ldbu	r5,0(sp)
4001446c:	a0001c26 	beq	r20,zero,400144e0 <__fputwc+0xd0>
40014470:	0023883a 	mov	r17,zero
40014474:	05400284 	movi	r21,10
40014478:	00000906 	br	400144a0 <__fputwc+0x90>
4001447c:	80800017 	ldw	r2,0(r16)
40014480:	11400005 	stb	r5,0(r2)
40014484:	80c00017 	ldw	r3,0(r16)
40014488:	18c00044 	addi	r3,r3,1
4001448c:	80c00015 	stw	r3,0(r16)
40014490:	8c400044 	addi	r17,r17,1
40014494:	dc45883a 	add	r2,sp,r17
40014498:	8d00112e 	bgeu	r17,r20,400144e0 <__fputwc+0xd0>
4001449c:	11400003 	ldbu	r5,0(r2)
400144a0:	80c00217 	ldw	r3,8(r16)
400144a4:	18ffffc4 	addi	r3,r3,-1
400144a8:	80c00215 	stw	r3,8(r16)
400144ac:	183ff30e 	bge	r3,zero,4001447c <__alt_data_end+0xc001447c>
400144b0:	80800617 	ldw	r2,24(r16)
400144b4:	18801916 	blt	r3,r2,4001451c <__fputwc+0x10c>
400144b8:	80800017 	ldw	r2,0(r16)
400144bc:	11400005 	stb	r5,0(r2)
400144c0:	80800017 	ldw	r2,0(r16)
400144c4:	10c00003 	ldbu	r3,0(r2)
400144c8:	10800044 	addi	r2,r2,1
400144cc:	1d402326 	beq	r3,r21,4001455c <__fputwc+0x14c>
400144d0:	80800015 	stw	r2,0(r16)
400144d4:	8c400044 	addi	r17,r17,1
400144d8:	dc45883a 	add	r2,sp,r17
400144dc:	8d3fef36 	bltu	r17,r20,4001449c <__alt_data_end+0xc001449c>
400144e0:	9005883a 	mov	r2,r18
400144e4:	00000406 	br	400144f8 <__fputwc+0xe8>
400144e8:	80c0030b 	ldhu	r3,12(r16)
400144ec:	a005883a 	mov	r2,r20
400144f0:	18c01014 	ori	r3,r3,64
400144f4:	80c0030d 	sth	r3,12(r16)
400144f8:	dfc00717 	ldw	ra,28(sp)
400144fc:	dd400617 	ldw	r21,24(sp)
40014500:	dd000517 	ldw	r20,20(sp)
40014504:	dcc00417 	ldw	r19,16(sp)
40014508:	dc800317 	ldw	r18,12(sp)
4001450c:	dc400217 	ldw	r17,8(sp)
40014510:	dc000117 	ldw	r16,4(sp)
40014514:	dec00804 	addi	sp,sp,32
40014518:	f800283a 	ret
4001451c:	800d883a 	mov	r6,r16
40014520:	29403fcc 	andi	r5,r5,255
40014524:	9809883a 	mov	r4,r19
40014528:	00142b80 	call	400142b8 <__swbuf_r>
4001452c:	10bfffe0 	cmpeqi	r2,r2,-1
40014530:	10803fcc 	andi	r2,r2,255
40014534:	103fd626 	beq	r2,zero,40014490 <__alt_data_end+0xc0014490>
40014538:	00bfffc4 	movi	r2,-1
4001453c:	003fee06 	br	400144f8 <__alt_data_end+0xc00144f8>
40014540:	90ffffc4 	addi	r3,r18,-1
40014544:	01003f84 	movi	r4,254
40014548:	20ffbf36 	bltu	r4,r3,40014448 <__alt_data_end+0xc0014448>
4001454c:	900b883a 	mov	r5,r18
40014550:	dc800005 	stb	r18,0(sp)
40014554:	1029883a 	mov	r20,r2
40014558:	003fc506 	br	40014470 <__alt_data_end+0xc0014470>
4001455c:	800d883a 	mov	r6,r16
40014560:	a80b883a 	mov	r5,r21
40014564:	9809883a 	mov	r4,r19
40014568:	00142b80 	call	400142b8 <__swbuf_r>
4001456c:	10bfffe0 	cmpeqi	r2,r2,-1
40014570:	003fef06 	br	40014530 <__alt_data_end+0xc0014530>

40014574 <_fputwc_r>:
40014574:	3080030b 	ldhu	r2,12(r6)
40014578:	10c8000c 	andi	r3,r2,8192
4001457c:	1800051e 	bne	r3,zero,40014594 <_fputwc_r+0x20>
40014580:	30c01917 	ldw	r3,100(r6)
40014584:	10880014 	ori	r2,r2,8192
40014588:	3080030d 	sth	r2,12(r6)
4001458c:	18880014 	ori	r2,r3,8192
40014590:	30801915 	stw	r2,100(r6)
40014594:	00144101 	jmpi	40014410 <__fputwc>

40014598 <fputwc>:
40014598:	009000b4 	movhi	r2,16386
4001459c:	defffc04 	addi	sp,sp,-16
400145a0:	108af604 	addi	r2,r2,11224
400145a4:	dc000115 	stw	r16,4(sp)
400145a8:	14000017 	ldw	r16,0(r2)
400145ac:	dc400215 	stw	r17,8(sp)
400145b0:	dfc00315 	stw	ra,12(sp)
400145b4:	2023883a 	mov	r17,r4
400145b8:	80000226 	beq	r16,zero,400145c4 <fputwc+0x2c>
400145bc:	80800e17 	ldw	r2,56(r16)
400145c0:	10001026 	beq	r2,zero,40014604 <fputwc+0x6c>
400145c4:	2880030b 	ldhu	r2,12(r5)
400145c8:	10c8000c 	andi	r3,r2,8192
400145cc:	1800051e 	bne	r3,zero,400145e4 <fputwc+0x4c>
400145d0:	28c01917 	ldw	r3,100(r5)
400145d4:	10880014 	ori	r2,r2,8192
400145d8:	2880030d 	sth	r2,12(r5)
400145dc:	18880014 	ori	r2,r3,8192
400145e0:	28801915 	stw	r2,100(r5)
400145e4:	280d883a 	mov	r6,r5
400145e8:	8009883a 	mov	r4,r16
400145ec:	880b883a 	mov	r5,r17
400145f0:	dfc00317 	ldw	ra,12(sp)
400145f4:	dc400217 	ldw	r17,8(sp)
400145f8:	dc000117 	ldw	r16,4(sp)
400145fc:	dec00404 	addi	sp,sp,16
40014600:	00144101 	jmpi	40014410 <__fputwc>
40014604:	8009883a 	mov	r4,r16
40014608:	d9400015 	stw	r5,0(sp)
4001460c:	0009e540 	call	40009e54 <__sinit>
40014610:	d9400017 	ldw	r5,0(sp)
40014614:	003feb06 	br	400145c4 <__alt_data_end+0xc00145c4>

40014618 <_wcrtomb_r>:
40014618:	defff604 	addi	sp,sp,-40
4001461c:	009000b4 	movhi	r2,16386
40014620:	dc800815 	stw	r18,32(sp)
40014624:	dc400715 	stw	r17,28(sp)
40014628:	dc000615 	stw	r16,24(sp)
4001462c:	108afa04 	addi	r2,r2,11240
40014630:	dfc00915 	stw	ra,36(sp)
40014634:	2021883a 	mov	r16,r4
40014638:	3823883a 	mov	r17,r7
4001463c:	14800017 	ldw	r18,0(r2)
40014640:	28001426 	beq	r5,zero,40014694 <_wcrtomb_r+0x7c>
40014644:	d9400415 	stw	r5,16(sp)
40014648:	d9800515 	stw	r6,20(sp)
4001464c:	00110f80 	call	400110f8 <__locale_charset>
40014650:	d9800517 	ldw	r6,20(sp)
40014654:	d9400417 	ldw	r5,16(sp)
40014658:	100f883a 	mov	r7,r2
4001465c:	dc400015 	stw	r17,0(sp)
40014660:	8009883a 	mov	r4,r16
40014664:	903ee83a 	callr	r18
40014668:	00ffffc4 	movi	r3,-1
4001466c:	10c0031e 	bne	r2,r3,4001467c <_wcrtomb_r+0x64>
40014670:	88000015 	stw	zero,0(r17)
40014674:	00c02284 	movi	r3,138
40014678:	80c00015 	stw	r3,0(r16)
4001467c:	dfc00917 	ldw	ra,36(sp)
40014680:	dc800817 	ldw	r18,32(sp)
40014684:	dc400717 	ldw	r17,28(sp)
40014688:	dc000617 	ldw	r16,24(sp)
4001468c:	dec00a04 	addi	sp,sp,40
40014690:	f800283a 	ret
40014694:	00110f80 	call	400110f8 <__locale_charset>
40014698:	100f883a 	mov	r7,r2
4001469c:	dc400015 	stw	r17,0(sp)
400146a0:	000d883a 	mov	r6,zero
400146a4:	d9400104 	addi	r5,sp,4
400146a8:	8009883a 	mov	r4,r16
400146ac:	903ee83a 	callr	r18
400146b0:	003fed06 	br	40014668 <__alt_data_end+0xc0014668>

400146b4 <wcrtomb>:
400146b4:	defff604 	addi	sp,sp,-40
400146b8:	009000b4 	movhi	r2,16386
400146bc:	dc800615 	stw	r18,24(sp)
400146c0:	dc400515 	stw	r17,20(sp)
400146c4:	108af604 	addi	r2,r2,11224
400146c8:	dfc00915 	stw	ra,36(sp)
400146cc:	dd000815 	stw	r20,32(sp)
400146d0:	dcc00715 	stw	r19,28(sp)
400146d4:	dc000415 	stw	r16,16(sp)
400146d8:	3025883a 	mov	r18,r6
400146dc:	14400017 	ldw	r17,0(r2)
400146e0:	20001926 	beq	r4,zero,40014748 <wcrtomb+0x94>
400146e4:	009000b4 	movhi	r2,16386
400146e8:	108afa04 	addi	r2,r2,11240
400146ec:	15000017 	ldw	r20,0(r2)
400146f0:	2021883a 	mov	r16,r4
400146f4:	2827883a 	mov	r19,r5
400146f8:	00110f80 	call	400110f8 <__locale_charset>
400146fc:	100f883a 	mov	r7,r2
40014700:	dc800015 	stw	r18,0(sp)
40014704:	980d883a 	mov	r6,r19
40014708:	800b883a 	mov	r5,r16
4001470c:	8809883a 	mov	r4,r17
40014710:	a03ee83a 	callr	r20
40014714:	00ffffc4 	movi	r3,-1
40014718:	10c0031e 	bne	r2,r3,40014728 <wcrtomb+0x74>
4001471c:	90000015 	stw	zero,0(r18)
40014720:	00c02284 	movi	r3,138
40014724:	88c00015 	stw	r3,0(r17)
40014728:	dfc00917 	ldw	ra,36(sp)
4001472c:	dd000817 	ldw	r20,32(sp)
40014730:	dcc00717 	ldw	r19,28(sp)
40014734:	dc800617 	ldw	r18,24(sp)
40014738:	dc400517 	ldw	r17,20(sp)
4001473c:	dc000417 	ldw	r16,16(sp)
40014740:	dec00a04 	addi	sp,sp,40
40014744:	f800283a 	ret
40014748:	009000b4 	movhi	r2,16386
4001474c:	108afa04 	addi	r2,r2,11240
40014750:	14000017 	ldw	r16,0(r2)
40014754:	00110f80 	call	400110f8 <__locale_charset>
40014758:	100f883a 	mov	r7,r2
4001475c:	dc800015 	stw	r18,0(sp)
40014760:	000d883a 	mov	r6,zero
40014764:	d9400104 	addi	r5,sp,4
40014768:	8809883a 	mov	r4,r17
4001476c:	803ee83a 	callr	r16
40014770:	003fe806 	br	40014714 <__alt_data_end+0xc0014714>

40014774 <__ascii_wctomb>:
40014774:	28000526 	beq	r5,zero,4001478c <__ascii_wctomb+0x18>
40014778:	00803fc4 	movi	r2,255
4001477c:	11800536 	bltu	r2,r6,40014794 <__ascii_wctomb+0x20>
40014780:	29800005 	stb	r6,0(r5)
40014784:	00800044 	movi	r2,1
40014788:	f800283a 	ret
4001478c:	0005883a 	mov	r2,zero
40014790:	f800283a 	ret
40014794:	00802284 	movi	r2,138
40014798:	20800015 	stw	r2,0(r4)
4001479c:	00bfffc4 	movi	r2,-1
400147a0:	f800283a 	ret

400147a4 <_wctomb_r>:
400147a4:	009000b4 	movhi	r2,16386
400147a8:	defff904 	addi	sp,sp,-28
400147ac:	108afa04 	addi	r2,r2,11240
400147b0:	dfc00615 	stw	ra,24(sp)
400147b4:	dc400515 	stw	r17,20(sp)
400147b8:	dc000415 	stw	r16,16(sp)
400147bc:	3823883a 	mov	r17,r7
400147c0:	14000017 	ldw	r16,0(r2)
400147c4:	d9000115 	stw	r4,4(sp)
400147c8:	d9400215 	stw	r5,8(sp)
400147cc:	d9800315 	stw	r6,12(sp)
400147d0:	00110f80 	call	400110f8 <__locale_charset>
400147d4:	d9800317 	ldw	r6,12(sp)
400147d8:	d9400217 	ldw	r5,8(sp)
400147dc:	d9000117 	ldw	r4,4(sp)
400147e0:	100f883a 	mov	r7,r2
400147e4:	dc400015 	stw	r17,0(sp)
400147e8:	803ee83a 	callr	r16
400147ec:	dfc00617 	ldw	ra,24(sp)
400147f0:	dc400517 	ldw	r17,20(sp)
400147f4:	dc000417 	ldw	r16,16(sp)
400147f8:	dec00704 	addi	sp,sp,28
400147fc:	f800283a 	ret

40014800 <__udivdi3>:
40014800:	defff504 	addi	sp,sp,-44
40014804:	dcc00415 	stw	r19,16(sp)
40014808:	dc000115 	stw	r16,4(sp)
4001480c:	dfc00a15 	stw	ra,40(sp)
40014810:	df000915 	stw	fp,36(sp)
40014814:	ddc00815 	stw	r23,32(sp)
40014818:	dd800715 	stw	r22,28(sp)
4001481c:	dd400615 	stw	r21,24(sp)
40014820:	dd000515 	stw	r20,20(sp)
40014824:	dc800315 	stw	r18,12(sp)
40014828:	dc400215 	stw	r17,8(sp)
4001482c:	2027883a 	mov	r19,r4
40014830:	2821883a 	mov	r16,r5
40014834:	3800411e 	bne	r7,zero,4001493c <__udivdi3+0x13c>
40014838:	3023883a 	mov	r17,r6
4001483c:	2025883a 	mov	r18,r4
40014840:	2980522e 	bgeu	r5,r6,4001498c <__udivdi3+0x18c>
40014844:	00bfffd4 	movui	r2,65535
40014848:	282d883a 	mov	r22,r5
4001484c:	1180a836 	bltu	r2,r6,40014af0 <__udivdi3+0x2f0>
40014850:	00803fc4 	movi	r2,255
40014854:	1185803a 	cmpltu	r2,r2,r6
40014858:	100490fa 	slli	r2,r2,3
4001485c:	3086d83a 	srl	r3,r6,r2
40014860:	011000b4 	movhi	r4,16386
40014864:	21392204 	addi	r4,r4,-7032
40014868:	20c7883a 	add	r3,r4,r3
4001486c:	18c00003 	ldbu	r3,0(r3)
40014870:	1885883a 	add	r2,r3,r2
40014874:	00c00804 	movi	r3,32
40014878:	1887c83a 	sub	r3,r3,r2
4001487c:	18000526 	beq	r3,zero,40014894 <__udivdi3+0x94>
40014880:	80e0983a 	sll	r16,r16,r3
40014884:	9884d83a 	srl	r2,r19,r2
40014888:	30e2983a 	sll	r17,r6,r3
4001488c:	98e4983a 	sll	r18,r19,r3
40014890:	142cb03a 	or	r22,r2,r16
40014894:	882ad43a 	srli	r21,r17,16
40014898:	b009883a 	mov	r4,r22
4001489c:	8d3fffcc 	andi	r20,r17,65535
400148a0:	a80b883a 	mov	r5,r21
400148a4:	0007ad80 	call	40007ad8 <__umodsi3>
400148a8:	b009883a 	mov	r4,r22
400148ac:	a80b883a 	mov	r5,r21
400148b0:	1027883a 	mov	r19,r2
400148b4:	0007a740 	call	40007a74 <__udivsi3>
400148b8:	102d883a 	mov	r22,r2
400148bc:	9826943a 	slli	r19,r19,16
400148c0:	9004d43a 	srli	r2,r18,16
400148c4:	a5a1383a 	mul	r16,r20,r22
400148c8:	14c4b03a 	or	r2,r2,r19
400148cc:	1400052e 	bgeu	r2,r16,400148e4 <__udivdi3+0xe4>
400148d0:	1445883a 	add	r2,r2,r17
400148d4:	b0ffffc4 	addi	r3,r22,-1
400148d8:	14400136 	bltu	r2,r17,400148e0 <__udivdi3+0xe0>
400148dc:	14012336 	bltu	r2,r16,40014d6c <__udivdi3+0x56c>
400148e0:	182d883a 	mov	r22,r3
400148e4:	1421c83a 	sub	r16,r2,r16
400148e8:	a80b883a 	mov	r5,r21
400148ec:	8009883a 	mov	r4,r16
400148f0:	0007ad80 	call	40007ad8 <__umodsi3>
400148f4:	1027883a 	mov	r19,r2
400148f8:	a80b883a 	mov	r5,r21
400148fc:	8009883a 	mov	r4,r16
40014900:	0007a740 	call	40007a74 <__udivsi3>
40014904:	9826943a 	slli	r19,r19,16
40014908:	a0a9383a 	mul	r20,r20,r2
4001490c:	94bfffcc 	andi	r18,r18,65535
40014910:	94e4b03a 	or	r18,r18,r19
40014914:	9500052e 	bgeu	r18,r20,4001492c <__udivdi3+0x12c>
40014918:	8ca5883a 	add	r18,r17,r18
4001491c:	10ffffc4 	addi	r3,r2,-1
40014920:	9440f136 	bltu	r18,r17,40014ce8 <__udivdi3+0x4e8>
40014924:	9500f02e 	bgeu	r18,r20,40014ce8 <__udivdi3+0x4e8>
40014928:	10bfff84 	addi	r2,r2,-2
4001492c:	b00c943a 	slli	r6,r22,16
40014930:	0007883a 	mov	r3,zero
40014934:	3084b03a 	or	r2,r6,r2
40014938:	00005906 	br	40014aa0 <__udivdi3+0x2a0>
4001493c:	29c05636 	bltu	r5,r7,40014a98 <__udivdi3+0x298>
40014940:	00bfffd4 	movui	r2,65535
40014944:	11c0622e 	bgeu	r2,r7,40014ad0 <__udivdi3+0x2d0>
40014948:	00804034 	movhi	r2,256
4001494c:	10bfffc4 	addi	r2,r2,-1
40014950:	11c0ee36 	bltu	r2,r7,40014d0c <__udivdi3+0x50c>
40014954:	00800404 	movi	r2,16
40014958:	3886d83a 	srl	r3,r7,r2
4001495c:	011000b4 	movhi	r4,16386
40014960:	21392204 	addi	r4,r4,-7032
40014964:	20c7883a 	add	r3,r4,r3
40014968:	18c00003 	ldbu	r3,0(r3)
4001496c:	05400804 	movi	r21,32
40014970:	1885883a 	add	r2,r3,r2
40014974:	a8abc83a 	sub	r21,r21,r2
40014978:	a800621e 	bne	r21,zero,40014b04 <__udivdi3+0x304>
4001497c:	3c00e936 	bltu	r7,r16,40014d24 <__udivdi3+0x524>
40014980:	9985403a 	cmpgeu	r2,r19,r6
40014984:	0007883a 	mov	r3,zero
40014988:	00004506 	br	40014aa0 <__udivdi3+0x2a0>
4001498c:	3000041e 	bne	r6,zero,400149a0 <__udivdi3+0x1a0>
40014990:	000b883a 	mov	r5,zero
40014994:	01000044 	movi	r4,1
40014998:	0007a740 	call	40007a74 <__udivsi3>
4001499c:	1023883a 	mov	r17,r2
400149a0:	00bfffd4 	movui	r2,65535
400149a4:	14404e2e 	bgeu	r2,r17,40014ae0 <__udivdi3+0x2e0>
400149a8:	00804034 	movhi	r2,256
400149ac:	10bfffc4 	addi	r2,r2,-1
400149b0:	1440d836 	bltu	r2,r17,40014d14 <__udivdi3+0x514>
400149b4:	00800404 	movi	r2,16
400149b8:	8886d83a 	srl	r3,r17,r2
400149bc:	011000b4 	movhi	r4,16386
400149c0:	21392204 	addi	r4,r4,-7032
400149c4:	20c7883a 	add	r3,r4,r3
400149c8:	18c00003 	ldbu	r3,0(r3)
400149cc:	1885883a 	add	r2,r3,r2
400149d0:	00c00804 	movi	r3,32
400149d4:	1887c83a 	sub	r3,r3,r2
400149d8:	18008f1e 	bne	r3,zero,40014c18 <__udivdi3+0x418>
400149dc:	882ad43a 	srli	r21,r17,16
400149e0:	8461c83a 	sub	r16,r16,r17
400149e4:	8d3fffcc 	andi	r20,r17,65535
400149e8:	00c00044 	movi	r3,1
400149ec:	8009883a 	mov	r4,r16
400149f0:	a80b883a 	mov	r5,r21
400149f4:	d8c00015 	stw	r3,0(sp)
400149f8:	0007ad80 	call	40007ad8 <__umodsi3>
400149fc:	8009883a 	mov	r4,r16
40014a00:	a80b883a 	mov	r5,r21
40014a04:	1027883a 	mov	r19,r2
40014a08:	0007a740 	call	40007a74 <__udivsi3>
40014a0c:	9826943a 	slli	r19,r19,16
40014a10:	9008d43a 	srli	r4,r18,16
40014a14:	1521383a 	mul	r16,r2,r20
40014a18:	102d883a 	mov	r22,r2
40014a1c:	24c8b03a 	or	r4,r4,r19
40014a20:	d8c00017 	ldw	r3,0(sp)
40014a24:	2400052e 	bgeu	r4,r16,40014a3c <__udivdi3+0x23c>
40014a28:	2449883a 	add	r4,r4,r17
40014a2c:	b0bfffc4 	addi	r2,r22,-1
40014a30:	24400136 	bltu	r4,r17,40014a38 <__udivdi3+0x238>
40014a34:	2400ca36 	bltu	r4,r16,40014d60 <__udivdi3+0x560>
40014a38:	102d883a 	mov	r22,r2
40014a3c:	2421c83a 	sub	r16,r4,r16
40014a40:	a80b883a 	mov	r5,r21
40014a44:	8009883a 	mov	r4,r16
40014a48:	d8c00015 	stw	r3,0(sp)
40014a4c:	0007ad80 	call	40007ad8 <__umodsi3>
40014a50:	1027883a 	mov	r19,r2
40014a54:	a80b883a 	mov	r5,r21
40014a58:	8009883a 	mov	r4,r16
40014a5c:	0007a740 	call	40007a74 <__udivsi3>
40014a60:	9826943a 	slli	r19,r19,16
40014a64:	1529383a 	mul	r20,r2,r20
40014a68:	94bfffcc 	andi	r18,r18,65535
40014a6c:	94e4b03a 	or	r18,r18,r19
40014a70:	d8c00017 	ldw	r3,0(sp)
40014a74:	9500052e 	bgeu	r18,r20,40014a8c <__udivdi3+0x28c>
40014a78:	8ca5883a 	add	r18,r17,r18
40014a7c:	113fffc4 	addi	r4,r2,-1
40014a80:	94409736 	bltu	r18,r17,40014ce0 <__udivdi3+0x4e0>
40014a84:	9500962e 	bgeu	r18,r20,40014ce0 <__udivdi3+0x4e0>
40014a88:	10bfff84 	addi	r2,r2,-2
40014a8c:	b00c943a 	slli	r6,r22,16
40014a90:	3084b03a 	or	r2,r6,r2
40014a94:	00000206 	br	40014aa0 <__udivdi3+0x2a0>
40014a98:	0007883a 	mov	r3,zero
40014a9c:	0005883a 	mov	r2,zero
40014aa0:	dfc00a17 	ldw	ra,40(sp)
40014aa4:	df000917 	ldw	fp,36(sp)
40014aa8:	ddc00817 	ldw	r23,32(sp)
40014aac:	dd800717 	ldw	r22,28(sp)
40014ab0:	dd400617 	ldw	r21,24(sp)
40014ab4:	dd000517 	ldw	r20,20(sp)
40014ab8:	dcc00417 	ldw	r19,16(sp)
40014abc:	dc800317 	ldw	r18,12(sp)
40014ac0:	dc400217 	ldw	r17,8(sp)
40014ac4:	dc000117 	ldw	r16,4(sp)
40014ac8:	dec00b04 	addi	sp,sp,44
40014acc:	f800283a 	ret
40014ad0:	00803fc4 	movi	r2,255
40014ad4:	11c5803a 	cmpltu	r2,r2,r7
40014ad8:	100490fa 	slli	r2,r2,3
40014adc:	003f9e06 	br	40014958 <__alt_data_end+0xc0014958>
40014ae0:	00803fc4 	movi	r2,255
40014ae4:	1445803a 	cmpltu	r2,r2,r17
40014ae8:	100490fa 	slli	r2,r2,3
40014aec:	003fb206 	br	400149b8 <__alt_data_end+0xc00149b8>
40014af0:	00804034 	movhi	r2,256
40014af4:	10bfffc4 	addi	r2,r2,-1
40014af8:	11808836 	bltu	r2,r6,40014d1c <__udivdi3+0x51c>
40014afc:	00800404 	movi	r2,16
40014b00:	003f5606 	br	4001485c <__alt_data_end+0xc001485c>
40014b04:	30aed83a 	srl	r23,r6,r2
40014b08:	3d4e983a 	sll	r7,r7,r21
40014b0c:	80acd83a 	srl	r22,r16,r2
40014b10:	9884d83a 	srl	r2,r19,r2
40014b14:	3deeb03a 	or	r23,r7,r23
40014b18:	b824d43a 	srli	r18,r23,16
40014b1c:	8560983a 	sll	r16,r16,r21
40014b20:	b009883a 	mov	r4,r22
40014b24:	900b883a 	mov	r5,r18
40014b28:	3568983a 	sll	r20,r6,r21
40014b2c:	1420b03a 	or	r16,r2,r16
40014b30:	0007ad80 	call	40007ad8 <__umodsi3>
40014b34:	b009883a 	mov	r4,r22
40014b38:	900b883a 	mov	r5,r18
40014b3c:	1023883a 	mov	r17,r2
40014b40:	0007a740 	call	40007a74 <__udivsi3>
40014b44:	8808943a 	slli	r4,r17,16
40014b48:	bf3fffcc 	andi	fp,r23,65535
40014b4c:	8006d43a 	srli	r3,r16,16
40014b50:	e0a3383a 	mul	r17,fp,r2
40014b54:	100d883a 	mov	r6,r2
40014b58:	1906b03a 	or	r3,r3,r4
40014b5c:	1c40042e 	bgeu	r3,r17,40014b70 <__udivdi3+0x370>
40014b60:	1dc7883a 	add	r3,r3,r23
40014b64:	10bfffc4 	addi	r2,r2,-1
40014b68:	1dc0752e 	bgeu	r3,r23,40014d40 <__udivdi3+0x540>
40014b6c:	100d883a 	mov	r6,r2
40014b70:	1c63c83a 	sub	r17,r3,r17
40014b74:	900b883a 	mov	r5,r18
40014b78:	8809883a 	mov	r4,r17
40014b7c:	d9800015 	stw	r6,0(sp)
40014b80:	0007ad80 	call	40007ad8 <__umodsi3>
40014b84:	102d883a 	mov	r22,r2
40014b88:	8809883a 	mov	r4,r17
40014b8c:	900b883a 	mov	r5,r18
40014b90:	0007a740 	call	40007a74 <__udivsi3>
40014b94:	b02c943a 	slli	r22,r22,16
40014b98:	e089383a 	mul	r4,fp,r2
40014b9c:	843fffcc 	andi	r16,r16,65535
40014ba0:	85a0b03a 	or	r16,r16,r22
40014ba4:	d9800017 	ldw	r6,0(sp)
40014ba8:	8100042e 	bgeu	r16,r4,40014bbc <__udivdi3+0x3bc>
40014bac:	85e1883a 	add	r16,r16,r23
40014bb0:	10ffffc4 	addi	r3,r2,-1
40014bb4:	85c05e2e 	bgeu	r16,r23,40014d30 <__udivdi3+0x530>
40014bb8:	1805883a 	mov	r2,r3
40014bbc:	300c943a 	slli	r6,r6,16
40014bc0:	a17fffcc 	andi	r5,r20,65535
40014bc4:	a028d43a 	srli	r20,r20,16
40014bc8:	3084b03a 	or	r2,r6,r2
40014bcc:	10ffffcc 	andi	r3,r2,65535
40014bd0:	100cd43a 	srli	r6,r2,16
40014bd4:	194f383a 	mul	r7,r3,r5
40014bd8:	1d07383a 	mul	r3,r3,r20
40014bdc:	314b383a 	mul	r5,r6,r5
40014be0:	3810d43a 	srli	r8,r7,16
40014be4:	8121c83a 	sub	r16,r16,r4
40014be8:	1947883a 	add	r3,r3,r5
40014bec:	40c7883a 	add	r3,r8,r3
40014bf0:	350d383a 	mul	r6,r6,r20
40014bf4:	1940022e 	bgeu	r3,r5,40014c00 <__udivdi3+0x400>
40014bf8:	01000074 	movhi	r4,1
40014bfc:	310d883a 	add	r6,r6,r4
40014c00:	1828d43a 	srli	r20,r3,16
40014c04:	a18d883a 	add	r6,r20,r6
40014c08:	81803e36 	bltu	r16,r6,40014d04 <__udivdi3+0x504>
40014c0c:	81803826 	beq	r16,r6,40014cf0 <__udivdi3+0x4f0>
40014c10:	0007883a 	mov	r3,zero
40014c14:	003fa206 	br	40014aa0 <__alt_data_end+0xc0014aa0>
40014c18:	88e2983a 	sll	r17,r17,r3
40014c1c:	80a8d83a 	srl	r20,r16,r2
40014c20:	80e0983a 	sll	r16,r16,r3
40014c24:	882ad43a 	srli	r21,r17,16
40014c28:	9884d83a 	srl	r2,r19,r2
40014c2c:	a009883a 	mov	r4,r20
40014c30:	a80b883a 	mov	r5,r21
40014c34:	142eb03a 	or	r23,r2,r16
40014c38:	98e4983a 	sll	r18,r19,r3
40014c3c:	0007ad80 	call	40007ad8 <__umodsi3>
40014c40:	a009883a 	mov	r4,r20
40014c44:	a80b883a 	mov	r5,r21
40014c48:	1021883a 	mov	r16,r2
40014c4c:	0007a740 	call	40007a74 <__udivsi3>
40014c50:	1039883a 	mov	fp,r2
40014c54:	8d3fffcc 	andi	r20,r17,65535
40014c58:	8020943a 	slli	r16,r16,16
40014c5c:	b804d43a 	srli	r2,r23,16
40014c60:	a72d383a 	mul	r22,r20,fp
40014c64:	1404b03a 	or	r2,r2,r16
40014c68:	1580062e 	bgeu	r2,r22,40014c84 <__udivdi3+0x484>
40014c6c:	1445883a 	add	r2,r2,r17
40014c70:	e0ffffc4 	addi	r3,fp,-1
40014c74:	14403836 	bltu	r2,r17,40014d58 <__udivdi3+0x558>
40014c78:	1580372e 	bgeu	r2,r22,40014d58 <__udivdi3+0x558>
40014c7c:	e73fff84 	addi	fp,fp,-2
40014c80:	1445883a 	add	r2,r2,r17
40014c84:	15adc83a 	sub	r22,r2,r22
40014c88:	a80b883a 	mov	r5,r21
40014c8c:	b009883a 	mov	r4,r22
40014c90:	0007ad80 	call	40007ad8 <__umodsi3>
40014c94:	1027883a 	mov	r19,r2
40014c98:	b009883a 	mov	r4,r22
40014c9c:	a80b883a 	mov	r5,r21
40014ca0:	0007a740 	call	40007a74 <__udivsi3>
40014ca4:	9826943a 	slli	r19,r19,16
40014ca8:	a0a1383a 	mul	r16,r20,r2
40014cac:	b93fffcc 	andi	r4,r23,65535
40014cb0:	24c8b03a 	or	r4,r4,r19
40014cb4:	2400062e 	bgeu	r4,r16,40014cd0 <__udivdi3+0x4d0>
40014cb8:	2449883a 	add	r4,r4,r17
40014cbc:	10ffffc4 	addi	r3,r2,-1
40014cc0:	24402336 	bltu	r4,r17,40014d50 <__udivdi3+0x550>
40014cc4:	2400222e 	bgeu	r4,r16,40014d50 <__udivdi3+0x550>
40014cc8:	10bfff84 	addi	r2,r2,-2
40014ccc:	2449883a 	add	r4,r4,r17
40014cd0:	e038943a 	slli	fp,fp,16
40014cd4:	2421c83a 	sub	r16,r4,r16
40014cd8:	e086b03a 	or	r3,fp,r2
40014cdc:	003f4306 	br	400149ec <__alt_data_end+0xc00149ec>
40014ce0:	2005883a 	mov	r2,r4
40014ce4:	003f6906 	br	40014a8c <__alt_data_end+0xc0014a8c>
40014ce8:	1805883a 	mov	r2,r3
40014cec:	003f0f06 	br	4001492c <__alt_data_end+0xc001492c>
40014cf0:	1806943a 	slli	r3,r3,16
40014cf4:	9d66983a 	sll	r19,r19,r21
40014cf8:	39ffffcc 	andi	r7,r7,65535
40014cfc:	19c7883a 	add	r3,r3,r7
40014d00:	98ffc32e 	bgeu	r19,r3,40014c10 <__alt_data_end+0xc0014c10>
40014d04:	10bfffc4 	addi	r2,r2,-1
40014d08:	003fc106 	br	40014c10 <__alt_data_end+0xc0014c10>
40014d0c:	00800604 	movi	r2,24
40014d10:	003f1106 	br	40014958 <__alt_data_end+0xc0014958>
40014d14:	00800604 	movi	r2,24
40014d18:	003f2706 	br	400149b8 <__alt_data_end+0xc00149b8>
40014d1c:	00800604 	movi	r2,24
40014d20:	003ece06 	br	4001485c <__alt_data_end+0xc001485c>
40014d24:	0007883a 	mov	r3,zero
40014d28:	00800044 	movi	r2,1
40014d2c:	003f5c06 	br	40014aa0 <__alt_data_end+0xc0014aa0>
40014d30:	813fa12e 	bgeu	r16,r4,40014bb8 <__alt_data_end+0xc0014bb8>
40014d34:	10bfff84 	addi	r2,r2,-2
40014d38:	85e1883a 	add	r16,r16,r23
40014d3c:	003f9f06 	br	40014bbc <__alt_data_end+0xc0014bbc>
40014d40:	1c7f8a2e 	bgeu	r3,r17,40014b6c <__alt_data_end+0xc0014b6c>
40014d44:	31bfff84 	addi	r6,r6,-2
40014d48:	1dc7883a 	add	r3,r3,r23
40014d4c:	003f8806 	br	40014b70 <__alt_data_end+0xc0014b70>
40014d50:	1805883a 	mov	r2,r3
40014d54:	003fde06 	br	40014cd0 <__alt_data_end+0xc0014cd0>
40014d58:	1839883a 	mov	fp,r3
40014d5c:	003fc906 	br	40014c84 <__alt_data_end+0xc0014c84>
40014d60:	b5bfff84 	addi	r22,r22,-2
40014d64:	2449883a 	add	r4,r4,r17
40014d68:	003f3406 	br	40014a3c <__alt_data_end+0xc0014a3c>
40014d6c:	b5bfff84 	addi	r22,r22,-2
40014d70:	1445883a 	add	r2,r2,r17
40014d74:	003edb06 	br	400148e4 <__alt_data_end+0xc00148e4>

40014d78 <__umoddi3>:
40014d78:	defff404 	addi	sp,sp,-48
40014d7c:	df000a15 	stw	fp,40(sp)
40014d80:	dc400315 	stw	r17,12(sp)
40014d84:	dc000215 	stw	r16,8(sp)
40014d88:	dfc00b15 	stw	ra,44(sp)
40014d8c:	ddc00915 	stw	r23,36(sp)
40014d90:	dd800815 	stw	r22,32(sp)
40014d94:	dd400715 	stw	r21,28(sp)
40014d98:	dd000615 	stw	r20,24(sp)
40014d9c:	dcc00515 	stw	r19,20(sp)
40014da0:	dc800415 	stw	r18,16(sp)
40014da4:	2021883a 	mov	r16,r4
40014da8:	2823883a 	mov	r17,r5
40014dac:	2839883a 	mov	fp,r5
40014db0:	38003c1e 	bne	r7,zero,40014ea4 <__umoddi3+0x12c>
40014db4:	3027883a 	mov	r19,r6
40014db8:	2029883a 	mov	r20,r4
40014dbc:	2980512e 	bgeu	r5,r6,40014f04 <__umoddi3+0x18c>
40014dc0:	00bfffd4 	movui	r2,65535
40014dc4:	11809a36 	bltu	r2,r6,40015030 <__umoddi3+0x2b8>
40014dc8:	01003fc4 	movi	r4,255
40014dcc:	2189803a 	cmpltu	r4,r4,r6
40014dd0:	200890fa 	slli	r4,r4,3
40014dd4:	3104d83a 	srl	r2,r6,r4
40014dd8:	00d000b4 	movhi	r3,16386
40014ddc:	18f92204 	addi	r3,r3,-7032
40014de0:	1885883a 	add	r2,r3,r2
40014de4:	10c00003 	ldbu	r3,0(r2)
40014de8:	00800804 	movi	r2,32
40014dec:	1909883a 	add	r4,r3,r4
40014df0:	1125c83a 	sub	r18,r2,r4
40014df4:	90000526 	beq	r18,zero,40014e0c <__umoddi3+0x94>
40014df8:	8ca2983a 	sll	r17,r17,r18
40014dfc:	8108d83a 	srl	r4,r16,r4
40014e00:	34a6983a 	sll	r19,r6,r18
40014e04:	84a8983a 	sll	r20,r16,r18
40014e08:	2478b03a 	or	fp,r4,r17
40014e0c:	982ed43a 	srli	r23,r19,16
40014e10:	e009883a 	mov	r4,fp
40014e14:	9dbfffcc 	andi	r22,r19,65535
40014e18:	b80b883a 	mov	r5,r23
40014e1c:	0007ad80 	call	40007ad8 <__umodsi3>
40014e20:	e009883a 	mov	r4,fp
40014e24:	b80b883a 	mov	r5,r23
40014e28:	102b883a 	mov	r21,r2
40014e2c:	0007a740 	call	40007a74 <__udivsi3>
40014e30:	a806943a 	slli	r3,r21,16
40014e34:	a008d43a 	srli	r4,r20,16
40014e38:	b085383a 	mul	r2,r22,r2
40014e3c:	20c8b03a 	or	r4,r4,r3
40014e40:	2080032e 	bgeu	r4,r2,40014e50 <__umoddi3+0xd8>
40014e44:	24c9883a 	add	r4,r4,r19
40014e48:	24c00136 	bltu	r4,r19,40014e50 <__umoddi3+0xd8>
40014e4c:	20811036 	bltu	r4,r2,40015290 <__umoddi3+0x518>
40014e50:	20abc83a 	sub	r21,r4,r2
40014e54:	b80b883a 	mov	r5,r23
40014e58:	a809883a 	mov	r4,r21
40014e5c:	0007ad80 	call	40007ad8 <__umodsi3>
40014e60:	1023883a 	mov	r17,r2
40014e64:	b80b883a 	mov	r5,r23
40014e68:	a809883a 	mov	r4,r21
40014e6c:	0007a740 	call	40007a74 <__udivsi3>
40014e70:	8822943a 	slli	r17,r17,16
40014e74:	b085383a 	mul	r2,r22,r2
40014e78:	a0ffffcc 	andi	r3,r20,65535
40014e7c:	1c46b03a 	or	r3,r3,r17
40014e80:	1880042e 	bgeu	r3,r2,40014e94 <__umoddi3+0x11c>
40014e84:	1cc7883a 	add	r3,r3,r19
40014e88:	1cc00236 	bltu	r3,r19,40014e94 <__umoddi3+0x11c>
40014e8c:	1880012e 	bgeu	r3,r2,40014e94 <__umoddi3+0x11c>
40014e90:	1cc7883a 	add	r3,r3,r19
40014e94:	1885c83a 	sub	r2,r3,r2
40014e98:	1484d83a 	srl	r2,r2,r18
40014e9c:	0007883a 	mov	r3,zero
40014ea0:	00004f06 	br	40014fe0 <__umoddi3+0x268>
40014ea4:	29c04c36 	bltu	r5,r7,40014fd8 <__umoddi3+0x260>
40014ea8:	00bfffd4 	movui	r2,65535
40014eac:	11c0582e 	bgeu	r2,r7,40015010 <__umoddi3+0x298>
40014eb0:	00804034 	movhi	r2,256
40014eb4:	10bfffc4 	addi	r2,r2,-1
40014eb8:	11c0e736 	bltu	r2,r7,40015258 <__umoddi3+0x4e0>
40014ebc:	01000404 	movi	r4,16
40014ec0:	3904d83a 	srl	r2,r7,r4
40014ec4:	00d000b4 	movhi	r3,16386
40014ec8:	18f92204 	addi	r3,r3,-7032
40014ecc:	1885883a 	add	r2,r3,r2
40014ed0:	14c00003 	ldbu	r19,0(r2)
40014ed4:	00c00804 	movi	r3,32
40014ed8:	9927883a 	add	r19,r19,r4
40014edc:	1ce9c83a 	sub	r20,r3,r19
40014ee0:	a000581e 	bne	r20,zero,40015044 <__umoddi3+0x2cc>
40014ee4:	3c400136 	bltu	r7,r17,40014eec <__umoddi3+0x174>
40014ee8:	8180eb36 	bltu	r16,r6,40015298 <__umoddi3+0x520>
40014eec:	8185c83a 	sub	r2,r16,r6
40014ef0:	89e3c83a 	sub	r17,r17,r7
40014ef4:	8089803a 	cmpltu	r4,r16,r2
40014ef8:	8939c83a 	sub	fp,r17,r4
40014efc:	e007883a 	mov	r3,fp
40014f00:	00003706 	br	40014fe0 <__umoddi3+0x268>
40014f04:	3000041e 	bne	r6,zero,40014f18 <__umoddi3+0x1a0>
40014f08:	000b883a 	mov	r5,zero
40014f0c:	01000044 	movi	r4,1
40014f10:	0007a740 	call	40007a74 <__udivsi3>
40014f14:	1027883a 	mov	r19,r2
40014f18:	00bfffd4 	movui	r2,65535
40014f1c:	14c0402e 	bgeu	r2,r19,40015020 <__umoddi3+0x2a8>
40014f20:	00804034 	movhi	r2,256
40014f24:	10bfffc4 	addi	r2,r2,-1
40014f28:	14c0cd36 	bltu	r2,r19,40015260 <__umoddi3+0x4e8>
40014f2c:	00800404 	movi	r2,16
40014f30:	9886d83a 	srl	r3,r19,r2
40014f34:	011000b4 	movhi	r4,16386
40014f38:	21392204 	addi	r4,r4,-7032
40014f3c:	20c7883a 	add	r3,r4,r3
40014f40:	18c00003 	ldbu	r3,0(r3)
40014f44:	1887883a 	add	r3,r3,r2
40014f48:	00800804 	movi	r2,32
40014f4c:	10e5c83a 	sub	r18,r2,r3
40014f50:	9000901e 	bne	r18,zero,40015194 <__umoddi3+0x41c>
40014f54:	982cd43a 	srli	r22,r19,16
40014f58:	8ce3c83a 	sub	r17,r17,r19
40014f5c:	9d7fffcc 	andi	r21,r19,65535
40014f60:	b00b883a 	mov	r5,r22
40014f64:	8809883a 	mov	r4,r17
40014f68:	0007ad80 	call	40007ad8 <__umodsi3>
40014f6c:	8809883a 	mov	r4,r17
40014f70:	b00b883a 	mov	r5,r22
40014f74:	1021883a 	mov	r16,r2
40014f78:	0007a740 	call	40007a74 <__udivsi3>
40014f7c:	8006943a 	slli	r3,r16,16
40014f80:	a008d43a 	srli	r4,r20,16
40014f84:	1545383a 	mul	r2,r2,r21
40014f88:	20c8b03a 	or	r4,r4,r3
40014f8c:	2080042e 	bgeu	r4,r2,40014fa0 <__umoddi3+0x228>
40014f90:	24c9883a 	add	r4,r4,r19
40014f94:	24c00236 	bltu	r4,r19,40014fa0 <__umoddi3+0x228>
40014f98:	2080012e 	bgeu	r4,r2,40014fa0 <__umoddi3+0x228>
40014f9c:	24c9883a 	add	r4,r4,r19
40014fa0:	20a1c83a 	sub	r16,r4,r2
40014fa4:	b00b883a 	mov	r5,r22
40014fa8:	8009883a 	mov	r4,r16
40014fac:	0007ad80 	call	40007ad8 <__umodsi3>
40014fb0:	1023883a 	mov	r17,r2
40014fb4:	b00b883a 	mov	r5,r22
40014fb8:	8009883a 	mov	r4,r16
40014fbc:	0007a740 	call	40007a74 <__udivsi3>
40014fc0:	8822943a 	slli	r17,r17,16
40014fc4:	1545383a 	mul	r2,r2,r21
40014fc8:	a53fffcc 	andi	r20,r20,65535
40014fcc:	a446b03a 	or	r3,r20,r17
40014fd0:	18bfb02e 	bgeu	r3,r2,40014e94 <__alt_data_end+0xc0014e94>
40014fd4:	003fab06 	br	40014e84 <__alt_data_end+0xc0014e84>
40014fd8:	2005883a 	mov	r2,r4
40014fdc:	2807883a 	mov	r3,r5
40014fe0:	dfc00b17 	ldw	ra,44(sp)
40014fe4:	df000a17 	ldw	fp,40(sp)
40014fe8:	ddc00917 	ldw	r23,36(sp)
40014fec:	dd800817 	ldw	r22,32(sp)
40014ff0:	dd400717 	ldw	r21,28(sp)
40014ff4:	dd000617 	ldw	r20,24(sp)
40014ff8:	dcc00517 	ldw	r19,20(sp)
40014ffc:	dc800417 	ldw	r18,16(sp)
40015000:	dc400317 	ldw	r17,12(sp)
40015004:	dc000217 	ldw	r16,8(sp)
40015008:	dec00c04 	addi	sp,sp,48
4001500c:	f800283a 	ret
40015010:	04c03fc4 	movi	r19,255
40015014:	99c9803a 	cmpltu	r4,r19,r7
40015018:	200890fa 	slli	r4,r4,3
4001501c:	003fa806 	br	40014ec0 <__alt_data_end+0xc0014ec0>
40015020:	00803fc4 	movi	r2,255
40015024:	14c5803a 	cmpltu	r2,r2,r19
40015028:	100490fa 	slli	r2,r2,3
4001502c:	003fc006 	br	40014f30 <__alt_data_end+0xc0014f30>
40015030:	00804034 	movhi	r2,256
40015034:	10bfffc4 	addi	r2,r2,-1
40015038:	11808b36 	bltu	r2,r6,40015268 <__umoddi3+0x4f0>
4001503c:	01000404 	movi	r4,16
40015040:	003f6406 	br	40014dd4 <__alt_data_end+0xc0014dd4>
40015044:	34c4d83a 	srl	r2,r6,r19
40015048:	3d0e983a 	sll	r7,r7,r20
4001504c:	8cf8d83a 	srl	fp,r17,r19
40015050:	8d10983a 	sll	r8,r17,r20
40015054:	38aab03a 	or	r21,r7,r2
40015058:	a82cd43a 	srli	r22,r21,16
4001505c:	84e2d83a 	srl	r17,r16,r19
40015060:	e009883a 	mov	r4,fp
40015064:	b00b883a 	mov	r5,r22
40015068:	8a22b03a 	or	r17,r17,r8
4001506c:	3524983a 	sll	r18,r6,r20
40015070:	0007ad80 	call	40007ad8 <__umodsi3>
40015074:	e009883a 	mov	r4,fp
40015078:	b00b883a 	mov	r5,r22
4001507c:	102f883a 	mov	r23,r2
40015080:	0007a740 	call	40007a74 <__udivsi3>
40015084:	100d883a 	mov	r6,r2
40015088:	b808943a 	slli	r4,r23,16
4001508c:	aa3fffcc 	andi	r8,r21,65535
40015090:	8804d43a 	srli	r2,r17,16
40015094:	41af383a 	mul	r23,r8,r6
40015098:	8520983a 	sll	r16,r16,r20
4001509c:	1104b03a 	or	r2,r2,r4
400150a0:	15c0042e 	bgeu	r2,r23,400150b4 <__umoddi3+0x33c>
400150a4:	1545883a 	add	r2,r2,r21
400150a8:	30ffffc4 	addi	r3,r6,-1
400150ac:	1540742e 	bgeu	r2,r21,40015280 <__umoddi3+0x508>
400150b0:	180d883a 	mov	r6,r3
400150b4:	15efc83a 	sub	r23,r2,r23
400150b8:	b00b883a 	mov	r5,r22
400150bc:	b809883a 	mov	r4,r23
400150c0:	d9800115 	stw	r6,4(sp)
400150c4:	da000015 	stw	r8,0(sp)
400150c8:	0007ad80 	call	40007ad8 <__umodsi3>
400150cc:	b00b883a 	mov	r5,r22
400150d0:	b809883a 	mov	r4,r23
400150d4:	1039883a 	mov	fp,r2
400150d8:	0007a740 	call	40007a74 <__udivsi3>
400150dc:	da000017 	ldw	r8,0(sp)
400150e0:	e038943a 	slli	fp,fp,16
400150e4:	100b883a 	mov	r5,r2
400150e8:	4089383a 	mul	r4,r8,r2
400150ec:	8a3fffcc 	andi	r8,r17,65535
400150f0:	4710b03a 	or	r8,r8,fp
400150f4:	d9800117 	ldw	r6,4(sp)
400150f8:	4100042e 	bgeu	r8,r4,4001510c <__umoddi3+0x394>
400150fc:	4551883a 	add	r8,r8,r21
40015100:	10bfffc4 	addi	r2,r2,-1
40015104:	45405a2e 	bgeu	r8,r21,40015270 <__umoddi3+0x4f8>
40015108:	100b883a 	mov	r5,r2
4001510c:	300c943a 	slli	r6,r6,16
40015110:	91ffffcc 	andi	r7,r18,65535
40015114:	9004d43a 	srli	r2,r18,16
40015118:	314cb03a 	or	r6,r6,r5
4001511c:	317fffcc 	andi	r5,r6,65535
40015120:	300cd43a 	srli	r6,r6,16
40015124:	29d3383a 	mul	r9,r5,r7
40015128:	288b383a 	mul	r5,r5,r2
4001512c:	31cf383a 	mul	r7,r6,r7
40015130:	4806d43a 	srli	r3,r9,16
40015134:	4111c83a 	sub	r8,r8,r4
40015138:	29cb883a 	add	r5,r5,r7
4001513c:	194b883a 	add	r5,r3,r5
40015140:	3085383a 	mul	r2,r6,r2
40015144:	29c0022e 	bgeu	r5,r7,40015150 <__umoddi3+0x3d8>
40015148:	00c00074 	movhi	r3,1
4001514c:	10c5883a 	add	r2,r2,r3
40015150:	2808d43a 	srli	r4,r5,16
40015154:	280a943a 	slli	r5,r5,16
40015158:	4a7fffcc 	andi	r9,r9,65535
4001515c:	2085883a 	add	r2,r4,r2
40015160:	2a4b883a 	add	r5,r5,r9
40015164:	40803636 	bltu	r8,r2,40015240 <__umoddi3+0x4c8>
40015168:	40804d26 	beq	r8,r2,400152a0 <__umoddi3+0x528>
4001516c:	4089c83a 	sub	r4,r8,r2
40015170:	280f883a 	mov	r7,r5
40015174:	81cfc83a 	sub	r7,r16,r7
40015178:	81c7803a 	cmpltu	r3,r16,r7
4001517c:	20c7c83a 	sub	r3,r4,r3
40015180:	1cc4983a 	sll	r2,r3,r19
40015184:	3d0ed83a 	srl	r7,r7,r20
40015188:	1d06d83a 	srl	r3,r3,r20
4001518c:	11c4b03a 	or	r2,r2,r7
40015190:	003f9306 	br	40014fe0 <__alt_data_end+0xc0014fe0>
40015194:	9ca6983a 	sll	r19,r19,r18
40015198:	88e8d83a 	srl	r20,r17,r3
4001519c:	80c4d83a 	srl	r2,r16,r3
400151a0:	982cd43a 	srli	r22,r19,16
400151a4:	8ca2983a 	sll	r17,r17,r18
400151a8:	a009883a 	mov	r4,r20
400151ac:	b00b883a 	mov	r5,r22
400151b0:	1478b03a 	or	fp,r2,r17
400151b4:	0007ad80 	call	40007ad8 <__umodsi3>
400151b8:	a009883a 	mov	r4,r20
400151bc:	b00b883a 	mov	r5,r22
400151c0:	1023883a 	mov	r17,r2
400151c4:	0007a740 	call	40007a74 <__udivsi3>
400151c8:	9d7fffcc 	andi	r21,r19,65535
400151cc:	880a943a 	slli	r5,r17,16
400151d0:	e008d43a 	srli	r4,fp,16
400151d4:	a885383a 	mul	r2,r21,r2
400151d8:	84a8983a 	sll	r20,r16,r18
400151dc:	2148b03a 	or	r4,r4,r5
400151e0:	2080042e 	bgeu	r4,r2,400151f4 <__umoddi3+0x47c>
400151e4:	24c9883a 	add	r4,r4,r19
400151e8:	24c00236 	bltu	r4,r19,400151f4 <__umoddi3+0x47c>
400151ec:	2080012e 	bgeu	r4,r2,400151f4 <__umoddi3+0x47c>
400151f0:	24c9883a 	add	r4,r4,r19
400151f4:	20a3c83a 	sub	r17,r4,r2
400151f8:	b00b883a 	mov	r5,r22
400151fc:	8809883a 	mov	r4,r17
40015200:	0007ad80 	call	40007ad8 <__umodsi3>
40015204:	102f883a 	mov	r23,r2
40015208:	8809883a 	mov	r4,r17
4001520c:	b00b883a 	mov	r5,r22
40015210:	0007a740 	call	40007a74 <__udivsi3>
40015214:	b82e943a 	slli	r23,r23,16
40015218:	a885383a 	mul	r2,r21,r2
4001521c:	e13fffcc 	andi	r4,fp,65535
40015220:	25c8b03a 	or	r4,r4,r23
40015224:	2080042e 	bgeu	r4,r2,40015238 <__umoddi3+0x4c0>
40015228:	24c9883a 	add	r4,r4,r19
4001522c:	24c00236 	bltu	r4,r19,40015238 <__umoddi3+0x4c0>
40015230:	2080012e 	bgeu	r4,r2,40015238 <__umoddi3+0x4c0>
40015234:	24c9883a 	add	r4,r4,r19
40015238:	20a3c83a 	sub	r17,r4,r2
4001523c:	003f4806 	br	40014f60 <__alt_data_end+0xc0014f60>
40015240:	2c8fc83a 	sub	r7,r5,r18
40015244:	1545c83a 	sub	r2,r2,r21
40015248:	29cb803a 	cmpltu	r5,r5,r7
4001524c:	1145c83a 	sub	r2,r2,r5
40015250:	4089c83a 	sub	r4,r8,r2
40015254:	003fc706 	br	40015174 <__alt_data_end+0xc0015174>
40015258:	01000604 	movi	r4,24
4001525c:	003f1806 	br	40014ec0 <__alt_data_end+0xc0014ec0>
40015260:	00800604 	movi	r2,24
40015264:	003f3206 	br	40014f30 <__alt_data_end+0xc0014f30>
40015268:	01000604 	movi	r4,24
4001526c:	003ed906 	br	40014dd4 <__alt_data_end+0xc0014dd4>
40015270:	413fa52e 	bgeu	r8,r4,40015108 <__alt_data_end+0xc0015108>
40015274:	297fff84 	addi	r5,r5,-2
40015278:	4551883a 	add	r8,r8,r21
4001527c:	003fa306 	br	4001510c <__alt_data_end+0xc001510c>
40015280:	15ff8b2e 	bgeu	r2,r23,400150b0 <__alt_data_end+0xc00150b0>
40015284:	31bfff84 	addi	r6,r6,-2
40015288:	1545883a 	add	r2,r2,r21
4001528c:	003f8906 	br	400150b4 <__alt_data_end+0xc00150b4>
40015290:	24c9883a 	add	r4,r4,r19
40015294:	003eee06 	br	40014e50 <__alt_data_end+0xc0014e50>
40015298:	8005883a 	mov	r2,r16
4001529c:	003f1706 	br	40014efc <__alt_data_end+0xc0014efc>
400152a0:	817fe736 	bltu	r16,r5,40015240 <__alt_data_end+0xc0015240>
400152a4:	280f883a 	mov	r7,r5
400152a8:	0009883a 	mov	r4,zero
400152ac:	003fb106 	br	40015174 <__alt_data_end+0xc0015174>

400152b0 <__eqdf2>:
400152b0:	2804d53a 	srli	r2,r5,20
400152b4:	3806d53a 	srli	r3,r7,20
400152b8:	02000434 	movhi	r8,16
400152bc:	423fffc4 	addi	r8,r8,-1
400152c0:	1081ffcc 	andi	r2,r2,2047
400152c4:	0281ffc4 	movi	r10,2047
400152c8:	2a12703a 	and	r9,r5,r8
400152cc:	18c1ffcc 	andi	r3,r3,2047
400152d0:	3a10703a 	and	r8,r7,r8
400152d4:	280ad7fa 	srli	r5,r5,31
400152d8:	380ed7fa 	srli	r7,r7,31
400152dc:	12801026 	beq	r2,r10,40015320 <__eqdf2+0x70>
400152e0:	0281ffc4 	movi	r10,2047
400152e4:	1a800a26 	beq	r3,r10,40015310 <__eqdf2+0x60>
400152e8:	10c00226 	beq	r2,r3,400152f4 <__eqdf2+0x44>
400152ec:	00800044 	movi	r2,1
400152f0:	f800283a 	ret
400152f4:	4a3ffd1e 	bne	r9,r8,400152ec <__alt_data_end+0xc00152ec>
400152f8:	21bffc1e 	bne	r4,r6,400152ec <__alt_data_end+0xc00152ec>
400152fc:	29c00c26 	beq	r5,r7,40015330 <__eqdf2+0x80>
40015300:	103ffa1e 	bne	r2,zero,400152ec <__alt_data_end+0xc00152ec>
40015304:	2244b03a 	or	r2,r4,r9
40015308:	1004c03a 	cmpne	r2,r2,zero
4001530c:	f800283a 	ret
40015310:	3214b03a 	or	r10,r6,r8
40015314:	503ff426 	beq	r10,zero,400152e8 <__alt_data_end+0xc00152e8>
40015318:	00800044 	movi	r2,1
4001531c:	f800283a 	ret
40015320:	2254b03a 	or	r10,r4,r9
40015324:	503fee26 	beq	r10,zero,400152e0 <__alt_data_end+0xc00152e0>
40015328:	00800044 	movi	r2,1
4001532c:	f800283a 	ret
40015330:	0005883a 	mov	r2,zero
40015334:	f800283a 	ret

40015338 <__gedf2>:
40015338:	2804d53a 	srli	r2,r5,20
4001533c:	3806d53a 	srli	r3,r7,20
40015340:	02000434 	movhi	r8,16
40015344:	423fffc4 	addi	r8,r8,-1
40015348:	1081ffcc 	andi	r2,r2,2047
4001534c:	0241ffc4 	movi	r9,2047
40015350:	2a14703a 	and	r10,r5,r8
40015354:	18c1ffcc 	andi	r3,r3,2047
40015358:	3a10703a 	and	r8,r7,r8
4001535c:	280ad7fa 	srli	r5,r5,31
40015360:	380ed7fa 	srli	r7,r7,31
40015364:	12401d26 	beq	r2,r9,400153dc <__gedf2+0xa4>
40015368:	0241ffc4 	movi	r9,2047
4001536c:	1a401226 	beq	r3,r9,400153b8 <__gedf2+0x80>
40015370:	1000081e 	bne	r2,zero,40015394 <__gedf2+0x5c>
40015374:	2296b03a 	or	r11,r4,r10
40015378:	5813003a 	cmpeq	r9,r11,zero
4001537c:	1800091e 	bne	r3,zero,400153a4 <__gedf2+0x6c>
40015380:	3218b03a 	or	r12,r6,r8
40015384:	6000071e 	bne	r12,zero,400153a4 <__gedf2+0x6c>
40015388:	0005883a 	mov	r2,zero
4001538c:	5800101e 	bne	r11,zero,400153d0 <__gedf2+0x98>
40015390:	f800283a 	ret
40015394:	18000c1e 	bne	r3,zero,400153c8 <__gedf2+0x90>
40015398:	3212b03a 	or	r9,r6,r8
4001539c:	48000c26 	beq	r9,zero,400153d0 <__gedf2+0x98>
400153a0:	0013883a 	mov	r9,zero
400153a4:	39c03fcc 	andi	r7,r7,255
400153a8:	48000826 	beq	r9,zero,400153cc <__gedf2+0x94>
400153ac:	38000926 	beq	r7,zero,400153d4 <__gedf2+0x9c>
400153b0:	00800044 	movi	r2,1
400153b4:	f800283a 	ret
400153b8:	3212b03a 	or	r9,r6,r8
400153bc:	483fec26 	beq	r9,zero,40015370 <__alt_data_end+0xc0015370>
400153c0:	00bfff84 	movi	r2,-2
400153c4:	f800283a 	ret
400153c8:	39c03fcc 	andi	r7,r7,255
400153cc:	29c00626 	beq	r5,r7,400153e8 <__gedf2+0xb0>
400153d0:	283ff726 	beq	r5,zero,400153b0 <__alt_data_end+0xc00153b0>
400153d4:	00bfffc4 	movi	r2,-1
400153d8:	f800283a 	ret
400153dc:	2292b03a 	or	r9,r4,r10
400153e0:	483fe126 	beq	r9,zero,40015368 <__alt_data_end+0xc0015368>
400153e4:	003ff606 	br	400153c0 <__alt_data_end+0xc00153c0>
400153e8:	18bff916 	blt	r3,r2,400153d0 <__alt_data_end+0xc00153d0>
400153ec:	10c00316 	blt	r2,r3,400153fc <__gedf2+0xc4>
400153f0:	42bff736 	bltu	r8,r10,400153d0 <__alt_data_end+0xc00153d0>
400153f4:	52000326 	beq	r10,r8,40015404 <__gedf2+0xcc>
400153f8:	5200042e 	bgeu	r10,r8,4001540c <__gedf2+0xd4>
400153fc:	283fec1e 	bne	r5,zero,400153b0 <__alt_data_end+0xc00153b0>
40015400:	003ff406 	br	400153d4 <__alt_data_end+0xc00153d4>
40015404:	313ff236 	bltu	r6,r4,400153d0 <__alt_data_end+0xc00153d0>
40015408:	21bffc36 	bltu	r4,r6,400153fc <__alt_data_end+0xc00153fc>
4001540c:	0005883a 	mov	r2,zero
40015410:	f800283a 	ret

40015414 <__ledf2>:
40015414:	2804d53a 	srli	r2,r5,20
40015418:	3810d53a 	srli	r8,r7,20
4001541c:	00c00434 	movhi	r3,16
40015420:	18ffffc4 	addi	r3,r3,-1
40015424:	1081ffcc 	andi	r2,r2,2047
40015428:	0241ffc4 	movi	r9,2047
4001542c:	28d4703a 	and	r10,r5,r3
40015430:	4201ffcc 	andi	r8,r8,2047
40015434:	38c6703a 	and	r3,r7,r3
40015438:	280ad7fa 	srli	r5,r5,31
4001543c:	380ed7fa 	srli	r7,r7,31
40015440:	12401f26 	beq	r2,r9,400154c0 <__ledf2+0xac>
40015444:	0241ffc4 	movi	r9,2047
40015448:	42401426 	beq	r8,r9,4001549c <__ledf2+0x88>
4001544c:	1000091e 	bne	r2,zero,40015474 <__ledf2+0x60>
40015450:	2296b03a 	or	r11,r4,r10
40015454:	5813003a 	cmpeq	r9,r11,zero
40015458:	29403fcc 	andi	r5,r5,255
4001545c:	40000a1e 	bne	r8,zero,40015488 <__ledf2+0x74>
40015460:	30d8b03a 	or	r12,r6,r3
40015464:	6000081e 	bne	r12,zero,40015488 <__ledf2+0x74>
40015468:	0005883a 	mov	r2,zero
4001546c:	5800111e 	bne	r11,zero,400154b4 <__ledf2+0xa0>
40015470:	f800283a 	ret
40015474:	29403fcc 	andi	r5,r5,255
40015478:	40000c1e 	bne	r8,zero,400154ac <__ledf2+0x98>
4001547c:	30d2b03a 	or	r9,r6,r3
40015480:	48000c26 	beq	r9,zero,400154b4 <__ledf2+0xa0>
40015484:	0013883a 	mov	r9,zero
40015488:	39c03fcc 	andi	r7,r7,255
4001548c:	48000826 	beq	r9,zero,400154b0 <__ledf2+0x9c>
40015490:	38001126 	beq	r7,zero,400154d8 <__ledf2+0xc4>
40015494:	00800044 	movi	r2,1
40015498:	f800283a 	ret
4001549c:	30d2b03a 	or	r9,r6,r3
400154a0:	483fea26 	beq	r9,zero,4001544c <__alt_data_end+0xc001544c>
400154a4:	00800084 	movi	r2,2
400154a8:	f800283a 	ret
400154ac:	39c03fcc 	andi	r7,r7,255
400154b0:	39400726 	beq	r7,r5,400154d0 <__ledf2+0xbc>
400154b4:	2800081e 	bne	r5,zero,400154d8 <__ledf2+0xc4>
400154b8:	00800044 	movi	r2,1
400154bc:	f800283a 	ret
400154c0:	2292b03a 	or	r9,r4,r10
400154c4:	483fdf26 	beq	r9,zero,40015444 <__alt_data_end+0xc0015444>
400154c8:	00800084 	movi	r2,2
400154cc:	f800283a 	ret
400154d0:	4080030e 	bge	r8,r2,400154e0 <__ledf2+0xcc>
400154d4:	383fef26 	beq	r7,zero,40015494 <__alt_data_end+0xc0015494>
400154d8:	00bfffc4 	movi	r2,-1
400154dc:	f800283a 	ret
400154e0:	123feb16 	blt	r2,r8,40015490 <__alt_data_end+0xc0015490>
400154e4:	1abff336 	bltu	r3,r10,400154b4 <__alt_data_end+0xc00154b4>
400154e8:	50c00326 	beq	r10,r3,400154f8 <__ledf2+0xe4>
400154ec:	50c0042e 	bgeu	r10,r3,40015500 <__ledf2+0xec>
400154f0:	283fe81e 	bne	r5,zero,40015494 <__alt_data_end+0xc0015494>
400154f4:	003ff806 	br	400154d8 <__alt_data_end+0xc00154d8>
400154f8:	313fee36 	bltu	r6,r4,400154b4 <__alt_data_end+0xc00154b4>
400154fc:	21bffc36 	bltu	r4,r6,400154f0 <__alt_data_end+0xc00154f0>
40015500:	0005883a 	mov	r2,zero
40015504:	f800283a 	ret

40015508 <__subdf3>:
40015508:	02000434 	movhi	r8,16
4001550c:	423fffc4 	addi	r8,r8,-1
40015510:	defffb04 	addi	sp,sp,-20
40015514:	2a14703a 	and	r10,r5,r8
40015518:	3812d53a 	srli	r9,r7,20
4001551c:	3a10703a 	and	r8,r7,r8
40015520:	2006d77a 	srli	r3,r4,29
40015524:	3004d77a 	srli	r2,r6,29
40015528:	dc000015 	stw	r16,0(sp)
4001552c:	501490fa 	slli	r10,r10,3
40015530:	2820d53a 	srli	r16,r5,20
40015534:	401090fa 	slli	r8,r8,3
40015538:	dc800215 	stw	r18,8(sp)
4001553c:	dc400115 	stw	r17,4(sp)
40015540:	dfc00415 	stw	ra,16(sp)
40015544:	202290fa 	slli	r17,r4,3
40015548:	dcc00315 	stw	r19,12(sp)
4001554c:	4a41ffcc 	andi	r9,r9,2047
40015550:	0101ffc4 	movi	r4,2047
40015554:	2824d7fa 	srli	r18,r5,31
40015558:	8401ffcc 	andi	r16,r16,2047
4001555c:	50c6b03a 	or	r3,r10,r3
40015560:	380ed7fa 	srli	r7,r7,31
40015564:	408ab03a 	or	r5,r8,r2
40015568:	300c90fa 	slli	r6,r6,3
4001556c:	49009626 	beq	r9,r4,400157c8 <__subdf3+0x2c0>
40015570:	39c0005c 	xori	r7,r7,1
40015574:	8245c83a 	sub	r2,r16,r9
40015578:	3c807426 	beq	r7,r18,4001574c <__subdf3+0x244>
4001557c:	0080af0e 	bge	zero,r2,4001583c <__subdf3+0x334>
40015580:	48002a1e 	bne	r9,zero,4001562c <__subdf3+0x124>
40015584:	2988b03a 	or	r4,r5,r6
40015588:	20009a1e 	bne	r4,zero,400157f4 <__subdf3+0x2ec>
4001558c:	888001cc 	andi	r2,r17,7
40015590:	10000726 	beq	r2,zero,400155b0 <__subdf3+0xa8>
40015594:	888003cc 	andi	r2,r17,15
40015598:	01000104 	movi	r4,4
4001559c:	11000426 	beq	r2,r4,400155b0 <__subdf3+0xa8>
400155a0:	890b883a 	add	r5,r17,r4
400155a4:	2c63803a 	cmpltu	r17,r5,r17
400155a8:	1c47883a 	add	r3,r3,r17
400155ac:	2823883a 	mov	r17,r5
400155b0:	1880202c 	andhi	r2,r3,128
400155b4:	10005926 	beq	r2,zero,4001571c <__subdf3+0x214>
400155b8:	84000044 	addi	r16,r16,1
400155bc:	0081ffc4 	movi	r2,2047
400155c0:	8080be26 	beq	r16,r2,400158bc <__subdf3+0x3b4>
400155c4:	017fe034 	movhi	r5,65408
400155c8:	297fffc4 	addi	r5,r5,-1
400155cc:	1946703a 	and	r3,r3,r5
400155d0:	1804977a 	slli	r2,r3,29
400155d4:	1806927a 	slli	r3,r3,9
400155d8:	8822d0fa 	srli	r17,r17,3
400155dc:	8401ffcc 	andi	r16,r16,2047
400155e0:	180ad33a 	srli	r5,r3,12
400155e4:	9100004c 	andi	r4,r18,1
400155e8:	1444b03a 	or	r2,r2,r17
400155ec:	80c1ffcc 	andi	r3,r16,2047
400155f0:	1820953a 	slli	r16,r3,20
400155f4:	20c03fcc 	andi	r3,r4,255
400155f8:	180897fa 	slli	r4,r3,31
400155fc:	00c00434 	movhi	r3,16
40015600:	18ffffc4 	addi	r3,r3,-1
40015604:	28c6703a 	and	r3,r5,r3
40015608:	1c06b03a 	or	r3,r3,r16
4001560c:	1906b03a 	or	r3,r3,r4
40015610:	dfc00417 	ldw	ra,16(sp)
40015614:	dcc00317 	ldw	r19,12(sp)
40015618:	dc800217 	ldw	r18,8(sp)
4001561c:	dc400117 	ldw	r17,4(sp)
40015620:	dc000017 	ldw	r16,0(sp)
40015624:	dec00504 	addi	sp,sp,20
40015628:	f800283a 	ret
4001562c:	0101ffc4 	movi	r4,2047
40015630:	813fd626 	beq	r16,r4,4001558c <__alt_data_end+0xc001558c>
40015634:	29402034 	orhi	r5,r5,128
40015638:	01000e04 	movi	r4,56
4001563c:	2080a316 	blt	r4,r2,400158cc <__subdf3+0x3c4>
40015640:	010007c4 	movi	r4,31
40015644:	2080c616 	blt	r4,r2,40015960 <__subdf3+0x458>
40015648:	01000804 	movi	r4,32
4001564c:	2089c83a 	sub	r4,r4,r2
40015650:	2910983a 	sll	r8,r5,r4
40015654:	308ed83a 	srl	r7,r6,r2
40015658:	3108983a 	sll	r4,r6,r4
4001565c:	2884d83a 	srl	r2,r5,r2
40015660:	41ccb03a 	or	r6,r8,r7
40015664:	2008c03a 	cmpne	r4,r4,zero
40015668:	310cb03a 	or	r6,r6,r4
4001566c:	898dc83a 	sub	r6,r17,r6
40015670:	89a3803a 	cmpltu	r17,r17,r6
40015674:	1887c83a 	sub	r3,r3,r2
40015678:	1c47c83a 	sub	r3,r3,r17
4001567c:	3023883a 	mov	r17,r6
40015680:	1880202c 	andhi	r2,r3,128
40015684:	10002326 	beq	r2,zero,40015714 <__subdf3+0x20c>
40015688:	04c02034 	movhi	r19,128
4001568c:	9cffffc4 	addi	r19,r19,-1
40015690:	1ce6703a 	and	r19,r3,r19
40015694:	98007a26 	beq	r19,zero,40015880 <__subdf3+0x378>
40015698:	9809883a 	mov	r4,r19
4001569c:	00095e00 	call	400095e0 <__clzsi2>
400156a0:	113ffe04 	addi	r4,r2,-8
400156a4:	00c007c4 	movi	r3,31
400156a8:	19007b16 	blt	r3,r4,40015898 <__subdf3+0x390>
400156ac:	00800804 	movi	r2,32
400156b0:	1105c83a 	sub	r2,r2,r4
400156b4:	8884d83a 	srl	r2,r17,r2
400156b8:	9906983a 	sll	r3,r19,r4
400156bc:	8922983a 	sll	r17,r17,r4
400156c0:	10c4b03a 	or	r2,r2,r3
400156c4:	24007816 	blt	r4,r16,400158a8 <__subdf3+0x3a0>
400156c8:	2421c83a 	sub	r16,r4,r16
400156cc:	80c00044 	addi	r3,r16,1
400156d0:	010007c4 	movi	r4,31
400156d4:	20c09516 	blt	r4,r3,4001592c <__subdf3+0x424>
400156d8:	01400804 	movi	r5,32
400156dc:	28cbc83a 	sub	r5,r5,r3
400156e0:	88c8d83a 	srl	r4,r17,r3
400156e4:	8962983a 	sll	r17,r17,r5
400156e8:	114a983a 	sll	r5,r2,r5
400156ec:	10c6d83a 	srl	r3,r2,r3
400156f0:	8804c03a 	cmpne	r2,r17,zero
400156f4:	290ab03a 	or	r5,r5,r4
400156f8:	28a2b03a 	or	r17,r5,r2
400156fc:	0021883a 	mov	r16,zero
40015700:	003fa206 	br	4001558c <__alt_data_end+0xc001558c>
40015704:	2090b03a 	or	r8,r4,r2
40015708:	40018e26 	beq	r8,zero,40015d44 <__subdf3+0x83c>
4001570c:	1007883a 	mov	r3,r2
40015710:	2023883a 	mov	r17,r4
40015714:	888001cc 	andi	r2,r17,7
40015718:	103f9e1e 	bne	r2,zero,40015594 <__alt_data_end+0xc0015594>
4001571c:	1804977a 	slli	r2,r3,29
40015720:	8822d0fa 	srli	r17,r17,3
40015724:	1810d0fa 	srli	r8,r3,3
40015728:	9100004c 	andi	r4,r18,1
4001572c:	1444b03a 	or	r2,r2,r17
40015730:	00c1ffc4 	movi	r3,2047
40015734:	80c02826 	beq	r16,r3,400157d8 <__subdf3+0x2d0>
40015738:	01400434 	movhi	r5,16
4001573c:	297fffc4 	addi	r5,r5,-1
40015740:	80e0703a 	and	r16,r16,r3
40015744:	414a703a 	and	r5,r8,r5
40015748:	003fa806 	br	400155ec <__alt_data_end+0xc00155ec>
4001574c:	0080630e 	bge	zero,r2,400158dc <__subdf3+0x3d4>
40015750:	48003026 	beq	r9,zero,40015814 <__subdf3+0x30c>
40015754:	0101ffc4 	movi	r4,2047
40015758:	813f8c26 	beq	r16,r4,4001558c <__alt_data_end+0xc001558c>
4001575c:	29402034 	orhi	r5,r5,128
40015760:	01000e04 	movi	r4,56
40015764:	2080a90e 	bge	r4,r2,40015a0c <__subdf3+0x504>
40015768:	298cb03a 	or	r6,r5,r6
4001576c:	3012c03a 	cmpne	r9,r6,zero
40015770:	0005883a 	mov	r2,zero
40015774:	4c53883a 	add	r9,r9,r17
40015778:	4c63803a 	cmpltu	r17,r9,r17
4001577c:	10c7883a 	add	r3,r2,r3
40015780:	88c7883a 	add	r3,r17,r3
40015784:	4823883a 	mov	r17,r9
40015788:	1880202c 	andhi	r2,r3,128
4001578c:	1000d026 	beq	r2,zero,40015ad0 <__subdf3+0x5c8>
40015790:	84000044 	addi	r16,r16,1
40015794:	0081ffc4 	movi	r2,2047
40015798:	8080fe26 	beq	r16,r2,40015b94 <__subdf3+0x68c>
4001579c:	00bfe034 	movhi	r2,65408
400157a0:	10bfffc4 	addi	r2,r2,-1
400157a4:	1886703a 	and	r3,r3,r2
400157a8:	880ad07a 	srli	r5,r17,1
400157ac:	180497fa 	slli	r2,r3,31
400157b0:	8900004c 	andi	r4,r17,1
400157b4:	2922b03a 	or	r17,r5,r4
400157b8:	1806d07a 	srli	r3,r3,1
400157bc:	1462b03a 	or	r17,r2,r17
400157c0:	3825883a 	mov	r18,r7
400157c4:	003f7106 	br	4001558c <__alt_data_end+0xc001558c>
400157c8:	2984b03a 	or	r2,r5,r6
400157cc:	103f6826 	beq	r2,zero,40015570 <__alt_data_end+0xc0015570>
400157d0:	39c03fcc 	andi	r7,r7,255
400157d4:	003f6706 	br	40015574 <__alt_data_end+0xc0015574>
400157d8:	4086b03a 	or	r3,r8,r2
400157dc:	18015226 	beq	r3,zero,40015d28 <__subdf3+0x820>
400157e0:	00c00434 	movhi	r3,16
400157e4:	41400234 	orhi	r5,r8,8
400157e8:	18ffffc4 	addi	r3,r3,-1
400157ec:	28ca703a 	and	r5,r5,r3
400157f0:	003f7e06 	br	400155ec <__alt_data_end+0xc00155ec>
400157f4:	10bfffc4 	addi	r2,r2,-1
400157f8:	1000491e 	bne	r2,zero,40015920 <__subdf3+0x418>
400157fc:	898fc83a 	sub	r7,r17,r6
40015800:	89e3803a 	cmpltu	r17,r17,r7
40015804:	1947c83a 	sub	r3,r3,r5
40015808:	1c47c83a 	sub	r3,r3,r17
4001580c:	3823883a 	mov	r17,r7
40015810:	003f9b06 	br	40015680 <__alt_data_end+0xc0015680>
40015814:	2988b03a 	or	r4,r5,r6
40015818:	203f5c26 	beq	r4,zero,4001558c <__alt_data_end+0xc001558c>
4001581c:	10bfffc4 	addi	r2,r2,-1
40015820:	1000931e 	bne	r2,zero,40015a70 <__subdf3+0x568>
40015824:	898d883a 	add	r6,r17,r6
40015828:	3463803a 	cmpltu	r17,r6,r17
4001582c:	1947883a 	add	r3,r3,r5
40015830:	88c7883a 	add	r3,r17,r3
40015834:	3023883a 	mov	r17,r6
40015838:	003fd306 	br	40015788 <__alt_data_end+0xc0015788>
4001583c:	1000541e 	bne	r2,zero,40015990 <__subdf3+0x488>
40015840:	80800044 	addi	r2,r16,1
40015844:	1081ffcc 	andi	r2,r2,2047
40015848:	01000044 	movi	r4,1
4001584c:	2080a20e 	bge	r4,r2,40015ad8 <__subdf3+0x5d0>
40015850:	8989c83a 	sub	r4,r17,r6
40015854:	8905803a 	cmpltu	r2,r17,r4
40015858:	1967c83a 	sub	r19,r3,r5
4001585c:	98a7c83a 	sub	r19,r19,r2
40015860:	9880202c 	andhi	r2,r19,128
40015864:	10006326 	beq	r2,zero,400159f4 <__subdf3+0x4ec>
40015868:	3463c83a 	sub	r17,r6,r17
4001586c:	28c7c83a 	sub	r3,r5,r3
40015870:	344d803a 	cmpltu	r6,r6,r17
40015874:	19a7c83a 	sub	r19,r3,r6
40015878:	3825883a 	mov	r18,r7
4001587c:	983f861e 	bne	r19,zero,40015698 <__alt_data_end+0xc0015698>
40015880:	8809883a 	mov	r4,r17
40015884:	00095e00 	call	400095e0 <__clzsi2>
40015888:	10800804 	addi	r2,r2,32
4001588c:	113ffe04 	addi	r4,r2,-8
40015890:	00c007c4 	movi	r3,31
40015894:	193f850e 	bge	r3,r4,400156ac <__alt_data_end+0xc00156ac>
40015898:	10bff604 	addi	r2,r2,-40
4001589c:	8884983a 	sll	r2,r17,r2
400158a0:	0023883a 	mov	r17,zero
400158a4:	243f880e 	bge	r4,r16,400156c8 <__alt_data_end+0xc00156c8>
400158a8:	00ffe034 	movhi	r3,65408
400158ac:	18ffffc4 	addi	r3,r3,-1
400158b0:	8121c83a 	sub	r16,r16,r4
400158b4:	10c6703a 	and	r3,r2,r3
400158b8:	003f3406 	br	4001558c <__alt_data_end+0xc001558c>
400158bc:	9100004c 	andi	r4,r18,1
400158c0:	000b883a 	mov	r5,zero
400158c4:	0005883a 	mov	r2,zero
400158c8:	003f4806 	br	400155ec <__alt_data_end+0xc00155ec>
400158cc:	298cb03a 	or	r6,r5,r6
400158d0:	300cc03a 	cmpne	r6,r6,zero
400158d4:	0005883a 	mov	r2,zero
400158d8:	003f6406 	br	4001566c <__alt_data_end+0xc001566c>
400158dc:	10009a1e 	bne	r2,zero,40015b48 <__subdf3+0x640>
400158e0:	82400044 	addi	r9,r16,1
400158e4:	4881ffcc 	andi	r2,r9,2047
400158e8:	02800044 	movi	r10,1
400158ec:	5080670e 	bge	r10,r2,40015a8c <__subdf3+0x584>
400158f0:	0081ffc4 	movi	r2,2047
400158f4:	4880af26 	beq	r9,r2,40015bb4 <__subdf3+0x6ac>
400158f8:	898d883a 	add	r6,r17,r6
400158fc:	1945883a 	add	r2,r3,r5
40015900:	3447803a 	cmpltu	r3,r6,r17
40015904:	1887883a 	add	r3,r3,r2
40015908:	182297fa 	slli	r17,r3,31
4001590c:	300cd07a 	srli	r6,r6,1
40015910:	1806d07a 	srli	r3,r3,1
40015914:	4821883a 	mov	r16,r9
40015918:	89a2b03a 	or	r17,r17,r6
4001591c:	003f1b06 	br	4001558c <__alt_data_end+0xc001558c>
40015920:	0101ffc4 	movi	r4,2047
40015924:	813f441e 	bne	r16,r4,40015638 <__alt_data_end+0xc0015638>
40015928:	003f1806 	br	4001558c <__alt_data_end+0xc001558c>
4001592c:	843ff844 	addi	r16,r16,-31
40015930:	01400804 	movi	r5,32
40015934:	1408d83a 	srl	r4,r2,r16
40015938:	19405026 	beq	r3,r5,40015a7c <__subdf3+0x574>
4001593c:	01401004 	movi	r5,64
40015940:	28c7c83a 	sub	r3,r5,r3
40015944:	10c4983a 	sll	r2,r2,r3
40015948:	88a2b03a 	or	r17,r17,r2
4001594c:	8822c03a 	cmpne	r17,r17,zero
40015950:	2462b03a 	or	r17,r4,r17
40015954:	0007883a 	mov	r3,zero
40015958:	0021883a 	mov	r16,zero
4001595c:	003f6d06 	br	40015714 <__alt_data_end+0xc0015714>
40015960:	11fff804 	addi	r7,r2,-32
40015964:	01000804 	movi	r4,32
40015968:	29ced83a 	srl	r7,r5,r7
4001596c:	11004526 	beq	r2,r4,40015a84 <__subdf3+0x57c>
40015970:	01001004 	movi	r4,64
40015974:	2089c83a 	sub	r4,r4,r2
40015978:	2904983a 	sll	r2,r5,r4
4001597c:	118cb03a 	or	r6,r2,r6
40015980:	300cc03a 	cmpne	r6,r6,zero
40015984:	398cb03a 	or	r6,r7,r6
40015988:	0005883a 	mov	r2,zero
4001598c:	003f3706 	br	4001566c <__alt_data_end+0xc001566c>
40015990:	80002a26 	beq	r16,zero,40015a3c <__subdf3+0x534>
40015994:	0101ffc4 	movi	r4,2047
40015998:	49006626 	beq	r9,r4,40015b34 <__subdf3+0x62c>
4001599c:	0085c83a 	sub	r2,zero,r2
400159a0:	18c02034 	orhi	r3,r3,128
400159a4:	01000e04 	movi	r4,56
400159a8:	20807e16 	blt	r4,r2,40015ba4 <__subdf3+0x69c>
400159ac:	010007c4 	movi	r4,31
400159b0:	2080e716 	blt	r4,r2,40015d50 <__subdf3+0x848>
400159b4:	01000804 	movi	r4,32
400159b8:	2089c83a 	sub	r4,r4,r2
400159bc:	1914983a 	sll	r10,r3,r4
400159c0:	8890d83a 	srl	r8,r17,r2
400159c4:	8908983a 	sll	r4,r17,r4
400159c8:	1884d83a 	srl	r2,r3,r2
400159cc:	5222b03a 	or	r17,r10,r8
400159d0:	2006c03a 	cmpne	r3,r4,zero
400159d4:	88e2b03a 	or	r17,r17,r3
400159d8:	3463c83a 	sub	r17,r6,r17
400159dc:	2885c83a 	sub	r2,r5,r2
400159e0:	344d803a 	cmpltu	r6,r6,r17
400159e4:	1187c83a 	sub	r3,r2,r6
400159e8:	4821883a 	mov	r16,r9
400159ec:	3825883a 	mov	r18,r7
400159f0:	003f2306 	br	40015680 <__alt_data_end+0xc0015680>
400159f4:	24d0b03a 	or	r8,r4,r19
400159f8:	40001b1e 	bne	r8,zero,40015a68 <__subdf3+0x560>
400159fc:	0005883a 	mov	r2,zero
40015a00:	0009883a 	mov	r4,zero
40015a04:	0021883a 	mov	r16,zero
40015a08:	003f4906 	br	40015730 <__alt_data_end+0xc0015730>
40015a0c:	010007c4 	movi	r4,31
40015a10:	20803a16 	blt	r4,r2,40015afc <__subdf3+0x5f4>
40015a14:	01000804 	movi	r4,32
40015a18:	2089c83a 	sub	r4,r4,r2
40015a1c:	2912983a 	sll	r9,r5,r4
40015a20:	3090d83a 	srl	r8,r6,r2
40015a24:	3108983a 	sll	r4,r6,r4
40015a28:	2884d83a 	srl	r2,r5,r2
40015a2c:	4a12b03a 	or	r9,r9,r8
40015a30:	2008c03a 	cmpne	r4,r4,zero
40015a34:	4912b03a 	or	r9,r9,r4
40015a38:	003f4e06 	br	40015774 <__alt_data_end+0xc0015774>
40015a3c:	1c48b03a 	or	r4,r3,r17
40015a40:	20003c26 	beq	r4,zero,40015b34 <__subdf3+0x62c>
40015a44:	0084303a 	nor	r2,zero,r2
40015a48:	1000381e 	bne	r2,zero,40015b2c <__subdf3+0x624>
40015a4c:	3463c83a 	sub	r17,r6,r17
40015a50:	28c5c83a 	sub	r2,r5,r3
40015a54:	344d803a 	cmpltu	r6,r6,r17
40015a58:	1187c83a 	sub	r3,r2,r6
40015a5c:	4821883a 	mov	r16,r9
40015a60:	3825883a 	mov	r18,r7
40015a64:	003f0606 	br	40015680 <__alt_data_end+0xc0015680>
40015a68:	2023883a 	mov	r17,r4
40015a6c:	003f0906 	br	40015694 <__alt_data_end+0xc0015694>
40015a70:	0101ffc4 	movi	r4,2047
40015a74:	813f3a1e 	bne	r16,r4,40015760 <__alt_data_end+0xc0015760>
40015a78:	003ec406 	br	4001558c <__alt_data_end+0xc001558c>
40015a7c:	0005883a 	mov	r2,zero
40015a80:	003fb106 	br	40015948 <__alt_data_end+0xc0015948>
40015a84:	0005883a 	mov	r2,zero
40015a88:	003fbc06 	br	4001597c <__alt_data_end+0xc001597c>
40015a8c:	1c44b03a 	or	r2,r3,r17
40015a90:	80008e1e 	bne	r16,zero,40015ccc <__subdf3+0x7c4>
40015a94:	1000c826 	beq	r2,zero,40015db8 <__subdf3+0x8b0>
40015a98:	2984b03a 	or	r2,r5,r6
40015a9c:	103ebb26 	beq	r2,zero,4001558c <__alt_data_end+0xc001558c>
40015aa0:	8989883a 	add	r4,r17,r6
40015aa4:	1945883a 	add	r2,r3,r5
40015aa8:	2447803a 	cmpltu	r3,r4,r17
40015aac:	1887883a 	add	r3,r3,r2
40015ab0:	1880202c 	andhi	r2,r3,128
40015ab4:	2023883a 	mov	r17,r4
40015ab8:	103f1626 	beq	r2,zero,40015714 <__alt_data_end+0xc0015714>
40015abc:	00bfe034 	movhi	r2,65408
40015ac0:	10bfffc4 	addi	r2,r2,-1
40015ac4:	5021883a 	mov	r16,r10
40015ac8:	1886703a 	and	r3,r3,r2
40015acc:	003eaf06 	br	4001558c <__alt_data_end+0xc001558c>
40015ad0:	3825883a 	mov	r18,r7
40015ad4:	003f0f06 	br	40015714 <__alt_data_end+0xc0015714>
40015ad8:	1c44b03a 	or	r2,r3,r17
40015adc:	8000251e 	bne	r16,zero,40015b74 <__subdf3+0x66c>
40015ae0:	1000661e 	bne	r2,zero,40015c7c <__subdf3+0x774>
40015ae4:	2990b03a 	or	r8,r5,r6
40015ae8:	40009626 	beq	r8,zero,40015d44 <__subdf3+0x83c>
40015aec:	2807883a 	mov	r3,r5
40015af0:	3023883a 	mov	r17,r6
40015af4:	3825883a 	mov	r18,r7
40015af8:	003ea406 	br	4001558c <__alt_data_end+0xc001558c>
40015afc:	127ff804 	addi	r9,r2,-32
40015b00:	01000804 	movi	r4,32
40015b04:	2a52d83a 	srl	r9,r5,r9
40015b08:	11008c26 	beq	r2,r4,40015d3c <__subdf3+0x834>
40015b0c:	01001004 	movi	r4,64
40015b10:	2085c83a 	sub	r2,r4,r2
40015b14:	2884983a 	sll	r2,r5,r2
40015b18:	118cb03a 	or	r6,r2,r6
40015b1c:	300cc03a 	cmpne	r6,r6,zero
40015b20:	4992b03a 	or	r9,r9,r6
40015b24:	0005883a 	mov	r2,zero
40015b28:	003f1206 	br	40015774 <__alt_data_end+0xc0015774>
40015b2c:	0101ffc4 	movi	r4,2047
40015b30:	493f9c1e 	bne	r9,r4,400159a4 <__alt_data_end+0xc00159a4>
40015b34:	2807883a 	mov	r3,r5
40015b38:	3023883a 	mov	r17,r6
40015b3c:	4821883a 	mov	r16,r9
40015b40:	3825883a 	mov	r18,r7
40015b44:	003e9106 	br	4001558c <__alt_data_end+0xc001558c>
40015b48:	80001f1e 	bne	r16,zero,40015bc8 <__subdf3+0x6c0>
40015b4c:	1c48b03a 	or	r4,r3,r17
40015b50:	20005a26 	beq	r4,zero,40015cbc <__subdf3+0x7b4>
40015b54:	0084303a 	nor	r2,zero,r2
40015b58:	1000561e 	bne	r2,zero,40015cb4 <__subdf3+0x7ac>
40015b5c:	89a3883a 	add	r17,r17,r6
40015b60:	1945883a 	add	r2,r3,r5
40015b64:	898d803a 	cmpltu	r6,r17,r6
40015b68:	3087883a 	add	r3,r6,r2
40015b6c:	4821883a 	mov	r16,r9
40015b70:	003f0506 	br	40015788 <__alt_data_end+0xc0015788>
40015b74:	10002b1e 	bne	r2,zero,40015c24 <__subdf3+0x71c>
40015b78:	2984b03a 	or	r2,r5,r6
40015b7c:	10008026 	beq	r2,zero,40015d80 <__subdf3+0x878>
40015b80:	2807883a 	mov	r3,r5
40015b84:	3023883a 	mov	r17,r6
40015b88:	3825883a 	mov	r18,r7
40015b8c:	0401ffc4 	movi	r16,2047
40015b90:	003e7e06 	br	4001558c <__alt_data_end+0xc001558c>
40015b94:	3809883a 	mov	r4,r7
40015b98:	0011883a 	mov	r8,zero
40015b9c:	0005883a 	mov	r2,zero
40015ba0:	003ee306 	br	40015730 <__alt_data_end+0xc0015730>
40015ba4:	1c62b03a 	or	r17,r3,r17
40015ba8:	8822c03a 	cmpne	r17,r17,zero
40015bac:	0005883a 	mov	r2,zero
40015bb0:	003f8906 	br	400159d8 <__alt_data_end+0xc00159d8>
40015bb4:	3809883a 	mov	r4,r7
40015bb8:	4821883a 	mov	r16,r9
40015bbc:	0011883a 	mov	r8,zero
40015bc0:	0005883a 	mov	r2,zero
40015bc4:	003eda06 	br	40015730 <__alt_data_end+0xc0015730>
40015bc8:	0101ffc4 	movi	r4,2047
40015bcc:	49003b26 	beq	r9,r4,40015cbc <__subdf3+0x7b4>
40015bd0:	0085c83a 	sub	r2,zero,r2
40015bd4:	18c02034 	orhi	r3,r3,128
40015bd8:	01000e04 	movi	r4,56
40015bdc:	20806e16 	blt	r4,r2,40015d98 <__subdf3+0x890>
40015be0:	010007c4 	movi	r4,31
40015be4:	20807716 	blt	r4,r2,40015dc4 <__subdf3+0x8bc>
40015be8:	01000804 	movi	r4,32
40015bec:	2089c83a 	sub	r4,r4,r2
40015bf0:	1914983a 	sll	r10,r3,r4
40015bf4:	8890d83a 	srl	r8,r17,r2
40015bf8:	8908983a 	sll	r4,r17,r4
40015bfc:	1884d83a 	srl	r2,r3,r2
40015c00:	5222b03a 	or	r17,r10,r8
40015c04:	2006c03a 	cmpne	r3,r4,zero
40015c08:	88e2b03a 	or	r17,r17,r3
40015c0c:	89a3883a 	add	r17,r17,r6
40015c10:	1145883a 	add	r2,r2,r5
40015c14:	898d803a 	cmpltu	r6,r17,r6
40015c18:	3087883a 	add	r3,r6,r2
40015c1c:	4821883a 	mov	r16,r9
40015c20:	003ed906 	br	40015788 <__alt_data_end+0xc0015788>
40015c24:	2984b03a 	or	r2,r5,r6
40015c28:	10004226 	beq	r2,zero,40015d34 <__subdf3+0x82c>
40015c2c:	1808d0fa 	srli	r4,r3,3
40015c30:	8822d0fa 	srli	r17,r17,3
40015c34:	1806977a 	slli	r3,r3,29
40015c38:	2080022c 	andhi	r2,r4,8
40015c3c:	1c62b03a 	or	r17,r3,r17
40015c40:	10000826 	beq	r2,zero,40015c64 <__subdf3+0x75c>
40015c44:	2812d0fa 	srli	r9,r5,3
40015c48:	4880022c 	andhi	r2,r9,8
40015c4c:	1000051e 	bne	r2,zero,40015c64 <__subdf3+0x75c>
40015c50:	300cd0fa 	srli	r6,r6,3
40015c54:	2804977a 	slli	r2,r5,29
40015c58:	4809883a 	mov	r4,r9
40015c5c:	3825883a 	mov	r18,r7
40015c60:	11a2b03a 	or	r17,r2,r6
40015c64:	8806d77a 	srli	r3,r17,29
40015c68:	200890fa 	slli	r4,r4,3
40015c6c:	882290fa 	slli	r17,r17,3
40015c70:	0401ffc4 	movi	r16,2047
40015c74:	1906b03a 	or	r3,r3,r4
40015c78:	003e4406 	br	4001558c <__alt_data_end+0xc001558c>
40015c7c:	2984b03a 	or	r2,r5,r6
40015c80:	103e4226 	beq	r2,zero,4001558c <__alt_data_end+0xc001558c>
40015c84:	8989c83a 	sub	r4,r17,r6
40015c88:	8911803a 	cmpltu	r8,r17,r4
40015c8c:	1945c83a 	sub	r2,r3,r5
40015c90:	1205c83a 	sub	r2,r2,r8
40015c94:	1200202c 	andhi	r8,r2,128
40015c98:	403e9a26 	beq	r8,zero,40015704 <__alt_data_end+0xc0015704>
40015c9c:	3463c83a 	sub	r17,r6,r17
40015ca0:	28c5c83a 	sub	r2,r5,r3
40015ca4:	344d803a 	cmpltu	r6,r6,r17
40015ca8:	1187c83a 	sub	r3,r2,r6
40015cac:	3825883a 	mov	r18,r7
40015cb0:	003e3606 	br	4001558c <__alt_data_end+0xc001558c>
40015cb4:	0101ffc4 	movi	r4,2047
40015cb8:	493fc71e 	bne	r9,r4,40015bd8 <__alt_data_end+0xc0015bd8>
40015cbc:	2807883a 	mov	r3,r5
40015cc0:	3023883a 	mov	r17,r6
40015cc4:	4821883a 	mov	r16,r9
40015cc8:	003e3006 	br	4001558c <__alt_data_end+0xc001558c>
40015ccc:	10003626 	beq	r2,zero,40015da8 <__subdf3+0x8a0>
40015cd0:	2984b03a 	or	r2,r5,r6
40015cd4:	10001726 	beq	r2,zero,40015d34 <__subdf3+0x82c>
40015cd8:	1808d0fa 	srli	r4,r3,3
40015cdc:	8822d0fa 	srli	r17,r17,3
40015ce0:	1806977a 	slli	r3,r3,29
40015ce4:	2080022c 	andhi	r2,r4,8
40015ce8:	1c62b03a 	or	r17,r3,r17
40015cec:	10000726 	beq	r2,zero,40015d0c <__subdf3+0x804>
40015cf0:	2812d0fa 	srli	r9,r5,3
40015cf4:	4880022c 	andhi	r2,r9,8
40015cf8:	1000041e 	bne	r2,zero,40015d0c <__subdf3+0x804>
40015cfc:	300cd0fa 	srli	r6,r6,3
40015d00:	2804977a 	slli	r2,r5,29
40015d04:	4809883a 	mov	r4,r9
40015d08:	11a2b03a 	or	r17,r2,r6
40015d0c:	8806d77a 	srli	r3,r17,29
40015d10:	200890fa 	slli	r4,r4,3
40015d14:	882290fa 	slli	r17,r17,3
40015d18:	3825883a 	mov	r18,r7
40015d1c:	1906b03a 	or	r3,r3,r4
40015d20:	0401ffc4 	movi	r16,2047
40015d24:	003e1906 	br	4001558c <__alt_data_end+0xc001558c>
40015d28:	000b883a 	mov	r5,zero
40015d2c:	0005883a 	mov	r2,zero
40015d30:	003e2e06 	br	400155ec <__alt_data_end+0xc00155ec>
40015d34:	0401ffc4 	movi	r16,2047
40015d38:	003e1406 	br	4001558c <__alt_data_end+0xc001558c>
40015d3c:	0005883a 	mov	r2,zero
40015d40:	003f7506 	br	40015b18 <__alt_data_end+0xc0015b18>
40015d44:	0005883a 	mov	r2,zero
40015d48:	0009883a 	mov	r4,zero
40015d4c:	003e7806 	br	40015730 <__alt_data_end+0xc0015730>
40015d50:	123ff804 	addi	r8,r2,-32
40015d54:	01000804 	movi	r4,32
40015d58:	1a10d83a 	srl	r8,r3,r8
40015d5c:	11002526 	beq	r2,r4,40015df4 <__subdf3+0x8ec>
40015d60:	01001004 	movi	r4,64
40015d64:	2085c83a 	sub	r2,r4,r2
40015d68:	1884983a 	sll	r2,r3,r2
40015d6c:	1444b03a 	or	r2,r2,r17
40015d70:	1004c03a 	cmpne	r2,r2,zero
40015d74:	40a2b03a 	or	r17,r8,r2
40015d78:	0005883a 	mov	r2,zero
40015d7c:	003f1606 	br	400159d8 <__alt_data_end+0xc00159d8>
40015d80:	02000434 	movhi	r8,16
40015d84:	0009883a 	mov	r4,zero
40015d88:	423fffc4 	addi	r8,r8,-1
40015d8c:	00bfffc4 	movi	r2,-1
40015d90:	0401ffc4 	movi	r16,2047
40015d94:	003e6606 	br	40015730 <__alt_data_end+0xc0015730>
40015d98:	1c62b03a 	or	r17,r3,r17
40015d9c:	8822c03a 	cmpne	r17,r17,zero
40015da0:	0005883a 	mov	r2,zero
40015da4:	003f9906 	br	40015c0c <__alt_data_end+0xc0015c0c>
40015da8:	2807883a 	mov	r3,r5
40015dac:	3023883a 	mov	r17,r6
40015db0:	0401ffc4 	movi	r16,2047
40015db4:	003df506 	br	4001558c <__alt_data_end+0xc001558c>
40015db8:	2807883a 	mov	r3,r5
40015dbc:	3023883a 	mov	r17,r6
40015dc0:	003df206 	br	4001558c <__alt_data_end+0xc001558c>
40015dc4:	123ff804 	addi	r8,r2,-32
40015dc8:	01000804 	movi	r4,32
40015dcc:	1a10d83a 	srl	r8,r3,r8
40015dd0:	11000a26 	beq	r2,r4,40015dfc <__subdf3+0x8f4>
40015dd4:	01001004 	movi	r4,64
40015dd8:	2085c83a 	sub	r2,r4,r2
40015ddc:	1884983a 	sll	r2,r3,r2
40015de0:	1444b03a 	or	r2,r2,r17
40015de4:	1004c03a 	cmpne	r2,r2,zero
40015de8:	40a2b03a 	or	r17,r8,r2
40015dec:	0005883a 	mov	r2,zero
40015df0:	003f8606 	br	40015c0c <__alt_data_end+0xc0015c0c>
40015df4:	0005883a 	mov	r2,zero
40015df8:	003fdc06 	br	40015d6c <__alt_data_end+0xc0015d6c>
40015dfc:	0005883a 	mov	r2,zero
40015e00:	003ff706 	br	40015de0 <__alt_data_end+0xc0015de0>

40015e04 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
40015e04:	defffd04 	addi	sp,sp,-12
40015e08:	dfc00215 	stw	ra,8(sp)
40015e0c:	dc400115 	stw	r17,4(sp)
40015e10:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
40015e14:	20001f16 	blt	r4,zero,40015e94 <close+0x90>
40015e18:	20c00324 	muli	r3,r4,12
40015e1c:	009000b4 	movhi	r2,16386
40015e20:	10865e04 	addi	r2,r2,6520
40015e24:	1885883a 	add	r2,r3,r2
40015e28:	2021883a 	mov	r16,r4

  if (fd)
40015e2c:	10001926 	beq	r2,zero,40015e94 <close+0x90>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
40015e30:	10c00017 	ldw	r3,0(r2)
40015e34:	18c00417 	ldw	r3,16(r3)
40015e38:	18000c26 	beq	r3,zero,40015e6c <close+0x68>
40015e3c:	1009883a 	mov	r4,r2
40015e40:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
40015e44:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
40015e48:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
40015e4c:	00163c80 	call	400163c8 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
40015e50:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
40015e54:	88000816 	blt	r17,zero,40015e78 <close+0x74>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
40015e58:	dfc00217 	ldw	ra,8(sp)
40015e5c:	dc400117 	ldw	r17,4(sp)
40015e60:	dc000017 	ldw	r16,0(sp)
40015e64:	dec00304 	addi	sp,sp,12
40015e68:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
40015e6c:	00163c80 	call	400163c8 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
40015e70:	0005883a 	mov	r2,zero
40015e74:	003ff806 	br	40015e58 <__alt_data_end+0xc0015e58>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
40015e78:	d0a00b17 	ldw	r2,-32724(gp)
40015e7c:	10000c26 	beq	r2,zero,40015eb0 <close+0xac>
40015e80:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
40015e84:	0463c83a 	sub	r17,zero,r17
40015e88:	14400015 	stw	r17,0(r2)
      return -1;
40015e8c:	00bfffc4 	movi	r2,-1
40015e90:	003ff106 	br	40015e58 <__alt_data_end+0xc0015e58>
40015e94:	d0a00b17 	ldw	r2,-32724(gp)
40015e98:	10000726 	beq	r2,zero,40015eb8 <close+0xb4>
40015e9c:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
40015ea0:	00c01444 	movi	r3,81
40015ea4:	10c00015 	stw	r3,0(r2)
    return -1;
40015ea8:	00bfffc4 	movi	r2,-1
40015eac:	003fea06 	br	40015e58 <__alt_data_end+0xc0015e58>
40015eb0:	d0af9f04 	addi	r2,gp,-16772
40015eb4:	003ff306 	br	40015e84 <__alt_data_end+0xc0015e84>
40015eb8:	d0af9f04 	addi	r2,gp,-16772
40015ebc:	003ff806 	br	40015ea0 <__alt_data_end+0xc0015ea0>

40015ec0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
40015ec0:	3005883a 	mov	r2,r6
40015ec4:	f800283a 	ret

40015ec8 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
40015ec8:	20000226 	beq	r4,zero,40015ed4 <_exit+0xc>
    ALT_SIM_FAIL();
40015ecc:	002af070 	cmpltui	zero,zero,43969
40015ed0:	003fff06 	br	40015ed0 <__alt_data_end+0xc0015ed0>
  } else {
    ALT_SIM_PASS();
40015ed4:	002af0b0 	cmpltui	zero,zero,43970
40015ed8:	003ffd06 	br	40015ed0 <__alt_data_end+0xc0015ed0>

40015edc <fstat>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
40015edc:	20000d16 	blt	r4,zero,40015f14 <fstat+0x38>
40015ee0:	21000324 	muli	r4,r4,12
40015ee4:	009000b4 	movhi	r2,16386
40015ee8:	10865e04 	addi	r2,r2,6520
40015eec:	2089883a 	add	r4,r4,r2
  
  if (fd)
40015ef0:	20000826 	beq	r4,zero,40015f14 <fstat+0x38>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
40015ef4:	20800017 	ldw	r2,0(r4)
40015ef8:	10800817 	ldw	r2,32(r2)
40015efc:	10000126 	beq	r2,zero,40015f04 <fstat+0x28>
    {
      return fd->dev->fstat(fd, st);
40015f00:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
40015f04:	00880004 	movi	r2,8192
40015f08:	28800115 	stw	r2,4(r5)
      return 0;
40015f0c:	0005883a 	mov	r2,zero
40015f10:	f800283a 	ret
40015f14:	d0a00b17 	ldw	r2,-32724(gp)
40015f18:	10000926 	beq	r2,zero,40015f40 <fstat+0x64>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
40015f1c:	deffff04 	addi	sp,sp,-4
40015f20:	dfc00015 	stw	ra,0(sp)
40015f24:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
40015f28:	00c01444 	movi	r3,81
40015f2c:	10c00015 	stw	r3,0(r2)
    return -1;
40015f30:	00bfffc4 	movi	r2,-1
  }
}
40015f34:	dfc00017 	ldw	ra,0(sp)
40015f38:	dec00104 	addi	sp,sp,4
40015f3c:	f800283a 	ret
40015f40:	d0af9f04 	addi	r2,gp,-16772
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
40015f44:	00c01444 	movi	r3,81
40015f48:	10c00015 	stw	r3,0(r2)
    return -1;
40015f4c:	00bfffc4 	movi	r2,-1
  }
}
40015f50:	f800283a 	ret

40015f54 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
40015f54:	defff004 	addi	sp,sp,-64
40015f58:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
40015f5c:	20001316 	blt	r4,zero,40015fac <isatty+0x58>
40015f60:	20800324 	muli	r2,r4,12
40015f64:	00d000b4 	movhi	r3,16386
40015f68:	18c65e04 	addi	r3,r3,6520
40015f6c:	10c5883a 	add	r2,r2,r3
  
  if (fd)
40015f70:	10000e26 	beq	r2,zero,40015fac <isatty+0x58>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
40015f74:	10800017 	ldw	r2,0(r2)
40015f78:	10800817 	ldw	r2,32(r2)
40015f7c:	10000726 	beq	r2,zero,40015f9c <isatty+0x48>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
40015f80:	d80b883a 	mov	r5,sp
40015f84:	0015edc0 	call	40015edc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
40015f88:	d8800117 	ldw	r2,4(sp)
40015f8c:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
40015f90:	dfc00f17 	ldw	ra,60(sp)
40015f94:	dec01004 	addi	sp,sp,64
40015f98:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
40015f9c:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
40015fa0:	dfc00f17 	ldw	ra,60(sp)
40015fa4:	dec01004 	addi	sp,sp,64
40015fa8:	f800283a 	ret
40015fac:	d0a00b17 	ldw	r2,-32724(gp)
40015fb0:	10000726 	beq	r2,zero,40015fd0 <isatty+0x7c>
40015fb4:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
40015fb8:	00c01444 	movi	r3,81
40015fbc:	10c00015 	stw	r3,0(r2)
    return 0;
40015fc0:	0005883a 	mov	r2,zero
  }
}
40015fc4:	dfc00f17 	ldw	ra,60(sp)
40015fc8:	dec01004 	addi	sp,sp,64
40015fcc:	f800283a 	ret
40015fd0:	d0af9f04 	addi	r2,gp,-16772
40015fd4:	003ff806 	br	40015fb8 <__alt_data_end+0xc0015fb8>

40015fd8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
40015fd8:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
40015fdc:	011000b4 	movhi	r4,16386
40015fe0:	015000b4 	movhi	r5,16386
40015fe4:	dfc00015 	stw	ra,0(sp)
40015fe8:	213ba904 	addi	r4,r4,-4444
40015fec:	294b1704 	addi	r5,r5,11356
40015ff0:	21400a26 	beq	r4,r5,4001601c <alt_load+0x44>
  {
    while( to != end )
40015ff4:	009000b4 	movhi	r2,16386
40015ff8:	108b1704 	addi	r2,r2,11356
40015ffc:	20800726 	beq	r4,r2,4001601c <alt_load+0x44>
    {
      *to++ = *from++;
40016000:	21800104 	addi	r6,r4,4
40016004:	118dc83a 	sub	r6,r2,r6
40016008:	300cd0ba 	srli	r6,r6,2
4001600c:	31800044 	addi	r6,r6,1
40016010:	318d883a 	add	r6,r6,r6
40016014:	318d883a 	add	r6,r6,r6
40016018:	000b8fc0 	call	4000b8fc <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
4001601c:	01100034 	movhi	r4,16384
40016020:	01500034 	movhi	r5,16384
40016024:	21000804 	addi	r4,r4,32
40016028:	29400804 	addi	r5,r5,32
4001602c:	21400a26 	beq	r4,r5,40016058 <alt_load+0x80>
  {
    while( to != end )
40016030:	00900034 	movhi	r2,16384
40016034:	10806304 	addi	r2,r2,396
40016038:	20800726 	beq	r4,r2,40016058 <alt_load+0x80>
    {
      *to++ = *from++;
4001603c:	21800104 	addi	r6,r4,4
40016040:	118dc83a 	sub	r6,r2,r6
40016044:	300cd0ba 	srli	r6,r6,2
40016048:	31800044 	addi	r6,r6,1
4001604c:	318d883a 	add	r6,r6,r6
40016050:	318d883a 	add	r6,r6,r6
40016054:	000b8fc0 	call	4000b8fc <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
40016058:	011000b4 	movhi	r4,16386
4001605c:	015000b4 	movhi	r5,16386
40016060:	2134e804 	addi	r4,r4,-11360
40016064:	2974e804 	addi	r5,r5,-11360
40016068:	21400a26 	beq	r4,r5,40016094 <alt_load+0xbc>
  {
    while( to != end )
4001606c:	009000b4 	movhi	r2,16386
40016070:	10bba904 	addi	r2,r2,-4444
40016074:	20800726 	beq	r4,r2,40016094 <alt_load+0xbc>
    {
      *to++ = *from++;
40016078:	21800104 	addi	r6,r4,4
4001607c:	118dc83a 	sub	r6,r2,r6
40016080:	300cd0ba 	srli	r6,r6,2
40016084:	31800044 	addi	r6,r6,1
40016088:	318d883a 	add	r6,r6,r6
4001608c:	318d883a 	add	r6,r6,r6
40016090:	000b8fc0 	call	4000b8fc <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
40016094:	001cb0c0 	call	4001cb0c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
40016098:	dfc00017 	ldw	ra,0(sp)
4001609c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
400160a0:	001ce001 	jmpi	4001ce00 <alt_icache_flush_all>

400160a4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
400160a4:	defffe04 	addi	sp,sp,-8
400160a8:	dfc00115 	stw	ra,4(sp)
400160ac:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
400160b0:	20000e16 	blt	r4,zero,400160ec <lseek+0x48>
400160b4:	21000324 	muli	r4,r4,12
400160b8:	009000b4 	movhi	r2,16386
400160bc:	10865e04 	addi	r2,r2,6520
400160c0:	2089883a 	add	r4,r4,r2
  
  if (fd) 
400160c4:	20000926 	beq	r4,zero,400160ec <lseek+0x48>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
400160c8:	20800017 	ldw	r2,0(r4)
400160cc:	10800717 	ldw	r2,28(r2)
400160d0:	10000d26 	beq	r2,zero,40016108 <lseek+0x64>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
400160d4:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
400160d8:	10000f16 	blt	r2,zero,40016118 <lseek+0x74>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
400160dc:	dfc00117 	ldw	ra,4(sp)
400160e0:	dc000017 	ldw	r16,0(sp)
400160e4:	dec00204 	addi	sp,sp,8
400160e8:	f800283a 	ret
400160ec:	04001444 	movi	r16,81
400160f0:	d0a00b17 	ldw	r2,-32724(gp)
400160f4:	10000626 	beq	r2,zero,40016110 <lseek+0x6c>
400160f8:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
400160fc:	14000015 	stw	r16,0(r2)
    rc = -1;
40016100:	00bfffc4 	movi	r2,-1
  }

  return rc;
40016104:	003ff506 	br	400160dc <__alt_data_end+0xc00160dc>
40016108:	04002184 	movi	r16,134
4001610c:	003ff806 	br	400160f0 <__alt_data_end+0xc00160f0>
40016110:	d0af9f04 	addi	r2,gp,-16772
40016114:	003ff906 	br	400160fc <__alt_data_end+0xc00160fc>
40016118:	00a1c83a 	sub	r16,zero,r2
4001611c:	003ff406 	br	400160f0 <__alt_data_end+0xc00160f0>

40016120 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
40016120:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
40016124:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
40016128:	dfc00115 	stw	ra,4(sp)
4001612c:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
40016130:	00165000 	call	40016500 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
40016134:	00165200 	call	40016520 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
40016138:	019000b4 	movhi	r6,16386
4001613c:	31bb9604 	addi	r6,r6,-4520
40016140:	300b883a 	mov	r5,r6
40016144:	3009883a 	mov	r4,r6
40016148:	001cf000 	call	4001cf00 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
4001614c:	001cb900 	call	4001cb90 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
40016150:	011000b4 	movhi	r4,16386
40016154:	2132fd04 	addi	r4,r4,-13324
40016158:	001d1f80 	call	4001d1f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
4001615c:	d1afa617 	ldw	r6,-16744(gp)
40016160:	d16fa717 	ldw	r5,-16740(gp)
40016164:	d12fa817 	ldw	r4,-16736(gp)
40016168:	0001f900 	call	40001f90 <main>
  close(STDOUT_FILENO);
4001616c:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
40016170:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
40016174:	0015e040 	call	40015e04 <close>
  exit (result);
40016178:	8009883a 	mov	r4,r16
4001617c:	00097200 	call	40009720 <exit>

40016180 <__malloc_lock>:
40016180:	f800283a 	ret

40016184 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
40016184:	f800283a 	ret

40016188 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
40016188:	defffa04 	addi	sp,sp,-24
4001618c:	dc000015 	stw	r16,0(sp)
40016190:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
40016194:	d1600704 	addi	r5,gp,-32740
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
40016198:	dc800215 	stw	r18,8(sp)
4001619c:	dc400115 	stw	r17,4(sp)
400161a0:	dfc00515 	stw	ra,20(sp)
400161a4:	dd000415 	stw	r20,16(sp)
400161a8:	dcc00315 	stw	r19,12(sp)
400161ac:	2023883a 	mov	r17,r4
400161b0:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
400161b4:	001cc580 	call	4001cc58 <alt_find_dev>
400161b8:	10004626 	beq	r2,zero,400162d4 <open+0x14c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
400161bc:	1009883a 	mov	r4,r2
400161c0:	1029883a 	mov	r20,r2
400161c4:	001cdb00 	call	4001cdb0 <alt_get_fd>
400161c8:	1027883a 	mov	r19,r2
400161cc:	1000090e 	bge	r2,zero,400161f4 <open+0x6c>
400161d0:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
400161d4:	9809883a 	mov	r4,r19
400161d8:	00163c80 	call	400163c8 <alt_release_fd>
400161dc:	d0a00b17 	ldw	r2,-32724(gp)
400161e0:	10004326 	beq	r2,zero,400162f0 <open+0x168>
400161e4:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
400161e8:	14000015 	stw	r16,0(r2)
    return -1;
400161ec:	00bfffc4 	movi	r2,-1
400161f0:	00002e06 	br	400162ac <open+0x124>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
400161f4:	99000324 	muli	r4,r19,12

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
400161f8:	00d00034 	movhi	r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
400161fc:	009000b4 	movhi	r2,16386

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
40016200:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
40016204:	10865e04 	addi	r2,r2,6520

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
40016208:	80c6703a 	and	r3,r16,r3
4001620c:	18d00034 	orhi	r3,r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
40016210:	2089883a 	add	r4,r4,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
40016214:	20c00215 	stw	r3,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
40016218:	d2200617 	ldw	r8,-32744(gp)
4001621c:	21c00017 	ldw	r7,0(r4)
40016220:	11400204 	addi	r5,r2,8
40016224:	0007883a 	mov	r3,zero
40016228:	00000306 	br	40016238 <open+0xb0>
4001622c:	10800304 	addi	r2,r2,12
40016230:	29400304 	addi	r5,r5,12
40016234:	40c01436 	bltu	r8,r3,40016288 <open+0x100>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
40016238:	11800017 	ldw	r6,0(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
4001623c:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
40016240:	31fffa1e 	bne	r6,r7,4001622c <__alt_data_end+0xc001622c>
40016244:	29800017 	ldw	r6,0(r5)
40016248:	303ff80e 	bge	r6,zero,4001622c <__alt_data_end+0xc001622c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
4001624c:	20bff726 	beq	r4,r2,4001622c <__alt_data_end+0xc001622c>
40016250:	04000344 	movi	r16,13
40016254:	003fdf06 	br	400161d4 <__alt_data_end+0xc00161d4>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
40016258:	1009883a 	mov	r4,r2
4001625c:	001cdb00 	call	4001cdb0 <alt_get_fd>
40016260:	1027883a 	mov	r19,r2
40016264:	103fda16 	blt	r2,zero,400161d0 <__alt_data_end+0xc00161d0>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
40016268:	99000324 	muli	r4,r19,12
4001626c:	009000b4 	movhi	r2,16386
40016270:	10865e04 	addi	r2,r2,6520
40016274:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
40016278:	00900034 	movhi	r2,16384
4001627c:	10bfffc4 	addi	r2,r2,-1
40016280:	8084703a 	and	r2,r16,r2
40016284:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
40016288:	a0800317 	ldw	r2,12(r20)
4001628c:	10000f26 	beq	r2,zero,400162cc <open+0x144>
40016290:	900f883a 	mov	r7,r18
40016294:	800d883a 	mov	r6,r16
40016298:	880b883a 	mov	r5,r17
4001629c:	103ee83a 	callr	r2
400162a0:	1007883a 	mov	r3,r2
400162a4:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
400162a8:	18001316 	blt	r3,zero,400162f8 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
}
400162ac:	dfc00517 	ldw	ra,20(sp)
400162b0:	dd000417 	ldw	r20,16(sp)
400162b4:	dcc00317 	ldw	r19,12(sp)
400162b8:	dc800217 	ldw	r18,8(sp)
400162bc:	dc400117 	ldw	r17,4(sp)
400162c0:	dc000017 	ldw	r16,0(sp)
400162c4:	dec00604 	addi	sp,sp,24
400162c8:	f800283a 	ret
400162cc:	9805883a 	mov	r2,r19
400162d0:	003ff606 	br	400162ac <__alt_data_end+0xc00162ac>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
400162d4:	8809883a 	mov	r4,r17
400162d8:	001ccd00 	call	4001ccd0 <alt_find_file>
400162dc:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
400162e0:	103fdd1e 	bne	r2,zero,40016258 <__alt_data_end+0xc0016258>
400162e4:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
400162e8:	04ffffc4 	movi	r19,-1
400162ec:	003fb906 	br	400161d4 <__alt_data_end+0xc00161d4>
400162f0:	d0af9f04 	addi	r2,gp,-16772
400162f4:	003fbc06 	br	400161e8 <__alt_data_end+0xc00161e8>
400162f8:	00e1c83a 	sub	r16,zero,r3
400162fc:	003fb506 	br	400161d4 <__alt_data_end+0xc00161d4>

40016300 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
40016300:	defffe04 	addi	sp,sp,-8
40016304:	dfc00115 	stw	ra,4(sp)
40016308:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
4001630c:	20002116 	blt	r4,zero,40016394 <read+0x94>
40016310:	21000324 	muli	r4,r4,12
40016314:	009000b4 	movhi	r2,16386
40016318:	10865e04 	addi	r2,r2,6520
4001631c:	2089883a 	add	r4,r4,r2
  
  if (fd)
40016320:	20001c26 	beq	r4,zero,40016394 <read+0x94>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
40016324:	20800217 	ldw	r2,8(r4)
40016328:	00c00044 	movi	r3,1
4001632c:	108000cc 	andi	r2,r2,3
40016330:	10c00a26 	beq	r2,r3,4001635c <read+0x5c>
        (fd->dev->read))
40016334:	20800017 	ldw	r2,0(r4)
40016338:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
4001633c:	10000726 	beq	r2,zero,4001635c <read+0x5c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
40016340:	103ee83a 	callr	r2
40016344:	1021883a 	mov	r16,r2
40016348:	10000b16 	blt	r2,zero,40016378 <read+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
4001634c:	dfc00117 	ldw	ra,4(sp)
40016350:	dc000017 	ldw	r16,0(sp)
40016354:	dec00204 	addi	sp,sp,8
40016358:	f800283a 	ret
4001635c:	d0a00b17 	ldw	r2,-32724(gp)
40016360:	10001326 	beq	r2,zero,400163b0 <read+0xb0>
40016364:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
40016368:	00c00344 	movi	r3,13
4001636c:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
40016370:	00bfffc4 	movi	r2,-1
40016374:	003ff506 	br	4001634c <__alt_data_end+0xc001634c>
40016378:	d0a00b17 	ldw	r2,-32724(gp)
4001637c:	10000e26 	beq	r2,zero,400163b8 <read+0xb8>
40016380:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
40016384:	0421c83a 	sub	r16,zero,r16
40016388:	14000015 	stw	r16,0(r2)
          return -1;
4001638c:	00bfffc4 	movi	r2,-1
40016390:	003fee06 	br	4001634c <__alt_data_end+0xc001634c>
40016394:	d0a00b17 	ldw	r2,-32724(gp)
40016398:	10000926 	beq	r2,zero,400163c0 <read+0xc0>
4001639c:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
400163a0:	00c01444 	movi	r3,81
400163a4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
400163a8:	00bfffc4 	movi	r2,-1
400163ac:	003fe706 	br	4001634c <__alt_data_end+0xc001634c>
400163b0:	d0af9f04 	addi	r2,gp,-16772
400163b4:	003fec06 	br	40016368 <__alt_data_end+0xc0016368>
400163b8:	d0af9f04 	addi	r2,gp,-16772
400163bc:	003ff106 	br	40016384 <__alt_data_end+0xc0016384>
400163c0:	d0af9f04 	addi	r2,gp,-16772
400163c4:	003ff606 	br	400163a0 <__alt_data_end+0xc00163a0>

400163c8 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
400163c8:	00800084 	movi	r2,2
400163cc:	1100060e 	bge	r2,r4,400163e8 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
400163d0:	21000324 	muli	r4,r4,12
400163d4:	009000b4 	movhi	r2,16386
400163d8:	10865e04 	addi	r2,r2,6520
400163dc:	1109883a 	add	r4,r2,r4
400163e0:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
400163e4:	20000015 	stw	zero,0(r4)
400163e8:	f800283a 	ret

400163ec <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
400163ec:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
400163f0:	00bfff84 	movi	r2,-2
400163f4:	2884703a 	and	r2,r5,r2
400163f8:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
400163fc:	d0a00c17 	ldw	r2,-32720(gp)
40016400:	00ffff04 	movi	r3,-4
40016404:	108000c4 	addi	r2,r2,3
40016408:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
4001640c:	00e00034 	movhi	r3,32768
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
40016410:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
40016414:	1109883a 	add	r4,r2,r4
40016418:	18c00004 	addi	r3,r3,0
4001641c:	19000336 	bltu	r3,r4,4001642c <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
40016420:	d1200c15 	stw	r4,-32720(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40016424:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
40016428:	f800283a 	ret
4001642c:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
40016430:	00bfffc4 	movi	r2,-1
40016434:	f800283a 	ret

40016438 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
40016438:	001ca941 	jmpi	4001ca94 <alt_busy_sleep>

4001643c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
4001643c:	defffe04 	addi	sp,sp,-8
40016440:	dfc00115 	stw	ra,4(sp)
40016444:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
40016448:	20002216 	blt	r4,zero,400164d4 <write+0x98>
4001644c:	21000324 	muli	r4,r4,12
40016450:	009000b4 	movhi	r2,16386
40016454:	10865e04 	addi	r2,r2,6520
40016458:	2089883a 	add	r4,r4,r2
  
  if (fd)
4001645c:	20001d26 	beq	r4,zero,400164d4 <write+0x98>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
40016460:	20800217 	ldw	r2,8(r4)
40016464:	108000cc 	andi	r2,r2,3
40016468:	10000a26 	beq	r2,zero,40016494 <write+0x58>
4001646c:	20800017 	ldw	r2,0(r4)
40016470:	10800617 	ldw	r2,24(r2)
40016474:	10000726 	beq	r2,zero,40016494 <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
40016478:	103ee83a 	callr	r2
4001647c:	1021883a 	mov	r16,r2
40016480:	10000d16 	blt	r2,zero,400164b8 <write+0x7c>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
40016484:	dfc00117 	ldw	ra,4(sp)
40016488:	dc000017 	ldw	r16,0(sp)
4001648c:	dec00204 	addi	sp,sp,8
40016490:	f800283a 	ret
40016494:	d0a00b17 	ldw	r2,-32724(gp)
40016498:	10000526 	beq	r2,zero,400164b0 <write+0x74>
4001649c:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
400164a0:	00c00344 	movi	r3,13
400164a4:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
400164a8:	00bfffc4 	movi	r2,-1
400164ac:	003ff506 	br	40016484 <__alt_data_end+0xc0016484>
400164b0:	d0af9f04 	addi	r2,gp,-16772
400164b4:	003ffa06 	br	400164a0 <__alt_data_end+0xc00164a0>
400164b8:	d0a00b17 	ldw	r2,-32724(gp)
400164bc:	10000c26 	beq	r2,zero,400164f0 <write+0xb4>
400164c0:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
400164c4:	0421c83a 	sub	r16,zero,r16
400164c8:	14000015 	stw	r16,0(r2)
        return -1;
400164cc:	00bfffc4 	movi	r2,-1
400164d0:	003fec06 	br	40016484 <__alt_data_end+0xc0016484>
400164d4:	d0a00b17 	ldw	r2,-32724(gp)
400164d8:	10000726 	beq	r2,zero,400164f8 <write+0xbc>
400164dc:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
400164e0:	00c01444 	movi	r3,81
400164e4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
400164e8:	00bfffc4 	movi	r2,-1
400164ec:	003fe506 	br	40016484 <__alt_data_end+0xc0016484>
400164f0:	d0af9f04 	addi	r2,gp,-16772
400164f4:	003ff306 	br	400164c4 <__alt_data_end+0xc00164c4>
400164f8:	d0af9f04 	addi	r2,gp,-16772
400164fc:	003ff806 	br	400164e0 <__alt_data_end+0xc00164e0>

40016500 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
40016500:	deffff04 	addi	sp,sp,-4
40016504:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
40016508:	001d12c0 	call	4001d12c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
4001650c:	00800044 	movi	r2,1
40016510:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
40016514:	dfc00017 	ldw	ra,0(sp)
40016518:	dec00104 	addi	sp,sp,4
4001651c:	f800283a 	ret

40016520 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
40016520:	defffd04 	addi	sp,sp,-12
40016524:	dc400115 	stw	r17,4(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
40016528:	045000b4 	movhi	r17,16386
4001652c:	8c46e704 	addi	r17,r17,7068
40016530:	000d883a 	mov	r6,zero
40016534:	8809883a 	mov	r4,r17
40016538:	000b883a 	mov	r5,zero
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
4001653c:	dfc00215 	stw	ra,8(sp)
40016540:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
40016544:	001c0740 	call	4001c074 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
40016548:	d4200704 	addi	r16,gp,-32740
4001654c:	800b883a 	mov	r5,r16
40016550:	893ff604 	addi	r4,r17,-40
40016554:	001cb240 	call	4001cb24 <alt_dev_llist_insert>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
40016558:	011000b4 	movhi	r4,16386
4001655c:	2106d304 	addi	r4,r4,6988
40016560:	001cd7c0 	call	4001cd7c <alt_fs_reg>
40016564:	011000b4 	movhi	r4,16386
40016568:	800b883a 	mov	r5,r16
4001656c:	2106c804 	addi	r4,r4,6944
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
}
40016570:	dfc00217 	ldw	ra,8(sp)
40016574:	dc400117 	ldw	r17,4(sp)
40016578:	dc000017 	ldw	r16,0(sp)
4001657c:	dec00304 	addi	sp,sp,12
40016580:	001cb241 	jmpi	4001cb24 <alt_dev_llist_insert>

40016584 <Check_for_DOS_FAT.part.5>:
    }
    return result;
}


bool Check_for_DOS_FAT(int FAT_partition_start_sector)
40016584:	defffb04 	addi	sp,sp,-20
40016588:	dc400115 	stw	r17,4(sp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
4001658c:	d46fab17 	ldw	r17,-16724(gp)
    }
    return result;
}


bool Check_for_DOS_FAT(int FAT_partition_start_sector)
40016590:	dfc00415 	stw	ra,16(sp)
40016594:	dcc00315 	stw	r19,12(sp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
40016598:	88c00a17 	ldw	r3,40(r17)
    }
    return result;
}


bool Check_for_DOS_FAT(int FAT_partition_start_sector)
4001659c:	dc800215 	stw	r18,8(sp)
400165a0:	dc000015 	stw	r16,0(sp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
400165a4:	19000023 	ldbuio	r4,0(r3)
400165a8:	00900134 	movhi	r2,16388
400165ac:	1094ae04 	addi	r2,r2,21176
400165b0:	11000005 	stb	r4,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
400165b4:	19000063 	ldbuio	r4,1(r3)
400165b8:	11000045 	stb	r4,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
400165bc:	190000a3 	ldbuio	r4,2(r3)
400165c0:	11000085 	stb	r4,2(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
400165c4:	190000e3 	ldbuio	r4,3(r3)
400165c8:	110000c5 	stb	r4,3(r2)
400165cc:	19000123 	ldbuio	r4,4(r3)
400165d0:	11000105 	stb	r4,4(r2)
400165d4:	19000163 	ldbuio	r4,5(r3)
400165d8:	11000145 	stb	r4,5(r2)
400165dc:	190001a3 	ldbuio	r4,6(r3)
400165e0:	11000185 	stb	r4,6(r2)
400165e4:	190001e3 	ldbuio	r4,7(r3)
400165e8:	110001c5 	stb	r4,7(r2)
400165ec:	19000223 	ldbuio	r4,8(r3)
400165f0:	11000205 	stb	r4,8(r2)
400165f4:	19000263 	ldbuio	r4,9(r3)
400165f8:	11000245 	stb	r4,9(r2)
400165fc:	190002a3 	ldbuio	r4,10(r3)
40016600:	11000285 	stb	r4,10(r2)
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
40016604:	19400323 	ldbuio	r5,12(r3)
40016608:	29403fcc 	andi	r5,r5,255
4001660c:	190002e3 	ldbuio	r4,11(r3)
40016610:	280a923a 	slli	r5,r5,8
40016614:	21003fcc 	andi	r4,r4,255
40016618:	2100201c 	xori	r4,r4,128
4001661c:	213fe004 	addi	r4,r4,-128
40016620:	2908b03a 	or	r4,r5,r4
40016624:	1100030d 	sth	r4,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
40016628:	19000363 	ldbuio	r4,13(r3)
4001662c:	11000385 	stb	r4,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
40016630:	190003ab 	ldhuio	r4,14(r3)
40016634:	1100040d 	sth	r4,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
40016638:	19000423 	ldbuio	r4,16(r3)
4001663c:	11000485 	stb	r4,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
40016640:	194004a3 	ldbuio	r5,18(r3)
40016644:	29403fcc 	andi	r5,r5,255
40016648:	19000463 	ldbuio	r4,17(r3)
4001664c:	280a923a 	slli	r5,r5,8
40016650:	21003fcc 	andi	r4,r4,255
40016654:	2908b03a 	or	r4,r5,r4
40016658:	1100050d 	sth	r4,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
4001665c:	19400523 	ldbuio	r5,20(r3)
40016660:	29403fcc 	andi	r5,r5,255
40016664:	190004e3 	ldbuio	r4,19(r3)
40016668:	280a923a 	slli	r5,r5,8
4001666c:	21003fcc 	andi	r4,r4,255
40016670:	2908b03a 	or	r4,r5,r4
40016674:	1100058d 	sth	r4,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
40016678:	19000563 	ldbuio	r4,21(r3)
4001667c:	11000605 	stb	r4,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
40016680:	190005ab 	ldhuio	r4,22(r3)
40016684:	1100068d 	sth	r4,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
40016688:	1900062b 	ldhuio	r4,24(r3)
4001668c:	1100070d 	sth	r4,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
40016690:	190006ab 	ldhuio	r4,26(r3)
40016694:	1100078d 	sth	r4,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
40016698:	19000737 	ldwio	r4,28(r3)
4001669c:	11000815 	stw	r4,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
400166a0:	19000837 	ldwio	r4,32(r3)
400166a4:	11000915 	stw	r4,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
400166a8:	18c00923 	ldbuio	r3,36(r3)
400166ac:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
400166b0:	88c00a17 	ldw	r3,40(r17)
400166b4:	18c00963 	ldbuio	r3,37(r3)
400166b8:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
400166bc:	88c00a17 	ldw	r3,40(r17)
400166c0:	1a0009a3 	ldbuio	r8,38(r3)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
400166c4:	10c0050b 	ldhu	r3,20(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
400166c8:	11c0040b 	ldhu	r7,16(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
400166cc:	1480068b 	ldhu	r18,26(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
400166d0:	1808917a 	slli	r4,r3,5
400166d4:	1140030b 	ldhu	r5,12(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
400166d8:	3c8d883a 	add	r6,r7,r18
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
400166dc:	91a5883a 	add	r18,r18,r6
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
400166e0:	1021883a 	mov	r16,r2
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
400166e4:	11801215 	stw	r6,72(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
400166e8:	12000a85 	stb	r8,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
400166ec:	11c01115 	stw	r7,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
400166f0:	14801315 	stw	r18,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
400166f4:	018003c4 	movi	r6,15
400166f8:	2144b03a 	or	r2,r4,r5
400166fc:	8027883a 	mov	r19,r16
40016700:	30801836 	bltu	r6,r2,40016764 <Check_for_DOS_FAT.part.5+0x1e0>
40016704:	1806927a 	slli	r3,r3,9
40016708:	009000b4 	movhi	r2,16386
4001670c:	1083f504 	addi	r2,r2,4052
40016710:	194ab03a 	or	r5,r3,r5
40016714:	288b883a 	add	r5,r5,r2
40016718:	28800003 	ldbu	r2,0(r5)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
4001671c:	8100058b 	ldhu	r4,22(r16)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
40016720:	14a5883a 	add	r18,r2,r18
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
40016724:	00900134 	movhi	r2,16388
40016728:	1094ae04 	addi	r2,r2,21176
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
4001672c:	9c801415 	stw	r18,80(r19)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
40016730:	11400383 	ldbu	r5,14(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
40016734:	20000d26 	beq	r4,zero,4001676c <Check_for_DOS_FAT.part.5+0x1e8>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
40016738:	2144b03a 	or	r2,r4,r5
4001673c:	00c003c4 	movi	r3,15
40016740:	1880662e 	bgeu	r3,r2,400168dc <Check_for_DOS_FAT.part.5+0x358>
40016744:	000797c0 	call	4000797c <__divsi3>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087)
40016748:	00c3fd84 	movi	r3,4086
4001674c:	18800b0e 	bge	r3,r2,4001677c <Check_for_DOS_FAT.part.5+0x1f8>
		{
			boot_sector_data.bits_for_cluster_index = 12;
		}
		else if (num_clusters <= 65517)
40016750:	00fffb54 	movui	r3,65517
40016754:	18805e16 	blt	r3,r2,400168d0 <Check_for_DOS_FAT.part.5+0x34c>
		{
			boot_sector_data.bits_for_cluster_index = 16;
40016758:	00800404 	movi	r2,16
4001675c:	80801085 	stb	r2,66(r16)
40016760:	00000806 	br	40016784 <Check_for_DOS_FAT.part.5+0x200>
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
40016764:	000797c0 	call	4000797c <__divsi3>
40016768:	003fec06 	br	4001671c <__alt_data_end+0xc001671c>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
4001676c:	11000917 	ldw	r4,36(r2)
40016770:	0007a740 	call	40007a74 <__udivsi3>
		}
		if (num_clusters < 4087)
40016774:	00c3fd84 	movi	r3,4086
40016778:	18bff516 	blt	r3,r2,40016750 <__alt_data_end+0xc0016750>
		{
			boot_sector_data.bits_for_cluster_index = 12;
4001677c:	00800304 	movi	r2,12
40016780:	80801085 	stb	r2,66(r16)
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
40016784:	88800a17 	ldw	r2,40(r17)
40016788:	108009e3 	ldbuio	r2,39(r2)
4001678c:	80800ac5 	stb	r2,43(r16)
40016790:	88800a17 	ldw	r2,40(r17)
40016794:	10800a23 	ldbuio	r2,40(r2)
40016798:	80800b05 	stb	r2,44(r16)
4001679c:	88800a17 	ldw	r2,40(r17)
400167a0:	10800a63 	ldbuio	r2,41(r2)
400167a4:	80800b45 	stb	r2,45(r16)
400167a8:	88800a17 	ldw	r2,40(r17)
400167ac:	10800aa3 	ldbuio	r2,42(r2)
400167b0:	80800b85 	stb	r2,46(r16)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
400167b4:	88800a17 	ldw	r2,40(r17)
400167b8:	10800ae3 	ldbuio	r2,43(r2)
400167bc:	80800bc5 	stb	r2,47(r16)
400167c0:	88800a17 	ldw	r2,40(r17)
400167c4:	10800b23 	ldbuio	r2,44(r2)
400167c8:	80800c05 	stb	r2,48(r16)
400167cc:	88800a17 	ldw	r2,40(r17)
400167d0:	10800b63 	ldbuio	r2,45(r2)
400167d4:	80800c45 	stb	r2,49(r16)
400167d8:	88800a17 	ldw	r2,40(r17)
400167dc:	10800ba3 	ldbuio	r2,46(r2)
400167e0:	80800c85 	stb	r2,50(r16)
400167e4:	88800a17 	ldw	r2,40(r17)
400167e8:	10800be3 	ldbuio	r2,47(r2)
400167ec:	80800cc5 	stb	r2,51(r16)
400167f0:	88800a17 	ldw	r2,40(r17)
400167f4:	10800c23 	ldbuio	r2,48(r2)
400167f8:	80800d05 	stb	r2,52(r16)
400167fc:	88800a17 	ldw	r2,40(r17)
40016800:	10800c63 	ldbuio	r2,49(r2)
40016804:	80800d45 	stb	r2,53(r16)
40016808:	88800a17 	ldw	r2,40(r17)
4001680c:	10800ca3 	ldbuio	r2,50(r2)
40016810:	80800d85 	stb	r2,54(r16)
40016814:	88800a17 	ldw	r2,40(r17)
40016818:	10800ce3 	ldbuio	r2,51(r2)
4001681c:	80800dc5 	stb	r2,55(r16)
40016820:	88800a17 	ldw	r2,40(r17)
40016824:	10800d23 	ldbuio	r2,52(r2)
40016828:	80800e05 	stb	r2,56(r16)
4001682c:	88800a17 	ldw	r2,40(r17)
40016830:	10800d63 	ldbuio	r2,53(r2)
40016834:	80800e45 	stb	r2,57(r16)
		}    
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
40016838:	88800a17 	ldw	r2,40(r17)
4001683c:	10800da3 	ldbuio	r2,54(r2)
40016840:	80800e85 	stb	r2,58(r16)
40016844:	88800a17 	ldw	r2,40(r17)
40016848:	10800de3 	ldbuio	r2,55(r2)
4001684c:	80800ec5 	stb	r2,59(r16)
40016850:	88800a17 	ldw	r2,40(r17)
40016854:	10800e23 	ldbuio	r2,56(r2)
40016858:	80800f05 	stb	r2,60(r16)
4001685c:	88800a17 	ldw	r2,40(r17)
40016860:	10800e63 	ldbuio	r2,57(r2)
40016864:	80800f45 	stb	r2,61(r16)
40016868:	88800a17 	ldw	r2,40(r17)
4001686c:	10800ea3 	ldbuio	r2,58(r2)
40016870:	80800f85 	stb	r2,62(r16)
40016874:	88800a17 	ldw	r2,40(r17)
40016878:	10800ee3 	ldbuio	r2,59(r2)
4001687c:	80800fc5 	stb	r2,63(r16)
40016880:	88800a17 	ldw	r2,40(r17)
40016884:	10800f23 	ldbuio	r2,60(r2)
40016888:	80801005 	stb	r2,64(r16)
4001688c:	88800a17 	ldw	r2,40(r17)
40016890:	10c00f63 	ldbuio	r3,61(r2)
40016894:	00900134 	movhi	r2,16388
40016898:	1094d204 	addi	r2,r2,21320
4001689c:	80c01045 	stb	r3,65(r16)
400168a0:	10c14004 	addi	r3,r2,1280
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
		{
			active_files[counter].in_use = false;
400168a4:	10000015 	stw	zero,0(r2)
400168a8:	10801004 	addi	r2,r2,64
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
400168ac:	10fffd1e 	bne	r2,r3,400168a4 <__alt_data_end+0xc00168a4>
    else
    {
        result = false;
    }
	return result;
}
400168b0:	00800044 	movi	r2,1
400168b4:	dfc00417 	ldw	ra,16(sp)
400168b8:	dcc00317 	ldw	r19,12(sp)
400168bc:	dc800217 	ldw	r18,8(sp)
400168c0:	dc400117 	ldw	r17,4(sp)
400168c4:	dc000017 	ldw	r16,0(sp)
400168c8:	dec00504 	addi	sp,sp,20
400168cc:	f800283a 	ret
		{
			boot_sector_data.bits_for_cluster_index = 16;
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
400168d0:	00800804 	movi	r2,32
400168d4:	80801085 	stb	r2,66(r16)
400168d8:	003faa06 	br	40016784 <__alt_data_end+0xc0016784>
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
400168dc:	2008913a 	slli	r4,r4,4
400168e0:	009000b4 	movhi	r2,16386
400168e4:	1083f504 	addi	r2,r2,4052
400168e8:	2148b03a 	or	r4,r4,r5
400168ec:	2089883a 	add	r4,r4,r2
400168f0:	20800003 	ldbu	r2,0(r4)
400168f4:	003f9f06 	br	40016774 <__alt_data_end+0xc0016774>

400168f8 <Read_File_Record_At_Offset.part.6>:
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
400168f8:	d0afab17 	ldw	r2,-16724(gp)
400168fc:	10800a17 	ldw	r2,40(r2)
40016900:	2085883a 	add	r2,r4,r2
40016904:	10800023 	ldbuio	r2,0(r2)
40016908:	28800005 	stb	r2,0(r5)
4001690c:	d0afab17 	ldw	r2,-16724(gp)
40016910:	22400044 	addi	r9,r4,1
40016914:	10800a17 	ldw	r2,40(r2)
40016918:	4885883a 	add	r2,r9,r2
4001691c:	10800023 	ldbuio	r2,0(r2)
40016920:	28800045 	stb	r2,1(r5)
40016924:	d0afab17 	ldw	r2,-16724(gp)
40016928:	22000084 	addi	r8,r4,2
4001692c:	10800a17 	ldw	r2,40(r2)
40016930:	4085883a 	add	r2,r8,r2
40016934:	10800023 	ldbuio	r2,0(r2)
40016938:	28800085 	stb	r2,2(r5)
4001693c:	d0afab17 	ldw	r2,-16724(gp)
40016940:	20c000c4 	addi	r3,r4,3
40016944:	10800a17 	ldw	r2,40(r2)
40016948:	1885883a 	add	r2,r3,r2
4001694c:	10800023 	ldbuio	r2,0(r2)
40016950:	288000c5 	stb	r2,3(r5)
40016954:	d0afab17 	ldw	r2,-16724(gp)
40016958:	22800104 	addi	r10,r4,4
4001695c:	10c00a17 	ldw	r3,40(r2)
40016960:	50c7883a 	add	r3,r10,r3
40016964:	18c00023 	ldbuio	r3,0(r3)
40016968:	28c00105 	stb	r3,4(r5)
4001696c:	10c00a17 	ldw	r3,40(r2)
40016970:	22800144 	addi	r10,r4,5
40016974:	50c7883a 	add	r3,r10,r3
40016978:	18c00023 	ldbuio	r3,0(r3)
4001697c:	28c00145 	stb	r3,5(r5)
40016980:	10c00a17 	ldw	r3,40(r2)
40016984:	22800184 	addi	r10,r4,6
40016988:	50c7883a 	add	r3,r10,r3
4001698c:	18c00023 	ldbuio	r3,0(r3)
40016990:	28c00185 	stb	r3,6(r5)
40016994:	10c00a17 	ldw	r3,40(r2)
40016998:	228001c4 	addi	r10,r4,7
4001699c:	50c7883a 	add	r3,r10,r3
400169a0:	18c00023 	ldbuio	r3,0(r3)
400169a4:	28c001c5 	stb	r3,7(r5)
		}        
		for (counter = 0; counter < 3; counter++)
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
400169a8:	10c00a17 	ldw	r3,40(r2)
400169ac:	18c00204 	addi	r3,r3,8
400169b0:	1907883a 	add	r3,r3,r4
400169b4:	18c00023 	ldbuio	r3,0(r3)
400169b8:	28c00205 	stb	r3,8(r5)
400169bc:	10c00a17 	ldw	r3,40(r2)
400169c0:	18c00204 	addi	r3,r3,8
400169c4:	1a53883a 	add	r9,r3,r9
400169c8:	48c00023 	ldbuio	r3,0(r9)
400169cc:	28c00245 	stb	r3,9(r5)
400169d0:	10c00a17 	ldw	r3,40(r2)
400169d4:	18c00204 	addi	r3,r3,8
400169d8:	1a11883a 	add	r8,r3,r8
400169dc:	40c00023 	ldbuio	r3,0(r8)
400169e0:	28c00285 	stb	r3,10(r5)
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
400169e4:	10c00a17 	ldw	r3,40(r2)
400169e8:	18c002c4 	addi	r3,r3,11
400169ec:	1907883a 	add	r3,r3,r4
400169f0:	18c00023 	ldbuio	r3,0(r3)
400169f4:	28c002c5 	stb	r3,11(r5)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
400169f8:	10c00a17 	ldw	r3,40(r2)
400169fc:	18c00384 	addi	r3,r3,14
40016a00:	1907883a 	add	r3,r3,r4
40016a04:	1a00002b 	ldhuio	r8,0(r3)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
40016a08:	10c00a17 	ldw	r3,40(r2)
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
40016a0c:	2a00030d 	sth	r8,12(r5)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
40016a10:	18c00404 	addi	r3,r3,16
40016a14:	1907883a 	add	r3,r3,r4
40016a18:	1a00002b 	ldhuio	r8,0(r3)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
40016a1c:	10c00a17 	ldw	r3,40(r2)
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
40016a20:	2a00038d 	sth	r8,14(r5)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
40016a24:	18c00484 	addi	r3,r3,18
40016a28:	1907883a 	add	r3,r3,r4
40016a2c:	1a00002b 	ldhuio	r8,0(r3)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
40016a30:	10c00a17 	ldw	r3,40(r2)
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
40016a34:	2a00040d 	sth	r8,16(r5)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
40016a38:	18c00584 	addi	r3,r3,22
40016a3c:	1907883a 	add	r3,r3,r4
40016a40:	1a00002b 	ldhuio	r8,0(r3)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
40016a44:	10c00a17 	ldw	r3,40(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
40016a48:	2a00048d 	sth	r8,18(r5)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
40016a4c:	18c00604 	addi	r3,r3,24
40016a50:	1907883a 	add	r3,r3,r4
40016a54:	1a00002b 	ldhuio	r8,0(r3)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
40016a58:	10c00a17 	ldw	r3,40(r2)
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
40016a5c:	2a00050d 	sth	r8,20(r5)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
40016a60:	18c00684 	addi	r3,r3,26
40016a64:	1907883a 	add	r3,r3,r4
40016a68:	18c0002b 	ldhuio	r3,0(r3)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
40016a6c:	10800a17 	ldw	r2,40(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
40016a70:	28c0058d 	sth	r3,22(r5)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
40016a74:	10800704 	addi	r2,r2,28
40016a78:	1105883a 	add	r2,r2,r4
40016a7c:	10c00037 	ldwio	r3,0(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
		record->file_record_offset = offset;
		result = true;
	}
	return result;
}
40016a80:	00800044 	movi	r2,1
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
40016a84:	28c00615 	stw	r3,24(r5)
		record->file_record_cluster = cluster_index;
40016a88:	29800a15 	stw	r6,40(r5)
		record->file_record_sector_in_cluster = sector_in_cluster;
40016a8c:	29c00b15 	stw	r7,44(r5)
		record->file_record_offset = offset;
40016a90:	29000c0d 	sth	r4,48(r5)
		result = true;
	}
	return result;
}
40016a94:	f800283a 	ret

40016a98 <Write_Sector_Data>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40016a98:	d0afab17 	ldw	r2,-16724(gp)
40016a9c:	10000426 	beq	r2,zero,40016ab0 <Write_Sector_Data+0x18>
40016aa0:	d0afb317 	ldw	r2,-16692(gp)
40016aa4:	1080002b 	ldhuio	r2,0(r2)
40016aa8:	1080008c 	andi	r2,r2,2
40016aac:	1000151e 	bne	r2,zero,40016b04 <Write_Sector_Data+0x6c>
    {
        result = true;
    }
	else if (initialized == true)
40016ab0:	d0efb517 	ldw	r3,-16684(gp)
40016ab4:	00800044 	movi	r2,1
40016ab8:	18800226 	beq	r3,r2,40016ac4 <Write_Sector_Data+0x2c>

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
    bool result = false;
40016abc:	0005883a 	mov	r2,zero
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
        }
    }
    return result;
40016ac0:	f800283a 	ret
40016ac4:	00900134 	movhi	r2,16388
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
40016ac8:	00d00134 	movhi	r3,16388
40016acc:	1094d204 	addi	r2,r2,21320
40016ad0:	18d4a904 	addi	r3,r3,21156
40016ad4:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
40016ad8:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
40016adc:	d02fb415 	stw	zero,-16688(gp)
40016ae0:	10ffff04 	addi	r3,r2,-4
40016ae4:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40016ae8:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40016aec:	18000015 	stw	zero,0(r3)
40016af0:	10801004 	addi	r2,r2,64
40016af4:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40016af8:	113ffb1e 	bne	r2,r4,40016ae8 <__alt_data_end+0xc0016ae8>

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
    bool result = false;
40016afc:	0005883a 	mov	r2,zero
            result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
        }
    }
    return result;
40016b00:	f800283a 	ret
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
40016b04:	214b883a 	add	r5,r4,r5
40016b08:	2806927a 	slli	r3,r5,9
40016b0c:	d0afaf17 	ldw	r2,-16708(gp)
40016b10:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
40016b14:	d0afb017 	ldw	r2,-16704(gp)
40016b18:	00c00604 	movi	r3,24
40016b1c:	10c0002d 	sthio	r3,0(r2)
40016b20:	d1afb317 	ldw	r6,-16692(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
40016b24:	3080002b 	ldhuio	r2,0(r6)
40016b28:	10bfffcc 	andi	r2,r2,65535
        } while ((reg_state & 0x04)!=0);
40016b2c:	10c0010c 	andi	r3,r2,4
40016b30:	183ffc1e 	bne	r3,zero,40016b24 <__alt_data_end+0xc0016b24>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
40016b34:	1080040c 	andi	r2,r2,16
40016b38:	103fe01e 	bne	r2,zero,40016abc <__alt_data_end+0xc0016abc>
        {
            result = true;
            current_sector_modified = false;
40016b3c:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
40016b40:	d16fa915 	stw	r5,-16732(gp)
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
        } while ((reg_state & 0x04)!=0);
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
40016b44:	00800044 	movi	r2,1
40016b48:	f800283a 	ret

40016b4c <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
40016b4c:	d0afaa17 	ldw	r2,-16728(gp)
40016b50:	1000021e 	bne	r2,zero,40016b5c <Save_Modified_Sector+0x10>


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
40016b54:	00800044 	movi	r2,1
40016b58:	f800283a 	ret
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40016b5c:	d0afab17 	ldw	r2,-16724(gp)
40016b60:	10000526 	beq	r2,zero,40016b78 <Save_Modified_Sector+0x2c>
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
40016b64:	d16fa917 	ldw	r5,-16732(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40016b68:	d0afb317 	ldw	r2,-16692(gp)
40016b6c:	1080002b 	ldhuio	r2,0(r2)
40016b70:	1080008c 	andi	r2,r2,2
40016b74:	1000151e 	bne	r2,zero,40016bcc <Save_Modified_Sector+0x80>
    {
        result = true;
    }
	else if (initialized == true)
40016b78:	d0efb517 	ldw	r3,-16684(gp)
40016b7c:	00800044 	movi	r2,1
40016b80:	18800226 	beq	r3,r2,40016b8c <Save_Modified_Sector+0x40>

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
    bool result = false;
40016b84:	0005883a 	mov	r2,zero
    bool result = true;
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
    }
    return result;
40016b88:	f800283a 	ret
40016b8c:	00900134 	movhi	r2,16388
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
40016b90:	00d00134 	movhi	r3,16388
40016b94:	1094d204 	addi	r2,r2,21320
40016b98:	18d4a904 	addi	r3,r3,21156
40016b9c:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
40016ba0:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
40016ba4:	d02fb415 	stw	zero,-16688(gp)
40016ba8:	10ffff04 	addi	r3,r2,-4
40016bac:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40016bb0:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40016bb4:	18000015 	stw	zero,0(r3)
40016bb8:	10801004 	addi	r2,r2,64
40016bbc:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40016bc0:	113ffb1e 	bne	r2,r4,40016bb0 <__alt_data_end+0xc0016bb0>

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
    bool result = false;
40016bc4:	0005883a 	mov	r2,zero
    bool result = true;
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
    }
    return result;
40016bc8:	f800283a 	ret
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
40016bcc:	2804927a 	slli	r2,r5,9
40016bd0:	d0efaf17 	ldw	r3,-16708(gp)
40016bd4:	18800035 	stwio	r2,0(r3)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
40016bd8:	d0afb017 	ldw	r2,-16704(gp)
40016bdc:	00c00604 	movi	r3,24
40016be0:	10c0002d 	sthio	r3,0(r2)
40016be4:	d12fb317 	ldw	r4,-16692(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
40016be8:	2080002b 	ldhuio	r2,0(r4)
40016bec:	10bfffcc 	andi	r2,r2,65535
        } while ((reg_state & 0x04)!=0);
40016bf0:	10c0010c 	andi	r3,r2,4
40016bf4:	183ffc1e 	bne	r3,zero,40016be8 <__alt_data_end+0xc0016be8>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
40016bf8:	1080040c 	andi	r2,r2,16
40016bfc:	103fe11e 	bne	r2,zero,40016b84 <__alt_data_end+0xc0016b84>
        {
            result = true;
            current_sector_modified = false;
40016c00:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
40016c04:	d16fa915 	stw	r5,-16732(gp)
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
        } while ((reg_state & 0x04)!=0);
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
        {
            result = true;
40016c08:	00800044 	movi	r2,1
40016c0c:	f800283a 	ret

40016c10 <Read_Sector_Data>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40016c10:	d0afab17 	ldw	r2,-16724(gp)
40016c14:	10000426 	beq	r2,zero,40016c28 <Read_Sector_Data+0x18>
40016c18:	d0efb317 	ldw	r3,-16692(gp)
40016c1c:	1880002b 	ldhuio	r2,0(r3)
40016c20:	1080008c 	andi	r2,r2,2
40016c24:	1000051e 	bne	r2,zero,40016c3c <Read_Sector_Data+0x2c>
    {
        result = true;
    }
	else if (initialized == true)
40016c28:	d0efb517 	ldw	r3,-16684(gp)
40016c2c:	00800044 	movi	r2,1
40016c30:	18802c26 	beq	r3,r2,40016ce4 <Read_Sector_Data+0xd4>


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
	bool result = false;
40016c34:	0005883a 	mov	r2,zero
40016c38:	f800283a 	ret
	if (alt_up_sd_card_is_Present())
	{
		short int reg_state = 0xff;
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
40016c3c:	d0afaa17 	ldw	r2,-16728(gp)
40016c40:	1000121e 	bne	r2,zero,40016c8c <Read_Sector_Data+0x7c>
                return false;
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
40016c44:	214b883a 	add	r5,r4,r5
40016c48:	2806927a 	slli	r3,r5,9
40016c4c:	d0afaf17 	ldw	r2,-16708(gp)
40016c50:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
40016c54:	d0afb017 	ldw	r2,-16704(gp)
40016c58:	00c00444 	movi	r3,17
40016c5c:	10c0002d 	sthio	r3,0(r2)
40016c60:	d1afb317 	ldw	r6,-16692(gp)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
40016c64:	3080002b 	ldhuio	r2,0(r6)
40016c68:	10bfffcc 	andi	r2,r2,65535
		} while ((reg_state & 0x04)!=0);
40016c6c:	10c0010c 	andi	r3,r2,4
40016c70:	183ffc1e 	bne	r3,zero,40016c64 <__alt_data_end+0xc0016c64>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
40016c74:	1080040c 	andi	r2,r2,16
40016c78:	103fee1e 	bne	r2,zero,40016c34 <__alt_data_end+0xc0016c34>
		{
			result = true;
            current_sector_modified = false;
40016c7c:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
40016c80:	d16fa915 	stw	r5,-16732(gp)
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
		} while ((reg_state & 0x04)!=0);
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
		{
			result = true;
40016c84:	00800044 	movi	r2,1
40016c88:	f800283a 	ret
		short int reg_state = 0xff;
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
40016c8c:	d1efa917 	ldw	r7,-16732(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40016c90:	1880002b 	ldhuio	r2,0(r3)
40016c94:	1080008c 	andi	r2,r2,2
40016c98:	1000221e 	bne	r2,zero,40016d24 <Read_Sector_Data+0x114>
    {
        result = true;
    }
	else if (initialized == true)
40016c9c:	d0efb517 	ldw	r3,-16684(gp)
40016ca0:	00800044 	movi	r2,1
40016ca4:	18bfe31e 	bne	r3,r2,40016c34 <__alt_data_end+0xc0016c34>
40016ca8:	00900134 	movhi	r2,16388
	{
		int index;

		initialized = false;
		search_data.valid = false;
40016cac:	00d00134 	movhi	r3,16388
40016cb0:	1094d204 	addi	r2,r2,21320
40016cb4:	18d4a904 	addi	r3,r3,21156
40016cb8:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
40016cbc:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
40016cc0:	d02fb415 	stw	zero,-16688(gp)
40016cc4:	10ffff04 	addi	r3,r2,-4
40016cc8:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40016ccc:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40016cd0:	18000015 	stw	zero,0(r3)
40016cd4:	10801004 	addi	r2,r2,64
40016cd8:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40016cdc:	113ffb1e 	bne	r2,r4,40016ccc <__alt_data_end+0xc0016ccc>
40016ce0:	003fd406 	br	40016c34 <__alt_data_end+0xc0016c34>
40016ce4:	00900134 	movhi	r2,16388
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
40016ce8:	00d00134 	movhi	r3,16388
40016cec:	1094d204 	addi	r2,r2,21320
40016cf0:	18d4a904 	addi	r3,r3,21156
40016cf4:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
40016cf8:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
40016cfc:	d02fb415 	stw	zero,-16688(gp)
40016d00:	10ffff04 	addi	r3,r2,-4
40016d04:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40016d08:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40016d0c:	18000015 	stw	zero,0(r3)
40016d10:	10801004 	addi	r2,r2,64
40016d14:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40016d18:	20bffb1e 	bne	r4,r2,40016d08 <__alt_data_end+0xc0016d08>


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
	bool result = false;
40016d1c:	0005883a 	mov	r2,zero
40016d20:	f800283a 	ret
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
40016d24:	3804927a 	slli	r2,r7,9
40016d28:	d0efaf17 	ldw	r3,-16708(gp)
40016d2c:	18800035 	stwio	r2,0(r3)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
40016d30:	d0afb017 	ldw	r2,-16704(gp)
40016d34:	00c00604 	movi	r3,24
40016d38:	10c0002d 	sthio	r3,0(r2)
40016d3c:	d1afb317 	ldw	r6,-16692(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
40016d40:	3080002b 	ldhuio	r2,0(r6)
40016d44:	10bfffcc 	andi	r2,r2,65535
        } while ((reg_state & 0x04)!=0);
40016d48:	10c0010c 	andi	r3,r2,4
40016d4c:	183ffc1e 	bne	r3,zero,40016d40 <__alt_data_end+0xc0016d40>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
40016d50:	1080040c 	andi	r2,r2,16
40016d54:	103fb71e 	bne	r2,zero,40016c34 <__alt_data_end+0xc0016c34>
        {
            result = true;
            current_sector_modified = false;
40016d58:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
40016d5c:	d1efa915 	stw	r7,-16732(gp)
40016d60:	003fb806 	br	40016c44 <__alt_data_end+0xc0016c44>

40016d64 <get_cluster_flag>:
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
40016d64:	00900134 	movhi	r2,16388
40016d68:	1094ae04 	addi	r2,r2,21176
40016d6c:	d1efad17 	ldw	r7,-16716(gp)
40016d70:	10801117 	ldw	r2,68(r2)
40016d74:	200cd23a 	srli	r6,r4,8
     
    if (sector_index != current_sector_index)
40016d78:	d0efa917 	ldw	r3,-16732(gp)
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
40016d7c:	3885883a 	add	r2,r7,r2
40016d80:	118f883a 	add	r7,r2,r6
     
    if (sector_index != current_sector_index)
40016d84:	38c02e26 	beq	r7,r3,40016e40 <get_cluster_flag+0xdc>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40016d88:	d0afab17 	ldw	r2,-16724(gp)
40016d8c:	10000426 	beq	r2,zero,40016da0 <get_cluster_flag+0x3c>
40016d90:	d1afb317 	ldw	r6,-16692(gp)
40016d94:	3080002b 	ldhuio	r2,0(r6)
40016d98:	1080008c 	andi	r2,r2,2
40016d9c:	1000051e 	bne	r2,zero,40016db4 <get_cluster_flag+0x50>
    {
        result = true;
    }
	else if (initialized == true)
40016da0:	d0efb517 	ldw	r3,-16684(gp)
40016da4:	00800044 	movi	r2,1
40016da8:	18802e26 	beq	r3,r2,40016e64 <get_cluster_flag+0x100>
     
    if (sector_index != current_sector_index)
    {
        if (Read_Sector_Data(sector_index, 0) == false)
        {
            return false;
40016dac:	0005883a 	mov	r2,zero
40016db0:	f800283a 	ret
	if (alt_up_sd_card_is_Present())
	{
		short int reg_state = 0xff;
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
40016db4:	d0afaa17 	ldw	r2,-16728(gp)
40016db8:	10001226 	beq	r2,zero,40016e04 <get_cluster_flag+0xa0>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40016dbc:	3080002b 	ldhuio	r2,0(r6)
40016dc0:	1080008c 	andi	r2,r2,2
40016dc4:	10003726 	beq	r2,zero,40016ea4 <get_cluster_flag+0x140>
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
40016dc8:	1804927a 	slli	r2,r3,9
40016dcc:	d1afaf17 	ldw	r6,-16708(gp)
40016dd0:	30800035 	stwio	r2,0(r6)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
40016dd4:	d0afb017 	ldw	r2,-16704(gp)
40016dd8:	01800604 	movi	r6,24
40016ddc:	1180002d 	sthio	r6,0(r2)
40016de0:	d1afb317 	ldw	r6,-16692(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
40016de4:	3080002b 	ldhuio	r2,0(r6)
40016de8:	10bfffcc 	andi	r2,r2,65535
        } while ((reg_state & 0x04)!=0);
40016dec:	1200010c 	andi	r8,r2,4
40016df0:	403ffc1e 	bne	r8,zero,40016de4 <__alt_data_end+0xc0016de4>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
40016df4:	1080040c 	andi	r2,r2,16
40016df8:	103fec1e 	bne	r2,zero,40016dac <__alt_data_end+0xc0016dac>
        {
            result = true;
            current_sector_modified = false;
40016dfc:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
40016e00:	d0efa915 	stw	r3,-16732(gp)
                return false;
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
40016e04:	3804927a 	slli	r2,r7,9
40016e08:	d0efaf17 	ldw	r3,-16708(gp)
40016e0c:	18800035 	stwio	r2,0(r3)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
40016e10:	d0afb017 	ldw	r2,-16704(gp)
40016e14:	00c00444 	movi	r3,17
40016e18:	10c0002d 	sthio	r3,0(r2)
40016e1c:	d1afb317 	ldw	r6,-16692(gp)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
40016e20:	3080002b 	ldhuio	r2,0(r6)
40016e24:	10bfffcc 	andi	r2,r2,65535
		} while ((reg_state & 0x04)!=0);
40016e28:	10c0010c 	andi	r3,r2,4
40016e2c:	183ffc1e 	bne	r3,zero,40016e20 <__alt_data_end+0xc0016e20>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
40016e30:	1080040c 	andi	r2,r2,16
40016e34:	103fdd1e 	bne	r2,zero,40016dac <__alt_data_end+0xc0016dac>
		{
			result = true;
            current_sector_modified = false;
40016e38:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
40016e3c:	d1efa915 	stw	r7,-16732(gp)
        if (Read_Sector_Data(sector_index, 0) == false)
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
40016e40:	d0afab17 	ldw	r2,-16724(gp)
40016e44:	21003fcc 	andi	r4,r4,255
40016e48:	2109883a 	add	r4,r4,r4
40016e4c:	10800a17 	ldw	r2,40(r2)
40016e50:	2089883a 	add	r4,r4,r2
40016e54:	20c0002b 	ldhuio	r3,0(r4)
    return true;
40016e58:	00800044 	movi	r2,1
        if (Read_Sector_Data(sector_index, 0) == false)
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
40016e5c:	28c0000d 	sth	r3,0(r5)
    return true;
40016e60:	f800283a 	ret
40016e64:	00900134 	movhi	r2,16388
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
40016e68:	00d00134 	movhi	r3,16388
40016e6c:	1094d204 	addi	r2,r2,21320
40016e70:	18d4a904 	addi	r3,r3,21156
40016e74:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
40016e78:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
40016e7c:	d02fb415 	stw	zero,-16688(gp)
40016e80:	10ffff04 	addi	r3,r2,-4
40016e84:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40016e88:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40016e8c:	18000015 	stw	zero,0(r3)
40016e90:	10801004 	addi	r2,r2,64
40016e94:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40016e98:	20bffb1e 	bne	r4,r2,40016e88 <__alt_data_end+0xc0016e88>
     
    if (sector_index != current_sector_index)
    {
        if (Read_Sector_Data(sector_index, 0) == false)
        {
            return false;
40016e9c:	0005883a 	mov	r2,zero
40016ea0:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
40016ea4:	d0efb517 	ldw	r3,-16684(gp)
40016ea8:	00800044 	movi	r2,1
40016eac:	18bfbf1e 	bne	r3,r2,40016dac <__alt_data_end+0xc0016dac>
40016eb0:	00900134 	movhi	r2,16388
	{
		int index;

		initialized = false;
		search_data.valid = false;
40016eb4:	00d00134 	movhi	r3,16388
40016eb8:	1094d204 	addi	r2,r2,21320
40016ebc:	18d4a904 	addi	r3,r3,21156
40016ec0:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
40016ec4:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
40016ec8:	d02fb415 	stw	zero,-16688(gp)
40016ecc:	10ffff04 	addi	r3,r2,-4
40016ed0:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40016ed4:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40016ed8:	18000015 	stw	zero,0(r3)
40016edc:	10801004 	addi	r2,r2,64
40016ee0:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40016ee4:	20bffb1e 	bne	r4,r2,40016ed4 <__alt_data_end+0xc0016ed4>
40016ee8:	003fb006 	br	40016dac <__alt_data_end+0xc0016dac>

40016eec <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
40016eec:	2006d23a 	srli	r3,r4,8
40016ef0:	d0afad17 	ldw	r2,-16716(gp)
40016ef4:	1885883a 	add	r2,r3,r2
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
40016ef8:	00d00134 	movhi	r3,16388
40016efc:	18d4ae04 	addi	r3,r3,21176
bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
    
    if (first_fat)
40016f00:	30003b26 	beq	r6,zero,40016ff0 <mark_cluster+0x104>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
40016f04:	19801117 	ldw	r6,68(r3)
40016f08:	118d883a 	add	r6,r2,r6
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
40016f0c:	d0efa917 	ldw	r3,-16732(gp)
40016f10:	30c02e26 	beq	r6,r3,40016fcc <mark_cluster+0xe0>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40016f14:	d0afab17 	ldw	r2,-16724(gp)
40016f18:	10000426 	beq	r2,zero,40016f2c <mark_cluster+0x40>
40016f1c:	d1efb317 	ldw	r7,-16692(gp)
40016f20:	3880002b 	ldhuio	r2,0(r7)
40016f24:	1080008c 	andi	r2,r2,2
40016f28:	1000051e 	bne	r2,zero,40016f40 <mark_cluster+0x54>
    {
        result = true;
    }
	else if (initialized == true)
40016f2c:	d0efb517 	ldw	r3,-16684(gp)
40016f30:	00800044 	movi	r2,1
40016f34:	18803126 	beq	r3,r2,40016ffc <mark_cluster+0x110>
     
    if (sector_index != current_sector_index)
    {
        if (Read_Sector_Data(sector_index, 0) == false)
        {
            return false;
40016f38:	0005883a 	mov	r2,zero
40016f3c:	f800283a 	ret
	if (alt_up_sd_card_is_Present())
	{
		short int reg_state = 0xff;
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
40016f40:	d0afaa17 	ldw	r2,-16728(gp)
40016f44:	10001226 	beq	r2,zero,40016f90 <mark_cluster+0xa4>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40016f48:	3880002b 	ldhuio	r2,0(r7)
40016f4c:	1080008c 	andi	r2,r2,2
40016f50:	10003a26 	beq	r2,zero,4001703c <mark_cluster+0x150>
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
40016f54:	1804927a 	slli	r2,r3,9
40016f58:	d1efaf17 	ldw	r7,-16708(gp)
40016f5c:	38800035 	stwio	r2,0(r7)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
40016f60:	d0afb017 	ldw	r2,-16704(gp)
40016f64:	01c00604 	movi	r7,24
40016f68:	11c0002d 	sthio	r7,0(r2)
40016f6c:	d1efb317 	ldw	r7,-16692(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
40016f70:	3880002b 	ldhuio	r2,0(r7)
40016f74:	10bfffcc 	andi	r2,r2,65535
        } while ((reg_state & 0x04)!=0);
40016f78:	1200010c 	andi	r8,r2,4
40016f7c:	403ffc1e 	bne	r8,zero,40016f70 <__alt_data_end+0xc0016f70>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
40016f80:	1080040c 	andi	r2,r2,16
40016f84:	103fec1e 	bne	r2,zero,40016f38 <__alt_data_end+0xc0016f38>
        {
            result = true;
            current_sector_modified = false;
40016f88:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
40016f8c:	d0efa915 	stw	r3,-16732(gp)
                return false;
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
40016f90:	3004927a 	slli	r2,r6,9
40016f94:	d0efaf17 	ldw	r3,-16708(gp)
40016f98:	18800035 	stwio	r2,0(r3)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
40016f9c:	d0afb017 	ldw	r2,-16704(gp)
40016fa0:	00c00444 	movi	r3,17
40016fa4:	10c0002d 	sthio	r3,0(r2)
40016fa8:	d1efb317 	ldw	r7,-16692(gp)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
40016fac:	3880002b 	ldhuio	r2,0(r7)
40016fb0:	10bfffcc 	andi	r2,r2,65535
		} while ((reg_state & 0x04)!=0);
40016fb4:	10c0010c 	andi	r3,r2,4
40016fb8:	183ffc1e 	bne	r3,zero,40016fac <__alt_data_end+0xc0016fac>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
40016fbc:	1080040c 	andi	r2,r2,16
40016fc0:	103fdd1e 	bne	r2,zero,40016f38 <__alt_data_end+0xc0016f38>
		{
			result = true;
            current_sector_modified = false;
40016fc4:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
40016fc8:	d1afa915 	stw	r6,-16732(gp)
        if (Read_Sector_Data(sector_index, 0) == false)
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
40016fcc:	d0afab17 	ldw	r2,-16724(gp)
40016fd0:	21003fcc 	andi	r4,r4,255
40016fd4:	2109883a 	add	r4,r4,r4
40016fd8:	10800a17 	ldw	r2,40(r2)
40016fdc:	2089883a 	add	r4,r4,r2
40016fe0:	2140002d 	sthio	r5,0(r4)
    current_sector_modified = true;
40016fe4:	00800044 	movi	r2,1
40016fe8:	d0afaa15 	stw	r2,-16728(gp)
    return true;
40016fec:	f800283a 	ret
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
40016ff0:	19801217 	ldw	r6,72(r3)
40016ff4:	118d883a 	add	r6,r2,r6
40016ff8:	003fc406 	br	40016f0c <__alt_data_end+0xc0016f0c>
40016ffc:	00900134 	movhi	r2,16388
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
40017000:	00d00134 	movhi	r3,16388
40017004:	1094d204 	addi	r2,r2,21320
40017008:	18d4a904 	addi	r3,r3,21156
4001700c:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
40017010:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
40017014:	d02fb415 	stw	zero,-16688(gp)
40017018:	10ffff04 	addi	r3,r2,-4
4001701c:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40017020:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40017024:	18000015 	stw	zero,0(r3)
40017028:	10801004 	addi	r2,r2,64
4001702c:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40017030:	20bffb1e 	bne	r4,r2,40017020 <__alt_data_end+0xc0017020>
     
    if (sector_index != current_sector_index)
    {
        if (Read_Sector_Data(sector_index, 0) == false)
        {
            return false;
40017034:	0005883a 	mov	r2,zero
40017038:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
4001703c:	d0efb517 	ldw	r3,-16684(gp)
40017040:	00800044 	movi	r2,1
40017044:	18bfbc1e 	bne	r3,r2,40016f38 <__alt_data_end+0xc0016f38>
40017048:	00900134 	movhi	r2,16388
	{
		int index;

		initialized = false;
		search_data.valid = false;
4001704c:	00d00134 	movhi	r3,16388
40017050:	1094d204 	addi	r2,r2,21320
40017054:	18d4a904 	addi	r3,r3,21156
40017058:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
4001705c:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
40017060:	d02fb415 	stw	zero,-16688(gp)
40017064:	10ffff04 	addi	r3,r2,-4
40017068:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
4001706c:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40017070:	18000015 	stw	zero,0(r3)
40017074:	10801004 	addi	r2,r2,64
40017078:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
4001707c:	20bffb1e 	bne	r4,r2,4001706c <__alt_data_end+0xc001706c>
40017080:	003fad06 	br	40016f38 <__alt_data_end+0xc0016f38>

40017084 <Check_for_Master_Boot_Record>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40017084:	d0afab17 	ldw	r2,-16724(gp)
40017088:	10000426 	beq	r2,zero,4001709c <Check_for_Master_Boot_Record+0x18>
4001708c:	d0efb317 	ldw	r3,-16692(gp)
40017090:	1880002b 	ldhuio	r2,0(r3)
40017094:	1080008c 	andi	r2,r2,2
40017098:	1000051e 	bne	r2,zero,400170b0 <Check_for_Master_Boot_Record+0x2c>
    {
        result = true;
    }
	else if (initialized == true)
4001709c:	d0efb517 	ldw	r3,-16684(gp)
400170a0:	00800044 	movi	r2,1
400170a4:	18807f26 	beq	r3,r2,400172a4 <Check_for_Master_Boot_Record+0x220>
bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
	bool result = false;
400170a8:	0005883a 	mov	r2,zero
400170ac:	f800283a 	ret
	if (alt_up_sd_card_is_Present())
	{
		short int reg_state = 0xff;
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
400170b0:	d0afaa17 	ldw	r2,-16728(gp)
400170b4:	1000651e 	bne	r2,zero,4001724c <Check_for_Master_Boot_Record+0x1c8>
                return false;
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
400170b8:	d0afaf17 	ldw	r2,-16708(gp)
400170bc:	10000035 	stwio	zero,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
400170c0:	d0afb017 	ldw	r2,-16704(gp)
400170c4:	00c00444 	movi	r3,17
400170c8:	10c0002d 	sthio	r3,0(r2)
400170cc:	d12fb317 	ldw	r4,-16692(gp)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
400170d0:	2080002b 	ldhuio	r2,0(r4)
400170d4:	10bfffcc 	andi	r2,r2,65535
		} while ((reg_state & 0x04)!=0);
400170d8:	10c0010c 	andi	r3,r2,4
400170dc:	183ffc1e 	bne	r3,zero,400170d0 <__alt_data_end+0xc00170d0>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
400170e0:	1080040c 	andi	r2,r2,16
400170e4:	103ff01e 	bne	r2,zero,400170a8 <__alt_data_end+0xc00170a8>
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
400170e8:	d0efab17 	ldw	r3,-16724(gp)
		} while ((reg_state & 0x04)!=0);
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
		{
			result = true;
            current_sector_modified = false;
400170ec:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
400170f0:	d02fa915 	stw	zero,-16732(gp)
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
400170f4:	19000a17 	ldw	r4,40(r3)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
400170f8:	20807faf 	ldhio	r2,510(r4)
400170fc:	016a9554 	movui	r5,43605
40017100:	10bfffcc 	andi	r2,r2,65535
40017104:	117fe81e 	bne	r2,r5,400170a8 <__alt_data_end+0xc00170a8>
			{
				int partition_data_offset = (index * 16) + 0x01be;
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
40017108:	208070a3 	ldbuio	r2,450(r4)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
4001710c:	01400044 	movi	r5,1
40017110:	11003fcc 	andi	r4,r2,255
40017114:	2100201c 	xori	r4,r4,128
40017118:	213fe004 	addi	r4,r4,-128
4001711c:	21408126 	beq	r4,r5,40017324 <Check_for_Master_Boot_Record+0x2a0>
40017120:	017fff44 	movi	r5,-3
40017124:	2884703a 	and	r2,r5,r2
40017128:	10803fcc 	andi	r2,r2,255
4001712c:	1080201c 	xori	r2,r2,128
40017130:	10bfe004 	addi	r2,r2,-128
40017134:	01400104 	movi	r5,4
40017138:	11407a26 	beq	r2,r5,40017324 <Check_for_Master_Boot_Record+0x2a0>
4001713c:	00800384 	movi	r2,14
40017140:	20807826 	beq	r4,r2,40017324 <Check_for_Master_Boot_Record+0x2a0>
			{
				int partition_data_offset = (index * 16) + 0x01be;
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
40017144:	18800a17 	ldw	r2,40(r3)
40017148:	108074a3 	ldbuio	r2,466(r2)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
4001714c:	01400044 	movi	r5,1
40017150:	11003fcc 	andi	r4,r2,255
40017154:	2100201c 	xori	r4,r4,128
40017158:	213fe004 	addi	r4,r4,-128
4001715c:	21407e26 	beq	r4,r5,40017358 <Check_for_Master_Boot_Record+0x2d4>
40017160:	017fff44 	movi	r5,-3
40017164:	2884703a 	and	r2,r5,r2
40017168:	10803fcc 	andi	r2,r2,255
4001716c:	1080201c 	xori	r2,r2,128
40017170:	10bfe004 	addi	r2,r2,-128
40017174:	01400104 	movi	r5,4
40017178:	11407726 	beq	r2,r5,40017358 <Check_for_Master_Boot_Record+0x2d4>
4001717c:	00800384 	movi	r2,14
40017180:	20807526 	beq	r4,r2,40017358 <Check_for_Master_Boot_Record+0x2d4>
			{
				int partition_data_offset = (index * 16) + 0x01be;
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
40017184:	18800a17 	ldw	r2,40(r3)
40017188:	108078a3 	ldbuio	r2,482(r2)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
4001718c:	01400044 	movi	r5,1
40017190:	11003fcc 	andi	r4,r2,255
40017194:	2100201c 	xori	r4,r4,128
40017198:	213fe004 	addi	r4,r4,-128
4001719c:	21407b26 	beq	r4,r5,4001738c <Check_for_Master_Boot_Record+0x308>
400171a0:	017fff44 	movi	r5,-3
400171a4:	2884703a 	and	r2,r5,r2
400171a8:	10803fcc 	andi	r2,r2,255
400171ac:	1080201c 	xori	r2,r2,128
400171b0:	10bfe004 	addi	r2,r2,-128
400171b4:	01400104 	movi	r5,4
400171b8:	11407426 	beq	r2,r5,4001738c <Check_for_Master_Boot_Record+0x308>
400171bc:	00800384 	movi	r2,14
400171c0:	20807226 	beq	r4,r2,4001738c <Check_for_Master_Boot_Record+0x308>
			{
				int partition_data_offset = (index * 16) + 0x01be;
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
400171c4:	18800a17 	ldw	r2,40(r3)
400171c8:	10807ca3 	ldbuio	r2,498(r2)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
400171cc:	01400044 	movi	r5,1
400171d0:	11003fcc 	andi	r4,r2,255
400171d4:	2100201c 	xori	r4,r4,128
400171d8:	213fe004 	addi	r4,r4,-128
400171dc:	21400926 	beq	r4,r5,40017204 <Check_for_Master_Boot_Record+0x180>
400171e0:	017fff44 	movi	r5,-3
400171e4:	2884703a 	and	r2,r5,r2
400171e8:	10803fcc 	andi	r2,r2,255
400171ec:	1080201c 	xori	r2,r2,128
400171f0:	10bfe004 	addi	r2,r2,-128
400171f4:	01400104 	movi	r5,4
400171f8:	11400226 	beq	r2,r5,40017204 <Check_for_Master_Boot_Record+0x180>
400171fc:	00800384 	movi	r2,14
40017200:	20bfa91e 	bne	r4,r2,400170a8 <__alt_data_end+0xc00170a8>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
40017204:	18800a17 	ldw	r2,40(r3)
40017208:	11407e2b 	ldhuio	r5,504(r2)
4001720c:	297fffcc 	andi	r5,r5,65535
40017210:	11007dab 	ldhuio	r4,502(r2)
40017214:	213fffcc 	andi	r4,r4,65535
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
40017218:	10c07f2b 	ldhuio	r3,508(r2)
4001721c:	18ffffcc 	andi	r3,r3,65535
40017220:	10807eab 	ldhuio	r2,506(r2)
40017224:	1806943a 	slli	r3,r3,16
40017228:	10bfffcc 	andi	r2,r2,65535
4001722c:	1884b03a 	or	r2,r3,r2
		            
					// Check if the partition is valid
					if (partition_size > 0)
40017230:	00bf9d0e 	bge	zero,r2,400170a8 <__alt_data_end+0xc00170a8>
					{
						result = true;
						fat_partition_size_in_512_byte_sectors = partition_size;
						fat_partition_offset_in_512_byte_sectors = offset;
40017234:	280a943a 	slli	r5,r5,16
		            
					// Check if the partition is valid
					if (partition_size > 0)
					{
						result = true;
						fat_partition_size_in_512_byte_sectors = partition_size;
40017238:	d0afac15 	stw	r2,-16720(gp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
		            
					// Check if the partition is valid
					if (partition_size > 0)
					{
						result = true;
4001723c:	00800044 	movi	r2,1
						fat_partition_size_in_512_byte_sectors = partition_size;
						fat_partition_offset_in_512_byte_sectors = offset;
40017240:	2908b03a 	or	r4,r5,r4
40017244:	d12fad15 	stw	r4,-16716(gp)
				}
			}
		}
	}

	return result;
40017248:	f800283a 	ret
		short int reg_state = 0xff;
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
4001724c:	d16fa917 	ldw	r5,-16732(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40017250:	1880002b 	ldhuio	r2,0(r3)
40017254:	1080008c 	andi	r2,r2,2
40017258:	1000221e 	bne	r2,zero,400172e4 <Check_for_Master_Boot_Record+0x260>
    {
        result = true;
    }
	else if (initialized == true)
4001725c:	d0efb517 	ldw	r3,-16684(gp)
40017260:	00800044 	movi	r2,1
40017264:	18bf901e 	bne	r3,r2,400170a8 <__alt_data_end+0xc00170a8>
40017268:	00900134 	movhi	r2,16388
	{
		int index;

		initialized = false;
		search_data.valid = false;
4001726c:	00d00134 	movhi	r3,16388
40017270:	1094d204 	addi	r2,r2,21320
40017274:	18d4a904 	addi	r3,r3,21156
40017278:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
4001727c:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
40017280:	d02fb415 	stw	zero,-16688(gp)
40017284:	10ffff04 	addi	r3,r2,-4
40017288:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
4001728c:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40017290:	18000015 	stw	zero,0(r3)
40017294:	10801004 	addi	r2,r2,64
40017298:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
4001729c:	113ffb1e 	bne	r2,r4,4001728c <__alt_data_end+0xc001728c>
400172a0:	003f8106 	br	400170a8 <__alt_data_end+0xc00170a8>
400172a4:	00900134 	movhi	r2,16388
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
400172a8:	00d00134 	movhi	r3,16388
400172ac:	1094d204 	addi	r2,r2,21320
400172b0:	18d4a904 	addi	r3,r3,21156
400172b4:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
400172b8:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
400172bc:	d02fb415 	stw	zero,-16688(gp)
400172c0:	10ffff04 	addi	r3,r2,-4
400172c4:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
400172c8:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
400172cc:	18000015 	stw	zero,0(r3)
400172d0:	10801004 	addi	r2,r2,64
400172d4:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
400172d8:	113ffb1e 	bne	r2,r4,400172c8 <__alt_data_end+0xc00172c8>
bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
	bool result = false;
400172dc:	0005883a 	mov	r2,zero
400172e0:	f800283a 	ret
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
400172e4:	2804927a 	slli	r2,r5,9
400172e8:	d0efaf17 	ldw	r3,-16708(gp)
400172ec:	18800035 	stwio	r2,0(r3)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
400172f0:	d0afb017 	ldw	r2,-16704(gp)
400172f4:	00c00604 	movi	r3,24
400172f8:	10c0002d 	sthio	r3,0(r2)
400172fc:	d12fb317 	ldw	r4,-16692(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
40017300:	2080002b 	ldhuio	r2,0(r4)
40017304:	10bfffcc 	andi	r2,r2,65535
        } while ((reg_state & 0x04)!=0);
40017308:	10c0010c 	andi	r3,r2,4
4001730c:	183ffc1e 	bne	r3,zero,40017300 <__alt_data_end+0xc0017300>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
40017310:	1080040c 	andi	r2,r2,16
40017314:	103f641e 	bne	r2,zero,400170a8 <__alt_data_end+0xc00170a8>
        {
            result = true;
            current_sector_modified = false;
40017318:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
4001731c:	d16fa915 	stw	r5,-16732(gp)
40017320:	003f6506 	br	400170b8 <__alt_data_end+0xc00170b8>

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
40017324:	18800a17 	ldw	r2,40(r3)
40017328:	1140722b 	ldhuio	r5,456(r2)
4001732c:	297fffcc 	andi	r5,r5,65535
40017330:	110071ab 	ldhuio	r4,454(r2)
40017334:	213fffcc 	andi	r4,r4,65535
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
40017338:	1180732b 	ldhuio	r6,460(r2)
4001733c:	31bfffcc 	andi	r6,r6,65535
40017340:	108072ab 	ldhuio	r2,458(r2)
40017344:	300c943a 	slli	r6,r6,16
40017348:	10bfffcc 	andi	r2,r2,65535
4001734c:	3084b03a 	or	r2,r6,r2
		            
					// Check if the partition is valid
					if (partition_size > 0)
40017350:	00bf7c0e 	bge	zero,r2,40017144 <__alt_data_end+0xc0017144>
40017354:	003fb706 	br	40017234 <__alt_data_end+0xc0017234>

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
40017358:	18800a17 	ldw	r2,40(r3)
4001735c:	1140762b 	ldhuio	r5,472(r2)
40017360:	297fffcc 	andi	r5,r5,65535
40017364:	110075ab 	ldhuio	r4,470(r2)
40017368:	213fffcc 	andi	r4,r4,65535
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
4001736c:	1180772b 	ldhuio	r6,476(r2)
40017370:	31bfffcc 	andi	r6,r6,65535
40017374:	108076ab 	ldhuio	r2,474(r2)
40017378:	300c943a 	slli	r6,r6,16
4001737c:	10bfffcc 	andi	r2,r2,65535
40017380:	3084b03a 	or	r2,r6,r2
		            
					// Check if the partition is valid
					if (partition_size > 0)
40017384:	00bf7f0e 	bge	zero,r2,40017184 <__alt_data_end+0xc0017184>
40017388:	003faa06 	br	40017234 <__alt_data_end+0xc0017234>

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
4001738c:	18800a17 	ldw	r2,40(r3)
40017390:	11407a2b 	ldhuio	r5,488(r2)
40017394:	297fffcc 	andi	r5,r5,65535
40017398:	110079ab 	ldhuio	r4,486(r2)
4001739c:	213fffcc 	andi	r4,r4,65535
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
400173a0:	11807b2b 	ldhuio	r6,492(r2)
400173a4:	31bfffcc 	andi	r6,r6,65535
400173a8:	10807aab 	ldhuio	r2,490(r2)
400173ac:	300c943a 	slli	r6,r6,16
400173b0:	10bfffcc 	andi	r2,r2,65535
400173b4:	3084b03a 	or	r2,r6,r2
		            
					// Check if the partition is valid
					if (partition_size > 0)
400173b8:	00bf820e 	bge	zero,r2,400171c4 <__alt_data_end+0xc00171c4>
400173bc:	003f9d06 	br	40017234 <__alt_data_end+0xc0017234>

400173c0 <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
400173c0:	208007cc 	andi	r2,r4,31
400173c4:	10000226 	beq	r2,zero,400173d0 <Read_File_Record_At_Offset+0x10>


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
	bool result = false;
400173c8:	0005883a 	mov	r2,zero
		record->file_record_sector_in_cluster = sector_in_cluster;
		record->file_record_offset = offset;
		result = true;
	}
	return result;
}
400173cc:	f800283a 	ret
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
400173d0:	d0efab17 	ldw	r3,-16724(gp)
400173d4:	18000426 	beq	r3,zero,400173e8 <Read_File_Record_At_Offset+0x28>
400173d8:	d0afb317 	ldw	r2,-16692(gp)
400173dc:	1080002b 	ldhuio	r2,0(r2)
400173e0:	1080008c 	andi	r2,r2,2
400173e4:	1000131e 	bne	r2,zero,40017434 <Read_File_Record_At_Offset+0x74>
    {
        result = true;
    }
	else if (initialized == true)
400173e8:	d0efb517 	ldw	r3,-16684(gp)
400173ec:	00800044 	movi	r2,1
400173f0:	18bff51e 	bne	r3,r2,400173c8 <__alt_data_end+0xc00173c8>
400173f4:	00900134 	movhi	r2,16388
	{
		int index;

		initialized = false;
		search_data.valid = false;
400173f8:	00d00134 	movhi	r3,16388
400173fc:	1094d204 	addi	r2,r2,21320
40017400:	18d4a904 	addi	r3,r3,21156
40017404:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
40017408:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
4001740c:	d02fb415 	stw	zero,-16688(gp)
40017410:	10ffff04 	addi	r3,r2,-4
40017414:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40017418:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
4001741c:	18000015 	stw	zero,0(r3)
40017420:	10801004 	addi	r2,r2,64
40017424:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40017428:	20bffb1e 	bne	r4,r2,40017418 <__alt_data_end+0xc0017418>


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
	bool result = false;
4001742c:	0005883a 	mov	r2,zero
		record->file_record_sector_in_cluster = sector_in_cluster;
		record->file_record_offset = offset;
		result = true;
	}
	return result;
}
40017430:	f800283a 	ret

bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
40017434:	d0afb417 	ldw	r2,-16688(gp)
40017438:	103fe326 	beq	r2,zero,400173c8 <__alt_data_end+0xc00173c8>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
4001743c:	18800a17 	ldw	r2,40(r3)
40017440:	2085883a 	add	r2,r4,r2
40017444:	10800023 	ldbuio	r2,0(r2)
40017448:	28800005 	stb	r2,0(r5)
4001744c:	d0afab17 	ldw	r2,-16724(gp)
40017450:	22400044 	addi	r9,r4,1
40017454:	10800a17 	ldw	r2,40(r2)
40017458:	4885883a 	add	r2,r9,r2
4001745c:	10800023 	ldbuio	r2,0(r2)
40017460:	28800045 	stb	r2,1(r5)
40017464:	d0afab17 	ldw	r2,-16724(gp)
40017468:	22000084 	addi	r8,r4,2
4001746c:	10800a17 	ldw	r2,40(r2)
40017470:	4085883a 	add	r2,r8,r2
40017474:	10800023 	ldbuio	r2,0(r2)
40017478:	28800085 	stb	r2,2(r5)
4001747c:	d0afab17 	ldw	r2,-16724(gp)
40017480:	20c000c4 	addi	r3,r4,3
40017484:	10800a17 	ldw	r2,40(r2)
40017488:	1885883a 	add	r2,r3,r2
4001748c:	10800023 	ldbuio	r2,0(r2)
40017490:	288000c5 	stb	r2,3(r5)
40017494:	d0afab17 	ldw	r2,-16724(gp)
40017498:	22800104 	addi	r10,r4,4
4001749c:	10c00a17 	ldw	r3,40(r2)
400174a0:	50c7883a 	add	r3,r10,r3
400174a4:	18c00023 	ldbuio	r3,0(r3)
400174a8:	28c00105 	stb	r3,4(r5)
400174ac:	10c00a17 	ldw	r3,40(r2)
400174b0:	22800144 	addi	r10,r4,5
400174b4:	50c7883a 	add	r3,r10,r3
400174b8:	18c00023 	ldbuio	r3,0(r3)
400174bc:	28c00145 	stb	r3,5(r5)
400174c0:	10c00a17 	ldw	r3,40(r2)
400174c4:	22800184 	addi	r10,r4,6
400174c8:	50c7883a 	add	r3,r10,r3
400174cc:	18c00023 	ldbuio	r3,0(r3)
400174d0:	28c00185 	stb	r3,6(r5)
400174d4:	10c00a17 	ldw	r3,40(r2)
400174d8:	228001c4 	addi	r10,r4,7
400174dc:	50c7883a 	add	r3,r10,r3
400174e0:	18c00023 	ldbuio	r3,0(r3)
400174e4:	28c001c5 	stb	r3,7(r5)
		}        
		for (counter = 0; counter < 3; counter++)
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
400174e8:	10c00a17 	ldw	r3,40(r2)
400174ec:	18c00204 	addi	r3,r3,8
400174f0:	1907883a 	add	r3,r3,r4
400174f4:	18c00023 	ldbuio	r3,0(r3)
400174f8:	28c00205 	stb	r3,8(r5)
400174fc:	10c00a17 	ldw	r3,40(r2)
40017500:	18c00204 	addi	r3,r3,8
40017504:	1a53883a 	add	r9,r3,r9
40017508:	48c00023 	ldbuio	r3,0(r9)
4001750c:	28c00245 	stb	r3,9(r5)
40017510:	10c00a17 	ldw	r3,40(r2)
40017514:	18c00204 	addi	r3,r3,8
40017518:	1a11883a 	add	r8,r3,r8
4001751c:	40c00023 	ldbuio	r3,0(r8)
40017520:	28c00285 	stb	r3,10(r5)
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
40017524:	10c00a17 	ldw	r3,40(r2)
40017528:	18c002c4 	addi	r3,r3,11
4001752c:	1907883a 	add	r3,r3,r4
40017530:	18c00023 	ldbuio	r3,0(r3)
40017534:	28c002c5 	stb	r3,11(r5)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
40017538:	10c00a17 	ldw	r3,40(r2)
4001753c:	18c00384 	addi	r3,r3,14
40017540:	1907883a 	add	r3,r3,r4
40017544:	1a00002b 	ldhuio	r8,0(r3)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
40017548:	10c00a17 	ldw	r3,40(r2)
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
4001754c:	2a00030d 	sth	r8,12(r5)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
40017550:	18c00404 	addi	r3,r3,16
40017554:	1907883a 	add	r3,r3,r4
40017558:	1a00002b 	ldhuio	r8,0(r3)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
4001755c:	10c00a17 	ldw	r3,40(r2)
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
40017560:	2a00038d 	sth	r8,14(r5)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
40017564:	18c00484 	addi	r3,r3,18
40017568:	1907883a 	add	r3,r3,r4
4001756c:	1a00002b 	ldhuio	r8,0(r3)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
40017570:	10c00a17 	ldw	r3,40(r2)
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
40017574:	2a00040d 	sth	r8,16(r5)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
40017578:	18c00584 	addi	r3,r3,22
4001757c:	1907883a 	add	r3,r3,r4
40017580:	1a00002b 	ldhuio	r8,0(r3)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
40017584:	10c00a17 	ldw	r3,40(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
40017588:	2a00048d 	sth	r8,18(r5)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
4001758c:	18c00604 	addi	r3,r3,24
40017590:	1907883a 	add	r3,r3,r4
40017594:	1a00002b 	ldhuio	r8,0(r3)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
40017598:	10c00a17 	ldw	r3,40(r2)
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
4001759c:	2a00050d 	sth	r8,20(r5)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
400175a0:	18c00684 	addi	r3,r3,26
400175a4:	1907883a 	add	r3,r3,r4
400175a8:	18c0002b 	ldhuio	r3,0(r3)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
400175ac:	10800a17 	ldw	r2,40(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
400175b0:	28c0058d 	sth	r3,22(r5)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
400175b4:	10800704 	addi	r2,r2,28
400175b8:	1105883a 	add	r2,r2,r4
400175bc:	10c00037 	ldwio	r3,0(r2)
		record->file_record_cluster = cluster_index;
		record->file_record_sector_in_cluster = sector_in_cluster;
		record->file_record_offset = offset;
400175c0:	00800044 	movi	r2,1
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
400175c4:	28c00615 	stw	r3,24(r5)
		record->file_record_cluster = cluster_index;
400175c8:	29800a15 	stw	r6,40(r5)
		record->file_record_sector_in_cluster = sector_in_cluster;
400175cc:	29c00b15 	stw	r7,44(r5)
		record->file_record_offset = offset;
400175d0:	29000c0d 	sth	r4,48(r5)
400175d4:	f800283a 	ret

400175d8 <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
400175d8:	208007cc 	andi	r2,r4,31
400175dc:	10000226 	beq	r2,zero,400175e8 <Write_File_Record_At_Offset+0x10>


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
    bool result = false;
400175e0:	0005883a 	mov	r2,zero
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
        current_sector_modified = true;                  
        result = true;
    }
    return result;
}
400175e4:	f800283a 	ret
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
400175e8:	d0efab17 	ldw	r3,-16724(gp)
400175ec:	18000426 	beq	r3,zero,40017600 <Write_File_Record_At_Offset+0x28>
400175f0:	d0afb317 	ldw	r2,-16692(gp)
400175f4:	1080002b 	ldhuio	r2,0(r2)
400175f8:	1080008c 	andi	r2,r2,2
400175fc:	1000131e 	bne	r2,zero,4001764c <Write_File_Record_At_Offset+0x74>
    {
        result = true;
    }
	else if (initialized == true)
40017600:	d0efb517 	ldw	r3,-16684(gp)
40017604:	00800044 	movi	r2,1
40017608:	18bff51e 	bne	r3,r2,400175e0 <__alt_data_end+0xc00175e0>
4001760c:	00900134 	movhi	r2,16388
	{
		int index;

		initialized = false;
		search_data.valid = false;
40017610:	00d00134 	movhi	r3,16388
40017614:	1094d204 	addi	r2,r2,21320
40017618:	18d4a904 	addi	r3,r3,21156
4001761c:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
40017620:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
40017624:	d02fb415 	stw	zero,-16688(gp)
40017628:	10ffff04 	addi	r3,r2,-4
4001762c:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40017630:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40017634:	18000015 	stw	zero,0(r3)
40017638:	10801004 	addi	r2,r2,64
4001763c:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40017640:	113ffb1e 	bne	r2,r4,40017630 <__alt_data_end+0xc0017630>


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
    bool result = false;
40017644:	0005883a 	mov	r2,zero
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
        current_sector_modified = true;                  
        result = true;
    }
    return result;
}
40017648:	f800283a 	ret

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
4001764c:	d0afb417 	ldw	r2,-16688(gp)
40017650:	103fe326 	beq	r2,zero,400175e0 <__alt_data_end+0xc00175e0>
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
40017654:	29c00043 	ldbu	r7,1(r5)
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
40017658:	18800a17 	ldw	r2,40(r3)
4001765c:	29800003 	ldbu	r6,0(r5)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
40017660:	3806923a 	slli	r3,r7,8
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
40017664:	2085883a 	add	r2,r4,r2
40017668:	1986b03a 	or	r3,r3,r6
4001766c:	10c0002d 	sthio	r3,0(r2)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
40017670:	298000c3 	ldbu	r6,3(r5)
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
40017674:	d0afab17 	ldw	r2,-16724(gp)
40017678:	29c00083 	ldbu	r7,2(r5)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
4001767c:	300c923a 	slli	r6,r6,8
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
40017680:	10c00a17 	ldw	r3,40(r2)
40017684:	22000084 	addi	r8,r4,2
40017688:	31ccb03a 	or	r6,r6,r7
4001768c:	40c7883a 	add	r3,r8,r3
40017690:	1980002d 	sthio	r6,0(r3)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
40017694:	29800143 	ldbu	r6,5(r5)
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
40017698:	d0afab17 	ldw	r2,-16724(gp)
4001769c:	29c00103 	ldbu	r7,4(r5)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
400176a0:	300c923a 	slli	r6,r6,8
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
400176a4:	10c00a17 	ldw	r3,40(r2)
400176a8:	31ccb03a 	or	r6,r6,r7
400176ac:	20c7883a 	add	r3,r4,r3
400176b0:	1980012d 	sthio	r6,4(r3)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
400176b4:	298001c3 	ldbu	r6,7(r5)
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
400176b8:	d0afab17 	ldw	r2,-16724(gp)
400176bc:	29c00183 	ldbu	r7,6(r5)
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
        {
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
400176c0:	300c923a 	slli	r6,r6,8
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
400176c4:	10c00a17 	ldw	r3,40(r2)
400176c8:	31ccb03a 	or	r6,r6,r7
400176cc:	20c7883a 	add	r3,r4,r3
400176d0:	198001ad 	sthio	r6,6(r3)
        }        
        for (counter = 0; counter < 3; counter++)
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
400176d4:	d0efab17 	ldw	r3,-16724(gp)
400176d8:	28800203 	ldbu	r2,8(r5)
400176dc:	18c00a17 	ldw	r3,40(r3)
400176e0:	20c7883a 	add	r3,r4,r3
400176e4:	18800225 	stbio	r2,8(r3)
400176e8:	d0efab17 	ldw	r3,-16724(gp)
400176ec:	28800243 	ldbu	r2,9(r5)
400176f0:	18c00a17 	ldw	r3,40(r3)
400176f4:	20c7883a 	add	r3,r4,r3
400176f8:	18800265 	stbio	r2,9(r3)
400176fc:	d0afab17 	ldw	r2,-16724(gp)
40017700:	28c00283 	ldbu	r3,10(r5)
40017704:	10800a17 	ldw	r2,40(r2)
40017708:	4085883a 	add	r2,r8,r2
4001770c:	10c00225 	stbio	r3,8(r2)
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
40017710:	d0afab17 	ldw	r2,-16724(gp)
40017714:	28c002c3 	ldbu	r3,11(r5)
40017718:	10800a17 	ldw	r2,40(r2)
4001771c:	2085883a 	add	r2,r4,r2
40017720:	10c002e5 	stbio	r3,11(r2)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
40017724:	d0afab17 	ldw	r2,-16724(gp)
40017728:	28c0030b 	ldhu	r3,12(r5)
4001772c:	10800a17 	ldw	r2,40(r2)
40017730:	2085883a 	add	r2,r4,r2
40017734:	10c003ad 	sthio	r3,14(r2)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
40017738:	d0afab17 	ldw	r2,-16724(gp)
4001773c:	28c0038b 	ldhu	r3,14(r5)
40017740:	10800a17 	ldw	r2,40(r2)
40017744:	2085883a 	add	r2,r4,r2
40017748:	10c0042d 	sthio	r3,16(r2)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
4001774c:	d0afab17 	ldw	r2,-16724(gp)
40017750:	28c0040b 	ldhu	r3,16(r5)
40017754:	10800a17 	ldw	r2,40(r2)
40017758:	2085883a 	add	r2,r4,r2
4001775c:	10c004ad 	sthio	r3,18(r2)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
40017760:	d0afab17 	ldw	r2,-16724(gp)
40017764:	28c0048b 	ldhu	r3,18(r5)
40017768:	10800a17 	ldw	r2,40(r2)
4001776c:	2085883a 	add	r2,r4,r2
40017770:	10c005ad 	sthio	r3,22(r2)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
40017774:	d0afab17 	ldw	r2,-16724(gp)
40017778:	28c0050b 	ldhu	r3,20(r5)
4001777c:	10800a17 	ldw	r2,40(r2)
40017780:	2085883a 	add	r2,r4,r2
40017784:	10c0062d 	sthio	r3,24(r2)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
40017788:	d0afab17 	ldw	r2,-16724(gp)
4001778c:	28c0058b 	ldhu	r3,22(r5)
40017790:	10800a17 	ldw	r2,40(r2)
40017794:	2085883a 	add	r2,r4,r2
40017798:	10c006ad 	sthio	r3,26(r2)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
4001779c:	d0afab17 	ldw	r2,-16724(gp)
400177a0:	28c00617 	ldw	r3,24(r5)
400177a4:	10800a17 	ldw	r2,40(r2)
400177a8:	2089883a 	add	r4,r4,r2
400177ac:	20c00735 	stwio	r3,28(r4)
        current_sector_modified = true;                  
400177b0:	00800044 	movi	r2,1
400177b4:	d0afaa15 	stw	r2,-16728(gp)
400177b8:	f800283a 	ret

400177bc <Check_for_DOS_FAT>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
400177bc:	d16fab17 	ldw	r5,-16724(gp)
400177c0:	28000426 	beq	r5,zero,400177d4 <Check_for_DOS_FAT+0x18>
400177c4:	d0efb317 	ldw	r3,-16692(gp)
400177c8:	1880002b 	ldhuio	r2,0(r3)
400177cc:	1080008c 	andi	r2,r2,2
400177d0:	1000071e 	bne	r2,zero,400177f0 <Check_for_DOS_FAT+0x34>
    {
        result = true;
    }
	else if (initialized == true)
400177d4:	d0efb517 	ldw	r3,-16684(gp)
400177d8:	00800044 	movi	r2,1
400177dc:	18803226 	beq	r3,r2,400178a8 <Check_for_DOS_FAT+0xec>
	bool result = false;
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
400177e0:	28800a17 	ldw	r2,40(r5)
400177e4:	10807fab 	ldhuio	r2,510(r2)
    else
    {
        result = false;
    }
	return result;
}
400177e8:	0005883a 	mov	r2,zero
400177ec:	f800283a 	ret
	if (alt_up_sd_card_is_Present())
	{
		short int reg_state = 0xff;
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
400177f0:	d0afaa17 	ldw	r2,-16728(gp)
400177f4:	1000161e 	bne	r2,zero,40017850 <Check_for_DOS_FAT+0x94>
                return false;
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
400177f8:	2004927a 	slli	r2,r4,9
400177fc:	d0efaf17 	ldw	r3,-16708(gp)
40017800:	18800035 	stwio	r2,0(r3)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
40017804:	d0afb017 	ldw	r2,-16704(gp)
40017808:	00c00444 	movi	r3,17
4001780c:	10c0002d 	sthio	r3,0(r2)
40017810:	d16fb317 	ldw	r5,-16692(gp)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
40017814:	2880002b 	ldhuio	r2,0(r5)
40017818:	10bfffcc 	andi	r2,r2,65535
		} while ((reg_state & 0x04)!=0);
4001781c:	10c0010c 	andi	r3,r2,4
40017820:	183ffc1e 	bne	r3,zero,40017814 <__alt_data_end+0xc0017814>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
40017824:	1080040c 	andi	r2,r2,16
40017828:	10002e1e 	bne	r2,zero,400178e4 <Check_for_DOS_FAT+0x128>
	bool result = false;
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
4001782c:	d0afab17 	ldw	r2,-16724(gp)
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
		{
			result = true;
            current_sector_modified = false;
            current_sector_index = sector_index+partition_offset;
40017830:	d12fa915 	stw	r4,-16732(gp)
		} while ((reg_state & 0x04)!=0);
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
		{
			result = true;
            current_sector_modified = false;
40017834:	d02faa15 	stw	zero,-16728(gp)
	bool result = false;
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
40017838:	10800a17 	ldw	r2,40(r2)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
4001783c:	10807faf 	ldhio	r2,510(r2)
40017840:	00ea9554 	movui	r3,43605
40017844:	10bfffcc 	andi	r2,r2,65535
40017848:	10ffe71e 	bne	r2,r3,400177e8 <__alt_data_end+0xc00177e8>
    else
    {
        result = false;
    }
	return result;
}
4001784c:	00165841 	jmpi	40016584 <Check_for_DOS_FAT.part.5>
		short int reg_state = 0xff;
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
40017850:	d1afa917 	ldw	r6,-16732(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40017854:	1880002b 	ldhuio	r2,0(r3)
40017858:	1080008c 	andi	r2,r2,2
4001785c:	1000231e 	bne	r2,zero,400178ec <Check_for_DOS_FAT+0x130>
    {
        result = true;
    }
	else if (initialized == true)
40017860:	d0efb517 	ldw	r3,-16684(gp)
40017864:	00800044 	movi	r2,1
40017868:	18bfdd1e 	bne	r3,r2,400177e0 <__alt_data_end+0xc00177e0>
4001786c:	00900134 	movhi	r2,16388
	{
		int index;

		initialized = false;
		search_data.valid = false;
40017870:	00d00134 	movhi	r3,16388
40017874:	1094d204 	addi	r2,r2,21320
40017878:	18d4a904 	addi	r3,r3,21156
4001787c:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
40017880:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
40017884:	d02fb415 	stw	zero,-16688(gp)
40017888:	10ffff04 	addi	r3,r2,-4
4001788c:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40017890:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40017894:	18000015 	stw	zero,0(r3)
40017898:	10801004 	addi	r2,r2,64
4001789c:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
400178a0:	20bffb1e 	bne	r4,r2,40017890 <__alt_data_end+0xc0017890>
400178a4:	003fce06 	br	400177e0 <__alt_data_end+0xc00177e0>
400178a8:	00900134 	movhi	r2,16388
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
400178ac:	00d00134 	movhi	r3,16388
400178b0:	1094d204 	addi	r2,r2,21320
400178b4:	18d4a904 	addi	r3,r3,21156
400178b8:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
400178bc:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
400178c0:	d02fb415 	stw	zero,-16688(gp)
400178c4:	10ffff04 	addi	r3,r2,-4
400178c8:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
400178cc:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
400178d0:	18000015 	stw	zero,0(r3)
400178d4:	10801004 	addi	r2,r2,64
400178d8:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
400178dc:	20bffb1e 	bne	r4,r2,400178cc <__alt_data_end+0xc00178cc>
400178e0:	003fbf06 	br	400177e0 <__alt_data_end+0xc00177e0>
400178e4:	d16fab17 	ldw	r5,-16724(gp)
400178e8:	003fbd06 	br	400177e0 <__alt_data_end+0xc00177e0>
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
400178ec:	3004927a 	slli	r2,r6,9
400178f0:	d0efaf17 	ldw	r3,-16708(gp)
400178f4:	18800035 	stwio	r2,0(r3)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
400178f8:	d0afb017 	ldw	r2,-16704(gp)
400178fc:	00c00604 	movi	r3,24
40017900:	10c0002d 	sthio	r3,0(r2)
40017904:	d16fb317 	ldw	r5,-16692(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
40017908:	2880002b 	ldhuio	r2,0(r5)
4001790c:	10bfffcc 	andi	r2,r2,65535
        } while ((reg_state & 0x04)!=0);
40017910:	10c0010c 	andi	r3,r2,4
40017914:	183ffc1e 	bne	r3,zero,40017908 <__alt_data_end+0xc0017908>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
40017918:	1080040c 	andi	r2,r2,16
4001791c:	103ff11e 	bne	r2,zero,400178e4 <__alt_data_end+0xc00178e4>
        {
            result = true;
            current_sector_modified = false;
40017920:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
40017924:	d1afa915 	stw	r6,-16732(gp)
40017928:	003fb306 	br	400177f8 <__alt_data_end+0xc00177f8>

4001792c <Look_for_FAT16>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
4001792c:	d0afab17 	ldw	r2,-16724(gp)
}


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
40017930:	deffff04 	addi	sp,sp,-4
40017934:	dfc00015 	stw	ra,0(sp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40017938:	10000426 	beq	r2,zero,4001794c <Look_for_FAT16+0x20>
4001793c:	d0afb317 	ldw	r2,-16692(gp)
40017940:	1080002b 	ldhuio	r2,0(r2)
40017944:	1080008c 	andi	r2,r2,2
40017948:	1000071e 	bne	r2,zero,40017968 <Look_for_FAT16+0x3c>
    {
        result = true;
    }
	else if (initialized == true)
4001794c:	d0efb517 	ldw	r3,-16684(gp)
40017950:	00800044 	movi	r2,1
40017954:	18801626 	beq	r3,r2,400179b0 <Look_for_FAT16+0x84>


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
	bool result = false;
40017958:	0005883a 	mov	r2,zero
				}
			}
		}
	}
	return result;
}
4001795c:	dfc00017 	ldw	ra,0(sp)
40017960:	dec00104 	addi	sp,sp,4
40017964:	f800283a 	ret
{
	bool result = false;

	if (alt_up_sd_card_is_Present())
	{
		short int csd_file_format = *CSD_register_w0;
40017968:	d0afb117 	ldw	r2,-16700(gp)
4001796c:	1080000b 	ldhu	r2,0(r2)
        
		fat_partition_offset_in_512_byte_sectors = 0;
40017970:	d02fad15 	stw	zero,-16716(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
40017974:	d02fac15 	stw	zero,-16720(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
40017978:	10ffffcc 	andi	r3,r2,65535
4001797c:	18e0001c 	xori	r3,r3,32768
40017980:	18e00004 	addi	r3,r3,-32768
40017984:	183ff416 	blt	r3,zero,40017958 <__alt_data_end+0xc0017958>
40017988:	1083000c 	andi	r2,r2,3072
4001798c:	00c30004 	movi	r3,3072
40017990:	10fff126 	beq	r2,r3,40017958 <__alt_data_end+0xc0017958>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
40017994:	00c10004 	movi	r3,1024
40017998:	10c01426 	beq	r2,r3,400179ec <Look_for_FAT16+0xc0>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
4001799c:	103fee1e 	bne	r2,zero,40017958 <__alt_data_end+0xc0017958>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
400179a0:	00170840 	call	40017084 <Check_for_Master_Boot_Record>
400179a4:	103fec26 	beq	r2,zero,40017958 <__alt_data_end+0xc0017958>
{
	bool result = false;
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
400179a8:	d16fad17 	ldw	r5,-16716(gp)
400179ac:	00001006 	br	400179f0 <Look_for_FAT16+0xc4>
400179b0:	00900134 	movhi	r2,16388
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
400179b4:	00d00134 	movhi	r3,16388
400179b8:	1094d204 	addi	r2,r2,21320
400179bc:	18d4a904 	addi	r3,r3,21156
400179c0:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
400179c4:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
400179c8:	d02fb415 	stw	zero,-16688(gp)
400179cc:	10ffff04 	addi	r3,r2,-4
400179d0:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
400179d4:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
400179d8:	18000015 	stw	zero,0(r3)
400179dc:	10801004 	addi	r2,r2,64
400179e0:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
400179e4:	113ffb1e 	bne	r2,r4,400179d4 <__alt_data_end+0xc00179d4>
400179e8:	003fdb06 	br	40017958 <__alt_data_end+0xc0017958>
{
	bool result = false;
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
400179ec:	000b883a 	mov	r5,zero
400179f0:	0009883a 	mov	r4,zero
400179f4:	0016c100 	call	40016c10 <Read_Sector_Data>
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
400179f8:	d0efab17 	ldw	r3,-16724(gp)
400179fc:	18c00a17 	ldw	r3,40(r3)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
40017a00:	18c07faf 	ldhio	r3,510(r3)
40017a04:	012a9554 	movui	r4,43605
40017a08:	18ffffcc 	andi	r3,r3,65535
40017a0c:	193fd21e 	bne	r3,r4,40017958 <__alt_data_end+0xc0017958>
40017a10:	103fd126 	beq	r2,zero,40017958 <__alt_data_end+0xc0017958>
40017a14:	00165840 	call	40016584 <Check_for_DOS_FAT.part.5>
				if (Check_for_Master_Boot_Record())
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
				}                        
			}
			if (result == true)
40017a18:	00c00044 	movi	r3,1
40017a1c:	10ffcf1e 	bne	r2,r3,4001795c <__alt_data_end+0xc001795c>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
40017a20:	00d00134 	movhi	r3,16388
40017a24:	18d4ae04 	addi	r3,r3,21176
40017a28:	19401083 	ldbu	r5,66(r3)
40017a2c:	01000404 	movi	r4,16
40017a30:	293fc91e 	bne	r5,r4,40017958 <__alt_data_end+0xc0017958>
				{
					result = false;
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
40017a34:	18c0058b 	ldhu	r3,22(r3)
40017a38:	d0efac15 	stw	r3,-16720(gp)
40017a3c:	003fc706 	br	4001795c <__alt_data_end+0xc001795c>

40017a40 <filename_to_upper_case>:
}
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
40017a40:	defffe04 	addi	sp,sp,-8
40017a44:	dc000015 	stw	r16,0(sp)
40017a48:	dfc00115 	stw	ra,4(sp)
40017a4c:	2021883a 	mov	r16,r4
    int index;
    int length = strlen(file_name);
40017a50:	000c9ec0 	call	4000c9ec <strlen>
    
    for (index = 0; index < length; index++)
40017a54:	00800b0e 	bge	zero,r2,40017a84 <filename_to_upper_case+0x44>
40017a58:	8009883a 	mov	r4,r16
40017a5c:	8085883a 	add	r2,r16,r2
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
40017a60:	01800644 	movi	r6,25
40017a64:	20c00003 	ldbu	r3,0(r4)
40017a68:	197fe7c4 	addi	r5,r3,-97
40017a6c:	29403fcc 	andi	r5,r5,255
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
40017a70:	18fff804 	addi	r3,r3,-32
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
40017a74:	31400136 	bltu	r6,r5,40017a7c <filename_to_upper_case+0x3c>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
40017a78:	20c00005 	stb	r3,0(r4)
40017a7c:	21000044 	addi	r4,r4,1
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
40017a80:	113ff81e 	bne	r2,r4,40017a64 <__alt_data_end+0xc0017a64>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
40017a84:	dfc00117 	ldw	ra,4(sp)
40017a88:	dc000017 	ldw	r16,0(sp)
40017a8c:	dec00204 	addi	sp,sp,8
40017a90:	f800283a 	ret

40017a94 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
40017a94:	defffe04 	addi	sp,sp,-8
40017a98:	dc000015 	stw	r16,0(sp)
40017a9c:	dfc00115 	stw	ra,4(sp)
40017aa0:	2021883a 	mov	r16,r4
    int length = strlen(file_name);
40017aa4:	000c9ec0 	call	4000c9ec <strlen>
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
40017aa8:	0080210e 	bge	zero,r2,40017b30 <check_file_name_for_FAT16_compliance+0x9c>
    {
        if ((file_name[index] == ' ') ||
40017aac:	81000007 	ldb	r4,0(r16)
40017ab0:	02400804 	movi	r9,32
40017ab4:	22402b26 	beq	r4,r9,40017b64 <check_file_name_for_FAT16_compliance+0xd0>
40017ab8:	01bfffc4 	movi	r6,-1
40017abc:	81400044 	addi	r5,r16,1
40017ac0:	3011883a 	mov	r8,r6
40017ac4:	0007883a 	mov	r3,zero
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
40017ac8:	02801704 	movi	r10,92
40017acc:	03000bc4 	movi	r12,47
40017ad0:	02c00244 	movi	r11,9
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
        {
            last_period = index;
            last_dir_break_position = index;
        }
        if (file_name[index] == '.')
40017ad4:	03800b84 	movi	r14,46
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
40017ad8:	034000c4 	movi	r13,3
40017adc:	00000906 	br	40017b04 <check_file_name_for_FAT16_compliance+0x70>
40017ae0:	22800126 	beq	r4,r10,40017ae8 <check_file_name_for_FAT16_compliance+0x54>
             (file_name[index] != '\\') && (file_name[index] != '/'))
40017ae4:	23001f1e 	bne	r4,r12,40017b64 <check_file_name_for_FAT16_compliance+0xd0>
40017ae8:	1811883a 	mov	r8,r3
40017aec:	180d883a 	mov	r6,r3
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
40017af0:	18c00044 	addi	r3,r3,1
40017af4:	10c00e26 	beq	r2,r3,40017b30 <check_file_name_for_FAT16_compliance+0x9c>
40017af8:	29400044 	addi	r5,r5,1
    {
        if ((file_name[index] == ' ') ||
40017afc:	293fffc7 	ldb	r4,-1(r5)
40017b00:	22401826 	beq	r4,r9,40017b64 <check_file_name_for_FAT16_compliance+0xd0>
40017b04:	19ffffc4 	addi	r7,r3,-1
40017b08:	3a001426 	beq	r7,r8,40017b5c <check_file_name_for_FAT16_compliance+0xc8>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
40017b0c:	198fc83a 	sub	r7,r3,r6
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
40017b10:	3ac01c26 	beq	r7,r11,40017b84 <check_file_name_for_FAT16_compliance+0xf0>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
40017b14:	32000126 	beq	r6,r8,40017b1c <check_file_name_for_FAT16_compliance+0x88>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
40017b18:	69fff116 	blt	r13,r7,40017ae0 <__alt_data_end+0xc0017ae0>
           )
        {
            result = false;
            break;
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
40017b1c:	22bff226 	beq	r4,r10,40017ae8 <__alt_data_end+0xc0017ae8>
40017b20:	233ff126 	beq	r4,r12,40017ae8 <__alt_data_end+0xc0017ae8>
        {
            last_period = index;
            last_dir_break_position = index;
        }
        if (file_name[index] == '.')
40017b24:	23bff126 	beq	r4,r14,40017aec <__alt_data_end+0xc0017aec>
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
40017b28:	18c00044 	addi	r3,r3,1
40017b2c:	10fff21e 	bne	r2,r3,40017af8 <__alt_data_end+0xc0017af8>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
40017b30:	8087883a 	add	r3,r16,r2
40017b34:	18ffffc7 	ldb	r3,-1(r3)
40017b38:	00801704 	movi	r2,92
{
    int length = strlen(file_name);
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
40017b3c:	01000044 	movi	r4,1
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
40017b40:	18800d1e 	bne	r3,r2,40017b78 <check_file_name_for_FAT16_compliance+0xe4>
    {
        result = false;
40017b44:	0009883a 	mov	r4,zero
    }
    return result;
}
40017b48:	2005883a 	mov	r2,r4
40017b4c:	dfc00117 	ldw	ra,4(sp)
40017b50:	dc000017 	ldw	r16,0(sp)
40017b54:	dec00204 	addi	sp,sp,8
40017b58:	f800283a 	ret
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
40017b5c:	22800126 	beq	r4,r10,40017b64 <check_file_name_for_FAT16_compliance+0xd0>
40017b60:	233fea1e 	bne	r4,r12,40017b0c <__alt_data_end+0xc0017b0c>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
40017b64:	8087883a 	add	r3,r16,r2
40017b68:	18ffffc7 	ldb	r3,-1(r3)
40017b6c:	00801704 	movi	r2,92
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
             (file_name[index] != '\\') && (file_name[index] != '/'))
           )
        {
            result = false;
40017b70:	0009883a 	mov	r4,zero
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
40017b74:	18bff326 	beq	r3,r2,40017b44 <__alt_data_end+0xc0017b44>
40017b78:	00800bc4 	movi	r2,47
40017b7c:	18bff21e 	bne	r3,r2,40017b48 <__alt_data_end+0xc0017b48>
40017b80:	003ff006 	br	40017b44 <__alt_data_end+0xc0017b44>
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
40017b84:	23bff71e 	bne	r4,r14,40017b64 <__alt_data_end+0xc0017b64>
40017b88:	323fd826 	beq	r6,r8,40017aec <__alt_data_end+0xc0017aec>
40017b8c:	003ff506 	br	40017b64 <__alt_data_end+0xc0017b64>

40017b90 <get_dir_divider_location>:
}


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
40017b90:	defffe04 	addi	sp,sp,-8
40017b94:	dc000015 	stw	r16,0(sp)
40017b98:	dfc00115 	stw	ra,4(sp)
40017b9c:	2021883a 	mov	r16,r4
    int index = 0;
    int length = strlen(name);
40017ba0:	000c9ec0 	call	4000c9ec <strlen>
40017ba4:	100f883a 	mov	r7,r2
    
    for(index = 0; index < length; index++)
40017ba8:	0080150e 	bge	zero,r2,40017c00 <get_dir_divider_location+0x70>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
40017bac:	80800007 	ldb	r2,0(r16)
40017bb0:	01401704 	movi	r5,92
40017bb4:	11401026 	beq	r2,r5,40017bf8 <get_dir_divider_location+0x68>
40017bb8:	01800bc4 	movi	r6,47
40017bbc:	11800e26 	beq	r2,r6,40017bf8 <get_dir_divider_location+0x68>
40017bc0:	81000044 	addi	r4,r16,1
40017bc4:	0005883a 	mov	r2,zero
40017bc8:	00000406 	br	40017bdc <get_dir_divider_location+0x4c>
40017bcc:	20c00007 	ldb	r3,0(r4)
40017bd0:	21000044 	addi	r4,r4,1
40017bd4:	19400426 	beq	r3,r5,40017be8 <get_dir_divider_location+0x58>
40017bd8:	19800326 	beq	r3,r6,40017be8 <get_dir_divider_location+0x58>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
40017bdc:	10800044 	addi	r2,r2,1
40017be0:	38bffa1e 	bne	r7,r2,40017bcc <__alt_data_end+0xc0017bcc>
        }
    }
    
    if (index == length)
    {
        index = -1;
40017be4:	00bfffc4 	movi	r2,-1
    }
    
    return index;
}
40017be8:	dfc00117 	ldw	ra,4(sp)
40017bec:	dc000017 	ldw	r16,0(sp)
40017bf0:	dec00204 	addi	sp,sp,8
40017bf4:	f800283a 	ret
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
40017bf8:	0005883a 	mov	r2,zero
40017bfc:	003ffa06 	br	40017be8 <__alt_data_end+0xc0017be8>
40017c00:	1005003a 	cmpeq	r2,r2,zero
40017c04:	0085c83a 	sub	r2,zero,r2
40017c08:	003ff706 	br	40017be8 <__alt_data_end+0xc0017be8>

40017c0c <match_file_record_to_name_ext>:
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40017c0c:	20800003 	ldbu	r2,0(r4)
40017c10:	01c00644 	movi	r7,25
40017c14:	10ffe7c4 	addi	r3,r2,-97
40017c18:	18c03fcc 	andi	r3,r3,255
40017c1c:	38c0b62e 	bgeu	r7,r3,40017ef8 <match_file_record_to_name_ext+0x2ec>
40017c20:	10c03fcc 	andi	r3,r2,255
40017c24:	18c0201c 	xori	r3,r3,128
40017c28:	18ffe004 	addi	r3,r3,-128
40017c2c:	28800003 	ldbu	r2,0(r5)
40017c30:	02000644 	movi	r8,25
40017c34:	11ffe7c4 	addi	r7,r2,-97
40017c38:	39c03fcc 	andi	r7,r7,255
40017c3c:	41c0ab2e 	bgeu	r8,r7,40017eec <match_file_record_to_name_ext+0x2e0>
40017c40:	10803fcc 	andi	r2,r2,255
40017c44:	1080201c 	xori	r2,r2,128
40017c48:	10bfe004 	addi	r2,r2,-128
40017c4c:	1880ed1e 	bne	r3,r2,40018004 <match_file_record_to_name_ext+0x3f8>
40017c50:	20800043 	ldbu	r2,1(r4)
40017c54:	01c00644 	movi	r7,25
40017c58:	10ffe7c4 	addi	r3,r2,-97
40017c5c:	18c03fcc 	andi	r3,r3,255
40017c60:	38c0a82e 	bgeu	r7,r3,40017f04 <match_file_record_to_name_ext+0x2f8>
40017c64:	10c03fcc 	andi	r3,r2,255
40017c68:	18c0201c 	xori	r3,r3,128
40017c6c:	18ffe004 	addi	r3,r3,-128
40017c70:	28800043 	ldbu	r2,1(r5)
40017c74:	02000644 	movi	r8,25
40017c78:	11ffe7c4 	addi	r7,r2,-97
40017c7c:	39c03fcc 	andi	r7,r7,255
40017c80:	41c0af2e 	bgeu	r8,r7,40017f40 <match_file_record_to_name_ext+0x334>
40017c84:	10803fcc 	andi	r2,r2,255
40017c88:	1080201c 	xori	r2,r2,128
40017c8c:	10bfe004 	addi	r2,r2,-128
40017c90:	1880dc1e 	bne	r3,r2,40018004 <match_file_record_to_name_ext+0x3f8>
40017c94:	20800083 	ldbu	r2,2(r4)
40017c98:	01c00644 	movi	r7,25
40017c9c:	10ffe7c4 	addi	r3,r2,-97
40017ca0:	18c03fcc 	andi	r3,r3,255
40017ca4:	38c0ac2e 	bgeu	r7,r3,40017f58 <match_file_record_to_name_ext+0x34c>
40017ca8:	10c03fcc 	andi	r3,r2,255
40017cac:	18c0201c 	xori	r3,r3,128
40017cb0:	18ffe004 	addi	r3,r3,-128
40017cb4:	28800083 	ldbu	r2,2(r5)
40017cb8:	02000644 	movi	r8,25
40017cbc:	11ffe7c4 	addi	r7,r2,-97
40017cc0:	39c03fcc 	andi	r7,r7,255
40017cc4:	41c0a12e 	bgeu	r8,r7,40017f4c <match_file_record_to_name_ext+0x340>
40017cc8:	10803fcc 	andi	r2,r2,255
40017ccc:	1080201c 	xori	r2,r2,128
40017cd0:	10bfe004 	addi	r2,r2,-128
40017cd4:	1880cb1e 	bne	r3,r2,40018004 <match_file_record_to_name_ext+0x3f8>
40017cd8:	208000c3 	ldbu	r2,3(r4)
40017cdc:	01c00644 	movi	r7,25
40017ce0:	10ffe7c4 	addi	r3,r2,-97
40017ce4:	18c03fcc 	andi	r3,r3,255
40017ce8:	38c0a92e 	bgeu	r7,r3,40017f90 <match_file_record_to_name_ext+0x384>
40017cec:	10c03fcc 	andi	r3,r2,255
40017cf0:	18c0201c 	xori	r3,r3,128
40017cf4:	18ffe004 	addi	r3,r3,-128
40017cf8:	288000c3 	ldbu	r2,3(r5)
40017cfc:	02000644 	movi	r8,25
40017d00:	11ffe7c4 	addi	r7,r2,-97
40017d04:	39c03fcc 	andi	r7,r7,255
40017d08:	41c09e2e 	bgeu	r8,r7,40017f84 <match_file_record_to_name_ext+0x378>
40017d0c:	10803fcc 	andi	r2,r2,255
40017d10:	1080201c 	xori	r2,r2,128
40017d14:	10bfe004 	addi	r2,r2,-128
40017d18:	1880ba1e 	bne	r3,r2,40018004 <match_file_record_to_name_ext+0x3f8>
40017d1c:	20800103 	ldbu	r2,4(r4)
40017d20:	01c00644 	movi	r7,25
40017d24:	10ffe7c4 	addi	r3,r2,-97
40017d28:	18c03fcc 	andi	r3,r3,255
40017d2c:	38c09e2e 	bgeu	r7,r3,40017fa8 <match_file_record_to_name_ext+0x39c>
40017d30:	10c03fcc 	andi	r3,r2,255
40017d34:	18c0201c 	xori	r3,r3,128
40017d38:	18ffe004 	addi	r3,r3,-128
40017d3c:	28800103 	ldbu	r2,4(r5)
40017d40:	02000644 	movi	r8,25
40017d44:	11ffe7c4 	addi	r7,r2,-97
40017d48:	39c03fcc 	andi	r7,r7,255
40017d4c:	41c0932e 	bgeu	r8,r7,40017f9c <match_file_record_to_name_ext+0x390>
40017d50:	10803fcc 	andi	r2,r2,255
40017d54:	1080201c 	xori	r2,r2,128
40017d58:	10bfe004 	addi	r2,r2,-128
40017d5c:	1880a91e 	bne	r3,r2,40018004 <match_file_record_to_name_ext+0x3f8>
40017d60:	20800143 	ldbu	r2,5(r4)
40017d64:	01c00644 	movi	r7,25
40017d68:	10ffe7c4 	addi	r3,r2,-97
40017d6c:	18c03fcc 	andi	r3,r3,255
40017d70:	38c0932e 	bgeu	r7,r3,40017fc0 <match_file_record_to_name_ext+0x3b4>
40017d74:	10c03fcc 	andi	r3,r2,255
40017d78:	18c0201c 	xori	r3,r3,128
40017d7c:	18ffe004 	addi	r3,r3,-128
40017d80:	28800143 	ldbu	r2,5(r5)
40017d84:	02000644 	movi	r8,25
40017d88:	11ffe7c4 	addi	r7,r2,-97
40017d8c:	39c03fcc 	andi	r7,r7,255
40017d90:	41c0882e 	bgeu	r8,r7,40017fb4 <match_file_record_to_name_ext+0x3a8>
40017d94:	10803fcc 	andi	r2,r2,255
40017d98:	1080201c 	xori	r2,r2,128
40017d9c:	10bfe004 	addi	r2,r2,-128
40017da0:	1880981e 	bne	r3,r2,40018004 <match_file_record_to_name_ext+0x3f8>
40017da4:	20800183 	ldbu	r2,6(r4)
40017da8:	01c00644 	movi	r7,25
40017dac:	10ffe7c4 	addi	r3,r2,-97
40017db0:	18c03fcc 	andi	r3,r3,255
40017db4:	38c0882e 	bgeu	r7,r3,40017fd8 <match_file_record_to_name_ext+0x3cc>
40017db8:	10c03fcc 	andi	r3,r2,255
40017dbc:	18c0201c 	xori	r3,r3,128
40017dc0:	18ffe004 	addi	r3,r3,-128
40017dc4:	28800183 	ldbu	r2,6(r5)
40017dc8:	02000644 	movi	r8,25
40017dcc:	11ffe7c4 	addi	r7,r2,-97
40017dd0:	39c03fcc 	andi	r7,r7,255
40017dd4:	41c07d2e 	bgeu	r8,r7,40017fcc <match_file_record_to_name_ext+0x3c0>
40017dd8:	10803fcc 	andi	r2,r2,255
40017ddc:	1080201c 	xori	r2,r2,128
40017de0:	10bfe004 	addi	r2,r2,-128
40017de4:	1880871e 	bne	r3,r2,40018004 <match_file_record_to_name_ext+0x3f8>
40017de8:	208001c3 	ldbu	r2,7(r4)
40017dec:	01c00644 	movi	r7,25
40017df0:	10ffe7c4 	addi	r3,r2,-97
40017df4:	18c03fcc 	andi	r3,r3,255
40017df8:	38c07e36 	bltu	r7,r3,40017ff4 <match_file_record_to_name_ext+0x3e8>
40017dfc:	10bff804 	addi	r2,r2,-32
40017e00:	10803fcc 	andi	r2,r2,255
40017e04:	28c001c3 	ldbu	r3,7(r5)
40017e08:	01c00644 	movi	r7,25
40017e0c:	197fe7c4 	addi	r5,r3,-97
40017e10:	29403fcc 	andi	r5,r5,255
40017e14:	39407336 	bltu	r7,r5,40017fe4 <match_file_record_to_name_ext+0x3d8>
40017e18:	18fff804 	addi	r3,r3,-32
40017e1c:	18c03fcc 	andi	r3,r3,255
        {
            match = false;
40017e20:	10c5003a 	cmpeq	r2,r2,r3
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
40017e24:	20c00203 	ldbu	r3,8(r4)
40017e28:	01c00644 	movi	r7,25
40017e2c:	197fe7c4 	addi	r5,r3,-97
40017e30:	29403fcc 	andi	r5,r5,255
40017e34:	3940392e 	bgeu	r7,r5,40017f1c <match_file_record_to_name_ext+0x310>
40017e38:	18c03fcc 	andi	r3,r3,255
40017e3c:	18c0201c 	xori	r3,r3,128
40017e40:	18ffe004 	addi	r3,r3,-128
40017e44:	31400003 	ldbu	r5,0(r6)
40017e48:	02000644 	movi	r8,25
40017e4c:	29ffe7c4 	addi	r7,r5,-97
40017e50:	39c03fcc 	andi	r7,r7,255
40017e54:	41c02e2e 	bgeu	r8,r7,40017f10 <match_file_record_to_name_ext+0x304>
40017e58:	29403fcc 	andi	r5,r5,255
40017e5c:	2940201c 	xori	r5,r5,128
40017e60:	297fe004 	addi	r5,r5,-128
40017e64:	28c0691e 	bne	r5,r3,4001800c <match_file_record_to_name_ext+0x400>
40017e68:	20c00243 	ldbu	r3,9(r4)
40017e6c:	01c00644 	movi	r7,25
40017e70:	197fe7c4 	addi	r5,r3,-97
40017e74:	29403fcc 	andi	r5,r5,255
40017e78:	39402e2e 	bgeu	r7,r5,40017f34 <match_file_record_to_name_ext+0x328>
40017e7c:	19403fcc 	andi	r5,r3,255
40017e80:	2940201c 	xori	r5,r5,128
40017e84:	297fe004 	addi	r5,r5,-128
40017e88:	30c00043 	ldbu	r3,1(r6)
40017e8c:	02000644 	movi	r8,25
40017e90:	19ffe7c4 	addi	r7,r3,-97
40017e94:	39c03fcc 	andi	r7,r7,255
40017e98:	41c0232e 	bgeu	r8,r7,40017f28 <match_file_record_to_name_ext+0x31c>
40017e9c:	18c03fcc 	andi	r3,r3,255
40017ea0:	18c0201c 	xori	r3,r3,128
40017ea4:	18ffe004 	addi	r3,r3,-128
40017ea8:	28c0581e 	bne	r5,r3,4001800c <match_file_record_to_name_ext+0x400>
40017eac:	20c00283 	ldbu	r3,10(r4)
40017eb0:	01400644 	movi	r5,25
40017eb4:	193fe7c4 	addi	r4,r3,-97
40017eb8:	21003fcc 	andi	r4,r4,255
40017ebc:	29002d36 	bltu	r5,r4,40017f74 <match_file_record_to_name_ext+0x368>
40017ec0:	18fff804 	addi	r3,r3,-32
40017ec4:	19003fcc 	andi	r4,r3,255
40017ec8:	30c00083 	ldbu	r3,2(r6)
40017ecc:	01800644 	movi	r6,25
40017ed0:	197fe7c4 	addi	r5,r3,-97
40017ed4:	29403fcc 	andi	r5,r5,255
40017ed8:	31402236 	bltu	r6,r5,40017f64 <match_file_record_to_name_ext+0x358>
40017edc:	18fff804 	addi	r3,r3,-32
40017ee0:	18c03fcc 	andi	r3,r3,255
40017ee4:	20c0491e 	bne	r4,r3,4001800c <match_file_record_to_name_ext+0x400>
            match = false;
			break;
        }
    }
	return match;
}
40017ee8:	f800283a 	ret
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40017eec:	10bff804 	addi	r2,r2,-32
40017ef0:	10803fcc 	andi	r2,r2,255
40017ef4:	003f5506 	br	40017c4c <__alt_data_end+0xc0017c4c>
40017ef8:	10bff804 	addi	r2,r2,-32
40017efc:	10c03fcc 	andi	r3,r2,255
40017f00:	003f4a06 	br	40017c2c <__alt_data_end+0xc0017c2c>
40017f04:	10bff804 	addi	r2,r2,-32
40017f08:	10c03fcc 	andi	r3,r2,255
40017f0c:	003f5806 	br	40017c70 <__alt_data_end+0xc0017c70>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
40017f10:	297ff804 	addi	r5,r5,-32
40017f14:	29403fcc 	andi	r5,r5,255
40017f18:	003fd206 	br	40017e64 <__alt_data_end+0xc0017e64>
40017f1c:	18fff804 	addi	r3,r3,-32
40017f20:	18c03fcc 	andi	r3,r3,255
40017f24:	003fc706 	br	40017e44 <__alt_data_end+0xc0017e44>
40017f28:	18fff804 	addi	r3,r3,-32
40017f2c:	18c03fcc 	andi	r3,r3,255
40017f30:	003fdd06 	br	40017ea8 <__alt_data_end+0xc0017ea8>
40017f34:	18fff804 	addi	r3,r3,-32
40017f38:	19403fcc 	andi	r5,r3,255
40017f3c:	003fd206 	br	40017e88 <__alt_data_end+0xc0017e88>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40017f40:	10bff804 	addi	r2,r2,-32
40017f44:	10803fcc 	andi	r2,r2,255
40017f48:	003f5106 	br	40017c90 <__alt_data_end+0xc0017c90>
40017f4c:	10bff804 	addi	r2,r2,-32
40017f50:	10803fcc 	andi	r2,r2,255
40017f54:	003f5f06 	br	40017cd4 <__alt_data_end+0xc0017cd4>
40017f58:	10bff804 	addi	r2,r2,-32
40017f5c:	10c03fcc 	andi	r3,r2,255
40017f60:	003f5406 	br	40017cb4 <__alt_data_end+0xc0017cb4>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
40017f64:	18c03fcc 	andi	r3,r3,255
40017f68:	18c0201c 	xori	r3,r3,128
40017f6c:	18ffe004 	addi	r3,r3,-128
40017f70:	003fdc06 	br	40017ee4 <__alt_data_end+0xc0017ee4>
40017f74:	19003fcc 	andi	r4,r3,255
40017f78:	2100201c 	xori	r4,r4,128
40017f7c:	213fe004 	addi	r4,r4,-128
40017f80:	003fd106 	br	40017ec8 <__alt_data_end+0xc0017ec8>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40017f84:	10bff804 	addi	r2,r2,-32
40017f88:	10803fcc 	andi	r2,r2,255
40017f8c:	003f6206 	br	40017d18 <__alt_data_end+0xc0017d18>
40017f90:	10bff804 	addi	r2,r2,-32
40017f94:	10c03fcc 	andi	r3,r2,255
40017f98:	003f5706 	br	40017cf8 <__alt_data_end+0xc0017cf8>
40017f9c:	10bff804 	addi	r2,r2,-32
40017fa0:	10803fcc 	andi	r2,r2,255
40017fa4:	003f6d06 	br	40017d5c <__alt_data_end+0xc0017d5c>
40017fa8:	10bff804 	addi	r2,r2,-32
40017fac:	10c03fcc 	andi	r3,r2,255
40017fb0:	003f6206 	br	40017d3c <__alt_data_end+0xc0017d3c>
40017fb4:	10bff804 	addi	r2,r2,-32
40017fb8:	10803fcc 	andi	r2,r2,255
40017fbc:	003f7806 	br	40017da0 <__alt_data_end+0xc0017da0>
40017fc0:	10bff804 	addi	r2,r2,-32
40017fc4:	10c03fcc 	andi	r3,r2,255
40017fc8:	003f6d06 	br	40017d80 <__alt_data_end+0xc0017d80>
40017fcc:	10bff804 	addi	r2,r2,-32
40017fd0:	10803fcc 	andi	r2,r2,255
40017fd4:	003f8306 	br	40017de4 <__alt_data_end+0xc0017de4>
40017fd8:	10bff804 	addi	r2,r2,-32
40017fdc:	10c03fcc 	andi	r3,r2,255
40017fe0:	003f7806 	br	40017dc4 <__alt_data_end+0xc0017dc4>
40017fe4:	18c03fcc 	andi	r3,r3,255
40017fe8:	18c0201c 	xori	r3,r3,128
40017fec:	18ffe004 	addi	r3,r3,-128
40017ff0:	003f8b06 	br	40017e20 <__alt_data_end+0xc0017e20>
40017ff4:	10803fcc 	andi	r2,r2,255
40017ff8:	1080201c 	xori	r2,r2,128
40017ffc:	10bfe004 	addi	r2,r2,-128
40018000:	003f8006 	br	40017e04 <__alt_data_end+0xc0017e04>
        {
            match = false;
40018004:	0005883a 	mov	r2,zero
40018008:	003f8606 	br	40017e24 <__alt_data_end+0xc0017e24>
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
        {
            match = false;
4001800c:	0005883a 	mov	r2,zero
			break;
        }
    }
	return match;
}
40018010:	f800283a 	ret

40018014 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
40018014:	deffeb04 	addi	sp,sp,-84
40018018:	dd401015 	stw	r21,64(sp)
4001801c:	dfc01415 	stw	ra,80(sp)
40018020:	df001315 	stw	fp,76(sp)
40018024:	ddc01215 	stw	r23,72(sp)
40018028:	dd801115 	stw	r22,68(sp)
4001802c:	dd000f15 	stw	r20,60(sp)
40018030:	dcc00e15 	stw	r19,56(sp)
40018034:	dc800d15 	stw	r18,52(sp)
40018038:	dc400c15 	stw	r17,48(sp)
4001803c:	dc000b15 	stw	r16,44(sp)
40018040:	d9000615 	stw	r4,24(sp)
40018044:	d9400815 	stw	r5,32(sp)
40018048:	302b883a 	mov	r21,r6

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
4001804c:	000c9ec0 	call	4000c9ec <strlen>
    
    for(index = 0; index < length; index++)
40018050:	00805d0e 	bge	zero,r2,400181c8 <get_home_directory_cluster_for_file+0x1b4>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
40018054:	d8c00617 	ldw	r3,24(sp)
40018058:	01001704 	movi	r4,92
4001805c:	19400007 	ldb	r5,0(r3)
40018060:	29005926 	beq	r5,r4,400181c8 <get_home_directory_cluster_for_file+0x1b4>
40018064:	00c00bc4 	movi	r3,47
40018068:	28c05726 	beq	r5,r3,400181c8 <get_home_directory_cluster_for_file+0x1b4>
4001806c:	d9800617 	ldw	r6,24(sp)
40018070:	d8000415 	stw	zero,16(sp)
40018074:	31400044 	addi	r5,r6,1
40018078:	000d883a 	mov	r6,zero
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
4001807c:	31800044 	addi	r6,r6,1
40018080:	11805126 	beq	r2,r6,400181c8 <get_home_directory_cluster_for_file+0x1b4>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
40018084:	29c00007 	ldb	r7,0(r5)
40018088:	29400044 	addi	r5,r5,1
4001808c:	39000126 	beq	r7,r4,40018094 <get_home_directory_cluster_for_file+0x80>
40018090:	38fffa1e 	bne	r7,r3,4001807c <__alt_data_end+0xc001807c>
40018094:	d9800415 	stw	r6,16(sp)
40018098:	dcc00617 	ldw	r19,24(sp)
4001809c:	da000417 	ldw	r8,16(sp)
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
400180a0:	04500134 	movhi	r17,16388
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
    {
        if ((name[index] == '\\') || (name[index] == '/'))
400180a4:	d8000515 	stw	zero,20(sp)
400180a8:	0021883a 	mov	r16,zero
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
400180ac:	8c54a904 	addi	r17,r17,21156
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
400180b0:	01c80834 	movhi	r7,8224
        char extension[3] = { ' ', ' ', ' ' };
400180b4:	00800804 	movi	r2,32
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
400180b8:	39c80804 	addi	r7,r7,8224
        char extension[3] = { ' ', ' ', ' ' };
400180bc:	d8800205 	stb	r2,8(sp)
400180c0:	d8800245 	stb	r2,9(sp)
400180c4:	d8800285 	stb	r2,10(sp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
400180c8:	d9c00015 	stw	r7,0(sp)
400180cc:	d9c00115 	stw	r7,4(sp)
400180d0:	9805883a 	mov	r2,r19
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
400180d4:	01bfffc4 	movi	r6,-1
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
400180d8:	0007883a 	mov	r3,zero
        {
            if (file_name[index+start_location] == '.')
400180dc:	02400b84 	movi	r9,46
400180e0:	00000606 	br	400180fc <get_home_directory_cluster_for_file+0xe8>
            {
                ext_index = index;
            }
            else if (ext_index < 0)
400180e4:	01ffffc4 	movi	r7,-1
400180e8:	31c04726 	beq	r6,r7,40018208 <get_home_directory_cluster_for_file+0x1f4>
            {
                name[index] = file_name[index+start_location];
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
400180ec:	21400005 	stb	r5,0(r4)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
400180f0:	18c00044 	addi	r3,r3,1
400180f4:	10800044 	addi	r2,r2,1
400180f8:	1a000c0e 	bge	r3,r8,4001812c <get_home_directory_cluster_for_file+0x118>
        {
            if (file_name[index+start_location] == '.')
400180fc:	11400003 	ldbu	r5,0(r2)
            {
                name[index] = file_name[index+start_location];
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
40018100:	d9c00204 	addi	r7,sp,8
40018104:	1989c83a 	sub	r4,r3,r6
40018108:	3909883a 	add	r4,r7,r4
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
        {
            if (file_name[index+start_location] == '.')
4001810c:	29c03fcc 	andi	r7,r5,255
40018110:	39c0201c 	xori	r7,r7,128
40018114:	39ffe004 	addi	r7,r7,-128
40018118:	3a7ff21e 	bne	r7,r9,400180e4 <__alt_data_end+0xc00180e4>
4001811c:	180d883a 	mov	r6,r3
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
40018120:	18c00044 	addi	r3,r3,1
40018124:	10800044 	addi	r2,r2,1
40018128:	1a3ff416 	blt	r3,r8,400180fc <__alt_data_end+0xc00180fc>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
4001812c:	8001bc1e 	bne	r16,zero,40018820 <get_home_directory_cluster_for_file+0x80c>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
40018130:	00d00134 	movhi	r3,16388
40018134:	18d4ae04 	addi	r3,r3,21176
40018138:	1880050b 	ldhu	r2,20(r3)
4001813c:	1940030b 	ldhu	r5,12(r3)
40018140:	018003c4 	movi	r6,15
40018144:	1008917a 	slli	r4,r2,5
40018148:	2146b03a 	or	r3,r4,r5
4001814c:	30c35d36 	bltu	r6,r3,40018ec4 <get_home_directory_cluster_for_file+0xeb0>
40018150:	1004927a 	slli	r2,r2,9
40018154:	011000b4 	movhi	r4,16386
40018158:	2103f504 	addi	r4,r4,4052
4001815c:	1144b03a 	or	r2,r2,r5
40018160:	1105883a 	add	r2,r2,r4
40018164:	10800003 	ldbu	r2,0(r2)
40018168:	d8800315 	stw	r2,12(sp)
4001816c:	1007883a 	mov	r3,r2
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
40018170:	18001326 	beq	r3,zero,400181c0 <get_home_directory_cluster_for_file+0x1ac>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40018174:	d0afab17 	ldw	r2,-16724(gp)
40018178:	10000e26 	beq	r2,zero,400181b4 <get_home_directory_cluster_for_file+0x1a0>
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
4001817c:	01900134 	movhi	r6,16388
40018180:	3194ae04 	addi	r6,r6,21176
40018184:	31401317 	ldw	r5,76(r6)
40018188:	d0efad17 	ldw	r3,-16716(gp)
4001818c:	0025883a 	mov	r18,zero
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
40018190:	05000444 	movi	r20,17

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
40018194:	04c00044 	movi	r19,1
                    for (file_counter = 0; file_counter < 16; file_counter++)
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
40018198:	05c03944 	movi	r23,229
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
4001819c:	05800644 	movi	r22,25
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
400181a0:	07008004 	movi	fp,512
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
400181a4:	d1efb317 	ldw	r7,-16692(gp)
400181a8:	3900002b 	ldhuio	r4,0(r7)
400181ac:	2100008c 	andi	r4,r4,2
400181b0:	2000181e 	bne	r4,zero,40018214 <get_home_directory_cluster_for_file+0x200>
    {
        result = true;
    }
	else if (initialized == true)
400181b4:	d0efb517 	ldw	r3,-16684(gp)
400181b8:	00800044 	movi	r2,1
400181bc:	18816726 	beq	r3,r2,4001875c <get_home_directory_cluster_for_file+0x748>
                start_location = start_location+location+1;
            }
            else
            {
                // Directory path is invalid. 
                return false;
400181c0:	0005883a 	mov	r2,zero
400181c4:	00000406 	br	400181d8 <get_home_directory_cluster_for_file+0x1c4>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
400181c8:	d8c00817 	ldw	r3,32(sp)
400181cc:	18000015 	stw	zero,0(r3)
    if (home_dir_cluster == 0)
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
400181d0:	a8000a15 	stw	zero,40(r21)
		result = true;
400181d4:	00800044 	movi	r2,1
    }
    return result;
}
400181d8:	dfc01417 	ldw	ra,80(sp)
400181dc:	df001317 	ldw	fp,76(sp)
400181e0:	ddc01217 	ldw	r23,72(sp)
400181e4:	dd801117 	ldw	r22,68(sp)
400181e8:	dd401017 	ldw	r21,64(sp)
400181ec:	dd000f17 	ldw	r20,60(sp)
400181f0:	dcc00e17 	ldw	r19,56(sp)
400181f4:	dc800d17 	ldw	r18,52(sp)
400181f8:	dc400c17 	ldw	r17,48(sp)
400181fc:	dc000b17 	ldw	r16,44(sp)
40018200:	dec01504 	addi	sp,sp,84
40018204:	f800283a 	ret
            {
                ext_index = index;
            }
            else if (ext_index < 0)
            {
                name[index] = file_name[index+start_location];
40018208:	d8c9883a 	add	r4,sp,r3
4001820c:	21400005 	stb	r5,0(r4)
40018210:	003fb706 	br	400180f0 <__alt_data_end+0xc00180f0>
	if (alt_up_sd_card_is_Present())
	{
		short int reg_state = 0xff;
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
40018214:	d12faa17 	ldw	r4,-16728(gp)
40018218:	20002626 	beq	r4,zero,400182b4 <get_home_directory_cluster_for_file+0x2a0>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
4001821c:	10000426 	beq	r2,zero,40018230 <get_home_directory_cluster_for_file+0x21c>
		short int reg_state = 0xff;
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
40018220:	d1afa917 	ldw	r6,-16732(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40018224:	3880002b 	ldhuio	r2,0(r7)
40018228:	1080008c 	andi	r2,r2,2
4001822c:	1000121e 	bne	r2,zero,40018278 <get_home_directory_cluster_for_file+0x264>
    {
        result = true;
    }
	else if (initialized == true)
40018230:	d0efb517 	ldw	r3,-16684(gp)
40018234:	00800044 	movi	r2,1
40018238:	18bfe11e 	bne	r3,r2,400181c0 <__alt_data_end+0xc00181c0>
4001823c:	00900134 	movhi	r2,16388
	{
		int index;

		initialized = false;
		search_data.valid = false;
40018240:	00d00134 	movhi	r3,16388
40018244:	1094d204 	addi	r2,r2,21320
40018248:	18d4a904 	addi	r3,r3,21156
4001824c:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
40018250:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
40018254:	d02fb415 	stw	zero,-16688(gp)
40018258:	10ffff04 	addi	r3,r2,-4
4001825c:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40018260:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40018264:	18000015 	stw	zero,0(r3)
40018268:	10801004 	addi	r2,r2,64
4001826c:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40018270:	113ffb1e 	bne	r2,r4,40018260 <__alt_data_end+0xc0018260>
40018274:	003fd206 	br	400181c0 <__alt_data_end+0xc00181c0>
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
40018278:	3004927a 	slli	r2,r6,9
4001827c:	d12faf17 	ldw	r4,-16708(gp)
40018280:	20800035 	stwio	r2,0(r4)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
40018284:	d0afb017 	ldw	r2,-16704(gp)
40018288:	01000604 	movi	r4,24
4001828c:	1100002d 	sthio	r4,0(r2)
40018290:	d12fb317 	ldw	r4,-16692(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
40018294:	2080002b 	ldhuio	r2,0(r4)
40018298:	10bfffcc 	andi	r2,r2,65535
        } while ((reg_state & 0x04)!=0);
4001829c:	11c0010c 	andi	r7,r2,4
400182a0:	383ffc1e 	bne	r7,zero,40018294 <__alt_data_end+0xc0018294>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
400182a4:	1080040c 	andi	r2,r2,16
400182a8:	103fc51e 	bne	r2,zero,400181c0 <__alt_data_end+0xc00181c0>
        {
            result = true;
            current_sector_modified = false;
400182ac:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
400182b0:	d1afa915 	stw	r6,-16732(gp)
                return false;
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
400182b4:	194b883a 	add	r5,r3,r5
400182b8:	2806927a 	slli	r3,r5,9
400182bc:	d0afaf17 	ldw	r2,-16708(gp)
400182c0:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
400182c4:	d0afb017 	ldw	r2,-16704(gp)
400182c8:	1500002d 	sthio	r20,0(r2)
400182cc:	d12fb317 	ldw	r4,-16692(gp)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
400182d0:	2080002b 	ldhuio	r2,0(r4)
400182d4:	10bfffcc 	andi	r2,r2,65535
		} while ((reg_state & 0x04)!=0);
400182d8:	10c0010c 	andi	r3,r2,4
400182dc:	183ffc1e 	bne	r3,zero,400182d0 <__alt_data_end+0xc00182d0>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
400182e0:	1080040c 	andi	r2,r2,16
400182e4:	103fb61e 	bne	r2,zero,400181c0 <__alt_data_end+0xc00181c0>
		{
			result = true;
            current_sector_modified = false;
400182e8:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
400182ec:	d16fa915 	stw	r5,-16732(gp)
400182f0:	0021883a 	mov	r16,zero
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
400182f4:	d0afab17 	ldw	r2,-16724(gp)
400182f8:	10000426 	beq	r2,zero,4001830c <get_home_directory_cluster_for_file+0x2f8>
400182fc:	d0afb317 	ldw	r2,-16692(gp)
40018300:	1080002b 	ldhuio	r2,0(r2)
40018304:	1080008c 	andi	r2,r2,2
40018308:	1000b81e 	bne	r2,zero,400185ec <get_home_directory_cluster_for_file+0x5d8>
    {
        result = true;
    }
	else if (initialized == true)
4001830c:	d0afb517 	ldw	r2,-16684(gp)
40018310:	14c10526 	beq	r2,r19,40018728 <get_home_directory_cluster_for_file+0x714>
                    for (file_counter = 0; file_counter < 16; file_counter++)
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
40018314:	a8800003 	ldbu	r2,0(r21)
40018318:	10c03fcc 	andi	r3,r2,255
4001831c:	1dc0a626 	beq	r3,r23,400185b8 <get_home_directory_cluster_for_file+0x5a4>
40018320:	1800a526 	beq	r3,zero,400185b8 <get_home_directory_cluster_for_file+0x5a4>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40018324:	10ffe7c4 	addi	r3,r2,-97
40018328:	18c03fcc 	andi	r3,r3,255
4001832c:	b0c0bd2e 	bgeu	r22,r3,40018624 <get_home_directory_cluster_for_file+0x610>
40018330:	d8c00003 	ldbu	r3,0(sp)
40018334:	10803fcc 	andi	r2,r2,255
40018338:	1080201c 	xori	r2,r2,128
4001833c:	193fe7c4 	addi	r4,r3,-97
40018340:	21003fcc 	andi	r4,r4,255
40018344:	10bfe004 	addi	r2,r2,-128
40018348:	b100bc2e 	bgeu	r22,r4,4001863c <get_home_directory_cluster_for_file+0x628>
4001834c:	18c03fcc 	andi	r3,r3,255
40018350:	18c0201c 	xori	r3,r3,128
40018354:	18ffe004 	addi	r3,r3,-128
40018358:	10c0bb1e 	bne	r2,r3,40018648 <get_home_directory_cluster_for_file+0x634>
4001835c:	a8800043 	ldbu	r2,1(r21)
40018360:	10ffe7c4 	addi	r3,r2,-97
40018364:	18c03fcc 	andi	r3,r3,255
40018368:	b0c0bc2e 	bgeu	r22,r3,4001865c <get_home_directory_cluster_for_file+0x648>
4001836c:	10c03fcc 	andi	r3,r2,255
40018370:	18c0201c 	xori	r3,r3,128
40018374:	18ffe004 	addi	r3,r3,-128
40018378:	d8800043 	ldbu	r2,1(sp)
4001837c:	113fe7c4 	addi	r4,r2,-97
40018380:	21003fcc 	andi	r4,r4,255
40018384:	b100b22e 	bgeu	r22,r4,40018650 <get_home_directory_cluster_for_file+0x63c>
40018388:	10803fcc 	andi	r2,r2,255
4001838c:	1080201c 	xori	r2,r2,128
40018390:	10bfe004 	addi	r2,r2,-128
40018394:	1880ac1e 	bne	r3,r2,40018648 <get_home_directory_cluster_for_file+0x634>
40018398:	a8800083 	ldbu	r2,2(r21)
4001839c:	10ffe7c4 	addi	r3,r2,-97
400183a0:	18c03fcc 	andi	r3,r3,255
400183a4:	b0c0b92e 	bgeu	r22,r3,4001868c <get_home_directory_cluster_for_file+0x678>
400183a8:	10c03fcc 	andi	r3,r2,255
400183ac:	18c0201c 	xori	r3,r3,128
400183b0:	18ffe004 	addi	r3,r3,-128
400183b4:	d8800083 	ldbu	r2,2(sp)
400183b8:	113fe7c4 	addi	r4,r2,-97
400183bc:	21003fcc 	andi	r4,r4,255
400183c0:	b100af2e 	bgeu	r22,r4,40018680 <get_home_directory_cluster_for_file+0x66c>
400183c4:	10803fcc 	andi	r2,r2,255
400183c8:	1080201c 	xori	r2,r2,128
400183cc:	10bfe004 	addi	r2,r2,-128
400183d0:	18809d1e 	bne	r3,r2,40018648 <get_home_directory_cluster_for_file+0x634>
400183d4:	a88000c3 	ldbu	r2,3(r21)
400183d8:	10ffe7c4 	addi	r3,r2,-97
400183dc:	18c03fcc 	andi	r3,r3,255
400183e0:	b0c0b62e 	bgeu	r22,r3,400186bc <get_home_directory_cluster_for_file+0x6a8>
400183e4:	10c03fcc 	andi	r3,r2,255
400183e8:	18c0201c 	xori	r3,r3,128
400183ec:	18ffe004 	addi	r3,r3,-128
400183f0:	d88000c3 	ldbu	r2,3(sp)
400183f4:	113fe7c4 	addi	r4,r2,-97
400183f8:	21003fcc 	andi	r4,r4,255
400183fc:	b100ac2e 	bgeu	r22,r4,400186b0 <get_home_directory_cluster_for_file+0x69c>
40018400:	10803fcc 	andi	r2,r2,255
40018404:	1080201c 	xori	r2,r2,128
40018408:	10bfe004 	addi	r2,r2,-128
4001840c:	18808e1e 	bne	r3,r2,40018648 <get_home_directory_cluster_for_file+0x634>
40018410:	a8800103 	ldbu	r2,4(r21)
40018414:	10ffe7c4 	addi	r3,r2,-97
40018418:	18c03fcc 	andi	r3,r3,255
4001841c:	b0c0ad2e 	bgeu	r22,r3,400186d4 <get_home_directory_cluster_for_file+0x6c0>
40018420:	10c03fcc 	andi	r3,r2,255
40018424:	18c0201c 	xori	r3,r3,128
40018428:	18ffe004 	addi	r3,r3,-128
4001842c:	d8800103 	ldbu	r2,4(sp)
40018430:	113fe7c4 	addi	r4,r2,-97
40018434:	21003fcc 	andi	r4,r4,255
40018438:	b100a32e 	bgeu	r22,r4,400186c8 <get_home_directory_cluster_for_file+0x6b4>
4001843c:	10803fcc 	andi	r2,r2,255
40018440:	1080201c 	xori	r2,r2,128
40018444:	10bfe004 	addi	r2,r2,-128
40018448:	18807f1e 	bne	r3,r2,40018648 <get_home_directory_cluster_for_file+0x634>
4001844c:	a8800143 	ldbu	r2,5(r21)
40018450:	10ffe7c4 	addi	r3,r2,-97
40018454:	18c03fcc 	andi	r3,r3,255
40018458:	b0c0a42e 	bgeu	r22,r3,400186ec <get_home_directory_cluster_for_file+0x6d8>
4001845c:	10c03fcc 	andi	r3,r2,255
40018460:	18c0201c 	xori	r3,r3,128
40018464:	18ffe004 	addi	r3,r3,-128
40018468:	d8800143 	ldbu	r2,5(sp)
4001846c:	113fe7c4 	addi	r4,r2,-97
40018470:	21003fcc 	andi	r4,r4,255
40018474:	b1009a2e 	bgeu	r22,r4,400186e0 <get_home_directory_cluster_for_file+0x6cc>
40018478:	10803fcc 	andi	r2,r2,255
4001847c:	1080201c 	xori	r2,r2,128
40018480:	10bfe004 	addi	r2,r2,-128
40018484:	1880701e 	bne	r3,r2,40018648 <get_home_directory_cluster_for_file+0x634>
40018488:	a8800183 	ldbu	r2,6(r21)
4001848c:	10ffe7c4 	addi	r3,r2,-97
40018490:	18c03fcc 	andi	r3,r3,255
40018494:	b0c09b2e 	bgeu	r22,r3,40018704 <get_home_directory_cluster_for_file+0x6f0>
40018498:	10c03fcc 	andi	r3,r2,255
4001849c:	18c0201c 	xori	r3,r3,128
400184a0:	18ffe004 	addi	r3,r3,-128
400184a4:	d8800183 	ldbu	r2,6(sp)
400184a8:	113fe7c4 	addi	r4,r2,-97
400184ac:	21003fcc 	andi	r4,r4,255
400184b0:	b100912e 	bgeu	r22,r4,400186f8 <get_home_directory_cluster_for_file+0x6e4>
400184b4:	10803fcc 	andi	r2,r2,255
400184b8:	1080201c 	xori	r2,r2,128
400184bc:	10bfe004 	addi	r2,r2,-128
400184c0:	1880611e 	bne	r3,r2,40018648 <get_home_directory_cluster_for_file+0x634>
400184c4:	a88001c3 	ldbu	r2,7(r21)
400184c8:	10ffe7c4 	addi	r3,r2,-97
400184cc:	18c03fcc 	andi	r3,r3,255
400184d0:	b0c0922e 	bgeu	r22,r3,4001871c <get_home_directory_cluster_for_file+0x708>
400184d4:	10803fcc 	andi	r2,r2,255
400184d8:	1080201c 	xori	r2,r2,128
400184dc:	10bfe004 	addi	r2,r2,-128
400184e0:	d8c001c3 	ldbu	r3,7(sp)
400184e4:	193fe7c4 	addi	r4,r3,-97
400184e8:	21003fcc 	andi	r4,r4,255
400184ec:	b100882e 	bgeu	r22,r4,40018710 <get_home_directory_cluster_for_file+0x6fc>
400184f0:	18c03fcc 	andi	r3,r3,255
400184f4:	18c0201c 	xori	r3,r3,128
400184f8:	18ffe004 	addi	r3,r3,-128
        {
            match = false;
400184fc:	10c5003a 	cmpeq	r2,r2,r3
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
40018500:	a8c00203 	ldbu	r3,8(r21)
40018504:	193fe7c4 	addi	r4,r3,-97
40018508:	21003fcc 	andi	r4,r4,255
4001850c:	b100422e 	bgeu	r22,r4,40018618 <get_home_directory_cluster_for_file+0x604>
40018510:	19003fcc 	andi	r4,r3,255
40018514:	2100201c 	xori	r4,r4,128
40018518:	213fe004 	addi	r4,r4,-128
4001851c:	d8c00203 	ldbu	r3,8(sp)
40018520:	197fe7c4 	addi	r5,r3,-97
40018524:	29403fcc 	andi	r5,r5,255
40018528:	b140382e 	bgeu	r22,r5,4001860c <get_home_directory_cluster_for_file+0x5f8>
4001852c:	18c03fcc 	andi	r3,r3,255
40018530:	18c0201c 	xori	r3,r3,128
40018534:	18ffe004 	addi	r3,r3,-128
40018538:	20c01f1e 	bne	r4,r3,400185b8 <get_home_directory_cluster_for_file+0x5a4>
4001853c:	a8c00243 	ldbu	r3,9(r21)
40018540:	193fe7c4 	addi	r4,r3,-97
40018544:	21003fcc 	andi	r4,r4,255
40018548:	b1004a2e 	bgeu	r22,r4,40018674 <get_home_directory_cluster_for_file+0x660>
4001854c:	18c03fcc 	andi	r3,r3,255
40018550:	18c0201c 	xori	r3,r3,128
40018554:	18ffe004 	addi	r3,r3,-128
40018558:	d9000243 	ldbu	r4,9(sp)
4001855c:	217fe7c4 	addi	r5,r4,-97
40018560:	29403fcc 	andi	r5,r5,255
40018564:	b140402e 	bgeu	r22,r5,40018668 <get_home_directory_cluster_for_file+0x654>
40018568:	21003fcc 	andi	r4,r4,255
4001856c:	2100201c 	xori	r4,r4,128
40018570:	213fe004 	addi	r4,r4,-128
40018574:	20c0101e 	bne	r4,r3,400185b8 <get_home_directory_cluster_for_file+0x5a4>
40018578:	a8c00283 	ldbu	r3,10(r21)
4001857c:	193fe7c4 	addi	r4,r3,-97
40018580:	21003fcc 	andi	r4,r4,255
40018584:	b100472e 	bgeu	r22,r4,400186a4 <get_home_directory_cluster_for_file+0x690>
40018588:	19003fcc 	andi	r4,r3,255
4001858c:	2100201c 	xori	r4,r4,128
40018590:	213fe004 	addi	r4,r4,-128
40018594:	d8c00283 	ldbu	r3,10(sp)
40018598:	197fe7c4 	addi	r5,r3,-97
4001859c:	29403fcc 	andi	r5,r5,255
400185a0:	b1403d2e 	bgeu	r22,r5,40018698 <get_home_directory_cluster_for_file+0x684>
400185a4:	18c03fcc 	andi	r3,r3,255
400185a8:	18c0201c 	xori	r3,r3,128
400185ac:	18ffe004 	addi	r3,r3,-128
400185b0:	20c0011e 	bne	r4,r3,400185b8 <get_home_directory_cluster_for_file+0x5a4>
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
                            if (match)
400185b4:	1000781e 	bne	r2,zero,40018798 <get_home_directory_cluster_for_file+0x784>
400185b8:	84000804 	addi	r16,r16,32
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
400185bc:	873f4d1e 	bne	r16,fp,400182f4 <__alt_data_end+0xc00182f4>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
400185c0:	d8c00317 	ldw	r3,12(sp)
400185c4:	94800044 	addi	r18,r18,1
400185c8:	1cbefd26 	beq	r3,r18,400181c0 <__alt_data_end+0xc00181c0>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
400185cc:	d0afab17 	ldw	r2,-16724(gp)
400185d0:	103ef826 	beq	r2,zero,400181b4 <__alt_data_end+0xc00181b4>
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
400185d4:	01100134 	movhi	r4,16388
400185d8:	2114ae04 	addi	r4,r4,21176
400185dc:	21401317 	ldw	r5,76(r4)
400185e0:	d0efad17 	ldw	r3,-16716(gp)
400185e4:	914b883a 	add	r5,r18,r5
400185e8:	003eee06 	br	400181a4 <__alt_data_end+0xc00181a4>

bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
400185ec:	d0afb417 	ldw	r2,-16688(gp)
400185f0:	103f4826 	beq	r2,zero,40018314 <__alt_data_end+0xc0018314>
400185f4:	900f883a 	mov	r7,r18
400185f8:	000d883a 	mov	r6,zero
400185fc:	a80b883a 	mov	r5,r21
40018600:	8009883a 	mov	r4,r16
40018604:	00168f80 	call	400168f8 <Read_File_Record_At_Offset.part.6>
40018608:	003f4206 	br	40018314 <__alt_data_end+0xc0018314>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
4001860c:	18fff804 	addi	r3,r3,-32
40018610:	18c03fcc 	andi	r3,r3,255
40018614:	003fc806 	br	40018538 <__alt_data_end+0xc0018538>
40018618:	18fff804 	addi	r3,r3,-32
4001861c:	19003fcc 	andi	r4,r3,255
40018620:	003fbe06 	br	4001851c <__alt_data_end+0xc001851c>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40018624:	d8c00003 	ldbu	r3,0(sp)
40018628:	10bff804 	addi	r2,r2,-32
4001862c:	10803fcc 	andi	r2,r2,255
40018630:	193fe7c4 	addi	r4,r3,-97
40018634:	21003fcc 	andi	r4,r4,255
40018638:	b13f4436 	bltu	r22,r4,4001834c <__alt_data_end+0xc001834c>
4001863c:	18fff804 	addi	r3,r3,-32
40018640:	18c03fcc 	andi	r3,r3,255
40018644:	10ff4526 	beq	r2,r3,4001835c <__alt_data_end+0xc001835c>
        {
            match = false;
40018648:	0005883a 	mov	r2,zero
4001864c:	003fac06 	br	40018500 <__alt_data_end+0xc0018500>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40018650:	10bff804 	addi	r2,r2,-32
40018654:	10803fcc 	andi	r2,r2,255
40018658:	003f4e06 	br	40018394 <__alt_data_end+0xc0018394>
4001865c:	10bff804 	addi	r2,r2,-32
40018660:	10c03fcc 	andi	r3,r2,255
40018664:	003f4406 	br	40018378 <__alt_data_end+0xc0018378>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
40018668:	213ff804 	addi	r4,r4,-32
4001866c:	21003fcc 	andi	r4,r4,255
40018670:	003fc006 	br	40018574 <__alt_data_end+0xc0018574>
40018674:	18fff804 	addi	r3,r3,-32
40018678:	18c03fcc 	andi	r3,r3,255
4001867c:	003fb606 	br	40018558 <__alt_data_end+0xc0018558>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40018680:	10bff804 	addi	r2,r2,-32
40018684:	10803fcc 	andi	r2,r2,255
40018688:	003f5106 	br	400183d0 <__alt_data_end+0xc00183d0>
4001868c:	10bff804 	addi	r2,r2,-32
40018690:	10c03fcc 	andi	r3,r2,255
40018694:	003f4706 	br	400183b4 <__alt_data_end+0xc00183b4>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
40018698:	18fff804 	addi	r3,r3,-32
4001869c:	18c03fcc 	andi	r3,r3,255
400186a0:	003fc306 	br	400185b0 <__alt_data_end+0xc00185b0>
400186a4:	18fff804 	addi	r3,r3,-32
400186a8:	19003fcc 	andi	r4,r3,255
400186ac:	003fb906 	br	40018594 <__alt_data_end+0xc0018594>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
400186b0:	10bff804 	addi	r2,r2,-32
400186b4:	10803fcc 	andi	r2,r2,255
400186b8:	003f5406 	br	4001840c <__alt_data_end+0xc001840c>
400186bc:	10bff804 	addi	r2,r2,-32
400186c0:	10c03fcc 	andi	r3,r2,255
400186c4:	003f4a06 	br	400183f0 <__alt_data_end+0xc00183f0>
400186c8:	10bff804 	addi	r2,r2,-32
400186cc:	10803fcc 	andi	r2,r2,255
400186d0:	003f5d06 	br	40018448 <__alt_data_end+0xc0018448>
400186d4:	10bff804 	addi	r2,r2,-32
400186d8:	10c03fcc 	andi	r3,r2,255
400186dc:	003f5306 	br	4001842c <__alt_data_end+0xc001842c>
400186e0:	10bff804 	addi	r2,r2,-32
400186e4:	10803fcc 	andi	r2,r2,255
400186e8:	003f6606 	br	40018484 <__alt_data_end+0xc0018484>
400186ec:	10bff804 	addi	r2,r2,-32
400186f0:	10c03fcc 	andi	r3,r2,255
400186f4:	003f5c06 	br	40018468 <__alt_data_end+0xc0018468>
400186f8:	10bff804 	addi	r2,r2,-32
400186fc:	10803fcc 	andi	r2,r2,255
40018700:	003f6f06 	br	400184c0 <__alt_data_end+0xc00184c0>
40018704:	10bff804 	addi	r2,r2,-32
40018708:	10c03fcc 	andi	r3,r2,255
4001870c:	003f6506 	br	400184a4 <__alt_data_end+0xc00184a4>
40018710:	18fff804 	addi	r3,r3,-32
40018714:	18c03fcc 	andi	r3,r3,255
40018718:	003f7806 	br	400184fc <__alt_data_end+0xc00184fc>
4001871c:	10bff804 	addi	r2,r2,-32
40018720:	10803fcc 	andi	r2,r2,255
40018724:	003f6e06 	br	400184e0 <__alt_data_end+0xc00184e0>
40018728:	00900134 	movhi	r2,16388
4001872c:	1094d204 	addi	r2,r2,21320
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
40018730:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
40018734:	88000415 	stw	zero,16(r17)
		is_sd_card_formated_as_FAT16 = false;
40018738:	d02fb415 	stw	zero,-16688(gp)
4001873c:	10ffff04 	addi	r3,r2,-4
40018740:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40018744:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40018748:	18000015 	stw	zero,0(r3)
4001874c:	10801004 	addi	r2,r2,64
40018750:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40018754:	113ffb1e 	bne	r2,r4,40018744 <__alt_data_end+0xc0018744>
40018758:	003eee06 	br	40018314 <__alt_data_end+0xc0018314>
4001875c:	00900134 	movhi	r2,16388
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
40018760:	00d00134 	movhi	r3,16388
40018764:	1094d204 	addi	r2,r2,21320
40018768:	18d4a904 	addi	r3,r3,21156
4001876c:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
40018770:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
40018774:	d02fb415 	stw	zero,-16688(gp)
40018778:	10ffff04 	addi	r3,r2,-4
4001877c:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40018780:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40018784:	18000015 	stw	zero,0(r3)
40018788:	10801004 	addi	r2,r2,64
4001878c:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40018790:	113ffb1e 	bne	r2,r4,40018780 <__alt_data_end+0xc0018780>
40018794:	003e8a06 	br	400181c0 <__alt_data_end+0xc00181c0>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
                            if (match)
                            {
                                new_cluster = file_record->start_cluster_index;
40018798:	ac00058b 	ldhu	r16,22(r21)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
4001879c:	acc00a15 	stw	r19,40(r21)
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
400187a0:	803f8726 	beq	r16,zero,400185c0 <__alt_data_end+0xc00185c0>
            }
            if (new_cluster != home_dir_cluster)
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
                start_location = start_location+location+1;
400187a4:	d8c00517 	ldw	r3,20(sp)
400187a8:	d9000417 	ldw	r4,16(sp)
400187ac:	1929883a 	add	r20,r3,r4
400187b0:	a5000044 	addi	r20,r20,1
400187b4:	dd000515 	stw	r20,20(sp)
400187b8:	a009883a 	mov	r4,r20
            {
                // Directory path is invalid. 
                return false;
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
400187bc:	d8c00617 	ldw	r3,24(sp)
400187c0:	1927883a 	add	r19,r3,r4

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
400187c4:	9809883a 	mov	r4,r19
400187c8:	000c9ec0 	call	4000c9ec <strlen>
    
    for(index = 0; index < length; index++)
400187cc:	0081c10e 	bge	zero,r2,40018ed4 <get_home_directory_cluster_for_file+0xec0>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
400187d0:	98c00007 	ldb	r3,0(r19)
400187d4:	01401704 	movi	r5,92
400187d8:	1941bf26 	beq	r3,r5,40018ed8 <get_home_directory_cluster_for_file+0xec4>
400187dc:	01000bc4 	movi	r4,47
400187e0:	1901bd26 	beq	r3,r4,40018ed8 <get_home_directory_cluster_for_file+0xec4>
400187e4:	98c00044 	addi	r3,r19,1
400187e8:	d8000415 	stw	zero,16(sp)
400187ec:	000d883a 	mov	r6,zero
400187f0:	00000406 	br	40018804 <get_home_directory_cluster_for_file+0x7f0>
400187f4:	19c00007 	ldb	r7,0(r3)
400187f8:	18c00044 	addi	r3,r3,1
400187fc:	3941ae26 	beq	r7,r5,40018eb8 <get_home_directory_cluster_for_file+0xea4>
40018800:	3901ad26 	beq	r7,r4,40018eb8 <get_home_directory_cluster_for_file+0xea4>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
40018804:	31800044 	addi	r6,r6,1
40018808:	11bffa1e 	bne	r2,r6,400187f4 <__alt_data_end+0xc00187f4>
        }
        location = get_dir_divider_location(&(file_name[start_location]));
        if (location < 0)
        {
            // Directory has been located.
            result = true;
4001880c:	00800044 	movi	r2,1
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
40018810:	d8c00817 	ldw	r3,32(sp)
40018814:	1c000015 	stw	r16,0(r3)
    if (home_dir_cluster == 0)
40018818:	803e6d26 	beq	r16,zero,400181d0 <__alt_data_end+0xc00181d0>
4001881c:	003e6e06 	br	400181d8 <__alt_data_end+0xc00181d8>


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
40018820:	8006d23a 	srli	r3,r16,8
        if (Read_Sector_Data(sector_index, 0) == false)
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
40018824:	85803fcc 	andi	r22,r16,255
40018828:	b5ad883a 	add	r22,r22,r22


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
4001882c:	d8c00915 	stw	r3,36(sp)
40018830:	80ffff84 	addi	r3,r16,-2
        if (Read_Sector_Data(sector_index, 0) == false)
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
40018834:	dd800a15 	stw	r22,40(sp)
40018838:	d8c00715 	stw	r3,28(sp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
4001883c:	05c00044 	movi	r23,1
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
40018840:	07003944 	movi	fp,229
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40018844:	05800644 	movi	r22,25
40018848:	00001606 	br	400188a4 <get_home_directory_cluster_for_file+0x890>
4001884c:	d1efa917 	ldw	r7,-16732(gp)
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
40018850:	01900134 	movhi	r6,16388
40018854:	3194ae04 	addi	r6,r6,21176
40018858:	31001117 	ldw	r4,68(r6)
4001885c:	d8c00917 	ldw	r3,36(sp)
40018860:	1909883a 	add	r4,r3,r4
40018864:	2149883a 	add	r4,r4,r5
     
    if (sector_index != current_sector_index)
40018868:	21c00326 	beq	r4,r7,40018878 <get_home_directory_cluster_for_file+0x864>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
4001886c:	000b883a 	mov	r5,zero
40018870:	0016c100 	call	40016c10 <Read_Sector_Data>
40018874:	103e5226 	beq	r2,zero,400181c0 <__alt_data_end+0xc00181c0>
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
40018878:	d0afab17 	ldw	r2,-16724(gp)
4001887c:	d8c00a17 	ldw	r3,40(sp)
40018880:	10800a17 	ldw	r2,40(r2)
40018884:	1885883a 	add	r2,r3,r2
40018888:	1080002b 	ldhuio	r2,0(r2)
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
4001888c:	00fffe14 	movui	r3,65528
40018890:	10bffe0c 	andi	r2,r2,65528
40018894:	10fe4a26 	beq	r2,r3,400181c0 <__alt_data_end+0xc00181c0>
					{
						// Directory path is invalid.                 
						return false;
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
40018898:	00fffdd4 	movui	r3,65527
4001889c:	1c016c16 	blt	r3,r16,40018e50 <get_home_directory_cluster_for_file+0xe3c>
400188a0:	14016b1e 	bne	r2,r16,40018e50 <get_home_directory_cluster_for_file+0xe3c>
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
400188a4:	01100134 	movhi	r4,16388
400188a8:	2114ae04 	addi	r4,r4,21176
400188ac:	20800383 	ldbu	r2,14(r4)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
400188b0:	10017f26 	beq	r2,zero,40018eb0 <get_home_directory_cluster_for_file+0xe9c>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
400188b4:	d0efad17 	ldw	r3,-16716(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
400188b8:	d12fab17 	ldw	r4,-16724(gp)
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
400188bc:	180b883a 	mov	r5,r3
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
400188c0:	20001126 	beq	r4,zero,40018908 <get_home_directory_cluster_for_file+0x8f4>
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
400188c4:	d9400717 	ldw	r5,28(sp)
400188c8:	01900134 	movhi	r6,16388
400188cc:	3194ae04 	addi	r6,r6,21176
400188d0:	1145383a 	mul	r2,r2,r5
400188d4:	31401417 	ldw	r5,80(r6)
400188d8:	0025883a 	mov	r18,zero
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
400188dc:	04c08004 	movi	r19,512
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
400188e0:	114b883a 	add	r5,r2,r5
400188e4:	d9400315 	stw	r5,12(sp)
400188e8:	9029883a 	mov	r20,r18
400188ec:	d9c00317 	ldw	r7,12(sp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
400188f0:	d16fb317 	ldw	r5,-16692(gp)
400188f4:	3d0d883a 	add	r6,r7,r20
400188f8:	2880002b 	ldhuio	r2,0(r5)
400188fc:	1080008c 	andi	r2,r2,2
40018900:	1000101e 	bne	r2,zero,40018944 <get_home_directory_cluster_for_file+0x930>
40018904:	180b883a 	mov	r5,r3
    {
        result = true;
    }
	else if (initialized == true)
40018908:	d0afb517 	ldw	r2,-16684(gp)
4001890c:	15ffcf1e 	bne	r2,r23,4001884c <__alt_data_end+0xc001884c>
40018910:	00900134 	movhi	r2,16388
40018914:	1094d204 	addi	r2,r2,21320
	{
		int index;

		initialized = false;
40018918:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
4001891c:	88000415 	stw	zero,16(r17)
		is_sd_card_formated_as_FAT16 = false;
40018920:	d02fb415 	stw	zero,-16688(gp)
40018924:	10ffff04 	addi	r3,r2,-4
40018928:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
4001892c:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40018930:	18000015 	stw	zero,0(r3)
40018934:	10801004 	addi	r2,r2,64
40018938:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
4001893c:	20bffb1e 	bne	r4,r2,4001892c <__alt_data_end+0xc001892c>
40018940:	003fc206 	br	4001884c <__alt_data_end+0xc001884c>
	if (alt_up_sd_card_is_Present())
	{
		short int reg_state = 0xff;
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
40018944:	d0afaa17 	ldw	r2,-16728(gp)
40018948:	10001826 	beq	r2,zero,400189ac <get_home_directory_cluster_for_file+0x998>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
4001894c:	d1efa917 	ldw	r7,-16732(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40018950:	20000326 	beq	r4,zero,40018960 <get_home_directory_cluster_for_file+0x94c>
40018954:	2880002b 	ldhuio	r2,0(r5)
40018958:	1080008c 	andi	r2,r2,2
4001895c:	1000041e 	bne	r2,zero,40018970 <get_home_directory_cluster_for_file+0x95c>
    {
        result = true;
    }
	else if (initialized == true)
40018960:	d0afb517 	ldw	r2,-16684(gp)
40018964:	15c14526 	beq	r2,r23,40018e7c <get_home_directory_cluster_for_file+0xe68>
40018968:	180b883a 	mov	r5,r3
4001896c:	003fb806 	br	40018850 <__alt_data_end+0xc0018850>
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
40018970:	3804927a 	slli	r2,r7,9
40018974:	d12faf17 	ldw	r4,-16708(gp)
40018978:	20800035 	stwio	r2,0(r4)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
4001897c:	d0afb017 	ldw	r2,-16704(gp)
40018980:	01400604 	movi	r5,24
40018984:	1140002d 	sthio	r5,0(r2)
40018988:	d12fb317 	ldw	r4,-16692(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
4001898c:	2080002b 	ldhuio	r2,0(r4)
40018990:	10bfffcc 	andi	r2,r2,65535
        } while ((reg_state & 0x04)!=0);
40018994:	1140010c 	andi	r5,r2,4
40018998:	283ffc1e 	bne	r5,zero,4001898c <__alt_data_end+0xc001898c>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
4001899c:	1080040c 	andi	r2,r2,16
400189a0:	1001431e 	bne	r2,zero,40018eb0 <get_home_directory_cluster_for_file+0xe9c>
        {
            result = true;
            current_sector_modified = false;
400189a4:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
400189a8:	d1efa915 	stw	r7,-16732(gp)
                return false;
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
400189ac:	30cb883a 	add	r5,r6,r3
400189b0:	2806927a 	slli	r3,r5,9
400189b4:	d0afaf17 	ldw	r2,-16708(gp)
400189b8:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
400189bc:	d0afb017 	ldw	r2,-16704(gp)
400189c0:	00c00444 	movi	r3,17
400189c4:	10c0002d 	sthio	r3,0(r2)
400189c8:	d12fb317 	ldw	r4,-16692(gp)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
400189cc:	2080002b 	ldhuio	r2,0(r4)
400189d0:	10bfffcc 	andi	r2,r2,65535
		} while ((reg_state & 0x04)!=0);
400189d4:	10c0010c 	andi	r3,r2,4
400189d8:	183ffc1e 	bne	r3,zero,400189cc <__alt_data_end+0xc00189cc>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
400189dc:	1080040c 	andi	r2,r2,16
400189e0:	1001231e 	bne	r2,zero,40018e70 <get_home_directory_cluster_for_file+0xe5c>
		{
			result = true;
            current_sector_modified = false;
400189e4:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
400189e8:	d16fa915 	stw	r5,-16732(gp)
400189ec:	0025883a 	mov	r18,zero
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
400189f0:	d0afab17 	ldw	r2,-16724(gp)
400189f4:	10000426 	beq	r2,zero,40018a08 <get_home_directory_cluster_for_file+0x9f4>
400189f8:	d0afb317 	ldw	r2,-16692(gp)
400189fc:	1080002b 	ldhuio	r2,0(r2)
40018a00:	1080008c 	andi	r2,r2,2
40018a04:	1000b71e 	bne	r2,zero,40018ce4 <get_home_directory_cluster_for_file+0xcd0>
    {
        result = true;
    }
	else if (initialized == true)
40018a08:	d0afb517 	ldw	r2,-16684(gp)
40018a0c:	15c10126 	beq	r2,r23,40018e14 <get_home_directory_cluster_for_file+0xe00>
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
40018a10:	a8800003 	ldbu	r2,0(r21)
40018a14:	10c03fcc 	andi	r3,r2,255
40018a18:	1f00a626 	beq	r3,fp,40018cb4 <get_home_directory_cluster_for_file+0xca0>
40018a1c:	1800a526 	beq	r3,zero,40018cb4 <get_home_directory_cluster_for_file+0xca0>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40018a20:	10ffe7c4 	addi	r3,r2,-97
40018a24:	18c03fcc 	andi	r3,r3,255
40018a28:	b0c0c12e 	bgeu	r22,r3,40018d30 <get_home_directory_cluster_for_file+0xd1c>
40018a2c:	10803fcc 	andi	r2,r2,255
40018a30:	1080201c 	xori	r2,r2,128
40018a34:	10bfe004 	addi	r2,r2,-128
40018a38:	d8c00003 	ldbu	r3,0(sp)
40018a3c:	193fe7c4 	addi	r4,r3,-97
40018a40:	21003fcc 	andi	r4,r4,255
40018a44:	b100b52e 	bgeu	r22,r4,40018d1c <get_home_directory_cluster_for_file+0xd08>
40018a48:	18c03fcc 	andi	r3,r3,255
40018a4c:	18c0201c 	xori	r3,r3,128
40018a50:	18ffe004 	addi	r3,r3,-128
40018a54:	10c0b41e 	bne	r2,r3,40018d28 <get_home_directory_cluster_for_file+0xd14>
40018a58:	a8800043 	ldbu	r2,1(r21)
40018a5c:	10ffe7c4 	addi	r3,r2,-97
40018a60:	18c03fcc 	andi	r3,r3,255
40018a64:	b0c0be2e 	bgeu	r22,r3,40018d60 <get_home_directory_cluster_for_file+0xd4c>
40018a68:	10c03fcc 	andi	r3,r2,255
40018a6c:	18c0201c 	xori	r3,r3,128
40018a70:	18ffe004 	addi	r3,r3,-128
40018a74:	d8800043 	ldbu	r2,1(sp)
40018a78:	113fe7c4 	addi	r4,r2,-97
40018a7c:	21003fcc 	andi	r4,r4,255
40018a80:	b100b42e 	bgeu	r22,r4,40018d54 <get_home_directory_cluster_for_file+0xd40>
40018a84:	10803fcc 	andi	r2,r2,255
40018a88:	1080201c 	xori	r2,r2,128
40018a8c:	10bfe004 	addi	r2,r2,-128
40018a90:	1880a51e 	bne	r3,r2,40018d28 <get_home_directory_cluster_for_file+0xd14>
40018a94:	a8800083 	ldbu	r2,2(r21)
40018a98:	10ffe7c4 	addi	r3,r2,-97
40018a9c:	18c03fcc 	andi	r3,r3,255
40018aa0:	b0c0bb2e 	bgeu	r22,r3,40018d90 <get_home_directory_cluster_for_file+0xd7c>
40018aa4:	10c03fcc 	andi	r3,r2,255
40018aa8:	18c0201c 	xori	r3,r3,128
40018aac:	18ffe004 	addi	r3,r3,-128
40018ab0:	d8800083 	ldbu	r2,2(sp)
40018ab4:	113fe7c4 	addi	r4,r2,-97
40018ab8:	21003fcc 	andi	r4,r4,255
40018abc:	b100b12e 	bgeu	r22,r4,40018d84 <get_home_directory_cluster_for_file+0xd70>
40018ac0:	10803fcc 	andi	r2,r2,255
40018ac4:	1080201c 	xori	r2,r2,128
40018ac8:	10bfe004 	addi	r2,r2,-128
40018acc:	1880961e 	bne	r3,r2,40018d28 <get_home_directory_cluster_for_file+0xd14>
40018ad0:	a88000c3 	ldbu	r2,3(r21)
40018ad4:	10ffe7c4 	addi	r3,r2,-97
40018ad8:	18c03fcc 	andi	r3,r3,255
40018adc:	b0c0b22e 	bgeu	r22,r3,40018da8 <get_home_directory_cluster_for_file+0xd94>
40018ae0:	10c03fcc 	andi	r3,r2,255
40018ae4:	18c0201c 	xori	r3,r3,128
40018ae8:	18ffe004 	addi	r3,r3,-128
40018aec:	d88000c3 	ldbu	r2,3(sp)
40018af0:	113fe7c4 	addi	r4,r2,-97
40018af4:	21003fcc 	andi	r4,r4,255
40018af8:	b100a82e 	bgeu	r22,r4,40018d9c <get_home_directory_cluster_for_file+0xd88>
40018afc:	10803fcc 	andi	r2,r2,255
40018b00:	1080201c 	xori	r2,r2,128
40018b04:	10bfe004 	addi	r2,r2,-128
40018b08:	1880871e 	bne	r3,r2,40018d28 <get_home_directory_cluster_for_file+0xd14>
40018b0c:	a8800103 	ldbu	r2,4(r21)
40018b10:	10ffe7c4 	addi	r3,r2,-97
40018b14:	18c03fcc 	andi	r3,r3,255
40018b18:	b0c0a92e 	bgeu	r22,r3,40018dc0 <get_home_directory_cluster_for_file+0xdac>
40018b1c:	10c03fcc 	andi	r3,r2,255
40018b20:	18c0201c 	xori	r3,r3,128
40018b24:	18ffe004 	addi	r3,r3,-128
40018b28:	d8800103 	ldbu	r2,4(sp)
40018b2c:	113fe7c4 	addi	r4,r2,-97
40018b30:	21003fcc 	andi	r4,r4,255
40018b34:	b1009f2e 	bgeu	r22,r4,40018db4 <get_home_directory_cluster_for_file+0xda0>
40018b38:	10803fcc 	andi	r2,r2,255
40018b3c:	1080201c 	xori	r2,r2,128
40018b40:	10bfe004 	addi	r2,r2,-128
40018b44:	1880781e 	bne	r3,r2,40018d28 <get_home_directory_cluster_for_file+0xd14>
40018b48:	a8800143 	ldbu	r2,5(r21)
40018b4c:	10ffe7c4 	addi	r3,r2,-97
40018b50:	18c03fcc 	andi	r3,r3,255
40018b54:	b0c0a02e 	bgeu	r22,r3,40018dd8 <get_home_directory_cluster_for_file+0xdc4>
40018b58:	10c03fcc 	andi	r3,r2,255
40018b5c:	18c0201c 	xori	r3,r3,128
40018b60:	18ffe004 	addi	r3,r3,-128
40018b64:	d8800143 	ldbu	r2,5(sp)
40018b68:	113fe7c4 	addi	r4,r2,-97
40018b6c:	21003fcc 	andi	r4,r4,255
40018b70:	b100962e 	bgeu	r22,r4,40018dcc <get_home_directory_cluster_for_file+0xdb8>
40018b74:	10803fcc 	andi	r2,r2,255
40018b78:	1080201c 	xori	r2,r2,128
40018b7c:	10bfe004 	addi	r2,r2,-128
40018b80:	1880691e 	bne	r3,r2,40018d28 <get_home_directory_cluster_for_file+0xd14>
40018b84:	a8800183 	ldbu	r2,6(r21)
40018b88:	10ffe7c4 	addi	r3,r2,-97
40018b8c:	18c03fcc 	andi	r3,r3,255
40018b90:	b0c0972e 	bgeu	r22,r3,40018df0 <get_home_directory_cluster_for_file+0xddc>
40018b94:	10c03fcc 	andi	r3,r2,255
40018b98:	18c0201c 	xori	r3,r3,128
40018b9c:	18ffe004 	addi	r3,r3,-128
40018ba0:	d8800183 	ldbu	r2,6(sp)
40018ba4:	113fe7c4 	addi	r4,r2,-97
40018ba8:	21003fcc 	andi	r4,r4,255
40018bac:	b1008d2e 	bgeu	r22,r4,40018de4 <get_home_directory_cluster_for_file+0xdd0>
40018bb0:	10803fcc 	andi	r2,r2,255
40018bb4:	1080201c 	xori	r2,r2,128
40018bb8:	10bfe004 	addi	r2,r2,-128
40018bbc:	18805a1e 	bne	r3,r2,40018d28 <get_home_directory_cluster_for_file+0xd14>
40018bc0:	a88001c3 	ldbu	r2,7(r21)
40018bc4:	10ffe7c4 	addi	r3,r2,-97
40018bc8:	18c03fcc 	andi	r3,r3,255
40018bcc:	b0c08e2e 	bgeu	r22,r3,40018e08 <get_home_directory_cluster_for_file+0xdf4>
40018bd0:	10803fcc 	andi	r2,r2,255
40018bd4:	1080201c 	xori	r2,r2,128
40018bd8:	10bfe004 	addi	r2,r2,-128
40018bdc:	d8c001c3 	ldbu	r3,7(sp)
40018be0:	193fe7c4 	addi	r4,r3,-97
40018be4:	21003fcc 	andi	r4,r4,255
40018be8:	b100842e 	bgeu	r22,r4,40018dfc <get_home_directory_cluster_for_file+0xde8>
40018bec:	18c03fcc 	andi	r3,r3,255
40018bf0:	18c0201c 	xori	r3,r3,128
40018bf4:	18ffe004 	addi	r3,r3,-128
        {
            match = false;
40018bf8:	10c5003a 	cmpeq	r2,r2,r3
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
40018bfc:	a8c00203 	ldbu	r3,8(r21)
40018c00:	193fe7c4 	addi	r4,r3,-97
40018c04:	21003fcc 	andi	r4,r4,255
40018c08:	b100412e 	bgeu	r22,r4,40018d10 <get_home_directory_cluster_for_file+0xcfc>
40018c0c:	19003fcc 	andi	r4,r3,255
40018c10:	2100201c 	xori	r4,r4,128
40018c14:	213fe004 	addi	r4,r4,-128
40018c18:	d8c00203 	ldbu	r3,8(sp)
40018c1c:	197fe7c4 	addi	r5,r3,-97
40018c20:	29403fcc 	andi	r5,r5,255
40018c24:	b140372e 	bgeu	r22,r5,40018d04 <get_home_directory_cluster_for_file+0xcf0>
40018c28:	18c03fcc 	andi	r3,r3,255
40018c2c:	18c0201c 	xori	r3,r3,128
40018c30:	18ffe004 	addi	r3,r3,-128
40018c34:	20c01f1e 	bne	r4,r3,40018cb4 <get_home_directory_cluster_for_file+0xca0>
40018c38:	a8c00243 	ldbu	r3,9(r21)
40018c3c:	193fe7c4 	addi	r4,r3,-97
40018c40:	21003fcc 	andi	r4,r4,255
40018c44:	b100402e 	bgeu	r22,r4,40018d48 <get_home_directory_cluster_for_file+0xd34>
40018c48:	19003fcc 	andi	r4,r3,255
40018c4c:	2100201c 	xori	r4,r4,128
40018c50:	213fe004 	addi	r4,r4,-128
40018c54:	d8c00243 	ldbu	r3,9(sp)
40018c58:	197fe7c4 	addi	r5,r3,-97
40018c5c:	29403fcc 	andi	r5,r5,255
40018c60:	b140362e 	bgeu	r22,r5,40018d3c <get_home_directory_cluster_for_file+0xd28>
40018c64:	18c03fcc 	andi	r3,r3,255
40018c68:	18c0201c 	xori	r3,r3,128
40018c6c:	18ffe004 	addi	r3,r3,-128
40018c70:	20c0101e 	bne	r4,r3,40018cb4 <get_home_directory_cluster_for_file+0xca0>
40018c74:	a8c00283 	ldbu	r3,10(r21)
40018c78:	193fe7c4 	addi	r4,r3,-97
40018c7c:	21003fcc 	andi	r4,r4,255
40018c80:	b1003d2e 	bgeu	r22,r4,40018d78 <get_home_directory_cluster_for_file+0xd64>
40018c84:	19003fcc 	andi	r4,r3,255
40018c88:	2100201c 	xori	r4,r4,128
40018c8c:	213fe004 	addi	r4,r4,-128
40018c90:	d8c00283 	ldbu	r3,10(sp)
40018c94:	197fe7c4 	addi	r5,r3,-97
40018c98:	29403fcc 	andi	r5,r5,255
40018c9c:	b140332e 	bgeu	r22,r5,40018d6c <get_home_directory_cluster_for_file+0xd58>
40018ca0:	18c03fcc 	andi	r3,r3,255
40018ca4:	18c0201c 	xori	r3,r3,128
40018ca8:	18ffe004 	addi	r3,r3,-128
40018cac:	20c0011e 	bne	r4,r3,40018cb4 <get_home_directory_cluster_for_file+0xca0>
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
                                if (match)
40018cb0:	1000651e 	bne	r2,zero,40018e48 <get_home_directory_cluster_for_file+0xe34>
40018cb4:	94800804 	addi	r18,r18,32
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
40018cb8:	94ff4d1e 	bne	r18,r19,400189f0 <__alt_data_end+0xc00189f0>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
40018cbc:	01100134 	movhi	r4,16388
40018cc0:	2114ae04 	addi	r4,r4,21176
40018cc4:	20800383 	ldbu	r2,14(r4)
40018cc8:	a5000044 	addi	r20,r20,1
40018ccc:	a080780e 	bge	r20,r2,40018eb0 <get_home_directory_cluster_for_file+0xe9c>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
40018cd0:	d0efad17 	ldw	r3,-16716(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40018cd4:	d12fab17 	ldw	r4,-16724(gp)
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
40018cd8:	180b883a 	mov	r5,r3
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40018cdc:	203f031e 	bne	r4,zero,400188ec <__alt_data_end+0xc00188ec>
40018ce0:	003f0906 	br	40018908 <__alt_data_end+0xc0018908>

bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
40018ce4:	d0afb417 	ldw	r2,-16688(gp)
40018ce8:	103f4926 	beq	r2,zero,40018a10 <__alt_data_end+0xc0018a10>
40018cec:	a00f883a 	mov	r7,r20
40018cf0:	800d883a 	mov	r6,r16
40018cf4:	a80b883a 	mov	r5,r21
40018cf8:	9009883a 	mov	r4,r18
40018cfc:	00168f80 	call	400168f8 <Read_File_Record_At_Offset.part.6>
40018d00:	003f4306 	br	40018a10 <__alt_data_end+0xc0018a10>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
40018d04:	18fff804 	addi	r3,r3,-32
40018d08:	18c03fcc 	andi	r3,r3,255
40018d0c:	003fc906 	br	40018c34 <__alt_data_end+0xc0018c34>
40018d10:	18fff804 	addi	r3,r3,-32
40018d14:	19003fcc 	andi	r4,r3,255
40018d18:	003fbf06 	br	40018c18 <__alt_data_end+0xc0018c18>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40018d1c:	18fff804 	addi	r3,r3,-32
40018d20:	18c03fcc 	andi	r3,r3,255
40018d24:	10ff4c26 	beq	r2,r3,40018a58 <__alt_data_end+0xc0018a58>
        {
            match = false;
40018d28:	0005883a 	mov	r2,zero
40018d2c:	003fb306 	br	40018bfc <__alt_data_end+0xc0018bfc>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40018d30:	10bff804 	addi	r2,r2,-32
40018d34:	10803fcc 	andi	r2,r2,255
40018d38:	003f3f06 	br	40018a38 <__alt_data_end+0xc0018a38>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
40018d3c:	18fff804 	addi	r3,r3,-32
40018d40:	18c03fcc 	andi	r3,r3,255
40018d44:	003fca06 	br	40018c70 <__alt_data_end+0xc0018c70>
40018d48:	18fff804 	addi	r3,r3,-32
40018d4c:	19003fcc 	andi	r4,r3,255
40018d50:	003fc006 	br	40018c54 <__alt_data_end+0xc0018c54>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40018d54:	10bff804 	addi	r2,r2,-32
40018d58:	10803fcc 	andi	r2,r2,255
40018d5c:	003f4c06 	br	40018a90 <__alt_data_end+0xc0018a90>
40018d60:	10bff804 	addi	r2,r2,-32
40018d64:	10c03fcc 	andi	r3,r2,255
40018d68:	003f4206 	br	40018a74 <__alt_data_end+0xc0018a74>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
40018d6c:	18fff804 	addi	r3,r3,-32
40018d70:	18c03fcc 	andi	r3,r3,255
40018d74:	003fcd06 	br	40018cac <__alt_data_end+0xc0018cac>
40018d78:	18fff804 	addi	r3,r3,-32
40018d7c:	19003fcc 	andi	r4,r3,255
40018d80:	003fc306 	br	40018c90 <__alt_data_end+0xc0018c90>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40018d84:	10bff804 	addi	r2,r2,-32
40018d88:	10803fcc 	andi	r2,r2,255
40018d8c:	003f4f06 	br	40018acc <__alt_data_end+0xc0018acc>
40018d90:	10bff804 	addi	r2,r2,-32
40018d94:	10c03fcc 	andi	r3,r2,255
40018d98:	003f4506 	br	40018ab0 <__alt_data_end+0xc0018ab0>
40018d9c:	10bff804 	addi	r2,r2,-32
40018da0:	10803fcc 	andi	r2,r2,255
40018da4:	003f5806 	br	40018b08 <__alt_data_end+0xc0018b08>
40018da8:	10bff804 	addi	r2,r2,-32
40018dac:	10c03fcc 	andi	r3,r2,255
40018db0:	003f4e06 	br	40018aec <__alt_data_end+0xc0018aec>
40018db4:	10bff804 	addi	r2,r2,-32
40018db8:	10803fcc 	andi	r2,r2,255
40018dbc:	003f6106 	br	40018b44 <__alt_data_end+0xc0018b44>
40018dc0:	10bff804 	addi	r2,r2,-32
40018dc4:	10c03fcc 	andi	r3,r2,255
40018dc8:	003f5706 	br	40018b28 <__alt_data_end+0xc0018b28>
40018dcc:	10bff804 	addi	r2,r2,-32
40018dd0:	10803fcc 	andi	r2,r2,255
40018dd4:	003f6a06 	br	40018b80 <__alt_data_end+0xc0018b80>
40018dd8:	10bff804 	addi	r2,r2,-32
40018ddc:	10c03fcc 	andi	r3,r2,255
40018de0:	003f6006 	br	40018b64 <__alt_data_end+0xc0018b64>
40018de4:	10bff804 	addi	r2,r2,-32
40018de8:	10803fcc 	andi	r2,r2,255
40018dec:	003f7306 	br	40018bbc <__alt_data_end+0xc0018bbc>
40018df0:	10bff804 	addi	r2,r2,-32
40018df4:	10c03fcc 	andi	r3,r2,255
40018df8:	003f6906 	br	40018ba0 <__alt_data_end+0xc0018ba0>
40018dfc:	18fff804 	addi	r3,r3,-32
40018e00:	18c03fcc 	andi	r3,r3,255
40018e04:	003f7c06 	br	40018bf8 <__alt_data_end+0xc0018bf8>
40018e08:	10bff804 	addi	r2,r2,-32
40018e0c:	10803fcc 	andi	r2,r2,255
40018e10:	003f7206 	br	40018bdc <__alt_data_end+0xc0018bdc>
40018e14:	00900134 	movhi	r2,16388
40018e18:	1094d204 	addi	r2,r2,21320
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
40018e1c:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
40018e20:	88000415 	stw	zero,16(r17)
		is_sd_card_formated_as_FAT16 = false;
40018e24:	d02fb415 	stw	zero,-16688(gp)
40018e28:	10ffff04 	addi	r3,r2,-4
40018e2c:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40018e30:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40018e34:	18000015 	stw	zero,0(r3)
40018e38:	10801004 	addi	r2,r2,64
40018e3c:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40018e40:	20bffb1e 	bne	r4,r2,40018e30 <__alt_data_end+0xc0018e30>
40018e44:	003ef206 	br	40018a10 <__alt_data_end+0xc0018a10>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
                                if (match)
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
40018e48:	a880058b 	ldhu	r2,22(r21)
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
40018e4c:	143f9b26 	beq	r2,r16,40018cbc <__alt_data_end+0xc0018cbc>
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
            if (new_cluster != home_dir_cluster)
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
                start_location = start_location+location+1;
40018e50:	d8c00517 	ldw	r3,20(sp)
40018e54:	d9000417 	ldw	r4,16(sp)
40018e58:	1021883a 	mov	r16,r2
40018e5c:	1929883a 	add	r20,r3,r4
40018e60:	a5000044 	addi	r20,r20,1
40018e64:	dd000515 	stw	r20,20(sp)
40018e68:	a009883a 	mov	r4,r20
40018e6c:	003e5306 	br	400187bc <__alt_data_end+0xc00187bc>
40018e70:	d1efa917 	ldw	r7,-16732(gp)
40018e74:	d0efad17 	ldw	r3,-16716(gp)
40018e78:	003ebb06 	br	40018968 <__alt_data_end+0xc0018968>
40018e7c:	00900134 	movhi	r2,16388
40018e80:	1094d204 	addi	r2,r2,21320
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
40018e84:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
40018e88:	88000415 	stw	zero,16(r17)
		is_sd_card_formated_as_FAT16 = false;
40018e8c:	d02fb415 	stw	zero,-16688(gp)
40018e90:	113fff04 	addi	r4,r2,-4
40018e94:	11414004 	addi	r5,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40018e98:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40018e9c:	20000015 	stw	zero,0(r4)
40018ea0:	10801004 	addi	r2,r2,64
40018ea4:	21001004 	addi	r4,r4,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40018ea8:	28bffb1e 	bne	r5,r2,40018e98 <__alt_data_end+0xc0018e98>
40018eac:	003eae06 	br	40018968 <__alt_data_end+0xc0018968>
40018eb0:	d16fad17 	ldw	r5,-16716(gp)
40018eb4:	003e6506 	br	4001884c <__alt_data_end+0xc001884c>
40018eb8:	d9800415 	stw	r6,16(sp)
40018ebc:	3011883a 	mov	r8,r6
40018ec0:	003c7b06 	br	400180b0 <__alt_data_end+0xc00180b0>
        }
        
        if (home_dir_cluster == 0)
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
40018ec4:	000797c0 	call	4000797c <__divsi3>
40018ec8:	d8800315 	stw	r2,12(sp)
40018ecc:	1007883a 	mov	r3,r2
40018ed0:	003ca706 	br	40018170 <__alt_data_end+0xc0018170>
        {
            break;
        }
    }
    
    if (index == length)
40018ed4:	103e4d26 	beq	r2,zero,4001880c <__alt_data_end+0xc001880c>
40018ed8:	0005883a 	mov	r2,zero
40018edc:	003e4c06 	br	40018810 <__alt_data_end+0xc0018810>

40018ee0 <find_file_in_directory>:
}


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
40018ee0:	defff104 	addi	sp,sp,-60
40018ee4:	dc400615 	stw	r17,24(sp)
40018ee8:	2023883a 	mov	r17,r4

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
40018eec:	2809883a 	mov	r4,r5
}


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
40018ef0:	df000d15 	stw	fp,52(sp)
40018ef4:	dd800b15 	stw	r22,44(sp)
40018ef8:	dd400a15 	stw	r21,40(sp)
40018efc:	dfc00e15 	stw	ra,56(sp)
40018f00:	ddc00c15 	stw	r23,48(sp)
40018f04:	dd000915 	stw	r20,36(sp)
40018f08:	dcc00815 	stw	r19,32(sp)
40018f0c:	dc800715 	stw	r18,28(sp)
40018f10:	dc000515 	stw	r16,20(sp)
40018f14:	282b883a 	mov	r21,r5
40018f18:	3039883a 	mov	fp,r6

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
40018f1c:	000c9ec0 	call	4000c9ec <strlen>
40018f20:	102d883a 	mov	r22,r2
    
    for(index = 0; index < length; index++)
40018f24:	00800e0e 	bge	zero,r2,40018f60 <find_file_in_directory+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
40018f28:	a8800007 	ldb	r2,0(r21)
40018f2c:	01801704 	movi	r6,92
40018f30:	11800b26 	beq	r2,r6,40018f60 <find_file_in_directory+0x80>
40018f34:	01400bc4 	movi	r5,47
40018f38:	11400926 	beq	r2,r5,40018f60 <find_file_in_directory+0x80>
40018f3c:	a8800044 	addi	r2,r21,1
40018f40:	0007883a 	mov	r3,zero
40018f44:	00000406 	br	40018f58 <find_file_in_directory+0x78>
40018f48:	11000007 	ldb	r4,0(r2)
40018f4c:	10800044 	addi	r2,r2,1
40018f50:	21805c26 	beq	r4,r6,400190c4 <find_file_in_directory+0x1e4>
40018f54:	21405b26 	beq	r4,r5,400190c4 <find_file_in_directory+0x1e4>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
40018f58:	18c00044 	addi	r3,r3,1
40018f5c:	b0fffa1e 	bne	r22,r3,40018f48 <__alt_data_end+0xc0018f48>
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
40018f60:	00c80834 	movhi	r3,8224
    char extension[3] = { ' ', ' ', ' ' };
40018f64:	00800804 	movi	r2,32
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
40018f68:	18c80804 	addi	r3,r3,8224
    char extension[3] = { ' ', ' ', ' ' };
40018f6c:	d8800205 	stb	r2,8(sp)
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
40018f70:	d8c00015 	stw	r3,0(sp)
40018f74:	d8c00115 	stw	r3,4(sp)
    char extension[3] = { ' ', ' ', ' ' };
40018f78:	d8800245 	stb	r2,9(sp)
40018f7c:	d8800285 	stb	r2,10(sp)

bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
40018f80:	0029883a 	mov	r20,zero
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
40018f84:	a580180e 	bge	r20,r22,40018fe8 <find_file_in_directory+0x108>
40018f88:	ad05883a 	add	r2,r21,r20
40018f8c:	d809883a 	mov	r4,sp
40018f90:	01bfffc4 	movi	r6,-1
    {
        if (file_name[index] == '.')
40018f94:	02000b84 	movi	r8,46
40018f98:	00000606 	br	40018fb4 <find_file_in_directory+0xd4>
        {
            ext_index = index;
        }
        else if (ext_index < 0)
40018f9c:	30006716 	blt	r6,zero,4001913c <find_file_in_directory+0x25c>
        {
            name[index-last_dir_separator] = file_name[index];
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
40018fa0:	19400005 	stb	r5,0(r3)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
40018fa4:	a5000044 	addi	r20,r20,1
40018fa8:	10800044 	addi	r2,r2,1
40018fac:	21000044 	addi	r4,r4,1
40018fb0:	a5800d26 	beq	r20,r22,40018fe8 <find_file_in_directory+0x108>
    {
        if (file_name[index] == '.')
40018fb4:	11400003 	ldbu	r5,0(r2)
        {
            name[index-last_dir_separator] = file_name[index];
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
40018fb8:	d9c001c4 	addi	r7,sp,7
40018fbc:	a187c83a 	sub	r3,r20,r6
40018fc0:	38c7883a 	add	r3,r7,r3
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
    {
        if (file_name[index] == '.')
40018fc4:	29c03fcc 	andi	r7,r5,255
40018fc8:	39c0201c 	xori	r7,r7,128
40018fcc:	39ffe004 	addi	r7,r7,-128
40018fd0:	3a3ff21e 	bne	r7,r8,40018f9c <__alt_data_end+0xc0018f9c>
40018fd4:	a00d883a 	mov	r6,r20
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
40018fd8:	a5000044 	addi	r20,r20,1
40018fdc:	10800044 	addi	r2,r2,1
40018fe0:	21000044 	addi	r4,r4,1
40018fe4:	a5bff31e 	bne	r20,r22,40018fb4 <__alt_data_end+0xc0018fb4>

    // Look for the file.
    if (directory_start_cluster == 0)
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
40018fe8:	00900134 	movhi	r2,16388
40018fec:	1094ae04 	addi	r2,r2,21176
40018ff0:	d8800315 	stw	r2,12(sp)
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
40018ff4:	8801d826 	beq	r17,zero,40019758 <find_file_in_directory+0x878>
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
40018ff8:	04900134 	movhi	r18,16388

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
40018ffc:	05c00044 	movi	r23,1
	{
		int index;

		initialized = false;
		search_data.valid = false;
40019000:	9494a904 	addi	r18,r18,21156
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
40019004:	05803944 	movi	r22,229
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40019008:	04000644 	movi	r16,25
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
4001900c:	d8c00317 	ldw	r3,12(sp)
40019010:	18800383 	ldbu	r2,14(r3)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
40019014:	1001ce26 	beq	r2,zero,40019750 <find_file_in_directory+0x870>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
40019018:	d16fad17 	ldw	r5,-16716(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
4001901c:	d0efab17 	ldw	r3,-16724(gp)
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
40019020:	280d883a 	mov	r6,r5
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40019024:	18001026 	beq	r3,zero,40019068 <find_file_in_directory+0x188>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
40019028:	01900134 	movhi	r6,16388
4001902c:	8d3fff84 	addi	r20,r17,-2
40019030:	3194ae04 	addi	r6,r6,21176
40019034:	a085383a 	mul	r2,r20,r2
40019038:	31001417 	ldw	r4,80(r6)
4001903c:	0029883a 	mov	r20,zero
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
40019040:	05408004 	movi	r21,512
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
40019044:	1109883a 	add	r4,r2,r4
40019048:	d9000415 	stw	r4,16(sp)
4001904c:	d9c00417 	ldw	r7,16(sp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40019050:	d12fb317 	ldw	r4,-16692(gp)
40019054:	3d0d883a 	add	r6,r7,r20
40019058:	2080002b 	ldhuio	r2,0(r4)
4001905c:	1080008c 	andi	r2,r2,2
40019060:	1000381e 	bne	r2,zero,40019144 <find_file_in_directory+0x264>
40019064:	280d883a 	mov	r6,r5
    {
        result = true;
    }
	else if (initialized == true)
40019068:	d0afb517 	ldw	r2,-16684(gp)
4001906c:	15c11d26 	beq	r2,r23,400194e4 <find_file_in_directory+0x604>
40019070:	d1efa917 	ldw	r7,-16732(gp)
bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
40019074:	d8c00317 	ldw	r3,12(sp)
40019078:	8804d23a 	srli	r2,r17,8
4001907c:	19001117 	ldw	r4,68(r3)
40019080:	118d883a 	add	r6,r2,r6
40019084:	3109883a 	add	r4,r6,r4
     
    if (sector_index != current_sector_index)
40019088:	21c00326 	beq	r4,r7,40019098 <find_file_in_directory+0x1b8>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
4001908c:	000b883a 	mov	r5,zero
40019090:	0016c100 	call	40016c10 <Read_Sector_Data>
40019094:	10000926 	beq	r2,zero,400190bc <find_file_in_directory+0x1dc>
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
40019098:	d0afab17 	ldw	r2,-16724(gp)
4001909c:	8c403fcc 	andi	r17,r17,255
400190a0:	8c63883a 	add	r17,r17,r17
400190a4:	10800a17 	ldw	r2,40(r2)
400190a8:	88a3883a 	add	r17,r17,r2
400190ac:	8c40002b 	ldhuio	r17,0(r17)
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
400190b0:	00bffe14 	movui	r2,65528
400190b4:	8c7ffe0c 	andi	r17,r17,65528
400190b8:	88bfd41e 	bne	r17,r2,4001900c <__alt_data_end+0xc001900c>

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
        {
            match = false;
400190bc:	0005883a 	mov	r2,zero
400190c0:	00018706 	br	400196e0 <find_file_in_directory+0x800>
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
400190c4:	01080834 	movhi	r4,8224
    char extension[3] = { ' ', ' ', ' ' };
400190c8:	00800804 	movi	r2,32
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
400190cc:	21080804 	addi	r4,r4,8224
    char extension[3] = { ' ', ' ', ' ' };
400190d0:	d8800205 	stb	r2,8(sp)
bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    int location = get_dir_divider_location( file_name );
    int last_dir_separator = 0;
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
400190d4:	d9000015 	stw	r4,0(sp)
400190d8:	d9000115 	stw	r4,4(sp)
    char extension[3] = { ' ', ' ', ' ' };
400190dc:	d8800245 	stb	r2,9(sp)
400190e0:	d8800285 	stb	r2,10(sp)
    int ext_index = -1;
    int cluster = directory_start_cluster;
    int index;
	int length = strlen(file_name);
400190e4:	0029883a 	mov	r20,zero
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
    {
        if ((name[index] == '\\') || (name[index] == '/'))
400190e8:	04801704 	movi	r18,92
400190ec:	04c00bc4 	movi	r19,47
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
    {
        last_dir_separator = last_dir_separator+location+1;
400190f0:	1d29883a 	add	r20,r3,r20
400190f4:	a5000044 	addi	r20,r20,1
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
400190f8:	ad21883a 	add	r16,r21,r20

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
400190fc:	8009883a 	mov	r4,r16
40019100:	000c9ec0 	call	4000c9ec <strlen>
    
    for(index = 0; index < length; index++)
40019104:	00bf9f0e 	bge	zero,r2,40018f84 <__alt_data_end+0xc0018f84>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
40019108:	80c00007 	ldb	r3,0(r16)
4001910c:	1cbf9d26 	beq	r3,r18,40018f84 <__alt_data_end+0xc0018f84>
40019110:	1cff9c26 	beq	r3,r19,40018f84 <__alt_data_end+0xc0018f84>
40019114:	81000044 	addi	r4,r16,1
40019118:	0007883a 	mov	r3,zero
4001911c:	00000406 	br	40019130 <find_file_in_directory+0x250>
40019120:	21800007 	ldb	r6,0(r4)
40019124:	21000044 	addi	r4,r4,1
40019128:	34bff126 	beq	r6,r18,400190f0 <__alt_data_end+0xc00190f0>
4001912c:	34fff026 	beq	r6,r19,400190f0 <__alt_data_end+0xc00190f0>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
40019130:	18c00044 	addi	r3,r3,1
40019134:	10fffa1e 	bne	r2,r3,40019120 <__alt_data_end+0xc0019120>
40019138:	003f9206 	br	40018f84 <__alt_data_end+0xc0018f84>
        {
            ext_index = index;
        }
        else if (ext_index < 0)
        {
            name[index-last_dir_separator] = file_name[index];
4001913c:	21400005 	stb	r5,0(r4)
40019140:	003f9806 	br	40018fa4 <__alt_data_end+0xc0018fa4>
	if (alt_up_sd_card_is_Present())
	{
		short int reg_state = 0xff;
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
40019144:	d0afaa17 	ldw	r2,-16728(gp)
40019148:	10001826 	beq	r2,zero,400191ac <find_file_in_directory+0x2cc>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
4001914c:	d1efa917 	ldw	r7,-16732(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40019150:	18000326 	beq	r3,zero,40019160 <find_file_in_directory+0x280>
40019154:	2080002b 	ldhuio	r2,0(r4)
40019158:	1080008c 	andi	r2,r2,2
4001915c:	1000041e 	bne	r2,zero,40019170 <find_file_in_directory+0x290>
    {
        result = true;
    }
	else if (initialized == true)
40019160:	d0afb517 	ldw	r2,-16684(gp)
40019164:	15c16d26 	beq	r2,r23,4001971c <find_file_in_directory+0x83c>
40019168:	280d883a 	mov	r6,r5
4001916c:	003fc106 	br	40019074 <__alt_data_end+0xc0019074>
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
40019170:	3804927a 	slli	r2,r7,9
40019174:	d0efaf17 	ldw	r3,-16708(gp)
40019178:	18800035 	stwio	r2,0(r3)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
4001917c:	d0afb017 	ldw	r2,-16704(gp)
40019180:	00c00604 	movi	r3,24
40019184:	10c0002d 	sthio	r3,0(r2)
40019188:	d12fb317 	ldw	r4,-16692(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
4001918c:	2080002b 	ldhuio	r2,0(r4)
40019190:	10bfffcc 	andi	r2,r2,65535
        } while ((reg_state & 0x04)!=0);
40019194:	10c0010c 	andi	r3,r2,4
40019198:	183ffc1e 	bne	r3,zero,4001918c <__alt_data_end+0xc001918c>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
4001919c:	1080040c 	andi	r2,r2,16
400191a0:	10016b1e 	bne	r2,zero,40019750 <find_file_in_directory+0x870>
        {
            result = true;
            current_sector_modified = false;
400191a4:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
400191a8:	d1efa915 	stw	r7,-16732(gp)
                return false;
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
400191ac:	314b883a 	add	r5,r6,r5
400191b0:	2806927a 	slli	r3,r5,9
400191b4:	d0afaf17 	ldw	r2,-16708(gp)
400191b8:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
400191bc:	d0afb017 	ldw	r2,-16704(gp)
400191c0:	00c00444 	movi	r3,17
400191c4:	10c0002d 	sthio	r3,0(r2)
400191c8:	d12fb317 	ldw	r4,-16692(gp)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
400191cc:	2080002b 	ldhuio	r2,0(r4)
400191d0:	10bfffcc 	andi	r2,r2,65535
		} while ((reg_state & 0x04)!=0);
400191d4:	10c0010c 	andi	r3,r2,4
400191d8:	183ffc1e 	bne	r3,zero,400191cc <__alt_data_end+0xc00191cc>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
400191dc:	1080040c 	andi	r2,r2,16
400191e0:	10014b1e 	bne	r2,zero,40019710 <find_file_in_directory+0x830>
		{
			result = true;
            current_sector_modified = false;
400191e4:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
400191e8:	d16fa915 	stw	r5,-16732(gp)
400191ec:	0027883a 	mov	r19,zero
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
400191f0:	d0afab17 	ldw	r2,-16724(gp)
400191f4:	10000426 	beq	r2,zero,40019208 <find_file_in_directory+0x328>
400191f8:	d0afb317 	ldw	r2,-16692(gp)
400191fc:	1080002b 	ldhuio	r2,0(r2)
40019200:	1080008c 	andi	r2,r2,2
40019204:	1000c41e 	bne	r2,zero,40019518 <find_file_in_directory+0x638>
    {
        result = true;
    }
	else if (initialized == true)
40019208:	d0afb517 	ldw	r2,-16684(gp)
4001920c:	15c12626 	beq	r2,r23,400196a8 <find_file_in_directory+0x7c8>
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
40019210:	e0800003 	ldbu	r2,0(fp)
40019214:	10c03fcc 	andi	r3,r2,255
40019218:	1d80a626 	beq	r3,r22,400194b4 <find_file_in_directory+0x5d4>
4001921c:	1800a526 	beq	r3,zero,400194b4 <find_file_in_directory+0x5d4>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40019220:	10ffe7c4 	addi	r3,r2,-97
40019224:	18c03fcc 	andi	r3,r3,255
40019228:	80c0ce2e 	bgeu	r16,r3,40019564 <find_file_in_directory+0x684>
4001922c:	10803fcc 	andi	r2,r2,255
40019230:	1080201c 	xori	r2,r2,128
40019234:	10bfe004 	addi	r2,r2,-128
40019238:	d8c00003 	ldbu	r3,0(sp)
4001923c:	193fe7c4 	addi	r4,r3,-97
40019240:	21003fcc 	andi	r4,r4,255
40019244:	8100c22e 	bgeu	r16,r4,40019550 <find_file_in_directory+0x670>
40019248:	18c03fcc 	andi	r3,r3,255
4001924c:	18c0201c 	xori	r3,r3,128
40019250:	18ffe004 	addi	r3,r3,-128
40019254:	10c0c11e 	bne	r2,r3,4001955c <find_file_in_directory+0x67c>
40019258:	e0800043 	ldbu	r2,1(fp)
4001925c:	10ffe7c4 	addi	r3,r2,-97
40019260:	18c03fcc 	andi	r3,r3,255
40019264:	80c0ce2e 	bgeu	r16,r3,400195a0 <find_file_in_directory+0x6c0>
40019268:	10c03fcc 	andi	r3,r2,255
4001926c:	18c0201c 	xori	r3,r3,128
40019270:	18ffe004 	addi	r3,r3,-128
40019274:	d8800043 	ldbu	r2,1(sp)
40019278:	113fe7c4 	addi	r4,r2,-97
4001927c:	21003fcc 	andi	r4,r4,255
40019280:	8100c42e 	bgeu	r16,r4,40019594 <find_file_in_directory+0x6b4>
40019284:	10803fcc 	andi	r2,r2,255
40019288:	1080201c 	xori	r2,r2,128
4001928c:	10bfe004 	addi	r2,r2,-128
40019290:	1880b21e 	bne	r3,r2,4001955c <find_file_in_directory+0x67c>
40019294:	e0800083 	ldbu	r2,2(fp)
40019298:	10ffe7c4 	addi	r3,r2,-97
4001929c:	18c03fcc 	andi	r3,r3,255
400192a0:	80c0cb2e 	bgeu	r16,r3,400195d0 <find_file_in_directory+0x6f0>
400192a4:	10c03fcc 	andi	r3,r2,255
400192a8:	d8800083 	ldbu	r2,2(sp)
400192ac:	18c0201c 	xori	r3,r3,128
400192b0:	18ffe004 	addi	r3,r3,-128
400192b4:	113fe7c4 	addi	r4,r2,-97
400192b8:	21003fcc 	andi	r4,r4,255
400192bc:	8100ca2e 	bgeu	r16,r4,400195e8 <find_file_in_directory+0x708>
400192c0:	10803fcc 	andi	r2,r2,255
400192c4:	1080201c 	xori	r2,r2,128
400192c8:	10bfe004 	addi	r2,r2,-128
400192cc:	1880a31e 	bne	r3,r2,4001955c <find_file_in_directory+0x67c>
400192d0:	e08000c3 	ldbu	r2,3(fp)
400192d4:	10ffe7c4 	addi	r3,r2,-97
400192d8:	18c03fcc 	andi	r3,r3,255
400192dc:	80c0c52e 	bgeu	r16,r3,400195f4 <find_file_in_directory+0x714>
400192e0:	10c03fcc 	andi	r3,r2,255
400192e4:	d88000c3 	ldbu	r2,3(sp)
400192e8:	18c0201c 	xori	r3,r3,128
400192ec:	18ffe004 	addi	r3,r3,-128
400192f0:	113fe7c4 	addi	r4,r2,-97
400192f4:	21003fcc 	andi	r4,r4,255
400192f8:	8100c42e 	bgeu	r16,r4,4001960c <find_file_in_directory+0x72c>
400192fc:	10803fcc 	andi	r2,r2,255
40019300:	1080201c 	xori	r2,r2,128
40019304:	10bfe004 	addi	r2,r2,-128
40019308:	1880941e 	bne	r3,r2,4001955c <find_file_in_directory+0x67c>
4001930c:	e0800103 	ldbu	r2,4(fp)
40019310:	10ffe7c4 	addi	r3,r2,-97
40019314:	18c03fcc 	andi	r3,r3,255
40019318:	80c0bf2e 	bgeu	r16,r3,40019618 <find_file_in_directory+0x738>
4001931c:	10c03fcc 	andi	r3,r2,255
40019320:	d8800103 	ldbu	r2,4(sp)
40019324:	18c0201c 	xori	r3,r3,128
40019328:	18ffe004 	addi	r3,r3,-128
4001932c:	113fe7c4 	addi	r4,r2,-97
40019330:	21003fcc 	andi	r4,r4,255
40019334:	8100be2e 	bgeu	r16,r4,40019630 <find_file_in_directory+0x750>
40019338:	10803fcc 	andi	r2,r2,255
4001933c:	1080201c 	xori	r2,r2,128
40019340:	10bfe004 	addi	r2,r2,-128
40019344:	1880851e 	bne	r3,r2,4001955c <find_file_in_directory+0x67c>
40019348:	e0800143 	ldbu	r2,5(fp)
4001934c:	10ffe7c4 	addi	r3,r2,-97
40019350:	18c03fcc 	andi	r3,r3,255
40019354:	80c0b92e 	bgeu	r16,r3,4001963c <find_file_in_directory+0x75c>
40019358:	10c03fcc 	andi	r3,r2,255
4001935c:	d8800143 	ldbu	r2,5(sp)
40019360:	18c0201c 	xori	r3,r3,128
40019364:	18ffe004 	addi	r3,r3,-128
40019368:	113fe7c4 	addi	r4,r2,-97
4001936c:	21003fcc 	andi	r4,r4,255
40019370:	8100b82e 	bgeu	r16,r4,40019654 <find_file_in_directory+0x774>
40019374:	10803fcc 	andi	r2,r2,255
40019378:	1080201c 	xori	r2,r2,128
4001937c:	10bfe004 	addi	r2,r2,-128
40019380:	1880761e 	bne	r3,r2,4001955c <find_file_in_directory+0x67c>
40019384:	e0800183 	ldbu	r2,6(fp)
40019388:	10ffe7c4 	addi	r3,r2,-97
4001938c:	18c03fcc 	andi	r3,r3,255
40019390:	80c0b32e 	bgeu	r16,r3,40019660 <find_file_in_directory+0x780>
40019394:	10c03fcc 	andi	r3,r2,255
40019398:	d8800183 	ldbu	r2,6(sp)
4001939c:	18c0201c 	xori	r3,r3,128
400193a0:	18ffe004 	addi	r3,r3,-128
400193a4:	113fe7c4 	addi	r4,r2,-97
400193a8:	21003fcc 	andi	r4,r4,255
400193ac:	8100b22e 	bgeu	r16,r4,40019678 <find_file_in_directory+0x798>
400193b0:	10803fcc 	andi	r2,r2,255
400193b4:	1080201c 	xori	r2,r2,128
400193b8:	10bfe004 	addi	r2,r2,-128
400193bc:	1880671e 	bne	r3,r2,4001955c <find_file_in_directory+0x67c>
400193c0:	e08001c3 	ldbu	r2,7(fp)
400193c4:	10ffe7c4 	addi	r3,r2,-97
400193c8:	18c03fcc 	andi	r3,r3,255
400193cc:	80c0ad2e 	bgeu	r16,r3,40019684 <find_file_in_directory+0x7a4>
400193d0:	d8c001c3 	ldbu	r3,7(sp)
400193d4:	10803fcc 	andi	r2,r2,255
400193d8:	1080201c 	xori	r2,r2,128
400193dc:	193fe7c4 	addi	r4,r3,-97
400193e0:	21003fcc 	andi	r4,r4,255
400193e4:	10bfe004 	addi	r2,r2,-128
400193e8:	8100ac2e 	bgeu	r16,r4,4001969c <find_file_in_directory+0x7bc>
400193ec:	18c03fcc 	andi	r3,r3,255
400193f0:	18c0201c 	xori	r3,r3,128
400193f4:	18ffe004 	addi	r3,r3,-128
        {
            match = false;
400193f8:	10c5003a 	cmpeq	r2,r2,r3
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
400193fc:	e0c00203 	ldbu	r3,8(fp)
40019400:	193fe7c4 	addi	r4,r3,-97
40019404:	21003fcc 	andi	r4,r4,255
40019408:	81004e2e 	bgeu	r16,r4,40019544 <find_file_in_directory+0x664>
4001940c:	19003fcc 	andi	r4,r3,255
40019410:	2100201c 	xori	r4,r4,128
40019414:	213fe004 	addi	r4,r4,-128
40019418:	d8c00203 	ldbu	r3,8(sp)
4001941c:	197fe7c4 	addi	r5,r3,-97
40019420:	29403fcc 	andi	r5,r5,255
40019424:	8140442e 	bgeu	r16,r5,40019538 <find_file_in_directory+0x658>
40019428:	18c03fcc 	andi	r3,r3,255
4001942c:	18c0201c 	xori	r3,r3,128
40019430:	18ffe004 	addi	r3,r3,-128
40019434:	20c01f1e 	bne	r4,r3,400194b4 <find_file_in_directory+0x5d4>
40019438:	e0c00243 	ldbu	r3,9(fp)
4001943c:	193fe7c4 	addi	r4,r3,-97
40019440:	21003fcc 	andi	r4,r4,255
40019444:	81004a2e 	bgeu	r16,r4,40019570 <find_file_in_directory+0x690>
40019448:	19003fcc 	andi	r4,r3,255
4001944c:	d8c00243 	ldbu	r3,9(sp)
40019450:	2100201c 	xori	r4,r4,128
40019454:	213fe004 	addi	r4,r4,-128
40019458:	197fe7c4 	addi	r5,r3,-97
4001945c:	29403fcc 	andi	r5,r5,255
40019460:	8140492e 	bgeu	r16,r5,40019588 <find_file_in_directory+0x6a8>
40019464:	18c03fcc 	andi	r3,r3,255
40019468:	18c0201c 	xori	r3,r3,128
4001946c:	18ffe004 	addi	r3,r3,-128
40019470:	20c0101e 	bne	r4,r3,400194b4 <find_file_in_directory+0x5d4>
40019474:	e0c00283 	ldbu	r3,10(fp)
40019478:	193fe7c4 	addi	r4,r3,-97
4001947c:	21003fcc 	andi	r4,r4,255
40019480:	81004a2e 	bgeu	r16,r4,400195ac <find_file_in_directory+0x6cc>
40019484:	19003fcc 	andi	r4,r3,255
40019488:	d8c00283 	ldbu	r3,10(sp)
4001948c:	2100201c 	xori	r4,r4,128
40019490:	213fe004 	addi	r4,r4,-128
40019494:	197fe7c4 	addi	r5,r3,-97
40019498:	29403fcc 	andi	r5,r5,255
4001949c:	8140492e 	bgeu	r16,r5,400195c4 <find_file_in_directory+0x6e4>
400194a0:	18c03fcc 	andi	r3,r3,255
400194a4:	18c0201c 	xori	r3,r3,128
400194a8:	18ffe004 	addi	r3,r3,-128
400194ac:	20c0011e 	bne	r4,r3,400194b4 <find_file_in_directory+0x5d4>
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);

                            if (match)
400194b0:	10008a1e 	bne	r2,zero,400196dc <find_file_in_directory+0x7fc>
400194b4:	9cc00804 	addi	r19,r19,32
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
400194b8:	9d7f4d1e 	bne	r19,r21,400191f0 <__alt_data_end+0xc00191f0>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
400194bc:	d8c00317 	ldw	r3,12(sp)
400194c0:	a5000044 	addi	r20,r20,1
400194c4:	18800383 	ldbu	r2,14(r3)
400194c8:	a080a10e 	bge	r20,r2,40019750 <find_file_in_directory+0x870>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
400194cc:	d16fad17 	ldw	r5,-16716(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
400194d0:	d0efab17 	ldw	r3,-16724(gp)
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
400194d4:	280d883a 	mov	r6,r5
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
400194d8:	183edc1e 	bne	r3,zero,4001904c <__alt_data_end+0xc001904c>
    {
        result = true;
    }
	else if (initialized == true)
400194dc:	d0afb517 	ldw	r2,-16684(gp)
400194e0:	15fee31e 	bne	r2,r23,40019070 <__alt_data_end+0xc0019070>
400194e4:	00900134 	movhi	r2,16388
400194e8:	1094d204 	addi	r2,r2,21320
	{
		int index;

		initialized = false;
400194ec:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
400194f0:	90000415 	stw	zero,16(r18)
		is_sd_card_formated_as_FAT16 = false;
400194f4:	d02fb415 	stw	zero,-16688(gp)
400194f8:	10ffff04 	addi	r3,r2,-4
400194fc:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40019500:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40019504:	18000015 	stw	zero,0(r3)
40019508:	10801004 	addi	r2,r2,64
4001950c:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40019510:	20bffb1e 	bne	r4,r2,40019500 <__alt_data_end+0xc0019500>
40019514:	003ed606 	br	40019070 <__alt_data_end+0xc0019070>

bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
40019518:	d0afb417 	ldw	r2,-16688(gp)
4001951c:	103f3c26 	beq	r2,zero,40019210 <__alt_data_end+0xc0019210>
40019520:	a00f883a 	mov	r7,r20
40019524:	880d883a 	mov	r6,r17
40019528:	e00b883a 	mov	r5,fp
4001952c:	9809883a 	mov	r4,r19
40019530:	00168f80 	call	400168f8 <Read_File_Record_At_Offset.part.6>
40019534:	003f3606 	br	40019210 <__alt_data_end+0xc0019210>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
40019538:	18fff804 	addi	r3,r3,-32
4001953c:	18c03fcc 	andi	r3,r3,255
40019540:	003fbc06 	br	40019434 <__alt_data_end+0xc0019434>
40019544:	18fff804 	addi	r3,r3,-32
40019548:	19003fcc 	andi	r4,r3,255
4001954c:	003fb206 	br	40019418 <__alt_data_end+0xc0019418>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40019550:	18fff804 	addi	r3,r3,-32
40019554:	18c03fcc 	andi	r3,r3,255
40019558:	10ff3f26 	beq	r2,r3,40019258 <__alt_data_end+0xc0019258>
        {
            match = false;
4001955c:	0005883a 	mov	r2,zero
40019560:	003fa606 	br	400193fc <__alt_data_end+0xc00193fc>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40019564:	10bff804 	addi	r2,r2,-32
40019568:	10803fcc 	andi	r2,r2,255
4001956c:	003f3206 	br	40019238 <__alt_data_end+0xc0019238>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
40019570:	18fff804 	addi	r3,r3,-32
40019574:	19003fcc 	andi	r4,r3,255
40019578:	d8c00243 	ldbu	r3,9(sp)
4001957c:	197fe7c4 	addi	r5,r3,-97
40019580:	29403fcc 	andi	r5,r5,255
40019584:	817fb736 	bltu	r16,r5,40019464 <__alt_data_end+0xc0019464>
40019588:	18fff804 	addi	r3,r3,-32
4001958c:	18c03fcc 	andi	r3,r3,255
40019590:	003fb706 	br	40019470 <__alt_data_end+0xc0019470>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40019594:	10bff804 	addi	r2,r2,-32
40019598:	10803fcc 	andi	r2,r2,255
4001959c:	003f3c06 	br	40019290 <__alt_data_end+0xc0019290>
400195a0:	10bff804 	addi	r2,r2,-32
400195a4:	10c03fcc 	andi	r3,r2,255
400195a8:	003f3206 	br	40019274 <__alt_data_end+0xc0019274>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
400195ac:	18fff804 	addi	r3,r3,-32
400195b0:	19003fcc 	andi	r4,r3,255
400195b4:	d8c00283 	ldbu	r3,10(sp)
400195b8:	197fe7c4 	addi	r5,r3,-97
400195bc:	29403fcc 	andi	r5,r5,255
400195c0:	817fb736 	bltu	r16,r5,400194a0 <__alt_data_end+0xc00194a0>
400195c4:	18fff804 	addi	r3,r3,-32
400195c8:	18c03fcc 	andi	r3,r3,255
400195cc:	003fb706 	br	400194ac <__alt_data_end+0xc00194ac>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
400195d0:	10bff804 	addi	r2,r2,-32
400195d4:	10c03fcc 	andi	r3,r2,255
400195d8:	d8800083 	ldbu	r2,2(sp)
400195dc:	113fe7c4 	addi	r4,r2,-97
400195e0:	21003fcc 	andi	r4,r4,255
400195e4:	813f3636 	bltu	r16,r4,400192c0 <__alt_data_end+0xc00192c0>
400195e8:	10bff804 	addi	r2,r2,-32
400195ec:	10803fcc 	andi	r2,r2,255
400195f0:	003f3606 	br	400192cc <__alt_data_end+0xc00192cc>
400195f4:	10bff804 	addi	r2,r2,-32
400195f8:	10c03fcc 	andi	r3,r2,255
400195fc:	d88000c3 	ldbu	r2,3(sp)
40019600:	113fe7c4 	addi	r4,r2,-97
40019604:	21003fcc 	andi	r4,r4,255
40019608:	813f3c36 	bltu	r16,r4,400192fc <__alt_data_end+0xc00192fc>
4001960c:	10bff804 	addi	r2,r2,-32
40019610:	10803fcc 	andi	r2,r2,255
40019614:	003f3c06 	br	40019308 <__alt_data_end+0xc0019308>
40019618:	10bff804 	addi	r2,r2,-32
4001961c:	10c03fcc 	andi	r3,r2,255
40019620:	d8800103 	ldbu	r2,4(sp)
40019624:	113fe7c4 	addi	r4,r2,-97
40019628:	21003fcc 	andi	r4,r4,255
4001962c:	813f4236 	bltu	r16,r4,40019338 <__alt_data_end+0xc0019338>
40019630:	10bff804 	addi	r2,r2,-32
40019634:	10803fcc 	andi	r2,r2,255
40019638:	003f4206 	br	40019344 <__alt_data_end+0xc0019344>
4001963c:	10bff804 	addi	r2,r2,-32
40019640:	10c03fcc 	andi	r3,r2,255
40019644:	d8800143 	ldbu	r2,5(sp)
40019648:	113fe7c4 	addi	r4,r2,-97
4001964c:	21003fcc 	andi	r4,r4,255
40019650:	813f4836 	bltu	r16,r4,40019374 <__alt_data_end+0xc0019374>
40019654:	10bff804 	addi	r2,r2,-32
40019658:	10803fcc 	andi	r2,r2,255
4001965c:	003f4806 	br	40019380 <__alt_data_end+0xc0019380>
40019660:	10bff804 	addi	r2,r2,-32
40019664:	10c03fcc 	andi	r3,r2,255
40019668:	d8800183 	ldbu	r2,6(sp)
4001966c:	113fe7c4 	addi	r4,r2,-97
40019670:	21003fcc 	andi	r4,r4,255
40019674:	813f4e36 	bltu	r16,r4,400193b0 <__alt_data_end+0xc00193b0>
40019678:	10bff804 	addi	r2,r2,-32
4001967c:	10803fcc 	andi	r2,r2,255
40019680:	003f4e06 	br	400193bc <__alt_data_end+0xc00193bc>
40019684:	d8c001c3 	ldbu	r3,7(sp)
40019688:	10bff804 	addi	r2,r2,-32
4001968c:	10803fcc 	andi	r2,r2,255
40019690:	193fe7c4 	addi	r4,r3,-97
40019694:	21003fcc 	andi	r4,r4,255
40019698:	813f5436 	bltu	r16,r4,400193ec <__alt_data_end+0xc00193ec>
4001969c:	18fff804 	addi	r3,r3,-32
400196a0:	18c03fcc 	andi	r3,r3,255
400196a4:	003f5406 	br	400193f8 <__alt_data_end+0xc00193f8>
400196a8:	00900134 	movhi	r2,16388
400196ac:	1094d204 	addi	r2,r2,21320
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
400196b0:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
400196b4:	90000415 	stw	zero,16(r18)
		is_sd_card_formated_as_FAT16 = false;
400196b8:	d02fb415 	stw	zero,-16688(gp)
400196bc:	10ffff04 	addi	r3,r2,-4
400196c0:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
400196c4:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
400196c8:	18000015 	stw	zero,0(r3)
400196cc:	10801004 	addi	r2,r2,64
400196d0:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
400196d4:	113ffb1e 	bne	r2,r4,400196c4 <__alt_data_end+0xc00196c4>
400196d8:	003ecd06 	br	40019210 <__alt_data_end+0xc0019210>

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
        {
            match = false;
400196dc:	00800044 	movi	r2,1
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
}
400196e0:	dfc00e17 	ldw	ra,56(sp)
400196e4:	df000d17 	ldw	fp,52(sp)
400196e8:	ddc00c17 	ldw	r23,48(sp)
400196ec:	dd800b17 	ldw	r22,44(sp)
400196f0:	dd400a17 	ldw	r21,40(sp)
400196f4:	dd000917 	ldw	r20,36(sp)
400196f8:	dcc00817 	ldw	r19,32(sp)
400196fc:	dc800717 	ldw	r18,28(sp)
40019700:	dc400617 	ldw	r17,24(sp)
40019704:	dc000517 	ldw	r16,20(sp)
40019708:	dec00f04 	addi	sp,sp,60
4001970c:	f800283a 	ret
40019710:	d1efa917 	ldw	r7,-16732(gp)
40019714:	d16fad17 	ldw	r5,-16716(gp)
40019718:	003e9306 	br	40019168 <__alt_data_end+0xc0019168>
4001971c:	00900134 	movhi	r2,16388
40019720:	1094d204 	addi	r2,r2,21320
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
40019724:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
40019728:	90000415 	stw	zero,16(r18)
		is_sd_card_formated_as_FAT16 = false;
4001972c:	d02fb415 	stw	zero,-16688(gp)
40019730:	10ffff04 	addi	r3,r2,-4
40019734:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40019738:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
4001973c:	18000015 	stw	zero,0(r3)
40019740:	10801004 	addi	r2,r2,64
40019744:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40019748:	113ffb1e 	bne	r2,r4,40019738 <__alt_data_end+0xc0019738>
4001974c:	003e8606 	br	40019168 <__alt_data_end+0xc0019168>
40019750:	d1afad17 	ldw	r6,-16716(gp)
40019754:	003e4606 	br	40019070 <__alt_data_end+0xc0019070>

    // Look for the file.
    if (directory_start_cluster == 0)
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
40019758:	d8c00317 	ldw	r3,12(sp)
4001975c:	1080050b 	ldhu	r2,20(r2)
40019760:	018003c4 	movi	r6,15
40019764:	1940030b 	ldhu	r5,12(r3)
40019768:	1008917a 	slli	r4,r2,5
4001976c:	2146b03a 	or	r3,r4,r5
40019770:	30c13d36 	bltu	r6,r3,40019c68 <find_file_in_directory+0xd88>
40019774:	1004927a 	slli	r2,r2,9
40019778:	114ab03a 	or	r5,r2,r5
4001977c:	009000b4 	movhi	r2,16386
40019780:	1083f504 	addi	r2,r2,4052
40019784:	288b883a 	add	r5,r5,r2
40019788:	2c400003 	ldbu	r17,0(r5)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
4001978c:	883e4b26 	beq	r17,zero,400190bc <__alt_data_end+0xc00190bc>
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
40019790:	04d00134 	movhi	r19,16388
40019794:	9cd4a904 	addi	r19,r19,21156
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
40019798:	0025883a 	mov	r18,zero

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
4001979c:	05c00044 	movi	r23,1
                
                for (file_counter = 0; file_counter < 16; file_counter++)
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
400197a0:	05803944 	movi	r22,229
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
400197a4:	04000644 	movi	r16,25
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
400197a8:	05408004 	movi	r21,512
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
400197ac:	d8c00317 	ldw	r3,12(sp)
400197b0:	d16fad17 	ldw	r5,-16716(gp)
400197b4:	19001317 	ldw	r4,76(r3)
400197b8:	9109883a 	add	r4,r18,r4
400197bc:	0016c100 	call	40016c10 <Read_Sector_Data>
400197c0:	103e3e26 	beq	r2,zero,400190bc <__alt_data_end+0xc00190bc>
400197c4:	0029883a 	mov	r20,zero
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
400197c8:	d0afab17 	ldw	r2,-16724(gp)
400197cc:	10000426 	beq	r2,zero,400197e0 <find_file_in_directory+0x900>
400197d0:	d0afb317 	ldw	r2,-16692(gp)
400197d4:	1080002b 	ldhuio	r2,0(r2)
400197d8:	1080008c 	andi	r2,r2,2
400197dc:	1000b11e 	bne	r2,zero,40019aa4 <find_file_in_directory+0xbc4>
    {
        result = true;
    }
	else if (initialized == true)
400197e0:	d0afb517 	ldw	r2,-16684(gp)
400197e4:	15c11326 	beq	r2,r23,40019c34 <find_file_in_directory+0xd54>
                
                for (file_counter = 0; file_counter < 16; file_counter++)
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
400197e8:	e0800003 	ldbu	r2,0(fp)
400197ec:	10c03fcc 	andi	r3,r2,255
400197f0:	1d80a626 	beq	r3,r22,40019a8c <find_file_in_directory+0xbac>
400197f4:	1800a526 	beq	r3,zero,40019a8c <find_file_in_directory+0xbac>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
400197f8:	10ffe7c4 	addi	r3,r2,-97
400197fc:	18c03fcc 	andi	r3,r3,255
40019800:	80c0bb2e 	bgeu	r16,r3,40019af0 <find_file_in_directory+0xc10>
40019804:	10803fcc 	andi	r2,r2,255
40019808:	1080201c 	xori	r2,r2,128
4001980c:	10bfe004 	addi	r2,r2,-128
40019810:	d8c00003 	ldbu	r3,0(sp)
40019814:	193fe7c4 	addi	r4,r3,-97
40019818:	21003fcc 	andi	r4,r4,255
4001981c:	8100af2e 	bgeu	r16,r4,40019adc <find_file_in_directory+0xbfc>
40019820:	18c03fcc 	andi	r3,r3,255
40019824:	18c0201c 	xori	r3,r3,128
40019828:	18ffe004 	addi	r3,r3,-128
4001982c:	10c0ae1e 	bne	r2,r3,40019ae8 <find_file_in_directory+0xc08>
40019830:	e0800043 	ldbu	r2,1(fp)
40019834:	10ffe7c4 	addi	r3,r2,-97
40019838:	18c03fcc 	andi	r3,r3,255
4001983c:	80c0b82e 	bgeu	r16,r3,40019b20 <find_file_in_directory+0xc40>
40019840:	10c03fcc 	andi	r3,r2,255
40019844:	d8800043 	ldbu	r2,1(sp)
40019848:	18c0201c 	xori	r3,r3,128
4001984c:	18ffe004 	addi	r3,r3,-128
40019850:	113fe7c4 	addi	r4,r2,-97
40019854:	21003fcc 	andi	r4,r4,255
40019858:	8100b72e 	bgeu	r16,r4,40019b38 <find_file_in_directory+0xc58>
4001985c:	10803fcc 	andi	r2,r2,255
40019860:	1080201c 	xori	r2,r2,128
40019864:	10bfe004 	addi	r2,r2,-128
40019868:	18809f1e 	bne	r3,r2,40019ae8 <find_file_in_directory+0xc08>
4001986c:	e0800083 	ldbu	r2,2(fp)
40019870:	10ffe7c4 	addi	r3,r2,-97
40019874:	18c03fcc 	andi	r3,r3,255
40019878:	80c0b22e 	bgeu	r16,r3,40019b44 <find_file_in_directory+0xc64>
4001987c:	10c03fcc 	andi	r3,r2,255
40019880:	d8800083 	ldbu	r2,2(sp)
40019884:	18c0201c 	xori	r3,r3,128
40019888:	18ffe004 	addi	r3,r3,-128
4001988c:	113fe7c4 	addi	r4,r2,-97
40019890:	21003fcc 	andi	r4,r4,255
40019894:	8100b12e 	bgeu	r16,r4,40019b5c <find_file_in_directory+0xc7c>
40019898:	10803fcc 	andi	r2,r2,255
4001989c:	1080201c 	xori	r2,r2,128
400198a0:	10bfe004 	addi	r2,r2,-128
400198a4:	1880901e 	bne	r3,r2,40019ae8 <find_file_in_directory+0xc08>
400198a8:	e08000c3 	ldbu	r2,3(fp)
400198ac:	10ffe7c4 	addi	r3,r2,-97
400198b0:	18c03fcc 	andi	r3,r3,255
400198b4:	80c0b82e 	bgeu	r16,r3,40019b98 <find_file_in_directory+0xcb8>
400198b8:	10c03fcc 	andi	r3,r2,255
400198bc:	18c0201c 	xori	r3,r3,128
400198c0:	18ffe004 	addi	r3,r3,-128
400198c4:	d88000c3 	ldbu	r2,3(sp)
400198c8:	113fe7c4 	addi	r4,r2,-97
400198cc:	21003fcc 	andi	r4,r4,255
400198d0:	8100ae2e 	bgeu	r16,r4,40019b8c <find_file_in_directory+0xcac>
400198d4:	10803fcc 	andi	r2,r2,255
400198d8:	1080201c 	xori	r2,r2,128
400198dc:	10bfe004 	addi	r2,r2,-128
400198e0:	1880811e 	bne	r3,r2,40019ae8 <find_file_in_directory+0xc08>
400198e4:	e0800103 	ldbu	r2,4(fp)
400198e8:	10ffe7c4 	addi	r3,r2,-97
400198ec:	18c03fcc 	andi	r3,r3,255
400198f0:	80c0ac2e 	bgeu	r16,r3,40019ba4 <find_file_in_directory+0xcc4>
400198f4:	10c03fcc 	andi	r3,r2,255
400198f8:	d8800103 	ldbu	r2,4(sp)
400198fc:	18c0201c 	xori	r3,r3,128
40019900:	18ffe004 	addi	r3,r3,-128
40019904:	113fe7c4 	addi	r4,r2,-97
40019908:	21003fcc 	andi	r4,r4,255
4001990c:	8100ab2e 	bgeu	r16,r4,40019bbc <find_file_in_directory+0xcdc>
40019910:	10803fcc 	andi	r2,r2,255
40019914:	1080201c 	xori	r2,r2,128
40019918:	10bfe004 	addi	r2,r2,-128
4001991c:	1880721e 	bne	r3,r2,40019ae8 <find_file_in_directory+0xc08>
40019920:	e0800143 	ldbu	r2,5(fp)
40019924:	10ffe7c4 	addi	r3,r2,-97
40019928:	18c03fcc 	andi	r3,r3,255
4001992c:	80c0a62e 	bgeu	r16,r3,40019bc8 <find_file_in_directory+0xce8>
40019930:	10c03fcc 	andi	r3,r2,255
40019934:	d8800143 	ldbu	r2,5(sp)
40019938:	18c0201c 	xori	r3,r3,128
4001993c:	18ffe004 	addi	r3,r3,-128
40019940:	113fe7c4 	addi	r4,r2,-97
40019944:	21003fcc 	andi	r4,r4,255
40019948:	8100a52e 	bgeu	r16,r4,40019be0 <find_file_in_directory+0xd00>
4001994c:	10803fcc 	andi	r2,r2,255
40019950:	1080201c 	xori	r2,r2,128
40019954:	10bfe004 	addi	r2,r2,-128
40019958:	1880631e 	bne	r3,r2,40019ae8 <find_file_in_directory+0xc08>
4001995c:	e0800183 	ldbu	r2,6(fp)
40019960:	10ffe7c4 	addi	r3,r2,-97
40019964:	18c03fcc 	andi	r3,r3,255
40019968:	80c0a02e 	bgeu	r16,r3,40019bec <find_file_in_directory+0xd0c>
4001996c:	10c03fcc 	andi	r3,r2,255
40019970:	d8800183 	ldbu	r2,6(sp)
40019974:	18c0201c 	xori	r3,r3,128
40019978:	18ffe004 	addi	r3,r3,-128
4001997c:	113fe7c4 	addi	r4,r2,-97
40019980:	21003fcc 	andi	r4,r4,255
40019984:	81009f2e 	bgeu	r16,r4,40019c04 <find_file_in_directory+0xd24>
40019988:	10803fcc 	andi	r2,r2,255
4001998c:	1080201c 	xori	r2,r2,128
40019990:	10bfe004 	addi	r2,r2,-128
40019994:	1880541e 	bne	r3,r2,40019ae8 <find_file_in_directory+0xc08>
40019998:	e08001c3 	ldbu	r2,7(fp)
4001999c:	10ffe7c4 	addi	r3,r2,-97
400199a0:	18c03fcc 	andi	r3,r3,255
400199a4:	80c09a2e 	bgeu	r16,r3,40019c10 <find_file_in_directory+0xd30>
400199a8:	d8c001c3 	ldbu	r3,7(sp)
400199ac:	10803fcc 	andi	r2,r2,255
400199b0:	1080201c 	xori	r2,r2,128
400199b4:	193fe7c4 	addi	r4,r3,-97
400199b8:	21003fcc 	andi	r4,r4,255
400199bc:	10bfe004 	addi	r2,r2,-128
400199c0:	8100992e 	bgeu	r16,r4,40019c28 <find_file_in_directory+0xd48>
400199c4:	18c03fcc 	andi	r3,r3,255
400199c8:	18c0201c 	xori	r3,r3,128
400199cc:	18ffe004 	addi	r3,r3,-128
        {
            match = false;
400199d0:	10c5003a 	cmpeq	r2,r2,r3
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
400199d4:	e0c00203 	ldbu	r3,8(fp)
400199d8:	193fe7c4 	addi	r4,r3,-97
400199dc:	21003fcc 	andi	r4,r4,255
400199e0:	81003b2e 	bgeu	r16,r4,40019ad0 <find_file_in_directory+0xbf0>
400199e4:	19003fcc 	andi	r4,r3,255
400199e8:	2100201c 	xori	r4,r4,128
400199ec:	213fe004 	addi	r4,r4,-128
400199f0:	d8c00203 	ldbu	r3,8(sp)
400199f4:	197fe7c4 	addi	r5,r3,-97
400199f8:	29403fcc 	andi	r5,r5,255
400199fc:	8140312e 	bgeu	r16,r5,40019ac4 <find_file_in_directory+0xbe4>
40019a00:	18c03fcc 	andi	r3,r3,255
40019a04:	18c0201c 	xori	r3,r3,128
40019a08:	18ffe004 	addi	r3,r3,-128
40019a0c:	20c01f1e 	bne	r4,r3,40019a8c <find_file_in_directory+0xbac>
40019a10:	e0c00243 	ldbu	r3,9(fp)
40019a14:	193fe7c4 	addi	r4,r3,-97
40019a18:	21003fcc 	andi	r4,r4,255
40019a1c:	8100372e 	bgeu	r16,r4,40019afc <find_file_in_directory+0xc1c>
40019a20:	19003fcc 	andi	r4,r3,255
40019a24:	d8c00243 	ldbu	r3,9(sp)
40019a28:	2100201c 	xori	r4,r4,128
40019a2c:	213fe004 	addi	r4,r4,-128
40019a30:	197fe7c4 	addi	r5,r3,-97
40019a34:	29403fcc 	andi	r5,r5,255
40019a38:	8140362e 	bgeu	r16,r5,40019b14 <find_file_in_directory+0xc34>
40019a3c:	18c03fcc 	andi	r3,r3,255
40019a40:	18c0201c 	xori	r3,r3,128
40019a44:	18ffe004 	addi	r3,r3,-128
40019a48:	20c0101e 	bne	r4,r3,40019a8c <find_file_in_directory+0xbac>
40019a4c:	e0c00283 	ldbu	r3,10(fp)
40019a50:	193fe7c4 	addi	r4,r3,-97
40019a54:	21003fcc 	andi	r4,r4,255
40019a58:	8100432e 	bgeu	r16,r4,40019b68 <find_file_in_directory+0xc88>
40019a5c:	19003fcc 	andi	r4,r3,255
40019a60:	d8c00283 	ldbu	r3,10(sp)
40019a64:	2100201c 	xori	r4,r4,128
40019a68:	213fe004 	addi	r4,r4,-128
40019a6c:	197fe7c4 	addi	r5,r3,-97
40019a70:	29403fcc 	andi	r5,r5,255
40019a74:	8140422e 	bgeu	r16,r5,40019b80 <find_file_in_directory+0xca0>
40019a78:	18c03fcc 	andi	r3,r3,255
40019a7c:	18c0201c 	xori	r3,r3,128
40019a80:	18ffe004 	addi	r3,r3,-128
40019a84:	20c0011e 	bne	r4,r3,40019a8c <find_file_in_directory+0xbac>
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);

                        if (match)
40019a88:	103f141e 	bne	r2,zero,400196dc <__alt_data_end+0xc00196dc>
40019a8c:	a5000804 	addi	r20,r20,32
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
40019a90:	a57f4d1e 	bne	r20,r21,400197c8 <__alt_data_end+0xc00197c8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
40019a94:	94800044 	addi	r18,r18,1
40019a98:	8cbf441e 	bne	r17,r18,400197ac <__alt_data_end+0xc00197ac>

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
        {
            match = false;
40019a9c:	0005883a 	mov	r2,zero
40019aa0:	003f0f06 	br	400196e0 <__alt_data_end+0xc00196e0>

bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
40019aa4:	d0afb417 	ldw	r2,-16688(gp)
40019aa8:	103f4f26 	beq	r2,zero,400197e8 <__alt_data_end+0xc00197e8>
40019aac:	900f883a 	mov	r7,r18
40019ab0:	000d883a 	mov	r6,zero
40019ab4:	e00b883a 	mov	r5,fp
40019ab8:	a009883a 	mov	r4,r20
40019abc:	00168f80 	call	400168f8 <Read_File_Record_At_Offset.part.6>
40019ac0:	003f4906 	br	400197e8 <__alt_data_end+0xc00197e8>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
40019ac4:	18fff804 	addi	r3,r3,-32
40019ac8:	18c03fcc 	andi	r3,r3,255
40019acc:	003fcf06 	br	40019a0c <__alt_data_end+0xc0019a0c>
40019ad0:	18fff804 	addi	r3,r3,-32
40019ad4:	19003fcc 	andi	r4,r3,255
40019ad8:	003fc506 	br	400199f0 <__alt_data_end+0xc00199f0>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40019adc:	18fff804 	addi	r3,r3,-32
40019ae0:	18c03fcc 	andi	r3,r3,255
40019ae4:	10ff5226 	beq	r2,r3,40019830 <__alt_data_end+0xc0019830>
        {
            match = false;
40019ae8:	0005883a 	mov	r2,zero
40019aec:	003fb906 	br	400199d4 <__alt_data_end+0xc00199d4>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40019af0:	10bff804 	addi	r2,r2,-32
40019af4:	10803fcc 	andi	r2,r2,255
40019af8:	003f4506 	br	40019810 <__alt_data_end+0xc0019810>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
40019afc:	18fff804 	addi	r3,r3,-32
40019b00:	19003fcc 	andi	r4,r3,255
40019b04:	d8c00243 	ldbu	r3,9(sp)
40019b08:	197fe7c4 	addi	r5,r3,-97
40019b0c:	29403fcc 	andi	r5,r5,255
40019b10:	817fca36 	bltu	r16,r5,40019a3c <__alt_data_end+0xc0019a3c>
40019b14:	18fff804 	addi	r3,r3,-32
40019b18:	18c03fcc 	andi	r3,r3,255
40019b1c:	003fca06 	br	40019a48 <__alt_data_end+0xc0019a48>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40019b20:	10bff804 	addi	r2,r2,-32
40019b24:	10c03fcc 	andi	r3,r2,255
40019b28:	d8800043 	ldbu	r2,1(sp)
40019b2c:	113fe7c4 	addi	r4,r2,-97
40019b30:	21003fcc 	andi	r4,r4,255
40019b34:	813f4936 	bltu	r16,r4,4001985c <__alt_data_end+0xc001985c>
40019b38:	10bff804 	addi	r2,r2,-32
40019b3c:	10803fcc 	andi	r2,r2,255
40019b40:	003f4906 	br	40019868 <__alt_data_end+0xc0019868>
40019b44:	10bff804 	addi	r2,r2,-32
40019b48:	10c03fcc 	andi	r3,r2,255
40019b4c:	d8800083 	ldbu	r2,2(sp)
40019b50:	113fe7c4 	addi	r4,r2,-97
40019b54:	21003fcc 	andi	r4,r4,255
40019b58:	813f4f36 	bltu	r16,r4,40019898 <__alt_data_end+0xc0019898>
40019b5c:	10bff804 	addi	r2,r2,-32
40019b60:	10803fcc 	andi	r2,r2,255
40019b64:	003f4f06 	br	400198a4 <__alt_data_end+0xc00198a4>
			break;
        }
    }
    for (index = 0; index < 3; index++)
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
40019b68:	18fff804 	addi	r3,r3,-32
40019b6c:	19003fcc 	andi	r4,r3,255
40019b70:	d8c00283 	ldbu	r3,10(sp)
40019b74:	197fe7c4 	addi	r5,r3,-97
40019b78:	29403fcc 	andi	r5,r5,255
40019b7c:	817fbe36 	bltu	r16,r5,40019a78 <__alt_data_end+0xc0019a78>
40019b80:	18fff804 	addi	r3,r3,-32
40019b84:	18c03fcc 	andi	r3,r3,255
40019b88:	003fbe06 	br	40019a84 <__alt_data_end+0xc0019a84>
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
40019b8c:	10bff804 	addi	r2,r2,-32
40019b90:	10803fcc 	andi	r2,r2,255
40019b94:	003f5206 	br	400198e0 <__alt_data_end+0xc00198e0>
40019b98:	10bff804 	addi	r2,r2,-32
40019b9c:	10c03fcc 	andi	r3,r2,255
40019ba0:	003f4806 	br	400198c4 <__alt_data_end+0xc00198c4>
40019ba4:	10bff804 	addi	r2,r2,-32
40019ba8:	10c03fcc 	andi	r3,r2,255
40019bac:	d8800103 	ldbu	r2,4(sp)
40019bb0:	113fe7c4 	addi	r4,r2,-97
40019bb4:	21003fcc 	andi	r4,r4,255
40019bb8:	813f5536 	bltu	r16,r4,40019910 <__alt_data_end+0xc0019910>
40019bbc:	10bff804 	addi	r2,r2,-32
40019bc0:	10803fcc 	andi	r2,r2,255
40019bc4:	003f5506 	br	4001991c <__alt_data_end+0xc001991c>
40019bc8:	10bff804 	addi	r2,r2,-32
40019bcc:	10c03fcc 	andi	r3,r2,255
40019bd0:	d8800143 	ldbu	r2,5(sp)
40019bd4:	113fe7c4 	addi	r4,r2,-97
40019bd8:	21003fcc 	andi	r4,r4,255
40019bdc:	813f5b36 	bltu	r16,r4,4001994c <__alt_data_end+0xc001994c>
40019be0:	10bff804 	addi	r2,r2,-32
40019be4:	10803fcc 	andi	r2,r2,255
40019be8:	003f5b06 	br	40019958 <__alt_data_end+0xc0019958>
40019bec:	10bff804 	addi	r2,r2,-32
40019bf0:	10c03fcc 	andi	r3,r2,255
40019bf4:	d8800183 	ldbu	r2,6(sp)
40019bf8:	113fe7c4 	addi	r4,r2,-97
40019bfc:	21003fcc 	andi	r4,r4,255
40019c00:	813f6136 	bltu	r16,r4,40019988 <__alt_data_end+0xc0019988>
40019c04:	10bff804 	addi	r2,r2,-32
40019c08:	10803fcc 	andi	r2,r2,255
40019c0c:	003f6106 	br	40019994 <__alt_data_end+0xc0019994>
40019c10:	d8c001c3 	ldbu	r3,7(sp)
40019c14:	10bff804 	addi	r2,r2,-32
40019c18:	10803fcc 	andi	r2,r2,255
40019c1c:	193fe7c4 	addi	r4,r3,-97
40019c20:	21003fcc 	andi	r4,r4,255
40019c24:	813f6736 	bltu	r16,r4,400199c4 <__alt_data_end+0xc00199c4>
40019c28:	18fff804 	addi	r3,r3,-32
40019c2c:	18c03fcc 	andi	r3,r3,255
40019c30:	003f6706 	br	400199d0 <__alt_data_end+0xc00199d0>
40019c34:	00900134 	movhi	r2,16388
40019c38:	1094d204 	addi	r2,r2,21320
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
40019c3c:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
40019c40:	98000415 	stw	zero,16(r19)
		is_sd_card_formated_as_FAT16 = false;
40019c44:	d02fb415 	stw	zero,-16688(gp)
40019c48:	10ffff04 	addi	r3,r2,-4
40019c4c:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40019c50:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40019c54:	18000015 	stw	zero,0(r3)
40019c58:	10801004 	addi	r2,r2,64
40019c5c:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40019c60:	113ffb1e 	bne	r2,r4,40019c50 <__alt_data_end+0xc0019c50>
40019c64:	003ee006 	br	400197e8 <__alt_data_end+0xc00197e8>

    // Look for the file.
    if (directory_start_cluster == 0)
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
40019c68:	000797c0 	call	4000797c <__divsi3>
40019c6c:	1023883a 	mov	r17,r2
40019c70:	003ec606 	br	4001978c <__alt_data_end+0xc001978c>

40019c74 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
40019c74:	02500134 	movhi	r9,16388
40019c78:	4a54ae04 	addi	r9,r9,21176
40019c7c:	4a001117 	ldw	r8,68(r9)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
40019c80:	48801217 	ldw	r2,72(r9)
40019c84:	12006826 	beq	r2,r8,40019e28 <find_first_empty_cluster+0x1b4>
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
40019c88:	03100134 	movhi	r12,16388
40019c8c:	6314a904 	addi	r12,r12,21156
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
40019c90:	01bfffc4 	movi	r6,-1
40019c94:	01400084 	movi	r5,2
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
40019c98:	02c00444 	movi	r11,17
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
40019c9c:	03400604 	movi	r13,24

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
40019ca0:	02800044 	movi	r10,1
40019ca4:	00000706 	br	40019cc4 <find_first_empty_cluster+0x50>
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
40019ca8:	30bfffcc 	andi	r2,r6,65535
40019cac:	10a0001c 	xori	r2,r2,32768
40019cb0:	10a00004 	addi	r2,r2,-32768
40019cb4:	10005926 	beq	r2,zero,40019e1c <find_first_empty_cluster+0x1a8>
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
40019cb8:	48801217 	ldw	r2,72(r9)
        }
        if (cluster == 0)
        {
            break;
        }
        sector++;
40019cbc:	42000044 	addi	r8,r8,1
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
40019cc0:	12005926 	beq	r2,r8,40019e28 <find_first_empty_cluster+0x1b4>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40019cc4:	d0afab17 	ldw	r2,-16724(gp)
40019cc8:	10000526 	beq	r2,zero,40019ce0 <find_first_empty_cluster+0x6c>
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
40019ccc:	d3afad17 	ldw	r14,-16716(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40019cd0:	d0efb317 	ldw	r3,-16692(gp)
40019cd4:	1880002b 	ldhuio	r2,0(r3)
40019cd8:	1080008c 	andi	r2,r2,2
40019cdc:	10000f1e 	bne	r2,zero,40019d1c <find_first_empty_cluster+0xa8>
    {
        result = true;
    }
	else if (initialized == true)
40019ce0:	d0afb517 	ldw	r2,-16684(gp)
40019ce4:	12bff01e 	bne	r2,r10,40019ca8 <__alt_data_end+0xc0019ca8>
40019ce8:	00900134 	movhi	r2,16388
40019cec:	1094d204 	addi	r2,r2,21320
	{
		int index;

		initialized = false;
40019cf0:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
40019cf4:	60000415 	stw	zero,16(r12)
		is_sd_card_formated_as_FAT16 = false;
40019cf8:	d02fb415 	stw	zero,-16688(gp)
40019cfc:	10ffff04 	addi	r3,r2,-4
40019d00:	11c14004 	addi	r7,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40019d04:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40019d08:	18000015 	stw	zero,0(r3)
40019d0c:	10801004 	addi	r2,r2,64
40019d10:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40019d14:	38bffb1e 	bne	r7,r2,40019d04 <__alt_data_end+0xc0019d04>
40019d18:	003fe306 	br	40019ca8 <__alt_data_end+0xc0019ca8>
	if (alt_up_sd_card_is_Present())
	{
		short int reg_state = 0xff;
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
40019d1c:	d0afaa17 	ldw	r2,-16728(gp)
40019d20:	10002126 	beq	r2,zero,40019da8 <find_first_empty_cluster+0x134>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
40019d24:	d3efa917 	ldw	r15,-16732(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40019d28:	1880002b 	ldhuio	r2,0(r3)
40019d2c:	1080008c 	andi	r2,r2,2
40019d30:	10000f1e 	bne	r2,zero,40019d70 <find_first_empty_cluster+0xfc>
    {
        result = true;
    }
	else if (initialized == true)
40019d34:	d0afb517 	ldw	r2,-16684(gp)
40019d38:	12bfdb1e 	bne	r2,r10,40019ca8 <__alt_data_end+0xc0019ca8>
40019d3c:	00900134 	movhi	r2,16388
40019d40:	1094d204 	addi	r2,r2,21320
	{
		int index;

		initialized = false;
40019d44:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
40019d48:	60000415 	stw	zero,16(r12)
		is_sd_card_formated_as_FAT16 = false;
40019d4c:	d02fb415 	stw	zero,-16688(gp)
40019d50:	10ffff04 	addi	r3,r2,-4
40019d54:	11c14004 	addi	r7,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
40019d58:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
40019d5c:	18000015 	stw	zero,0(r3)
40019d60:	10801004 	addi	r2,r2,64
40019d64:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
40019d68:	11fffb1e 	bne	r2,r7,40019d58 <__alt_data_end+0xc0019d58>
40019d6c:	003fce06 	br	40019ca8 <__alt_data_end+0xc0019ca8>
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
40019d70:	7804927a 	slli	r2,r15,9
40019d74:	d0efaf17 	ldw	r3,-16708(gp)
40019d78:	18800035 	stwio	r2,0(r3)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
40019d7c:	d0afb017 	ldw	r2,-16704(gp)
40019d80:	1340002d 	sthio	r13,0(r2)
40019d84:	d1efb317 	ldw	r7,-16692(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
40019d88:	3880002b 	ldhuio	r2,0(r7)
40019d8c:	10bfffcc 	andi	r2,r2,65535
        } while ((reg_state & 0x04)!=0);
40019d90:	10c0010c 	andi	r3,r2,4
40019d94:	183ffc1e 	bne	r3,zero,40019d88 <__alt_data_end+0xc0019d88>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
40019d98:	1080040c 	andi	r2,r2,16
40019d9c:	103fc21e 	bne	r2,zero,40019ca8 <__alt_data_end+0xc0019ca8>
        {
            result = true;
            current_sector_modified = false;
40019da0:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
40019da4:	d3efa915 	stw	r15,-16732(gp)
                return false;
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
40019da8:	439d883a 	add	r14,r8,r14
40019dac:	7006927a 	slli	r3,r14,9
40019db0:	d0afaf17 	ldw	r2,-16708(gp)
40019db4:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
40019db8:	d0afb017 	ldw	r2,-16704(gp)
40019dbc:	12c0002d 	sthio	r11,0(r2)
40019dc0:	d1efb317 	ldw	r7,-16692(gp)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
40019dc4:	3880002b 	ldhuio	r2,0(r7)
40019dc8:	10bfffcc 	andi	r2,r2,65535
		} while ((reg_state & 0x04)!=0);
40019dcc:	10c0010c 	andi	r3,r2,4
40019dd0:	183ffc1e 	bne	r3,zero,40019dc4 <__alt_data_end+0xc0019dc4>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
40019dd4:	1080040c 	andi	r2,r2,16
40019dd8:	103fb31e 	bne	r2,zero,40019ca8 <__alt_data_end+0xc0019ca8>
40019ddc:	d1efab17 	ldw	r7,-16724(gp)
		{
			result = true;
            current_sector_modified = false;
40019de0:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
40019de4:	d3afa915 	stw	r14,-16732(gp)
40019de8:	28803fcc 	andi	r2,r5,255
40019dec:	38c00a17 	ldw	r3,40(r7)
40019df0:	00000306 	br	40019e00 <find_first_empty_cluster+0x18c>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
40019df4:	29400044 	addi	r5,r5,1
                } 
            } while ((cluster_index % 256) != 0);
40019df8:	28803fcc 	andi	r2,r5,255
40019dfc:	103fae26 	beq	r2,zero,40019cb8 <__alt_data_end+0xc0019cb8>
    while (sector != boot_sector_data.second_fat_sector_offset)
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
40019e00:	1085883a 	add	r2,r2,r2
40019e04:	10c5883a 	add	r2,r2,r3
40019e08:	1180002b 	ldhuio	r6,0(r2)
                if (cluster == 0)
40019e0c:	30bfffcc 	andi	r2,r6,65535
40019e10:	10a0001c 	xori	r2,r2,32768
40019e14:	10a00004 	addi	r2,r2,-32768
40019e18:	103ff61e 	bne	r2,zero,40019df4 <__alt_data_end+0xc0019df4>
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
    {
        *cluster_number = cluster_index;
40019e1c:	21400015 	stw	r5,0(r4)
		result = true;
40019e20:	00800044 	movi	r2,1
    }
    return result;
}
40019e24:	f800283a 	ret
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
    unsigned int cluster_index = 2;
    short int cluster = -1;
    bool result = false;
40019e28:	0005883a 	mov	r2,zero
40019e2c:	f800283a 	ret

40019e30 <find_first_empty_record_in_a_subdirectory>:
}


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
40019e30:	defff404 	addi	sp,sp,-48
40019e34:	dd400715 	stw	r21,28(sp)
40019e38:	05500134 	movhi	r21,16388
40019e3c:	df000a15 	stw	fp,40(sp)
40019e40:	ddc00915 	stw	r23,36(sp)
40019e44:	dd000615 	stw	r20,24(sp)
40019e48:	dcc00515 	stw	r19,20(sp)
40019e4c:	dc800415 	stw	r18,16(sp)
40019e50:	dc000215 	stw	r16,8(sp)
40019e54:	dfc00b15 	stw	ra,44(sp)
40019e58:	dd800815 	stw	r22,32(sp)
40019e5c:	dc400315 	stw	r17,12(sp)
40019e60:	ad54ae04 	addi	r21,r21,21176
40019e64:	2021883a 	mov	r16,r4
40019e68:	24bfff84 	addi	r18,r4,-2
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                    if ((leading_char == 0x00e5) || (leading_char == 0))
40019e6c:	05c03944 	movi	r23,229
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
40019e70:	07000404 	movi	fp,16
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
40019e74:	053ffe04 	movi	r20,-8
40019e78:	04fffe14 	movui	r19,65528
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
    int result = -1;
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
40019e7c:	a8800383 	ldbu	r2,14(r21)
40019e80:	a8c01417 	ldw	r3,80(r21)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
40019e84:	002d883a 	mov	r22,zero
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
    int result = -1;
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
40019e88:	90a3383a 	mul	r17,r18,r2
40019e8c:	88e3883a 	add	r17,r17,r3
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
40019e90:	10001226 	beq	r2,zero,40019edc <find_first_empty_record_in_a_subdirectory+0xac>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
40019e94:	d16fad17 	ldw	r5,-16716(gp)
40019e98:	b449883a 	add	r4,r22,r17
40019e9c:	0016c100 	call	40016c10 <Read_Sector_Data>
40019ea0:	10000e26 	beq	r2,zero,40019edc <find_first_empty_record_in_a_subdirectory+0xac>
40019ea4:	d16fab17 	ldw	r5,-16724(gp)
40019ea8:	0005883a 	mov	r2,zero
40019eac:	29000a17 	ldw	r4,40(r5)
                for (file_counter = 0; file_counter < 16; file_counter++)
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
40019eb0:	1006917a 	slli	r3,r2,5
40019eb4:	1907883a 	add	r3,r3,r4
40019eb8:	18c00023 	ldbuio	r3,0(r3)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
40019ebc:	18c03fcc 	andi	r3,r3,255
40019ec0:	1dc01126 	beq	r3,r23,40019f08 <find_first_empty_record_in_a_subdirectory+0xd8>
40019ec4:	18001026 	beq	r3,zero,40019f08 <find_first_empty_record_in_a_subdirectory+0xd8>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
40019ec8:	10800044 	addi	r2,r2,1
40019ecc:	173ff81e 	bne	r2,fp,40019eb0 <__alt_data_end+0xc0019eb0>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
40019ed0:	a8800383 	ldbu	r2,14(r21)
40019ed4:	b5800044 	addi	r22,r22,1
40019ed8:	b0bfee16 	blt	r22,r2,40019e94 <__alt_data_end+0xc0019e94>
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
40019edc:	d9400104 	addi	r5,sp,4
40019ee0:	8009883a 	mov	r4,r16
40019ee4:	0016d640 	call	40016d64 <get_cluster_flag>
40019ee8:	10000326 	beq	r2,zero,40019ef8 <find_first_empty_record_in_a_subdirectory+0xc8>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
40019eec:	d880010b 	ldhu	r2,4(sp)
40019ef0:	a084703a 	and	r2,r20,r2
40019ef4:	14c01426 	beq	r2,r19,40019f48 <find_first_empty_record_in_a_subdirectory+0x118>
			{
				// Error encountered.                 
				result = -1;
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
40019ef8:	00bffdd4 	movui	r2,65527
40019efc:	143fdf0e 	bge	r2,r16,40019e7c <__alt_data_end+0xc0019e7c>
40019f00:	00bfffc4 	movi	r2,-1
40019f04:	00000406 	br	40019f18 <find_first_empty_record_in_a_subdirectory+0xe8>
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                    if ((leading_char == 0x00e5) || (leading_char == 0))
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
40019f08:	b00c913a 	slli	r6,r22,4
40019f0c:	3085883a 	add	r2,r6,r2
40019f10:	1004943a 	slli	r2,r2,16
40019f14:	1404b03a 	or	r2,r2,r16
				result = -1;
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
    return result; 
}
40019f18:	dfc00b17 	ldw	ra,44(sp)
40019f1c:	df000a17 	ldw	fp,40(sp)
40019f20:	ddc00917 	ldw	r23,36(sp)
40019f24:	dd800817 	ldw	r22,32(sp)
40019f28:	dd400717 	ldw	r21,28(sp)
40019f2c:	dd000617 	ldw	r20,24(sp)
40019f30:	dcc00517 	ldw	r19,20(sp)
40019f34:	dc800417 	ldw	r18,16(sp)
40019f38:	dc400317 	ldw	r17,12(sp)
40019f3c:	dc000217 	ldw	r16,8(sp)
40019f40:	dec00c04 	addi	sp,sp,48
40019f44:	f800283a 	ret
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
40019f48:	d809883a 	mov	r4,sp
40019f4c:	0019c740 	call	40019c74 <find_first_empty_cluster>
40019f50:	1000051e 	bne	r2,zero,40019f68 <find_first_empty_record_in_a_subdirectory+0x138>
							Save_Modified_Sector();
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
						}
					}
					cluster = (new_cluster & 0x0000fff8);
40019f54:	dc00010b 	ldhu	r16,4(sp)
40019f58:	a420703a 	and	r16,r20,r16
			{
				// Error encountered.                 
				result = -1;
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
40019f5c:	84ffe826 	beq	r16,r19,40019f00 <__alt_data_end+0xc0019f00>
40019f60:	84bfff84 	addi	r18,r16,-2
40019f64:	003fc506 	br	40019e7c <__alt_data_end+0xc0019e7c>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
40019f68:	d940000f 	ldh	r5,0(sp)
40019f6c:	01800044 	movi	r6,1
40019f70:	8009883a 	mov	r4,r16
40019f74:	0016eec0 	call	40016eec <mark_cluster>
40019f78:	103ff626 	beq	r2,zero,40019f54 <__alt_data_end+0xc0019f54>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
40019f7c:	d9000017 	ldw	r4,0(sp)
40019f80:	01800044 	movi	r6,1
40019f84:	017fffc4 	movi	r5,-1
40019f88:	0016eec0 	call	40016eec <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
40019f8c:	103ff126 	beq	r2,zero,40019f54 <__alt_data_end+0xc0019f54>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
40019f90:	d940000f 	ldh	r5,0(sp)
40019f94:	000d883a 	mov	r6,zero
40019f98:	8009883a 	mov	r4,r16
40019f9c:	0016eec0 	call	40016eec <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
40019fa0:	103fec26 	beq	r2,zero,40019f54 <__alt_data_end+0xc0019f54>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
40019fa4:	d9000017 	ldw	r4,0(sp)
40019fa8:	000d883a 	mov	r6,zero
40019fac:	017fffc4 	movi	r5,-1
40019fb0:	0016eec0 	call	40016eec <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
40019fb4:	103fe726 	beq	r2,zero,40019f54 <__alt_data_end+0xc0019f54>

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
40019fb8:	d0afaa17 	ldw	r2,-16728(gp)
40019fbc:	1000071e 	bne	r2,zero,40019fdc <find_first_empty_record_in_a_subdirectory+0x1ac>
							Save_Modified_Sector();
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
						}
					}
					cluster = (new_cluster & 0x0000fff8);
40019fc0:	dc00010b 	ldhu	r16,4(sp)
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
40019fc4:	d8800017 	ldw	r2,0(sp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
40019fc8:	a420703a 	and	r16,r20,r16
			{
				// Error encountered.                 
				result = -1;
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
40019fcc:	84ffd226 	beq	r16,r19,40019f18 <__alt_data_end+0xc0019f18>
40019fd0:	00ffffc4 	movi	r3,-1
40019fd4:	10ffe226 	beq	r2,r3,40019f60 <__alt_data_end+0xc0019f60>
40019fd8:	003fcf06 	br	40019f18 <__alt_data_end+0xc0019f18>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40019fdc:	d0afab17 	ldw	r2,-16724(gp)
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
40019fe0:	d0efa917 	ldw	r3,-16732(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
40019fe4:	10000426 	beq	r2,zero,40019ff8 <find_first_empty_record_in_a_subdirectory+0x1c8>
40019fe8:	d0afb317 	ldw	r2,-16692(gp)
40019fec:	1080002b 	ldhuio	r2,0(r2)
40019ff0:	1080008c 	andi	r2,r2,2
40019ff4:	1000121e 	bne	r2,zero,4001a040 <find_first_empty_record_in_a_subdirectory+0x210>
    {
        result = true;
    }
	else if (initialized == true)
40019ff8:	d0efb517 	ldw	r3,-16684(gp)
40019ffc:	00800044 	movi	r2,1
4001a000:	18bfef1e 	bne	r3,r2,40019fc0 <__alt_data_end+0xc0019fc0>
4001a004:	00900134 	movhi	r2,16388
	{
		int index;

		initialized = false;
		search_data.valid = false;
4001a008:	00d00134 	movhi	r3,16388
4001a00c:	1094d204 	addi	r2,r2,21320
4001a010:	18d4a904 	addi	r3,r3,21156
4001a014:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
4001a018:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
4001a01c:	d02fb415 	stw	zero,-16688(gp)
4001a020:	10ffff04 	addi	r3,r2,-4
4001a024:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
4001a028:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
4001a02c:	18000015 	stw	zero,0(r3)
4001a030:	10801004 	addi	r2,r2,64
4001a034:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
4001a038:	20bffb1e 	bne	r4,r2,4001a028 <__alt_data_end+0xc001a028>
4001a03c:	003fe006 	br	40019fc0 <__alt_data_end+0xc0019fc0>
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
4001a040:	1804927a 	slli	r2,r3,9
4001a044:	d12faf17 	ldw	r4,-16708(gp)
4001a048:	20800035 	stwio	r2,0(r4)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
4001a04c:	d0afb017 	ldw	r2,-16704(gp)
4001a050:	01000604 	movi	r4,24
4001a054:	1100002d 	sthio	r4,0(r2)
4001a058:	d12fb317 	ldw	r4,-16692(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
4001a05c:	2080002b 	ldhuio	r2,0(r4)
4001a060:	10bfffcc 	andi	r2,r2,65535
        } while ((reg_state & 0x04)!=0);
4001a064:	1140010c 	andi	r5,r2,4
4001a068:	283ffc1e 	bne	r5,zero,4001a05c <__alt_data_end+0xc001a05c>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
4001a06c:	1080040c 	andi	r2,r2,16
4001a070:	103fd31e 	bne	r2,zero,40019fc0 <__alt_data_end+0xc0019fc0>
        {
            result = true;
            current_sector_modified = false;
4001a074:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
4001a078:	d0efa915 	stw	r3,-16732(gp)
4001a07c:	003fd006 	br	40019fc0 <__alt_data_end+0xc0019fc0>

4001a080 <find_first_empty_record_in_root_directory>:
}


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
4001a080:	defffa04 	addi	sp,sp,-24
4001a084:	dd000415 	stw	r20,16(sp)
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
4001a088:	05100134 	movhi	r20,16388
4001a08c:	a514ae04 	addi	r20,r20,21176
4001a090:	a080050b 	ldhu	r2,20(r20)
4001a094:	a140030b 	ldhu	r5,12(r20)
}


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
4001a098:	dfc00515 	stw	ra,20(sp)
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
4001a09c:	1008917a 	slli	r4,r2,5
}


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
4001a0a0:	dcc00315 	stw	r19,12(sp)
4001a0a4:	dc800215 	stw	r18,8(sp)
4001a0a8:	dc400115 	stw	r17,4(sp)
4001a0ac:	dc000015 	stw	r16,0(sp)
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
4001a0b0:	2146b03a 	or	r3,r4,r5
4001a0b4:	018003c4 	movi	r6,15
4001a0b8:	30c02936 	bltu	r6,r3,4001a160 <find_first_empty_record_in_root_directory+0xe0>
4001a0bc:	1004927a 	slli	r2,r2,9
4001a0c0:	114ab03a 	or	r5,r2,r5
4001a0c4:	009000b4 	movhi	r2,16386
4001a0c8:	1083f504 	addi	r2,r2,4052
4001a0cc:	288b883a 	add	r5,r5,r2
4001a0d0:	2c000003 	ldbu	r16,0(r5)
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
4001a0d4:	0027883a 	mov	r19,zero
4001a0d8:	80001426 	beq	r16,zero,4001a12c <find_first_empty_record_in_root_directory+0xac>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                if ((leading_char == 0x00e5) || (leading_char == 0))
4001a0dc:	04403944 	movi	r17,229
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
4001a0e0:	04800404 	movi	r18,16
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
4001a0e4:	a1001317 	ldw	r4,76(r20)
4001a0e8:	d16fad17 	ldw	r5,-16716(gp)
4001a0ec:	9909883a 	add	r4,r19,r4
4001a0f0:	0016c100 	call	40016c10 <Read_Sector_Data>
4001a0f4:	10000d26 	beq	r2,zero,4001a12c <find_first_empty_record_in_root_directory+0xac>
4001a0f8:	d16fab17 	ldw	r5,-16724(gp)
4001a0fc:	0007883a 	mov	r3,zero
4001a100:	29000a17 	ldw	r4,40(r5)
            for (file_counter = 0; file_counter < 16; file_counter++)
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
4001a104:	1804917a 	slli	r2,r3,5
4001a108:	1105883a 	add	r2,r2,r4
4001a10c:	10800023 	ldbuio	r2,0(r2)
                if ((leading_char == 0x00e5) || (leading_char == 0))
4001a110:	10803fcc 	andi	r2,r2,255
4001a114:	14400726 	beq	r2,r17,4001a134 <find_first_empty_record_in_root_directory+0xb4>
4001a118:	10000626 	beq	r2,zero,4001a134 <find_first_empty_record_in_root_directory+0xb4>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
4001a11c:	18c00044 	addi	r3,r3,1
4001a120:	1cbff81e 	bne	r3,r18,4001a104 <__alt_data_end+0xc001a104>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
4001a124:	9cc00044 	addi	r19,r19,1
4001a128:	84ffee1e 	bne	r16,r19,4001a0e4 <__alt_data_end+0xc001a0e4>
        else
        {
            break;
        }
    }
    return result;
4001a12c:	00bfffc4 	movi	r2,-1
4001a130:	00000306 	br	4001a140 <find_first_empty_record_in_root_directory+0xc0>
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                if ((leading_char == 0x00e5) || (leading_char == 0))
                {
                    result = (sector_index*16 + file_counter) << 16;
4001a134:	9804913a 	slli	r2,r19,4
4001a138:	10c5883a 	add	r2,r2,r3
4001a13c:	1004943a 	slli	r2,r2,16
        {
            break;
        }
    }
    return result;
}
4001a140:	dfc00517 	ldw	ra,20(sp)
4001a144:	dd000417 	ldw	r20,16(sp)
4001a148:	dcc00317 	ldw	r19,12(sp)
4001a14c:	dc800217 	ldw	r18,8(sp)
4001a150:	dc400117 	ldw	r17,4(sp)
4001a154:	dc000017 	ldw	r16,0(sp)
4001a158:	dec00604 	addi	sp,sp,24
4001a15c:	f800283a 	ret


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
4001a160:	000797c0 	call	4000797c <__divsi3>
4001a164:	1021883a 	mov	r16,r2
4001a168:	003fda06 	br	4001a0d4 <__alt_data_end+0xc001a0d4>

4001a16c <convert_filename_to_name_extension>:
    return result;
}

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
4001a16c:	20800003 	ldbu	r2,0(r4)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a170:	00c00b84 	movi	r3,46
4001a174:	11c03fcc 	andi	r7,r2,255
4001a178:	39c0201c 	xori	r7,r7,128
4001a17c:	39ffe004 	addi	r7,r7,-128
4001a180:	38c09b26 	beq	r7,r3,4001a3f0 <convert_filename_to_name_extension+0x284>
        {
            name[counter] = filename[local];
4001a184:	28800005 	stb	r2,0(r5)
            if (filename[local] != 0) local++;
4001a188:	21c00003 	ldbu	r7,0(r4)
4001a18c:	38803fcc 	andi	r2,r7,255
4001a190:	1080201c 	xori	r2,r2,128
4001a194:	10bfe004 	addi	r2,r2,-128
4001a198:	1000741e 	bne	r2,zero,4001a36c <convert_filename_to_name_extension+0x200>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a19c:	2013883a 	mov	r9,r4

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
4001a1a0:	0007883a 	mov	r3,zero
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
        {
            name[counter] = filename[local];
4001a1a4:	29c00045 	stb	r7,1(r5)
            if (filename[local] != 0) local++;
4001a1a8:	49c00003 	ldbu	r7,0(r9)
4001a1ac:	38803fcc 	andi	r2,r7,255
4001a1b0:	1080201c 	xori	r2,r2,128
4001a1b4:	10bfe004 	addi	r2,r2,-128
4001a1b8:	10008726 	beq	r2,zero,4001a3d8 <convert_filename_to_name_extension+0x26c>
4001a1bc:	18c00044 	addi	r3,r3,1
4001a1c0:	20c5883a 	add	r2,r4,r3
4001a1c4:	11c00003 	ldbu	r7,0(r2)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a1c8:	3a003fcc 	andi	r8,r7,255
4001a1cc:	4200201c 	xori	r8,r8,128
4001a1d0:	423fe004 	addi	r8,r8,-128
4001a1d4:	02400b84 	movi	r9,46
4001a1d8:	42408e26 	beq	r8,r9,4001a414 <convert_filename_to_name_extension+0x2a8>
        {
            name[counter] = filename[local];
4001a1dc:	29c00085 	stb	r7,2(r5)
            if (filename[local] != 0) local++;
4001a1e0:	11c00003 	ldbu	r7,0(r2)
4001a1e4:	3a003fcc 	andi	r8,r7,255
4001a1e8:	4200201c 	xori	r8,r8,128
4001a1ec:	423fe004 	addi	r8,r8,-128
4001a1f0:	40000826 	beq	r8,zero,4001a214 <convert_filename_to_name_extension+0xa8>
4001a1f4:	18c00044 	addi	r3,r3,1
4001a1f8:	20c5883a 	add	r2,r4,r3
4001a1fc:	11c00003 	ldbu	r7,0(r2)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a200:	3a003fcc 	andi	r8,r7,255
4001a204:	4200201c 	xori	r8,r8,128
4001a208:	423fe004 	addi	r8,r8,-128
4001a20c:	02400b84 	movi	r9,46
4001a210:	42407326 	beq	r8,r9,4001a3e0 <convert_filename_to_name_extension+0x274>
        {
            name[counter] = filename[local];
4001a214:	29c000c5 	stb	r7,3(r5)
            if (filename[local] != 0) local++;
4001a218:	11c00003 	ldbu	r7,0(r2)
4001a21c:	3a003fcc 	andi	r8,r7,255
4001a220:	4200201c 	xori	r8,r8,128
4001a224:	423fe004 	addi	r8,r8,-128
4001a228:	40000826 	beq	r8,zero,4001a24c <convert_filename_to_name_extension+0xe0>
4001a22c:	18c00044 	addi	r3,r3,1
4001a230:	20c5883a 	add	r2,r4,r3
4001a234:	11c00003 	ldbu	r7,0(r2)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a238:	3a003fcc 	andi	r8,r7,255
4001a23c:	4200201c 	xori	r8,r8,128
4001a240:	423fe004 	addi	r8,r8,-128
4001a244:	02400b84 	movi	r9,46
4001a248:	42407626 	beq	r8,r9,4001a424 <convert_filename_to_name_extension+0x2b8>
        {
            name[counter] = filename[local];
4001a24c:	29c00105 	stb	r7,4(r5)
            if (filename[local] != 0) local++;
4001a250:	11c00003 	ldbu	r7,0(r2)
4001a254:	3a003fcc 	andi	r8,r7,255
4001a258:	4200201c 	xori	r8,r8,128
4001a25c:	423fe004 	addi	r8,r8,-128
4001a260:	40000826 	beq	r8,zero,4001a284 <convert_filename_to_name_extension+0x118>
4001a264:	18c00044 	addi	r3,r3,1
4001a268:	20c5883a 	add	r2,r4,r3
4001a26c:	11c00003 	ldbu	r7,0(r2)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a270:	3a003fcc 	andi	r8,r7,255
4001a274:	4200201c 	xori	r8,r8,128
4001a278:	423fe004 	addi	r8,r8,-128
4001a27c:	02400b84 	movi	r9,46
4001a280:	42406c26 	beq	r8,r9,4001a434 <convert_filename_to_name_extension+0x2c8>
        {
            name[counter] = filename[local];
4001a284:	29c00145 	stb	r7,5(r5)
            if (filename[local] != 0) local++;
4001a288:	11c00003 	ldbu	r7,0(r2)
4001a28c:	3a003fcc 	andi	r8,r7,255
4001a290:	4200201c 	xori	r8,r8,128
4001a294:	423fe004 	addi	r8,r8,-128
4001a298:	40000826 	beq	r8,zero,4001a2bc <convert_filename_to_name_extension+0x150>
4001a29c:	18c00044 	addi	r3,r3,1
4001a2a0:	20c5883a 	add	r2,r4,r3
4001a2a4:	11c00003 	ldbu	r7,0(r2)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a2a8:	3a003fcc 	andi	r8,r7,255
4001a2ac:	4200201c 	xori	r8,r8,128
4001a2b0:	423fe004 	addi	r8,r8,-128
4001a2b4:	02400b84 	movi	r9,46
4001a2b8:	42406226 	beq	r8,r9,4001a444 <convert_filename_to_name_extension+0x2d8>
        {
            name[counter] = filename[local];
4001a2bc:	29c00185 	stb	r7,6(r5)
            if (filename[local] != 0) local++;
4001a2c0:	11c00003 	ldbu	r7,0(r2)
4001a2c4:	3a003fcc 	andi	r8,r7,255
4001a2c8:	4200201c 	xori	r8,r8,128
4001a2cc:	423fe004 	addi	r8,r8,-128
4001a2d0:	40000826 	beq	r8,zero,4001a2f4 <convert_filename_to_name_extension+0x188>
4001a2d4:	18c00044 	addi	r3,r3,1
4001a2d8:	20c5883a 	add	r2,r4,r3
4001a2dc:	11c00003 	ldbu	r7,0(r2)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a2e0:	3a003fcc 	andi	r8,r7,255
4001a2e4:	4200201c 	xori	r8,r8,128
4001a2e8:	423fe004 	addi	r8,r8,-128
4001a2ec:	02400b84 	movi	r9,46
4001a2f0:	42404426 	beq	r8,r9,4001a404 <convert_filename_to_name_extension+0x298>
        {
            name[counter] = filename[local];
4001a2f4:	29c001c5 	stb	r7,7(r5)
            if (filename[local] != 0) local++;
4001a2f8:	11400007 	ldb	r5,0(r2)
4001a2fc:	28002f26 	beq	r5,zero,4001a3bc <convert_filename_to_name_extension+0x250>
4001a300:	18c00044 	addi	r3,r3,1
4001a304:	20c5883a 	add	r2,r4,r3
4001a308:	11400003 	ldbu	r5,0(r2)
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
4001a30c:	29c03fcc 	andi	r7,r5,255
4001a310:	39c0201c 	xori	r7,r7,128
4001a314:	39ffe004 	addi	r7,r7,-128
4001a318:	02000b84 	movi	r8,46
4001a31c:	3a002026 	beq	r7,r8,4001a3a0 <convert_filename_to_name_extension+0x234>
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
4001a320:	38002626 	beq	r7,zero,4001a3bc <convert_filename_to_name_extension+0x250>
        {
            extension[counter] = filename[local];
            local++;
4001a324:	18c00044 	addi	r3,r3,1
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
4001a328:	31400005 	stb	r5,0(r6)
4001a32c:	20c5883a 	add	r2,r4,r3
4001a330:	11400003 	ldbu	r5,0(r2)
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
4001a334:	29c03fcc 	andi	r7,r5,255
4001a338:	39c0201c 	xori	r7,r7,128
4001a33c:	39ffe004 	addi	r7,r7,-128
4001a340:	3800211e 	bne	r7,zero,4001a3c8 <convert_filename_to_name_extension+0x25c>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
4001a344:	00c00804 	movi	r3,32
4001a348:	30c00045 	stb	r3,1(r6)
4001a34c:	10800003 	ldbu	r2,0(r2)
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
4001a350:	10c03fcc 	andi	r3,r2,255
4001a354:	18c0201c 	xori	r3,r3,128
4001a358:	18ffe004 	addi	r3,r3,-128
4001a35c:	1800011e 	bne	r3,zero,4001a364 <convert_filename_to_name_extension+0x1f8>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
4001a360:	00800804 	movi	r2,32
4001a364:	30800085 	stb	r2,2(r6)
        }
    }

}
4001a368:	f800283a 	ret
4001a36c:	21c00043 	ldbu	r7,1(r4)
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
        {
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
4001a370:	00c00044 	movi	r3,1
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a374:	3a003fcc 	andi	r8,r7,255
4001a378:	4200201c 	xori	r8,r8,128
4001a37c:	20c5883a 	add	r2,r4,r3
4001a380:	423fe004 	addi	r8,r8,-128
4001a384:	02800b84 	movi	r10,46
4001a388:	1013883a 	mov	r9,r2
4001a38c:	42bf851e 	bne	r8,r10,4001a1a4 <__alt_data_end+0xc001a1a4>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
4001a390:	01c00804 	movi	r7,32
4001a394:	29c00045 	stb	r7,1(r5)
4001a398:	11c00003 	ldbu	r7,0(r2)
4001a39c:	003f8a06 	br	4001a1c8 <__alt_data_end+0xc001a1c8>
        }
    }
    if (filename[local] == '.') local++;
4001a3a0:	18c00044 	addi	r3,r3,1
4001a3a4:	20c5883a 	add	r2,r4,r3
4001a3a8:	11400003 	ldbu	r5,0(r2)
4001a3ac:	29c03fcc 	andi	r7,r5,255
4001a3b0:	39c0201c 	xori	r7,r7,128
4001a3b4:	39ffe004 	addi	r7,r7,-128
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
4001a3b8:	383fda1e 	bne	r7,zero,4001a324 <__alt_data_end+0xc001a324>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
4001a3bc:	01400804 	movi	r5,32
4001a3c0:	31400005 	stb	r5,0(r6)
4001a3c4:	003fda06 	br	4001a330 <__alt_data_end+0xc001a330>
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
            local++;
4001a3c8:	18c00044 	addi	r3,r3,1
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
4001a3cc:	31400045 	stb	r5,1(r6)
4001a3d0:	20c5883a 	add	r2,r4,r3
4001a3d4:	003fdd06 	br	4001a34c <__alt_data_end+0xc001a34c>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a3d8:	20c5883a 	add	r2,r4,r3
4001a3dc:	003f7f06 	br	4001a1dc <__alt_data_end+0xc001a1dc>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
4001a3e0:	01c00804 	movi	r7,32
4001a3e4:	29c000c5 	stb	r7,3(r5)
4001a3e8:	11c00003 	ldbu	r7,0(r2)
4001a3ec:	003f9206 	br	4001a238 <__alt_data_end+0xc001a238>
4001a3f0:	00800804 	movi	r2,32
4001a3f4:	28800005 	stb	r2,0(r5)
4001a3f8:	21c00003 	ldbu	r7,0(r4)

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
4001a3fc:	0007883a 	mov	r3,zero
4001a400:	003fdc06 	br	4001a374 <__alt_data_end+0xc001a374>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
4001a404:	01c00804 	movi	r7,32
4001a408:	29c001c5 	stb	r7,7(r5)
4001a40c:	11400003 	ldbu	r5,0(r2)
4001a410:	003fbe06 	br	4001a30c <__alt_data_end+0xc001a30c>
4001a414:	01c00804 	movi	r7,32
4001a418:	29c00085 	stb	r7,2(r5)
4001a41c:	11c00003 	ldbu	r7,0(r2)
4001a420:	003f7706 	br	4001a200 <__alt_data_end+0xc001a200>
4001a424:	01c00804 	movi	r7,32
4001a428:	29c00105 	stb	r7,4(r5)
4001a42c:	11c00003 	ldbu	r7,0(r2)
4001a430:	003f8f06 	br	4001a270 <__alt_data_end+0xc001a270>
4001a434:	01c00804 	movi	r7,32
4001a438:	29c00145 	stb	r7,5(r5)
4001a43c:	11c00003 	ldbu	r7,0(r2)
4001a440:	003f9906 	br	4001a2a8 <__alt_data_end+0xc001a2a8>
4001a444:	01c00804 	movi	r7,32
4001a448:	29c00185 	stb	r7,6(r5)
4001a44c:	11c00003 	ldbu	r7,0(r2)
4001a450:	003fa306 	br	4001a2e0 <__alt_data_end+0xc001a2e0>

4001a454 <create_file>:

}

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
4001a454:	defff604 	addi	sp,sp,-40
4001a458:	dcc00415 	stw	r19,16(sp)
4001a45c:	2027883a 	mov	r19,r4
    unsigned int cluster_number;
    bool result = false;
    
    if (find_first_empty_cluster(&cluster_number))
4001a460:	d809883a 	mov	r4,sp

}

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
4001a464:	dd000515 	stw	r20,20(sp)
4001a468:	dc800315 	stw	r18,12(sp)
4001a46c:	dfc00915 	stw	ra,36(sp)
4001a470:	ddc00815 	stw	r23,32(sp)
4001a474:	dd800715 	stw	r22,28(sp)
4001a478:	dd400615 	stw	r21,24(sp)
4001a47c:	dc400215 	stw	r17,8(sp)
4001a480:	dc000115 	stw	r16,4(sp)
4001a484:	2825883a 	mov	r18,r5
4001a488:	3029883a 	mov	r20,r6
    unsigned int cluster_number;
    bool result = false;
    
    if (find_first_empty_cluster(&cluster_number))
4001a48c:	0019c740 	call	40019c74 <find_first_empty_cluster>
4001a490:	10002226 	beq	r2,zero,4001a51c <create_file+0xc8>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
4001a494:	a0800a17 	ldw	r2,40(r20)
4001a498:	10002c1e 	bne	r2,zero,4001a54c <create_file+0xf8>


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
4001a49c:	05900134 	movhi	r22,16388
4001a4a0:	b594ae04 	addi	r22,r22,21176
4001a4a4:	b080050b 	ldhu	r2,20(r22)
4001a4a8:	b140030b 	ldhu	r5,12(r22)
4001a4ac:	018003c4 	movi	r6,15
4001a4b0:	1008917a 	slli	r4,r2,5
4001a4b4:	2146b03a 	or	r3,r4,r5
4001a4b8:	30c12c2e 	bgeu	r6,r3,4001a96c <create_file+0x518>
4001a4bc:	000797c0 	call	4000797c <__divsi3>
4001a4c0:	1021883a 	mov	r16,r2
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
4001a4c4:	80001526 	beq	r16,zero,4001a51c <create_file+0xc8>
4001a4c8:	002f883a 	mov	r23,zero
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                if ((leading_char == 0x00e5) || (leading_char == 0))
4001a4cc:	04403944 	movi	r17,229
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
4001a4d0:	05400404 	movi	r21,16
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
4001a4d4:	b1001317 	ldw	r4,76(r22)
4001a4d8:	d16fad17 	ldw	r5,-16716(gp)
4001a4dc:	b909883a 	add	r4,r23,r4
4001a4e0:	0016c100 	call	40016c10 <Read_Sector_Data>
4001a4e4:	10000d26 	beq	r2,zero,4001a51c <create_file+0xc8>
4001a4e8:	d16fab17 	ldw	r5,-16724(gp)
4001a4ec:	0007883a 	mov	r3,zero
4001a4f0:	29000a17 	ldw	r4,40(r5)
            for (file_counter = 0; file_counter < 16; file_counter++)
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
4001a4f4:	1804917a 	slli	r2,r3,5
4001a4f8:	1105883a 	add	r2,r2,r4
4001a4fc:	10800023 	ldbuio	r2,0(r2)
                if ((leading_char == 0x00e5) || (leading_char == 0))
4001a500:	10803fcc 	andi	r2,r2,255
4001a504:	14412726 	beq	r2,r17,4001a9a4 <create_file+0x550>
4001a508:	10012626 	beq	r2,zero,4001a9a4 <create_file+0x550>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
4001a50c:	18c00044 	addi	r3,r3,1
4001a510:	1d7ff81e 	bne	r3,r21,4001a4f4 <__alt_data_end+0xc001a4f4>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
4001a514:	bdc00044 	addi	r23,r23,1
4001a518:	85ffee1e 	bne	r16,r23,4001a4d4 <__alt_data_end+0xc001a4d4>

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
    unsigned int cluster_number;
    bool result = false;
4001a51c:	0005883a 	mov	r2,zero
            }
        }

    }
    return result;           
}
4001a520:	dfc00917 	ldw	ra,36(sp)
4001a524:	ddc00817 	ldw	r23,32(sp)
4001a528:	dd800717 	ldw	r22,28(sp)
4001a52c:	dd400617 	ldw	r21,24(sp)
4001a530:	dd000517 	ldw	r20,20(sp)
4001a534:	dcc00417 	ldw	r19,16(sp)
4001a538:	dc800317 	ldw	r18,12(sp)
4001a53c:	dc400217 	ldw	r17,8(sp)
4001a540:	dc000117 	ldw	r16,4(sp)
4001a544:	dec00a04 	addi	sp,sp,40
4001a548:	f800283a 	ret
            record_index = find_first_empty_record_in_root_directory();
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
4001a54c:	a100058b 	ldhu	r4,22(r20)
4001a550:	0019e300 	call	40019e30 <find_first_empty_record_in_a_subdirectory>
4001a554:	1023883a 	mov	r17,r2
        }
        if (record_index >= 0)
4001a558:	883ff016 	blt	r17,zero,4001a51c <__alt_data_end+0xc001a51c>

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
4001a55c:	9809883a 	mov	r4,r19
4001a560:	000c9ec0 	call	4000c9ec <strlen>
    
    for(index = 0; index < length; index++)
4001a564:	00800e0e 	bge	zero,r2,4001a5a0 <create_file+0x14c>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
4001a568:	98c00007 	ldb	r3,0(r19)
4001a56c:	01801704 	movi	r6,92
4001a570:	19800b26 	beq	r3,r6,4001a5a0 <create_file+0x14c>
4001a574:	01c00bc4 	movi	r7,47
4001a578:	19c00926 	beq	r3,r7,4001a5a0 <create_file+0x14c>
4001a57c:	99000044 	addi	r4,r19,1
4001a580:	0007883a 	mov	r3,zero
4001a584:	00000406 	br	4001a598 <create_file+0x144>
4001a588:	21400007 	ldb	r5,0(r4)
4001a58c:	21000044 	addi	r4,r4,1
4001a590:	2980d326 	beq	r5,r6,4001a8e0 <create_file+0x48c>
4001a594:	29c0d226 	beq	r5,r7,4001a8e0 <create_file+0x48c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
4001a598:	18c00044 	addi	r3,r3,1
4001a59c:	10fffa1e 	bne	r2,r3,4001a588 <__alt_data_end+0xc001a588>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
4001a5a0:	982f883a 	mov	r23,r19
4001a5a4:	b8800003 	ldbu	r2,0(r23)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a5a8:	00c00b84 	movi	r3,46
4001a5ac:	11003fcc 	andi	r4,r2,255
4001a5b0:	2100201c 	xori	r4,r4,128
4001a5b4:	213fe004 	addi	r4,r4,-128
4001a5b8:	20c11226 	beq	r4,r3,4001aa04 <create_file+0x5b0>
        {
            name[counter] = filename[local];
4001a5bc:	90800005 	stb	r2,0(r18)
            if (filename[local] != 0) local++;
4001a5c0:	b9000003 	ldbu	r4,0(r23)
4001a5c4:	20803fcc 	andi	r2,r4,255
4001a5c8:	1080201c 	xori	r2,r2,128
4001a5cc:	10bfe004 	addi	r2,r2,-128
4001a5d0:	1000d91e 	bne	r2,zero,4001a938 <create_file+0x4e4>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a5d4:	b80d883a 	mov	r6,r23

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
4001a5d8:	0007883a 	mov	r3,zero
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
        {
            name[counter] = filename[local];
4001a5dc:	91000045 	stb	r4,1(r18)
            if (filename[local] != 0) local++;
4001a5e0:	31000003 	ldbu	r4,0(r6)
4001a5e4:	20803fcc 	andi	r2,r4,255
4001a5e8:	1080201c 	xori	r2,r2,128
4001a5ec:	10bfe004 	addi	r2,r2,-128
4001a5f0:	1000fe26 	beq	r2,zero,4001a9ec <create_file+0x598>
4001a5f4:	18c00044 	addi	r3,r3,1
4001a5f8:	b8c5883a 	add	r2,r23,r3
4001a5fc:	11000003 	ldbu	r4,0(r2)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a600:	21403fcc 	andi	r5,r4,255
4001a604:	2940201c 	xori	r5,r5,128
4001a608:	297fe004 	addi	r5,r5,-128
4001a60c:	01800b84 	movi	r6,46
4001a610:	2980f826 	beq	r5,r6,4001a9f4 <create_file+0x5a0>
        {
            name[counter] = filename[local];
4001a614:	91000085 	stb	r4,2(r18)
            if (filename[local] != 0) local++;
4001a618:	11000003 	ldbu	r4,0(r2)
4001a61c:	21403fcc 	andi	r5,r4,255
4001a620:	2940201c 	xori	r5,r5,128
4001a624:	297fe004 	addi	r5,r5,-128
4001a628:	28000826 	beq	r5,zero,4001a64c <create_file+0x1f8>
4001a62c:	18c00044 	addi	r3,r3,1
4001a630:	b8c5883a 	add	r2,r23,r3
4001a634:	11000003 	ldbu	r4,0(r2)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a638:	21403fcc 	andi	r5,r4,255
4001a63c:	2940201c 	xori	r5,r5,128
4001a640:	297fe004 	addi	r5,r5,-128
4001a644:	01800b84 	movi	r6,46
4001a648:	2980f326 	beq	r5,r6,4001aa18 <create_file+0x5c4>
        {
            name[counter] = filename[local];
4001a64c:	910000c5 	stb	r4,3(r18)
            if (filename[local] != 0) local++;
4001a650:	11000003 	ldbu	r4,0(r2)
4001a654:	21403fcc 	andi	r5,r4,255
4001a658:	2940201c 	xori	r5,r5,128
4001a65c:	297fe004 	addi	r5,r5,-128
4001a660:	28000826 	beq	r5,zero,4001a684 <create_file+0x230>
4001a664:	18c00044 	addi	r3,r3,1
4001a668:	b8c5883a 	add	r2,r23,r3
4001a66c:	11000003 	ldbu	r4,0(r2)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a670:	21403fcc 	andi	r5,r4,255
4001a674:	2940201c 	xori	r5,r5,128
4001a678:	297fe004 	addi	r5,r5,-128
4001a67c:	01800b84 	movi	r6,46
4001a680:	2980e926 	beq	r5,r6,4001aa28 <create_file+0x5d4>
        {
            name[counter] = filename[local];
4001a684:	91000105 	stb	r4,4(r18)
            if (filename[local] != 0) local++;
4001a688:	11000003 	ldbu	r4,0(r2)
4001a68c:	21403fcc 	andi	r5,r4,255
4001a690:	2940201c 	xori	r5,r5,128
4001a694:	297fe004 	addi	r5,r5,-128
4001a698:	28000826 	beq	r5,zero,4001a6bc <create_file+0x268>
4001a69c:	18c00044 	addi	r3,r3,1
4001a6a0:	b8c5883a 	add	r2,r23,r3
4001a6a4:	11000003 	ldbu	r4,0(r2)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a6a8:	21403fcc 	andi	r5,r4,255
4001a6ac:	2940201c 	xori	r5,r5,128
4001a6b0:	297fe004 	addi	r5,r5,-128
4001a6b4:	01800b84 	movi	r6,46
4001a6b8:	2980df26 	beq	r5,r6,4001aa38 <create_file+0x5e4>
        {
            name[counter] = filename[local];
4001a6bc:	91000145 	stb	r4,5(r18)
            if (filename[local] != 0) local++;
4001a6c0:	11000003 	ldbu	r4,0(r2)
4001a6c4:	21403fcc 	andi	r5,r4,255
4001a6c8:	2940201c 	xori	r5,r5,128
4001a6cc:	297fe004 	addi	r5,r5,-128
4001a6d0:	28000826 	beq	r5,zero,4001a6f4 <create_file+0x2a0>
4001a6d4:	18c00044 	addi	r3,r3,1
4001a6d8:	b8c5883a 	add	r2,r23,r3
4001a6dc:	11000003 	ldbu	r4,0(r2)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a6e0:	21403fcc 	andi	r5,r4,255
4001a6e4:	2940201c 	xori	r5,r5,128
4001a6e8:	297fe004 	addi	r5,r5,-128
4001a6ec:	01800b84 	movi	r6,46
4001a6f0:	2980d526 	beq	r5,r6,4001aa48 <create_file+0x5f4>
        {
            name[counter] = filename[local];
4001a6f4:	91000185 	stb	r4,6(r18)
            if (filename[local] != 0) local++;
4001a6f8:	11000003 	ldbu	r4,0(r2)
4001a6fc:	21403fcc 	andi	r5,r4,255
4001a700:	2940201c 	xori	r5,r5,128
4001a704:	297fe004 	addi	r5,r5,-128
4001a708:	28000826 	beq	r5,zero,4001a72c <create_file+0x2d8>
4001a70c:	18c00044 	addi	r3,r3,1
4001a710:	b8c5883a 	add	r2,r23,r3
4001a714:	11000003 	ldbu	r4,0(r2)
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a718:	21403fcc 	andi	r5,r4,255
4001a71c:	2940201c 	xori	r5,r5,128
4001a720:	297fe004 	addi	r5,r5,-128
4001a724:	01800b84 	movi	r6,46
4001a728:	2980cb26 	beq	r5,r6,4001aa58 <create_file+0x604>
        {
            name[counter] = filename[local];
4001a72c:	910001c5 	stb	r4,7(r18)
            if (filename[local] != 0) local++;
4001a730:	11000007 	ldb	r4,0(r2)
4001a734:	2000a326 	beq	r4,zero,4001a9c4 <create_file+0x570>
4001a738:	18c00044 	addi	r3,r3,1
4001a73c:	b8c5883a 	add	r2,r23,r3
4001a740:	11000003 	ldbu	r4,0(r2)
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
4001a744:	21403fcc 	andi	r5,r4,255
4001a748:	2940201c 	xori	r5,r5,128
4001a74c:	297fe004 	addi	r5,r5,-128
4001a750:	01800b84 	movi	r6,46
4001a754:	29808c26 	beq	r5,r6,4001a988 <create_file+0x534>
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
4001a758:	28009a26 	beq	r5,zero,4001a9c4 <create_file+0x570>
        {
            extension[counter] = filename[local];
            local++;
4001a75c:	18c00044 	addi	r3,r3,1
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
4001a760:	91000205 	stb	r4,8(r18)
4001a764:	b8c5883a 	add	r2,r23,r3
4001a768:	11000003 	ldbu	r4,0(r2)
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
4001a76c:	21403fcc 	andi	r5,r4,255
4001a770:	2940201c 	xori	r5,r5,128
4001a774:	297fe004 	addi	r5,r5,-128
4001a778:	28008e1e 	bne	r5,zero,4001a9b4 <create_file+0x560>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
4001a77c:	00c00804 	movi	r3,32
4001a780:	90c00245 	stb	r3,9(r18)
4001a784:	10800003 	ldbu	r2,0(r2)
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
4001a788:	10c03fcc 	andi	r3,r2,255
4001a78c:	18c0201c 	xori	r3,r3,128
4001a790:	18ffe004 	addi	r3,r3,-128
4001a794:	1800011e 	bne	r3,zero,4001a79c <create_file+0x348>
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
4001a798:	00800804 	movi	r2,32
            file_record->file_size_in_bytes = 0;
            file_record->current_cluster_index = cluster_number;
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
4001a79c:	8808d43a 	srli	r4,r17,16
            file_record->create_time = 0;
            file_record->create_date = 0;
            file_record->last_access_date = 0;
            file_record->last_modified_time = 0;
            file_record->last_modified_date = 0;
            file_record->start_cluster_index = cluster_number;
4001a7a0:	d9400017 	ldw	r5,0(sp)
            extension[counter] = filename[local];
            local++;
        }
        else
        {
            extension[counter] = ' ';
4001a7a4:	90800285 	stb	r2,10(r18)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
                         
            file_record->attributes = 0;
4001a7a8:	900002c5 	stb	zero,11(r18)
            file_record->current_cluster_index = cluster_number;
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
4001a7ac:	208003cc 	andi	r2,r4,15
            file_record->create_time = 0;
            file_record->create_date = 0;
            file_record->last_access_date = 0;
            file_record->last_modified_time = 0;
            file_record->last_modified_date = 0;
            file_record->start_cluster_index = cluster_number;
4001a7b0:	9140058d 	sth	r5,22(r18)
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
4001a7b4:	a180058b 	ldhu	r6,22(r20)
            file_record->file_size_in_bytes = 0;
            file_record->current_cluster_index = cluster_number;
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
4001a7b8:	2009d13a 	srai	r4,r4,4
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
4001a7bc:	1004917a 	slli	r2,r2,5
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
4001a7c0:	00c00044 	movi	r3,1
            file_record->start_cluster_index = cluster_number;
            file_record->file_size_in_bytes = 0;
            file_record->current_cluster_index = cluster_number;
            file_record->current_sector_in_cluster = 0;
            file_record->current_byte_position = 0;
            file_record->file_record_cluster = record_index & 0x0000ffff;
4001a7c4:	8c7fffcc 	andi	r17,r17,65535
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
4001a7c8:	05900134 	movhi	r22,16388
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
                         
            file_record->attributes = 0;
            file_record->create_time = 0;
4001a7cc:	9000030d 	sth	zero,12(r18)
            file_record->create_date = 0;
4001a7d0:	9000038d 	sth	zero,14(r18)
            file_record->last_access_date = 0;
4001a7d4:	9000040d 	sth	zero,16(r18)
            file_record->last_modified_time = 0;
4001a7d8:	9000048d 	sth	zero,18(r18)
            file_record->last_modified_date = 0;
4001a7dc:	9000050d 	sth	zero,20(r18)
            file_record->start_cluster_index = cluster_number;
            file_record->file_size_in_bytes = 0;
4001a7e0:	90000615 	stw	zero,24(r18)
            file_record->current_cluster_index = cluster_number;
4001a7e4:	91400715 	stw	r5,28(r18)
            file_record->current_sector_in_cluster = 0;
4001a7e8:	90000815 	stw	zero,32(r18)
            file_record->current_byte_position = 0;
4001a7ec:	90000915 	stw	zero,36(r18)
            file_record->file_record_cluster = record_index & 0x0000ffff;
4001a7f0:	94400a15 	stw	r17,40(r18)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
4001a7f4:	91000b15 	stw	r4,44(r18)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
4001a7f8:	90800c0d 	sth	r2,48(r18)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
4001a7fc:	91800d15 	stw	r6,52(r18)
            file_record->in_use = true;
4001a800:	90c00f15 	stw	r3,60(r18)
            file_record->modified = true;
4001a804:	90c00e15 	stw	r3,56(r18)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
4001a808:	b594ae04 	addi	r22,r22,21176
4001a80c:	8800701e 	bne	r17,zero,4001a9d0 <create_file+0x57c>
4001a810:	b0801317 	ldw	r2,76(r22)
4001a814:	2089883a 	add	r4,r4,r2
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
4001a818:	d16fad17 	ldw	r5,-16716(gp)
4001a81c:	0016c100 	call	40016c10 <Read_Sector_Data>
4001a820:	103f3e26 	beq	r2,zero,4001a51c <__alt_data_end+0xc001a51c>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
4001a824:	91000c0f 	ldh	r4,48(r18)
4001a828:	900b883a 	mov	r5,r18
4001a82c:	00175d80 	call	400175d8 <Write_File_Record_At_Offset>
4001a830:	103f3a26 	beq	r2,zero,4001a51c <__alt_data_end+0xc001a51c>

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
4001a834:	d0afaa17 	ldw	r2,-16728(gp)
    {
        result = Write_Sector_Data(current_sector_index, 0);
4001a838:	d16fa917 	ldw	r5,-16732(gp)

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
4001a83c:	10008a1e 	bne	r2,zero,4001aa68 <create_file+0x614>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
                {
                    Save_Modified_Sector();
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
4001a840:	dc000017 	ldw	r16,0(sp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
4001a844:	d0efad17 	ldw	r3,-16716(gp)
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
4001a848:	b0801117 	ldw	r2,68(r22)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
4001a84c:	8008d23a 	srli	r4,r16,8
4001a850:	20c9883a 	add	r4,r4,r3
    
    if (first_fat)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
4001a854:	2089883a 	add	r4,r4,r2
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    }
     
    if (sector_index != current_sector_index)
4001a858:	21400326 	beq	r4,r5,4001a868 <create_file+0x414>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
4001a85c:	000b883a 	mov	r5,zero
4001a860:	0016c100 	call	40016c10 <Read_Sector_Data>
4001a864:	10000926 	beq	r2,zero,4001a88c <create_file+0x438>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
4001a868:	d0afab17 	ldw	r2,-16724(gp)
4001a86c:	84003fcc 	andi	r16,r16,255
4001a870:	8421883a 	add	r16,r16,r16
4001a874:	10800a17 	ldw	r2,40(r2)
4001a878:	80a1883a 	add	r16,r16,r2
4001a87c:	00bfffc4 	movi	r2,-1
4001a880:	8080002d 	sthio	r2,0(r16)
    current_sector_modified = true;
4001a884:	00800044 	movi	r2,1
4001a888:	d0afaa15 	stw	r2,-16728(gp)
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
                {
                    Save_Modified_Sector();
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
4001a88c:	dc000017 	ldw	r16,0(sp)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
4001a890:	d0efad17 	ldw	r3,-16716(gp)
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
4001a894:	b0801217 	ldw	r2,72(r22)


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
4001a898:	8008d23a 	srli	r4,r16,8
4001a89c:	20c9883a 	add	r4,r4,r3
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
4001a8a0:	2089883a 	add	r4,r4,r2
    }
     
    if (sector_index != current_sector_index)
4001a8a4:	d0afa917 	ldw	r2,-16732(gp)
4001a8a8:	20800326 	beq	r4,r2,4001a8b8 <create_file+0x464>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
4001a8ac:	000b883a 	mov	r5,zero
4001a8b0:	0016c100 	call	40016c10 <Read_Sector_Data>
4001a8b4:	103f1926 	beq	r2,zero,4001a51c <__alt_data_end+0xc001a51c>
        {
            return false;
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
4001a8b8:	d0afab17 	ldw	r2,-16724(gp)
4001a8bc:	84003fcc 	andi	r16,r16,255
4001a8c0:	8421883a 	add	r16,r16,r16
4001a8c4:	10800a17 	ldw	r2,40(r2)
4001a8c8:	80a1883a 	add	r16,r16,r2
4001a8cc:	00bfffc4 	movi	r2,-1
4001a8d0:	8080002d 	sthio	r2,0(r16)
    current_sector_modified = true;
4001a8d4:	00800044 	movi	r2,1
4001a8d8:	d0afaa15 	stw	r2,-16728(gp)
4001a8dc:	003f1006 	br	4001a520 <__alt_data_end+0xc001a520>
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
    {
        if ((name[index] == '\\') || (name[index] == '/'))
4001a8e0:	002d883a 	mov	r22,zero
4001a8e4:	04001704 	movi	r16,92
4001a8e8:	05400bc4 	movi	r21,47
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
            {
                last_dir_separator = last_dir_separator+location+1;
4001a8ec:	b0ed883a 	add	r22,r22,r3
4001a8f0:	b5800044 	addi	r22,r22,1
                location = get_dir_divider_location( &(name[last_dir_separator]) );
4001a8f4:	9daf883a 	add	r23,r19,r22

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
4001a8f8:	b809883a 	mov	r4,r23
4001a8fc:	000c9ec0 	call	4000c9ec <strlen>
    
    for(index = 0; index < length; index++)
4001a900:	00bf280e 	bge	zero,r2,4001a5a4 <__alt_data_end+0xc001a5a4>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
4001a904:	b8c00007 	ldb	r3,0(r23)
4001a908:	1c3f2626 	beq	r3,r16,4001a5a4 <__alt_data_end+0xc001a5a4>
4001a90c:	1d7f2526 	beq	r3,r21,4001a5a4 <__alt_data_end+0xc001a5a4>
4001a910:	b9000044 	addi	r4,r23,1
4001a914:	0007883a 	mov	r3,zero
4001a918:	00000406 	br	4001a92c <create_file+0x4d8>
4001a91c:	21400007 	ldb	r5,0(r4)
4001a920:	21000044 	addi	r4,r4,1
4001a924:	2c3ff126 	beq	r5,r16,4001a8ec <__alt_data_end+0xc001a8ec>
4001a928:	2d7ff026 	beq	r5,r21,4001a8ec <__alt_data_end+0xc001a8ec>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
4001a92c:	18c00044 	addi	r3,r3,1
4001a930:	10fffa1e 	bne	r2,r3,4001a91c <__alt_data_end+0xc001a91c>
4001a934:	003f1b06 	br	4001a5a4 <__alt_data_end+0xc001a5a4>
4001a938:	b9000043 	ldbu	r4,1(r23)
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
        {
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
4001a93c:	00c00044 	movi	r3,1
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a940:	21403fcc 	andi	r5,r4,255
4001a944:	2940201c 	xori	r5,r5,128
4001a948:	b8c5883a 	add	r2,r23,r3
4001a94c:	297fe004 	addi	r5,r5,-128
4001a950:	01c00b84 	movi	r7,46
4001a954:	100d883a 	mov	r6,r2
4001a958:	29ff201e 	bne	r5,r7,4001a5dc <__alt_data_end+0xc001a5dc>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
4001a95c:	01000804 	movi	r4,32
4001a960:	91000045 	stb	r4,1(r18)
4001a964:	11000003 	ldbu	r4,0(r2)
4001a968:	003f2506 	br	4001a600 <__alt_data_end+0xc001a600>


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
4001a96c:	1004927a 	slli	r2,r2,9
4001a970:	114ab03a 	or	r5,r2,r5
4001a974:	009000b4 	movhi	r2,16386
4001a978:	1083f504 	addi	r2,r2,4052
4001a97c:	288b883a 	add	r5,r5,r2
4001a980:	2c000003 	ldbu	r16,0(r5)
4001a984:	003ecf06 	br	4001a4c4 <__alt_data_end+0xc001a4c4>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
4001a988:	18c00044 	addi	r3,r3,1
4001a98c:	b8c5883a 	add	r2,r23,r3
4001a990:	11000003 	ldbu	r4,0(r2)
4001a994:	21403fcc 	andi	r5,r4,255
4001a998:	2940201c 	xori	r5,r5,128
4001a99c:	297fe004 	addi	r5,r5,-128
4001a9a0:	003f6d06 	br	4001a758 <__alt_data_end+0xc001a758>
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
                if ((leading_char == 0x00e5) || (leading_char == 0))
                {
                    result = (sector_index*16 + file_counter) << 16;
4001a9a4:	b822913a 	slli	r17,r23,4
4001a9a8:	88c7883a 	add	r3,r17,r3
4001a9ac:	1822943a 	slli	r17,r3,16
4001a9b0:	003ee906 	br	4001a558 <__alt_data_end+0xc001a558>
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
            local++;
4001a9b4:	18c00044 	addi	r3,r3,1
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    {
        if (filename[local] != 0)
        {
            extension[counter] = filename[local];
4001a9b8:	91000245 	stb	r4,9(r18)
4001a9bc:	b8c5883a 	add	r2,r23,r3
4001a9c0:	003f7006 	br	4001a784 <__alt_data_end+0xc001a784>
            local++;
        }
        else
        {
            extension[counter] = ' ';
4001a9c4:	01000804 	movi	r4,32
4001a9c8:	91000205 	stb	r4,8(r18)
4001a9cc:	003f6606 	br	4001a768 <__alt_data_end+0xc001a768>
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
4001a9d0:	b0c00383 	ldbu	r3,14(r22)
4001a9d4:	8c7fff84 	addi	r17,r17,-2
4001a9d8:	b0801417 	ldw	r2,80(r22)
4001a9dc:	88e3383a 	mul	r17,r17,r3
4001a9e0:	8885883a 	add	r2,r17,r2
4001a9e4:	1109883a 	add	r4,r2,r4
4001a9e8:	003f8b06 	br	4001a818 <__alt_data_end+0xc001a818>
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    {
        if (filename[local] != '.')
4001a9ec:	b8c5883a 	add	r2,r23,r3
4001a9f0:	003f0806 	br	4001a614 <__alt_data_end+0xc001a614>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
4001a9f4:	01000804 	movi	r4,32
4001a9f8:	91000085 	stb	r4,2(r18)
4001a9fc:	11000003 	ldbu	r4,0(r2)
4001aa00:	003f0d06 	br	4001a638 <__alt_data_end+0xc001a638>
4001aa04:	00800804 	movi	r2,32
4001aa08:	90800005 	stb	r2,0(r18)
4001aa0c:	b9000003 	ldbu	r4,0(r23)

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
4001aa10:	0007883a 	mov	r3,zero
4001aa14:	003fca06 	br	4001a940 <__alt_data_end+0xc001a940>
            name[counter] = filename[local];
            if (filename[local] != 0) local++;
        }
        else
        {
            name[counter] = ' ';
4001aa18:	01000804 	movi	r4,32
4001aa1c:	910000c5 	stb	r4,3(r18)
4001aa20:	11000003 	ldbu	r4,0(r2)
4001aa24:	003f1206 	br	4001a670 <__alt_data_end+0xc001a670>
4001aa28:	01000804 	movi	r4,32
4001aa2c:	91000105 	stb	r4,4(r18)
4001aa30:	11000003 	ldbu	r4,0(r2)
4001aa34:	003f1c06 	br	4001a6a8 <__alt_data_end+0xc001a6a8>
4001aa38:	01000804 	movi	r4,32
4001aa3c:	91000145 	stb	r4,5(r18)
4001aa40:	11000003 	ldbu	r4,0(r2)
4001aa44:	003f2606 	br	4001a6e0 <__alt_data_end+0xc001a6e0>
4001aa48:	01000804 	movi	r4,32
4001aa4c:	91000185 	stb	r4,6(r18)
4001aa50:	11000003 	ldbu	r4,0(r2)
4001aa54:	003f3006 	br	4001a718 <__alt_data_end+0xc001a718>
4001aa58:	01000804 	movi	r4,32
4001aa5c:	910001c5 	stb	r4,7(r18)
4001aa60:	11000003 	ldbu	r4,0(r2)
4001aa64:	003f3706 	br	4001a744 <__alt_data_end+0xc001a744>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
4001aa68:	d0afab17 	ldw	r2,-16724(gp)
4001aa6c:	10000426 	beq	r2,zero,4001aa80 <create_file+0x62c>
4001aa70:	d0afb317 	ldw	r2,-16692(gp)
4001aa74:	1080002b 	ldhuio	r2,0(r2)
4001aa78:	1080008c 	andi	r2,r2,2
4001aa7c:	1000121e 	bne	r2,zero,4001aac8 <create_file+0x674>
    {
        result = true;
    }
	else if (initialized == true)
4001aa80:	d0efb517 	ldw	r3,-16684(gp)
4001aa84:	00800044 	movi	r2,1
4001aa88:	18bf6d1e 	bne	r3,r2,4001a840 <__alt_data_end+0xc001a840>
4001aa8c:	00900134 	movhi	r2,16388
	{
		int index;

		initialized = false;
		search_data.valid = false;
4001aa90:	00d00134 	movhi	r3,16388
4001aa94:	1094d204 	addi	r2,r2,21320
4001aa98:	18d4a904 	addi	r3,r3,21156
4001aa9c:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
4001aaa0:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
4001aaa4:	d02fb415 	stw	zero,-16688(gp)
4001aaa8:	10ffff04 	addi	r3,r2,-4
4001aaac:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
4001aab0:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
4001aab4:	18000015 	stw	zero,0(r3)
4001aab8:	10801004 	addi	r2,r2,64
4001aabc:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
4001aac0:	113ffb1e 	bne	r2,r4,4001aab0 <__alt_data_end+0xc001aab0>
4001aac4:	003f5e06 	br	4001a840 <__alt_data_end+0xc001a840>
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
4001aac8:	2804927a 	slli	r2,r5,9
4001aacc:	d0efaf17 	ldw	r3,-16708(gp)
4001aad0:	18800035 	stwio	r2,0(r3)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
4001aad4:	d0afb017 	ldw	r2,-16704(gp)
4001aad8:	00c00604 	movi	r3,24
4001aadc:	10c0002d 	sthio	r3,0(r2)
4001aae0:	d0efb317 	ldw	r3,-16692(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
4001aae4:	1880002b 	ldhuio	r2,0(r3)
4001aae8:	10bfffcc 	andi	r2,r2,65535
        } while ((reg_state & 0x04)!=0);
4001aaec:	1100010c 	andi	r4,r2,4
4001aaf0:	203ffc1e 	bne	r4,zero,4001aae4 <__alt_data_end+0xc001aae4>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
4001aaf4:	1080040c 	andi	r2,r2,16
4001aaf8:	1000031e 	bne	r2,zero,4001ab08 <create_file+0x6b4>
        {
            result = true;
            current_sector_modified = false;
4001aafc:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
4001ab00:	d16fa915 	stw	r5,-16732(gp)
4001ab04:	003f4e06 	br	4001a840 <__alt_data_end+0xc001a840>
4001ab08:	d16fa917 	ldw	r5,-16732(gp)
4001ab0c:	003f4c06 	br	4001a840 <__alt_data_end+0xc001a840>

4001ab10 <copy_file_record_name_to_string>:
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001ab10:	20800003 	ldbu	r2,0(r4)
4001ab14:	00c00804 	movi	r3,32
4001ab18:	11803fcc 	andi	r6,r2,255
4001ab1c:	30c05126 	beq	r6,r3,4001ac64 <copy_file_record_name_to_string+0x154>
		{
			file_name[flength] = file_record->name[index];
4001ab20:	28800005 	stb	r2,0(r5)
			flength = flength + 1;
4001ab24:	00800044 	movi	r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001ab28:	20c00043 	ldbu	r3,1(r4)
4001ab2c:	01800804 	movi	r6,32
4001ab30:	19c03fcc 	andi	r7,r3,255
4001ab34:	39800326 	beq	r7,r6,4001ab44 <copy_file_record_name_to_string+0x34>
		{
			file_name[flength] = file_record->name[index];
4001ab38:	288d883a 	add	r6,r5,r2
4001ab3c:	30c00005 	stb	r3,0(r6)
			flength = flength + 1;
4001ab40:	10800044 	addi	r2,r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001ab44:	20c00083 	ldbu	r3,2(r4)
4001ab48:	01800804 	movi	r6,32
4001ab4c:	19c03fcc 	andi	r7,r3,255
4001ab50:	39800326 	beq	r7,r6,4001ab60 <copy_file_record_name_to_string+0x50>
		{
			file_name[flength] = file_record->name[index];
4001ab54:	288d883a 	add	r6,r5,r2
4001ab58:	30c00005 	stb	r3,0(r6)
			flength = flength + 1;
4001ab5c:	10800044 	addi	r2,r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001ab60:	20c000c3 	ldbu	r3,3(r4)
4001ab64:	01800804 	movi	r6,32
4001ab68:	19c03fcc 	andi	r7,r3,255
4001ab6c:	39800326 	beq	r7,r6,4001ab7c <copy_file_record_name_to_string+0x6c>
		{
			file_name[flength] = file_record->name[index];
4001ab70:	288d883a 	add	r6,r5,r2
4001ab74:	30c00005 	stb	r3,0(r6)
			flength = flength + 1;
4001ab78:	10800044 	addi	r2,r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001ab7c:	20c00103 	ldbu	r3,4(r4)
4001ab80:	01800804 	movi	r6,32
4001ab84:	19c03fcc 	andi	r7,r3,255
4001ab88:	39800326 	beq	r7,r6,4001ab98 <copy_file_record_name_to_string+0x88>
		{
			file_name[flength] = file_record->name[index];
4001ab8c:	288d883a 	add	r6,r5,r2
4001ab90:	30c00005 	stb	r3,0(r6)
			flength = flength + 1;
4001ab94:	10800044 	addi	r2,r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001ab98:	20c00143 	ldbu	r3,5(r4)
4001ab9c:	01800804 	movi	r6,32
4001aba0:	19c03fcc 	andi	r7,r3,255
4001aba4:	39800326 	beq	r7,r6,4001abb4 <copy_file_record_name_to_string+0xa4>
		{
			file_name[flength] = file_record->name[index];
4001aba8:	288d883a 	add	r6,r5,r2
4001abac:	30c00005 	stb	r3,0(r6)
			flength = flength + 1;
4001abb0:	10800044 	addi	r2,r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001abb4:	20c00183 	ldbu	r3,6(r4)
4001abb8:	01800804 	movi	r6,32
4001abbc:	19c03fcc 	andi	r7,r3,255
4001abc0:	39800326 	beq	r7,r6,4001abd0 <copy_file_record_name_to_string+0xc0>
		{
			file_name[flength] = file_record->name[index];
4001abc4:	288d883a 	add	r6,r5,r2
4001abc8:	30c00005 	stb	r3,0(r6)
			flength = flength + 1;
4001abcc:	10800044 	addi	r2,r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001abd0:	20c001c3 	ldbu	r3,7(r4)
4001abd4:	01800804 	movi	r6,32
4001abd8:	19c03fcc 	andi	r7,r3,255
4001abdc:	39800326 	beq	r7,r6,4001abec <copy_file_record_name_to_string+0xdc>
		{
			file_name[flength] = file_record->name[index];
4001abe0:	288d883a 	add	r6,r5,r2
4001abe4:	30c00005 	stb	r3,0(r6)
			flength = flength + 1;
4001abe8:	10800044 	addi	r2,r2,1
		}
	}
	if (file_record->extension[0] != ' ')
4001abec:	20c00203 	ldbu	r3,8(r4)
4001abf0:	01800804 	movi	r6,32
4001abf4:	19801d26 	beq	r3,r6,4001ac6c <copy_file_record_name_to_string+0x15c>
	{
		file_name[flength] = '.';
4001abf8:	2887883a 	add	r3,r5,r2
4001abfc:	01c00b84 	movi	r7,46
4001ac00:	19c00005 	stb	r7,0(r3)
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
4001ac04:	21c00203 	ldbu	r7,8(r4)
		}
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
4001ac08:	10c00044 	addi	r3,r2,1
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
4001ac0c:	3a003fcc 	andi	r8,r7,255
4001ac10:	41800326 	beq	r8,r6,4001ac20 <copy_file_record_name_to_string+0x110>
			{
				file_name[flength] = file_record->extension[index];
4001ac14:	28c7883a 	add	r3,r5,r3
4001ac18:	19c00005 	stb	r7,0(r3)
				flength = flength + 1;
4001ac1c:	10c00084 	addi	r3,r2,2
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
4001ac20:	20800243 	ldbu	r2,9(r4)
4001ac24:	01800804 	movi	r6,32
4001ac28:	11c03fcc 	andi	r7,r2,255
4001ac2c:	39800326 	beq	r7,r6,4001ac3c <copy_file_record_name_to_string+0x12c>
			{
				file_name[flength] = file_record->extension[index];
4001ac30:	28cd883a 	add	r6,r5,r3
4001ac34:	30800005 	stb	r2,0(r6)
				flength = flength + 1;
4001ac38:	18c00044 	addi	r3,r3,1
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
4001ac3c:	20800283 	ldbu	r2,10(r4)
4001ac40:	01000804 	movi	r4,32
4001ac44:	11803fcc 	andi	r6,r2,255
4001ac48:	31000326 	beq	r6,r4,4001ac58 <copy_file_record_name_to_string+0x148>
			{
				file_name[flength] = file_record->extension[index];
4001ac4c:	28c9883a 	add	r4,r5,r3
4001ac50:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
4001ac54:	18c00044 	addi	r3,r3,1
			}
		}
	}
	file_name[flength] = 0;
4001ac58:	28cb883a 	add	r5,r5,r3
4001ac5c:	28000005 	stb	zero,0(r5)
4001ac60:	f800283a 	ret

void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
	int index;
	int flength = 0;
4001ac64:	0005883a 	mov	r2,zero
4001ac68:	003faf06 	br	4001ab28 <__alt_data_end+0xc001ab28>
4001ac6c:	1007883a 	mov	r3,r2
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
4001ac70:	28cb883a 	add	r5,r5,r3
4001ac74:	28000005 	stb	zero,0(r5)
4001ac78:	f800283a 	ret

4001ac7c <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
4001ac7c:	deffff04 	addi	sp,sp,-4
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
4001ac80:	d1600704 	addi	r5,gp,-32740
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
4001ac84:	dfc00015 	stw	ra,0(sp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
4001ac88:	001cc580 	call	4001cc58 <alt_find_dev>

	if (dev != NULL)
4001ac8c:	10001226 	beq	r2,zero,4001acd8 <alt_up_sd_card_open_dev+0x5c>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
4001ac90:	10c00a17 	ldw	r3,40(r2)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
		device_pointer = dev;
4001ac94:	d0afab15 	stw	r2,-16724(gp)
		initialized = false;
4001ac98:	d02fb515 	stw	zero,-16684(gp)
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);

	if (dev != NULL)
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
4001ac9c:	1a008d04 	addi	r8,r3,564
		status_register = ((int *) SD_CARD_STATUS(dev->base));
4001aca0:	19c08904 	addi	r7,r3,548
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
4001aca4:	19808404 	addi	r6,r3,528
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
4001aca8:	19408c04 	addi	r5,r3,560
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
4001acac:	19008b04 	addi	r4,r3,556
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
4001acb0:	d0efae15 	stw	r3,-16712(gp)
		device_pointer = dev;
		initialized = false;
		is_sd_card_formated_as_FAT16 = false;
		search_data.valid = false;
4001acb4:	00d00134 	movhi	r3,16388
4001acb8:	18d4a904 	addi	r3,r3,21156
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);

	if (dev != NULL)
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
4001acbc:	d22fb315 	stw	r8,-16692(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
4001acc0:	d1efb215 	stw	r7,-16696(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
4001acc4:	d1afb115 	stw	r6,-16700(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
4001acc8:	d16fb015 	stw	r5,-16704(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
4001accc:	d12faf15 	stw	r4,-16708(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
		device_pointer = dev;
		initialized = false;
		is_sd_card_formated_as_FAT16 = false;
4001acd0:	d02fb415 	stw	zero,-16688(gp)
		search_data.valid = false;
4001acd4:	18000415 	stw	zero,16(r3)
	}
	return dev;
}
4001acd8:	dfc00017 	ldw	ra,0(sp)
4001acdc:	dec00104 	addi	sp,sp,4
4001ace0:	f800283a 	ret

4001ace4 <alt_up_sd_card_is_Present>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
4001ace4:	d0afab17 	ldw	r2,-16724(gp)
4001ace8:	10000426 	beq	r2,zero,4001acfc <alt_up_sd_card_is_Present+0x18>
4001acec:	d0afb317 	ldw	r2,-16692(gp)
4001acf0:	1080002b 	ldhuio	r2,0(r2)
4001acf4:	1080008c 	andi	r2,r2,2
4001acf8:	1000151e 	bne	r2,zero,4001ad50 <alt_up_sd_card_is_Present+0x6c>
    {
        result = true;
    }
	else if (initialized == true)
4001acfc:	d0efb517 	ldw	r3,-16684(gp)
4001ad00:	00800044 	movi	r2,1
4001ad04:	18800226 	beq	r3,r2,4001ad10 <alt_up_sd_card_is_Present+0x2c>


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;
4001ad08:	0005883a 	mov	r2,zero
4001ad0c:	f800283a 	ret
4001ad10:	00900134 	movhi	r2,16388
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
4001ad14:	00d00134 	movhi	r3,16388
4001ad18:	1094d204 	addi	r2,r2,21320
4001ad1c:	18d4a904 	addi	r3,r3,21156
4001ad20:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
4001ad24:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
4001ad28:	d02fb415 	stw	zero,-16688(gp)
4001ad2c:	10ffff04 	addi	r3,r2,-4
4001ad30:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
4001ad34:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
4001ad38:	18000015 	stw	zero,0(r3)
4001ad3c:	10801004 	addi	r2,r2,64
4001ad40:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
4001ad44:	113ffb1e 	bne	r2,r4,4001ad34 <__alt_data_end+0xc001ad34>


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;
4001ad48:	0005883a 	mov	r2,zero
4001ad4c:	f800283a 	ret

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
4001ad50:	00800044 	movi	r2,1
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
}
4001ad54:	f800283a 	ret

4001ad58 <alt_up_sd_card_is_FAT16>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
4001ad58:	d0afab17 	ldw	r2,-16724(gp)
4001ad5c:	10000426 	beq	r2,zero,4001ad70 <alt_up_sd_card_is_FAT16+0x18>
4001ad60:	d0efb317 	ldw	r3,-16692(gp)
4001ad64:	1880002b 	ldhuio	r2,0(r3)
4001ad68:	1080008c 	andi	r2,r2,2
4001ad6c:	1000071e 	bne	r2,zero,4001ad8c <alt_up_sd_card_is_FAT16+0x34>
    {
        result = true;
    }
	else if (initialized == true)
4001ad70:	d0efb517 	ldw	r3,-16684(gp)
4001ad74:	00800044 	movi	r2,1
4001ad78:	18800826 	beq	r3,r2,4001ad9c <alt_up_sd_card_is_FAT16+0x44>
		result = is_sd_card_formated_as_FAT16;
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
4001ad7c:	d02fb515 	stw	zero,-16684(gp)
		is_sd_card_formated_as_FAT16 = false;
4001ad80:	d02fb415 	stw	zero,-16688(gp)
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
	bool result = false;
4001ad84:	0005883a 	mov	r2,zero
		initialized = false;
		is_sd_card_formated_as_FAT16 = false;
	}

	return result;
}
4001ad88:	f800283a 	ret
	bool result = false;

	if (alt_up_sd_card_is_Present())
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
4001ad8c:	d0afb517 	ldw	r2,-16684(gp)
4001ad90:	10001226 	beq	r2,zero,4001addc <alt_up_sd_card_is_FAT16+0x84>
4001ad94:	d0afb417 	ldw	r2,-16688(gp)
		// If not then you may as well not open the device.
		initialized = false;
		is_sd_card_formated_as_FAT16 = false;
	}

	return result;
4001ad98:	f800283a 	ret
4001ad9c:	00900134 	movhi	r2,16388
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
4001ada0:	01100134 	movhi	r4,16388
4001ada4:	1094d204 	addi	r2,r2,21320
4001ada8:	2114a904 	addi	r4,r4,21156
4001adac:	20000415 	stw	zero,16(r4)
4001adb0:	10ffff04 	addi	r3,r2,-4
4001adb4:	11014004 	addi	r4,r2,1280
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
4001adb8:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
4001adbc:	18000015 	stw	zero,0(r3)
4001adc0:	10801004 	addi	r2,r2,64
4001adc4:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
4001adc8:	113ffb1e 	bne	r2,r4,4001adb8 <__alt_data_end+0xc001adb8>
		result = is_sd_card_formated_as_FAT16;
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
4001adcc:	d02fb515 	stw	zero,-16684(gp)
		is_sd_card_formated_as_FAT16 = false;
4001add0:	d02fb415 	stw	zero,-16688(gp)
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
	bool result = false;
4001add4:	0005883a 	mov	r2,zero
		initialized = false;
		is_sd_card_formated_as_FAT16 = false;
	}

	return result;
}
4001add8:	f800283a 	ret
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
4001addc:	deffff04 	addi	sp,sp,-4
4001ade0:	dfc00015 	stw	ra,0(sp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
4001ade4:	1880002b 	ldhuio	r2,0(r3)
4001ade8:	1080008c 	andi	r2,r2,2
4001adec:	1000091e 	bne	r2,zero,4001ae14 <alt_up_sd_card_is_FAT16+0xbc>


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
	bool result = false;
4001adf0:	0005883a 	mov	r2,zero
		if (initialized == false)
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
			initialized = is_sd_card_formated_as_FAT16;
			search_data.valid = false;
4001adf4:	00d00134 	movhi	r3,16388
4001adf8:	18d4a904 	addi	r3,r3,21156
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
4001adfc:	d0afb415 	stw	r2,-16688(gp)
			initialized = is_sd_card_formated_as_FAT16;
4001ae00:	d0afb515 	stw	r2,-16684(gp)
			search_data.valid = false;
4001ae04:	18000415 	stw	zero,16(r3)
		initialized = false;
		is_sd_card_formated_as_FAT16 = false;
	}

	return result;
}
4001ae08:	dfc00017 	ldw	ra,0(sp)
4001ae0c:	dec00104 	addi	sp,sp,4
4001ae10:	f800283a 	ret
{
	bool result = false;

	if (alt_up_sd_card_is_Present())
	{
		short int csd_file_format = *CSD_register_w0;
4001ae14:	d0afb117 	ldw	r2,-16700(gp)
4001ae18:	1080000b 	ldhu	r2,0(r2)
        
		fat_partition_offset_in_512_byte_sectors = 0;
4001ae1c:	d02fad15 	stw	zero,-16716(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
4001ae20:	d02fac15 	stw	zero,-16720(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
4001ae24:	10ffffcc 	andi	r3,r2,65535
4001ae28:	18e0001c 	xori	r3,r3,32768
4001ae2c:	18e00004 	addi	r3,r3,-32768
4001ae30:	183fef16 	blt	r3,zero,4001adf0 <__alt_data_end+0xc001adf0>
4001ae34:	1083000c 	andi	r2,r2,3072
4001ae38:	00c30004 	movi	r3,3072
4001ae3c:	10ffec26 	beq	r2,r3,4001adf0 <__alt_data_end+0xc001adf0>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
4001ae40:	00c10004 	movi	r3,1024
4001ae44:	10c01826 	beq	r2,r3,4001aea8 <alt_up_sd_card_is_FAT16+0x150>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
4001ae48:	103fe91e 	bne	r2,zero,4001adf0 <__alt_data_end+0xc001adf0>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
4001ae4c:	00170840 	call	40017084 <Check_for_Master_Boot_Record>
4001ae50:	103fe726 	beq	r2,zero,4001adf0 <__alt_data_end+0xc001adf0>
{
	bool result = false;
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
4001ae54:	d16fad17 	ldw	r5,-16716(gp)
4001ae58:	0009883a 	mov	r4,zero
4001ae5c:	0016c100 	call	40016c10 <Read_Sector_Data>
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
4001ae60:	d0efab17 	ldw	r3,-16724(gp)
4001ae64:	18c00a17 	ldw	r3,40(r3)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
4001ae68:	18c07faf 	ldhio	r3,510(r3)
4001ae6c:	012a9554 	movui	r4,43605
4001ae70:	18ffffcc 	andi	r3,r3,65535
4001ae74:	193fde1e 	bne	r3,r4,4001adf0 <__alt_data_end+0xc001adf0>
4001ae78:	103fdd26 	beq	r2,zero,4001adf0 <__alt_data_end+0xc001adf0>
4001ae7c:	00165840 	call	40016584 <Check_for_DOS_FAT.part.5>
				if (Check_for_Master_Boot_Record())
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
				}                        
			}
			if (result == true)
4001ae80:	00c00044 	movi	r3,1
4001ae84:	10ffdb1e 	bne	r2,r3,4001adf4 <__alt_data_end+0xc001adf4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
4001ae88:	00d00134 	movhi	r3,16388
4001ae8c:	18d4ae04 	addi	r3,r3,21176
4001ae90:	19401083 	ldbu	r5,66(r3)
4001ae94:	01000404 	movi	r4,16
4001ae98:	293fd51e 	bne	r5,r4,4001adf0 <__alt_data_end+0xc001adf0>
				{
					result = false;
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
4001ae9c:	18c0058b 	ldhu	r3,22(r3)
4001aea0:	d0efac15 	stw	r3,-16720(gp)
4001aea4:	003fd306 	br	4001adf4 <__alt_data_end+0xc001adf4>
{
	bool result = false;
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
4001aea8:	000b883a 	mov	r5,zero
4001aeac:	003fea06 	br	4001ae58 <__alt_data_end+0xc001ae58>

4001aeb0 <alt_up_sd_card_find_next>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
4001aeb0:	d0afab17 	ldw	r2,-16724(gp)
4001aeb4:	10000426 	beq	r2,zero,4001aec8 <alt_up_sd_card_find_next+0x18>
4001aeb8:	d0afb317 	ldw	r2,-16692(gp)
4001aebc:	1080002b 	ldhuio	r2,0(r2)
4001aec0:	1080008c 	andi	r2,r2,2
4001aec4:	1000151e 	bne	r2,zero,4001af1c <alt_up_sd_card_find_next+0x6c>
    {
        result = true;
    }
	else if (initialized == true)
4001aec8:	d0efb517 	ldw	r3,-16684(gp)
4001aecc:	00800044 	movi	r2,1
4001aed0:	18800226 	beq	r3,r2,4001aedc <alt_up_sd_card_find_next+0x2c>
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
	short int result = 2;
4001aed4:	00800084 	movi	r2,2
			// Call Find_First first.
			result = 3;
		}
	}
	return result;
}
4001aed8:	f800283a 	ret
4001aedc:	00900134 	movhi	r2,16388
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
4001aee0:	00d00134 	movhi	r3,16388
4001aee4:	1094d204 	addi	r2,r2,21320
4001aee8:	18d4a904 	addi	r3,r3,21156
4001aeec:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
4001aef0:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
4001aef4:	d02fb415 	stw	zero,-16688(gp)
4001aef8:	10ffff04 	addi	r3,r2,-4
4001aefc:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
4001af00:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
4001af04:	18000015 	stw	zero,0(r3)
4001af08:	10801004 	addi	r2,r2,64
4001af0c:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
4001af10:	113ffb1e 	bne	r2,r4,4001af00 <__alt_data_end+0xc001af00>
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
	short int result = 2;
4001af14:	00800084 	movi	r2,2
			// Call Find_First first.
			result = 3;
		}
	}
	return result;
}
4001af18:	f800283a 	ret
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
	short int result = 2;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
4001af1c:	d0afb417 	ldw	r2,-16688(gp)
4001af20:	103fec26 	beq	r2,zero,4001aed4 <__alt_data_end+0xc001aed4>
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
4001af24:	deffe204 	addi	sp,sp,-120
4001af28:	dd401915 	stw	r21,100(sp)
	short int result = 2;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		if (search_data.valid)
4001af2c:	05500134 	movhi	r21,16388
4001af30:	ad54a904 	addi	r21,r21,21156
4001af34:	a8800417 	ldw	r2,16(r21)
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
4001af38:	dfc01d15 	stw	ra,116(sp)
4001af3c:	df001c15 	stw	fp,112(sp)
4001af40:	ddc01b15 	stw	r23,108(sp)
4001af44:	dd801a15 	stw	r22,104(sp)
4001af48:	dd001815 	stw	r20,96(sp)
4001af4c:	dcc01715 	stw	r19,92(sp)
4001af50:	dc801615 	stw	r18,88(sp)
4001af54:	dc401515 	stw	r17,84(sp)
4001af58:	dc001415 	stw	r16,80(sp)
	short int result = 2;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		if (search_data.valid)
4001af5c:	10000d1e 	bne	r2,zero,4001af94 <alt_up_sd_card_find_next+0xe4>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
4001af60:	008000c4 	movi	r2,3
		}
	}
	return result;
}
4001af64:	dfc01d17 	ldw	ra,116(sp)
4001af68:	df001c17 	ldw	fp,112(sp)
4001af6c:	ddc01b17 	ldw	r23,108(sp)
4001af70:	dd801a17 	ldw	r22,104(sp)
4001af74:	dd401917 	ldw	r21,100(sp)
4001af78:	dd001817 	ldw	r20,96(sp)
4001af7c:	dcc01717 	ldw	r19,92(sp)
4001af80:	dc801617 	ldw	r18,88(sp)
4001af84:	dc401517 	ldw	r17,84(sp)
4001af88:	dc001417 	ldw	r16,80(sp)
4001af8c:	dec01e04 	addi	sp,sp,120
4001af90:	f800283a 	ret
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		if (search_data.valid)
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
4001af94:	acc00117 	ldw	r19,4(r21)
4001af98:	d9001115 	stw	r4,68(sp)

			if (cluster == 0)
4001af9c:	9800ab1e 	bne	r19,zero,4001b24c <alt_up_sd_card_find_next+0x39c>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
4001afa0:	05d00134 	movhi	r23,16388
4001afa4:	bdd4ae04 	addi	r23,r23,21176
4001afa8:	b880050b 	ldhu	r2,20(r23)
4001afac:	b940030b 	ldhu	r5,12(r23)
4001afb0:	018003c4 	movi	r6,15
4001afb4:	1008917a 	slli	r4,r2,5
4001afb8:	2146b03a 	or	r3,r4,r5
4001afbc:	30c13536 	bltu	r6,r3,4001b494 <alt_up_sd_card_find_next+0x5e4>
4001afc0:	1004927a 	slli	r2,r2,9
4001afc4:	114ab03a 	or	r5,r2,r5
4001afc8:	009000b4 	movhi	r2,16386
4001afcc:	1083f504 	addi	r2,r2,4052
4001afd0:	288b883a 	add	r5,r5,r2
4001afd4:	29400003 	ldbu	r5,0(r5)
4001afd8:	d9401215 	stw	r5,72(sp)
4001afdc:	2805883a 	mov	r2,r5
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
4001afe0:	aa00030f 	ldh	r8,12(r21)

			if (cluster == 0)
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
4001afe4:	ac400217 	ldw	r17,8(r21)
				int file_counter = search_data.file_index_in_sector+1;
4001afe8:	47000044 	addi	fp,r8,1
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
4001afec:	8880930e 	bge	r17,r2,4001b23c <alt_up_sd_card_find_next+0x38c>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
4001aff0:	058003c4 	movi	r22,15
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
4001aff4:	05003944 	movi	r20,229

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
4001aff8:	04c00044 	movi	r19,1
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
4001affc:	04000404 	movi	r16,16
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
4001b000:	b9001317 	ldw	r4,76(r23)
4001b004:	d16fad17 	ldw	r5,-16716(gp)
4001b008:	8909883a 	add	r4,r17,r4
4001b00c:	0016c100 	call	40016c10 <Read_Sector_Data>
4001b010:	10008a26 	beq	r2,zero,4001b23c <alt_up_sd_card_find_next+0x38c>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
4001b014:	b7008516 	blt	r22,fp,4001b22c <alt_up_sd_card_find_next+0x37c>
4001b018:	e024917a 	slli	r18,fp,5
4001b01c:	00000306 	br	4001b02c <alt_up_sd_card_find_next+0x17c>
4001b020:	e7000044 	addi	fp,fp,1
4001b024:	94800804 	addi	r18,r18,32
4001b028:	e4008026 	beq	fp,r16,4001b22c <alt_up_sd_card_find_next+0x37c>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
4001b02c:	d0afab17 	ldw	r2,-16724(gp)
4001b030:	10000426 	beq	r2,zero,4001b044 <alt_up_sd_card_find_next+0x194>
4001b034:	d0afb317 	ldw	r2,-16692(gp)
4001b038:	1080002b 	ldhuio	r2,0(r2)
4001b03c:	1080008c 	andi	r2,r2,2
4001b040:	10000f1e 	bne	r2,zero,4001b080 <alt_up_sd_card_find_next+0x1d0>
    {
        result = true;
    }
	else if (initialized == true)
4001b044:	d0afb517 	ldw	r2,-16684(gp)
4001b048:	14fff51e 	bne	r2,r19,4001b020 <__alt_data_end+0xc001b020>
4001b04c:	00900134 	movhi	r2,16388
4001b050:	1094d204 	addi	r2,r2,21320
	{
		int index;

		initialized = false;
4001b054:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
4001b058:	a8000415 	stw	zero,16(r21)
		is_sd_card_formated_as_FAT16 = false;
4001b05c:	d02fb415 	stw	zero,-16688(gp)
4001b060:	10ffff04 	addi	r3,r2,-4
4001b064:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
4001b068:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
4001b06c:	18000015 	stw	zero,0(r3)
4001b070:	10801004 	addi	r2,r2,64
4001b074:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
4001b078:	113ffb1e 	bne	r2,r4,4001b068 <__alt_data_end+0xc001b068>
4001b07c:	003fe806 	br	4001b020 <__alt_data_end+0xc001b020>

bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
4001b080:	d0afb417 	ldw	r2,-16688(gp)
4001b084:	103fe626 	beq	r2,zero,4001b020 <__alt_data_end+0xc001b020>
4001b088:	880f883a 	mov	r7,r17
4001b08c:	000d883a 	mov	r6,zero
4001b090:	d80b883a 	mov	r5,sp
4001b094:	9009883a 	mov	r4,r18
4001b098:	00168f80 	call	400168f8 <Read_File_Record_At_Offset.part.6>
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
4001b09c:	103fe026 	beq	r2,zero,4001b020 <__alt_data_end+0xc001b020>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
4001b0a0:	d8c00003 	ldbu	r3,0(sp)
4001b0a4:	18803fcc 	andi	r2,r3,255
4001b0a8:	103fdd26 	beq	r2,zero,4001b020 <__alt_data_end+0xc001b020>
4001b0ac:	153fdc26 	beq	r2,r20,4001b020 <__alt_data_end+0xc001b020>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
4001b0b0:	af00030d 	sth	fp,12(r21)
									search_data.current_sector_in_cluster = sector_index;
4001b0b4:	ac400215 	stw	r17,8(r21)
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001b0b8:	01000804 	movi	r4,32
4001b0bc:	11010b26 	beq	r2,r4,4001b4ec <alt_up_sd_card_find_next+0x63c>
		{
			file_name[flength] = file_record->name[index];
4001b0c0:	d9801117 	ldw	r6,68(sp)
			flength = flength + 1;
4001b0c4:	00800044 	movi	r2,1
	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
		{
			file_name[flength] = file_record->name[index];
4001b0c8:	30c00005 	stb	r3,0(r6)
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001b0cc:	d8c00043 	ldbu	r3,1(sp)
4001b0d0:	01000804 	movi	r4,32
4001b0d4:	19403fcc 	andi	r5,r3,255
4001b0d8:	29000426 	beq	r5,r4,4001b0ec <alt_up_sd_card_find_next+0x23c>
		{
			file_name[flength] = file_record->name[index];
4001b0dc:	d9c01117 	ldw	r7,68(sp)
4001b0e0:	3889883a 	add	r4,r7,r2
4001b0e4:	20c00005 	stb	r3,0(r4)
			flength = flength + 1;
4001b0e8:	10800044 	addi	r2,r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001b0ec:	d8c00083 	ldbu	r3,2(sp)
4001b0f0:	01000804 	movi	r4,32
4001b0f4:	19403fcc 	andi	r5,r3,255
4001b0f8:	29000426 	beq	r5,r4,4001b10c <alt_up_sd_card_find_next+0x25c>
		{
			file_name[flength] = file_record->name[index];
4001b0fc:	d9401117 	ldw	r5,68(sp)
4001b100:	2889883a 	add	r4,r5,r2
4001b104:	20c00005 	stb	r3,0(r4)
			flength = flength + 1;
4001b108:	10800044 	addi	r2,r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001b10c:	d8c000c3 	ldbu	r3,3(sp)
4001b110:	01000804 	movi	r4,32
4001b114:	19403fcc 	andi	r5,r3,255
4001b118:	29000426 	beq	r5,r4,4001b12c <alt_up_sd_card_find_next+0x27c>
		{
			file_name[flength] = file_record->name[index];
4001b11c:	d9801117 	ldw	r6,68(sp)
4001b120:	3089883a 	add	r4,r6,r2
4001b124:	20c00005 	stb	r3,0(r4)
			flength = flength + 1;
4001b128:	10800044 	addi	r2,r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001b12c:	d8c00103 	ldbu	r3,4(sp)
4001b130:	01000804 	movi	r4,32
4001b134:	19403fcc 	andi	r5,r3,255
4001b138:	29000426 	beq	r5,r4,4001b14c <alt_up_sd_card_find_next+0x29c>
		{
			file_name[flength] = file_record->name[index];
4001b13c:	d9c01117 	ldw	r7,68(sp)
4001b140:	3889883a 	add	r4,r7,r2
4001b144:	20c00005 	stb	r3,0(r4)
			flength = flength + 1;
4001b148:	10800044 	addi	r2,r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001b14c:	d8c00143 	ldbu	r3,5(sp)
4001b150:	01000804 	movi	r4,32
4001b154:	19403fcc 	andi	r5,r3,255
4001b158:	29000426 	beq	r5,r4,4001b16c <alt_up_sd_card_find_next+0x2bc>
		{
			file_name[flength] = file_record->name[index];
4001b15c:	d9401117 	ldw	r5,68(sp)
4001b160:	2889883a 	add	r4,r5,r2
4001b164:	20c00005 	stb	r3,0(r4)
			flength = flength + 1;
4001b168:	10800044 	addi	r2,r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001b16c:	d8c00183 	ldbu	r3,6(sp)
4001b170:	01000804 	movi	r4,32
4001b174:	19403fcc 	andi	r5,r3,255
4001b178:	29000426 	beq	r5,r4,4001b18c <alt_up_sd_card_find_next+0x2dc>
		{
			file_name[flength] = file_record->name[index];
4001b17c:	d9801117 	ldw	r6,68(sp)
4001b180:	3089883a 	add	r4,r6,r2
4001b184:	20c00005 	stb	r3,0(r4)
			flength = flength + 1;
4001b188:	10800044 	addi	r2,r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001b18c:	d98001c3 	ldbu	r6,7(sp)
4001b190:	01400804 	movi	r5,32
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
4001b194:	d9000203 	ldbu	r4,8(sp)
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001b198:	30c03fcc 	andi	r3,r6,255
4001b19c:	1940cb26 	beq	r3,r5,4001b4cc <alt_up_sd_card_find_next+0x61c>
		{
			file_name[flength] = file_record->name[index];
4001b1a0:	d9c01117 	ldw	r7,68(sp)
4001b1a4:	3887883a 	add	r3,r7,r2
4001b1a8:	19800005 	stb	r6,0(r3)
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
4001b1ac:	21803fcc 	andi	r6,r4,255
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
4001b1b0:	10c00044 	addi	r3,r2,1
		}
	}
	if (file_record->extension[0] != ' ')
4001b1b4:	31401826 	beq	r6,r5,4001b218 <alt_up_sd_card_find_next+0x368>
	{
		file_name[flength] = '.';
4001b1b8:	38c7883a 	add	r3,r7,r3
4001b1bc:	01400b84 	movi	r5,46
4001b1c0:	19400005 	stb	r5,0(r3)
		flength = flength + 1;
4001b1c4:	10800084 	addi	r2,r2,2
4001b1c8:	380d883a 	mov	r6,r7
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
4001b1cc:	d9400243 	ldbu	r5,9(sp)
			{
				file_name[flength] = file_record->extension[index];
4001b1d0:	3087883a 	add	r3,r6,r2
4001b1d4:	19000005 	stb	r4,0(r3)
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
4001b1d8:	29803fcc 	andi	r6,r5,255
4001b1dc:	01000804 	movi	r4,32
			{
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
4001b1e0:	10c00044 	addi	r3,r2,1
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
4001b1e4:	31000426 	beq	r6,r4,4001b1f8 <alt_up_sd_card_find_next+0x348>
			{
				file_name[flength] = file_record->extension[index];
4001b1e8:	d9c01117 	ldw	r7,68(sp)
4001b1ec:	38c7883a 	add	r3,r7,r3
4001b1f0:	19400005 	stb	r5,0(r3)
				flength = flength + 1;
4001b1f4:	10c00084 	addi	r3,r2,2
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
		{
			if (file_record->extension[index] != ' ')
4001b1f8:	d8800283 	ldbu	r2,10(sp)
4001b1fc:	01000804 	movi	r4,32
4001b200:	11403fcc 	andi	r5,r2,255
4001b204:	29000426 	beq	r5,r4,4001b218 <alt_up_sd_card_find_next+0x368>
			{
				file_name[flength] = file_record->extension[index];
4001b208:	d9401117 	ldw	r5,68(sp)
4001b20c:	28c9883a 	add	r4,r5,r3
4001b210:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
4001b214:	18c00044 	addi	r3,r3,1
			}
		}
	}
	file_name[flength] = 0;
4001b218:	d9801117 	ldw	r6,68(sp)
									search_data.file_index_in_sector = file_counter;
									search_data.current_sector_in_cluster = sector_index;

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
4001b21c:	0005883a 	mov	r2,zero
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
4001b220:	30c7883a 	add	r3,r6,r3
4001b224:	18000005 	stb	zero,0(r3)
4001b228:	003f4e06 	br	4001af64 <__alt_data_end+0xc001af64>
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
4001b22c:	d9401217 	ldw	r5,72(sp)
4001b230:	8c400044 	addi	r17,r17,1
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
4001b234:	0039883a 	mov	fp,zero
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
4001b238:	2c7f711e 	bne	r5,r17,4001b000 <__alt_data_end+0xc001b000>
					else
					{
						break;
					}
				}
				result = -1;
4001b23c:	013fffc4 	movi	r4,-1
4001b240:	d900130d 	sth	r4,76(sp)
4001b244:	d880130b 	ldhu	r2,76(sp)
4001b248:	003f4606 	br	4001af64 <__alt_data_end+0xc001af64>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
4001b24c:	aa00030f 	ldh	r8,12(r21)
4001b250:	05d00134 	movhi	r23,16388
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
	short int result = 2;
4001b254:	01c00084 	movi	r7,2
4001b258:	bdd4ae04 	addi	r23,r23,21176
4001b25c:	d9c0130d 	sth	r7,76(sp)
				}
				result = -1;
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
4001b260:	47000044 	addi	fp,r8,1
						{        
							for (; file_counter < 16; file_counter++)
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
4001b264:	05803944 	movi	r22,229

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    {
        result = true;
    }
	else if (initialized == true)
4001b268:	05000044 	movi	r20,1
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
4001b26c:	b8c00383 	ldbu	r3,14(r23)
4001b270:	98bfff84 	addi	r2,r19,-2
4001b274:	b9001417 	ldw	r4,80(r23)
4001b278:	10c5383a 	mul	r2,r2,r3
					int sector_index = search_data.current_sector_in_cluster;
4001b27c:	ac400217 	ldw	r17,8(r21)
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
4001b280:	1109883a 	add	r4,r2,r4
4001b284:	d9001215 	stw	r4,72(sp)
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
4001b288:	88c0760e 	bge	r17,r3,4001b464 <alt_up_sd_card_find_next+0x5b4>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
4001b28c:	04000404 	movi	r16,16
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
4001b290:	d8801217 	ldw	r2,72(sp)
4001b294:	d16fad17 	ldw	r5,-16716(gp)
4001b298:	1449883a 	add	r4,r2,r17
4001b29c:	0016c100 	call	40016c10 <Read_Sector_Data>
4001b2a0:	10009426 	beq	r2,zero,4001b4f4 <alt_up_sd_card_find_next+0x644>
						{        
							for (; file_counter < 16; file_counter++)
4001b2a4:	010003c4 	movi	r4,15
4001b2a8:	27006a16 	blt	r4,fp,4001b454 <alt_up_sd_card_find_next+0x5a4>
4001b2ac:	e024917a 	slli	r18,fp,5
4001b2b0:	00000306 	br	4001b2c0 <alt_up_sd_card_find_next+0x410>
4001b2b4:	e7000044 	addi	fp,fp,1
4001b2b8:	94800804 	addi	r18,r18,32
4001b2bc:	e4006526 	beq	fp,r16,4001b454 <alt_up_sd_card_find_next+0x5a4>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
4001b2c0:	d0afab17 	ldw	r2,-16724(gp)
4001b2c4:	10000426 	beq	r2,zero,4001b2d8 <alt_up_sd_card_find_next+0x428>
4001b2c8:	d0afb317 	ldw	r2,-16692(gp)
4001b2cc:	1080002b 	ldhuio	r2,0(r2)
4001b2d0:	1080008c 	andi	r2,r2,2
4001b2d4:	10000f1e 	bne	r2,zero,4001b314 <alt_up_sd_card_find_next+0x464>
    {
        result = true;
    }
	else if (initialized == true)
4001b2d8:	d0afb517 	ldw	r2,-16684(gp)
4001b2dc:	153ff51e 	bne	r2,r20,4001b2b4 <__alt_data_end+0xc001b2b4>
4001b2e0:	00900134 	movhi	r2,16388
4001b2e4:	1094d204 	addi	r2,r2,21320
	{
		int index;

		initialized = false;
4001b2e8:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
4001b2ec:	a8000415 	stw	zero,16(r21)
		is_sd_card_formated_as_FAT16 = false;
4001b2f0:	d02fb415 	stw	zero,-16688(gp)
4001b2f4:	10ffff04 	addi	r3,r2,-4
4001b2f8:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
4001b2fc:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
4001b300:	18000015 	stw	zero,0(r3)
4001b304:	10801004 	addi	r2,r2,64
4001b308:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
4001b30c:	20bffb1e 	bne	r4,r2,4001b2fc <__alt_data_end+0xc001b2fc>
4001b310:	003fe806 	br	4001b2b4 <__alt_data_end+0xc001b2b4>

bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
4001b314:	d0afb417 	ldw	r2,-16688(gp)
4001b318:	103fe626 	beq	r2,zero,4001b2b4 <__alt_data_end+0xc001b2b4>
4001b31c:	880f883a 	mov	r7,r17
4001b320:	980d883a 	mov	r6,r19
4001b324:	d80b883a 	mov	r5,sp
4001b328:	9009883a 	mov	r4,r18
4001b32c:	00168f80 	call	400168f8 <Read_File_Record_At_Offset.part.6>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
4001b330:	103fe026 	beq	r2,zero,4001b2b4 <__alt_data_end+0xc001b2b4>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
4001b334:	d8c00003 	ldbu	r3,0(sp)
4001b338:	18803fcc 	andi	r2,r3,255
4001b33c:	103fdd26 	beq	r2,zero,4001b2b4 <__alt_data_end+0xc001b2b4>
4001b340:	15bfdc26 	beq	r2,r22,4001b2b4 <__alt_data_end+0xc001b2b4>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
4001b344:	acc00115 	stw	r19,4(r21)
										search_data.file_index_in_sector = file_counter;
4001b348:	af00030d 	sth	fp,12(r21)
										search_data.current_sector_in_cluster = sector_index;
4001b34c:	ac400215 	stw	r17,8(r21)
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001b350:	01000804 	movi	r4,32
4001b354:	11005226 	beq	r2,r4,4001b4a0 <alt_up_sd_card_find_next+0x5f0>
		{
			file_name[flength] = file_record->name[index];
4001b358:	d9401117 	ldw	r5,68(sp)
			flength = flength + 1;
4001b35c:	00800044 	movi	r2,1
	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
		{
			file_name[flength] = file_record->name[index];
4001b360:	28c00005 	stb	r3,0(r5)
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001b364:	d8c00043 	ldbu	r3,1(sp)
4001b368:	01000804 	movi	r4,32
4001b36c:	19403fcc 	andi	r5,r3,255
4001b370:	29000426 	beq	r5,r4,4001b384 <alt_up_sd_card_find_next+0x4d4>
		{
			file_name[flength] = file_record->name[index];
4001b374:	d9801117 	ldw	r6,68(sp)
4001b378:	3089883a 	add	r4,r6,r2
4001b37c:	20c00005 	stb	r3,0(r4)
			flength = flength + 1;
4001b380:	10800044 	addi	r2,r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001b384:	d8c00083 	ldbu	r3,2(sp)
4001b388:	01000804 	movi	r4,32
4001b38c:	19403fcc 	andi	r5,r3,255
4001b390:	29000426 	beq	r5,r4,4001b3a4 <alt_up_sd_card_find_next+0x4f4>
		{
			file_name[flength] = file_record->name[index];
4001b394:	d9c01117 	ldw	r7,68(sp)
4001b398:	3889883a 	add	r4,r7,r2
4001b39c:	20c00005 	stb	r3,0(r4)
			flength = flength + 1;
4001b3a0:	10800044 	addi	r2,r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001b3a4:	d8c000c3 	ldbu	r3,3(sp)
4001b3a8:	01000804 	movi	r4,32
4001b3ac:	19403fcc 	andi	r5,r3,255
4001b3b0:	29000426 	beq	r5,r4,4001b3c4 <alt_up_sd_card_find_next+0x514>
		{
			file_name[flength] = file_record->name[index];
4001b3b4:	d9401117 	ldw	r5,68(sp)
4001b3b8:	2889883a 	add	r4,r5,r2
4001b3bc:	20c00005 	stb	r3,0(r4)
			flength = flength + 1;
4001b3c0:	10800044 	addi	r2,r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001b3c4:	d8c00103 	ldbu	r3,4(sp)
4001b3c8:	01000804 	movi	r4,32
4001b3cc:	19403fcc 	andi	r5,r3,255
4001b3d0:	29000426 	beq	r5,r4,4001b3e4 <alt_up_sd_card_find_next+0x534>
		{
			file_name[flength] = file_record->name[index];
4001b3d4:	d9801117 	ldw	r6,68(sp)
4001b3d8:	3089883a 	add	r4,r6,r2
4001b3dc:	20c00005 	stb	r3,0(r4)
			flength = flength + 1;
4001b3e0:	10800044 	addi	r2,r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001b3e4:	d8c00143 	ldbu	r3,5(sp)
4001b3e8:	01000804 	movi	r4,32
4001b3ec:	19403fcc 	andi	r5,r3,255
4001b3f0:	29000426 	beq	r5,r4,4001b404 <alt_up_sd_card_find_next+0x554>
		{
			file_name[flength] = file_record->name[index];
4001b3f4:	d9c01117 	ldw	r7,68(sp)
4001b3f8:	3889883a 	add	r4,r7,r2
4001b3fc:	20c00005 	stb	r3,0(r4)
			flength = flength + 1;
4001b400:	10800044 	addi	r2,r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001b404:	d8c00183 	ldbu	r3,6(sp)
4001b408:	01000804 	movi	r4,32
4001b40c:	19403fcc 	andi	r5,r3,255
4001b410:	29000426 	beq	r5,r4,4001b424 <alt_up_sd_card_find_next+0x574>
		{
			file_name[flength] = file_record->name[index];
4001b414:	d9401117 	ldw	r5,68(sp)
4001b418:	2889883a 	add	r4,r5,r2
4001b41c:	20c00005 	stb	r3,0(r4)
			flength = flength + 1;
4001b420:	10800044 	addi	r2,r2,1
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001b424:	d8c001c3 	ldbu	r3,7(sp)
4001b428:	01400804 	movi	r5,32
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
4001b42c:	d9000203 	ldbu	r4,8(sp)
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
4001b430:	19803fcc 	andi	r6,r3,255
4001b434:	31401c26 	beq	r6,r5,4001b4a8 <alt_up_sd_card_find_next+0x5f8>
		{
			file_name[flength] = file_record->name[index];
4001b438:	d9c01117 	ldw	r7,68(sp)
4001b43c:	388d883a 	add	r6,r7,r2
4001b440:	30c00005 	stb	r3,0(r6)
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
4001b444:	21803fcc 	andi	r6,r4,255
	for (index = 0; index < 8; index++)
	{
		if (file_record->name[index] != ' ')
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
4001b448:	10c00044 	addi	r3,r2,1
		}
	}
	if (file_record->extension[0] != ' ')
4001b44c:	317f5a1e 	bne	r6,r5,4001b1b8 <__alt_data_end+0xc001b1b8>
4001b450:	003f7106 	br	4001b218 <__alt_data_end+0xc001b218>
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
4001b454:	b8800383 	ldbu	r2,14(r23)
4001b458:	8c400044 	addi	r17,r17,1
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
4001b45c:	0039883a 	mov	fp,zero
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
4001b460:	88bf8b16 	blt	r17,r2,4001b290 <__alt_data_end+0xc001b290>
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
4001b464:	d9401004 	addi	r5,sp,64
4001b468:	9809883a 	mov	r4,r19
4001b46c:	0016d640 	call	40016d64 <get_cluster_flag>
4001b470:	10002526 	beq	r2,zero,4001b508 <alt_up_sd_card_find_next+0x658>
4001b474:	dcc0100b 	ldhu	r19,64(sp)
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
4001b478:	01fffe04 	movi	r7,-8
4001b47c:	00bffe14 	movui	r2,65528
4001b480:	3ce6703a 	and	r19,r7,r19
4001b484:	98802326 	beq	r19,r2,4001b514 <alt_up_sd_card_find_next+0x664>
						{
							// Error encountered.                 
							result = -1;
						}
					}              
				} while (cluster < 0x0000fff8);
4001b488:	00bffdd4 	movui	r2,65527
4001b48c:	14ff770e 	bge	r2,r19,4001b26c <__alt_data_end+0xc001b26c>
4001b490:	003f6c06 	br	4001b244 <__alt_data_end+0xc001b244>
			int cluster = search_data.current_cluster_index;

			if (cluster == 0)
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
4001b494:	000797c0 	call	4000797c <__divsi3>
4001b498:	d8801215 	stw	r2,72(sp)
4001b49c:	003ed006 	br	4001afe0 <__alt_data_end+0xc001afe0>

void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
	int index;
	int flength = 0;
4001b4a0:	0005883a 	mov	r2,zero
4001b4a4:	003faf06 	br	4001b364 <__alt_data_end+0xc001b364>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
4001b4a8:	20c03fcc 	andi	r3,r4,255
4001b4ac:	19801426 	beq	r3,r6,4001b500 <alt_up_sd_card_find_next+0x650>
	{
		file_name[flength] = '.';
4001b4b0:	d9c01117 	ldw	r7,68(sp)
4001b4b4:	01400b84 	movi	r5,46
4001b4b8:	3887883a 	add	r3,r7,r2
4001b4bc:	19400005 	stb	r5,0(r3)
		flength = flength + 1;
4001b4c0:	10800044 	addi	r2,r2,1
4001b4c4:	380d883a 	mov	r6,r7
4001b4c8:	003f4006 	br	4001b1cc <__alt_data_end+0xc001b1cc>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
4001b4cc:	21403fcc 	andi	r5,r4,255
4001b4d0:	28c00b26 	beq	r5,r3,4001b500 <alt_up_sd_card_find_next+0x650>
	{
		file_name[flength] = '.';
4001b4d4:	d9801117 	ldw	r6,68(sp)
4001b4d8:	01400b84 	movi	r5,46
4001b4dc:	3087883a 	add	r3,r6,r2
4001b4e0:	19400005 	stb	r5,0(r3)
		flength = flength + 1;
4001b4e4:	10800044 	addi	r2,r2,1
4001b4e8:	003f3806 	br	4001b1cc <__alt_data_end+0xc001b1cc>

void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
	int index;
	int flength = 0;
4001b4ec:	0005883a 	mov	r2,zero
4001b4f0:	003ef606 	br	4001b0cc <__alt_data_end+0xc001b0cc>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
4001b4f4:	b8800383 	ldbu	r2,14(r23)
4001b4f8:	88bfe316 	blt	r17,r2,4001b488 <__alt_data_end+0xc001b488>
4001b4fc:	003fd906 	br	4001b464 <__alt_data_end+0xc001b464>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
4001b500:	1007883a 	mov	r3,r2
4001b504:	003f4406 	br	4001b218 <__alt_data_end+0xc001b218>
							cluster = ((new_cluster) & 0x0000fff8);
						}
						else
						{
							// Error encountered.                 
							result = -1;
4001b508:	017fffc4 	movi	r5,-1
4001b50c:	d940130d 	sth	r5,76(sp)
4001b510:	003fdd06 	br	4001b488 <__alt_data_end+0xc001b488>

						if (get_cluster_flag(cluster, &new_cluster))
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
							{
								result = -1;
4001b514:	013fffc4 	movi	r4,-1
								search_data.valid = false;
4001b518:	a8000415 	stw	zero,16(r21)

						if (get_cluster_flag(cluster, &new_cluster))
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
							{
								result = -1;
4001b51c:	d900130d 	sth	r4,76(sp)
4001b520:	003fd906 	br	4001b488 <__alt_data_end+0xc001b488>

4001b524 <alt_up_sd_card_find_first>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
4001b524:	d0afab17 	ldw	r2,-16724(gp)
4001b528:	10000426 	beq	r2,zero,4001b53c <alt_up_sd_card_find_first+0x18>
4001b52c:	d0afb317 	ldw	r2,-16692(gp)
4001b530:	1080002b 	ldhuio	r2,0(r2)
4001b534:	1080008c 	andi	r2,r2,2
4001b538:	1000151e 	bne	r2,zero,4001b590 <alt_up_sd_card_find_first+0x6c>
    {
        result = true;
    }
	else if (initialized == true)
4001b53c:	d0efb517 	ldw	r3,-16684(gp)
4001b540:	00800044 	movi	r2,1
4001b544:	18800226 	beq	r3,r2,4001b550 <alt_up_sd_card_find_first+0x2c>
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
	short int result = 2;
4001b548:	00800084 	movi	r2,2
		else
		{
			result = 1;
		}
	}
	return result;
4001b54c:	f800283a 	ret
4001b550:	00900134 	movhi	r2,16388
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
4001b554:	00d00134 	movhi	r3,16388
4001b558:	1094d204 	addi	r2,r2,21320
4001b55c:	18d4a904 	addi	r3,r3,21156
4001b560:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
4001b564:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
4001b568:	d02fb415 	stw	zero,-16688(gp)
4001b56c:	10ffff04 	addi	r3,r2,-4
4001b570:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
4001b574:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
4001b578:	18000015 	stw	zero,0(r3)
4001b57c:	10801004 	addi	r2,r2,64
4001b580:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
4001b584:	113ffb1e 	bne	r2,r4,4001b574 <__alt_data_end+0xc001b574>
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
	short int result = 2;
4001b588:	00800084 	movi	r2,2
		else
		{
			result = 1;
		}
	}
	return result;
4001b58c:	f800283a 	ret
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
	short int result = 2;
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
4001b590:	d0afb417 	ldw	r2,-16688(gp)
4001b594:	103fec26 	beq	r2,zero,4001b548 <__alt_data_end+0xc001b548>
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
4001b598:	deffed04 	addi	sp,sp,-76
4001b59c:	dc001115 	stw	r16,68(sp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
4001b5a0:	d80d883a 	mov	r6,sp
4001b5a4:	2821883a 	mov	r16,r5
4001b5a8:	d9401004 	addi	r5,sp,64
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
4001b5ac:	dfc01215 	stw	ra,72(sp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
4001b5b0:	00180140 	call	40018014 <get_home_directory_cluster_for_file>
4001b5b4:	1000051e 	bne	r2,zero,4001b5cc <alt_up_sd_card_find_first+0xa8>
			search_data.valid = true;
			result = alt_up_sd_card_find_next(file_name);
		}
		else
		{
			result = 1;
4001b5b8:	00800044 	movi	r2,1
		}
	}
	return result;
}
4001b5bc:	dfc01217 	ldw	ra,72(sp)
4001b5c0:	dc001117 	ldw	r16,68(sp)
4001b5c4:	dec01304 	addi	sp,sp,76
4001b5c8:	f800283a 	ret
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
		{
			search_data.directory_root_cluster = home_directory_cluster;
4001b5cc:	d8c01017 	ldw	r3,64(sp)
4001b5d0:	00900134 	movhi	r2,16388
4001b5d4:	1094a904 	addi	r2,r2,21156
4001b5d8:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
4001b5dc:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
			search_data.file_index_in_sector = -1;
4001b5e0:	00ffffc4 	movi	r3,-1
			search_data.valid = true;
			result = alt_up_sd_card_find_next(file_name);
4001b5e4:	8009883a 	mov	r4,r16
		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
		{
			search_data.directory_root_cluster = home_directory_cluster;
			search_data.current_cluster_index = home_directory_cluster;
			search_data.current_sector_in_cluster = 0;
			search_data.file_index_in_sector = -1;
4001b5e8:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
4001b5ec:	00c00044 	movi	r3,1
4001b5f0:	10c00415 	stw	r3,16(r2)

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
		{
			search_data.directory_root_cluster = home_directory_cluster;
			search_data.current_cluster_index = home_directory_cluster;
			search_data.current_sector_in_cluster = 0;
4001b5f4:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
			search_data.valid = true;
			result = alt_up_sd_card_find_next(file_name);
4001b5f8:	001aeb00 	call	4001aeb0 <alt_up_sd_card_find_next>
4001b5fc:	003fef06 	br	4001b5bc <__alt_data_end+0xc001b5bc>

4001b600 <alt_up_sd_card_fopen>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
4001b600:	d0afab17 	ldw	r2,-16724(gp)
4001b604:	10000426 	beq	r2,zero,4001b618 <alt_up_sd_card_fopen+0x18>
4001b608:	d0afb317 	ldw	r2,-16692(gp)
4001b60c:	1080002b 	ldhuio	r2,0(r2)
4001b610:	1080008c 	andi	r2,r2,2
4001b614:	1000051e 	bne	r2,zero,4001b62c <alt_up_sd_card_fopen+0x2c>
    {
        result = true;
    }
	else if (initialized == true)
4001b618:	d0efb517 	ldw	r3,-16684(gp)
4001b61c:	00800044 	movi	r2,1
4001b620:	18802c26 	beq	r3,r2,4001b6d4 <alt_up_sd_card_fopen+0xd4>
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
	short int file_record_index = -1;
4001b624:	00bfffc4 	movi	r2,-1
4001b628:	f800283a 	ret

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
4001b62c:	d0afb417 	ldw	r2,-16688(gp)
4001b630:	103ffc26 	beq	r2,zero,4001b624 <__alt_data_end+0xc001b624>
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
4001b634:	deffe704 	addi	sp,sp,-100
4001b638:	dc801315 	stw	r18,76(sp)
4001b63c:	dc401215 	stw	r17,72(sp)
4001b640:	dfc01815 	stw	ra,96(sp)
4001b644:	dd801715 	stw	r22,92(sp)
4001b648:	dd401615 	stw	r21,88(sp)
4001b64c:	dd001515 	stw	r20,84(sp)
4001b650:	dcc01415 	stw	r19,80(sp)
4001b654:	dc001115 	stw	r16,68(sp)
4001b658:	2023883a 	mov	r17,r4
4001b65c:	2825883a 	mov	r18,r5
	short int file_record_index = -1;

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
        unsigned int home_directory_cluster = 0;
4001b660:	d8001015 	stw	zero,64(sp)

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
4001b664:	000c9ec0 	call	4000c9ec <strlen>
    
    for (index = 0; index < length; index++)
4001b668:	00800b0e 	bge	zero,r2,4001b698 <alt_up_sd_card_fopen+0x98>
4001b66c:	8807883a 	mov	r3,r17
4001b670:	8885883a 	add	r2,r17,r2
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
4001b674:	01000644 	movi	r4,25
4001b678:	19800003 	ldbu	r6,0(r3)
4001b67c:	31ffe7c4 	addi	r7,r6,-97
4001b680:	39c03fcc 	andi	r7,r7,255
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
4001b684:	31bff804 	addi	r6,r6,-32
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
4001b688:	21c00136 	bltu	r4,r7,4001b690 <alt_up_sd_card_fopen+0x90>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
4001b68c:	19800005 	stb	r6,0(r3)
4001b690:	18c00044 	addi	r3,r3,1
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
4001b694:	18bff81e 	bne	r3,r2,4001b678 <__alt_data_end+0xc001b678>
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
        if (check_file_name_for_FAT16_compliance(name))
4001b698:	8809883a 	mov	r4,r17
4001b69c:	0017a940 	call	40017a94 <check_file_name_for_FAT16_compliance>
4001b6a0:	10001c1e 	bne	r2,zero,4001b714 <alt_up_sd_card_fopen+0x114>
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
	short int file_record_index = -1;
4001b6a4:	057fffc4 	movi	r21,-1
4001b6a8:	a805883a 	mov	r2,r21
    		}
        }
	}

	return file_record_index;
}
4001b6ac:	dfc01817 	ldw	ra,96(sp)
4001b6b0:	dd801717 	ldw	r22,92(sp)
4001b6b4:	dd401617 	ldw	r21,88(sp)
4001b6b8:	dd001517 	ldw	r20,84(sp)
4001b6bc:	dcc01417 	ldw	r19,80(sp)
4001b6c0:	dc801317 	ldw	r18,76(sp)
4001b6c4:	dc401217 	ldw	r17,72(sp)
4001b6c8:	dc001117 	ldw	r16,68(sp)
4001b6cc:	dec01904 	addi	sp,sp,100
4001b6d0:	f800283a 	ret
4001b6d4:	00900134 	movhi	r2,16388
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
4001b6d8:	00d00134 	movhi	r3,16388
4001b6dc:	1094d204 	addi	r2,r2,21320
4001b6e0:	18d4a904 	addi	r3,r3,21156
4001b6e4:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
4001b6e8:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
4001b6ec:	d02fb415 	stw	zero,-16688(gp)
4001b6f0:	10ffff04 	addi	r3,r2,-4
4001b6f4:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
4001b6f8:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
4001b6fc:	18000015 	stw	zero,0(r3)
4001b700:	10801004 	addi	r2,r2,64
4001b704:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
4001b708:	113ffb1e 	bne	r2,r4,4001b6f8 <__alt_data_end+0xc001b6f8>
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
	short int file_record_index = -1;
4001b70c:	00bfffc4 	movi	r2,-1
4001b710:	f800283a 	ret
        if (check_file_name_for_FAT16_compliance(name))
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
4001b714:	d80d883a 	mov	r6,sp
4001b718:	d9401004 	addi	r5,sp,64
4001b71c:	8809883a 	mov	r4,r17
4001b720:	00180140 	call	40018014 <get_home_directory_cluster_for_file>
4001b724:	10004426 	beq	r2,zero,4001b838 <alt_up_sd_card_fopen+0x238>
4001b728:	04d00134 	movhi	r19,16388
4001b72c:	9cd4d204 	addi	r19,r19,21320
4001b730:	0021883a 	mov	r16,zero
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
4001b734:	01000504 	movi	r4,20
        if (check_file_name_for_FAT16_compliance(name))
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
4001b738:	9805883a 	mov	r2,r19
4001b73c:	00000206 	br	4001b748 <alt_up_sd_card_fopen+0x148>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
4001b740:	84000044 	addi	r16,r16,1
4001b744:	813fd726 	beq	r16,r4,4001b6a4 <__alt_data_end+0xc001b6a4>
    		{
    			if (active_files[index].in_use == false)
4001b748:	10c00017 	ldw	r3,0(r2)
4001b74c:	10801004 	addi	r2,r2,64
4001b750:	183ffb1e 	bne	r3,zero,4001b740 <__alt_data_end+0xc001b740>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
4001b754:	802c91ba 	slli	r22,r16,6
4001b758:	05100134 	movhi	r20,16388
4001b75c:	a514c304 	addi	r20,r20,21260
4001b760:	d9001017 	ldw	r4,64(sp)
4001b764:	a5ad883a 	add	r22,r20,r22
4001b768:	880b883a 	mov	r5,r17
4001b76c:	b00d883a 	mov	r6,r22
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
    		{
    			if (active_files[index].in_use == false)
    			{
    				file_record_index = index;
4001b770:	802b883a 	mov	r21,r16
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
4001b774:	0018ee00 	call	40018ee0 <find_file_in_directory>
4001b778:	10001a26 	beq	r2,zero,4001b7e4 <alt_up_sd_card_fopen+0x1e4>
                {
                    if (create)
4001b77c:	90002e1e 	bne	r18,zero,4001b838 <alt_up_sd_card_fopen+0x238>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
4001b780:	b080058b 	ldhu	r2,22(r22)
                    active_files[file_record_index].current_sector_in_cluster = 0;
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
4001b784:	01c00044 	movi	r7,1
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
                    active_files[file_record_index].current_sector_in_cluster = 0;
4001b788:	b0000815 	stw	zero,32(r22)
                    if (create)
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
4001b78c:	b0800715 	stw	r2,28(r22)
                    active_files[file_record_index].current_sector_in_cluster = 0;
                    active_files[file_record_index].current_byte_position = 0;
4001b790:	b0000915 	stw	zero,36(r22)
                    active_files[file_record_index].in_use = true;
4001b794:	b1c00f15 	stw	r7,60(r22)
    				active_files[file_record_index].modified = false;
4001b798:	b0000e15 	stw	zero,56(r22)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
4001b79c:	b2800a04 	addi	r10,r22,40
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
4001b7a0:	b2c00b04 	addi	r11,r22,44
4001b7a4:	a1400c04 	addi	r5,r20,48
4001b7a8:	a0800b04 	addi	r2,r20,44
4001b7ac:	a1000a04 	addi	r4,r20,40
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
4001b7b0:	0007883a 	mov	r3,zero
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
4001b7b4:	b5800c04 	addi	r22,r22,48
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
4001b7b8:	02000504 	movi	r8,20
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
4001b7bc:	80c00226 	beq	r16,r3,4001b7c8 <alt_up_sd_card_fopen+0x1c8>
4001b7c0:	99800017 	ldw	r6,0(r19)
4001b7c4:	31c01126 	beq	r6,r7,4001b80c <alt_up_sd_card_fopen+0x20c>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
4001b7c8:	18c00044 	addi	r3,r3,1
4001b7cc:	9cc01004 	addi	r19,r19,64
4001b7d0:	29401004 	addi	r5,r5,64
4001b7d4:	10801004 	addi	r2,r2,64
4001b7d8:	21001004 	addi	r4,r4,64
4001b7dc:	1a3ff71e 	bne	r3,r8,4001b7bc <__alt_data_end+0xc001b7bc>
4001b7e0:	003fb106 	br	4001b6a8 <__alt_data_end+0xc001b6a8>
							}
						}
					}

                }
                else if (create)
4001b7e4:	903faf26 	beq	r18,zero,4001b6a4 <__alt_data_end+0xc001b6a4>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
4001b7e8:	d80d883a 	mov	r6,sp
4001b7ec:	b00b883a 	mov	r5,r22
4001b7f0:	8809883a 	mov	r4,r17
4001b7f4:	001a4540 	call	4001a454 <create_file>
4001b7f8:	103faa26 	beq	r2,zero,4001b6a4 <__alt_data_end+0xc001b6a4>
                    {
                        active_files[file_record_index].in_use = true;
4001b7fc:	00800044 	movi	r2,1
4001b800:	b0800f15 	stw	r2,60(r22)
    					active_files[file_record_index].modified = true;
4001b804:	b0800e15 	stw	r2,56(r22)
4001b808:	003fa706 	br	4001b6a8 <__alt_data_end+0xc001b6a8>
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
4001b80c:	21800017 	ldw	r6,0(r4)
4001b810:	52400017 	ldw	r9,0(r10)
4001b814:	49bfec1e 	bne	r9,r6,4001b7c8 <__alt_data_end+0xc001b7c8>
4001b818:	11800017 	ldw	r6,0(r2)
4001b81c:	5a400017 	ldw	r9,0(r11)
4001b820:	49bfe91e 	bne	r9,r6,4001b7c8 <__alt_data_end+0xc001b7c8>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
4001b824:	2980000f 	ldh	r6,0(r5)
4001b828:	b240000f 	ldh	r9,0(r22)
4001b82c:	49bfe61e 	bne	r9,r6,4001b7c8 <__alt_data_end+0xc001b7c8>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
4001b830:	057fff84 	movi	r21,-2
4001b834:	003f9c06 	br	4001b6a8 <__alt_data_end+0xc001b6a8>
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
            {
                return file_record_index;
4001b838:	00bfffc4 	movi	r2,-1
4001b83c:	003f9b06 	br	4001b6ac <__alt_data_end+0xc001b6ac>

4001b840 <alt_up_sd_card_set_attributes>:

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
4001b840:	20bfffcc 	andi	r2,r4,65535
4001b844:	00c004c4 	movi	r3,19
4001b848:	18800a36 	bltu	r3,r2,4001b874 <alt_up_sd_card_set_attributes+0x34>
    {
        if (active_files[file_handle].in_use)
4001b84c:	213fffcc 	andi	r4,r4,65535
4001b850:	2120001c 	xori	r4,r4,32768
4001b854:	21200004 	addi	r4,r4,-32768
4001b858:	200891ba 	slli	r4,r4,6
4001b85c:	00900134 	movhi	r2,16388
4001b860:	1094c304 	addi	r2,r2,21260
4001b864:	1109883a 	add	r4,r2,r4
4001b868:	20800f17 	ldw	r2,60(r4)
4001b86c:	10000126 	beq	r2,zero,4001b874 <alt_up_sd_card_set_attributes+0x34>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
4001b870:	214002c5 	stb	r5,11(r4)
4001b874:	f800283a 	ret

4001b878 <alt_up_sd_card_get_attributes>:
short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
	short int result = -1;
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
4001b878:	20bfffcc 	andi	r2,r4,65535
4001b87c:	00c004c4 	movi	r3,19
4001b880:	18800b36 	bltu	r3,r2,4001b8b0 <alt_up_sd_card_get_attributes+0x38>
    {
        if (active_files[file_handle].in_use)
4001b884:	213fffcc 	andi	r4,r4,65535
4001b888:	2120001c 	xori	r4,r4,32768
4001b88c:	21200004 	addi	r4,r4,-32768
4001b890:	200891ba 	slli	r4,r4,6
4001b894:	00900134 	movhi	r2,16388
4001b898:	1094c304 	addi	r2,r2,21260
4001b89c:	1109883a 	add	r4,r2,r4
4001b8a0:	20800f17 	ldw	r2,60(r4)
4001b8a4:	10000226 	beq	r2,zero,4001b8b0 <alt_up_sd_card_get_attributes+0x38>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
4001b8a8:	208002c3 	ldbu	r2,11(r4)
4001b8ac:	f800283a 	ret

short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
	short int result = -1;
4001b8b0:	00bfffc4 	movi	r2,-1
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
		}
	}
	return result;
}
4001b8b4:	f800283a 	ret

4001b8b8 <alt_up_sd_card_read>:
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
    short int ch = -1;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
4001b8b8:	20bfffcc 	andi	r2,r4,65535
4001b8bc:	00c004c4 	movi	r3,19
4001b8c0:	18805d36 	bltu	r3,r2,4001ba38 <alt_up_sd_card_read+0x180>
    {
        if (active_files[file_handle].in_use)
4001b8c4:	213fffcc 	andi	r4,r4,65535
4001b8c8:	2120001c 	xori	r4,r4,32768
}

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
4001b8cc:	defffb04 	addi	sp,sp,-20
    short int ch = -1;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
4001b8d0:	21200004 	addi	r4,r4,-32768
}

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
4001b8d4:	dc000015 	stw	r16,0(sp)
    short int ch = -1;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
4001b8d8:	202091ba 	slli	r16,r4,6
}

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
4001b8dc:	dc400115 	stw	r17,4(sp)
    short int ch = -1;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
4001b8e0:	04500134 	movhi	r17,16388
4001b8e4:	8c54c304 	addi	r17,r17,21260
4001b8e8:	8c05883a 	add	r2,r17,r16
4001b8ec:	10c00f17 	ldw	r3,60(r2)
}

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
4001b8f0:	dfc00415 	stw	ra,16(sp)
4001b8f4:	dcc00315 	stw	r19,12(sp)
4001b8f8:	dc800215 	stw	r18,8(sp)
    short int ch = -1;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
4001b8fc:	18002e26 	beq	r3,zero,4001b9b8 <alt_up_sd_card_read+0x100>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
4001b900:	11400917 	ldw	r5,36(r2)
4001b904:	10c00617 	ldw	r3,24(r2)
4001b908:	28c02b2e 	bgeu	r5,r3,4001b9b8 <alt_up_sd_card_read+0x100>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
4001b90c:	04900134 	movhi	r18,16388
4001b910:	14c00717 	ldw	r19,28(r2)
4001b914:	9494ae04 	addi	r18,r18,21176
4001b918:	91c00383 	ldbu	r7,14(r18)
                                  active_files[file_handle].current_sector_in_cluster;
4001b91c:	10800804 	addi	r2,r2,32
4001b920:	11800017 	ldw	r6,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
4001b924:	993fff84 	addi	r4,r19,-2
4001b928:	90c01417 	ldw	r3,80(r18)
4001b92c:	21c9383a 	mul	r4,r4,r7
4001b930:	30c7883a 	add	r3,r6,r3
4001b934:	20c9883a 	add	r4,r4,r3
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
4001b938:	2800171e 	bne	r5,zero,4001b998 <alt_up_sd_card_read+0xe0>
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
                        data_sector = data_sector + 1;
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
4001b93c:	d16fad17 	ldw	r5,-16716(gp)
4001b940:	d0afa917 	ldw	r2,-16732(gp)
4001b944:	2147883a 	add	r3,r4,r5
4001b948:	18800226 	beq	r3,r2,4001b954 <alt_up_sd_card_read+0x9c>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
4001b94c:	0016c100 	call	40016c10 <Read_Sector_Data>
4001b950:	10003b26 	beq	r2,zero,4001ba40 <alt_up_sd_card_read+0x188>
                    {
						return -2;
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
4001b954:	8c21883a 	add	r16,r17,r16
4001b958:	84000904 	addi	r16,r16,36
4001b95c:	80c00017 	ldw	r3,0(r16)
4001b960:	d12fae17 	ldw	r4,-16712(gp)
4001b964:	18807fcc 	andi	r2,r3,511
4001b968:	2085883a 	add	r2,r4,r2
4001b96c:	10800023 	ldbuio	r2,0(r2)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
4001b970:	18c00044 	addi	r3,r3,1
4001b974:	80c00015 	stw	r3,0(r16)
                    {
						return -2;
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
4001b978:	10803fcc 	andi	r2,r2,255
            }
        }
    }
    
    return ch;
}
4001b97c:	dfc00417 	ldw	ra,16(sp)
4001b980:	dcc00317 	ldw	r19,12(sp)
4001b984:	dc800217 	ldw	r18,8(sp)
4001b988:	dc400117 	ldw	r17,4(sp)
4001b98c:	dc000017 	ldw	r16,0(sp)
4001b990:	dec00504 	addi	sp,sp,20
4001b994:	f800283a 	ret
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
4001b998:	29407fcc 	andi	r5,r5,511
4001b99c:	283fe71e 	bne	r5,zero,4001b93c <__alt_data_end+0xc001b93c>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
4001b9a0:	39ffffc4 	addi	r7,r7,-1
4001b9a4:	31c00626 	beq	r6,r7,4001b9c0 <alt_up_sd_card_read+0x108>
                            return -2;
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
4001b9a8:	31800044 	addi	r6,r6,1
4001b9ac:	11800015 	stw	r6,0(r2)
                        data_sector = data_sector + 1;
4001b9b0:	21000044 	addi	r4,r4,1
4001b9b4:	003fe106 	br	4001b93c <__alt_data_end+0xc001b93c>

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
    short int ch = -1;
4001b9b8:	00bfffc4 	movi	r2,-1
4001b9bc:	003fef06 	br	4001b97c <__alt_data_end+0xc001b97c>


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
4001b9c0:	9808d23a 	srli	r4,r19,8
4001b9c4:	d0efad17 	ldw	r3,-16716(gp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
4001b9c8:	90801117 	ldw	r2,68(r18)


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
4001b9cc:	20c9883a 	add	r4,r4,r3
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
4001b9d0:	2089883a 	add	r4,r4,r2
     
    if (sector_index != current_sector_index)
4001b9d4:	d0afa917 	ldw	r2,-16732(gp)
4001b9d8:	20800326 	beq	r4,r2,4001b9e8 <alt_up_sd_card_read+0x130>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
4001b9dc:	000b883a 	mov	r5,zero
4001b9e0:	0016c100 	call	40016c10 <Read_Sector_Data>
4001b9e4:	10001626 	beq	r2,zero,4001ba40 <alt_up_sd_card_read+0x188>
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
4001b9e8:	d0afab17 	ldw	r2,-16724(gp)
4001b9ec:	9cc03fcc 	andi	r19,r19,255
4001b9f0:	9ce7883a 	add	r19,r19,r19
4001b9f4:	10800a17 	ldw	r2,40(r2)
4001b9f8:	98a7883a 	add	r19,r19,r2
4001b9fc:	9880002b 	ldhuio	r2,0(r19)
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
4001ba00:	00fffe14 	movui	r3,65528
4001ba04:	113ffe0c 	andi	r4,r2,65528
        if (Read_Sector_Data(sector_index, 0) == false)
        {
            return false;
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
4001ba08:	10bfffcc 	andi	r2,r2,65535
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
4001ba0c:	20ffea26 	beq	r4,r3,4001b9b8 <__alt_data_end+0xc001b9b8>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
4001ba10:	91000383 	ldbu	r4,14(r18)
4001ba14:	10ffffcc 	andi	r3,r2,65535
4001ba18:	18bfff84 	addi	r2,r3,-2
4001ba1c:	1109383a 	mul	r4,r2,r4
4001ba20:	90801417 	ldw	r2,80(r18)
                                /* End of file */
                                return -1;
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
4001ba24:	8c0b883a 	add	r5,r17,r16
4001ba28:	28c00715 	stw	r3,28(r5)
								active_files[file_handle].current_sector_in_cluster = 0;
4001ba2c:	28000815 	stw	zero,32(r5)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
4001ba30:	2089883a 	add	r4,r4,r2
4001ba34:	003fc106 	br	4001b93c <__alt_data_end+0xc001b93c>

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
    short int ch = -1;
4001ba38:	00bfffc4 	movi	r2,-1
            }
        }
    }
    
    return ch;
}
4001ba3c:	f800283a 	ret
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
4001ba40:	00bfff84 	movi	r2,-2
4001ba44:	003fcd06 	br	4001b97c <__alt_data_end+0xc001b97c>

4001ba48 <alt_up_sd_card_write>:
bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
    bool result = false;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
4001ba48:	20bfffcc 	andi	r2,r4,65535
4001ba4c:	00c004c4 	movi	r3,19
4001ba50:	18806136 	bltu	r3,r2,4001bbd8 <alt_up_sd_card_write+0x190>
    {
        if (active_files[file_handle].in_use)
4001ba54:	213fffcc 	andi	r4,r4,65535
4001ba58:	2120001c 	xori	r4,r4,32768
}


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
4001ba5c:	defff004 	addi	sp,sp,-64
    bool result = false;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
4001ba60:	21200004 	addi	r4,r4,-32768
}


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
4001ba64:	dc000615 	stw	r16,24(sp)
    bool result = false;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
4001ba68:	202091ba 	slli	r16,r4,6
}


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
4001ba6c:	df000e15 	stw	fp,56(sp)
    bool result = false;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
4001ba70:	07100134 	movhi	fp,16388
4001ba74:	e714c304 	addi	fp,fp,21260
}


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
4001ba78:	dc400715 	stw	r17,28(sp)
    bool result = false;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
4001ba7c:	e423883a 	add	r17,fp,r16
4001ba80:	88800f17 	ldw	r2,60(r17)
}


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
4001ba84:	dfc00f15 	stw	ra,60(sp)
4001ba88:	ddc00d15 	stw	r23,52(sp)
4001ba8c:	dd800c15 	stw	r22,48(sp)
4001ba90:	dd400b15 	stw	r21,44(sp)
4001ba94:	dd000a15 	stw	r20,40(sp)
4001ba98:	dcc00915 	stw	r19,36(sp)
4001ba9c:	dc800815 	stw	r18,32(sp)
    bool result = false;
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
4001baa0:	10004026 	beq	r2,zero,4001bba4 <alt_up_sd_card_write+0x15c>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
4001baa4:	88c00704 	addi	r3,r17,28
4001baa8:	05900134 	movhi	r22,16388
4001baac:	1a000017 	ldw	r8,0(r3)
4001bab0:	b594ae04 	addi	r22,r22,21176
4001bab4:	b4c00383 	ldbu	r19,14(r22)
                              active_files[file_handle].current_sector_in_cluster;
4001bab8:	8d400804 	addi	r21,r17,32
4001babc:	a9800017 	ldw	r6,0(r21)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
4001bac0:	44bfff84 	addi	r18,r8,-2
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
4001bac4:	8d000917 	ldw	r20,36(r17)
4001bac8:	b1c0030b 	ldhu	r7,12(r22)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
4001bacc:	b5c01417 	ldw	r23,80(r22)
4001bad0:	94c5383a 	mul	r2,r18,r19
4001bad4:	d9400215 	stw	r5,8(sp)
4001bad8:	b9a5883a 	add	r18,r23,r6
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
4001badc:	380b883a 	mov	r5,r7
4001bae0:	a009883a 	mov	r4,r20
4001bae4:	d9800415 	stw	r6,16(sp)
4001bae8:	d9c00515 	stw	r7,20(sp)
4001baec:	da000315 	stw	r8,12(sp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
4001baf0:	d8c00115 	stw	r3,4(sp)
4001baf4:	14a5883a 	add	r18,r2,r18
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
4001baf8:	0007ad80 	call	40007ad8 <__umodsi3>
4001bafc:	1013883a 	mov	r9,r2

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
4001bb00:	88800617 	ldw	r2,24(r17)
4001bb04:	d9800417 	ldw	r6,16(sp)
4001bb08:	d9c00517 	ldw	r7,20(sp)
4001bb0c:	da000317 	ldw	r8,12(sp)
4001bb10:	a080332e 	bgeu	r20,r2,4001bbe0 <alt_up_sd_card_write+0x198>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
4001bb14:	a0000426 	beq	r20,zero,4001bb28 <alt_up_sd_card_write+0xe0>
4001bb18:	48bfffcc 	andi	r2,r9,65535
4001bb1c:	10a0001c 	xori	r2,r2,32768
4001bb20:	10a00004 	addi	r2,r2,-32768
4001bb24:	10004226 	beq	r2,zero,4001bc30 <alt_up_sd_card_write+0x1e8>
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
4001bb28:	d16fad17 	ldw	r5,-16716(gp)
4001bb2c:	d0afa917 	ldw	r2,-16732(gp)
4001bb30:	9147883a 	add	r3,r18,r5
4001bb34:	18800526 	beq	r3,r2,4001bb4c <alt_up_sd_card_write+0x104>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
4001bb38:	9009883a 	mov	r4,r18
4001bb3c:	da400315 	stw	r9,12(sp)
4001bb40:	0016c100 	call	40016c10 <Read_Sector_Data>
4001bb44:	da400317 	ldw	r9,12(sp)
4001bb48:	10001626 	beq	r2,zero,4001bba4 <alt_up_sd_card_write+0x15c>
                {
					return false;
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
4001bb4c:	d0efae17 	ldw	r3,-16712(gp)
4001bb50:	48bfffcc 	andi	r2,r9,65535
4001bb54:	10a0001c 	xori	r2,r2,32768
4001bb58:	10a00004 	addi	r2,r2,-32768
4001bb5c:	1885883a 	add	r2,r3,r2
4001bb60:	d8c00217 	ldw	r3,8(sp)
4001bb64:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
4001bb68:	e421883a 	add	r16,fp,r16
4001bb6c:	81000904 	addi	r4,r16,36
4001bb70:	20800017 	ldw	r2,0(r4)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
4001bb74:	81400604 	addi	r5,r16,24
4001bb78:	28c00017 	ldw	r3,0(r5)
					return false;
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
4001bb7c:	10800044 	addi	r2,r2,1
4001bb80:	20800015 	stw	r2,0(r4)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
4001bb84:	10c00436 	bltu	r2,r3,4001bb98 <alt_up_sd_card_write+0x150>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
4001bb88:	18c00044 	addi	r3,r3,1
				active_files[file_handle].modified = true;
4001bb8c:	00800044 	movi	r2,1
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
4001bb90:	28c00015 	stw	r3,0(r5)
				active_files[file_handle].modified = true;
4001bb94:	80800e15 	stw	r2,56(r16)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
4001bb98:	00800044 	movi	r2,1
4001bb9c:	d0afaa15 	stw	r2,-16728(gp)
4001bba0:	00000106 	br	4001bba8 <alt_up_sd_card_write+0x160>


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
    bool result = false;
4001bba4:	0005883a 	mov	r2,zero
			result = true;
		}
    }
    
    return result;
}
4001bba8:	dfc00f17 	ldw	ra,60(sp)
4001bbac:	df000e17 	ldw	fp,56(sp)
4001bbb0:	ddc00d17 	ldw	r23,52(sp)
4001bbb4:	dd800c17 	ldw	r22,48(sp)
4001bbb8:	dd400b17 	ldw	r21,44(sp)
4001bbbc:	dd000a17 	ldw	r20,40(sp)
4001bbc0:	dcc00917 	ldw	r19,36(sp)
4001bbc4:	dc800817 	ldw	r18,32(sp)
4001bbc8:	dc400717 	ldw	r17,28(sp)
4001bbcc:	dc000617 	ldw	r16,24(sp)
4001bbd0:	dec01004 	addi	sp,sp,64
4001bbd4:	f800283a 	ret


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
    bool result = false;
4001bbd8:	0005883a 	mov	r2,zero
			result = true;
		}
    }
    
    return result;
}
4001bbdc:	f800283a 	ret
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
4001bbe0:	a03fd126 	beq	r20,zero,4001bb28 <__alt_data_end+0xc001bb28>
4001bbe4:	48bfffcc 	andi	r2,r9,65535
4001bbe8:	10a0001c 	xori	r2,r2,32768
4001bbec:	10a00004 	addi	r2,r2,-32768
4001bbf0:	103fcd1e 	bne	r2,zero,4001bb28 <__alt_data_end+0xc001bb28>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
4001bbf4:	98bfffc4 	addi	r2,r19,-1
4001bbf8:	30802526 	beq	r6,r2,4001bc90 <alt_up_sd_card_write+0x248>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
4001bbfc:	380b883a 	mov	r5,r7
4001bc00:	a009883a 	mov	r4,r20
4001bc04:	da400315 	stw	r9,12(sp)
4001bc08:	0007a740 	call	40007a74 <__udivsi3>
4001bc0c:	da400317 	ldw	r9,12(sp)
4001bc10:	a8800015 	stw	r2,0(r21)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
4001bc14:	e407883a 	add	r3,fp,r16
4001bc18:	1c800717 	ldw	r18,28(r3)
4001bc1c:	b885883a 	add	r2,r23,r2
4001bc20:	94bfff84 	addi	r18,r18,-2
4001bc24:	94c7383a 	mul	r3,r18,r19
4001bc28:	18a5883a 	add	r18,r3,r2
4001bc2c:	003fbe06 	br	4001bb28 <__alt_data_end+0xc001bb28>
			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
4001bc30:	98ffffc4 	addi	r3,r19,-1
4001bc34:	30c00426 	beq	r6,r3,4001bc48 <alt_up_sd_card_write+0x200>
                            return false;
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
4001bc38:	31800044 	addi	r6,r6,1
4001bc3c:	a9800015 	stw	r6,0(r21)
                        data_sector = data_sector + 1;
4001bc40:	94800044 	addi	r18,r18,1
4001bc44:	003fb806 	br	4001bb28 <__alt_data_end+0xc001bb28>
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
4001bc48:	d80b883a 	mov	r5,sp
4001bc4c:	4009883a 	mov	r4,r8
4001bc50:	da400315 	stw	r9,12(sp)
4001bc54:	0016d640 	call	40016d64 <get_cluster_flag>
4001bc58:	da400317 	ldw	r9,12(sp)
4001bc5c:	103fd226 	beq	r2,zero,4001bba8 <__alt_data_end+0xc001bba8>
                        {
                            if (next_cluster < 0x0000fff8)
4001bc60:	d880000b 	ldhu	r2,0(sp)
4001bc64:	00fffdd4 	movui	r3,65527
4001bc68:	18bfaf36 	bltu	r3,r2,4001bb28 <__alt_data_end+0xc001bb28>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
4001bc6c:	b0c00383 	ldbu	r3,14(r22)
4001bc70:	14bfff84 	addi	r18,r2,-2
4001bc74:	b1001417 	ldw	r4,80(r22)
4001bc78:	90c7383a 	mul	r3,r18,r3
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
4001bc7c:	d9400117 	ldw	r5,4(sp)
								active_files[file_handle].current_sector_in_cluster = 0;
4001bc80:	a8000015 	stw	zero,0(r21)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
4001bc84:	1925883a 	add	r18,r3,r4
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
4001bc88:	28800015 	stw	r2,0(r5)
4001bc8c:	003fa606 	br	4001bb28 <__alt_data_end+0xc001bb28>
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
4001bc90:	d809883a 	mov	r4,sp
4001bc94:	da400315 	stw	r9,12(sp)
4001bc98:	0019c740 	call	40019c74 <find_first_empty_cluster>
4001bc9c:	103fc226 	beq	r2,zero,4001bba8 <__alt_data_end+0xc001bba8>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
4001bca0:	d8c00117 	ldw	r3,4(sp)
4001bca4:	d940000f 	ldh	r5,0(sp)
4001bca8:	01800044 	movi	r6,1
4001bcac:	19000017 	ldw	r4,0(r3)
4001bcb0:	0016eec0 	call	40016eec <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
4001bcb4:	d9000017 	ldw	r4,0(sp)
4001bcb8:	01800044 	movi	r6,1
4001bcbc:	017fffc4 	movi	r5,-1
4001bcc0:	0016eec0 	call	40016eec <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
4001bcc4:	d8c00117 	ldw	r3,4(sp)
4001bcc8:	d940000f 	ldh	r5,0(sp)
4001bccc:	000d883a 	mov	r6,zero
4001bcd0:	19000017 	ldw	r4,0(r3)
4001bcd4:	0016eec0 	call	40016eec <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
4001bcd8:	d9000017 	ldw	r4,0(sp)
4001bcdc:	000d883a 	mov	r6,zero
4001bce0:	017fffc4 	movi	r5,-1
4001bce4:	0016eec0 	call	40016eec <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
4001bce8:	d8800017 	ldw	r2,0(sp)
4001bcec:	d8c00117 	ldw	r3,4(sp)
							active_files[file_handle].current_sector_in_cluster = 0;
4001bcf0:	a8000015 	stw	zero,0(r21)
4001bcf4:	b5c01417 	ldw	r23,80(r22)
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
4001bcf8:	18800015 	stw	r2,0(r3)
4001bcfc:	b4c00383 	ldbu	r19,14(r22)
4001bd00:	0005883a 	mov	r2,zero
4001bd04:	da400317 	ldw	r9,12(sp)
4001bd08:	003fc206 	br	4001bc14 <__alt_data_end+0xc001bc14>

4001bd0c <alt_up_sd_card_fclose>:
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
4001bd0c:	d0afab17 	ldw	r2,-16724(gp)
4001bd10:	10000426 	beq	r2,zero,4001bd24 <alt_up_sd_card_fclose+0x18>
4001bd14:	d0afb317 	ldw	r2,-16692(gp)
4001bd18:	1080002b 	ldhuio	r2,0(r2)
4001bd1c:	1080008c 	andi	r2,r2,2
4001bd20:	1000051e 	bne	r2,zero,4001bd38 <alt_up_sd_card_fclose+0x2c>
    {
        result = true;
    }
	else if (initialized == true)
4001bd24:	d0efb517 	ldw	r3,-16684(gp)
4001bd28:	00800044 	movi	r2,1
4001bd2c:	18802526 	beq	r3,r2,4001bdc4 <alt_up_sd_card_fclose+0xb8>


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
    bool result = false;
4001bd30:	0005883a 	mov	r2,zero
			result = true;
        }
    }
    
    return result;
}
4001bd34:	f800283a 	ret

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
    bool result = false;
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
4001bd38:	d0afb417 	ldw	r2,-16688(gp)
4001bd3c:	103ffc26 	beq	r2,zero,4001bd30 <__alt_data_end+0xc001bd30>
    {
        if (active_files[file_handle].in_use) 
4001bd40:	213fffcc 	andi	r4,r4,65535
4001bd44:	2120001c 	xori	r4,r4,32768
}


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
4001bd48:	defffd04 	addi	sp,sp,-12
    bool result = false;
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        if (active_files[file_handle].in_use) 
4001bd4c:	21200004 	addi	r4,r4,-32768
}


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
4001bd50:	dc000015 	stw	r16,0(sp)
    bool result = false;
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        if (active_files[file_handle].in_use) 
4001bd54:	202091ba 	slli	r16,r4,6
}


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
4001bd58:	dc400115 	stw	r17,4(sp)
    bool result = false;
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        if (active_files[file_handle].in_use) 
4001bd5c:	04500134 	movhi	r17,16388
4001bd60:	8c54c304 	addi	r17,r17,21260
4001bd64:	8c05883a 	add	r2,r17,r16
4001bd68:	10c00f17 	ldw	r3,60(r2)
}


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
4001bd6c:	dfc00215 	stw	ra,8(sp)
    bool result = false;
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        if (active_files[file_handle].in_use) 
4001bd70:	18002426 	beq	r3,zero,4001be04 <alt_up_sd_card_fclose+0xf8>
        {
			if (active_files[file_handle].modified)
4001bd74:	10c00e17 	ldw	r3,56(r2)
4001bd78:	18000a26 	beq	r3,zero,4001bda4 <alt_up_sd_card_fclose+0x98>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
				if (active_files[file_handle].file_record_cluster == 0)
4001bd7c:	10c00a17 	ldw	r3,40(r2)
    {
        if (active_files[file_handle].in_use) 
        {
			if (active_files[file_handle].modified)
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
4001bd80:	11000b17 	ldw	r4,44(r2)
				if (active_files[file_handle].file_record_cluster == 0)
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
4001bd84:	00900134 	movhi	r2,16388
4001bd88:	1094ae04 	addi	r2,r2,21176
        if (active_files[file_handle].in_use) 
        {
			if (active_files[file_handle].modified)
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
				if (active_files[file_handle].file_record_cluster == 0)
4001bd8c:	18001f1e 	bne	r3,zero,4001be0c <alt_up_sd_card_fclose+0x100>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
4001bd90:	10c01317 	ldw	r3,76(r2)
4001bd94:	20c9883a 	add	r4,r4,r3
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
4001bd98:	d16fad17 	ldw	r5,-16716(gp)
4001bd9c:	0016c100 	call	40016c10 <Read_Sector_Data>
4001bda0:	1000211e 	bne	r2,zero,4001be28 <alt_up_sd_card_fclose+0x11c>
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
					}
				}
			}
			active_files[file_handle].in_use = false;
4001bda4:	8c21883a 	add	r16,r17,r16
4001bda8:	80000f15 	stw	zero,60(r16)
			result = true;
4001bdac:	00800044 	movi	r2,1
        }
    }
    
    return result;
}
4001bdb0:	dfc00217 	ldw	ra,8(sp)
4001bdb4:	dc400117 	ldw	r17,4(sp)
4001bdb8:	dc000017 	ldw	r16,0(sp)
4001bdbc:	dec00304 	addi	sp,sp,12
4001bdc0:	f800283a 	ret
4001bdc4:	00900134 	movhi	r2,16388
	else if (initialized == true)
	{
		int index;

		initialized = false;
		search_data.valid = false;
4001bdc8:	00d00134 	movhi	r3,16388
4001bdcc:	1094d204 	addi	r2,r2,21320
4001bdd0:	18d4a904 	addi	r3,r3,21156
4001bdd4:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
4001bdd8:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
4001bddc:	d02fb415 	stw	zero,-16688(gp)
4001bde0:	10ffff04 	addi	r3,r2,-4
4001bde4:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
4001bde8:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
4001bdec:	18000015 	stw	zero,0(r3)
4001bdf0:	10801004 	addi	r2,r2,64
4001bdf4:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
4001bdf8:	113ffb1e 	bne	r2,r4,4001bde8 <__alt_data_end+0xc001bde8>


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
    bool result = false;
4001bdfc:	0005883a 	mov	r2,zero
			result = true;
        }
    }
    
    return result;
}
4001be00:	f800283a 	ret


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
    bool result = false;
4001be04:	0005883a 	mov	r2,zero
			active_files[file_handle].in_use = false;
			result = true;
        }
    }
    
    return result;
4001be08:	003fe906 	br	4001bdb0 <__alt_data_end+0xc001bdb0>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
4001be0c:	11400383 	ldbu	r5,14(r2)
4001be10:	18ffff84 	addi	r3,r3,-2
4001be14:	10801417 	ldw	r2,80(r2)
4001be18:	1947383a 	mul	r3,r3,r5
4001be1c:	2085883a 	add	r2,r4,r2
4001be20:	1889883a 	add	r4,r3,r2
4001be24:	003fdc06 	br	4001bd98 <__alt_data_end+0xc001bd98>
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
4001be28:	8c0b883a 	add	r5,r17,r16
4001be2c:	29000c0f 	ldh	r4,48(r5)
4001be30:	00175d80 	call	400175d8 <Write_File_Record_At_Offset>
4001be34:	103fdb26 	beq	r2,zero,4001bda4 <__alt_data_end+0xc001bda4>

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
4001be38:	d0afaa17 	ldw	r2,-16728(gp)
4001be3c:	103fd926 	beq	r2,zero,4001bda4 <__alt_data_end+0xc001bda4>
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
4001be40:	d0afab17 	ldw	r2,-16724(gp)
4001be44:	10000526 	beq	r2,zero,4001be5c <alt_up_sd_card_fclose+0x150>
// If the sector has been modified, then save it to the SD Card.
{
    bool result = true;
    if (current_sector_modified)
    {
        result = Write_Sector_Data(current_sector_index, 0);
4001be48:	d16fa917 	ldw	r5,-16732(gp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
4001be4c:	d0afb317 	ldw	r2,-16692(gp)
4001be50:	1080002b 	ldhuio	r2,0(r2)
4001be54:	1080008c 	andi	r2,r2,2
4001be58:	1000121e 	bne	r2,zero,4001bea4 <alt_up_sd_card_fclose+0x198>
    {
        result = true;
    }
	else if (initialized == true)
4001be5c:	d0efb517 	ldw	r3,-16684(gp)
4001be60:	00800044 	movi	r2,1
4001be64:	18bfcf1e 	bne	r3,r2,4001bda4 <__alt_data_end+0xc001bda4>
4001be68:	00900134 	movhi	r2,16388
	{
		int index;

		initialized = false;
		search_data.valid = false;
4001be6c:	00d00134 	movhi	r3,16388
4001be70:	1094d204 	addi	r2,r2,21320
4001be74:	18d4a904 	addi	r3,r3,21156
4001be78:	18000415 	stw	zero,16(r3)
    }
	else if (initialized == true)
	{
		int index;

		initialized = false;
4001be7c:	d02fb515 	stw	zero,-16684(gp)
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;
4001be80:	d02fb415 	stw	zero,-16688(gp)
4001be84:	10ffff04 	addi	r3,r2,-4
4001be88:	11014004 	addi	r4,r2,1280

		for(index = 0; index < MAX_FILES_OPENED; index++)
		{
			active_files[index].in_use = false;
4001be8c:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
4001be90:	18000015 	stw	zero,0(r3)
4001be94:	10801004 	addi	r2,r2,64
4001be98:	18c01004 	addi	r3,r3,64

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
4001be9c:	113ffb1e 	bne	r2,r4,4001be8c <__alt_data_end+0xc001be8c>
4001bea0:	003fc006 	br	4001bda4 <__alt_data_end+0xc001bda4>
    {
        short int reg_state = 0xff;

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
4001bea4:	2804927a 	slli	r2,r5,9
4001bea8:	d0efaf17 	ldw	r3,-16708(gp)
4001beac:	18800035 	stwio	r2,0(r3)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
4001beb0:	d0afb017 	ldw	r2,-16704(gp)
4001beb4:	00c00604 	movi	r3,24
4001beb8:	10c0002d 	sthio	r3,0(r2)
4001bebc:	d12fb317 	ldw	r4,-16692(gp)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
4001bec0:	2080002b 	ldhuio	r2,0(r4)
4001bec4:	10bfffcc 	andi	r2,r2,65535
        } while ((reg_state & 0x04)!=0);
4001bec8:	10c0010c 	andi	r3,r2,4
4001becc:	183ffc1e 	bne	r3,zero,4001bec0 <__alt_data_end+0xc001bec0>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
4001bed0:	1080040c 	andi	r2,r2,16
4001bed4:	103fb31e 	bne	r2,zero,4001bda4 <__alt_data_end+0xc001bda4>
        {
            result = true;
            current_sector_modified = false;
4001bed8:	d02faa15 	stw	zero,-16728(gp)
            current_sector_index = sector_index+partition_offset;
4001bedc:	d16fa915 	stw	r5,-16732(gp)
4001bee0:	003fb006 	br	4001bda4 <__alt_data_end+0xc001bda4>

4001bee4 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
4001bee4:	20800017 	ldw	r2,0(r4)
4001bee8:	21c00217 	ldw	r7,8(r4)
4001beec:	11000a04 	addi	r4,r2,40
4001bef0:	001c1ac1 	jmpi	4001c1ac <altera_avalon_jtag_uart_read>

4001bef4 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
4001bef4:	20800017 	ldw	r2,0(r4)
4001bef8:	21c00217 	ldw	r7,8(r4)
4001befc:	11000a04 	addi	r4,r2,40
4001bf00:	001c3001 	jmpi	4001c300 <altera_avalon_jtag_uart_write>

4001bf04 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
4001bf04:	20800017 	ldw	r2,0(r4)
4001bf08:	21400217 	ldw	r5,8(r4)
4001bf0c:	11000a04 	addi	r4,r2,40
4001bf10:	001c0ec1 	jmpi	4001c0ec <altera_avalon_jtag_uart_close>

4001bf14 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
4001bf14:	21000017 	ldw	r4,0(r4)
4001bf18:	21000a04 	addi	r4,r4,40
4001bf1c:	001c1381 	jmpi	4001c138 <altera_avalon_jtag_uart_ioctl>

4001bf20 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
4001bf20:	20800017 	ldw	r2,0(r4)
4001bf24:	10800104 	addi	r2,r2,4
4001bf28:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
4001bf2c:	18c1000c 	andi	r3,r3,1024
4001bf30:	1800081e 	bne	r3,zero,4001bf54 <altera_avalon_jtag_uart_timeout+0x34>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
4001bf34:	20800917 	ldw	r2,36(r4)
4001bf38:	00e00034 	movhi	r3,32768
4001bf3c:	18ffff04 	addi	r3,r3,-4
4001bf40:	18800236 	bltu	r3,r2,4001bf4c <altera_avalon_jtag_uart_timeout+0x2c>
    sp->host_inactive++;
4001bf44:	10800044 	addi	r2,r2,1
4001bf48:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
4001bf4c:	d0afb817 	ldw	r2,-16672(gp)
4001bf50:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
4001bf54:	20c00817 	ldw	r3,32(r4)
4001bf58:	18c10014 	ori	r3,r3,1024
4001bf5c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
4001bf60:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
4001bf64:	d0afb817 	ldw	r2,-16672(gp)
4001bf68:	f800283a 	ret

4001bf6c <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
4001bf6c:	21800017 	ldw	r6,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
4001bf70:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
4001bf74:	02bfff44 	movi	r10,-3
4001bf78:	32000104 	addi	r8,r6,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
4001bf7c:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
4001bf80:	3880c00c 	andi	r2,r7,768
4001bf84:	10003426 	beq	r2,zero,4001c058 <altera_avalon_jtag_uart_irq+0xec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
4001bf88:	3880400c 	andi	r2,r7,256
4001bf8c:	10001726 	beq	r2,zero,4001bfec <altera_avalon_jtag_uart_irq+0x80>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4001bf90:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
4001bf94:	20c00b17 	ldw	r3,44(r4)
4001bf98:	10800044 	addi	r2,r2,1
4001bf9c:	1081ffcc 	andi	r2,r2,2047
4001bfa0:	18800d1e 	bne	r3,r2,4001bfd8 <altera_avalon_jtag_uart_irq+0x6c>
4001bfa4:	00002d06 	br	4001c05c <altera_avalon_jtag_uart_irq+0xf0>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
4001bfa8:	20800a17 	ldw	r2,40(r4)
4001bfac:	2085883a 	add	r2,r4,r2
4001bfb0:	10c00e05 	stb	r3,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4001bfb4:	20800a17 	ldw	r2,40(r4)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
4001bfb8:	21400b17 	ldw	r5,44(r4)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4001bfbc:	10800044 	addi	r2,r2,1
4001bfc0:	1081ffcc 	andi	r2,r2,2047
4001bfc4:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4001bfc8:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
4001bfcc:	10800044 	addi	r2,r2,1
4001bfd0:	1081ffcc 	andi	r2,r2,2047
4001bfd4:	11400326 	beq	r2,r5,4001bfe4 <altera_avalon_jtag_uart_irq+0x78>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
4001bfd8:	30c00037 	ldwio	r3,0(r6)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
4001bfdc:	18a0000c 	andi	r2,r3,32768
4001bfe0:	103ff11e 	bne	r2,zero,4001bfa8 <__alt_data_end+0xc001bfa8>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
4001bfe4:	18ffffec 	andhi	r3,r3,65535
4001bfe8:	18001c1e 	bne	r3,zero,4001c05c <altera_avalon_jtag_uart_irq+0xf0>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
4001bfec:	3880800c 	andi	r2,r7,512
4001bff0:	103fe226 	beq	r2,zero,4001bf7c <__alt_data_end+0xc001bf7c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
4001bff4:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
4001bff8:	38000b1e 	bne	r7,zero,4001c028 <altera_avalon_jtag_uart_irq+0xbc>
4001bffc:	003fdf06 	br	4001bf7c <__alt_data_end+0xc001bf7c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
4001c000:	20800d17 	ldw	r2,52(r4)
4001c004:	2085883a 	add	r2,r4,r2
4001c008:	10820e07 	ldb	r2,2104(r2)
4001c00c:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4001c010:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
4001c014:	39ffffc4 	addi	r7,r7,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4001c018:	10800044 	addi	r2,r2,1
4001c01c:	1081ffcc 	andi	r2,r2,2047
4001c020:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
4001c024:	383fd526 	beq	r7,zero,4001bf7c <__alt_data_end+0xc001bf7c>
4001c028:	20c00d17 	ldw	r3,52(r4)
4001c02c:	20800c17 	ldw	r2,48(r4)
4001c030:	18bff31e 	bne	r3,r2,4001c000 <__alt_data_end+0xc001c000>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
4001c034:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
4001c038:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
4001c03c:	1284703a 	and	r2,r2,r10
4001c040:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
4001c044:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
4001c048:	40800037 	ldwio	r2,0(r8)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
4001c04c:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
4001c050:	3880c00c 	andi	r2,r7,768
4001c054:	103fcc1e 	bne	r2,zero,4001bf88 <__alt_data_end+0xc001bf88>
4001c058:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
4001c05c:	20800817 	ldw	r2,32(r4)
4001c060:	1244703a 	and	r2,r2,r9
4001c064:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
4001c068:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
4001c06c:	40800037 	ldwio	r2,0(r8)
4001c070:	003fde06 	br	4001bfec <__alt_data_end+0xc001bfec>

4001c074 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
4001c074:	defffd04 	addi	sp,sp,-12
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
4001c078:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
4001c07c:	dc000115 	stw	r16,4(sp)
4001c080:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
4001c084:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
4001c088:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
4001c08c:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
4001c090:	2809883a 	mov	r4,r5
4001c094:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
4001c098:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
4001c09c:	019000b4 	movhi	r6,16386
4001c0a0:	31afdb04 	addi	r6,r6,-16532
4001c0a4:	800f883a 	mov	r7,r16
4001c0a8:	d8000015 	stw	zero,0(sp)
4001c0ac:	001ce0c0 	call	4001ce0c <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
4001c0b0:	d16fb817 	ldw	r5,-16672(gp)
4001c0b4:	019000b4 	movhi	r6,16386
4001c0b8:	31afc804 	addi	r6,r6,-16608
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
4001c0bc:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
4001c0c0:	800f883a 	mov	r7,r16
4001c0c4:	81000204 	addi	r4,r16,8
4001c0c8:	001ca140 	call	4001ca14 <alt_alarm_start>
4001c0cc:	1000030e 	bge	r2,zero,4001c0dc <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
4001c0d0:	00a00034 	movhi	r2,32768
4001c0d4:	10bfffc4 	addi	r2,r2,-1
4001c0d8:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
4001c0dc:	dfc00217 	ldw	ra,8(sp)
4001c0e0:	dc000117 	ldw	r16,4(sp)
4001c0e4:	dec00304 	addi	sp,sp,12
4001c0e8:	f800283a 	ret

4001c0ec <altera_avalon_jtag_uart_close>:
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
4001c0ec:	2890000c 	andi	r2,r5,16384
4001c0f0:	21c00c17 	ldw	r7,48(r4)
4001c0f4:	10000426 	beq	r2,zero,4001c108 <altera_avalon_jtag_uart_close+0x1c>
4001c0f8:	00000606 	br	4001c114 <altera_avalon_jtag_uart_close+0x28>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
4001c0fc:	21800917 	ldw	r6,36(r4)
4001c100:	20c00117 	ldw	r3,4(r4)
4001c104:	30c00a2e 	bgeu	r6,r3,4001c130 <altera_avalon_jtag_uart_close+0x44>
4001c108:	20c00d17 	ldw	r3,52(r4)
4001c10c:	38fffb1e 	bne	r7,r3,4001c0fc <__alt_data_end+0xc001c0fc>
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
4001c110:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
4001c114:	20800d17 	ldw	r2,52(r4)
4001c118:	11c00526 	beq	r2,r7,4001c130 <altera_avalon_jtag_uart_close+0x44>
4001c11c:	20c00917 	ldw	r3,36(r4)
4001c120:	20800117 	ldw	r2,4(r4)
4001c124:	1880022e 	bgeu	r3,r2,4001c130 <altera_avalon_jtag_uart_close+0x44>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
4001c128:	00bffd44 	movi	r2,-11
    }
  }

  return 0;
}
4001c12c:	f800283a 	ret
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
4001c130:	0005883a 	mov	r2,zero
4001c134:	f800283a 	ret

4001c138 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
4001c138:	009a8044 	movi	r2,27137
4001c13c:	28800d26 	beq	r5,r2,4001c174 <altera_avalon_jtag_uart_ioctl+0x3c>
4001c140:	009a8084 	movi	r2,27138
4001c144:	2880091e 	bne	r5,r2,4001c16c <altera_avalon_jtag_uart_ioctl+0x34>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
4001c148:	21400117 	ldw	r5,4(r4)
4001c14c:	00a00034 	movhi	r2,32768
4001c150:	10bfffc4 	addi	r2,r2,-1
4001c154:	28800526 	beq	r5,r2,4001c16c <altera_avalon_jtag_uart_ioctl+0x34>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
4001c158:	20c00917 	ldw	r3,36(r4)
      rc = 0;
4001c15c:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
4001c160:	1947803a 	cmpltu	r3,r3,r5
4001c164:	30c00015 	stw	r3,0(r6)
4001c168:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
4001c16c:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
4001c170:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
4001c174:	20c00117 	ldw	r3,4(r4)
4001c178:	00a00034 	movhi	r2,32768
4001c17c:	10bfffc4 	addi	r2,r2,-1
4001c180:	18bffa26 	beq	r3,r2,4001c16c <__alt_data_end+0xc001c16c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
4001c184:	30800017 	ldw	r2,0(r6)
4001c188:	01600034 	movhi	r5,32768
4001c18c:	297fff04 	addi	r5,r5,-4
4001c190:	10ffff84 	addi	r3,r2,-2
4001c194:	28c0022e 	bgeu	r5,r3,4001c1a0 <altera_avalon_jtag_uart_ioctl+0x68>
4001c198:	00a00034 	movhi	r2,32768
4001c19c:	10bfff84 	addi	r2,r2,-2
4001c1a0:	20800115 	stw	r2,4(r4)
      rc = 0;
4001c1a4:	0005883a 	mov	r2,zero
4001c1a8:	f800283a 	ret

4001c1ac <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
4001c1ac:	01804e0e 	bge	zero,r6,4001c2e8 <altera_avalon_jtag_uart_read+0x13c>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
4001c1b0:	defff504 	addi	sp,sp,-44
4001c1b4:	dc000115 	stw	r16,4(sp)
4001c1b8:	24000b17 	ldw	r16,44(r4)
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
4001c1bc:	39d0000c 	andi	r7,r7,16384
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
4001c1c0:	dd800715 	stw	r22,28(sp)
4001c1c4:	dd400615 	stw	r21,24(sp)
4001c1c8:	dd000515 	stw	r20,20(sp)
4001c1cc:	dcc00415 	stw	r19,16(sp)
4001c1d0:	dc800315 	stw	r18,12(sp)
4001c1d4:	dfc00a15 	stw	ra,40(sp)
4001c1d8:	df000915 	stw	fp,36(sp)
4001c1dc:	ddc00815 	stw	r23,32(sp)
4001c1e0:	dc400215 	stw	r17,8(sp)
4001c1e4:	3027883a 	mov	r19,r6
4001c1e8:	2025883a 	mov	r18,r4
4001c1ec:	282d883a 	mov	r22,r5
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
4001c1f0:	d9c00015 	stw	r7,0(sp)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
4001c1f4:	05420004 	movi	r21,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
4001c1f8:	25000e04 	addi	r20,r4,56
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
4001c1fc:	b02f883a 	mov	r23,r22
4001c200:	00000a06 	br	4001c22c <altera_avalon_jtag_uart_read+0x80>
4001c204:	9880012e 	bgeu	r19,r2,4001c20c <altera_avalon_jtag_uart_read+0x60>
4001c208:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4001c20c:	8461883a 	add	r16,r16,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
4001c210:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4001c214:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
4001c218:	000b8fc0 	call	4000b8fc <memcpy>
      ptr   += n;
      space -= n;
4001c21c:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4001c220:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
4001c224:	bc6f883a 	add	r23,r23,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
4001c228:	04c0080e 	bge	zero,r19,4001c24c <altera_avalon_jtag_uart_read+0xa0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
4001c22c:	97000a17 	ldw	fp,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
4001c230:	ac05c83a 	sub	r2,r21,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
4001c234:	e4000136 	bltu	fp,r16,4001c23c <altera_avalon_jtag_uart_read+0x90>
        n = in - out;
4001c238:	e405c83a 	sub	r2,fp,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
4001c23c:	a40b883a 	add	r5,r20,r16
4001c240:	b809883a 	mov	r4,r23
4001c244:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
4001c248:	103fee1e 	bne	r2,zero,4001c204 <__alt_data_end+0xc001c204>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
4001c24c:	bd800d1e 	bne	r23,r22,4001c284 <altera_avalon_jtag_uart_read+0xd8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
4001c250:	d8800017 	ldw	r2,0(sp)
4001c254:	10000426 	beq	r2,zero,4001c268 <altera_avalon_jtag_uart_read+0xbc>
4001c258:	00002106 	br	4001c2e0 <altera_avalon_jtag_uart_read+0x134>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
4001c25c:	90c00917 	ldw	r3,36(r18)
4001c260:	90800117 	ldw	r2,4(r18)
4001c264:	1880022e 	bgeu	r3,r2,4001c270 <altera_avalon_jtag_uart_read+0xc4>
4001c268:	90800a17 	ldw	r2,40(r18)
4001c26c:	e0bffb26 	beq	fp,r2,4001c25c <__alt_data_end+0xc001c25c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
4001c270:	90800a17 	ldw	r2,40(r18)
4001c274:	e0800126 	beq	fp,r2,4001c27c <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
4001c278:	04ffe016 	blt	zero,r19,4001c1fc <__alt_data_end+0xc001c1fc>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
4001c27c:	00bffec4 	movi	r2,-5
4001c280:	00000b06 	br	4001c2b0 <altera_avalon_jtag_uart_read+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4001c284:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4001c288:	00bfff84 	movi	r2,-2
4001c28c:	2084703a 	and	r2,r4,r2
4001c290:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
4001c294:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
4001c298:	91400017 	ldw	r5,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
4001c29c:	10800054 	ori	r2,r2,1
4001c2a0:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
4001c2a4:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4001c2a8:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
4001c2ac:	bd85c83a 	sub	r2,r23,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
4001c2b0:	dfc00a17 	ldw	ra,40(sp)
4001c2b4:	df000917 	ldw	fp,36(sp)
4001c2b8:	ddc00817 	ldw	r23,32(sp)
4001c2bc:	dd800717 	ldw	r22,28(sp)
4001c2c0:	dd400617 	ldw	r21,24(sp)
4001c2c4:	dd000517 	ldw	r20,20(sp)
4001c2c8:	dcc00417 	ldw	r19,16(sp)
4001c2cc:	dc800317 	ldw	r18,12(sp)
4001c2d0:	dc400217 	ldw	r17,8(sp)
4001c2d4:	dc000117 	ldw	r16,4(sp)
4001c2d8:	dec00b04 	addi	sp,sp,44
4001c2dc:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
4001c2e0:	00bffd44 	movi	r2,-11
4001c2e4:	003ff206 	br	4001c2b0 <__alt_data_end+0xc001c2b0>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
4001c2e8:	39d0000c 	andi	r7,r7,16384
4001c2ec:	3800021e 	bne	r7,zero,4001c2f8 <altera_avalon_jtag_uart_read+0x14c>
    return -EWOULDBLOCK;
  else
    return -EIO;
4001c2f0:	00bffec4 	movi	r2,-5
}
4001c2f4:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
4001c2f8:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
4001c2fc:	f800283a 	ret

4001c300 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
4001c300:	defff604 	addi	sp,sp,-40
4001c304:	dc000015 	stw	r16,0(sp)
4001c308:	dfc00915 	stw	ra,36(sp)
4001c30c:	df000815 	stw	fp,32(sp)
4001c310:	ddc00715 	stw	r23,28(sp)
4001c314:	dd800615 	stw	r22,24(sp)
4001c318:	dd400515 	stw	r21,20(sp)
4001c31c:	dd000415 	stw	r20,16(sp)
4001c320:	dcc00315 	stw	r19,12(sp)
4001c324:	dc800215 	stw	r18,8(sp)
4001c328:	dc400115 	stw	r17,4(sp)
4001c32c:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
4001c330:	01804d0e 	bge	zero,r6,4001c468 <altera_avalon_jtag_uart_write+0x168>
4001c334:	302d883a 	mov	r22,r6
4001c338:	2829883a 	mov	r20,r5
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
4001c33c:	3c50000c 	andi	r17,r7,16384
4001c340:	282b883a 	mov	r21,r5
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4001c344:	04ffff84 	movi	r19,-2
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
4001c348:	24820e04 	addi	r18,r4,2104
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
4001c34c:	87000c17 	ldw	fp,48(r16)
      out = sp->tx_out;
4001c350:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
4001c354:	e0c03a2e 	bgeu	fp,r3,4001c440 <altera_avalon_jtag_uart_write+0x140>
        n = out - 1 - in;
4001c358:	1dffffc4 	addi	r23,r3,-1
4001c35c:	bf2fc83a 	sub	r23,r23,fp
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
4001c360:	b800131e 	bne	r23,zero,4001c3b0 <altera_avalon_jtag_uart_write+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4001c364:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4001c368:	24c4703a 	and	r2,r4,r19
4001c36c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
4001c370:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
4001c374:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
4001c378:	10800094 	ori	r2,r2,2
4001c37c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
4001c380:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4001c384:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
4001c388:	8800341e 	bne	r17,zero,4001c45c <altera_avalon_jtag_uart_write+0x15c>
4001c38c:	81000917 	ldw	r4,36(r16)
4001c390:	00000206 	br	4001c39c <altera_avalon_jtag_uart_write+0x9c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
4001c394:	80800117 	ldw	r2,4(r16)
4001c398:	2080022e 	bgeu	r4,r2,4001c3a4 <altera_avalon_jtag_uart_write+0xa4>
4001c39c:	80800d17 	ldw	r2,52(r16)
4001c3a0:	18bffc26 	beq	r3,r2,4001c394 <__alt_data_end+0xc001c394>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
4001c3a4:	203fe926 	beq	r4,zero,4001c34c <__alt_data_end+0xc001c34c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
4001c3a8:	ad00181e 	bne	r21,r20,4001c40c <altera_avalon_jtag_uart_write+0x10c>
4001c3ac:	00003a06 	br	4001c498 <altera_avalon_jtag_uart_write+0x198>
4001c3b0:	b5c0012e 	bgeu	r22,r23,4001c3b8 <altera_avalon_jtag_uart_write+0xb8>
4001c3b4:	b02f883a 	mov	r23,r22
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
4001c3b8:	9709883a 	add	r4,r18,fp
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4001c3bc:	e5f9883a 	add	fp,fp,r23
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
4001c3c0:	a80b883a 	mov	r5,r21
4001c3c4:	b80d883a 	mov	r6,r23
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4001c3c8:	e701ffcc 	andi	fp,fp,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
4001c3cc:	000b8fc0 	call	4000b8fc <memcpy>
      ptr   += n;
      count -= n;
4001c3d0:	b5edc83a 	sub	r22,r22,r23

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4001c3d4:	87000c15 	stw	fp,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
4001c3d8:	adeb883a 	add	r21,r21,r23
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
4001c3dc:	05bfdb16 	blt	zero,r22,4001c34c <__alt_data_end+0xc001c34c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4001c3e0:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4001c3e4:	00bfff84 	movi	r2,-2
4001c3e8:	1884703a 	and	r2,r3,r2
4001c3ec:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
4001c3f0:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
4001c3f4:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
4001c3f8:	10800094 	ori	r2,r2,2
4001c3fc:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
4001c400:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4001c404:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
4001c408:	a5402226 	beq	r20,r21,4001c494 <altera_avalon_jtag_uart_write+0x194>
    return ptr - start;
4001c40c:	ad05c83a 	sub	r2,r21,r20
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
4001c410:	dfc00917 	ldw	ra,36(sp)
4001c414:	df000817 	ldw	fp,32(sp)
4001c418:	ddc00717 	ldw	r23,28(sp)
4001c41c:	dd800617 	ldw	r22,24(sp)
4001c420:	dd400517 	ldw	r21,20(sp)
4001c424:	dd000417 	ldw	r20,16(sp)
4001c428:	dcc00317 	ldw	r19,12(sp)
4001c42c:	dc800217 	ldw	r18,8(sp)
4001c430:	dc400117 	ldw	r17,4(sp)
4001c434:	dc000017 	ldw	r16,0(sp)
4001c438:	dec00a04 	addi	sp,sp,40
4001c43c:	f800283a 	ret
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
4001c440:	18000326 	beq	r3,zero,4001c450 <altera_avalon_jtag_uart_write+0x150>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
4001c444:	00820004 	movi	r2,2048
4001c448:	172fc83a 	sub	r23,r2,fp
4001c44c:	003fc406 	br	4001c360 <__alt_data_end+0xc001c360>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
4001c450:	0081ffc4 	movi	r2,2047
4001c454:	172fc83a 	sub	r23,r2,fp
4001c458:	003fc106 	br	4001c360 <__alt_data_end+0xc001c360>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
4001c45c:	ad3feb1e 	bne	r21,r20,4001c40c <__alt_data_end+0xc001c40c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
4001c460:	00bffd44 	movi	r2,-11
4001c464:	003fea06 	br	4001c410 <__alt_data_end+0xc001c410>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4001c468:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4001c46c:	00bfff84 	movi	r2,-2
4001c470:	1884703a 	and	r2,r3,r2
4001c474:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
4001c478:	20800817 	ldw	r2,32(r4)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
4001c47c:	21000017 	ldw	r4,0(r4)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
4001c480:	10800094 	ori	r2,r2,2
4001c484:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
4001c488:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4001c48c:	1801703a 	wrctl	status,r3
4001c490:	3c50000c 	andi	r17,r7,16384
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
4001c494:	883ff21e 	bne	r17,zero,4001c460 <__alt_data_end+0xc001c460>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
4001c498:	00bffec4 	movi	r2,-5
4001c49c:	003fdc06 	br	4001c410 <__alt_data_end+0xc001c410>

4001c4a0 <alt_hostfs_open>:
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
4001c4a0:	20800017 	ldw	r2,0(r4)
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
4001c4a4:	2013883a 	mov	r9,r4
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
4001c4a8:	11000217 	ldw	r4,8(r2)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
4001c4ac:	20bfffc4 	addi	r2,r4,-1

  while (*++ptr != 0)
4001c4b0:	10800044 	addi	r2,r2,1
4001c4b4:	10c00007 	ldb	r3,0(r2)
4001c4b8:	183ffd1e 	bne	r3,zero,4001c4b0 <__alt_data_end+0xc001c4b0>
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
4001c4bc:	1105c83a 	sub	r2,r2,r4
4001c4c0:	10800044 	addi	r2,r2,1
4001c4c4:	2885883a 	add	r2,r5,r2

  r3 = (int)&hcinfo;
4001c4c8:	d0e01c04 	addi	r3,gp,-32656
  r4 = (int)name;
  r5 = flags;
4001c4cc:	300b883a 	mov	r5,r6
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;

  r3 = (int)&hcinfo;
  r4 = (int)name;
4001c4d0:	1009883a 	mov	r4,r2
  r5 = flags;
  r6 = mode;
4001c4d4:	380d883a 	mov	r6,r7
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
4001c4d8:	11ffffc4 	addi	r7,r2,-1

  while (*++ptr != 0)
4001c4dc:	39c00044 	addi	r7,r7,1
4001c4e0:	3a000007 	ldb	r8,0(r7)
4001c4e4:	403ffd1e 	bne	r8,zero,4001c4dc <__alt_data_end+0xc001c4dc>

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
4001c4e8:	388fc83a 	sub	r7,r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
4001c4ec:	003da07a 	break	1

  handle = (void *)r2;
  error = r3;

  if (error == 0)
4001c4f0:	1800011e 	bne	r3,zero,4001c4f8 <alt_hostfs_open+0x58>
    fd->priv = handle;
4001c4f4:	48800115 	stw	r2,4(r9)

  return -error;
}
4001c4f8:	00c5c83a 	sub	r2,zero,r3
4001c4fc:	f800283a 	ret

4001c500 <alt_hostfs_close>:

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
4001c500:	d0e01904 	addi	r3,gp,-32668
  r4 = (int)fd->priv;
4001c504:	21000117 	ldw	r4,4(r4)

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
4001c508:	003da07a 	break	1

  error = r3;

  return -error;
}
4001c50c:	00c5c83a 	sub	r2,zero,r3
4001c510:	f800283a 	ret

4001c514 <alt_hostfs_read>:
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
4001c514:	d0e01604 	addi	r3,gp,-32680
  r4 = (int)fd->priv;
4001c518:	21000117 	ldw	r4,4(r4)
  r5 = (int)ptr;
  r6 = len;

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
4001c51c:	003da07a 	break	1

  rc = r2;
  error = r3;

  return (error == 0) ? rc : -error;
4001c520:	18000126 	beq	r3,zero,4001c528 <alt_hostfs_read+0x14>
4001c524:	00c5c83a 	sub	r2,zero,r3
}
4001c528:	f800283a 	ret

4001c52c <alt_hostfs_write>:
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
4001c52c:	d0e01304 	addi	r3,gp,-32692
  r4 = (int)fd->priv;
4001c530:	21000117 	ldw	r4,4(r4)
  r5 = (int)ptr;
  r6 = len;

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
4001c534:	003da07a 	break	1

  rc = r2;
  error = r3;

  return (error == 0) ? rc : -error;
4001c538:	18000126 	beq	r3,zero,4001c540 <alt_hostfs_write+0x14>
4001c53c:	00c5c83a 	sub	r2,zero,r3
}
4001c540:	f800283a 	ret

4001c544 <alt_hostfs_seek>:
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
4001c544:	d0e01004 	addi	r3,gp,-32704
  r4 = (int)fd->priv;
4001c548:	21000117 	ldw	r4,4(r4)
  r5 = ptr;
  r6 = dir;

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
4001c54c:	003da07a 	break	1

  rc = r2;
  error = r3;

  return (error == 0) ? rc : -error;
4001c550:	18000126 	beq	r3,zero,4001c558 <alt_hostfs_seek+0x14>
4001c554:	00c5c83a 	sub	r2,zero,r3
}
4001c558:	f800283a 	ret

4001c55c <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
4001c55c:	deffb904 	addi	sp,sp,-284
4001c560:	dc003d15 	stw	r16,244(sp)
4001c564:	dfc04615 	stw	ra,280(sp)
4001c568:	2821883a 	mov	r16,r5
4001c56c:	df004515 	stw	fp,276(sp)
4001c570:	ddc04415 	stw	r23,272(sp)
4001c574:	dd804315 	stw	r22,268(sp)
4001c578:	dd404215 	stw	r21,264(sp)
4001c57c:	dd004115 	stw	r20,260(sp)
4001c580:	dcc04015 	stw	r19,256(sp)
4001c584:	dc803f15 	stw	r18,252(sp)
4001c588:	dc403e15 	stw	r17,248(sp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
4001c58c:	d0e00d04 	addi	r3,gp,-32716
  r4 = (int)fd->priv;
4001c590:	21000117 	ldw	r4,4(r4)
  r5 = (int)&hoststat;
4001c594:	d80b883a 	mov	r5,sp

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
4001c598:	003da07a 	break	1

  rc = r2;
  error = r3;

  if (error == 0)
4001c59c:	18011b1e 	bne	r3,zero,4001ca0c <alt_hostfs_fstat+0x4b0>

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
4001c5a0:	db400017 	ldw	r13,0(sp)
4001c5a4:	db000117 	ldw	r12,4(sp)
4001c5a8:	dac00217 	ldw	r11,8(sp)
4001c5ac:	681c963a 	slli	r14,r13,24
4001c5b0:	6822d63a 	srli	r17,r13,24
4001c5b4:	da800317 	ldw	r10,12(sp)
4001c5b8:	602cd63a 	srli	r22,r12,24
4001c5bc:	603e963a 	slli	ra,r12,24
4001c5c0:	d9800417 	ldw	r6,16(sp)
4001c5c4:	db801315 	stw	r14,76(sp)
4001c5c8:	dc401415 	stw	r17,80(sp)
4001c5cc:	581cd63a 	srli	r14,r11,24
4001c5d0:	5822963a 	slli	r17,r11,24
4001c5d4:	d9400517 	ldw	r5,20(sp)
4001c5d8:	dd801615 	stw	r22,88(sp)
4001c5dc:	dfc01715 	stw	ra,92(sp)
4001c5e0:	5d803fec 	andhi	r22,r11,255
4001c5e4:	503ed63a 	srli	ra,r10,24
4001c5e8:	dd801015 	stw	r22,64(sp)
4001c5ec:	302cd63a 	srli	r22,r6,24
4001c5f0:	db801915 	stw	r14,100(sp)
4001c5f4:	dc401a15 	stw	r17,104(sp)
4001c5f8:	501c963a 	slli	r14,r10,24
4001c5fc:	54403fec 	andhi	r17,r10,255
4001c600:	da400617 	ldw	r9,24(sp)
4001c604:	da000817 	ldw	r8,32(sp)
4001c608:	dfc01c15 	stw	ra,112(sp)
4001c60c:	dc401115 	stw	r17,68(sp)
4001c610:	303e963a 	slli	ra,r6,24
4001c614:	2822d63a 	srli	r17,r5,24
4001c618:	dd802015 	stw	r22,128(sp)
4001c61c:	282c963a 	slli	r22,r5,24
4001c620:	db801d15 	stw	r14,116(sp)
4001c624:	33803fec 	andhi	r14,r6,255
4001c628:	dfc02115 	stw	ra,132(sp)
4001c62c:	db801f15 	stw	r14,124(sp)
4001c630:	483ed63a 	srli	ra,r9,24
4001c634:	481c963a 	slli	r14,r9,24
4001c638:	dc402315 	stw	r17,140(sp)
4001c63c:	4022d63a 	srli	r17,r8,24
4001c640:	d9000c17 	ldw	r4,48(sp)
4001c644:	dd802415 	stw	r22,144(sp)
4001c648:	402c963a 	slli	r22,r8,24
4001c64c:	d8803a15 	stw	r2,232(sp)
4001c650:	dfc02615 	stw	ra,152(sp)
4001c654:	db802715 	stw	r14,156(sp)
4001c658:	dc402815 	stw	r17,160(sp)
4001c65c:	d9c00a17 	ldw	r7,40(sp)
4001c660:	d8c00d17 	ldw	r3,52(sp)
4001c664:	d8800e17 	ldw	r2,56(sp)
4001c668:	dbc00f17 	ldw	r15,60(sp)
4001c66c:	dd802915 	stw	r22,164(sp)
4001c670:	202cd63a 	srli	r22,r4,24
4001c674:	383ed63a 	srli	ra,r7,24
4001c678:	3822963a 	slli	r17,r7,24
4001c67c:	dd802e15 	stw	r22,184(sp)
4001c680:	182c963a 	slli	r22,r3,24
4001c684:	dfc02b15 	stw	ra,172(sp)
4001c688:	203e963a 	slli	ra,r4,24
4001c68c:	dd803215 	stw	r22,200(sp)
4001c690:	102c963a 	slli	r22,r2,24
4001c694:	dfc02f15 	stw	ra,188(sp)
4001c698:	103ed63a 	srli	ra,r2,24
4001c69c:	dd803515 	stw	r22,212(sp)
4001c6a0:	782cd63a 	srli	r22,r15,24
4001c6a4:	dfc03415 	stw	ra,208(sp)
4001c6a8:	17c03fec 	andhi	ra,r2,255
4001c6ac:	dd803715 	stw	r22,220(sp)
4001c6b0:	782c963a 	slli	r22,r15,24
4001c6b4:	f83ed23a 	srli	ra,ra,8
4001c6b8:	dc402c15 	stw	r17,176(sp)
4001c6bc:	dd803815 	stw	r22,224(sp)
4001c6c0:	7d803fec 	andhi	r22,r15,255
4001c6c4:	dd801215 	stw	r22,72(sp)
4001c6c8:	dd801017 	ldw	r22,64(sp)
4001c6cc:	1822d63a 	srli	r17,r3,24
4001c6d0:	dfc03615 	stw	ra,216(sp)
4001c6d4:	b02cd23a 	srli	r22,r22,8
4001c6d8:	dfc01217 	ldw	ra,72(sp)
4001c6dc:	6f003fec 	andhi	fp,r13,255
4001c6e0:	dd801b15 	stw	r22,108(sp)
4001c6e4:	dd801117 	ldw	r22,68(sp)
4001c6e8:	65c03fec 	andhi	r23,r12,255
4001c6ec:	2d403fec 	andhi	r21,r5,255
4001c6f0:	b02cd23a 	srli	r22,r22,8
4001c6f4:	4b803fec 	andhi	r14,r9,255
4001c6f8:	45003fec 	andhi	r20,r8,255
4001c6fc:	dd801e15 	stw	r22,120(sp)
4001c700:	dd801f17 	ldw	r22,124(sp)
4001c704:	3cc03fec 	andhi	r19,r7,255
4001c708:	24803fec 	andhi	r18,r4,255
4001c70c:	dc403115 	stw	r17,196(sp)
4001c710:	6b7fc00c 	andi	r13,r13,65280
4001c714:	1c403fec 	andhi	r17,r3,255
4001c718:	633fc00c 	andi	r12,r12,65280
4001c71c:	5affc00c 	andi	r11,r11,65280
4001c720:	52bfc00c 	andi	r10,r10,65280
4001c724:	e038d23a 	srli	fp,fp,8
4001c728:	b82ed23a 	srli	r23,r23,8
4001c72c:	b02cd23a 	srli	r22,r22,8
4001c730:	a82ad23a 	srli	r21,r21,8
4001c734:	701cd23a 	srli	r14,r14,8
4001c738:	a028d23a 	srli	r20,r20,8
4001c73c:	9826d23a 	srli	r19,r19,8
4001c740:	9024d23a 	srli	r18,r18,8
4001c744:	8822d23a 	srli	r17,r17,8
4001c748:	f83ed23a 	srli	ra,ra,8
4001c74c:	681a923a 	slli	r13,r13,8
4001c750:	6018923a 	slli	r12,r12,8
4001c754:	5816923a 	slli	r11,r11,8
4001c758:	5014923a 	slli	r10,r10,8
4001c75c:	31bfc00c 	andi	r6,r6,65280
4001c760:	300c923a 	slli	r6,r6,8
4001c764:	df001515 	stw	fp,84(sp)
4001c768:	ddc01815 	stw	r23,96(sp)
4001c76c:	dd802215 	stw	r22,136(sp)
4001c770:	dd402515 	stw	r21,148(sp)
4001c774:	db803c15 	stw	r14,240(sp)
4001c778:	dd002a15 	stw	r20,168(sp)
4001c77c:	dcc02d15 	stw	r19,180(sp)
4001c780:	dc803015 	stw	r18,192(sp)
4001c784:	dc403315 	stw	r17,204(sp)
4001c788:	dfc03915 	stw	ra,228(sp)
4001c78c:	db401015 	stw	r13,64(sp)
4001c790:	db001115 	stw	r12,68(sp)
4001c794:	dac01215 	stw	r11,72(sp)
4001c798:	da801f15 	stw	r10,124(sp)
4001c79c:	d9803b15 	stw	r6,236(sp)
4001c7a0:	d9801317 	ldw	r6,76(sp)
4001c7a4:	dac01417 	ldw	r11,80(sp)
4001c7a8:	7bffc00c 	andi	r15,r15,65280
4001c7ac:	db801617 	ldw	r14,88(sp)
4001c7b0:	32dab03a 	or	r13,r6,r11
4001c7b4:	dc401917 	ldw	r17,100(sp)
4001c7b8:	dd801a17 	ldw	r22,104(sp)
4001c7bc:	dfc01c17 	ldw	ra,112(sp)
4001c7c0:	d9801d17 	ldw	r6,116(sp)
4001c7c4:	7814923a 	slli	r10,r15,8
4001c7c8:	dbc01717 	ldw	r15,92(sp)
4001c7cc:	8d96b03a 	or	r11,r17,r22
4001c7d0:	f9aeb03a 	or	r23,ra,r6
4001c7d4:	73d8b03a 	or	r12,r14,r15
4001c7d8:	dc402317 	ldw	r17,140(sp)
4001c7dc:	db802017 	ldw	r14,128(sp)
4001c7e0:	dbc02117 	ldw	r15,132(sp)
4001c7e4:	dfc02417 	ldw	ra,144(sp)
4001c7e8:	d9802617 	ldw	r6,152(sp)
4001c7ec:	73ecb03a 	or	r22,r14,r15
4001c7f0:	8feab03a 	or	r21,r17,ra
4001c7f4:	db802717 	ldw	r14,156(sp)
4001c7f8:	dbc02817 	ldw	r15,160(sp)
4001c7fc:	dc402917 	ldw	r17,164(sp)
4001c800:	33b8b03a 	or	fp,r6,r14
4001c804:	dfc02b17 	ldw	ra,172(sp)
4001c808:	7c68b03a 	or	r20,r15,r17
4001c80c:	d9802c17 	ldw	r6,176(sp)
4001c810:	db802e17 	ldw	r14,184(sp)
4001c814:	dbc02f17 	ldw	r15,188(sp)
4001c818:	f9a6b03a 	or	r19,ra,r6
4001c81c:	dfc03117 	ldw	ra,196(sp)
4001c820:	73e4b03a 	or	r18,r14,r15
4001c824:	d9803217 	ldw	r6,200(sp)
4001c828:	db803417 	ldw	r14,208(sp)
4001c82c:	dbc03517 	ldw	r15,212(sp)
4001c830:	f9a2b03a 	or	r17,ra,r6
4001c834:	d9803717 	ldw	r6,220(sp)
4001c838:	73feb03a 	or	ra,r14,r15
4001c83c:	db803817 	ldw	r14,224(sp)
4001c840:	297fc00c 	andi	r5,r5,65280
4001c844:	4a7fc00c 	andi	r9,r9,65280
4001c848:	339eb03a 	or	r15,r6,r14
4001c84c:	d9801517 	ldw	r6,84(sp)
4001c850:	db801817 	ldw	r14,96(sp)
4001c854:	423fc00c 	andi	r8,r8,65280
4001c858:	699ab03a 	or	r13,r13,r6
4001c85c:	d9801b17 	ldw	r6,108(sp)
4001c860:	6398b03a 	or	r12,r12,r14
4001c864:	db801e17 	ldw	r14,120(sp)
4001c868:	5996b03a 	or	r11,r11,r6
4001c86c:	d9802217 	ldw	r6,136(sp)
4001c870:	bbaeb03a 	or	r23,r23,r14
4001c874:	db802517 	ldw	r14,148(sp)
4001c878:	b1acb03a 	or	r22,r22,r6
4001c87c:	d9803c17 	ldw	r6,240(sp)
4001c880:	abaab03a 	or	r21,r21,r14
4001c884:	39ffc00c 	andi	r7,r7,65280
4001c888:	e19cb03a 	or	r14,fp,r6
4001c88c:	d9802a17 	ldw	r6,168(sp)
4001c890:	213fc00c 	andi	r4,r4,65280
4001c894:	18ffc00c 	andi	r3,r3,65280
4001c898:	a1a8b03a 	or	r20,r20,r6
4001c89c:	d9802d17 	ldw	r6,180(sp)
4001c8a0:	10bfc00c 	andi	r2,r2,65280
4001c8a4:	280a923a 	slli	r5,r5,8
4001c8a8:	99a6b03a 	or	r19,r19,r6
4001c8ac:	d9803017 	ldw	r6,192(sp)
4001c8b0:	4812923a 	slli	r9,r9,8
4001c8b4:	4010923a 	slli	r8,r8,8
4001c8b8:	91a4b03a 	or	r18,r18,r6
4001c8bc:	d9803317 	ldw	r6,204(sp)
4001c8c0:	380e923a 	slli	r7,r7,8
4001c8c4:	2008923a 	slli	r4,r4,8
4001c8c8:	89a2b03a 	or	r17,r17,r6
4001c8cc:	d9803617 	ldw	r6,216(sp)
4001c8d0:	1806923a 	slli	r3,r3,8
4001c8d4:	1004923a 	slli	r2,r2,8
4001c8d8:	f9beb03a 	or	ra,ra,r6
4001c8dc:	d9803917 	ldw	r6,228(sp)
4001c8e0:	a96ab03a 	or	r21,r21,r5
4001c8e4:	725cb03a 	or	r14,r14,r9
4001c8e8:	799eb03a 	or	r15,r15,r6
4001c8ec:	d9801017 	ldw	r6,64(sp)
4001c8f0:	a228b03a 	or	r20,r20,r8
4001c8f4:	99e6b03a 	or	r19,r19,r7
4001c8f8:	699ab03a 	or	r13,r13,r6
4001c8fc:	d9801117 	ldw	r6,68(sp)
4001c900:	9124b03a 	or	r18,r18,r4
4001c904:	88c6b03a 	or	r3,r17,r3
4001c908:	6198b03a 	or	r12,r12,r6
4001c90c:	d9801217 	ldw	r6,72(sp)
4001c910:	f884b03a 	or	r2,ra,r2
4001c914:	7a94b03a 	or	r10,r15,r10
4001c918:	5996b03a 	or	r11,r11,r6
4001c91c:	d9801f17 	ldw	r6,124(sp)
4001c920:	000b883a 	mov	r5,zero
4001c924:	8009883a 	mov	r4,r16
4001c928:	b9aeb03a 	or	r23,r23,r6
4001c92c:	d9803b17 	ldw	r6,236(sp)
4001c930:	db400015 	stw	r13,0(sp)
4001c934:	db000115 	stw	r12,4(sp)
4001c938:	b1acb03a 	or	r22,r22,r6
4001c93c:	01800f04 	movi	r6,60
4001c940:	dac00215 	stw	r11,8(sp)
4001c944:	ddc00315 	stw	r23,12(sp)
4001c948:	dd800415 	stw	r22,16(sp)
4001c94c:	dd400515 	stw	r21,20(sp)
4001c950:	db800615 	stw	r14,24(sp)
4001c954:	dd000815 	stw	r20,32(sp)
4001c958:	dcc00a15 	stw	r19,40(sp)
4001c95c:	dc800c15 	stw	r18,48(sp)
4001c960:	d8c00d15 	stw	r3,52(sp)
4001c964:	d8800e15 	stw	r2,56(sp)
4001c968:	da800f15 	stw	r10,60(sp)
4001c96c:	000ba440 	call	4000ba44 <memset>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
4001c970:	d8800017 	ldw	r2,0(sp)
4001c974:	8080000d 	sth	r2,0(r16)
    st->st_ino     = hoststat.fst_ino;
4001c978:	d8800117 	ldw	r2,4(sp)
4001c97c:	8080008d 	sth	r2,2(r16)
    st->st_mode    = hoststat.fst_mode;
4001c980:	d8800217 	ldw	r2,8(sp)
4001c984:	80800115 	stw	r2,4(r16)
    st->st_nlink   = hoststat.fst_nlink;
4001c988:	d8800317 	ldw	r2,12(sp)
4001c98c:	8080020d 	sth	r2,8(r16)
    st->st_uid     = hoststat.fst_uid;
4001c990:	d8800417 	ldw	r2,16(sp)
4001c994:	8080028d 	sth	r2,10(r16)
    st->st_gid     = hoststat.fst_gid;
4001c998:	d8800517 	ldw	r2,20(sp)
4001c99c:	8080030d 	sth	r2,12(r16)
    st->st_rdev    = hoststat.fst_rdev;
4001c9a0:	d8800617 	ldw	r2,24(sp)
4001c9a4:	8080038d 	sth	r2,14(r16)
    st->st_size    = hoststat.fst_size[1];
4001c9a8:	d8800817 	ldw	r2,32(sp)
4001c9ac:	80800415 	stw	r2,16(r16)

    st->st_atime   = hoststat.fst_atime;
4001c9b0:	d8800d17 	ldw	r2,52(sp)
4001c9b4:	80800515 	stw	r2,20(r16)
    st->st_mtime   = hoststat.fst_mtime;
4001c9b8:	d8800e17 	ldw	r2,56(sp)
4001c9bc:	80800715 	stw	r2,28(r16)
    st->st_ctime   = hoststat.fst_ctime;
4001c9c0:	d8800f17 	ldw	r2,60(sp)
4001c9c4:	80800915 	stw	r2,36(r16)

    st->st_blksize = hoststat.fst_blksize[1];
4001c9c8:	d8800a17 	ldw	r2,40(sp)
4001c9cc:	80800b15 	stw	r2,44(r16)
    st->st_blocks  = hoststat.fst_blocks[1];
4001c9d0:	d8800c17 	ldw	r2,48(sp)
4001c9d4:	80800c15 	stw	r2,48(r16)

    return rc;
4001c9d8:	d8803a17 	ldw	r2,232(sp)
  }
  else
    return -error;
}
4001c9dc:	dfc04617 	ldw	ra,280(sp)
4001c9e0:	df004517 	ldw	fp,276(sp)
4001c9e4:	ddc04417 	ldw	r23,272(sp)
4001c9e8:	dd804317 	ldw	r22,268(sp)
4001c9ec:	dd404217 	ldw	r21,264(sp)
4001c9f0:	dd004117 	ldw	r20,260(sp)
4001c9f4:	dcc04017 	ldw	r19,256(sp)
4001c9f8:	dc803f17 	ldw	r18,252(sp)
4001c9fc:	dc403e17 	ldw	r17,248(sp)
4001ca00:	dc003d17 	ldw	r16,244(sp)
4001ca04:	dec04704 	addi	sp,sp,284
4001ca08:	f800283a 	ret
    st->st_blocks  = hoststat.fst_blocks[1];

    return rc;
  }
  else
    return -error;
4001ca0c:	00c5c83a 	sub	r2,zero,r3
4001ca10:	003ff206 	br	4001c9dc <__alt_data_end+0xc001c9dc>

4001ca14 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
4001ca14:	d0afb817 	ldw	r2,-16672(gp)
4001ca18:	10001a26 	beq	r2,zero,4001ca84 <alt_alarm_start+0x70>
  {
    if (alarm)
4001ca1c:	20001b26 	beq	r4,zero,4001ca8c <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
4001ca20:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
4001ca24:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4001ca28:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4001ca2c:	00bfff84 	movi	r2,-2
4001ca30:	1884703a 	and	r2,r3,r2
4001ca34:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
4001ca38:	d0afb717 	ldw	r2,-16676(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
4001ca3c:	11800044 	addi	r6,r2,1
4001ca40:	314b883a 	add	r5,r6,r5
4001ca44:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
4001ca48:	28800b36 	bltu	r5,r2,4001ca78 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
4001ca4c:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
4001ca50:	d0a02004 	addi	r2,gp,-32640
4001ca54:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
4001ca58:	d0a02017 	ldw	r2,-32640(gp)
4001ca5c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
4001ca60:	d0a02017 	ldw	r2,-32640(gp)
  list->next           = entry;
4001ca64:	d1202015 	stw	r4,-32640(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
4001ca68:	11000115 	stw	r4,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4001ca6c:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
4001ca70:	0005883a 	mov	r2,zero
4001ca74:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
4001ca78:	00800044 	movi	r2,1
4001ca7c:	20800405 	stb	r2,16(r4)
4001ca80:	003ff306 	br	4001ca50 <__alt_data_end+0xc001ca50>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
4001ca84:	00bfde84 	movi	r2,-134
4001ca88:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
4001ca8c:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
4001ca90:	f800283a 	ret

4001ca94 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
4001ca94:	01407c34 	movhi	r5,496
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
4001ca98:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
4001ca9c:	295f07c4 	addi	r5,r5,31775
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
4001caa0:	dc000015 	stw	r16,0(sp)
4001caa4:	dfc00115 	stw	ra,4(sp)
4001caa8:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
4001caac:	0007a740 	call	40007a74 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
4001cab0:	10001226 	beq	r2,zero,4001cafc <alt_busy_sleep+0x68>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
4001cab4:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
4001cab8:	013f8434 	movhi	r4,65040
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
4001cabc:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
4001cac0:	2120f844 	addi	r4,r4,-31775
4001cac4:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
4001cac8:	297fffc4 	addi	r5,r5,-1
4001cacc:	283ffe1e 	bne	r5,zero,4001cac8 <__alt_data_end+0xc001cac8>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
4001cad0:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
4001cad4:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
4001cad8:	18bffb16 	blt	r3,r2,4001cac8 <__alt_data_end+0xc001cac8>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
4001cadc:	840010a4 	muli	r16,r16,66
4001cae0:	843fffc4 	addi	r16,r16,-1
4001cae4:	803ffe1e 	bne	r16,zero,4001cae0 <__alt_data_end+0xc001cae0>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
4001cae8:	0005883a 	mov	r2,zero
4001caec:	dfc00117 	ldw	ra,4(sp)
4001caf0:	dc000017 	ldw	r16,0(sp)
4001caf4:	dec00204 	addi	sp,sp,8
4001caf8:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
4001cafc:	840010a4 	muli	r16,r16,66
4001cb00:	843fffc4 	addi	r16,r16,-1
4001cb04:	043ffe16 	blt	zero,r16,4001cb00 <__alt_data_end+0xc001cb00>
4001cb08:	003ff706 	br	4001cae8 <__alt_data_end+0xc001cae8>

4001cb0c <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
4001cb0c:	0005883a 	mov	r2,zero
4001cb10:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
4001cb14:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
4001cb18:	10800804 	addi	r2,r2,32
4001cb1c:	10fffd1e 	bne	r2,r3,4001cb14 <__alt_data_end+0xc001cb14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
4001cb20:	f800283a 	ret

4001cb24 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
4001cb24:	20000a26 	beq	r4,zero,4001cb50 <alt_dev_llist_insert+0x2c>
4001cb28:	20800217 	ldw	r2,8(r4)
4001cb2c:	10000826 	beq	r2,zero,4001cb50 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
4001cb30:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
4001cb34:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
4001cb38:	0005883a 	mov	r2,zero
  entry->next     = list->next;
4001cb3c:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
4001cb40:	28c00017 	ldw	r3,0(r5)
4001cb44:	19000115 	stw	r4,4(r3)
  list->next           = entry;
4001cb48:	29000015 	stw	r4,0(r5)
4001cb4c:	f800283a 	ret
4001cb50:	d0a00b17 	ldw	r2,-32724(gp)
4001cb54:	10000926 	beq	r2,zero,4001cb7c <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
4001cb58:	deffff04 	addi	sp,sp,-4
4001cb5c:	dfc00015 	stw	ra,0(sp)
4001cb60:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
4001cb64:	00c00584 	movi	r3,22
4001cb68:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
4001cb6c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
4001cb70:	dfc00017 	ldw	ra,0(sp)
4001cb74:	dec00104 	addi	sp,sp,4
4001cb78:	f800283a 	ret
4001cb7c:	d0af9f04 	addi	r2,gp,-16772
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
4001cb80:	00c00584 	movi	r3,22
4001cb84:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
4001cb88:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
4001cb8c:	f800283a 	ret

4001cb90 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
4001cb90:	defffc04 	addi	sp,sp,-16
4001cb94:	dc800215 	stw	r18,8(sp)
4001cb98:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
4001cb9c:	049000b4 	movhi	r18,16386
4001cba0:	041000b4 	movhi	r16,16386
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
4001cba4:	dfc00315 	stw	ra,12(sp)
4001cba8:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
4001cbac:	8434e704 	addi	r16,r16,-11364
4001cbb0:	94b4e804 	addi	r18,r18,-11360
4001cbb4:	84800936 	bltu	r16,r18,4001cbdc <_do_ctors+0x4c>
4001cbb8:	84a5c83a 	sub	r18,r16,r18
4001cbbc:	9024d0ba 	srli	r18,r18,2
4001cbc0:	0023883a 	mov	r17,zero
4001cbc4:	94800044 	addi	r18,r18,1
        (*ctor) (); 
4001cbc8:	80800017 	ldw	r2,0(r16)
4001cbcc:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
4001cbd0:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
4001cbd4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
4001cbd8:	8cbffb1e 	bne	r17,r18,4001cbc8 <__alt_data_end+0xc001cbc8>
        (*ctor) (); 
}
4001cbdc:	dfc00317 	ldw	ra,12(sp)
4001cbe0:	dc800217 	ldw	r18,8(sp)
4001cbe4:	dc400117 	ldw	r17,4(sp)
4001cbe8:	dc000017 	ldw	r16,0(sp)
4001cbec:	dec00404 	addi	sp,sp,16
4001cbf0:	f800283a 	ret

4001cbf4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
4001cbf4:	defffc04 	addi	sp,sp,-16
4001cbf8:	dc800215 	stw	r18,8(sp)
4001cbfc:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
4001cc00:	049000b4 	movhi	r18,16386
4001cc04:	041000b4 	movhi	r16,16386
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
4001cc08:	dfc00315 	stw	ra,12(sp)
4001cc0c:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
4001cc10:	8434e704 	addi	r16,r16,-11364
4001cc14:	94b4e804 	addi	r18,r18,-11360
4001cc18:	84800936 	bltu	r16,r18,4001cc40 <_do_dtors+0x4c>
4001cc1c:	84a5c83a 	sub	r18,r16,r18
4001cc20:	9024d0ba 	srli	r18,r18,2
4001cc24:	0023883a 	mov	r17,zero
4001cc28:	94800044 	addi	r18,r18,1
        (*dtor) (); 
4001cc2c:	80800017 	ldw	r2,0(r16)
4001cc30:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
4001cc34:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
4001cc38:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
4001cc3c:	8cbffb1e 	bne	r17,r18,4001cc2c <__alt_data_end+0xc001cc2c>
        (*dtor) (); 
}
4001cc40:	dfc00317 	ldw	ra,12(sp)
4001cc44:	dc800217 	ldw	r18,8(sp)
4001cc48:	dc400117 	ldw	r17,4(sp)
4001cc4c:	dc000017 	ldw	r16,0(sp)
4001cc50:	dec00404 	addi	sp,sp,16
4001cc54:	f800283a 	ret

4001cc58 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
4001cc58:	defffb04 	addi	sp,sp,-20
4001cc5c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
4001cc60:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
4001cc64:	dc400115 	stw	r17,4(sp)
4001cc68:	2823883a 	mov	r17,r5
4001cc6c:	dcc00315 	stw	r19,12(sp)
4001cc70:	dfc00415 	stw	ra,16(sp)
4001cc74:	dc800215 	stw	r18,8(sp)
4001cc78:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
4001cc7c:	000c9ec0 	call	4000c9ec <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
4001cc80:	8c000b26 	beq	r17,r16,4001ccb0 <alt_find_dev+0x58>
4001cc84:	14800044 	addi	r18,r2,1
4001cc88:	00000206 	br	4001cc94 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
4001cc8c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
4001cc90:	8c000726 	beq	r17,r16,4001ccb0 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
4001cc94:	81000217 	ldw	r4,8(r16)
4001cc98:	900d883a 	mov	r6,r18
4001cc9c:	980b883a 	mov	r5,r19
4001cca0:	001d20c0 	call	4001d20c <memcmp>
4001cca4:	103ff91e 	bne	r2,zero,4001cc8c <__alt_data_end+0xc001cc8c>
4001cca8:	8005883a 	mov	r2,r16
4001ccac:	00000106 	br	4001ccb4 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
4001ccb0:	0005883a 	mov	r2,zero
}
4001ccb4:	dfc00417 	ldw	ra,16(sp)
4001ccb8:	dcc00317 	ldw	r19,12(sp)
4001ccbc:	dc800217 	ldw	r18,8(sp)
4001ccc0:	dc400117 	ldw	r17,4(sp)
4001ccc4:	dc000017 	ldw	r16,0(sp)
4001ccc8:	dec00504 	addi	sp,sp,20
4001cccc:	f800283a 	ret

4001ccd0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
4001ccd0:	defffa04 	addi	sp,sp,-24
4001ccd4:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
4001ccd8:	d4200917 	ldw	r16,-32732(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
4001ccdc:	dd000415 	stw	r20,16(sp)
4001cce0:	dfc00515 	stw	ra,20(sp)
4001cce4:	dcc00315 	stw	r19,12(sp)
4001cce8:	dc800215 	stw	r18,8(sp)
4001ccec:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
4001ccf0:	d5200904 	addi	r20,gp,-32732
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
4001ccf4:	85001626 	beq	r16,r20,4001cd50 <alt_find_file+0x80>
4001ccf8:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
4001ccfc:	04c00bc4 	movi	r19,47
4001cd00:	00000806 	br	4001cd24 <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
4001cd04:	9185883a 	add	r2,r18,r6
4001cd08:	10800007 	ldb	r2,0(r2)
4001cd0c:	14c00126 	beq	r2,r19,4001cd14 <alt_find_file+0x44>
4001cd10:	1000021e 	bne	r2,zero,4001cd1c <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
4001cd14:	001d20c0 	call	4001d20c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
4001cd18:	10001626 	beq	r2,zero,4001cd74 <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
4001cd1c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
4001cd20:	85000b26 	beq	r16,r20,4001cd50 <alt_find_file+0x80>
  {
    len = strlen(next->name);
4001cd24:	84400217 	ldw	r17,8(r16)
4001cd28:	8809883a 	mov	r4,r17
4001cd2c:	000c9ec0 	call	4000c9ec <strlen>
4001cd30:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
4001cd34:	8885883a 	add	r2,r17,r2
4001cd38:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
4001cd3c:	900b883a 	mov	r5,r18
4001cd40:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
4001cd44:	14ffef1e 	bne	r2,r19,4001cd04 <__alt_data_end+0xc001cd04>
    {
      len -= 1;
4001cd48:	31bfffc4 	addi	r6,r6,-1
4001cd4c:	003fed06 	br	4001cd04 <__alt_data_end+0xc001cd04>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
4001cd50:	0005883a 	mov	r2,zero
}
4001cd54:	dfc00517 	ldw	ra,20(sp)
4001cd58:	dd000417 	ldw	r20,16(sp)
4001cd5c:	dcc00317 	ldw	r19,12(sp)
4001cd60:	dc800217 	ldw	r18,8(sp)
4001cd64:	dc400117 	ldw	r17,4(sp)
4001cd68:	dc000017 	ldw	r16,0(sp)
4001cd6c:	dec00604 	addi	sp,sp,24
4001cd70:	f800283a 	ret
4001cd74:	8005883a 	mov	r2,r16
4001cd78:	003ff606 	br	4001cd54 <__alt_data_end+0xc001cd54>

4001cd7c <alt_fs_reg>:
{
  /*
   * check that the device has a name.
   */

  if (!dev->name)
4001cd7c:	20800217 	ldw	r2,8(r4)
4001cd80:	10000926 	beq	r2,zero,4001cda8 <alt_fs_reg+0x2c>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
4001cd84:	d0a00904 	addi	r2,gp,-32732
4001cd88:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
4001cd8c:	d0a00917 	ldw	r2,-32732(gp)
4001cd90:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
4001cd94:	d0e00917 	ldw	r3,-32732(gp)
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);

  return 0;
4001cd98:	0005883a 	mov	r2,zero
  list->next           = entry;
4001cd9c:	d1200915 	stw	r4,-32732(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
4001cda0:	19000115 	stw	r4,4(r3)
4001cda4:	f800283a 	ret
   * check that the device has a name.
   */

  if (!dev->name)
  {
    return -ENODEV;
4001cda8:	00bffb44 	movi	r2,-19
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);

  return 0;
} 
4001cdac:	f800283a 	ret

4001cdb0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
4001cdb0:	01d000b4 	movhi	r7,16386
4001cdb4:	39c65e04 	addi	r7,r7,6520
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
4001cdb8:	0005883a 	mov	r2,zero
4001cdbc:	3807883a 	mov	r3,r7
4001cdc0:	01800804 	movi	r6,32
4001cdc4:	00000206 	br	4001cdd0 <alt_get_fd+0x20>
4001cdc8:	10800044 	addi	r2,r2,1
4001cdcc:	11800a26 	beq	r2,r6,4001cdf8 <alt_get_fd+0x48>
  {
    if (!alt_fd_list[i].dev)
4001cdd0:	19400017 	ldw	r5,0(r3)
4001cdd4:	18c00304 	addi	r3,r3,12
4001cdd8:	283ffb1e 	bne	r5,zero,4001cdc8 <__alt_data_end+0xc001cdc8>
    {
      alt_fd_list[i].dev = dev;
4001cddc:	10c00324 	muli	r3,r2,12
4001cde0:	38cf883a 	add	r7,r7,r3
      if (i > alt_max_fd)
4001cde4:	d0e00617 	ldw	r3,-32744(gp)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
4001cde8:	39000015 	stw	r4,0(r7)
      if (i > alt_max_fd)
4001cdec:	1880030e 	bge	r3,r2,4001cdfc <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
4001cdf0:	d0a00615 	stw	r2,-32744(gp)
4001cdf4:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
4001cdf8:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
4001cdfc:	f800283a 	ret

4001ce00 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
4001ce00:	01440004 	movi	r5,4096
4001ce04:	0009883a 	mov	r4,zero
4001ce08:	001d1341 	jmpi	4001d134 <alt_icache_flush>

4001ce0c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
4001ce0c:	001ce981 	jmpi	4001ce98 <alt_iic_isr_register>

4001ce10 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4001ce10:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4001ce14:	00bfff84 	movi	r2,-2
4001ce18:	2084703a 	and	r2,r4,r2
4001ce1c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
4001ce20:	00c00044 	movi	r3,1
4001ce24:	d0afb617 	ldw	r2,-16680(gp)
4001ce28:	194a983a 	sll	r5,r3,r5
4001ce2c:	288ab03a 	or	r5,r5,r2
4001ce30:	d16fb615 	stw	r5,-16680(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
4001ce34:	d0afb617 	ldw	r2,-16680(gp)
4001ce38:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4001ce3c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
4001ce40:	0005883a 	mov	r2,zero
4001ce44:	f800283a 	ret

4001ce48 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4001ce48:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4001ce4c:	00bfff84 	movi	r2,-2
4001ce50:	2084703a 	and	r2,r4,r2
4001ce54:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
4001ce58:	00ffff84 	movi	r3,-2
4001ce5c:	d0afb617 	ldw	r2,-16680(gp)
4001ce60:	194a183a 	rol	r5,r3,r5
4001ce64:	288a703a 	and	r5,r5,r2
4001ce68:	d16fb615 	stw	r5,-16680(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
4001ce6c:	d0afb617 	ldw	r2,-16680(gp)
4001ce70:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4001ce74:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
4001ce78:	0005883a 	mov	r2,zero
4001ce7c:	f800283a 	ret

4001ce80 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
4001ce80:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
4001ce84:	00800044 	movi	r2,1
4001ce88:	1144983a 	sll	r2,r2,r5
4001ce8c:	10c4703a 	and	r2,r2,r3
}
4001ce90:	1004c03a 	cmpne	r2,r2,zero
4001ce94:	f800283a 	ret

4001ce98 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
4001ce98:	00c007c4 	movi	r3,31
4001ce9c:	19401616 	blt	r3,r5,4001cef8 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
4001cea0:	defffe04 	addi	sp,sp,-8
4001cea4:	dfc00115 	stw	ra,4(sp)
4001cea8:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4001ceac:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4001ceb0:	00ffff84 	movi	r3,-2
4001ceb4:	80c6703a 	and	r3,r16,r3
4001ceb8:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
4001cebc:	280490fa 	slli	r2,r5,3
4001cec0:	00d00134 	movhi	r3,16388
4001cec4:	18d60304 	addi	r3,r3,22540
4001cec8:	1885883a 	add	r2,r3,r2
4001cecc:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
4001ced0:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
4001ced4:	30000626 	beq	r6,zero,4001cef0 <alt_iic_isr_register+0x58>
4001ced8:	001ce100 	call	4001ce10 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4001cedc:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
4001cee0:	dfc00117 	ldw	ra,4(sp)
4001cee4:	dc000017 	ldw	r16,0(sp)
4001cee8:	dec00204 	addi	sp,sp,8
4001ceec:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
4001cef0:	001ce480 	call	4001ce48 <alt_ic_irq_disable>
4001cef4:	003ff906 	br	4001cedc <__alt_data_end+0xc001cedc>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
4001cef8:	00bffa84 	movi	r2,-22
4001cefc:	f800283a 	ret

4001cf00 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
4001cf00:	defffd04 	addi	sp,sp,-12
4001cf04:	dc400115 	stw	r17,4(sp)
4001cf08:	dc000015 	stw	r16,0(sp)
4001cf0c:	2823883a 	mov	r17,r5
4001cf10:	3021883a 	mov	r16,r6

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
4001cf14:	01400044 	movi	r5,1
4001cf18:	01807fc4 	movi	r6,511
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
4001cf1c:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
4001cf20:	00161880 	call	40016188 <open>

  if (old >= 0)
4001cf24:	10000c16 	blt	r2,zero,4001cf58 <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
4001cf28:	10c00324 	muli	r3,r2,12
4001cf2c:	015000b4 	movhi	r5,16386
4001cf30:	29465e04 	addi	r5,r5,6520
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
4001cf34:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
4001cf38:	28c5883a 	add	r2,r5,r3
4001cf3c:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
4001cf40:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
4001cf44:	29800315 	stw	r6,12(r5)
    fd->priv     = alt_fd_list[old].priv;
4001cf48:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
4001cf4c:	28c00515 	stw	r3,20(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
4001cf50:	28800415 	stw	r2,16(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
4001cf54:	00163c80 	call	400163c8 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
4001cf58:	01807fc4 	movi	r6,511
4001cf5c:	000b883a 	mov	r5,zero
4001cf60:	8809883a 	mov	r4,r17
4001cf64:	00161880 	call	40016188 <open>

  if (old >= 0)
4001cf68:	10000c16 	blt	r2,zero,4001cf9c <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
4001cf6c:	10c00324 	muli	r3,r2,12
4001cf70:	015000b4 	movhi	r5,16386
4001cf74:	29465e04 	addi	r5,r5,6520
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
4001cf78:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
4001cf7c:	28c5883a 	add	r2,r5,r3
4001cf80:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
4001cf84:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
4001cf88:	29800015 	stw	r6,0(r5)
    fd->priv     = alt_fd_list[old].priv;
4001cf8c:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
4001cf90:	28c00215 	stw	r3,8(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
4001cf94:	28800115 	stw	r2,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
4001cf98:	00163c80 	call	400163c8 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
4001cf9c:	01807fc4 	movi	r6,511
4001cfa0:	01400044 	movi	r5,1
4001cfa4:	8009883a 	mov	r4,r16
4001cfa8:	00161880 	call	40016188 <open>

  if (old >= 0)
4001cfac:	10001016 	blt	r2,zero,4001cff0 <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
4001cfb0:	10c00324 	muli	r3,r2,12
4001cfb4:	015000b4 	movhi	r5,16386
4001cfb8:	29465e04 	addi	r5,r5,6520
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
4001cfbc:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
4001cfc0:	28c5883a 	add	r2,r5,r3
4001cfc4:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
4001cfc8:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
4001cfcc:	29800615 	stw	r6,24(r5)
    fd->priv     = alt_fd_list[old].priv;
4001cfd0:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
4001cfd4:	28c00815 	stw	r3,32(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
4001cfd8:	28800715 	stw	r2,28(r5)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
4001cfdc:	dfc00217 	ldw	ra,8(sp)
4001cfe0:	dc400117 	ldw	r17,4(sp)
4001cfe4:	dc000017 	ldw	r16,0(sp)
4001cfe8:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
4001cfec:	00163c81 	jmpi	400163c8 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
4001cff0:	dfc00217 	ldw	ra,8(sp)
4001cff4:	dc400117 	ldw	r17,4(sp)
4001cff8:	dc000017 	ldw	r16,0(sp)
4001cffc:	dec00304 	addi	sp,sp,12
4001d000:	f800283a 	ret

4001d004 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4001d004:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4001d008:	00bfff84 	movi	r2,-2
4001d00c:	1884703a 	and	r2,r3,r2
4001d010:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
4001d014:	21400117 	ldw	r5,4(r4)
4001d018:	20800017 	ldw	r2,0(r4)
4001d01c:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
4001d020:	21400117 	ldw	r5,4(r4)
4001d024:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
4001d028:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
4001d02c:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4001d030:	1801703a 	wrctl	status,r3
4001d034:	f800283a 	ret

4001d038 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
4001d038:	d0afb717 	ldw	r2,-16676(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
4001d03c:	defffa04 	addi	sp,sp,-24
4001d040:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
4001d044:	d4202017 	ldw	r16,-32640(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
4001d048:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
4001d04c:	dc800215 	stw	r18,8(sp)
4001d050:	dfc00515 	stw	ra,20(sp)
4001d054:	dd000415 	stw	r20,16(sp)
4001d058:	dcc00315 	stw	r19,12(sp)
4001d05c:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
4001d060:	d4a02004 	addi	r18,gp,-32640

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
4001d064:	d0afb715 	stw	r2,-16676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
4001d068:	84801126 	beq	r16,r18,4001d0b0 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
4001d06c:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4001d070:	053fff84 	movi	r20,-2
4001d074:	00000606 	br	4001d090 <alt_tick+0x58>
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    {
      alarm->rollover = 0;
4001d078:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
4001d07c:	d0efb717 	ldw	r3,-16676(gp)
4001d080:	80800217 	ldw	r2,8(r16)
4001d084:	1880122e 	bgeu	r3,r2,4001d0d0 <alt_tick+0x98>
4001d088:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
4001d08c:	8c800826 	beq	r17,r18,4001d0b0 <alt_tick+0x78>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
4001d090:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
4001d094:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
4001d098:	103ff826 	beq	r2,zero,4001d07c <__alt_data_end+0xc001d07c>
4001d09c:	d0afb717 	ldw	r2,-16676(gp)
4001d0a0:	103ff526 	beq	r2,zero,4001d078 <__alt_data_end+0xc001d078>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
4001d0a4:	d0afb717 	ldw	r2,-16676(gp)
4001d0a8:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
4001d0ac:	8cbff81e 	bne	r17,r18,4001d090 <__alt_data_end+0xc001d090>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
4001d0b0:	dfc00517 	ldw	ra,20(sp)
4001d0b4:	dd000417 	ldw	r20,16(sp)
4001d0b8:	dcc00317 	ldw	r19,12(sp)
4001d0bc:	dc800217 	ldw	r18,8(sp)
4001d0c0:	dc400117 	ldw	r17,4(sp)
4001d0c4:	dc000017 	ldw	r16,0(sp)
4001d0c8:	dec00604 	addi	sp,sp,24
4001d0cc:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
4001d0d0:	80800317 	ldw	r2,12(r16)
4001d0d4:	81000517 	ldw	r4,20(r16)
4001d0d8:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
4001d0dc:	10000726 	beq	r2,zero,4001d0fc <alt_tick+0xc4>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
4001d0e0:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
4001d0e4:	d12fb717 	ldw	r4,-16676(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
4001d0e8:	10c5883a 	add	r2,r2,r3
4001d0ec:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
4001d0f0:	113fe52e 	bgeu	r2,r4,4001d088 <__alt_data_end+0xc001d088>
        {
          alarm->rollover = 1;
4001d0f4:	84c00405 	stb	r19,16(r16)
4001d0f8:	003fe306 	br	4001d088 <__alt_data_end+0xc001d088>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4001d0fc:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4001d100:	1506703a 	and	r3,r2,r20
4001d104:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
4001d108:	81000117 	ldw	r4,4(r16)
4001d10c:	80c00017 	ldw	r3,0(r16)
4001d110:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
4001d114:	81000117 	ldw	r4,4(r16)
4001d118:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
4001d11c:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
4001d120:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4001d124:	1001703a 	wrctl	status,r2
4001d128:	003fd706 	br	4001d088 <__alt_data_end+0xc001d088>

4001d12c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
4001d12c:	000170fa 	wrctl	ienable,zero
4001d130:	f800283a 	ret

4001d134 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
4001d134:	00840004 	movi	r2,4096
4001d138:	1140012e 	bgeu	r2,r5,4001d140 <alt_icache_flush+0xc>
4001d13c:	100b883a 	mov	r5,r2
4001d140:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
4001d144:	2005883a 	mov	r2,r4
4001d148:	2140092e 	bgeu	r4,r5,4001d170 <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
4001d14c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
4001d150:	10800804 	addi	r2,r2,32
4001d154:	117ffd36 	bltu	r2,r5,4001d14c <__alt_data_end+0xc001d14c>
4001d158:	0104303a 	nor	r2,zero,r4
4001d15c:	2885883a 	add	r2,r5,r2
4001d160:	1004d17a 	srli	r2,r2,5
4001d164:	10800044 	addi	r2,r2,1
4001d168:	1004917a 	slli	r2,r2,5
4001d16c:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
4001d170:	210007cc 	andi	r4,r4,31
4001d174:	20000126 	beq	r4,zero,4001d17c <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
4001d178:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
4001d17c:	0000203a 	flushp
4001d180:	f800283a 	ret

4001d184 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
4001d184:	213ffe84 	addi	r4,r4,-6
4001d188:	008003c4 	movi	r2,15
4001d18c:	11001636 	bltu	r2,r4,4001d1e8 <alt_exception_cause_generated_bad_addr+0x64>
4001d190:	200890ba 	slli	r4,r4,2
4001d194:	009000b4 	movhi	r2,16386
4001d198:	10b46a04 	addi	r2,r2,-11864
4001d19c:	2089883a 	add	r4,r4,r2
4001d1a0:	20800017 	ldw	r2,0(r4)
4001d1a4:	1000683a 	jmp	r2
4001d1a8:	4001d1f0 	cmpltui	zero,r8,1863
4001d1ac:	4001d1f0 	cmpltui	zero,r8,1863
4001d1b0:	4001d1e8 	cmpgeui	zero,r8,1863
4001d1b4:	4001d1e8 	cmpgeui	zero,r8,1863
4001d1b8:	4001d1e8 	cmpgeui	zero,r8,1863
4001d1bc:	4001d1f0 	cmpltui	zero,r8,1863
4001d1c0:	4001d1e8 	cmpgeui	zero,r8,1863
4001d1c4:	4001d1e8 	cmpgeui	zero,r8,1863
4001d1c8:	4001d1f0 	cmpltui	zero,r8,1863
4001d1cc:	4001d1f0 	cmpltui	zero,r8,1863
4001d1d0:	4001d1e8 	cmpgeui	zero,r8,1863
4001d1d4:	4001d1f0 	cmpltui	zero,r8,1863
4001d1d8:	4001d1e8 	cmpgeui	zero,r8,1863
4001d1dc:	4001d1e8 	cmpgeui	zero,r8,1863
4001d1e0:	4001d1e8 	cmpgeui	zero,r8,1863
4001d1e4:	4001d1f0 	cmpltui	zero,r8,1863
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
4001d1e8:	0005883a 	mov	r2,zero
4001d1ec:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
4001d1f0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
4001d1f4:	f800283a 	ret

4001d1f8 <atexit>:
4001d1f8:	200b883a 	mov	r5,r4
4001d1fc:	000f883a 	mov	r7,zero
4001d200:	000d883a 	mov	r6,zero
4001d204:	0009883a 	mov	r4,zero
4001d208:	001d2881 	jmpi	4001d288 <__register_exitproc>

4001d20c <memcmp>:
4001d20c:	01c000c4 	movi	r7,3
4001d210:	3980192e 	bgeu	r7,r6,4001d278 <memcmp+0x6c>
4001d214:	2144b03a 	or	r2,r4,r5
4001d218:	11c4703a 	and	r2,r2,r7
4001d21c:	10000f26 	beq	r2,zero,4001d25c <memcmp+0x50>
4001d220:	20800003 	ldbu	r2,0(r4)
4001d224:	28c00003 	ldbu	r3,0(r5)
4001d228:	10c0151e 	bne	r2,r3,4001d280 <memcmp+0x74>
4001d22c:	31bfff84 	addi	r6,r6,-2
4001d230:	01ffffc4 	movi	r7,-1
4001d234:	00000406 	br	4001d248 <memcmp+0x3c>
4001d238:	20800003 	ldbu	r2,0(r4)
4001d23c:	28c00003 	ldbu	r3,0(r5)
4001d240:	31bfffc4 	addi	r6,r6,-1
4001d244:	10c00e1e 	bne	r2,r3,4001d280 <memcmp+0x74>
4001d248:	21000044 	addi	r4,r4,1
4001d24c:	29400044 	addi	r5,r5,1
4001d250:	31fff91e 	bne	r6,r7,4001d238 <__alt_data_end+0xc001d238>
4001d254:	0005883a 	mov	r2,zero
4001d258:	f800283a 	ret
4001d25c:	20c00017 	ldw	r3,0(r4)
4001d260:	28800017 	ldw	r2,0(r5)
4001d264:	18bfee1e 	bne	r3,r2,4001d220 <__alt_data_end+0xc001d220>
4001d268:	31bfff04 	addi	r6,r6,-4
4001d26c:	21000104 	addi	r4,r4,4
4001d270:	29400104 	addi	r5,r5,4
4001d274:	39bff936 	bltu	r7,r6,4001d25c <__alt_data_end+0xc001d25c>
4001d278:	303fe91e 	bne	r6,zero,4001d220 <__alt_data_end+0xc001d220>
4001d27c:	003ff506 	br	4001d254 <__alt_data_end+0xc001d254>
4001d280:	10c5c83a 	sub	r2,r2,r3
4001d284:	f800283a 	ret

4001d288 <__register_exitproc>:
4001d288:	defffa04 	addi	sp,sp,-24
4001d28c:	dc000315 	stw	r16,12(sp)
4001d290:	041000b4 	movhi	r16,16386
4001d294:	840af504 	addi	r16,r16,11220
4001d298:	80c00017 	ldw	r3,0(r16)
4001d29c:	dc400415 	stw	r17,16(sp)
4001d2a0:	dfc00515 	stw	ra,20(sp)
4001d2a4:	18805217 	ldw	r2,328(r3)
4001d2a8:	2023883a 	mov	r17,r4
4001d2ac:	10003726 	beq	r2,zero,4001d38c <__register_exitproc+0x104>
4001d2b0:	10c00117 	ldw	r3,4(r2)
4001d2b4:	010007c4 	movi	r4,31
4001d2b8:	20c00e16 	blt	r4,r3,4001d2f4 <__register_exitproc+0x6c>
4001d2bc:	1a000044 	addi	r8,r3,1
4001d2c0:	8800221e 	bne	r17,zero,4001d34c <__register_exitproc+0xc4>
4001d2c4:	18c00084 	addi	r3,r3,2
4001d2c8:	18c7883a 	add	r3,r3,r3
4001d2cc:	18c7883a 	add	r3,r3,r3
4001d2d0:	12000115 	stw	r8,4(r2)
4001d2d4:	10c7883a 	add	r3,r2,r3
4001d2d8:	19400015 	stw	r5,0(r3)
4001d2dc:	0005883a 	mov	r2,zero
4001d2e0:	dfc00517 	ldw	ra,20(sp)
4001d2e4:	dc400417 	ldw	r17,16(sp)
4001d2e8:	dc000317 	ldw	r16,12(sp)
4001d2ec:	dec00604 	addi	sp,sp,24
4001d2f0:	f800283a 	ret
4001d2f4:	00900074 	movhi	r2,16385
4001d2f8:	10ac3204 	addi	r2,r2,-20280
4001d2fc:	10002626 	beq	r2,zero,4001d398 <__register_exitproc+0x110>
4001d300:	01006404 	movi	r4,400
4001d304:	d9400015 	stw	r5,0(sp)
4001d308:	d9800115 	stw	r6,4(sp)
4001d30c:	d9c00215 	stw	r7,8(sp)
4001d310:	000b0c80 	call	4000b0c8 <malloc>
4001d314:	d9400017 	ldw	r5,0(sp)
4001d318:	d9800117 	ldw	r6,4(sp)
4001d31c:	d9c00217 	ldw	r7,8(sp)
4001d320:	10001d26 	beq	r2,zero,4001d398 <__register_exitproc+0x110>
4001d324:	81000017 	ldw	r4,0(r16)
4001d328:	10000115 	stw	zero,4(r2)
4001d32c:	02000044 	movi	r8,1
4001d330:	22405217 	ldw	r9,328(r4)
4001d334:	0007883a 	mov	r3,zero
4001d338:	12400015 	stw	r9,0(r2)
4001d33c:	20805215 	stw	r2,328(r4)
4001d340:	10006215 	stw	zero,392(r2)
4001d344:	10006315 	stw	zero,396(r2)
4001d348:	883fde26 	beq	r17,zero,4001d2c4 <__alt_data_end+0xc001d2c4>
4001d34c:	18c9883a 	add	r4,r3,r3
4001d350:	2109883a 	add	r4,r4,r4
4001d354:	1109883a 	add	r4,r2,r4
4001d358:	21802215 	stw	r6,136(r4)
4001d35c:	01800044 	movi	r6,1
4001d360:	12406217 	ldw	r9,392(r2)
4001d364:	30cc983a 	sll	r6,r6,r3
4001d368:	4992b03a 	or	r9,r9,r6
4001d36c:	12406215 	stw	r9,392(r2)
4001d370:	21c04215 	stw	r7,264(r4)
4001d374:	01000084 	movi	r4,2
4001d378:	893fd21e 	bne	r17,r4,4001d2c4 <__alt_data_end+0xc001d2c4>
4001d37c:	11006317 	ldw	r4,396(r2)
4001d380:	218cb03a 	or	r6,r4,r6
4001d384:	11806315 	stw	r6,396(r2)
4001d388:	003fce06 	br	4001d2c4 <__alt_data_end+0xc001d2c4>
4001d38c:	18805304 	addi	r2,r3,332
4001d390:	18805215 	stw	r2,328(r3)
4001d394:	003fc606 	br	4001d2b0 <__alt_data_end+0xc001d2b0>
4001d398:	00bfffc4 	movi	r2,-1
4001d39c:	003fd006 	br	4001d2e0 <__alt_data_end+0xc001d2e0>
